
ese_motors_encoders.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e74  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004dc  08009048  08009048  00019048  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009524  08009524  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  08009524  08009524  00019524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800952c  0800952c  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800952c  0800952c  0001952c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009530  08009530  00019530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08009534  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000390  20000200  08009730  00020200  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000590  08009730  00020590  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018d14  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003533  00000000  00000000  00038f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001088  00000000  00000000  0003c478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f20  00000000  00000000  0003d500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025e62  00000000  00000000  0003e420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016310  00000000  00000000  00064282  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0195  00000000  00000000  0007a592  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015a727  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005440  00000000  00000000  0015a77c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000200 	.word	0x20000200
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800902c 	.word	0x0800902c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000204 	.word	0x20000204
 800020c:	0800902c 	.word	0x0800902c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b96e 	b.w	8000f9c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	468c      	mov	ip, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f040 8083 	bne.w	8000dee <__udivmoddi4+0x116>
 8000ce8:	428a      	cmp	r2, r1
 8000cea:	4617      	mov	r7, r2
 8000cec:	d947      	bls.n	8000d7e <__udivmoddi4+0xa6>
 8000cee:	fab2 f282 	clz	r2, r2
 8000cf2:	b142      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf4:	f1c2 0020 	rsb	r0, r2, #32
 8000cf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cfc:	4091      	lsls	r1, r2
 8000cfe:	4097      	lsls	r7, r2
 8000d00:	ea40 0c01 	orr.w	ip, r0, r1
 8000d04:	4094      	lsls	r4, r2
 8000d06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d10:	fa1f fe87 	uxth.w	lr, r7
 8000d14:	fb08 c116 	mls	r1, r8, r6, ip
 8000d18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x60>
 8000d24:	18fb      	adds	r3, r7, r3
 8000d26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d2a:	f080 8119 	bcs.w	8000f60 <__udivmoddi4+0x288>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 8116 	bls.w	8000f60 <__udivmoddi4+0x288>
 8000d34:	3e02      	subs	r6, #2
 8000d36:	443b      	add	r3, r7
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d40:	fb08 3310 	mls	r3, r8, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d4c:	45a6      	cmp	lr, r4
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x8c>
 8000d50:	193c      	adds	r4, r7, r4
 8000d52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d56:	f080 8105 	bcs.w	8000f64 <__udivmoddi4+0x28c>
 8000d5a:	45a6      	cmp	lr, r4
 8000d5c:	f240 8102 	bls.w	8000f64 <__udivmoddi4+0x28c>
 8000d60:	3802      	subs	r0, #2
 8000d62:	443c      	add	r4, r7
 8000d64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d68:	eba4 040e 	sub.w	r4, r4, lr
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	b11d      	cbz	r5, 8000d78 <__udivmoddi4+0xa0>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c5 4300 	strd	r4, r3, [r5]
 8000d78:	4631      	mov	r1, r6
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	b902      	cbnz	r2, 8000d82 <__udivmoddi4+0xaa>
 8000d80:	deff      	udf	#255	; 0xff
 8000d82:	fab2 f282 	clz	r2, r2
 8000d86:	2a00      	cmp	r2, #0
 8000d88:	d150      	bne.n	8000e2c <__udivmoddi4+0x154>
 8000d8a:	1bcb      	subs	r3, r1, r7
 8000d8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d90:	fa1f f887 	uxth.w	r8, r7
 8000d94:	2601      	movs	r6, #1
 8000d96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d9a:	0c21      	lsrs	r1, r4, #16
 8000d9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000da0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da4:	fb08 f30c 	mul.w	r3, r8, ip
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0xe4>
 8000dac:	1879      	adds	r1, r7, r1
 8000dae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0xe2>
 8000db4:	428b      	cmp	r3, r1
 8000db6:	f200 80e9 	bhi.w	8000f8c <__udivmoddi4+0x2b4>
 8000dba:	4684      	mov	ip, r0
 8000dbc:	1ac9      	subs	r1, r1, r3
 8000dbe:	b2a3      	uxth	r3, r4
 8000dc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dcc:	fb08 f800 	mul.w	r8, r8, r0
 8000dd0:	45a0      	cmp	r8, r4
 8000dd2:	d907      	bls.n	8000de4 <__udivmoddi4+0x10c>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x10a>
 8000ddc:	45a0      	cmp	r8, r4
 8000dde:	f200 80d9 	bhi.w	8000f94 <__udivmoddi4+0x2bc>
 8000de2:	4618      	mov	r0, r3
 8000de4:	eba4 0408 	sub.w	r4, r4, r8
 8000de8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dec:	e7bf      	b.n	8000d6e <__udivmoddi4+0x96>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0x12e>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80b1 	beq.w	8000f5a <__udivmoddi4+0x282>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x1cc>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0x140>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80b8 	bhi.w	8000f88 <__udivmoddi4+0x2b0>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	468c      	mov	ip, r1
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0a8      	beq.n	8000d78 <__udivmoddi4+0xa0>
 8000e26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e2a:	e7a5      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f603 	lsr.w	r6, r0, r3
 8000e34:	4097      	lsls	r7, r2
 8000e36:	fa01 f002 	lsl.w	r0, r1, r2
 8000e3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e3e:	40d9      	lsrs	r1, r3
 8000e40:	4330      	orrs	r0, r6
 8000e42:	0c03      	lsrs	r3, r0, #16
 8000e44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e48:	fa1f f887 	uxth.w	r8, r7
 8000e4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e54:	fb06 f108 	mul.w	r1, r6, r8
 8000e58:	4299      	cmp	r1, r3
 8000e5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e5e:	d909      	bls.n	8000e74 <__udivmoddi4+0x19c>
 8000e60:	18fb      	adds	r3, r7, r3
 8000e62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e66:	f080 808d 	bcs.w	8000f84 <__udivmoddi4+0x2ac>
 8000e6a:	4299      	cmp	r1, r3
 8000e6c:	f240 808a 	bls.w	8000f84 <__udivmoddi4+0x2ac>
 8000e70:	3e02      	subs	r6, #2
 8000e72:	443b      	add	r3, r7
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b281      	uxth	r1, r0
 8000e78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e84:	fb00 f308 	mul.w	r3, r0, r8
 8000e88:	428b      	cmp	r3, r1
 8000e8a:	d907      	bls.n	8000e9c <__udivmoddi4+0x1c4>
 8000e8c:	1879      	adds	r1, r7, r1
 8000e8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e92:	d273      	bcs.n	8000f7c <__udivmoddi4+0x2a4>
 8000e94:	428b      	cmp	r3, r1
 8000e96:	d971      	bls.n	8000f7c <__udivmoddi4+0x2a4>
 8000e98:	3802      	subs	r0, #2
 8000e9a:	4439      	add	r1, r7
 8000e9c:	1acb      	subs	r3, r1, r3
 8000e9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ea2:	e778      	b.n	8000d96 <__udivmoddi4+0xbe>
 8000ea4:	f1c6 0c20 	rsb	ip, r6, #32
 8000ea8:	fa03 f406 	lsl.w	r4, r3, r6
 8000eac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000eb0:	431c      	orrs	r4, r3
 8000eb2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000ebe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ec2:	431f      	orrs	r7, r3
 8000ec4:	0c3b      	lsrs	r3, r7, #16
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fa1f f884 	uxth.w	r8, r4
 8000ece:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ed2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ed6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eda:	458a      	cmp	sl, r1
 8000edc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee4:	d908      	bls.n	8000ef8 <__udivmoddi4+0x220>
 8000ee6:	1861      	adds	r1, r4, r1
 8000ee8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eec:	d248      	bcs.n	8000f80 <__udivmoddi4+0x2a8>
 8000eee:	458a      	cmp	sl, r1
 8000ef0:	d946      	bls.n	8000f80 <__udivmoddi4+0x2a8>
 8000ef2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ef6:	4421      	add	r1, r4
 8000ef8:	eba1 010a 	sub.w	r1, r1, sl
 8000efc:	b2bf      	uxth	r7, r7
 8000efe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f0a:	fb00 f808 	mul.w	r8, r0, r8
 8000f0e:	45b8      	cmp	r8, r7
 8000f10:	d907      	bls.n	8000f22 <__udivmoddi4+0x24a>
 8000f12:	19e7      	adds	r7, r4, r7
 8000f14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f18:	d22e      	bcs.n	8000f78 <__udivmoddi4+0x2a0>
 8000f1a:	45b8      	cmp	r8, r7
 8000f1c:	d92c      	bls.n	8000f78 <__udivmoddi4+0x2a0>
 8000f1e:	3802      	subs	r0, #2
 8000f20:	4427      	add	r7, r4
 8000f22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f26:	eba7 0708 	sub.w	r7, r7, r8
 8000f2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f2e:	454f      	cmp	r7, r9
 8000f30:	46c6      	mov	lr, r8
 8000f32:	4649      	mov	r1, r9
 8000f34:	d31a      	bcc.n	8000f6c <__udivmoddi4+0x294>
 8000f36:	d017      	beq.n	8000f68 <__udivmoddi4+0x290>
 8000f38:	b15d      	cbz	r5, 8000f52 <__udivmoddi4+0x27a>
 8000f3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f46:	40f2      	lsrs	r2, r6
 8000f48:	ea4c 0202 	orr.w	r2, ip, r2
 8000f4c:	40f7      	lsrs	r7, r6
 8000f4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f52:	2600      	movs	r6, #0
 8000f54:	4631      	mov	r1, r6
 8000f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e70b      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e9      	b.n	8000d38 <__udivmoddi4+0x60>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6fd      	b.n	8000d64 <__udivmoddi4+0x8c>
 8000f68:	4543      	cmp	r3, r8
 8000f6a:	d2e5      	bcs.n	8000f38 <__udivmoddi4+0x260>
 8000f6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f70:	eb69 0104 	sbc.w	r1, r9, r4
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7df      	b.n	8000f38 <__udivmoddi4+0x260>
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e7d2      	b.n	8000f22 <__udivmoddi4+0x24a>
 8000f7c:	4660      	mov	r0, ip
 8000f7e:	e78d      	b.n	8000e9c <__udivmoddi4+0x1c4>
 8000f80:	4681      	mov	r9, r0
 8000f82:	e7b9      	b.n	8000ef8 <__udivmoddi4+0x220>
 8000f84:	4666      	mov	r6, ip
 8000f86:	e775      	b.n	8000e74 <__udivmoddi4+0x19c>
 8000f88:	4630      	mov	r0, r6
 8000f8a:	e74a      	b.n	8000e22 <__udivmoddi4+0x14a>
 8000f8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f90:	4439      	add	r1, r7
 8000f92:	e713      	b.n	8000dbc <__udivmoddi4+0xe4>
 8000f94:	3802      	subs	r0, #2
 8000f96:	443c      	add	r4, r7
 8000f98:	e724      	b.n	8000de4 <__udivmoddi4+0x10c>
 8000f9a:	bf00      	nop

08000f9c <__aeabi_idiv0>:
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop

08000fa0 <Ctrl_Init_SetTimer>:
/*	@brief	Initialization of the motor control configuration structure with timer settings
 *	@param	Motor is a Ctrl_Struct structure
 *	@param 	htim is the TIM handle
 *	@retval 0
 */
uint8_t Ctrl_Init_SetTimer(ASSERV_HandleTypeDef* Control, TIM_HandleTypeDef *htim){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	6039      	str	r1, [r7, #0]
	Control->Timer = htim;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	683a      	ldr	r2, [r7, #0]
 8000fae:	601a      	str	r2, [r3, #0]

	HAL_TIM_Base_Start_IT(Control->Timer);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f003 f96f 	bl	8004298 <HAL_TIM_Base_Start_IT>
	return 0;
 8000fba:	2300      	movs	r3, #0
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	0000      	movs	r0, r0
	...

08000fc8 <Ctrl_SpeedControl>:

/*	@brief	Speed control function called with a 50Hz frequency
 *	@param	None
 *	@retval 0
 */
float Ctrl_SpeedControl(MOT_HandleTypeDef* Motor, ENC_HandleTypeDef* Encoder){
 8000fc8:	b5b0      	push	{r4, r5, r7, lr}
 8000fca:	b088      	sub	sp, #32
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	6039      	str	r1, [r7, #0]
	// Récupération du nombre de ticks
	int16_t ticks = ENC_GetCnt(Encoder);
 8000fd2:	6838      	ldr	r0, [r7, #0]
 8000fd4:	f000 f91d 	bl	8001212 <ENC_GetCnt>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	83fb      	strh	r3, [r7, #30]
	if(ticks < 0) ticks = ticks * (-1);
 8000fdc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	da03      	bge.n	8000fec <Ctrl_SpeedControl+0x24>
 8000fe4:	8bfb      	ldrh	r3, [r7, #30]
 8000fe6:	425b      	negs	r3, r3
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	83fb      	strh	r3, [r7, #30]

	// Calcul de la vitesse du moteur
	int freq_codeuse = SPEED_CONTROL_FREQUENCY * ticks;
 8000fec:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000ff0:	2232      	movs	r2, #50	; 0x32
 8000ff2:	fb02 f303 	mul.w	r3, r2, r3
 8000ff6:	617b      	str	r3, [r7, #20]
	float speed = ((float)freq_codeuse * ((float)WHEEL_PERIMETER/Encoder->TicksPerRev));
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	ee07 3a90 	vmov	s15, r3
 8000ffe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	899b      	ldrh	r3, [r3, #12]
 8001006:	ee07 3a90 	vmov	s15, r3
 800100a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800100e:	ed9f 6a5e 	vldr	s12, [pc, #376]	; 8001188 <Ctrl_SpeedControl+0x1c0>
 8001012:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800101a:	edc7 7a04 	vstr	s15, [r7, #16]
	// Vitesse calculée en mm/sec

	// Calcul de l'erreur
	if(acc < 1) acc+=0.01;
 800101e:	4b5b      	ldr	r3, [pc, #364]	; (800118c <Ctrl_SpeedControl+0x1c4>)
 8001020:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001024:	f04f 0200 	mov.w	r2, #0
 8001028:	4b59      	ldr	r3, [pc, #356]	; (8001190 <Ctrl_SpeedControl+0x1c8>)
 800102a:	f7ff fd87 	bl	8000b3c <__aeabi_dcmplt>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d00d      	beq.n	8001050 <Ctrl_SpeedControl+0x88>
 8001034:	4b55      	ldr	r3, [pc, #340]	; (800118c <Ctrl_SpeedControl+0x1c4>)
 8001036:	e9d3 0100 	ldrd	r0, r1, [r3]
 800103a:	a34f      	add	r3, pc, #316	; (adr r3, 8001178 <Ctrl_SpeedControl+0x1b0>)
 800103c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001040:	f7ff f954 	bl	80002ec <__adddf3>
 8001044:	4602      	mov	r2, r0
 8001046:	460b      	mov	r3, r1
 8001048:	4950      	ldr	r1, [pc, #320]	; (800118c <Ctrl_SpeedControl+0x1c4>)
 800104a:	e9c1 2300 	strd	r2, r3, [r1]
 800104e:	e005      	b.n	800105c <Ctrl_SpeedControl+0x94>
	else acc = 1;
 8001050:	494e      	ldr	r1, [pc, #312]	; (800118c <Ctrl_SpeedControl+0x1c4>)
 8001052:	f04f 0200 	mov.w	r2, #0
 8001056:	4b4e      	ldr	r3, [pc, #312]	; (8001190 <Ctrl_SpeedControl+0x1c8>)
 8001058:	e9c1 2300 	strd	r2, r3, [r1]

	float erreur = consigne * acc - speed;
 800105c:	4b4d      	ldr	r3, [pc, #308]	; (8001194 <Ctrl_SpeedControl+0x1cc>)
 800105e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001062:	4b4a      	ldr	r3, [pc, #296]	; (800118c <Ctrl_SpeedControl+0x1c4>)
 8001064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001068:	f7ff faf6 	bl	8000658 <__aeabi_dmul>
 800106c:	4602      	mov	r2, r0
 800106e:	460b      	mov	r3, r1
 8001070:	4614      	mov	r4, r2
 8001072:	461d      	mov	r5, r3
 8001074:	6938      	ldr	r0, [r7, #16]
 8001076:	f7ff fa97 	bl	80005a8 <__aeabi_f2d>
 800107a:	4602      	mov	r2, r0
 800107c:	460b      	mov	r3, r1
 800107e:	4620      	mov	r0, r4
 8001080:	4629      	mov	r1, r5
 8001082:	f7ff f931 	bl	80002e8 <__aeabi_dsub>
 8001086:	4602      	mov	r2, r0
 8001088:	460b      	mov	r3, r1
 800108a:	4610      	mov	r0, r2
 800108c:	4619      	mov	r1, r3
 800108e:	f7ff fdbb 	bl	8000c08 <__aeabi_d2f>
 8001092:	4603      	mov	r3, r0
 8001094:	60fb      	str	r3, [r7, #12]
	float correcteurI = Motor->Ki * (erreur + Motor->erreurPrecedente)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6a1b      	ldr	r3, [r3, #32]
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff fa84 	bl	80005a8 <__aeabi_f2d>
 80010a0:	4604      	mov	r4, r0
 80010a2:	460d      	mov	r5, r1
 80010a4:	68f8      	ldr	r0, [r7, #12]
 80010a6:	f7ff fa7f 	bl	80005a8 <__aeabi_f2d>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80010b0:	f7ff f91c 	bl	80002ec <__adddf3>
 80010b4:	4602      	mov	r2, r0
 80010b6:	460b      	mov	r3, r1
 80010b8:	4620      	mov	r0, r4
 80010ba:	4629      	mov	r1, r5
 80010bc:	f7ff facc 	bl	8000658 <__aeabi_dmul>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4610      	mov	r0, r2
 80010c6:	4619      	mov	r1, r3
			* (1/((float)SPEED_CONTROL_FREQUENCY * 2))
 80010c8:	a32d      	add	r3, pc, #180	; (adr r3, 8001180 <Ctrl_SpeedControl+0x1b8>)
 80010ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ce:	f7ff fac3 	bl	8000658 <__aeabi_dmul>
 80010d2:	4602      	mov	r2, r0
 80010d4:	460b      	mov	r3, r1
 80010d6:	4610      	mov	r0, r2
 80010d8:	4619      	mov	r1, r3
			+ Motor->siPrecedente;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80010e0:	f7ff f904 	bl	80002ec <__adddf3>
 80010e4:	4602      	mov	r2, r0
 80010e6:	460b      	mov	r3, r1
	float correcteurI = Motor->Ki * (erreur + Motor->erreurPrecedente)
 80010e8:	4610      	mov	r0, r2
 80010ea:	4619      	mov	r1, r3
 80010ec:	f7ff fd8c 	bl	8000c08 <__aeabi_d2f>
 80010f0:	4603      	mov	r3, r0
 80010f2:	60bb      	str	r3, [r7, #8]

	// Correcteur PI
	float s = Motor->Kp * erreur + correcteurI;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	ed93 7a07 	vldr	s14, [r3, #28]
 80010fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80010fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001102:	ed97 7a02 	vldr	s14, [r7, #8]
 8001106:	ee77 7a27 	vadd.f32	s15, s14, s15
 800110a:	edc7 7a06 	vstr	s15, [r7, #24]
	if(s >= 80) 	s = 80;
 800110e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001112:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001198 <Ctrl_SpeedControl+0x1d0>
 8001116:	eef4 7ac7 	vcmpe.f32	s15, s14
 800111a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800111e:	db02      	blt.n	8001126 <Ctrl_SpeedControl+0x15e>
 8001120:	4b1e      	ldr	r3, [pc, #120]	; (800119c <Ctrl_SpeedControl+0x1d4>)
 8001122:	61bb      	str	r3, [r7, #24]
 8001124:	e009      	b.n	800113a <Ctrl_SpeedControl+0x172>
	else if(s < 0) 	s = 0;
 8001126:	edd7 7a06 	vldr	s15, [r7, #24]
 800112a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800112e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001132:	d502      	bpl.n	800113a <Ctrl_SpeedControl+0x172>
 8001134:	f04f 0300 	mov.w	r3, #0
 8001138:	61bb      	str	r3, [r7, #24]

	Motor->siPrecedente = correcteurI;
 800113a:	68b8      	ldr	r0, [r7, #8]
 800113c:	f7ff fa34 	bl	80005a8 <__aeabi_f2d>
 8001140:	4602      	mov	r2, r0
 8001142:	460b      	mov	r3, r1
 8001144:	6879      	ldr	r1, [r7, #4]
 8001146:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	Motor->erreurPrecedente = erreur;
 800114a:	68f8      	ldr	r0, [r7, #12]
 800114c:	f7ff fa2c 	bl	80005a8 <__aeabi_f2d>
 8001150:	4602      	mov	r2, r0
 8001152:	460b      	mov	r3, r1
 8001154:	6879      	ldr	r1, [r7, #4]
 8001156:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	MOT_SetDutyCycle(Motor,s);
 800115a:	ed97 0a06 	vldr	s0, [r7, #24]
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f000 f91e 	bl	80013a0 <MOT_SetDutyCycle>

	return s;
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	ee07 3a90 	vmov	s15, r3
}
 800116a:	eeb0 0a67 	vmov.f32	s0, s15
 800116e:	3720      	adds	r7, #32
 8001170:	46bd      	mov	sp, r7
 8001172:	bdb0      	pop	{r4, r5, r7, pc}
 8001174:	f3af 8000 	nop.w
 8001178:	47ae147b 	.word	0x47ae147b
 800117c:	3f847ae1 	.word	0x3f847ae1
 8001180:	40000000 	.word	0x40000000
 8001184:	3f847ae1 	.word	0x3f847ae1
 8001188:	42f82db2 	.word	0x42f82db2
 800118c:	20000220 	.word	0x20000220
 8001190:	3ff00000 	.word	0x3ff00000
 8001194:	20000000 	.word	0x20000000
 8001198:	42a00000 	.word	0x42a00000
 800119c:	42a00000 	.word	0x42a00000

080011a0 <ENC_InitTimer>:
 *	@param 	htim is a TIM handle
 *  @param  Channel_A is the TIM Channels
 *  @param  Channel_B is the TIM Channels
 *	@retval HAL_Status
 */
uint8_t ENC_InitTimer(ENC_HandleTypeDef* Encoder, TIM_HandleTypeDef *htim, uint32_t Channel_A, uint32_t Channel_B){
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
 80011ac:	603b      	str	r3, [r7, #0]
	Encoder->Timer = htim;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	68ba      	ldr	r2, [r7, #8]
 80011b2:	601a      	str	r2, [r3, #0]
	Encoder->Timer_Channel_A = Channel_A;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	605a      	str	r2, [r3, #4]
	Encoder->Timer_Channel_B = Channel_B;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	683a      	ldr	r2, [r7, #0]
 80011be:	609a      	str	r2, [r3, #8]

	if(HAL_OK != HAL_TIM_Encoder_Start(Encoder->Timer, Encoder->Timer_Channel_A & Encoder->Timer_Channel_B))
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	6818      	ldr	r0, [r3, #0]
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	685a      	ldr	r2, [r3, #4]
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	4013      	ands	r3, r2
 80011ce:	4619      	mov	r1, r3
 80011d0:	f003 fa9a 	bl	8004708 <HAL_TIM_Encoder_Start>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <ENC_InitTimer+0x3e>
		return 1;
 80011da:	2301      	movs	r3, #1
 80011dc:	e000      	b.n	80011e0 <ENC_InitTimer+0x40>

	return 0;
 80011de:	2300      	movs	r3, #0
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <ENC_SetTicksPerRev>:

/*	@brief	Set the TicksPerRev value of the encoder
 *	@param	Encoder is a ENC_HandleTypeDef
 *	@param 	ticksPerRev value
 */
void ENC_SetTicksPerRev(ENC_HandleTypeDef* Encoder, float ticksPerRev){
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	ed87 0a00 	vstr	s0, [r7]
	Encoder->TicksPerRev = ticksPerRev;
 80011f4:	edd7 7a00 	vldr	s15, [r7]
 80011f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011fc:	ee17 3a90 	vmov	r3, s15
 8001200:	b29a      	uxth	r2, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	819a      	strh	r2, [r3, #12]
}
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr

08001212 <ENC_GetCnt>:

/*	@brief	Get the counter value of the timer
 *	@param	Encoder is a Enc_Struct structure
 *	@retval CNT value of the timer
 */
int16_t ENC_GetCnt(ENC_HandleTypeDef* Encoder){
 8001212:	b580      	push	{r7, lr}
 8001214:	b084      	sub	sp, #16
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
	//uint16_t ticks = __HAL_TIM_GET_COUNTER(Encoder->Timer);
	int16_t ticks = Encoder->Timer->Instance->CNT;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001222:	81fb      	strh	r3, [r7, #14]
	ENC_ResetCnt(Encoder);
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f000 f806 	bl	8001236 <ENC_ResetCnt>

	return ticks;
 800122a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800122e:	4618      	mov	r0, r3
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <ENC_ResetCnt>:

/*	@brief	Reset the counter value of the timer
 *	@param	Encoder is a Enc_Struct structure
 *	@retval 0
 */
uint8_t ENC_ResetCnt(ENC_HandleTypeDef* Encoder){
 8001236:	b480      	push	{r7}
 8001238:	b083      	sub	sp, #12
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
	Encoder->Timer->Instance->CNT = 0;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2200      	movs	r2, #0
 8001246:	625a      	str	r2, [r3, #36]	; 0x24

	return 0;
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <MOT_InitTimer>:
 *	@param	Motor is a MOT_HandleTypeDef
 *	@param 	htim is a TIM handle
 *  @param  Channel is the TIM Channel used
 *	@retval HAL status
 */
uint8_t MOT_InitTimer(MOT_HandleTypeDef* Motor, TIM_HandleTypeDef *htim, uint32_t Channel){
 8001256:	b580      	push	{r7, lr}
 8001258:	b084      	sub	sp, #16
 800125a:	af00      	add	r7, sp, #0
 800125c:	60f8      	str	r0, [r7, #12]
 800125e:	60b9      	str	r1, [r7, #8]
 8001260:	607a      	str	r2, [r7, #4]
	Motor->Timer_Handle = htim;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	68ba      	ldr	r2, [r7, #8]
 8001266:	601a      	str	r2, [r3, #0]
	Motor->Timer_Channel = Channel;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	605a      	str	r2, [r3, #4]

	if(HAL_OK != HAL_TIM_PWM_Start(Motor->Timer_Handle, Motor->Timer_Channel))
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	4619      	mov	r1, r3
 8001278:	4610      	mov	r0, r2
 800127a:	f003 f8d7 	bl	800442c <HAL_TIM_PWM_Start>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MOT_InitTimer+0x32>
		return 1;
 8001284:	2301      	movs	r3, #1
 8001286:	e000      	b.n	800128a <MOT_InitTimer+0x34>

	return 0;
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <MOT_InitGPIOs>:
 *  @param  IN1_GPIO_Pin specifies the port bit
 *	@param 	IN2_GPIOx is a GPIOx where x can be (A..K) to select the GPIO peripheral
 *  @param  IN2_GPIO_Pin specifies the port bit
 */
void MOT_InitGPIOs(MOT_HandleTypeDef* Motor, GPIO_TypeDef* IN1_GPIOx, uint16_t IN1_GPIO_Pin,
		GPIO_TypeDef* IN2_GPIOx, uint16_t IN2_GPIO_Pin){
 8001292:	b480      	push	{r7}
 8001294:	b085      	sub	sp, #20
 8001296:	af00      	add	r7, sp, #0
 8001298:	60f8      	str	r0, [r7, #12]
 800129a:	60b9      	str	r1, [r7, #8]
 800129c:	603b      	str	r3, [r7, #0]
 800129e:	4613      	mov	r3, r2
 80012a0:	80fb      	strh	r3, [r7, #6]
	Motor->IN1_GPIOx = IN1_GPIOx;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	68ba      	ldr	r2, [r7, #8]
 80012a6:	609a      	str	r2, [r3, #8]
	Motor->IN1_GPIO_Pin = IN1_GPIO_Pin;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	88fa      	ldrh	r2, [r7, #6]
 80012ac:	819a      	strh	r2, [r3, #12]
	Motor->IN2_GPIOx = IN2_GPIOx;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	683a      	ldr	r2, [r7, #0]
 80012b2:	611a      	str	r2, [r3, #16]
	Motor->IN2_GPIO_Pin = IN2_GPIO_Pin;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	8b3a      	ldrh	r2, [r7, #24]
 80012b8:	829a      	strh	r2, [r3, #20]
}
 80012ba:	bf00      	nop
 80012bc:	3714      	adds	r7, #20
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <MOT_SetCoeff>:
/**	@brief	Set coefficient for the error correction of the motor
 *	@param	Motor is a MOT_HandleTypeDef
 *	@param 	Kp coefficient
 *	@param 	Ki coefficient
 */
void MOT_SetCoeff(MOT_HandleTypeDef* Motor, float Kp, float Ki){
 80012c6:	b480      	push	{r7}
 80012c8:	b085      	sub	sp, #20
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	60f8      	str	r0, [r7, #12]
 80012ce:	ed87 0a02 	vstr	s0, [r7, #8]
 80012d2:	edc7 0a01 	vstr	s1, [r7, #4]
	Motor->Kp = Kp;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	68ba      	ldr	r2, [r7, #8]
 80012da:	61da      	str	r2, [r3, #28]
	Motor->Ki = Ki;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	621a      	str	r2, [r3, #32]
}
 80012e2:	bf00      	nop
 80012e4:	3714      	adds	r7, #20
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <MOT_SetDirection>:
 *		@arg	MOT_FUNCTIONS_STOP
 *		@arg 	MOT_FUNCTIONS_FORWARD
 *		@arg 	MOT_FUNCTIONS_REVERSE
 */

void MOT_SetDirection(MOT_HandleTypeDef* Motor, uint8_t direction){
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b082      	sub	sp, #8
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
 80012f6:	460b      	mov	r3, r1
 80012f8:	70fb      	strb	r3, [r7, #3]
	switch(direction){
 80012fa:	78fb      	ldrb	r3, [r7, #3]
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d028      	beq.n	8001352 <MOT_SetDirection+0x64>
 8001300:	2b02      	cmp	r3, #2
 8001302:	dc37      	bgt.n	8001374 <MOT_SetDirection+0x86>
 8001304:	2b00      	cmp	r3, #0
 8001306:	d002      	beq.n	800130e <MOT_SetDirection+0x20>
 8001308:	2b01      	cmp	r3, #1
 800130a:	d011      	beq.n	8001330 <MOT_SetDirection+0x42>
 800130c:	e032      	b.n	8001374 <MOT_SetDirection+0x86>

	case MOT_FUNCTIONS_STOP:
		HAL_GPIO_WritePin(Motor->IN1_GPIOx, Motor->IN1_GPIO_Pin, GPIO_PIN_RESET);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6898      	ldr	r0, [r3, #8]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	899b      	ldrh	r3, [r3, #12]
 8001316:	2200      	movs	r2, #0
 8001318:	4619      	mov	r1, r3
 800131a:	f002 f9d1 	bl	80036c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor->IN2_GPIOx, Motor->IN2_GPIO_Pin, GPIO_PIN_RESET);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6918      	ldr	r0, [r3, #16]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	8a9b      	ldrh	r3, [r3, #20]
 8001326:	2200      	movs	r2, #0
 8001328:	4619      	mov	r1, r3
 800132a:	f002 f9c9 	bl	80036c0 <HAL_GPIO_WritePin>
		break;
 800132e:	e032      	b.n	8001396 <MOT_SetDirection+0xa8>

	case MOT_FUNCTIONS_FORWARD:
		HAL_GPIO_WritePin(Motor->IN1_GPIOx, Motor->IN1_GPIO_Pin, GPIO_PIN_SET);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6898      	ldr	r0, [r3, #8]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	899b      	ldrh	r3, [r3, #12]
 8001338:	2201      	movs	r2, #1
 800133a:	4619      	mov	r1, r3
 800133c:	f002 f9c0 	bl	80036c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor->IN2_GPIOx, Motor->IN2_GPIO_Pin, GPIO_PIN_RESET);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6918      	ldr	r0, [r3, #16]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	8a9b      	ldrh	r3, [r3, #20]
 8001348:	2200      	movs	r2, #0
 800134a:	4619      	mov	r1, r3
 800134c:	f002 f9b8 	bl	80036c0 <HAL_GPIO_WritePin>
		break;
 8001350:	e021      	b.n	8001396 <MOT_SetDirection+0xa8>

	case MOT_FUNCTIONS_REVERSE:
		HAL_GPIO_WritePin(Motor->IN1_GPIOx, Motor->IN1_GPIO_Pin, GPIO_PIN_RESET);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6898      	ldr	r0, [r3, #8]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	899b      	ldrh	r3, [r3, #12]
 800135a:	2200      	movs	r2, #0
 800135c:	4619      	mov	r1, r3
 800135e:	f002 f9af 	bl	80036c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor->IN2_GPIOx, Motor->IN2_GPIO_Pin, GPIO_PIN_SET);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6918      	ldr	r0, [r3, #16]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	8a9b      	ldrh	r3, [r3, #20]
 800136a:	2201      	movs	r2, #1
 800136c:	4619      	mov	r1, r3
 800136e:	f002 f9a7 	bl	80036c0 <HAL_GPIO_WritePin>
		break;
 8001372:	e010      	b.n	8001396 <MOT_SetDirection+0xa8>

	default:
		HAL_GPIO_WritePin(Motor->IN1_GPIOx, Motor->IN1_GPIO_Pin, GPIO_PIN_RESET);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6898      	ldr	r0, [r3, #8]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	899b      	ldrh	r3, [r3, #12]
 800137c:	2200      	movs	r2, #0
 800137e:	4619      	mov	r1, r3
 8001380:	f002 f99e 	bl	80036c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor->IN2_GPIOx, Motor->IN2_GPIO_Pin, GPIO_PIN_RESET);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6918      	ldr	r0, [r3, #16]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	8a9b      	ldrh	r3, [r3, #20]
 800138c:	2200      	movs	r2, #0
 800138e:	4619      	mov	r1, r3
 8001390:	f002 f996 	bl	80036c0 <HAL_GPIO_WritePin>
	}
}
 8001394:	bf00      	nop
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
	...

080013a0 <MOT_SetDutyCycle>:

/*	@brief	Set the duty cycle of the PWM signal
 *	@param	Motor is a MOT_HandleTypeDef
 *	@param	duty_cycle is value between 0 and 100
 */
void MOT_SetDutyCycle(MOT_HandleTypeDef* Motor, float duty_cycle){
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	ed87 0a00 	vstr	s0, [r7]
	if(duty_cycle > 80) duty_cycle = 80;
 80013ac:	edd7 7a00 	vldr	s15, [r7]
 80013b0:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800146c <MOT_SetDutyCycle+0xcc>
 80013b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013bc:	dd02      	ble.n	80013c4 <MOT_SetDutyCycle+0x24>
 80013be:	4b2c      	ldr	r3, [pc, #176]	; (8001470 <MOT_SetDutyCycle+0xd0>)
 80013c0:	603b      	str	r3, [r7, #0]
 80013c2:	e009      	b.n	80013d8 <MOT_SetDutyCycle+0x38>
	else if(duty_cycle < 0) duty_cycle = 0;
 80013c4:	edd7 7a00 	vldr	s15, [r7]
 80013c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d0:	d502      	bpl.n	80013d8 <MOT_SetDutyCycle+0x38>
 80013d2:	f04f 0300 	mov.w	r3, #0
 80013d6:	603b      	str	r3, [r7, #0]

	float pulse = (duty_cycle / 100) * (float)MOT_TIM_PERIOD;
 80013d8:	ed97 7a00 	vldr	s14, [r7]
 80013dc:	eddf 6a25 	vldr	s13, [pc, #148]	; 8001474 <MOT_SetDutyCycle+0xd4>
 80013e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013e4:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001478 <MOT_SetDutyCycle+0xd8>
 80013e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013ec:	edc7 7a03 	vstr	s15, [r7, #12]

	__HAL_TIM_SET_COMPARE(Motor->Timer_Handle, Motor->Timer_Channel, (uint32_t)pulse);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d10a      	bne.n	800140e <MOT_SetDutyCycle+0x6e>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8001402:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001406:	ee17 2a90 	vmov	r2, s15
 800140a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800140c:	e027      	b.n	800145e <MOT_SetDutyCycle+0xbe>
	__HAL_TIM_SET_COMPARE(Motor->Timer_Handle, Motor->Timer_Channel, (uint32_t)pulse);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	2b04      	cmp	r3, #4
 8001414:	d10a      	bne.n	800142c <MOT_SetDutyCycle+0x8c>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001420:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001424:	ee17 3a90 	vmov	r3, s15
 8001428:	6393      	str	r3, [r2, #56]	; 0x38
}
 800142a:	e018      	b.n	800145e <MOT_SetDutyCycle+0xbe>
	__HAL_TIM_SET_COMPARE(Motor->Timer_Handle, Motor->Timer_Channel, (uint32_t)pulse);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	2b08      	cmp	r3, #8
 8001432:	d10a      	bne.n	800144a <MOT_SetDutyCycle+0xaa>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	edd7 7a03 	vldr	s15, [r7, #12]
 800143e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001442:	ee17 3a90 	vmov	r3, s15
 8001446:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001448:	e009      	b.n	800145e <MOT_SetDutyCycle+0xbe>
	__HAL_TIM_SET_COMPARE(Motor->Timer_Handle, Motor->Timer_Channel, (uint32_t)pulse);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	edd7 7a03 	vldr	s15, [r7, #12]
 8001454:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001458:	ee17 3a90 	vmov	r3, s15
 800145c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800145e:	bf00      	nop
 8001460:	3714      	adds	r7, #20
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	42a00000 	.word	0x42a00000
 8001470:	42a00000 	.word	0x42a00000
 8001474:	42c80000 	.word	0x42c80000
 8001478:	45520000 	.word	0x45520000

0800147c <__io_putchar>:
/**
 * Fonction indispensable pour utiliser printf() sur la liaison uart
 * @param ch Caractère à écrire sur la liaison uart
 * @return Caractère écrit sur la liaison uart
 */
int __io_putchar(int ch) {
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(shell_huart, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001484:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <__io_putchar+0x24>)
 8001486:	6818      	ldr	r0, [r3, #0]
 8001488:	1d39      	adds	r1, r7, #4
 800148a:	f04f 33ff 	mov.w	r3, #4294967295
 800148e:	2201      	movs	r2, #1
 8001490:	f004 f8c1 	bl	8005616 <HAL_UART_Transmit>
	return ch;
 8001494:	687b      	ldr	r3, [r7, #4]
}
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000228 	.word	0x20000228

080014a4 <uart_write>:
 * Écriture sur la liaison uart
 * @param s Chaîne de caractères à écrire sur la liaison uart
 * @param size Longueur de la chaîne de caractère
 * @return size
 */
int uart_write(char *s, uint16_t size) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	460b      	mov	r3, r1
 80014ae:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(shell_huart, (uint8_t*)s, size, 0xFFFF);
 80014b0:	4b06      	ldr	r3, [pc, #24]	; (80014cc <uart_write+0x28>)
 80014b2:	6818      	ldr	r0, [r3, #0]
 80014b4:	887a      	ldrh	r2, [r7, #2]
 80014b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014ba:	6879      	ldr	r1, [r7, #4]
 80014bc:	f004 f8ab 	bl	8005616 <HAL_UART_Transmit>
	return size;
 80014c0:	887b      	ldrh	r3, [r7, #2]
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000228 	.word	0x20000228

080014d0 <sh_help>:
 * @brief	Affichage du menu d'aide sur le shell
 * @param	argc
 * @param	argv
 * @retval	0
 */
int sh_help(int argc, char ** argv) {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
	int i;
	for(i = 0 ; i < shell_func_list_size ; i++) {
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	e017      	b.n	8001510 <sh_help+0x40>
		printf("%s : %s\r\n", shell_func_list[i].cmd, shell_func_list[i].description);
 80014e0:	4910      	ldr	r1, [pc, #64]	; (8001524 <sh_help+0x54>)
 80014e2:	68fa      	ldr	r2, [r7, #12]
 80014e4:	4613      	mov	r3, r2
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	4413      	add	r3, r2
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	440b      	add	r3, r1
 80014ee:	6819      	ldr	r1, [r3, #0]
 80014f0:	480c      	ldr	r0, [pc, #48]	; (8001524 <sh_help+0x54>)
 80014f2:	68fa      	ldr	r2, [r7, #12]
 80014f4:	4613      	mov	r3, r2
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	4413      	add	r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	4403      	add	r3, r0
 80014fe:	3308      	adds	r3, #8
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	461a      	mov	r2, r3
 8001504:	4808      	ldr	r0, [pc, #32]	; (8001528 <sh_help+0x58>)
 8001506:	f005 fc9d 	bl	8006e44 <iprintf>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	3301      	adds	r3, #1
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	4b06      	ldr	r3, [pc, #24]	; (800152c <sh_help+0x5c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	68fa      	ldr	r2, [r7, #12]
 8001516:	429a      	cmp	r2, r3
 8001518:	dbe2      	blt.n	80014e0 <sh_help+0x10>
	}
	return 0;
 800151a:	2300      	movs	r3, #0
}
 800151c:	4618      	mov	r0, r3
 800151e:	3710      	adds	r7, #16
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	2000025c 	.word	0x2000025c
 8001528:	08009048 	.word	0x08009048
 800152c:	20000258 	.word	0x20000258

08001530 <shell_init>:

/**
 * @brief	Initialisation du shell
 */
void shell_init(UART_HandleTypeDef* huart) {
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
	shell_huart = huart;
 8001538:	4a13      	ldr	r2, [pc, #76]	; (8001588 <shell_init+0x58>)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6013      	str	r3, [r2, #0]

	printf("\r\n\r\n===== Shell =====\r\n");
 800153e:	4813      	ldr	r0, [pc, #76]	; (800158c <shell_init+0x5c>)
 8001540:	f005 fd06 	bl	8006f50 <puts>
	uart_write(prompt,sizeof(prompt));
 8001544:	2111      	movs	r1, #17
 8001546:	4812      	ldr	r0, [pc, #72]	; (8001590 <shell_init+0x60>)
 8001548:	f7ff ffac 	bl	80014a4 <uart_write>
	HAL_UART_Receive_IT(shell_huart, (uint8_t*)&c, 1);
 800154c:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <shell_init+0x58>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2201      	movs	r2, #1
 8001552:	4910      	ldr	r1, [pc, #64]	; (8001594 <shell_init+0x64>)
 8001554:	4618      	mov	r0, r3
 8001556:	f004 f8f0 	bl	800573a <HAL_UART_Receive_IT>

	shell_add("help", sh_help, (char *)"help");
 800155a:	4a0f      	ldr	r2, [pc, #60]	; (8001598 <shell_init+0x68>)
 800155c:	490f      	ldr	r1, [pc, #60]	; (800159c <shell_init+0x6c>)
 800155e:	480e      	ldr	r0, [pc, #56]	; (8001598 <shell_init+0x68>)
 8001560:	f000 f81e 	bl	80015a0 <shell_add>

	for (int i = 0 ; i < 3 ; i++) {
 8001564:	2300      	movs	r3, #0
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	e005      	b.n	8001576 <shell_init+0x46>
		HAL_Delay(200);
 800156a:	20c8      	movs	r0, #200	; 0xc8
 800156c:	f001 f97c 	bl	8002868 <HAL_Delay>
	for (int i = 0 ; i < 3 ; i++) {
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	3301      	adds	r3, #1
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	2b02      	cmp	r3, #2
 800157a:	ddf6      	ble.n	800156a <shell_init+0x3a>
	}
}
 800157c:	bf00      	nop
 800157e:	bf00      	nop
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000228 	.word	0x20000228
 800158c:	08009054 	.word	0x08009054
 8001590:	20000008 	.word	0x20000008
 8001594:	2000022c 	.word	0x2000022c
 8001598:	0800906c 	.word	0x0800906c
 800159c:	080014d1 	.word	0x080014d1

080015a0 <shell_add>:
 *	@param	c
 *	@param
 *	@param
 *	@retval	0
 */
int shell_add(char * cmd, int (* pfunc)(int argc, char ** argv), char * description) {
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
	if (shell_func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 80015ac:	4b19      	ldr	r3, [pc, #100]	; (8001614 <shell_add+0x74>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2b0f      	cmp	r3, #15
 80015b2:	dc26      	bgt.n	8001602 <shell_add+0x62>
		shell_func_list[shell_func_list_size].cmd = cmd;
 80015b4:	4b17      	ldr	r3, [pc, #92]	; (8001614 <shell_add+0x74>)
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	4917      	ldr	r1, [pc, #92]	; (8001618 <shell_add+0x78>)
 80015ba:	4613      	mov	r3, r2
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	4413      	add	r3, r2
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	440b      	add	r3, r1
 80015c4:	68fa      	ldr	r2, [r7, #12]
 80015c6:	601a      	str	r2, [r3, #0]
		shell_func_list[shell_func_list_size].func = pfunc;
 80015c8:	4b12      	ldr	r3, [pc, #72]	; (8001614 <shell_add+0x74>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	4912      	ldr	r1, [pc, #72]	; (8001618 <shell_add+0x78>)
 80015ce:	4613      	mov	r3, r2
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	4413      	add	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	440b      	add	r3, r1
 80015d8:	3304      	adds	r3, #4
 80015da:	68ba      	ldr	r2, [r7, #8]
 80015dc:	601a      	str	r2, [r3, #0]
		shell_func_list[shell_func_list_size].description = description;
 80015de:	4b0d      	ldr	r3, [pc, #52]	; (8001614 <shell_add+0x74>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	490d      	ldr	r1, [pc, #52]	; (8001618 <shell_add+0x78>)
 80015e4:	4613      	mov	r3, r2
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	4413      	add	r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	440b      	add	r3, r1
 80015ee:	3308      	adds	r3, #8
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	601a      	str	r2, [r3, #0]
		shell_func_list_size++;
 80015f4:	4b07      	ldr	r3, [pc, #28]	; (8001614 <shell_add+0x74>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	3301      	adds	r3, #1
 80015fa:	4a06      	ldr	r2, [pc, #24]	; (8001614 <shell_add+0x74>)
 80015fc:	6013      	str	r3, [r2, #0]
		return 0;
 80015fe:	2300      	movs	r3, #0
 8001600:	e001      	b.n	8001606 <shell_add+0x66>
	}

	return -1;
 8001602:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001606:	4618      	mov	r0, r3
 8001608:	3714      	adds	r7, #20
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	20000258 	.word	0x20000258
 8001618:	2000025c 	.word	0x2000025c

0800161c <shell_char_received>:

/**
 *	@brief	Traitement d'un caractère reçu
 */
void shell_char_received() {
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0

	switch (c) {
 8001620:	4b21      	ldr	r3, [pc, #132]	; (80016a8 <shell_char_received+0x8c>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b08      	cmp	r3, #8
 8001626:	d019      	beq.n	800165c <shell_char_received+0x40>
 8001628:	2b0d      	cmp	r3, #13
 800162a:	d126      	bne.n	800167a <shell_char_received+0x5e>

	case '\r':
		// Enter
		printf("\r\n");
 800162c:	481f      	ldr	r0, [pc, #124]	; (80016ac <shell_char_received+0x90>)
 800162e:	f005 fc8f 	bl	8006f50 <puts>
		buf[pos++] = 0;
 8001632:	4b1f      	ldr	r3, [pc, #124]	; (80016b0 <shell_char_received+0x94>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	1c5a      	adds	r2, r3, #1
 8001638:	b2d1      	uxtb	r1, r2
 800163a:	4a1d      	ldr	r2, [pc, #116]	; (80016b0 <shell_char_received+0x94>)
 800163c:	7011      	strb	r1, [r2, #0]
 800163e:	461a      	mov	r2, r3
 8001640:	4b1c      	ldr	r3, [pc, #112]	; (80016b4 <shell_char_received+0x98>)
 8001642:	2100      	movs	r1, #0
 8001644:	5499      	strb	r1, [r3, r2]
		//printf(":%s\r\n", buf);
		pos = 0;
 8001646:	4b1a      	ldr	r3, [pc, #104]	; (80016b0 <shell_char_received+0x94>)
 8001648:	2200      	movs	r2, #0
 800164a:	701a      	strb	r2, [r3, #0]
		shell_exec(buf);
 800164c:	4819      	ldr	r0, [pc, #100]	; (80016b4 <shell_char_received+0x98>)
 800164e:	f000 f837 	bl	80016c0 <shell_exec>
		uart_write(prompt,sizeof(prompt));
 8001652:	2111      	movs	r1, #17
 8001654:	4818      	ldr	r0, [pc, #96]	; (80016b8 <shell_char_received+0x9c>)
 8001656:	f7ff ff25 	bl	80014a4 <uart_write>
		break;
 800165a:	e023      	b.n	80016a4 <shell_char_received+0x88>

	case '\b':
		// Delete
		if (pos > 0) {
 800165c:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <shell_char_received+0x94>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d01e      	beq.n	80016a2 <shell_char_received+0x86>
			pos--;
 8001664:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <shell_char_received+0x94>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	3b01      	subs	r3, #1
 800166a:	b2da      	uxtb	r2, r3
 800166c:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <shell_char_received+0x94>)
 800166e:	701a      	strb	r2, [r3, #0]
			uart_write(backspace, 3);
 8001670:	2103      	movs	r1, #3
 8001672:	4812      	ldr	r0, [pc, #72]	; (80016bc <shell_char_received+0xa0>)
 8001674:	f7ff ff16 	bl	80014a4 <uart_write>
		}
		break;
 8001678:	e013      	b.n	80016a2 <shell_char_received+0x86>

	default:
		if (pos < BUFFER_SIZE) {
 800167a:	4b0d      	ldr	r3, [pc, #52]	; (80016b0 <shell_char_received+0x94>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	2b27      	cmp	r3, #39	; 0x27
 8001680:	d810      	bhi.n	80016a4 <shell_char_received+0x88>
			uart_write(&c, 1);
 8001682:	2101      	movs	r1, #1
 8001684:	4808      	ldr	r0, [pc, #32]	; (80016a8 <shell_char_received+0x8c>)
 8001686:	f7ff ff0d 	bl	80014a4 <uart_write>
			buf[pos++] = c;
 800168a:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <shell_char_received+0x94>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	1c5a      	adds	r2, r3, #1
 8001690:	b2d1      	uxtb	r1, r2
 8001692:	4a07      	ldr	r2, [pc, #28]	; (80016b0 <shell_char_received+0x94>)
 8001694:	7011      	strb	r1, [r2, #0]
 8001696:	461a      	mov	r2, r3
 8001698:	4b03      	ldr	r3, [pc, #12]	; (80016a8 <shell_char_received+0x8c>)
 800169a:	7819      	ldrb	r1, [r3, #0]
 800169c:	4b05      	ldr	r3, [pc, #20]	; (80016b4 <shell_char_received+0x98>)
 800169e:	5499      	strb	r1, [r3, r2]
		}
	}
}
 80016a0:	e000      	b.n	80016a4 <shell_char_received+0x88>
		break;
 80016a2:	bf00      	nop
}
 80016a4:	bf00      	nop
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	2000022c 	.word	0x2000022c
 80016ac:	08009074 	.word	0x08009074
 80016b0:	2000022d 	.word	0x2000022d
 80016b4:	20000230 	.word	0x20000230
 80016b8:	20000008 	.word	0x20000008
 80016bc:	2000001c 	.word	0x2000001c

080016c0 <shell_exec>:
/**
 *	@brief	Execution d'une commande du shell
 *	@param	cmd
 *	@retval
 */
int shell_exec(char * cmd) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b092      	sub	sp, #72	; 0x48
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
	int argc;
	char * argv[ARGC_MAX];
	char *p;

	// Séparation du header et des paramètres
	char header[SHELL_CMD_MAX_SIZE] = "";
 80016c8:	2300      	movs	r3, #0
 80016ca:	60bb      	str	r3, [r7, #8]
 80016cc:	f107 030c 	add.w	r3, r7, #12
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	609a      	str	r2, [r3, #8]
	int h = 0;
 80016d8:	2300      	movs	r3, #0
 80016da:	63fb      	str	r3, [r7, #60]	; 0x3c

	while(cmd[h] != ' ' && h < SHELL_CMD_MAX_SIZE){
 80016dc:	e00c      	b.n	80016f8 <shell_exec+0x38>
		header[h] = cmd[h];
 80016de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	4413      	add	r3, r2
 80016e4:	7819      	ldrb	r1, [r3, #0]
 80016e6:	f107 0208 	add.w	r2, r7, #8
 80016ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016ec:	4413      	add	r3, r2
 80016ee:	460a      	mov	r2, r1
 80016f0:	701a      	strb	r2, [r3, #0]
		h++;
 80016f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016f4:	3301      	adds	r3, #1
 80016f6:	63fb      	str	r3, [r7, #60]	; 0x3c
	while(cmd[h] != ' ' && h < SHELL_CMD_MAX_SIZE){
 80016f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	4413      	add	r3, r2
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2b20      	cmp	r3, #32
 8001702:	d002      	beq.n	800170a <shell_exec+0x4a>
 8001704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001706:	2b0f      	cmp	r3, #15
 8001708:	dde9      	ble.n	80016de <shell_exec+0x1e>
	}
	header[h] = '\0';
 800170a:	f107 0208 	add.w	r2, r7, #8
 800170e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001710:	4413      	add	r3, r2
 8001712:	2200      	movs	r2, #0
 8001714:	701a      	strb	r2, [r3, #0]

	// Recherche de la commande et paramètres
	for(int i = 0 ; i < shell_func_list_size ; i++) {
 8001716:	2300      	movs	r3, #0
 8001718:	63bb      	str	r3, [r7, #56]	; 0x38
 800171a:	e046      	b.n	80017aa <shell_exec+0xea>
		if (!strcmp(shell_func_list[i].cmd, header)) {
 800171c:	492a      	ldr	r1, [pc, #168]	; (80017c8 <shell_exec+0x108>)
 800171e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001720:	4613      	mov	r3, r2
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	4413      	add	r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	440b      	add	r3, r1
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f107 0208 	add.w	r2, r7, #8
 8001730:	4611      	mov	r1, r2
 8001732:	4618      	mov	r0, r3
 8001734:	f7fe fd6c 	bl	8000210 <strcmp>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d132      	bne.n	80017a4 <shell_exec+0xe4>
			argc = 1;
 800173e:	2301      	movs	r3, #1
 8001740:	647b      	str	r3, [r7, #68]	; 0x44
			argv[0] = cmd;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	61bb      	str	r3, [r7, #24]

			for(p = cmd ; *p != '\0' && argc < ARGC_MAX ; p++){
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	643b      	str	r3, [r7, #64]	; 0x40
 800174a:	e014      	b.n	8001776 <shell_exec+0xb6>
				if(*p == ' ') {
 800174c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b20      	cmp	r3, #32
 8001752:	d10d      	bne.n	8001770 <shell_exec+0xb0>
					*p = '\0';
 8001754:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001756:	2200      	movs	r2, #0
 8001758:	701a      	strb	r2, [r3, #0]
					argv[argc++] = p+1;
 800175a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800175c:	1c5a      	adds	r2, r3, #1
 800175e:	647a      	str	r2, [r7, #68]	; 0x44
 8001760:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001762:	3201      	adds	r2, #1
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800176a:	440b      	add	r3, r1
 800176c:	f843 2c30 	str.w	r2, [r3, #-48]
			for(p = cmd ; *p != '\0' && argc < ARGC_MAX ; p++){
 8001770:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001772:	3301      	adds	r3, #1
 8001774:	643b      	str	r3, [r7, #64]	; 0x40
 8001776:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d002      	beq.n	8001784 <shell_exec+0xc4>
 800177e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001780:	2b07      	cmp	r3, #7
 8001782:	dde3      	ble.n	800174c <shell_exec+0x8c>
				}
			}

			return shell_func_list[i].func(argc, argv);
 8001784:	4910      	ldr	r1, [pc, #64]	; (80017c8 <shell_exec+0x108>)
 8001786:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001788:	4613      	mov	r3, r2
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	4413      	add	r3, r2
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	440b      	add	r3, r1
 8001792:	3304      	adds	r3, #4
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f107 0218 	add.w	r2, r7, #24
 800179a:	4611      	mov	r1, r2
 800179c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800179e:	4798      	blx	r3
 80017a0:	4603      	mov	r3, r0
 80017a2:	e00d      	b.n	80017c0 <shell_exec+0x100>
	for(int i = 0 ; i < shell_func_list_size ; i++) {
 80017a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017a6:	3301      	adds	r3, #1
 80017a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80017aa:	4b08      	ldr	r3, [pc, #32]	; (80017cc <shell_exec+0x10c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80017b0:	429a      	cmp	r2, r3
 80017b2:	dbb3      	blt.n	800171c <shell_exec+0x5c>
		}
	}
	printf("%s: command not found\r\n", cmd);
 80017b4:	6879      	ldr	r1, [r7, #4]
 80017b6:	4806      	ldr	r0, [pc, #24]	; (80017d0 <shell_exec+0x110>)
 80017b8:	f005 fb44 	bl	8006e44 <iprintf>
	return -1;
 80017bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3748      	adds	r7, #72	; 0x48
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	2000025c 	.word	0x2000025c
 80017cc:	20000258 	.word	0x20000258
 80017d0:	08009078 	.word	0x08009078

080017d4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017da:	463b      	mov	r3, r7
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80017e6:	4b21      	ldr	r3, [pc, #132]	; (800186c <MX_ADC1_Init+0x98>)
 80017e8:	4a21      	ldr	r2, [pc, #132]	; (8001870 <MX_ADC1_Init+0x9c>)
 80017ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80017ec:	4b1f      	ldr	r3, [pc, #124]	; (800186c <MX_ADC1_Init+0x98>)
 80017ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80017f2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017f4:	4b1d      	ldr	r3, [pc, #116]	; (800186c <MX_ADC1_Init+0x98>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80017fa:	4b1c      	ldr	r3, [pc, #112]	; (800186c <MX_ADC1_Init+0x98>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001800:	4b1a      	ldr	r3, [pc, #104]	; (800186c <MX_ADC1_Init+0x98>)
 8001802:	2201      	movs	r2, #1
 8001804:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001806:	4b19      	ldr	r3, [pc, #100]	; (800186c <MX_ADC1_Init+0x98>)
 8001808:	2200      	movs	r2, #0
 800180a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800180e:	4b17      	ldr	r3, [pc, #92]	; (800186c <MX_ADC1_Init+0x98>)
 8001810:	2200      	movs	r2, #0
 8001812:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001814:	4b15      	ldr	r3, [pc, #84]	; (800186c <MX_ADC1_Init+0x98>)
 8001816:	4a17      	ldr	r2, [pc, #92]	; (8001874 <MX_ADC1_Init+0xa0>)
 8001818:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800181a:	4b14      	ldr	r3, [pc, #80]	; (800186c <MX_ADC1_Init+0x98>)
 800181c:	2200      	movs	r2, #0
 800181e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001820:	4b12      	ldr	r3, [pc, #72]	; (800186c <MX_ADC1_Init+0x98>)
 8001822:	2201      	movs	r2, #1
 8001824:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001826:	4b11      	ldr	r3, [pc, #68]	; (800186c <MX_ADC1_Init+0x98>)
 8001828:	2200      	movs	r2, #0
 800182a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800182e:	4b0f      	ldr	r3, [pc, #60]	; (800186c <MX_ADC1_Init+0x98>)
 8001830:	2200      	movs	r2, #0
 8001832:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001834:	480d      	ldr	r0, [pc, #52]	; (800186c <MX_ADC1_Init+0x98>)
 8001836:	f001 f83b 	bl	80028b0 <HAL_ADC_Init>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001840:	f000 fb2a 	bl	8001e98 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001844:	2308      	movs	r3, #8
 8001846:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001848:	2301      	movs	r3, #1
 800184a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800184c:	2300      	movs	r3, #0
 800184e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001850:	463b      	mov	r3, r7
 8001852:	4619      	mov	r1, r3
 8001854:	4805      	ldr	r0, [pc, #20]	; (800186c <MX_ADC1_Init+0x98>)
 8001856:	f001 f9c3 	bl	8002be0 <HAL_ADC_ConfigChannel>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001860:	f000 fb1a 	bl	8001e98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001864:	bf00      	nop
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	200003d0 	.word	0x200003d0
 8001870:	40012000 	.word	0x40012000
 8001874:	0f000001 	.word	0x0f000001

08001878 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b08a      	sub	sp, #40	; 0x28
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001880:	f107 0314 	add.w	r3, r7, #20
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a1b      	ldr	r2, [pc, #108]	; (8001904 <HAL_ADC_MspInit+0x8c>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d12f      	bne.n	80018fa <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	613b      	str	r3, [r7, #16]
 800189e:	4b1a      	ldr	r3, [pc, #104]	; (8001908 <HAL_ADC_MspInit+0x90>)
 80018a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a2:	4a19      	ldr	r2, [pc, #100]	; (8001908 <HAL_ADC_MspInit+0x90>)
 80018a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a8:	6453      	str	r3, [r2, #68]	; 0x44
 80018aa:	4b17      	ldr	r3, [pc, #92]	; (8001908 <HAL_ADC_MspInit+0x90>)
 80018ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b2:	613b      	str	r3, [r7, #16]
 80018b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	4b13      	ldr	r3, [pc, #76]	; (8001908 <HAL_ADC_MspInit+0x90>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	4a12      	ldr	r2, [pc, #72]	; (8001908 <HAL_ADC_MspInit+0x90>)
 80018c0:	f043 0302 	orr.w	r3, r3, #2
 80018c4:	6313      	str	r3, [r2, #48]	; 0x30
 80018c6:	4b10      	ldr	r3, [pc, #64]	; (8001908 <HAL_ADC_MspInit+0x90>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018d2:	2301      	movs	r3, #1
 80018d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018d6:	2303      	movs	r3, #3
 80018d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018de:	f107 0314 	add.w	r3, r7, #20
 80018e2:	4619      	mov	r1, r3
 80018e4:	4809      	ldr	r0, [pc, #36]	; (800190c <HAL_ADC_MspInit+0x94>)
 80018e6:	f001 fd57 	bl	8003398 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80018ea:	2200      	movs	r2, #0
 80018ec:	2100      	movs	r1, #0
 80018ee:	2012      	movs	r0, #18
 80018f0:	f001 fc89 	bl	8003206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80018f4:	2012      	movs	r0, #18
 80018f6:	f001 fca2 	bl	800323e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80018fa:	bf00      	nop
 80018fc:	3728      	adds	r7, #40	; 0x28
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40012000 	.word	0x40012000
 8001908:	40023800 	.word	0x40023800
 800190c:	40020400 	.word	0x40020400

08001910 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08a      	sub	sp, #40	; 0x28
 8001914:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001916:	f107 0314 	add.w	r3, r7, #20
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	605a      	str	r2, [r3, #4]
 8001920:	609a      	str	r2, [r3, #8]
 8001922:	60da      	str	r2, [r3, #12]
 8001924:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	613b      	str	r3, [r7, #16]
 800192a:	4b45      	ldr	r3, [pc, #276]	; (8001a40 <MX_GPIO_Init+0x130>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	4a44      	ldr	r2, [pc, #272]	; (8001a40 <MX_GPIO_Init+0x130>)
 8001930:	f043 0304 	orr.w	r3, r3, #4
 8001934:	6313      	str	r3, [r2, #48]	; 0x30
 8001936:	4b42      	ldr	r3, [pc, #264]	; (8001a40 <MX_GPIO_Init+0x130>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	f003 0304 	and.w	r3, r3, #4
 800193e:	613b      	str	r3, [r7, #16]
 8001940:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	4b3e      	ldr	r3, [pc, #248]	; (8001a40 <MX_GPIO_Init+0x130>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	4a3d      	ldr	r2, [pc, #244]	; (8001a40 <MX_GPIO_Init+0x130>)
 800194c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001950:	6313      	str	r3, [r2, #48]	; 0x30
 8001952:	4b3b      	ldr	r3, [pc, #236]	; (8001a40 <MX_GPIO_Init+0x130>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	60bb      	str	r3, [r7, #8]
 8001962:	4b37      	ldr	r3, [pc, #220]	; (8001a40 <MX_GPIO_Init+0x130>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	4a36      	ldr	r2, [pc, #216]	; (8001a40 <MX_GPIO_Init+0x130>)
 8001968:	f043 0301 	orr.w	r3, r3, #1
 800196c:	6313      	str	r3, [r2, #48]	; 0x30
 800196e:	4b34      	ldr	r3, [pc, #208]	; (8001a40 <MX_GPIO_Init+0x130>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	60bb      	str	r3, [r7, #8]
 8001978:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	607b      	str	r3, [r7, #4]
 800197e:	4b30      	ldr	r3, [pc, #192]	; (8001a40 <MX_GPIO_Init+0x130>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	4a2f      	ldr	r2, [pc, #188]	; (8001a40 <MX_GPIO_Init+0x130>)
 8001984:	f043 0302 	orr.w	r3, r3, #2
 8001988:	6313      	str	r3, [r2, #48]	; 0x30
 800198a:	4b2d      	ldr	r3, [pc, #180]	; (8001a40 <MX_GPIO_Init+0x130>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	607b      	str	r3, [r7, #4]
 8001994:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTG_IN2_Pin|MOTG_IN1_Pin, GPIO_PIN_RESET);
 8001996:	2200      	movs	r2, #0
 8001998:	2103      	movs	r1, #3
 800199a:	482a      	ldr	r0, [pc, #168]	; (8001a44 <MX_GPIO_Init+0x134>)
 800199c:	f001 fe90 	bl	80036c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80019a0:	2200      	movs	r2, #0
 80019a2:	2120      	movs	r1, #32
 80019a4:	4828      	ldr	r0, [pc, #160]	; (8001a48 <MX_GPIO_Init+0x138>)
 80019a6:	f001 fe8b 	bl	80036c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTD_IN3_Pin|MOTD_IN4_Pin, GPIO_PIN_RESET);
 80019aa:	2200      	movs	r2, #0
 80019ac:	f44f 7140 	mov.w	r1, #768	; 0x300
 80019b0:	4826      	ldr	r0, [pc, #152]	; (8001a4c <MX_GPIO_Init+0x13c>)
 80019b2:	f001 fe85 	bl	80036c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80019b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019bc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80019c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019c6:	f107 0314 	add.w	r3, r7, #20
 80019ca:	4619      	mov	r1, r3
 80019cc:	481d      	ldr	r0, [pc, #116]	; (8001a44 <MX_GPIO_Init+0x134>)
 80019ce:	f001 fce3 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MOTG_IN2_Pin|MOTG_IN1_Pin;
 80019d2:	2303      	movs	r3, #3
 80019d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d6:	2301      	movs	r3, #1
 80019d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019de:	2300      	movs	r3, #0
 80019e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019e2:	f107 0314 	add.w	r3, r7, #20
 80019e6:	4619      	mov	r1, r3
 80019e8:	4816      	ldr	r0, [pc, #88]	; (8001a44 <MX_GPIO_Init+0x134>)
 80019ea:	f001 fcd5 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80019ee:	2320      	movs	r3, #32
 80019f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f2:	2301      	movs	r3, #1
 80019f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fa:	2300      	movs	r3, #0
 80019fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80019fe:	f107 0314 	add.w	r3, r7, #20
 8001a02:	4619      	mov	r1, r3
 8001a04:	4810      	ldr	r0, [pc, #64]	; (8001a48 <MX_GPIO_Init+0x138>)
 8001a06:	f001 fcc7 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = MOTD_IN3_Pin|MOTD_IN4_Pin;
 8001a0a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a10:	2301      	movs	r3, #1
 8001a12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a1c:	f107 0314 	add.w	r3, r7, #20
 8001a20:	4619      	mov	r1, r3
 8001a22:	480a      	ldr	r0, [pc, #40]	; (8001a4c <MX_GPIO_Init+0x13c>)
 8001a24:	f001 fcb8 	bl	8003398 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001a28:	2200      	movs	r2, #0
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	2028      	movs	r0, #40	; 0x28
 8001a2e:	f001 fbea 	bl	8003206 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a32:	2028      	movs	r0, #40	; 0x28
 8001a34:	f001 fc03 	bl	800323e <HAL_NVIC_EnableIRQ>

}
 8001a38:	bf00      	nop
 8001a3a:	3728      	adds	r7, #40	; 0x28
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40023800 	.word	0x40023800
 8001a44:	40020800 	.word	0x40020800
 8001a48:	40020000 	.word	0x40020000
 8001a4c:	40020400 	.word	0x40020400

08001a50 <fonction>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int fonction(int argc, char ** argv) {
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
	printf("Une fonction inutile\r\n");
 8001a5a:	4810      	ldr	r0, [pc, #64]	; (8001a9c <fonction+0x4c>)
 8001a5c:	f005 fa78 	bl	8006f50 <puts>

	printf("argc = %d\r\n", argc);
 8001a60:	6879      	ldr	r1, [r7, #4]
 8001a62:	480f      	ldr	r0, [pc, #60]	; (8001aa0 <fonction+0x50>)
 8001a64:	f005 f9ee 	bl	8006e44 <iprintf>

	for (int i = 0 ; i < argc ; i++) {
 8001a68:	2300      	movs	r3, #0
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	e00c      	b.n	8001a88 <fonction+0x38>
		printf("arg numero %d = %s\r\n", i, argv[i]);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	683a      	ldr	r2, [r7, #0]
 8001a74:	4413      	add	r3, r2
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	461a      	mov	r2, r3
 8001a7a:	68f9      	ldr	r1, [r7, #12]
 8001a7c:	4809      	ldr	r0, [pc, #36]	; (8001aa4 <fonction+0x54>)
 8001a7e:	f005 f9e1 	bl	8006e44 <iprintf>
	for (int i = 0 ; i < argc ; i++) {
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	3301      	adds	r3, #1
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fa      	ldr	r2, [r7, #12]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	dbee      	blt.n	8001a6e <fonction+0x1e>
	}

	return 0;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3710      	adds	r7, #16
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	08009090 	.word	0x08009090
 8001aa0:	080090a8 	.word	0x080090a8
 8001aa4:	080090b4 	.word	0x080090b4

08001aa8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001aae:	f000 fe69 	bl	8002784 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001ab2:	f000 f8e7 	bl	8001c84 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001ab6:	f7ff ff2b 	bl	8001910 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001aba:	f000 fdbf 	bl	800263c <MX_USART2_UART_Init>
	MX_TIM1_Init();
 8001abe:	f000 fb41 	bl	8002144 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001ac2:	f000 fbeb 	bl	800229c <MX_TIM2_Init>
	MX_TIM6_Init();
 8001ac6:	f000 fc91 	bl	80023ec <MX_TIM6_Init>
	MX_ADC1_Init();
 8001aca:	f7ff fe83 	bl	80017d4 <MX_ADC1_Init>
	MX_TIM3_Init();
 8001ace:	f000 fc39 	bl	8002344 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */

	/* Initialisation du shell ---------------------------------------------------*/

	shell_init(&huart2);
 8001ad2:	4856      	ldr	r0, [pc, #344]	; (8001c2c <main+0x184>)
 8001ad4:	f7ff fd2c 	bl	8001530 <shell_init>
	shell_add("f", fonction, "Une fonction inutile");
 8001ad8:	4a55      	ldr	r2, [pc, #340]	; (8001c30 <main+0x188>)
 8001ada:	4956      	ldr	r1, [pc, #344]	; (8001c34 <main+0x18c>)
 8001adc:	4856      	ldr	r0, [pc, #344]	; (8001c38 <main+0x190>)
 8001ade:	f7ff fd5f 	bl	80015a0 <shell_add>
	/* Fin initialisation du shell -----------------------------------------------*/

	/* Initialisation des moteurs ------------------------------------------------*/

	/* Moteur Gauche */
	MOT_InitTimer(&MoteurGauche, &htim1, TIM_CHANNEL_1); // PA8 / D7
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	4955      	ldr	r1, [pc, #340]	; (8001c3c <main+0x194>)
 8001ae6:	4856      	ldr	r0, [pc, #344]	; (8001c40 <main+0x198>)
 8001ae8:	f7ff fbb5 	bl	8001256 <MOT_InitTimer>
	MOT_InitGPIOs(&MoteurGauche, GPIOC, GPIO_PIN_1, GPIOC, GPIO_PIN_0); // IN1:PC0 et IN2:PC1
 8001aec:	2301      	movs	r3, #1
 8001aee:	9300      	str	r3, [sp, #0]
 8001af0:	4b54      	ldr	r3, [pc, #336]	; (8001c44 <main+0x19c>)
 8001af2:	2202      	movs	r2, #2
 8001af4:	4953      	ldr	r1, [pc, #332]	; (8001c44 <main+0x19c>)
 8001af6:	4852      	ldr	r0, [pc, #328]	; (8001c40 <main+0x198>)
 8001af8:	f7ff fbcb 	bl	8001292 <MOT_InitGPIOs>
	MOT_SetCoeff(&MoteurGauche, 2.75, 0.75);
 8001afc:	eef6 0a08 	vmov.f32	s1, #104	; 0x3f400000  0.750
 8001b00:	eeb0 0a06 	vmov.f32	s0, #6	; 0x40300000  2.750
 8001b04:	484e      	ldr	r0, [pc, #312]	; (8001c40 <main+0x198>)
 8001b06:	f7ff fbde 	bl	80012c6 <MOT_SetCoeff>
	MOT_SetDirection(&MoteurGauche, MOT_FUNCTIONS_REVERSE);
 8001b0a:	2102      	movs	r1, #2
 8001b0c:	484c      	ldr	r0, [pc, #304]	; (8001c40 <main+0x198>)
 8001b0e:	f7ff fbee 	bl	80012ee <MOT_SetDirection>
	MOT_SetDutyCycle(&MoteurGauche, 0); // 66
 8001b12:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8001c48 <main+0x1a0>
 8001b16:	484a      	ldr	r0, [pc, #296]	; (8001c40 <main+0x198>)
 8001b18:	f7ff fc42 	bl	80013a0 <MOT_SetDutyCycle>
	//HAL_ADC_Start_IT(&hadc1);

	/* Moteur Droite */
	MOT_InitTimer(&MoteurDroite, &htim1, TIM_CHANNEL_2); // PA9 / D8
 8001b1c:	2204      	movs	r2, #4
 8001b1e:	4947      	ldr	r1, [pc, #284]	; (8001c3c <main+0x194>)
 8001b20:	484a      	ldr	r0, [pc, #296]	; (8001c4c <main+0x1a4>)
 8001b22:	f7ff fb98 	bl	8001256 <MOT_InitTimer>
	MOT_InitGPIOs(&MoteurDroite, GPIOB, GPIO_PIN_8, GPIOB, GPIO_PIN_9); // IN1:PB8 et IN2:PB9
 8001b26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b2a:	9300      	str	r3, [sp, #0]
 8001b2c:	4b48      	ldr	r3, [pc, #288]	; (8001c50 <main+0x1a8>)
 8001b2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b32:	4947      	ldr	r1, [pc, #284]	; (8001c50 <main+0x1a8>)
 8001b34:	4845      	ldr	r0, [pc, #276]	; (8001c4c <main+0x1a4>)
 8001b36:	f7ff fbac 	bl	8001292 <MOT_InitGPIOs>
	MOT_SetCoeff(&MoteurDroite, 2.75, 0.75);
 8001b3a:	eef6 0a08 	vmov.f32	s1, #104	; 0x3f400000  0.750
 8001b3e:	eeb0 0a06 	vmov.f32	s0, #6	; 0x40300000  2.750
 8001b42:	4842      	ldr	r0, [pc, #264]	; (8001c4c <main+0x1a4>)
 8001b44:	f7ff fbbf 	bl	80012c6 <MOT_SetCoeff>
	MOT_SetDirection(&MoteurDroite, MOT_FUNCTIONS_REVERSE);
 8001b48:	2102      	movs	r1, #2
 8001b4a:	4840      	ldr	r0, [pc, #256]	; (8001c4c <main+0x1a4>)
 8001b4c:	f7ff fbcf 	bl	80012ee <MOT_SetDirection>
	MOT_SetDutyCycle(&MoteurDroite, 0);
 8001b50:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8001c48 <main+0x1a0>
 8001b54:	483d      	ldr	r0, [pc, #244]	; (8001c4c <main+0x1a4>)
 8001b56:	f7ff fc23 	bl	80013a0 <MOT_SetDutyCycle>
	/* Fin initialisation des moteurs --------------------------------------------*/

	/* Initialisation des encodeurs ----------------------------------------------*/

	/* Encodeur Gauche */
	ENC_InitTimer(&CodeurGauche, &htim2, TIM_CHANNEL_1, TIM_CHANNEL_2); // PhA:PA0 et PhB:PA1
 8001b5a:	2304      	movs	r3, #4
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	493d      	ldr	r1, [pc, #244]	; (8001c54 <main+0x1ac>)
 8001b60:	483d      	ldr	r0, [pc, #244]	; (8001c58 <main+0x1b0>)
 8001b62:	f7ff fb1d 	bl	80011a0 <ENC_InitTimer>
	ENC_SetTicksPerRev(&CodeurGauche, 1355.2);
 8001b66:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8001c5c <main+0x1b4>
 8001b6a:	483b      	ldr	r0, [pc, #236]	; (8001c58 <main+0x1b0>)
 8001b6c:	f7ff fb3c 	bl	80011e8 <ENC_SetTicksPerRev>

	/* Encodeur Droite */
	ENC_InitTimer(&CodeurDroite, &htim3, TIM_CHANNEL_1, TIM_CHANNEL_2); // PhA:PA6 et PhB:PA7
 8001b70:	2304      	movs	r3, #4
 8001b72:	2200      	movs	r2, #0
 8001b74:	493a      	ldr	r1, [pc, #232]	; (8001c60 <main+0x1b8>)
 8001b76:	483b      	ldr	r0, [pc, #236]	; (8001c64 <main+0x1bc>)
 8001b78:	f7ff fb12 	bl	80011a0 <ENC_InitTimer>
	ENC_SetTicksPerRev(&CodeurDroite, 1364.2);
 8001b7c:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 8001c68 <main+0x1c0>
 8001b80:	4838      	ldr	r0, [pc, #224]	; (8001c64 <main+0x1bc>)
 8001b82:	f7ff fb31 	bl	80011e8 <ENC_SetTicksPerRev>

	/* Fin initialisation des encodeurs ------------------------------------------*/

	// Initialisation de l'asservissement
	Ctrl_Init_SetTimer(&Asserv, &htim6);
 8001b86:	4939      	ldr	r1, [pc, #228]	; (8001c6c <main+0x1c4>)
 8001b88:	4839      	ldr	r0, [pc, #228]	; (8001c70 <main+0x1c8>)
 8001b8a:	f7ff fa09 	bl	8000fa0 <Ctrl_Init_SetTimer>

	reglage = 0;
 8001b8e:	4b39      	ldr	r3, [pc, #228]	; (8001c74 <main+0x1cc>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	701a      	strb	r2, [r3, #0]
	testStart = 0;
 8001b94:	4b38      	ldr	r3, [pc, #224]	; (8001c78 <main+0x1d0>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	701a      	strb	r2, [r3, #0]
		//printf("cpt = %d\r\n",cpt);
		//printf("Ticks = %d\r\n",i);
		//printf("%d\r\n",i);
		//printf("%f\r\n",(float)DISTANCE_PER_TICK);

		if(testStart){
 8001b9a:	4b37      	ldr	r3, [pc, #220]	; (8001c78 <main+0x1d0>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d017      	beq.n	8001bd2 <main+0x12a>
			HAL_Delay(8000);
 8001ba2:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8001ba6:	f000 fe5f 	bl	8002868 <HAL_Delay>
			testStart = 0;
 8001baa:	4b33      	ldr	r3, [pc, #204]	; (8001c78 <main+0x1d0>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	701a      	strb	r2, [r3, #0]
			acc = 0;
 8001bb0:	4932      	ldr	r1, [pc, #200]	; (8001c7c <main+0x1d4>)
 8001bb2:	f04f 0200 	mov.w	r2, #0
 8001bb6:	f04f 0300 	mov.w	r3, #0
 8001bba:	e9c1 2300 	strd	r2, r3, [r1]
			MOT_SetDutyCycle(&MoteurGauche, 0);
 8001bbe:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8001c48 <main+0x1a0>
 8001bc2:	481f      	ldr	r0, [pc, #124]	; (8001c40 <main+0x198>)
 8001bc4:	f7ff fbec 	bl	80013a0 <MOT_SetDutyCycle>
			MOT_SetDutyCycle(&MoteurDroite, 0);
 8001bc8:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8001c48 <main+0x1a0>
 8001bcc:	481f      	ldr	r0, [pc, #124]	; (8001c4c <main+0x1a4>)
 8001bce:	f7ff fbe7 	bl	80013a0 <MOT_SetDutyCycle>
		}

		if(reglage){
 8001bd2:	4b28      	ldr	r3, [pc, #160]	; (8001c74 <main+0x1cc>)
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d0df      	beq.n	8001b9a <main+0xf2>
			HAL_Delay(1650);
 8001bda:	f240 6072 	movw	r0, #1650	; 0x672
 8001bde:	f000 fe43 	bl	8002868 <HAL_Delay>
			MOT_SetDutyCycle(&MoteurGauche, 0);
 8001be2:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8001c48 <main+0x1a0>
 8001be6:	4816      	ldr	r0, [pc, #88]	; (8001c40 <main+0x198>)
 8001be8:	f7ff fbda 	bl	80013a0 <MOT_SetDutyCycle>
			MOT_SetDutyCycle(&MoteurDroite, 0);
 8001bec:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8001c48 <main+0x1a0>
 8001bf0:	4816      	ldr	r0, [pc, #88]	; (8001c4c <main+0x1a4>)
 8001bf2:	f7ff fbd5 	bl	80013a0 <MOT_SetDutyCycle>
			HAL_Delay(1000);
 8001bf6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bfa:	f000 fe35 	bl	8002868 <HAL_Delay>
			int16_t ticksGauche = ENC_GetCnt(&CodeurGauche);
 8001bfe:	4816      	ldr	r0, [pc, #88]	; (8001c58 <main+0x1b0>)
 8001c00:	f7ff fb07 	bl	8001212 <ENC_GetCnt>
 8001c04:	4603      	mov	r3, r0
 8001c06:	80fb      	strh	r3, [r7, #6]
			int16_t ticksDroite = ENC_GetCnt(&CodeurDroite);
 8001c08:	4816      	ldr	r0, [pc, #88]	; (8001c64 <main+0x1bc>)
 8001c0a:	f7ff fb02 	bl	8001212 <ENC_GetCnt>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	80bb      	strh	r3, [r7, #4]
			printf("G: %d\t D: %d\r\n",ticksGauche,ticksDroite);
 8001c12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c16:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4818      	ldr	r0, [pc, #96]	; (8001c80 <main+0x1d8>)
 8001c1e:	f005 f911 	bl	8006e44 <iprintf>
			reglage = 0;
 8001c22:	4b14      	ldr	r3, [pc, #80]	; (8001c74 <main+0x1cc>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	701a      	strb	r2, [r3, #0]
		if(testStart){
 8001c28:	e7b7      	b.n	8001b9a <main+0xf2>
 8001c2a:	bf00      	nop
 8001c2c:	20000538 	.word	0x20000538
 8001c30:	080090cc 	.word	0x080090cc
 8001c34:	08001a51 	.word	0x08001a51
 8001c38:	080090e4 	.word	0x080090e4
 8001c3c:	200004a8 	.word	0x200004a8
 8001c40:	20000330 	.word	0x20000330
 8001c44:	40020800 	.word	0x40020800
 8001c48:	00000000 	.word	0x00000000
 8001c4c:	20000368 	.word	0x20000368
 8001c50:	40020400 	.word	0x40020400
 8001c54:	200004f0 	.word	0x200004f0
 8001c58:	200003c0 	.word	0x200003c0
 8001c5c:	44a96666 	.word	0x44a96666
 8001c60:	20000418 	.word	0x20000418
 8001c64:	200003b0 	.word	0x200003b0
 8001c68:	44aa8666 	.word	0x44aa8666
 8001c6c:	20000460 	.word	0x20000460
 8001c70:	200003a0 	.word	0x200003a0
 8001c74:	2000031d 	.word	0x2000031d
 8001c78:	2000031c 	.word	0x2000031c
 8001c7c:	20000220 	.word	0x20000220
 8001c80:	080090e8 	.word	0x080090e8

08001c84 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b094      	sub	sp, #80	; 0x50
 8001c88:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c8a:	f107 031c 	add.w	r3, r7, #28
 8001c8e:	2234      	movs	r2, #52	; 0x34
 8001c90:	2100      	movs	r1, #0
 8001c92:	4618      	mov	r0, r3
 8001c94:	f004 fc64 	bl	8006560 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c98:	f107 0308 	add.w	r3, r7, #8
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	605a      	str	r2, [r3, #4]
 8001ca2:	609a      	str	r2, [r3, #8]
 8001ca4:	60da      	str	r2, [r3, #12]
 8001ca6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001ca8:	2300      	movs	r3, #0
 8001caa:	607b      	str	r3, [r7, #4]
 8001cac:	4b2a      	ldr	r3, [pc, #168]	; (8001d58 <SystemClock_Config+0xd4>)
 8001cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb0:	4a29      	ldr	r2, [pc, #164]	; (8001d58 <SystemClock_Config+0xd4>)
 8001cb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cb6:	6413      	str	r3, [r2, #64]	; 0x40
 8001cb8:	4b27      	ldr	r3, [pc, #156]	; (8001d58 <SystemClock_Config+0xd4>)
 8001cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc0:	607b      	str	r3, [r7, #4]
 8001cc2:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	603b      	str	r3, [r7, #0]
 8001cc8:	4b24      	ldr	r3, [pc, #144]	; (8001d5c <SystemClock_Config+0xd8>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001cd0:	4a22      	ldr	r2, [pc, #136]	; (8001d5c <SystemClock_Config+0xd8>)
 8001cd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cd6:	6013      	str	r3, [r2, #0]
 8001cd8:	4b20      	ldr	r3, [pc, #128]	; (8001d5c <SystemClock_Config+0xd8>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ce0:	603b      	str	r3, [r7, #0]
 8001ce2:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cec:	2310      	movs	r3, #16
 8001cee:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 8001cf8:	2310      	movs	r3, #16
 8001cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001cfc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001d00:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001d02:	2304      	movs	r3, #4
 8001d04:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8001d06:	2302      	movs	r3, #2
 8001d08:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d0e:	f107 031c 	add.w	r3, r7, #28
 8001d12:	4618      	mov	r0, r3
 8001d14:	f001 ffd2 	bl	8003cbc <HAL_RCC_OscConfig>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <SystemClock_Config+0x9e>
	{
		Error_Handler();
 8001d1e:	f000 f8bb 	bl	8001e98 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d22:	230f      	movs	r3, #15
 8001d24:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d26:	2302      	movs	r3, #2
 8001d28:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d32:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d34:	2300      	movs	r3, #0
 8001d36:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d38:	f107 0308 	add.w	r3, r7, #8
 8001d3c:	2102      	movs	r1, #2
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f001 fcf0 	bl	8003724 <HAL_RCC_ClockConfig>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <SystemClock_Config+0xca>
	{
		Error_Handler();
 8001d4a:	f000 f8a5 	bl	8001e98 <Error_Handler>
	}
}
 8001d4e:	bf00      	nop
 8001d50:	3750      	adds	r7, #80	; 0x50
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40023800 	.word	0x40023800
 8001d5c:	40007000 	.word	0x40007000

08001d60 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 8001d6a:	88fb      	ldrh	r3, [r7, #6]
 8001d6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d70:	d117      	bne.n	8001da2 <HAL_GPIO_EXTI_Callback+0x42>
		if(testStart == 0) {
 8001d72:	4b0e      	ldr	r3, [pc, #56]	; (8001dac <HAL_GPIO_EXTI_Callback+0x4c>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d10d      	bne.n	8001d96 <HAL_GPIO_EXTI_Callback+0x36>
			testStart = 1;
 8001d7a:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <HAL_GPIO_EXTI_Callback+0x4c>)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	701a      	strb	r2, [r3, #0]
			acc = 0;
 8001d80:	490b      	ldr	r1, [pc, #44]	; (8001db0 <HAL_GPIO_EXTI_Callback+0x50>)
 8001d82:	f04f 0200 	mov.w	r2, #0
 8001d86:	f04f 0300 	mov.w	r3, #0
 8001d8a:	e9c1 2300 	strd	r2, r3, [r1]
			printf("Debut du test\r\n");
 8001d8e:	4809      	ldr	r0, [pc, #36]	; (8001db4 <HAL_GPIO_EXTI_Callback+0x54>)
 8001d90:	f005 f8de 	bl	8006f50 <puts>
		else {
			testStart = 0;
			printf("Fin du test\r\n");
		}
	}
}
 8001d94:	e005      	b.n	8001da2 <HAL_GPIO_EXTI_Callback+0x42>
			testStart = 0;
 8001d96:	4b05      	ldr	r3, [pc, #20]	; (8001dac <HAL_GPIO_EXTI_Callback+0x4c>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	701a      	strb	r2, [r3, #0]
			printf("Fin du test\r\n");
 8001d9c:	4806      	ldr	r0, [pc, #24]	; (8001db8 <HAL_GPIO_EXTI_Callback+0x58>)
 8001d9e:	f005 f8d7 	bl	8006f50 <puts>
}
 8001da2:	bf00      	nop
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	2000031c 	.word	0x2000031c
 8001db0:	20000220 	.word	0x20000220
 8001db4:	080090f8 	.word	0x080090f8
 8001db8:	08009108 	.word	0x08009108

08001dbc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart){
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a06      	ldr	r2, [pc, #24]	; (8001de4 <HAL_UART_RxCpltCallback+0x28>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d106      	bne.n	8001ddc <HAL_UART_RxCpltCallback+0x20>
		shell_char_received();
 8001dce:	f7ff fc25 	bl	800161c <shell_char_received>
		HAL_UART_Receive_IT(&huart2, (uint8_t*)&c, 1);
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	4904      	ldr	r1, [pc, #16]	; (8001de8 <HAL_UART_RxCpltCallback+0x2c>)
 8001dd6:	4805      	ldr	r0, [pc, #20]	; (8001dec <HAL_UART_RxCpltCallback+0x30>)
 8001dd8:	f003 fcaf 	bl	800573a <HAL_UART_Receive_IT>
	}
}
 8001ddc:	bf00      	nop
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40004400 	.word	0x40004400
 8001de8:	2000022c 	.word	0x2000022c
 8001dec:	20000538 	.word	0x20000538

08001df0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001df0:	b5b0      	push	{r4, r5, r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af02      	add	r7, sp, #8
 8001df6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a19      	ldr	r2, [pc, #100]	; (8001e64 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d12b      	bne.n	8001e5a <HAL_TIM_PeriodElapsedCallback+0x6a>
		if(testStart == 1){
 8001e02:	4b19      	ldr	r3, [pc, #100]	; (8001e68 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d11d      	bne.n	8001e46 <HAL_TIM_PeriodElapsedCallback+0x56>
			float ret_gauche = Ctrl_SpeedControl(&MoteurGauche, &CodeurGauche);
 8001e0a:	4918      	ldr	r1, [pc, #96]	; (8001e6c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001e0c:	4818      	ldr	r0, [pc, #96]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001e0e:	f7ff f8db 	bl	8000fc8 <Ctrl_SpeedControl>
 8001e12:	ed87 0a03 	vstr	s0, [r7, #12]
			float ret_droite = Ctrl_SpeedControl(&MoteurDroite, &CodeurDroite);
 8001e16:	4917      	ldr	r1, [pc, #92]	; (8001e74 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001e18:	4817      	ldr	r0, [pc, #92]	; (8001e78 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001e1a:	f7ff f8d5 	bl	8000fc8 <Ctrl_SpeedControl>
 8001e1e:	ed87 0a02 	vstr	s0, [r7, #8]
			printf("G: %f\t D: %f\r\n",ret_gauche,ret_droite);
 8001e22:	68f8      	ldr	r0, [r7, #12]
 8001e24:	f7fe fbc0 	bl	80005a8 <__aeabi_f2d>
 8001e28:	4604      	mov	r4, r0
 8001e2a:	460d      	mov	r5, r1
 8001e2c:	68b8      	ldr	r0, [r7, #8]
 8001e2e:	f7fe fbbb 	bl	80005a8 <__aeabi_f2d>
 8001e32:	4602      	mov	r2, r0
 8001e34:	460b      	mov	r3, r1
 8001e36:	e9cd 2300 	strd	r2, r3, [sp]
 8001e3a:	4622      	mov	r2, r4
 8001e3c:	462b      	mov	r3, r5
 8001e3e:	480f      	ldr	r0, [pc, #60]	; (8001e7c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001e40:	f005 f800 	bl	8006e44 <iprintf>
		else{
			MOT_SetDutyCycle(&MoteurGauche, 0);
			MOT_SetDutyCycle(&MoteurDroite, 0);
		}
	}
}
 8001e44:	e009      	b.n	8001e5a <HAL_TIM_PeriodElapsedCallback+0x6a>
			MOT_SetDutyCycle(&MoteurGauche, 0);
 8001e46:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8001e80 <HAL_TIM_PeriodElapsedCallback+0x90>
 8001e4a:	4809      	ldr	r0, [pc, #36]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001e4c:	f7ff faa8 	bl	80013a0 <MOT_SetDutyCycle>
			MOT_SetDutyCycle(&MoteurDroite, 0);
 8001e50:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8001e80 <HAL_TIM_PeriodElapsedCallback+0x90>
 8001e54:	4808      	ldr	r0, [pc, #32]	; (8001e78 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001e56:	f7ff faa3 	bl	80013a0 <MOT_SetDutyCycle>
}
 8001e5a:	bf00      	nop
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bdb0      	pop	{r4, r5, r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40001000 	.word	0x40001000
 8001e68:	2000031c 	.word	0x2000031c
 8001e6c:	200003c0 	.word	0x200003c0
 8001e70:	20000330 	.word	0x20000330
 8001e74:	200003b0 	.word	0x200003b0
 8001e78:	20000368 	.word	0x20000368
 8001e7c:	08009118 	.word	0x08009118
 8001e80:	00000000 	.word	0x00000000

08001e84 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1){
		//uint32_t val = HAL_ADC_GetValue(&hadc1);
		//printf("val = %ld\r\n", val);
		//HAL_ADC_Start_IT(&hadc1);
	}
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e9c:	b672      	cpsid	i
}
 8001e9e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001ea0:	e7fe      	b.n	8001ea0 <Error_Handler+0x8>
	...

08001ea4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	607b      	str	r3, [r7, #4]
 8001eae:	4b10      	ldr	r3, [pc, #64]	; (8001ef0 <HAL_MspInit+0x4c>)
 8001eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb2:	4a0f      	ldr	r2, [pc, #60]	; (8001ef0 <HAL_MspInit+0x4c>)
 8001eb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eba:	4b0d      	ldr	r3, [pc, #52]	; (8001ef0 <HAL_MspInit+0x4c>)
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ec2:	607b      	str	r3, [r7, #4]
 8001ec4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	603b      	str	r3, [r7, #0]
 8001eca:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <HAL_MspInit+0x4c>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	4a08      	ldr	r2, [pc, #32]	; (8001ef0 <HAL_MspInit+0x4c>)
 8001ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ed6:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <HAL_MspInit+0x4c>)
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ede:	603b      	str	r3, [r7, #0]
 8001ee0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ee2:	2007      	movs	r0, #7
 8001ee4:	f001 f984 	bl	80031f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ee8:	bf00      	nop
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40023800 	.word	0x40023800

08001ef4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ef8:	e7fe      	b.n	8001ef8 <NMI_Handler+0x4>

08001efa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001efa:	b480      	push	{r7}
 8001efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001efe:	e7fe      	b.n	8001efe <HardFault_Handler+0x4>

08001f00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f04:	e7fe      	b.n	8001f04 <MemManage_Handler+0x4>

08001f06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f06:	b480      	push	{r7}
 8001f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f0a:	e7fe      	b.n	8001f0a <BusFault_Handler+0x4>

08001f0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f10:	e7fe      	b.n	8001f10 <UsageFault_Handler+0x4>

08001f12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f12:	b480      	push	{r7}
 8001f14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f16:	bf00      	nop
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f24:	bf00      	nop
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f32:	bf00      	nop
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f40:	f000 fc72 	bl	8002828 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f44:	bf00      	nop
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001f4c:	4802      	ldr	r0, [pc, #8]	; (8001f58 <ADC_IRQHandler+0x10>)
 8001f4e:	f000 fcf2 	bl	8002936 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	200003d0 	.word	0x200003d0

08001f5c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f60:	4802      	ldr	r0, [pc, #8]	; (8001f6c <USART2_IRQHandler+0x10>)
 8001f62:	f003 fc1b 	bl	800579c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001f66:	bf00      	nop
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	20000538 	.word	0x20000538

08001f70 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001f74:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001f78:	f001 fbbc 	bl	80036f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f7c:	bf00      	nop
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001f84:	4802      	ldr	r0, [pc, #8]	; (8001f90 <TIM6_DAC_IRQHandler+0x10>)
 8001f86:	f002 fc4d 	bl	8004824 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001f8a:	bf00      	nop
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	20000460 	.word	0x20000460

08001f94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
	return 1;
 8001f98:	2301      	movs	r3, #1
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <_kill>:

int _kill(int pid, int sig)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001fae:	f004 faad 	bl	800650c <__errno>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2216      	movs	r2, #22
 8001fb6:	601a      	str	r2, [r3, #0]
	return -1;
 8001fb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <_exit>:

void _exit (int status)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f7ff ffe7 	bl	8001fa4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001fd6:	e7fe      	b.n	8001fd6 <_exit+0x12>

08001fd8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	617b      	str	r3, [r7, #20]
 8001fe8:	e00a      	b.n	8002000 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001fea:	f3af 8000 	nop.w
 8001fee:	4601      	mov	r1, r0
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	1c5a      	adds	r2, r3, #1
 8001ff4:	60ba      	str	r2, [r7, #8]
 8001ff6:	b2ca      	uxtb	r2, r1
 8001ff8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	617b      	str	r3, [r7, #20]
 8002000:	697a      	ldr	r2, [r7, #20]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	429a      	cmp	r2, r3
 8002006:	dbf0      	blt.n	8001fea <_read+0x12>
	}

return len;
 8002008:	687b      	ldr	r3, [r7, #4]
}
 800200a:	4618      	mov	r0, r3
 800200c:	3718      	adds	r7, #24
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	b086      	sub	sp, #24
 8002016:	af00      	add	r7, sp, #0
 8002018:	60f8      	str	r0, [r7, #12]
 800201a:	60b9      	str	r1, [r7, #8]
 800201c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800201e:	2300      	movs	r3, #0
 8002020:	617b      	str	r3, [r7, #20]
 8002022:	e009      	b.n	8002038 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	1c5a      	adds	r2, r3, #1
 8002028:	60ba      	str	r2, [r7, #8]
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff fa25 	bl	800147c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	3301      	adds	r3, #1
 8002036:	617b      	str	r3, [r7, #20]
 8002038:	697a      	ldr	r2, [r7, #20]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	429a      	cmp	r2, r3
 800203e:	dbf1      	blt.n	8002024 <_write+0x12>
	}
	return len;
 8002040:	687b      	ldr	r3, [r7, #4]
}
 8002042:	4618      	mov	r0, r3
 8002044:	3718      	adds	r7, #24
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <_close>:

int _close(int file)
{
 800204a:	b480      	push	{r7}
 800204c:	b083      	sub	sp, #12
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
	return -1;
 8002052:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002056:	4618      	mov	r0, r3
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002062:	b480      	push	{r7}
 8002064:	b083      	sub	sp, #12
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
 800206a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002072:	605a      	str	r2, [r3, #4]
	return 0;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <_isatty>:

int _isatty(int file)
{
 8002082:	b480      	push	{r7}
 8002084:	b083      	sub	sp, #12
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
	return 1;
 800208a:	2301      	movs	r3, #1
}
 800208c:	4618      	mov	r0, r3
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
	return 0;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3714      	adds	r7, #20
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
	...

080020b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020bc:	4a14      	ldr	r2, [pc, #80]	; (8002110 <_sbrk+0x5c>)
 80020be:	4b15      	ldr	r3, [pc, #84]	; (8002114 <_sbrk+0x60>)
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020c8:	4b13      	ldr	r3, [pc, #76]	; (8002118 <_sbrk+0x64>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d102      	bne.n	80020d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020d0:	4b11      	ldr	r3, [pc, #68]	; (8002118 <_sbrk+0x64>)
 80020d2:	4a12      	ldr	r2, [pc, #72]	; (800211c <_sbrk+0x68>)
 80020d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020d6:	4b10      	ldr	r3, [pc, #64]	; (8002118 <_sbrk+0x64>)
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4413      	add	r3, r2
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d207      	bcs.n	80020f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020e4:	f004 fa12 	bl	800650c <__errno>
 80020e8:	4603      	mov	r3, r0
 80020ea:	220c      	movs	r2, #12
 80020ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020ee:	f04f 33ff 	mov.w	r3, #4294967295
 80020f2:	e009      	b.n	8002108 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020f4:	4b08      	ldr	r3, [pc, #32]	; (8002118 <_sbrk+0x64>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020fa:	4b07      	ldr	r3, [pc, #28]	; (8002118 <_sbrk+0x64>)
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4413      	add	r3, r2
 8002102:	4a05      	ldr	r2, [pc, #20]	; (8002118 <_sbrk+0x64>)
 8002104:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002106:	68fb      	ldr	r3, [r7, #12]
}
 8002108:	4618      	mov	r0, r3
 800210a:	3718      	adds	r7, #24
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	20020000 	.word	0x20020000
 8002114:	00000400 	.word	0x00000400
 8002118:	20000320 	.word	0x20000320
 800211c:	20000590 	.word	0x20000590

08002120 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002124:	4b06      	ldr	r3, [pc, #24]	; (8002140 <SystemInit+0x20>)
 8002126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800212a:	4a05      	ldr	r2, [pc, #20]	; (8002140 <SystemInit+0x20>)
 800212c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002130:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002134:	bf00      	nop
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	e000ed00 	.word	0xe000ed00

08002144 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b096      	sub	sp, #88	; 0x58
 8002148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800214a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	605a      	str	r2, [r3, #4]
 8002154:	609a      	str	r2, [r3, #8]
 8002156:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002158:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002162:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	605a      	str	r2, [r3, #4]
 800216c:	609a      	str	r2, [r3, #8]
 800216e:	60da      	str	r2, [r3, #12]
 8002170:	611a      	str	r2, [r3, #16]
 8002172:	615a      	str	r2, [r3, #20]
 8002174:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002176:	1d3b      	adds	r3, r7, #4
 8002178:	2220      	movs	r2, #32
 800217a:	2100      	movs	r1, #0
 800217c:	4618      	mov	r0, r3
 800217e:	f004 f9ef 	bl	8006560 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002182:	4b44      	ldr	r3, [pc, #272]	; (8002294 <MX_TIM1_Init+0x150>)
 8002184:	4a44      	ldr	r2, [pc, #272]	; (8002298 <MX_TIM1_Init+0x154>)
 8002186:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002188:	4b42      	ldr	r3, [pc, #264]	; (8002294 <MX_TIM1_Init+0x150>)
 800218a:	2200      	movs	r2, #0
 800218c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800218e:	4b41      	ldr	r3, [pc, #260]	; (8002294 <MX_TIM1_Init+0x150>)
 8002190:	2200      	movs	r2, #0
 8002192:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3360-1;
 8002194:	4b3f      	ldr	r3, [pc, #252]	; (8002294 <MX_TIM1_Init+0x150>)
 8002196:	f640 521f 	movw	r2, #3359	; 0xd1f
 800219a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800219c:	4b3d      	ldr	r3, [pc, #244]	; (8002294 <MX_TIM1_Init+0x150>)
 800219e:	2200      	movs	r2, #0
 80021a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80021a2:	4b3c      	ldr	r3, [pc, #240]	; (8002294 <MX_TIM1_Init+0x150>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021a8:	4b3a      	ldr	r3, [pc, #232]	; (8002294 <MX_TIM1_Init+0x150>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80021ae:	4839      	ldr	r0, [pc, #228]	; (8002294 <MX_TIM1_Init+0x150>)
 80021b0:	f002 f822 	bl	80041f8 <HAL_TIM_Base_Init>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80021ba:	f7ff fe6d 	bl	8001e98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021c2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80021c4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80021c8:	4619      	mov	r1, r3
 80021ca:	4832      	ldr	r0, [pc, #200]	; (8002294 <MX_TIM1_Init+0x150>)
 80021cc:	f002 fcf4 	bl	8004bb8 <HAL_TIM_ConfigClockSource>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80021d6:	f7ff fe5f 	bl	8001e98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80021da:	482e      	ldr	r0, [pc, #184]	; (8002294 <MX_TIM1_Init+0x150>)
 80021dc:	f002 f8cc 	bl	8004378 <HAL_TIM_PWM_Init>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80021e6:	f7ff fe57 	bl	8001e98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021ea:	2300      	movs	r3, #0
 80021ec:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021ee:	2300      	movs	r3, #0
 80021f0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80021f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80021f6:	4619      	mov	r1, r3
 80021f8:	4826      	ldr	r0, [pc, #152]	; (8002294 <MX_TIM1_Init+0x150>)
 80021fa:	f003 f8dd 	bl	80053b8 <HAL_TIMEx_MasterConfigSynchronization>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002204:	f7ff fe48 	bl	8001e98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002208:	2360      	movs	r3, #96	; 0x60
 800220a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800220c:	2300      	movs	r3, #0
 800220e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002210:	2300      	movs	r3, #0
 8002212:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002214:	2300      	movs	r3, #0
 8002216:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002218:	2300      	movs	r3, #0
 800221a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800221c:	2300      	movs	r3, #0
 800221e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002220:	2300      	movs	r3, #0
 8002222:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002224:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002228:	2200      	movs	r2, #0
 800222a:	4619      	mov	r1, r3
 800222c:	4819      	ldr	r0, [pc, #100]	; (8002294 <MX_TIM1_Init+0x150>)
 800222e:	f002 fc01 	bl	8004a34 <HAL_TIM_PWM_ConfigChannel>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002238:	f7ff fe2e 	bl	8001e98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800223c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002240:	2204      	movs	r2, #4
 8002242:	4619      	mov	r1, r3
 8002244:	4813      	ldr	r0, [pc, #76]	; (8002294 <MX_TIM1_Init+0x150>)
 8002246:	f002 fbf5 	bl	8004a34 <HAL_TIM_PWM_ConfigChannel>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002250:	f7ff fe22 	bl	8001e98 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002254:	2300      	movs	r3, #0
 8002256:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002258:	2300      	movs	r3, #0
 800225a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800225c:	2300      	movs	r3, #0
 800225e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002260:	2300      	movs	r3, #0
 8002262:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002264:	2300      	movs	r3, #0
 8002266:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002268:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800226c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800226e:	2300      	movs	r3, #0
 8002270:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002272:	1d3b      	adds	r3, r7, #4
 8002274:	4619      	mov	r1, r3
 8002276:	4807      	ldr	r0, [pc, #28]	; (8002294 <MX_TIM1_Init+0x150>)
 8002278:	f003 f91a 	bl	80054b0 <HAL_TIMEx_ConfigBreakDeadTime>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8002282:	f7ff fe09 	bl	8001e98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002286:	4803      	ldr	r0, [pc, #12]	; (8002294 <MX_TIM1_Init+0x150>)
 8002288:	f000 f99e 	bl	80025c8 <HAL_TIM_MspPostInit>

}
 800228c:	bf00      	nop
 800228e:	3758      	adds	r7, #88	; 0x58
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	200004a8 	.word	0x200004a8
 8002298:	40010000 	.word	0x40010000

0800229c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b08c      	sub	sp, #48	; 0x30
 80022a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80022a2:	f107 030c 	add.w	r3, r7, #12
 80022a6:	2224      	movs	r2, #36	; 0x24
 80022a8:	2100      	movs	r1, #0
 80022aa:	4618      	mov	r0, r3
 80022ac:	f004 f958 	bl	8006560 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022b0:	1d3b      	adds	r3, r7, #4
 80022b2:	2200      	movs	r2, #0
 80022b4:	601a      	str	r2, [r3, #0]
 80022b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80022b8:	4b21      	ldr	r3, [pc, #132]	; (8002340 <MX_TIM2_Init+0xa4>)
 80022ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80022c0:	4b1f      	ldr	r3, [pc, #124]	; (8002340 <MX_TIM2_Init+0xa4>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022c6:	4b1e      	ldr	r3, [pc, #120]	; (8002340 <MX_TIM2_Init+0xa4>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80022cc:	4b1c      	ldr	r3, [pc, #112]	; (8002340 <MX_TIM2_Init+0xa4>)
 80022ce:	f04f 32ff 	mov.w	r2, #4294967295
 80022d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022d4:	4b1a      	ldr	r3, [pc, #104]	; (8002340 <MX_TIM2_Init+0xa4>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80022da:	4b19      	ldr	r3, [pc, #100]	; (8002340 <MX_TIM2_Init+0xa4>)
 80022dc:	2280      	movs	r2, #128	; 0x80
 80022de:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80022e0:	2303      	movs	r3, #3
 80022e2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80022e4:	2300      	movs	r3, #0
 80022e6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80022e8:	2301      	movs	r3, #1
 80022ea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80022ec:	2300      	movs	r3, #0
 80022ee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80022f0:	2300      	movs	r3, #0
 80022f2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80022f4:	2300      	movs	r3, #0
 80022f6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80022f8:	2301      	movs	r3, #1
 80022fa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80022fc:	2300      	movs	r3, #0
 80022fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002300:	2300      	movs	r3, #0
 8002302:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002304:	f107 030c 	add.w	r3, r7, #12
 8002308:	4619      	mov	r1, r3
 800230a:	480d      	ldr	r0, [pc, #52]	; (8002340 <MX_TIM2_Init+0xa4>)
 800230c:	f002 f956 	bl	80045bc <HAL_TIM_Encoder_Init>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002316:	f7ff fdbf 	bl	8001e98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800231a:	2300      	movs	r3, #0
 800231c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800231e:	2300      	movs	r3, #0
 8002320:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002322:	1d3b      	adds	r3, r7, #4
 8002324:	4619      	mov	r1, r3
 8002326:	4806      	ldr	r0, [pc, #24]	; (8002340 <MX_TIM2_Init+0xa4>)
 8002328:	f003 f846 	bl	80053b8 <HAL_TIMEx_MasterConfigSynchronization>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002332:	f7ff fdb1 	bl	8001e98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002336:	bf00      	nop
 8002338:	3730      	adds	r7, #48	; 0x30
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	200004f0 	.word	0x200004f0

08002344 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b08c      	sub	sp, #48	; 0x30
 8002348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800234a:	f107 030c 	add.w	r3, r7, #12
 800234e:	2224      	movs	r2, #36	; 0x24
 8002350:	2100      	movs	r1, #0
 8002352:	4618      	mov	r0, r3
 8002354:	f004 f904 	bl	8006560 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002358:	1d3b      	adds	r3, r7, #4
 800235a:	2200      	movs	r2, #0
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002360:	4b20      	ldr	r3, [pc, #128]	; (80023e4 <MX_TIM3_Init+0xa0>)
 8002362:	4a21      	ldr	r2, [pc, #132]	; (80023e8 <MX_TIM3_Init+0xa4>)
 8002364:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002366:	4b1f      	ldr	r3, [pc, #124]	; (80023e4 <MX_TIM3_Init+0xa0>)
 8002368:	2200      	movs	r2, #0
 800236a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800236c:	4b1d      	ldr	r3, [pc, #116]	; (80023e4 <MX_TIM3_Init+0xa0>)
 800236e:	2200      	movs	r2, #0
 8002370:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002372:	4b1c      	ldr	r3, [pc, #112]	; (80023e4 <MX_TIM3_Init+0xa0>)
 8002374:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002378:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800237a:	4b1a      	ldr	r3, [pc, #104]	; (80023e4 <MX_TIM3_Init+0xa0>)
 800237c:	2200      	movs	r2, #0
 800237e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002380:	4b18      	ldr	r3, [pc, #96]	; (80023e4 <MX_TIM3_Init+0xa0>)
 8002382:	2200      	movs	r2, #0
 8002384:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002386:	2303      	movs	r3, #3
 8002388:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800238a:	2300      	movs	r3, #0
 800238c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800238e:	2301      	movs	r3, #1
 8002390:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002392:	2300      	movs	r3, #0
 8002394:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002396:	2300      	movs	r3, #0
 8002398:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800239a:	2300      	movs	r3, #0
 800239c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800239e:	2301      	movs	r3, #1
 80023a0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80023a2:	2300      	movs	r3, #0
 80023a4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80023a6:	2300      	movs	r3, #0
 80023a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80023aa:	f107 030c 	add.w	r3, r7, #12
 80023ae:	4619      	mov	r1, r3
 80023b0:	480c      	ldr	r0, [pc, #48]	; (80023e4 <MX_TIM3_Init+0xa0>)
 80023b2:	f002 f903 	bl	80045bc <HAL_TIM_Encoder_Init>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80023bc:	f7ff fd6c 	bl	8001e98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023c0:	2300      	movs	r3, #0
 80023c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023c4:	2300      	movs	r3, #0
 80023c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023c8:	1d3b      	adds	r3, r7, #4
 80023ca:	4619      	mov	r1, r3
 80023cc:	4805      	ldr	r0, [pc, #20]	; (80023e4 <MX_TIM3_Init+0xa0>)
 80023ce:	f002 fff3 	bl	80053b8 <HAL_TIMEx_MasterConfigSynchronization>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80023d8:	f7ff fd5e 	bl	8001e98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80023dc:	bf00      	nop
 80023de:	3730      	adds	r7, #48	; 0x30
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	20000418 	.word	0x20000418
 80023e8:	40000400 	.word	0x40000400

080023ec <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023f2:	463b      	mov	r3, r7
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80023fa:	4b15      	ldr	r3, [pc, #84]	; (8002450 <MX_TIM6_Init+0x64>)
 80023fc:	4a15      	ldr	r2, [pc, #84]	; (8002454 <MX_TIM6_Init+0x68>)
 80023fe:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8400-1;
 8002400:	4b13      	ldr	r3, [pc, #76]	; (8002450 <MX_TIM6_Init+0x64>)
 8002402:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8002406:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002408:	4b11      	ldr	r3, [pc, #68]	; (8002450 <MX_TIM6_Init+0x64>)
 800240a:	2200      	movs	r2, #0
 800240c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 200;
 800240e:	4b10      	ldr	r3, [pc, #64]	; (8002450 <MX_TIM6_Init+0x64>)
 8002410:	22c8      	movs	r2, #200	; 0xc8
 8002412:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002414:	4b0e      	ldr	r3, [pc, #56]	; (8002450 <MX_TIM6_Init+0x64>)
 8002416:	2200      	movs	r2, #0
 8002418:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800241a:	480d      	ldr	r0, [pc, #52]	; (8002450 <MX_TIM6_Init+0x64>)
 800241c:	f001 feec 	bl	80041f8 <HAL_TIM_Base_Init>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002426:	f7ff fd37 	bl	8001e98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800242a:	2300      	movs	r3, #0
 800242c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800242e:	2300      	movs	r3, #0
 8002430:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002432:	463b      	mov	r3, r7
 8002434:	4619      	mov	r1, r3
 8002436:	4806      	ldr	r0, [pc, #24]	; (8002450 <MX_TIM6_Init+0x64>)
 8002438:	f002 ffbe 	bl	80053b8 <HAL_TIMEx_MasterConfigSynchronization>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002442:	f7ff fd29 	bl	8001e98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002446:	bf00      	nop
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	20000460 	.word	0x20000460
 8002454:	40001000 	.word	0x40001000

08002458 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a18      	ldr	r2, [pc, #96]	; (80024c8 <HAL_TIM_Base_MspInit+0x70>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d10e      	bne.n	8002488 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800246a:	2300      	movs	r3, #0
 800246c:	60fb      	str	r3, [r7, #12]
 800246e:	4b17      	ldr	r3, [pc, #92]	; (80024cc <HAL_TIM_Base_MspInit+0x74>)
 8002470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002472:	4a16      	ldr	r2, [pc, #88]	; (80024cc <HAL_TIM_Base_MspInit+0x74>)
 8002474:	f043 0301 	orr.w	r3, r3, #1
 8002478:	6453      	str	r3, [r2, #68]	; 0x44
 800247a:	4b14      	ldr	r3, [pc, #80]	; (80024cc <HAL_TIM_Base_MspInit+0x74>)
 800247c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	60fb      	str	r3, [r7, #12]
 8002484:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002486:	e01a      	b.n	80024be <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM6)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a10      	ldr	r2, [pc, #64]	; (80024d0 <HAL_TIM_Base_MspInit+0x78>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d115      	bne.n	80024be <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002492:	2300      	movs	r3, #0
 8002494:	60bb      	str	r3, [r7, #8]
 8002496:	4b0d      	ldr	r3, [pc, #52]	; (80024cc <HAL_TIM_Base_MspInit+0x74>)
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	4a0c      	ldr	r2, [pc, #48]	; (80024cc <HAL_TIM_Base_MspInit+0x74>)
 800249c:	f043 0310 	orr.w	r3, r3, #16
 80024a0:	6413      	str	r3, [r2, #64]	; 0x40
 80024a2:	4b0a      	ldr	r3, [pc, #40]	; (80024cc <HAL_TIM_Base_MspInit+0x74>)
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	f003 0310 	and.w	r3, r3, #16
 80024aa:	60bb      	str	r3, [r7, #8]
 80024ac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80024ae:	2200      	movs	r2, #0
 80024b0:	2100      	movs	r1, #0
 80024b2:	2036      	movs	r0, #54	; 0x36
 80024b4:	f000 fea7 	bl	8003206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80024b8:	2036      	movs	r0, #54	; 0x36
 80024ba:	f000 fec0 	bl	800323e <HAL_NVIC_EnableIRQ>
}
 80024be:	bf00      	nop
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	40010000 	.word	0x40010000
 80024cc:	40023800 	.word	0x40023800
 80024d0:	40001000 	.word	0x40001000

080024d4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b08c      	sub	sp, #48	; 0x30
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024dc:	f107 031c 	add.w	r3, r7, #28
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	605a      	str	r2, [r3, #4]
 80024e6:	609a      	str	r2, [r3, #8]
 80024e8:	60da      	str	r2, [r3, #12]
 80024ea:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024f4:	d12c      	bne.n	8002550 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024f6:	2300      	movs	r3, #0
 80024f8:	61bb      	str	r3, [r7, #24]
 80024fa:	4b30      	ldr	r3, [pc, #192]	; (80025bc <HAL_TIM_Encoder_MspInit+0xe8>)
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	4a2f      	ldr	r2, [pc, #188]	; (80025bc <HAL_TIM_Encoder_MspInit+0xe8>)
 8002500:	f043 0301 	orr.w	r3, r3, #1
 8002504:	6413      	str	r3, [r2, #64]	; 0x40
 8002506:	4b2d      	ldr	r3, [pc, #180]	; (80025bc <HAL_TIM_Encoder_MspInit+0xe8>)
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	61bb      	str	r3, [r7, #24]
 8002510:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002512:	2300      	movs	r3, #0
 8002514:	617b      	str	r3, [r7, #20]
 8002516:	4b29      	ldr	r3, [pc, #164]	; (80025bc <HAL_TIM_Encoder_MspInit+0xe8>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	4a28      	ldr	r2, [pc, #160]	; (80025bc <HAL_TIM_Encoder_MspInit+0xe8>)
 800251c:	f043 0301 	orr.w	r3, r3, #1
 8002520:	6313      	str	r3, [r2, #48]	; 0x30
 8002522:	4b26      	ldr	r3, [pc, #152]	; (80025bc <HAL_TIM_Encoder_MspInit+0xe8>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	617b      	str	r3, [r7, #20]
 800252c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCG_A_Pin|ENCG_B_Pin;
 800252e:	2303      	movs	r3, #3
 8002530:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002532:	2302      	movs	r3, #2
 8002534:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002536:	2300      	movs	r3, #0
 8002538:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800253a:	2300      	movs	r3, #0
 800253c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800253e:	2301      	movs	r3, #1
 8002540:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002542:	f107 031c 	add.w	r3, r7, #28
 8002546:	4619      	mov	r1, r3
 8002548:	481d      	ldr	r0, [pc, #116]	; (80025c0 <HAL_TIM_Encoder_MspInit+0xec>)
 800254a:	f000 ff25 	bl	8003398 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800254e:	e030      	b.n	80025b2 <HAL_TIM_Encoder_MspInit+0xde>
  else if(tim_encoderHandle->Instance==TIM3)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a1b      	ldr	r2, [pc, #108]	; (80025c4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d12b      	bne.n	80025b2 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800255a:	2300      	movs	r3, #0
 800255c:	613b      	str	r3, [r7, #16]
 800255e:	4b17      	ldr	r3, [pc, #92]	; (80025bc <HAL_TIM_Encoder_MspInit+0xe8>)
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	4a16      	ldr	r2, [pc, #88]	; (80025bc <HAL_TIM_Encoder_MspInit+0xe8>)
 8002564:	f043 0302 	orr.w	r3, r3, #2
 8002568:	6413      	str	r3, [r2, #64]	; 0x40
 800256a:	4b14      	ldr	r3, [pc, #80]	; (80025bc <HAL_TIM_Encoder_MspInit+0xe8>)
 800256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	613b      	str	r3, [r7, #16]
 8002574:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002576:	2300      	movs	r3, #0
 8002578:	60fb      	str	r3, [r7, #12]
 800257a:	4b10      	ldr	r3, [pc, #64]	; (80025bc <HAL_TIM_Encoder_MspInit+0xe8>)
 800257c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257e:	4a0f      	ldr	r2, [pc, #60]	; (80025bc <HAL_TIM_Encoder_MspInit+0xe8>)
 8002580:	f043 0301 	orr.w	r3, r3, #1
 8002584:	6313      	str	r3, [r2, #48]	; 0x30
 8002586:	4b0d      	ldr	r3, [pc, #52]	; (80025bc <HAL_TIM_Encoder_MspInit+0xe8>)
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	60fb      	str	r3, [r7, #12]
 8002590:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCD_A_Pin|ENCD_B_Pin;
 8002592:	23c0      	movs	r3, #192	; 0xc0
 8002594:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002596:	2302      	movs	r3, #2
 8002598:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259a:	2300      	movs	r3, #0
 800259c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800259e:	2300      	movs	r3, #0
 80025a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80025a2:	2302      	movs	r3, #2
 80025a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a6:	f107 031c 	add.w	r3, r7, #28
 80025aa:	4619      	mov	r1, r3
 80025ac:	4804      	ldr	r0, [pc, #16]	; (80025c0 <HAL_TIM_Encoder_MspInit+0xec>)
 80025ae:	f000 fef3 	bl	8003398 <HAL_GPIO_Init>
}
 80025b2:	bf00      	nop
 80025b4:	3730      	adds	r7, #48	; 0x30
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	40023800 	.word	0x40023800
 80025c0:	40020000 	.word	0x40020000
 80025c4:	40000400 	.word	0x40000400

080025c8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b088      	sub	sp, #32
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d0:	f107 030c 	add.w	r3, r7, #12
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	605a      	str	r2, [r3, #4]
 80025da:	609a      	str	r2, [r3, #8]
 80025dc:	60da      	str	r2, [r3, #12]
 80025de:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a12      	ldr	r2, [pc, #72]	; (8002630 <HAL_TIM_MspPostInit+0x68>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d11e      	bne.n	8002628 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ea:	2300      	movs	r3, #0
 80025ec:	60bb      	str	r3, [r7, #8]
 80025ee:	4b11      	ldr	r3, [pc, #68]	; (8002634 <HAL_TIM_MspPostInit+0x6c>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f2:	4a10      	ldr	r2, [pc, #64]	; (8002634 <HAL_TIM_MspPostInit+0x6c>)
 80025f4:	f043 0301 	orr.w	r3, r3, #1
 80025f8:	6313      	str	r3, [r2, #48]	; 0x30
 80025fa:	4b0e      	ldr	r3, [pc, #56]	; (8002634 <HAL_TIM_MspPostInit+0x6c>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	60bb      	str	r3, [r7, #8]
 8002604:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = MOTG_PWM_Pin|MOTD_PWM_Pin;
 8002606:	f44f 7340 	mov.w	r3, #768	; 0x300
 800260a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800260c:	2302      	movs	r3, #2
 800260e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002610:	2300      	movs	r3, #0
 8002612:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002614:	2300      	movs	r3, #0
 8002616:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002618:	2301      	movs	r3, #1
 800261a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800261c:	f107 030c 	add.w	r3, r7, #12
 8002620:	4619      	mov	r1, r3
 8002622:	4805      	ldr	r0, [pc, #20]	; (8002638 <HAL_TIM_MspPostInit+0x70>)
 8002624:	f000 feb8 	bl	8003398 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002628:	bf00      	nop
 800262a:	3720      	adds	r7, #32
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	40010000 	.word	0x40010000
 8002634:	40023800 	.word	0x40023800
 8002638:	40020000 	.word	0x40020000

0800263c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002640:	4b11      	ldr	r3, [pc, #68]	; (8002688 <MX_USART2_UART_Init+0x4c>)
 8002642:	4a12      	ldr	r2, [pc, #72]	; (800268c <MX_USART2_UART_Init+0x50>)
 8002644:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002646:	4b10      	ldr	r3, [pc, #64]	; (8002688 <MX_USART2_UART_Init+0x4c>)
 8002648:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800264c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800264e:	4b0e      	ldr	r3, [pc, #56]	; (8002688 <MX_USART2_UART_Init+0x4c>)
 8002650:	2200      	movs	r2, #0
 8002652:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002654:	4b0c      	ldr	r3, [pc, #48]	; (8002688 <MX_USART2_UART_Init+0x4c>)
 8002656:	2200      	movs	r2, #0
 8002658:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800265a:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <MX_USART2_UART_Init+0x4c>)
 800265c:	2200      	movs	r2, #0
 800265e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002660:	4b09      	ldr	r3, [pc, #36]	; (8002688 <MX_USART2_UART_Init+0x4c>)
 8002662:	220c      	movs	r2, #12
 8002664:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002666:	4b08      	ldr	r3, [pc, #32]	; (8002688 <MX_USART2_UART_Init+0x4c>)
 8002668:	2200      	movs	r2, #0
 800266a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800266c:	4b06      	ldr	r3, [pc, #24]	; (8002688 <MX_USART2_UART_Init+0x4c>)
 800266e:	2200      	movs	r2, #0
 8002670:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002672:	4805      	ldr	r0, [pc, #20]	; (8002688 <MX_USART2_UART_Init+0x4c>)
 8002674:	f002 ff82 	bl	800557c <HAL_UART_Init>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800267e:	f7ff fc0b 	bl	8001e98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002682:	bf00      	nop
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	20000538 	.word	0x20000538
 800268c:	40004400 	.word	0x40004400

08002690 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b08a      	sub	sp, #40	; 0x28
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002698:	f107 0314 	add.w	r3, r7, #20
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	605a      	str	r2, [r3, #4]
 80026a2:	609a      	str	r2, [r3, #8]
 80026a4:	60da      	str	r2, [r3, #12]
 80026a6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a1d      	ldr	r2, [pc, #116]	; (8002724 <HAL_UART_MspInit+0x94>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d133      	bne.n	800271a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80026b2:	2300      	movs	r3, #0
 80026b4:	613b      	str	r3, [r7, #16]
 80026b6:	4b1c      	ldr	r3, [pc, #112]	; (8002728 <HAL_UART_MspInit+0x98>)
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	4a1b      	ldr	r2, [pc, #108]	; (8002728 <HAL_UART_MspInit+0x98>)
 80026bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026c0:	6413      	str	r3, [r2, #64]	; 0x40
 80026c2:	4b19      	ldr	r3, [pc, #100]	; (8002728 <HAL_UART_MspInit+0x98>)
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ca:	613b      	str	r3, [r7, #16]
 80026cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ce:	2300      	movs	r3, #0
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	4b15      	ldr	r3, [pc, #84]	; (8002728 <HAL_UART_MspInit+0x98>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d6:	4a14      	ldr	r2, [pc, #80]	; (8002728 <HAL_UART_MspInit+0x98>)
 80026d8:	f043 0301 	orr.w	r3, r3, #1
 80026dc:	6313      	str	r3, [r2, #48]	; 0x30
 80026de:	4b12      	ldr	r3, [pc, #72]	; (8002728 <HAL_UART_MspInit+0x98>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80026ea:	230c      	movs	r3, #12
 80026ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ee:	2302      	movs	r3, #2
 80026f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f2:	2300      	movs	r3, #0
 80026f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026f6:	2303      	movs	r3, #3
 80026f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026fa:	2307      	movs	r3, #7
 80026fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026fe:	f107 0314 	add.w	r3, r7, #20
 8002702:	4619      	mov	r1, r3
 8002704:	4809      	ldr	r0, [pc, #36]	; (800272c <HAL_UART_MspInit+0x9c>)
 8002706:	f000 fe47 	bl	8003398 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800270a:	2200      	movs	r2, #0
 800270c:	2100      	movs	r1, #0
 800270e:	2026      	movs	r0, #38	; 0x26
 8002710:	f000 fd79 	bl	8003206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002714:	2026      	movs	r0, #38	; 0x26
 8002716:	f000 fd92 	bl	800323e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800271a:	bf00      	nop
 800271c:	3728      	adds	r7, #40	; 0x28
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	40004400 	.word	0x40004400
 8002728:	40023800 	.word	0x40023800
 800272c:	40020000 	.word	0x40020000

08002730 <Reset_Handler>:
 8002730:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002768 <LoopFillZerobss+0x12>
 8002734:	480d      	ldr	r0, [pc, #52]	; (800276c <LoopFillZerobss+0x16>)
 8002736:	490e      	ldr	r1, [pc, #56]	; (8002770 <LoopFillZerobss+0x1a>)
 8002738:	4a0e      	ldr	r2, [pc, #56]	; (8002774 <LoopFillZerobss+0x1e>)
 800273a:	2300      	movs	r3, #0
 800273c:	e002      	b.n	8002744 <LoopCopyDataInit>

0800273e <CopyDataInit>:
 800273e:	58d4      	ldr	r4, [r2, r3]
 8002740:	50c4      	str	r4, [r0, r3]
 8002742:	3304      	adds	r3, #4

08002744 <LoopCopyDataInit>:
 8002744:	18c4      	adds	r4, r0, r3
 8002746:	428c      	cmp	r4, r1
 8002748:	d3f9      	bcc.n	800273e <CopyDataInit>
 800274a:	4a0b      	ldr	r2, [pc, #44]	; (8002778 <LoopFillZerobss+0x22>)
 800274c:	4c0b      	ldr	r4, [pc, #44]	; (800277c <LoopFillZerobss+0x26>)
 800274e:	2300      	movs	r3, #0
 8002750:	e001      	b.n	8002756 <LoopFillZerobss>

08002752 <FillZerobss>:
 8002752:	6013      	str	r3, [r2, #0]
 8002754:	3204      	adds	r2, #4

08002756 <LoopFillZerobss>:
 8002756:	42a2      	cmp	r2, r4
 8002758:	d3fb      	bcc.n	8002752 <FillZerobss>
 800275a:	f7ff fce1 	bl	8002120 <SystemInit>
 800275e:	f003 fedb 	bl	8006518 <__libc_init_array>
 8002762:	f7ff f9a1 	bl	8001aa8 <main>
 8002766:	4770      	bx	lr
 8002768:	20020000 	.word	0x20020000
 800276c:	20000000 	.word	0x20000000
 8002770:	200001fc 	.word	0x200001fc
 8002774:	08009534 	.word	0x08009534
 8002778:	20000200 	.word	0x20000200
 800277c:	20000590 	.word	0x20000590

08002780 <CAN1_RX0_IRQHandler>:
 8002780:	e7fe      	b.n	8002780 <CAN1_RX0_IRQHandler>
	...

08002784 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002788:	4b0e      	ldr	r3, [pc, #56]	; (80027c4 <HAL_Init+0x40>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a0d      	ldr	r2, [pc, #52]	; (80027c4 <HAL_Init+0x40>)
 800278e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002792:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002794:	4b0b      	ldr	r3, [pc, #44]	; (80027c4 <HAL_Init+0x40>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a0a      	ldr	r2, [pc, #40]	; (80027c4 <HAL_Init+0x40>)
 800279a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800279e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027a0:	4b08      	ldr	r3, [pc, #32]	; (80027c4 <HAL_Init+0x40>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a07      	ldr	r2, [pc, #28]	; (80027c4 <HAL_Init+0x40>)
 80027a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027ac:	2003      	movs	r0, #3
 80027ae:	f000 fd1f 	bl	80031f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027b2:	2000      	movs	r0, #0
 80027b4:	f000 f808 	bl	80027c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027b8:	f7ff fb74 	bl	8001ea4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	40023c00 	.word	0x40023c00

080027c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027d0:	4b12      	ldr	r3, [pc, #72]	; (800281c <HAL_InitTick+0x54>)
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	4b12      	ldr	r3, [pc, #72]	; (8002820 <HAL_InitTick+0x58>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	4619      	mov	r1, r3
 80027da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027de:	fbb3 f3f1 	udiv	r3, r3, r1
 80027e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 fd37 	bl	800325a <HAL_SYSTICK_Config>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e00e      	b.n	8002814 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2b0f      	cmp	r3, #15
 80027fa:	d80a      	bhi.n	8002812 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027fc:	2200      	movs	r2, #0
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	f04f 30ff 	mov.w	r0, #4294967295
 8002804:	f000 fcff 	bl	8003206 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002808:	4a06      	ldr	r2, [pc, #24]	; (8002824 <HAL_InitTick+0x5c>)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800280e:	2300      	movs	r3, #0
 8002810:	e000      	b.n	8002814 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
}
 8002814:	4618      	mov	r0, r3
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	20000020 	.word	0x20000020
 8002820:	20000028 	.word	0x20000028
 8002824:	20000024 	.word	0x20000024

08002828 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800282c:	4b06      	ldr	r3, [pc, #24]	; (8002848 <HAL_IncTick+0x20>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	461a      	mov	r2, r3
 8002832:	4b06      	ldr	r3, [pc, #24]	; (800284c <HAL_IncTick+0x24>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4413      	add	r3, r2
 8002838:	4a04      	ldr	r2, [pc, #16]	; (800284c <HAL_IncTick+0x24>)
 800283a:	6013      	str	r3, [r2, #0]
}
 800283c:	bf00      	nop
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	20000028 	.word	0x20000028
 800284c:	2000057c 	.word	0x2000057c

08002850 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  return uwTick;
 8002854:	4b03      	ldr	r3, [pc, #12]	; (8002864 <HAL_GetTick+0x14>)
 8002856:	681b      	ldr	r3, [r3, #0]
}
 8002858:	4618      	mov	r0, r3
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	2000057c 	.word	0x2000057c

08002868 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002870:	f7ff ffee 	bl	8002850 <HAL_GetTick>
 8002874:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002880:	d005      	beq.n	800288e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002882:	4b0a      	ldr	r3, [pc, #40]	; (80028ac <HAL_Delay+0x44>)
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	461a      	mov	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	4413      	add	r3, r2
 800288c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800288e:	bf00      	nop
 8002890:	f7ff ffde 	bl	8002850 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	429a      	cmp	r2, r3
 800289e:	d8f7      	bhi.n	8002890 <HAL_Delay+0x28>
  {
  }
}
 80028a0:	bf00      	nop
 80028a2:	bf00      	nop
 80028a4:	3710      	adds	r7, #16
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	20000028 	.word	0x20000028

080028b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028b8:	2300      	movs	r3, #0
 80028ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e033      	b.n	800292e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d109      	bne.n	80028e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7fe ffd2 	bl	8001878 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	f003 0310 	and.w	r3, r3, #16
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d118      	bne.n	8002920 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80028f6:	f023 0302 	bic.w	r3, r3, #2
 80028fa:	f043 0202 	orr.w	r2, r3, #2
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 fa9e 	bl	8002e44 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002912:	f023 0303 	bic.w	r3, r3, #3
 8002916:	f043 0201 	orr.w	r2, r3, #1
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	641a      	str	r2, [r3, #64]	; 0x40
 800291e:	e001      	b.n	8002924 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800292c:	7bfb      	ldrb	r3, [r7, #15]
}
 800292e:	4618      	mov	r0, r3
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b084      	sub	sp, #16
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800293e:	2300      	movs	r3, #0
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	2300      	movs	r3, #0
 8002944:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b02      	cmp	r3, #2
 8002952:	bf0c      	ite	eq
 8002954:	2301      	moveq	r3, #1
 8002956:	2300      	movne	r3, #0
 8002958:	b2db      	uxtb	r3, r3
 800295a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f003 0320 	and.w	r3, r3, #32
 8002966:	2b20      	cmp	r3, #32
 8002968:	bf0c      	ite	eq
 800296a:	2301      	moveq	r3, #1
 800296c:	2300      	movne	r3, #0
 800296e:	b2db      	uxtb	r3, r3
 8002970:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d049      	beq.n	8002a0c <HAL_ADC_IRQHandler+0xd6>
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d046      	beq.n	8002a0c <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	f003 0310 	and.w	r3, r3, #16
 8002986:	2b00      	cmp	r3, #0
 8002988:	d105      	bne.n	8002996 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d12b      	bne.n	80029fc <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d127      	bne.n	80029fc <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d006      	beq.n	80029c8 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d119      	bne.n	80029fc <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f022 0220 	bic.w	r2, r2, #32
 80029d6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d105      	bne.n	80029fc <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f4:	f043 0201 	orr.w	r2, r3, #1
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f7ff fa41 	bl	8001e84 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f06f 0212 	mvn.w	r2, #18
 8002a0a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0304 	and.w	r3, r3, #4
 8002a16:	2b04      	cmp	r3, #4
 8002a18:	bf0c      	ite	eq
 8002a1a:	2301      	moveq	r3, #1
 8002a1c:	2300      	movne	r3, #0
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a2c:	2b80      	cmp	r3, #128	; 0x80
 8002a2e:	bf0c      	ite	eq
 8002a30:	2301      	moveq	r3, #1
 8002a32:	2300      	movne	r3, #0
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d057      	beq.n	8002aee <HAL_ADC_IRQHandler+0x1b8>
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d054      	beq.n	8002aee <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a48:	f003 0310 	and.w	r3, r3, #16
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d105      	bne.n	8002a5c <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a54:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d139      	bne.n	8002ade <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a70:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d006      	beq.n	8002a86 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d12b      	bne.n	8002ade <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d124      	bne.n	8002ade <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d11d      	bne.n	8002ade <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d119      	bne.n	8002ade <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	685a      	ldr	r2, [r3, #4]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ab8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d105      	bne.n	8002ade <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	f043 0201 	orr.w	r2, r3, #1
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 faac 	bl	800303c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f06f 020c 	mvn.w	r2, #12
 8002aec:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0301 	and.w	r3, r3, #1
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	bf0c      	ite	eq
 8002afc:	2301      	moveq	r3, #1
 8002afe:	2300      	movne	r3, #0
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b0e:	2b40      	cmp	r3, #64	; 0x40
 8002b10:	bf0c      	ite	eq
 8002b12:	2301      	moveq	r3, #1
 8002b14:	2300      	movne	r3, #0
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d017      	beq.n	8002b50 <HAL_ADC_IRQHandler+0x21a>
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d014      	beq.n	8002b50 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d10d      	bne.n	8002b50 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b38:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 f839 	bl	8002bb8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f06f 0201 	mvn.w	r2, #1
 8002b4e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0320 	and.w	r3, r3, #32
 8002b5a:	2b20      	cmp	r3, #32
 8002b5c:	bf0c      	ite	eq
 8002b5e:	2301      	moveq	r3, #1
 8002b60:	2300      	movne	r3, #0
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b74:	bf0c      	ite	eq
 8002b76:	2301      	moveq	r3, #1
 8002b78:	2300      	movne	r3, #0
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d015      	beq.n	8002bb0 <HAL_ADC_IRQHandler+0x27a>
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d012      	beq.n	8002bb0 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8e:	f043 0202 	orr.w	r2, r3, #2
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f06f 0220 	mvn.w	r2, #32
 8002b9e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f000 f813 	bl	8002bcc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f06f 0220 	mvn.w	r2, #32
 8002bae:	601a      	str	r2, [r3, #0]
  }
}
 8002bb0:	bf00      	nop
 8002bb2:	3710      	adds	r7, #16
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002bea:	2300      	movs	r3, #0
 8002bec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d101      	bne.n	8002bfc <HAL_ADC_ConfigChannel+0x1c>
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	e113      	b.n	8002e24 <HAL_ADC_ConfigChannel+0x244>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2b09      	cmp	r3, #9
 8002c0a:	d925      	bls.n	8002c58 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68d9      	ldr	r1, [r3, #12]
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	461a      	mov	r2, r3
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	4413      	add	r3, r2
 8002c20:	3b1e      	subs	r3, #30
 8002c22:	2207      	movs	r2, #7
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	43da      	mvns	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	400a      	ands	r2, r1
 8002c30:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68d9      	ldr	r1, [r3, #12]
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	4618      	mov	r0, r3
 8002c44:	4603      	mov	r3, r0
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	4403      	add	r3, r0
 8002c4a:	3b1e      	subs	r3, #30
 8002c4c:	409a      	lsls	r2, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	430a      	orrs	r2, r1
 8002c54:	60da      	str	r2, [r3, #12]
 8002c56:	e022      	b.n	8002c9e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6919      	ldr	r1, [r3, #16]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	461a      	mov	r2, r3
 8002c66:	4613      	mov	r3, r2
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	4413      	add	r3, r2
 8002c6c:	2207      	movs	r2, #7
 8002c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c72:	43da      	mvns	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	400a      	ands	r2, r1
 8002c7a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6919      	ldr	r1, [r3, #16]
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	689a      	ldr	r2, [r3, #8]
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	4603      	mov	r3, r0
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	4403      	add	r3, r0
 8002c94:	409a      	lsls	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	2b06      	cmp	r3, #6
 8002ca4:	d824      	bhi.n	8002cf0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685a      	ldr	r2, [r3, #4]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4413      	add	r3, r2
 8002cb6:	3b05      	subs	r3, #5
 8002cb8:	221f      	movs	r2, #31
 8002cba:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbe:	43da      	mvns	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	400a      	ands	r2, r1
 8002cc6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685a      	ldr	r2, [r3, #4]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	4413      	add	r3, r2
 8002ce0:	3b05      	subs	r3, #5
 8002ce2:	fa00 f203 	lsl.w	r2, r0, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	430a      	orrs	r2, r1
 8002cec:	635a      	str	r2, [r3, #52]	; 0x34
 8002cee:	e04c      	b.n	8002d8a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	2b0c      	cmp	r3, #12
 8002cf6:	d824      	bhi.n	8002d42 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	685a      	ldr	r2, [r3, #4]
 8002d02:	4613      	mov	r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	4413      	add	r3, r2
 8002d08:	3b23      	subs	r3, #35	; 0x23
 8002d0a:	221f      	movs	r2, #31
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	43da      	mvns	r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	400a      	ands	r2, r1
 8002d18:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	4618      	mov	r0, r3
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685a      	ldr	r2, [r3, #4]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	4413      	add	r3, r2
 8002d32:	3b23      	subs	r3, #35	; 0x23
 8002d34:	fa00 f203 	lsl.w	r2, r0, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	631a      	str	r2, [r3, #48]	; 0x30
 8002d40:	e023      	b.n	8002d8a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685a      	ldr	r2, [r3, #4]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	4413      	add	r3, r2
 8002d52:	3b41      	subs	r3, #65	; 0x41
 8002d54:	221f      	movs	r2, #31
 8002d56:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5a:	43da      	mvns	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	400a      	ands	r2, r1
 8002d62:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	4618      	mov	r0, r3
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685a      	ldr	r2, [r3, #4]
 8002d76:	4613      	mov	r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	4413      	add	r3, r2
 8002d7c:	3b41      	subs	r3, #65	; 0x41
 8002d7e:	fa00 f203 	lsl.w	r2, r0, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	430a      	orrs	r2, r1
 8002d88:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d8a:	4b29      	ldr	r3, [pc, #164]	; (8002e30 <HAL_ADC_ConfigChannel+0x250>)
 8002d8c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a28      	ldr	r2, [pc, #160]	; (8002e34 <HAL_ADC_ConfigChannel+0x254>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d10f      	bne.n	8002db8 <HAL_ADC_ConfigChannel+0x1d8>
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2b12      	cmp	r3, #18
 8002d9e:	d10b      	bne.n	8002db8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a1d      	ldr	r2, [pc, #116]	; (8002e34 <HAL_ADC_ConfigChannel+0x254>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d12b      	bne.n	8002e1a <HAL_ADC_ConfigChannel+0x23a>
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a1c      	ldr	r2, [pc, #112]	; (8002e38 <HAL_ADC_ConfigChannel+0x258>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d003      	beq.n	8002dd4 <HAL_ADC_ConfigChannel+0x1f4>
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2b11      	cmp	r3, #17
 8002dd2:	d122      	bne.n	8002e1a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a11      	ldr	r2, [pc, #68]	; (8002e38 <HAL_ADC_ConfigChannel+0x258>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d111      	bne.n	8002e1a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002df6:	4b11      	ldr	r3, [pc, #68]	; (8002e3c <HAL_ADC_ConfigChannel+0x25c>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a11      	ldr	r2, [pc, #68]	; (8002e40 <HAL_ADC_ConfigChannel+0x260>)
 8002dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002e00:	0c9a      	lsrs	r2, r3, #18
 8002e02:	4613      	mov	r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4413      	add	r3, r2
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002e0c:	e002      	b.n	8002e14 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	3b01      	subs	r3, #1
 8002e12:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1f9      	bne.n	8002e0e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3714      	adds	r7, #20
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr
 8002e30:	40012300 	.word	0x40012300
 8002e34:	40012000 	.word	0x40012000
 8002e38:	10000012 	.word	0x10000012
 8002e3c:	20000020 	.word	0x20000020
 8002e40:	431bde83 	.word	0x431bde83

08002e44 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e4c:	4b79      	ldr	r3, [pc, #484]	; (8003034 <ADC_Init+0x1f0>)
 8002e4e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	685a      	ldr	r2, [r3, #4]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	431a      	orrs	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	6859      	ldr	r1, [r3, #4]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	021a      	lsls	r2, r3, #8
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	685a      	ldr	r2, [r3, #4]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002e9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	6859      	ldr	r1, [r3, #4]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689a      	ldr	r2, [r3, #8]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	430a      	orrs	r2, r1
 8002eae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	689a      	ldr	r2, [r3, #8]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ebe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6899      	ldr	r1, [r3, #8]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	68da      	ldr	r2, [r3, #12]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed6:	4a58      	ldr	r2, [pc, #352]	; (8003038 <ADC_Init+0x1f4>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d022      	beq.n	8002f22 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689a      	ldr	r2, [r3, #8]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002eea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6899      	ldr	r1, [r3, #8]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	430a      	orrs	r2, r1
 8002efc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	6899      	ldr	r1, [r3, #8]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	609a      	str	r2, [r3, #8]
 8002f20:	e00f      	b.n	8002f42 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	689a      	ldr	r2, [r3, #8]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f30:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f40:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	689a      	ldr	r2, [r3, #8]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f022 0202 	bic.w	r2, r2, #2
 8002f50:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	6899      	ldr	r1, [r3, #8]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	7e1b      	ldrb	r3, [r3, #24]
 8002f5c:	005a      	lsls	r2, r3, #1
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	430a      	orrs	r2, r1
 8002f64:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d01b      	beq.n	8002fa8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	685a      	ldr	r2, [r3, #4]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f7e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002f8e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6859      	ldr	r1, [r3, #4]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	035a      	lsls	r2, r3, #13
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	605a      	str	r2, [r3, #4]
 8002fa6:	e007      	b.n	8002fb8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	685a      	ldr	r2, [r3, #4]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fb6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002fc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	051a      	lsls	r2, r3, #20
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689a      	ldr	r2, [r3, #8]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002fec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	6899      	ldr	r1, [r3, #8]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ffa:	025a      	lsls	r2, r3, #9
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	430a      	orrs	r2, r1
 8003002:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	689a      	ldr	r2, [r3, #8]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003012:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6899      	ldr	r1, [r3, #8]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	029a      	lsls	r2, r3, #10
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	430a      	orrs	r2, r1
 8003026:	609a      	str	r2, [r3, #8]
}
 8003028:	bf00      	nop
 800302a:	3714      	adds	r7, #20
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	40012300 	.word	0x40012300
 8003038:	0f000001 	.word	0x0f000001

0800303c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f003 0307 	and.w	r3, r3, #7
 800305e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003060:	4b0c      	ldr	r3, [pc, #48]	; (8003094 <__NVIC_SetPriorityGrouping+0x44>)
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003066:	68ba      	ldr	r2, [r7, #8]
 8003068:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800306c:	4013      	ands	r3, r2
 800306e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003078:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800307c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003080:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003082:	4a04      	ldr	r2, [pc, #16]	; (8003094 <__NVIC_SetPriorityGrouping+0x44>)
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	60d3      	str	r3, [r2, #12]
}
 8003088:	bf00      	nop
 800308a:	3714      	adds	r7, #20
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	e000ed00 	.word	0xe000ed00

08003098 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800309c:	4b04      	ldr	r3, [pc, #16]	; (80030b0 <__NVIC_GetPriorityGrouping+0x18>)
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	0a1b      	lsrs	r3, r3, #8
 80030a2:	f003 0307 	and.w	r3, r3, #7
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr
 80030b0:	e000ed00 	.word	0xe000ed00

080030b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	4603      	mov	r3, r0
 80030bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	db0b      	blt.n	80030de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030c6:	79fb      	ldrb	r3, [r7, #7]
 80030c8:	f003 021f 	and.w	r2, r3, #31
 80030cc:	4907      	ldr	r1, [pc, #28]	; (80030ec <__NVIC_EnableIRQ+0x38>)
 80030ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d2:	095b      	lsrs	r3, r3, #5
 80030d4:	2001      	movs	r0, #1
 80030d6:	fa00 f202 	lsl.w	r2, r0, r2
 80030da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030de:	bf00      	nop
 80030e0:	370c      	adds	r7, #12
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	e000e100 	.word	0xe000e100

080030f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	4603      	mov	r3, r0
 80030f8:	6039      	str	r1, [r7, #0]
 80030fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003100:	2b00      	cmp	r3, #0
 8003102:	db0a      	blt.n	800311a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	b2da      	uxtb	r2, r3
 8003108:	490c      	ldr	r1, [pc, #48]	; (800313c <__NVIC_SetPriority+0x4c>)
 800310a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800310e:	0112      	lsls	r2, r2, #4
 8003110:	b2d2      	uxtb	r2, r2
 8003112:	440b      	add	r3, r1
 8003114:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003118:	e00a      	b.n	8003130 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	b2da      	uxtb	r2, r3
 800311e:	4908      	ldr	r1, [pc, #32]	; (8003140 <__NVIC_SetPriority+0x50>)
 8003120:	79fb      	ldrb	r3, [r7, #7]
 8003122:	f003 030f 	and.w	r3, r3, #15
 8003126:	3b04      	subs	r3, #4
 8003128:	0112      	lsls	r2, r2, #4
 800312a:	b2d2      	uxtb	r2, r2
 800312c:	440b      	add	r3, r1
 800312e:	761a      	strb	r2, [r3, #24]
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr
 800313c:	e000e100 	.word	0xe000e100
 8003140:	e000ed00 	.word	0xe000ed00

08003144 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003144:	b480      	push	{r7}
 8003146:	b089      	sub	sp, #36	; 0x24
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f003 0307 	and.w	r3, r3, #7
 8003156:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	f1c3 0307 	rsb	r3, r3, #7
 800315e:	2b04      	cmp	r3, #4
 8003160:	bf28      	it	cs
 8003162:	2304      	movcs	r3, #4
 8003164:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	3304      	adds	r3, #4
 800316a:	2b06      	cmp	r3, #6
 800316c:	d902      	bls.n	8003174 <NVIC_EncodePriority+0x30>
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	3b03      	subs	r3, #3
 8003172:	e000      	b.n	8003176 <NVIC_EncodePriority+0x32>
 8003174:	2300      	movs	r3, #0
 8003176:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003178:	f04f 32ff 	mov.w	r2, #4294967295
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	fa02 f303 	lsl.w	r3, r2, r3
 8003182:	43da      	mvns	r2, r3
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	401a      	ands	r2, r3
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800318c:	f04f 31ff 	mov.w	r1, #4294967295
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	fa01 f303 	lsl.w	r3, r1, r3
 8003196:	43d9      	mvns	r1, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800319c:	4313      	orrs	r3, r2
         );
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3724      	adds	r7, #36	; 0x24
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
	...

080031ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	3b01      	subs	r3, #1
 80031b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031bc:	d301      	bcc.n	80031c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031be:	2301      	movs	r3, #1
 80031c0:	e00f      	b.n	80031e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031c2:	4a0a      	ldr	r2, [pc, #40]	; (80031ec <SysTick_Config+0x40>)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	3b01      	subs	r3, #1
 80031c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031ca:	210f      	movs	r1, #15
 80031cc:	f04f 30ff 	mov.w	r0, #4294967295
 80031d0:	f7ff ff8e 	bl	80030f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031d4:	4b05      	ldr	r3, [pc, #20]	; (80031ec <SysTick_Config+0x40>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031da:	4b04      	ldr	r3, [pc, #16]	; (80031ec <SysTick_Config+0x40>)
 80031dc:	2207      	movs	r2, #7
 80031de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	e000e010 	.word	0xe000e010

080031f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f7ff ff29 	bl	8003050 <__NVIC_SetPriorityGrouping>
}
 80031fe:	bf00      	nop
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003206:	b580      	push	{r7, lr}
 8003208:	b086      	sub	sp, #24
 800320a:	af00      	add	r7, sp, #0
 800320c:	4603      	mov	r3, r0
 800320e:	60b9      	str	r1, [r7, #8]
 8003210:	607a      	str	r2, [r7, #4]
 8003212:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003214:	2300      	movs	r3, #0
 8003216:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003218:	f7ff ff3e 	bl	8003098 <__NVIC_GetPriorityGrouping>
 800321c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	68b9      	ldr	r1, [r7, #8]
 8003222:	6978      	ldr	r0, [r7, #20]
 8003224:	f7ff ff8e 	bl	8003144 <NVIC_EncodePriority>
 8003228:	4602      	mov	r2, r0
 800322a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800322e:	4611      	mov	r1, r2
 8003230:	4618      	mov	r0, r3
 8003232:	f7ff ff5d 	bl	80030f0 <__NVIC_SetPriority>
}
 8003236:	bf00      	nop
 8003238:	3718      	adds	r7, #24
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b082      	sub	sp, #8
 8003242:	af00      	add	r7, sp, #0
 8003244:	4603      	mov	r3, r0
 8003246:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800324c:	4618      	mov	r0, r3
 800324e:	f7ff ff31 	bl	80030b4 <__NVIC_EnableIRQ>
}
 8003252:	bf00      	nop
 8003254:	3708      	adds	r7, #8
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b082      	sub	sp, #8
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f7ff ffa2 	bl	80031ac <SysTick_Config>
 8003268:	4603      	mov	r3, r0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b084      	sub	sp, #16
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800327e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003280:	f7ff fae6 	bl	8002850 <HAL_GetTick>
 8003284:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b02      	cmp	r3, #2
 8003290:	d008      	beq.n	80032a4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2280      	movs	r2, #128	; 0x80
 8003296:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e052      	b.n	800334a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f022 0216 	bic.w	r2, r2, #22
 80032b2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	695a      	ldr	r2, [r3, #20]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032c2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d103      	bne.n	80032d4 <HAL_DMA_Abort+0x62>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d007      	beq.n	80032e4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f022 0208 	bic.w	r2, r2, #8
 80032e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f022 0201 	bic.w	r2, r2, #1
 80032f2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032f4:	e013      	b.n	800331e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032f6:	f7ff faab 	bl	8002850 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b05      	cmp	r3, #5
 8003302:	d90c      	bls.n	800331e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2220      	movs	r2, #32
 8003308:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2203      	movs	r2, #3
 800330e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e015      	b.n	800334a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1e4      	bne.n	80032f6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003330:	223f      	movs	r2, #63	; 0x3f
 8003332:	409a      	lsls	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003352:	b480      	push	{r7}
 8003354:	b083      	sub	sp, #12
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b02      	cmp	r3, #2
 8003364:	d004      	beq.n	8003370 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2280      	movs	r2, #128	; 0x80
 800336a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e00c      	b.n	800338a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2205      	movs	r2, #5
 8003374:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f022 0201 	bic.w	r2, r2, #1
 8003386:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
	...

08003398 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003398:	b480      	push	{r7}
 800339a:	b089      	sub	sp, #36	; 0x24
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033a2:	2300      	movs	r3, #0
 80033a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033a6:	2300      	movs	r3, #0
 80033a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033aa:	2300      	movs	r3, #0
 80033ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033ae:	2300      	movs	r3, #0
 80033b0:	61fb      	str	r3, [r7, #28]
 80033b2:	e165      	b.n	8003680 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033b4:	2201      	movs	r2, #1
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	4013      	ands	r3, r2
 80033c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	f040 8154 	bne.w	800367a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f003 0303 	and.w	r3, r3, #3
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d005      	beq.n	80033ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d130      	bne.n	800344c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	2203      	movs	r2, #3
 80033f6:	fa02 f303 	lsl.w	r3, r2, r3
 80033fa:	43db      	mvns	r3, r3
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	4013      	ands	r3, r2
 8003400:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	68da      	ldr	r2, [r3, #12]
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	fa02 f303 	lsl.w	r3, r2, r3
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	4313      	orrs	r3, r2
 8003412:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	69ba      	ldr	r2, [r7, #24]
 8003418:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003420:	2201      	movs	r2, #1
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	43db      	mvns	r3, r3
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	4013      	ands	r3, r2
 800342e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	091b      	lsrs	r3, r3, #4
 8003436:	f003 0201 	and.w	r2, r3, #1
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	fa02 f303 	lsl.w	r3, r2, r3
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	4313      	orrs	r3, r2
 8003444:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f003 0303 	and.w	r3, r3, #3
 8003454:	2b03      	cmp	r3, #3
 8003456:	d017      	beq.n	8003488 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	2203      	movs	r2, #3
 8003464:	fa02 f303 	lsl.w	r3, r2, r3
 8003468:	43db      	mvns	r3, r3
 800346a:	69ba      	ldr	r2, [r7, #24]
 800346c:	4013      	ands	r3, r2
 800346e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	689a      	ldr	r2, [r3, #8]
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	fa02 f303 	lsl.w	r3, r2, r3
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	4313      	orrs	r3, r2
 8003480:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f003 0303 	and.w	r3, r3, #3
 8003490:	2b02      	cmp	r3, #2
 8003492:	d123      	bne.n	80034dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	08da      	lsrs	r2, r3, #3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	3208      	adds	r2, #8
 800349c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	f003 0307 	and.w	r3, r3, #7
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	220f      	movs	r2, #15
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	43db      	mvns	r3, r3
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	4013      	ands	r3, r2
 80034b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	691a      	ldr	r2, [r3, #16]
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	f003 0307 	and.w	r3, r3, #7
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	fa02 f303 	lsl.w	r3, r2, r3
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	08da      	lsrs	r2, r3, #3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	3208      	adds	r2, #8
 80034d6:	69b9      	ldr	r1, [r7, #24]
 80034d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	2203      	movs	r2, #3
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	43db      	mvns	r3, r3
 80034ee:	69ba      	ldr	r2, [r7, #24]
 80034f0:	4013      	ands	r3, r2
 80034f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f003 0203 	and.w	r2, r3, #3
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	fa02 f303 	lsl.w	r3, r2, r3
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	4313      	orrs	r3, r2
 8003508:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003518:	2b00      	cmp	r3, #0
 800351a:	f000 80ae 	beq.w	800367a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800351e:	2300      	movs	r3, #0
 8003520:	60fb      	str	r3, [r7, #12]
 8003522:	4b5d      	ldr	r3, [pc, #372]	; (8003698 <HAL_GPIO_Init+0x300>)
 8003524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003526:	4a5c      	ldr	r2, [pc, #368]	; (8003698 <HAL_GPIO_Init+0x300>)
 8003528:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800352c:	6453      	str	r3, [r2, #68]	; 0x44
 800352e:	4b5a      	ldr	r3, [pc, #360]	; (8003698 <HAL_GPIO_Init+0x300>)
 8003530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003532:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003536:	60fb      	str	r3, [r7, #12]
 8003538:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800353a:	4a58      	ldr	r2, [pc, #352]	; (800369c <HAL_GPIO_Init+0x304>)
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	089b      	lsrs	r3, r3, #2
 8003540:	3302      	adds	r3, #2
 8003542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003546:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	f003 0303 	and.w	r3, r3, #3
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	220f      	movs	r2, #15
 8003552:	fa02 f303 	lsl.w	r3, r2, r3
 8003556:	43db      	mvns	r3, r3
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	4013      	ands	r3, r2
 800355c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a4f      	ldr	r2, [pc, #316]	; (80036a0 <HAL_GPIO_Init+0x308>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d025      	beq.n	80035b2 <HAL_GPIO_Init+0x21a>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a4e      	ldr	r2, [pc, #312]	; (80036a4 <HAL_GPIO_Init+0x30c>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d01f      	beq.n	80035ae <HAL_GPIO_Init+0x216>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a4d      	ldr	r2, [pc, #308]	; (80036a8 <HAL_GPIO_Init+0x310>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d019      	beq.n	80035aa <HAL_GPIO_Init+0x212>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a4c      	ldr	r2, [pc, #304]	; (80036ac <HAL_GPIO_Init+0x314>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d013      	beq.n	80035a6 <HAL_GPIO_Init+0x20e>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a4b      	ldr	r2, [pc, #300]	; (80036b0 <HAL_GPIO_Init+0x318>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d00d      	beq.n	80035a2 <HAL_GPIO_Init+0x20a>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a4a      	ldr	r2, [pc, #296]	; (80036b4 <HAL_GPIO_Init+0x31c>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d007      	beq.n	800359e <HAL_GPIO_Init+0x206>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a49      	ldr	r2, [pc, #292]	; (80036b8 <HAL_GPIO_Init+0x320>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d101      	bne.n	800359a <HAL_GPIO_Init+0x202>
 8003596:	2306      	movs	r3, #6
 8003598:	e00c      	b.n	80035b4 <HAL_GPIO_Init+0x21c>
 800359a:	2307      	movs	r3, #7
 800359c:	e00a      	b.n	80035b4 <HAL_GPIO_Init+0x21c>
 800359e:	2305      	movs	r3, #5
 80035a0:	e008      	b.n	80035b4 <HAL_GPIO_Init+0x21c>
 80035a2:	2304      	movs	r3, #4
 80035a4:	e006      	b.n	80035b4 <HAL_GPIO_Init+0x21c>
 80035a6:	2303      	movs	r3, #3
 80035a8:	e004      	b.n	80035b4 <HAL_GPIO_Init+0x21c>
 80035aa:	2302      	movs	r3, #2
 80035ac:	e002      	b.n	80035b4 <HAL_GPIO_Init+0x21c>
 80035ae:	2301      	movs	r3, #1
 80035b0:	e000      	b.n	80035b4 <HAL_GPIO_Init+0x21c>
 80035b2:	2300      	movs	r3, #0
 80035b4:	69fa      	ldr	r2, [r7, #28]
 80035b6:	f002 0203 	and.w	r2, r2, #3
 80035ba:	0092      	lsls	r2, r2, #2
 80035bc:	4093      	lsls	r3, r2
 80035be:	69ba      	ldr	r2, [r7, #24]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035c4:	4935      	ldr	r1, [pc, #212]	; (800369c <HAL_GPIO_Init+0x304>)
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	089b      	lsrs	r3, r3, #2
 80035ca:	3302      	adds	r3, #2
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035d2:	4b3a      	ldr	r3, [pc, #232]	; (80036bc <HAL_GPIO_Init+0x324>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	43db      	mvns	r3, r3
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	4013      	ands	r3, r2
 80035e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d003      	beq.n	80035f6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035f6:	4a31      	ldr	r2, [pc, #196]	; (80036bc <HAL_GPIO_Init+0x324>)
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80035fc:	4b2f      	ldr	r3, [pc, #188]	; (80036bc <HAL_GPIO_Init+0x324>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	43db      	mvns	r3, r3
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	4013      	ands	r3, r2
 800360a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d003      	beq.n	8003620 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	4313      	orrs	r3, r2
 800361e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003620:	4a26      	ldr	r2, [pc, #152]	; (80036bc <HAL_GPIO_Init+0x324>)
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003626:	4b25      	ldr	r3, [pc, #148]	; (80036bc <HAL_GPIO_Init+0x324>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	43db      	mvns	r3, r3
 8003630:	69ba      	ldr	r2, [r7, #24]
 8003632:	4013      	ands	r3, r2
 8003634:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d003      	beq.n	800364a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	4313      	orrs	r3, r2
 8003648:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800364a:	4a1c      	ldr	r2, [pc, #112]	; (80036bc <HAL_GPIO_Init+0x324>)
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003650:	4b1a      	ldr	r3, [pc, #104]	; (80036bc <HAL_GPIO_Init+0x324>)
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	43db      	mvns	r3, r3
 800365a:	69ba      	ldr	r2, [r7, #24]
 800365c:	4013      	ands	r3, r2
 800365e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d003      	beq.n	8003674 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	4313      	orrs	r3, r2
 8003672:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003674:	4a11      	ldr	r2, [pc, #68]	; (80036bc <HAL_GPIO_Init+0x324>)
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	3301      	adds	r3, #1
 800367e:	61fb      	str	r3, [r7, #28]
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	2b0f      	cmp	r3, #15
 8003684:	f67f ae96 	bls.w	80033b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003688:	bf00      	nop
 800368a:	bf00      	nop
 800368c:	3724      	adds	r7, #36	; 0x24
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	40023800 	.word	0x40023800
 800369c:	40013800 	.word	0x40013800
 80036a0:	40020000 	.word	0x40020000
 80036a4:	40020400 	.word	0x40020400
 80036a8:	40020800 	.word	0x40020800
 80036ac:	40020c00 	.word	0x40020c00
 80036b0:	40021000 	.word	0x40021000
 80036b4:	40021400 	.word	0x40021400
 80036b8:	40021800 	.word	0x40021800
 80036bc:	40013c00 	.word	0x40013c00

080036c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	460b      	mov	r3, r1
 80036ca:	807b      	strh	r3, [r7, #2]
 80036cc:	4613      	mov	r3, r2
 80036ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036d0:	787b      	ldrb	r3, [r7, #1]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d003      	beq.n	80036de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036d6:	887a      	ldrh	r2, [r7, #2]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036dc:	e003      	b.n	80036e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036de:	887b      	ldrh	r3, [r7, #2]
 80036e0:	041a      	lsls	r2, r3, #16
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	619a      	str	r2, [r3, #24]
}
 80036e6:	bf00      	nop
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
	...

080036f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	4603      	mov	r3, r0
 80036fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80036fe:	4b08      	ldr	r3, [pc, #32]	; (8003720 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003700:	695a      	ldr	r2, [r3, #20]
 8003702:	88fb      	ldrh	r3, [r7, #6]
 8003704:	4013      	ands	r3, r2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d006      	beq.n	8003718 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800370a:	4a05      	ldr	r2, [pc, #20]	; (8003720 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800370c:	88fb      	ldrh	r3, [r7, #6]
 800370e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003710:	88fb      	ldrh	r3, [r7, #6]
 8003712:	4618      	mov	r0, r3
 8003714:	f7fe fb24 	bl	8001d60 <HAL_GPIO_EXTI_Callback>
  }
}
 8003718:	bf00      	nop
 800371a:	3708      	adds	r7, #8
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	40013c00 	.word	0x40013c00

08003724 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e0cc      	b.n	80038d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003738:	4b68      	ldr	r3, [pc, #416]	; (80038dc <HAL_RCC_ClockConfig+0x1b8>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 030f 	and.w	r3, r3, #15
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	429a      	cmp	r2, r3
 8003744:	d90c      	bls.n	8003760 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003746:	4b65      	ldr	r3, [pc, #404]	; (80038dc <HAL_RCC_ClockConfig+0x1b8>)
 8003748:	683a      	ldr	r2, [r7, #0]
 800374a:	b2d2      	uxtb	r2, r2
 800374c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800374e:	4b63      	ldr	r3, [pc, #396]	; (80038dc <HAL_RCC_ClockConfig+0x1b8>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 030f 	and.w	r3, r3, #15
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	429a      	cmp	r2, r3
 800375a:	d001      	beq.n	8003760 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e0b8      	b.n	80038d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0302 	and.w	r3, r3, #2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d020      	beq.n	80037ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0304 	and.w	r3, r3, #4
 8003774:	2b00      	cmp	r3, #0
 8003776:	d005      	beq.n	8003784 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003778:	4b59      	ldr	r3, [pc, #356]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	4a58      	ldr	r2, [pc, #352]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 800377e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003782:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0308 	and.w	r3, r3, #8
 800378c:	2b00      	cmp	r3, #0
 800378e:	d005      	beq.n	800379c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003790:	4b53      	ldr	r3, [pc, #332]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	4a52      	ldr	r2, [pc, #328]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003796:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800379a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800379c:	4b50      	ldr	r3, [pc, #320]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	494d      	ldr	r1, [pc, #308]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d044      	beq.n	8003844 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d107      	bne.n	80037d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037c2:	4b47      	ldr	r3, [pc, #284]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d119      	bne.n	8003802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e07f      	b.n	80038d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d003      	beq.n	80037e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037de:	2b03      	cmp	r3, #3
 80037e0:	d107      	bne.n	80037f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037e2:	4b3f      	ldr	r3, [pc, #252]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d109      	bne.n	8003802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e06f      	b.n	80038d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037f2:	4b3b      	ldr	r3, [pc, #236]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d101      	bne.n	8003802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e067      	b.n	80038d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003802:	4b37      	ldr	r3, [pc, #220]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f023 0203 	bic.w	r2, r3, #3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	4934      	ldr	r1, [pc, #208]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003810:	4313      	orrs	r3, r2
 8003812:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003814:	f7ff f81c 	bl	8002850 <HAL_GetTick>
 8003818:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800381a:	e00a      	b.n	8003832 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800381c:	f7ff f818 	bl	8002850 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	f241 3288 	movw	r2, #5000	; 0x1388
 800382a:	4293      	cmp	r3, r2
 800382c:	d901      	bls.n	8003832 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e04f      	b.n	80038d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003832:	4b2b      	ldr	r3, [pc, #172]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f003 020c 	and.w	r2, r3, #12
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	429a      	cmp	r2, r3
 8003842:	d1eb      	bne.n	800381c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003844:	4b25      	ldr	r3, [pc, #148]	; (80038dc <HAL_RCC_ClockConfig+0x1b8>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 030f 	and.w	r3, r3, #15
 800384c:	683a      	ldr	r2, [r7, #0]
 800384e:	429a      	cmp	r2, r3
 8003850:	d20c      	bcs.n	800386c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003852:	4b22      	ldr	r3, [pc, #136]	; (80038dc <HAL_RCC_ClockConfig+0x1b8>)
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	b2d2      	uxtb	r2, r2
 8003858:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800385a:	4b20      	ldr	r3, [pc, #128]	; (80038dc <HAL_RCC_ClockConfig+0x1b8>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 030f 	and.w	r3, r3, #15
 8003862:	683a      	ldr	r2, [r7, #0]
 8003864:	429a      	cmp	r2, r3
 8003866:	d001      	beq.n	800386c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e032      	b.n	80038d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0304 	and.w	r3, r3, #4
 8003874:	2b00      	cmp	r3, #0
 8003876:	d008      	beq.n	800388a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003878:	4b19      	ldr	r3, [pc, #100]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	4916      	ldr	r1, [pc, #88]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003886:	4313      	orrs	r3, r2
 8003888:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0308 	and.w	r3, r3, #8
 8003892:	2b00      	cmp	r3, #0
 8003894:	d009      	beq.n	80038aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003896:	4b12      	ldr	r3, [pc, #72]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	490e      	ldr	r1, [pc, #56]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038aa:	f000 f855 	bl	8003958 <HAL_RCC_GetSysClockFreq>
 80038ae:	4602      	mov	r2, r0
 80038b0:	4b0b      	ldr	r3, [pc, #44]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	091b      	lsrs	r3, r3, #4
 80038b6:	f003 030f 	and.w	r3, r3, #15
 80038ba:	490a      	ldr	r1, [pc, #40]	; (80038e4 <HAL_RCC_ClockConfig+0x1c0>)
 80038bc:	5ccb      	ldrb	r3, [r1, r3]
 80038be:	fa22 f303 	lsr.w	r3, r2, r3
 80038c2:	4a09      	ldr	r2, [pc, #36]	; (80038e8 <HAL_RCC_ClockConfig+0x1c4>)
 80038c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80038c6:	4b09      	ldr	r3, [pc, #36]	; (80038ec <HAL_RCC_ClockConfig+0x1c8>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7fe ff7c 	bl	80027c8 <HAL_InitTick>

  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3710      	adds	r7, #16
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	40023c00 	.word	0x40023c00
 80038e0:	40023800 	.word	0x40023800
 80038e4:	08009128 	.word	0x08009128
 80038e8:	20000020 	.word	0x20000020
 80038ec:	20000024 	.word	0x20000024

080038f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038f0:	b480      	push	{r7}
 80038f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038f4:	4b03      	ldr	r3, [pc, #12]	; (8003904 <HAL_RCC_GetHCLKFreq+0x14>)
 80038f6:	681b      	ldr	r3, [r3, #0]
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	20000020 	.word	0x20000020

08003908 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800390c:	f7ff fff0 	bl	80038f0 <HAL_RCC_GetHCLKFreq>
 8003910:	4602      	mov	r2, r0
 8003912:	4b05      	ldr	r3, [pc, #20]	; (8003928 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	0a9b      	lsrs	r3, r3, #10
 8003918:	f003 0307 	and.w	r3, r3, #7
 800391c:	4903      	ldr	r1, [pc, #12]	; (800392c <HAL_RCC_GetPCLK1Freq+0x24>)
 800391e:	5ccb      	ldrb	r3, [r1, r3]
 8003920:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003924:	4618      	mov	r0, r3
 8003926:	bd80      	pop	{r7, pc}
 8003928:	40023800 	.word	0x40023800
 800392c:	08009138 	.word	0x08009138

08003930 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003934:	f7ff ffdc 	bl	80038f0 <HAL_RCC_GetHCLKFreq>
 8003938:	4602      	mov	r2, r0
 800393a:	4b05      	ldr	r3, [pc, #20]	; (8003950 <HAL_RCC_GetPCLK2Freq+0x20>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	0b5b      	lsrs	r3, r3, #13
 8003940:	f003 0307 	and.w	r3, r3, #7
 8003944:	4903      	ldr	r1, [pc, #12]	; (8003954 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003946:	5ccb      	ldrb	r3, [r1, r3]
 8003948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800394c:	4618      	mov	r0, r3
 800394e:	bd80      	pop	{r7, pc}
 8003950:	40023800 	.word	0x40023800
 8003954:	08009138 	.word	0x08009138

08003958 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003958:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800395c:	b088      	sub	sp, #32
 800395e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003960:	2300      	movs	r3, #0
 8003962:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8003964:	2300      	movs	r3, #0
 8003966:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8003968:	2300      	movs	r3, #0
 800396a:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 800396c:	2300      	movs	r3, #0
 800396e:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8003970:	2300      	movs	r3, #0
 8003972:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003974:	4bce      	ldr	r3, [pc, #824]	; (8003cb0 <HAL_RCC_GetSysClockFreq+0x358>)
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f003 030c 	and.w	r3, r3, #12
 800397c:	2b0c      	cmp	r3, #12
 800397e:	f200 818d 	bhi.w	8003c9c <HAL_RCC_GetSysClockFreq+0x344>
 8003982:	a201      	add	r2, pc, #4	; (adr r2, 8003988 <HAL_RCC_GetSysClockFreq+0x30>)
 8003984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003988:	080039bd 	.word	0x080039bd
 800398c:	08003c9d 	.word	0x08003c9d
 8003990:	08003c9d 	.word	0x08003c9d
 8003994:	08003c9d 	.word	0x08003c9d
 8003998:	080039c3 	.word	0x080039c3
 800399c:	08003c9d 	.word	0x08003c9d
 80039a0:	08003c9d 	.word	0x08003c9d
 80039a4:	08003c9d 	.word	0x08003c9d
 80039a8:	080039c9 	.word	0x080039c9
 80039ac:	08003c9d 	.word	0x08003c9d
 80039b0:	08003c9d 	.word	0x08003c9d
 80039b4:	08003c9d 	.word	0x08003c9d
 80039b8:	08003b3d 	.word	0x08003b3d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039bc:	4bbd      	ldr	r3, [pc, #756]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80039be:	61bb      	str	r3, [r7, #24]
       break;
 80039c0:	e16f      	b.n	8003ca2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039c2:	4bbd      	ldr	r3, [pc, #756]	; (8003cb8 <HAL_RCC_GetSysClockFreq+0x360>)
 80039c4:	61bb      	str	r3, [r7, #24]
      break;
 80039c6:	e16c      	b.n	8003ca2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039c8:	4bb9      	ldr	r3, [pc, #740]	; (8003cb0 <HAL_RCC_GetSysClockFreq+0x358>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039d0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039d2:	4bb7      	ldr	r3, [pc, #732]	; (8003cb0 <HAL_RCC_GetSysClockFreq+0x358>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d053      	beq.n	8003a86 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039de:	4bb4      	ldr	r3, [pc, #720]	; (8003cb0 <HAL_RCC_GetSysClockFreq+0x358>)
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	099b      	lsrs	r3, r3, #6
 80039e4:	461a      	mov	r2, r3
 80039e6:	f04f 0300 	mov.w	r3, #0
 80039ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80039ee:	f04f 0100 	mov.w	r1, #0
 80039f2:	ea02 0400 	and.w	r4, r2, r0
 80039f6:	603c      	str	r4, [r7, #0]
 80039f8:	400b      	ands	r3, r1
 80039fa:	607b      	str	r3, [r7, #4]
 80039fc:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a00:	4620      	mov	r0, r4
 8003a02:	4629      	mov	r1, r5
 8003a04:	f04f 0200 	mov.w	r2, #0
 8003a08:	f04f 0300 	mov.w	r3, #0
 8003a0c:	014b      	lsls	r3, r1, #5
 8003a0e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003a12:	0142      	lsls	r2, r0, #5
 8003a14:	4610      	mov	r0, r2
 8003a16:	4619      	mov	r1, r3
 8003a18:	4623      	mov	r3, r4
 8003a1a:	1ac0      	subs	r0, r0, r3
 8003a1c:	462b      	mov	r3, r5
 8003a1e:	eb61 0103 	sbc.w	r1, r1, r3
 8003a22:	f04f 0200 	mov.w	r2, #0
 8003a26:	f04f 0300 	mov.w	r3, #0
 8003a2a:	018b      	lsls	r3, r1, #6
 8003a2c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003a30:	0182      	lsls	r2, r0, #6
 8003a32:	1a12      	subs	r2, r2, r0
 8003a34:	eb63 0301 	sbc.w	r3, r3, r1
 8003a38:	f04f 0000 	mov.w	r0, #0
 8003a3c:	f04f 0100 	mov.w	r1, #0
 8003a40:	00d9      	lsls	r1, r3, #3
 8003a42:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a46:	00d0      	lsls	r0, r2, #3
 8003a48:	4602      	mov	r2, r0
 8003a4a:	460b      	mov	r3, r1
 8003a4c:	4621      	mov	r1, r4
 8003a4e:	1852      	adds	r2, r2, r1
 8003a50:	4629      	mov	r1, r5
 8003a52:	eb43 0101 	adc.w	r1, r3, r1
 8003a56:	460b      	mov	r3, r1
 8003a58:	f04f 0000 	mov.w	r0, #0
 8003a5c:	f04f 0100 	mov.w	r1, #0
 8003a60:	0259      	lsls	r1, r3, #9
 8003a62:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003a66:	0250      	lsls	r0, r2, #9
 8003a68:	4602      	mov	r2, r0
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	4610      	mov	r0, r2
 8003a6e:	4619      	mov	r1, r3
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	461a      	mov	r2, r3
 8003a74:	f04f 0300 	mov.w	r3, #0
 8003a78:	f7fd f916 	bl	8000ca8 <__aeabi_uldivmod>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	460b      	mov	r3, r1
 8003a80:	4613      	mov	r3, r2
 8003a82:	61fb      	str	r3, [r7, #28]
 8003a84:	e04c      	b.n	8003b20 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a86:	4b8a      	ldr	r3, [pc, #552]	; (8003cb0 <HAL_RCC_GetSysClockFreq+0x358>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	099b      	lsrs	r3, r3, #6
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	f04f 0300 	mov.w	r3, #0
 8003a92:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003a96:	f04f 0100 	mov.w	r1, #0
 8003a9a:	ea02 0a00 	and.w	sl, r2, r0
 8003a9e:	ea03 0b01 	and.w	fp, r3, r1
 8003aa2:	4650      	mov	r0, sl
 8003aa4:	4659      	mov	r1, fp
 8003aa6:	f04f 0200 	mov.w	r2, #0
 8003aaa:	f04f 0300 	mov.w	r3, #0
 8003aae:	014b      	lsls	r3, r1, #5
 8003ab0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003ab4:	0142      	lsls	r2, r0, #5
 8003ab6:	4610      	mov	r0, r2
 8003ab8:	4619      	mov	r1, r3
 8003aba:	ebb0 000a 	subs.w	r0, r0, sl
 8003abe:	eb61 010b 	sbc.w	r1, r1, fp
 8003ac2:	f04f 0200 	mov.w	r2, #0
 8003ac6:	f04f 0300 	mov.w	r3, #0
 8003aca:	018b      	lsls	r3, r1, #6
 8003acc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003ad0:	0182      	lsls	r2, r0, #6
 8003ad2:	1a12      	subs	r2, r2, r0
 8003ad4:	eb63 0301 	sbc.w	r3, r3, r1
 8003ad8:	f04f 0000 	mov.w	r0, #0
 8003adc:	f04f 0100 	mov.w	r1, #0
 8003ae0:	00d9      	lsls	r1, r3, #3
 8003ae2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ae6:	00d0      	lsls	r0, r2, #3
 8003ae8:	4602      	mov	r2, r0
 8003aea:	460b      	mov	r3, r1
 8003aec:	eb12 020a 	adds.w	r2, r2, sl
 8003af0:	eb43 030b 	adc.w	r3, r3, fp
 8003af4:	f04f 0000 	mov.w	r0, #0
 8003af8:	f04f 0100 	mov.w	r1, #0
 8003afc:	0299      	lsls	r1, r3, #10
 8003afe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003b02:	0290      	lsls	r0, r2, #10
 8003b04:	4602      	mov	r2, r0
 8003b06:	460b      	mov	r3, r1
 8003b08:	4610      	mov	r0, r2
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	461a      	mov	r2, r3
 8003b10:	f04f 0300 	mov.w	r3, #0
 8003b14:	f7fd f8c8 	bl	8000ca8 <__aeabi_uldivmod>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b20:	4b63      	ldr	r3, [pc, #396]	; (8003cb0 <HAL_RCC_GetSysClockFreq+0x358>)
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	0c1b      	lsrs	r3, r3, #16
 8003b26:	f003 0303 	and.w	r3, r3, #3
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	005b      	lsls	r3, r3, #1
 8003b2e:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8003b30:	69fa      	ldr	r2, [r7, #28]
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b38:	61bb      	str	r3, [r7, #24]
      break;
 8003b3a:	e0b2      	b.n	8003ca2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b3c:	4b5c      	ldr	r3, [pc, #368]	; (8003cb0 <HAL_RCC_GetSysClockFreq+0x358>)
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b44:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b46:	4b5a      	ldr	r3, [pc, #360]	; (8003cb0 <HAL_RCC_GetSysClockFreq+0x358>)
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d04d      	beq.n	8003bee <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b52:	4b57      	ldr	r3, [pc, #348]	; (8003cb0 <HAL_RCC_GetSysClockFreq+0x358>)
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	099b      	lsrs	r3, r3, #6
 8003b58:	461a      	mov	r2, r3
 8003b5a:	f04f 0300 	mov.w	r3, #0
 8003b5e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003b62:	f04f 0100 	mov.w	r1, #0
 8003b66:	ea02 0800 	and.w	r8, r2, r0
 8003b6a:	ea03 0901 	and.w	r9, r3, r1
 8003b6e:	4640      	mov	r0, r8
 8003b70:	4649      	mov	r1, r9
 8003b72:	f04f 0200 	mov.w	r2, #0
 8003b76:	f04f 0300 	mov.w	r3, #0
 8003b7a:	014b      	lsls	r3, r1, #5
 8003b7c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003b80:	0142      	lsls	r2, r0, #5
 8003b82:	4610      	mov	r0, r2
 8003b84:	4619      	mov	r1, r3
 8003b86:	ebb0 0008 	subs.w	r0, r0, r8
 8003b8a:	eb61 0109 	sbc.w	r1, r1, r9
 8003b8e:	f04f 0200 	mov.w	r2, #0
 8003b92:	f04f 0300 	mov.w	r3, #0
 8003b96:	018b      	lsls	r3, r1, #6
 8003b98:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003b9c:	0182      	lsls	r2, r0, #6
 8003b9e:	1a12      	subs	r2, r2, r0
 8003ba0:	eb63 0301 	sbc.w	r3, r3, r1
 8003ba4:	f04f 0000 	mov.w	r0, #0
 8003ba8:	f04f 0100 	mov.w	r1, #0
 8003bac:	00d9      	lsls	r1, r3, #3
 8003bae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003bb2:	00d0      	lsls	r0, r2, #3
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	eb12 0208 	adds.w	r2, r2, r8
 8003bbc:	eb43 0309 	adc.w	r3, r3, r9
 8003bc0:	f04f 0000 	mov.w	r0, #0
 8003bc4:	f04f 0100 	mov.w	r1, #0
 8003bc8:	0259      	lsls	r1, r3, #9
 8003bca:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003bce:	0250      	lsls	r0, r2, #9
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	4610      	mov	r0, r2
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	461a      	mov	r2, r3
 8003bdc:	f04f 0300 	mov.w	r3, #0
 8003be0:	f7fd f862 	bl	8000ca8 <__aeabi_uldivmod>
 8003be4:	4602      	mov	r2, r0
 8003be6:	460b      	mov	r3, r1
 8003be8:	4613      	mov	r3, r2
 8003bea:	61fb      	str	r3, [r7, #28]
 8003bec:	e04a      	b.n	8003c84 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bee:	4b30      	ldr	r3, [pc, #192]	; (8003cb0 <HAL_RCC_GetSysClockFreq+0x358>)
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	099b      	lsrs	r3, r3, #6
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	f04f 0300 	mov.w	r3, #0
 8003bfa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003bfe:	f04f 0100 	mov.w	r1, #0
 8003c02:	ea02 0400 	and.w	r4, r2, r0
 8003c06:	ea03 0501 	and.w	r5, r3, r1
 8003c0a:	4620      	mov	r0, r4
 8003c0c:	4629      	mov	r1, r5
 8003c0e:	f04f 0200 	mov.w	r2, #0
 8003c12:	f04f 0300 	mov.w	r3, #0
 8003c16:	014b      	lsls	r3, r1, #5
 8003c18:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003c1c:	0142      	lsls	r2, r0, #5
 8003c1e:	4610      	mov	r0, r2
 8003c20:	4619      	mov	r1, r3
 8003c22:	1b00      	subs	r0, r0, r4
 8003c24:	eb61 0105 	sbc.w	r1, r1, r5
 8003c28:	f04f 0200 	mov.w	r2, #0
 8003c2c:	f04f 0300 	mov.w	r3, #0
 8003c30:	018b      	lsls	r3, r1, #6
 8003c32:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003c36:	0182      	lsls	r2, r0, #6
 8003c38:	1a12      	subs	r2, r2, r0
 8003c3a:	eb63 0301 	sbc.w	r3, r3, r1
 8003c3e:	f04f 0000 	mov.w	r0, #0
 8003c42:	f04f 0100 	mov.w	r1, #0
 8003c46:	00d9      	lsls	r1, r3, #3
 8003c48:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c4c:	00d0      	lsls	r0, r2, #3
 8003c4e:	4602      	mov	r2, r0
 8003c50:	460b      	mov	r3, r1
 8003c52:	1912      	adds	r2, r2, r4
 8003c54:	eb45 0303 	adc.w	r3, r5, r3
 8003c58:	f04f 0000 	mov.w	r0, #0
 8003c5c:	f04f 0100 	mov.w	r1, #0
 8003c60:	0299      	lsls	r1, r3, #10
 8003c62:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003c66:	0290      	lsls	r0, r2, #10
 8003c68:	4602      	mov	r2, r0
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	4610      	mov	r0, r2
 8003c6e:	4619      	mov	r1, r3
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	461a      	mov	r2, r3
 8003c74:	f04f 0300 	mov.w	r3, #0
 8003c78:	f7fd f816 	bl	8000ca8 <__aeabi_uldivmod>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	460b      	mov	r3, r1
 8003c80:	4613      	mov	r3, r2
 8003c82:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003c84:	4b0a      	ldr	r3, [pc, #40]	; (8003cb0 <HAL_RCC_GetSysClockFreq+0x358>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	0f1b      	lsrs	r3, r3, #28
 8003c8a:	f003 0307 	and.w	r3, r3, #7
 8003c8e:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8003c90:	69fa      	ldr	r2, [r7, #28]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c98:	61bb      	str	r3, [r7, #24]
      break;
 8003c9a:	e002      	b.n	8003ca2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c9c:	4b05      	ldr	r3, [pc, #20]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003c9e:	61bb      	str	r3, [r7, #24]
      break;
 8003ca0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ca2:	69bb      	ldr	r3, [r7, #24]
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3720      	adds	r7, #32
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cae:	bf00      	nop
 8003cb0:	40023800 	.word	0x40023800
 8003cb4:	00f42400 	.word	0x00f42400
 8003cb8:	007a1200 	.word	0x007a1200

08003cbc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e28d      	b.n	80041ea <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0301 	and.w	r3, r3, #1
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	f000 8083 	beq.w	8003de2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003cdc:	4b94      	ldr	r3, [pc, #592]	; (8003f30 <HAL_RCC_OscConfig+0x274>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f003 030c 	and.w	r3, r3, #12
 8003ce4:	2b04      	cmp	r3, #4
 8003ce6:	d019      	beq.n	8003d1c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003ce8:	4b91      	ldr	r3, [pc, #580]	; (8003f30 <HAL_RCC_OscConfig+0x274>)
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003cf0:	2b08      	cmp	r3, #8
 8003cf2:	d106      	bne.n	8003d02 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003cf4:	4b8e      	ldr	r3, [pc, #568]	; (8003f30 <HAL_RCC_OscConfig+0x274>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d00:	d00c      	beq.n	8003d1c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d02:	4b8b      	ldr	r3, [pc, #556]	; (8003f30 <HAL_RCC_OscConfig+0x274>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d0a:	2b0c      	cmp	r3, #12
 8003d0c:	d112      	bne.n	8003d34 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d0e:	4b88      	ldr	r3, [pc, #544]	; (8003f30 <HAL_RCC_OscConfig+0x274>)
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d1a:	d10b      	bne.n	8003d34 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d1c:	4b84      	ldr	r3, [pc, #528]	; (8003f30 <HAL_RCC_OscConfig+0x274>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d05b      	beq.n	8003de0 <HAL_RCC_OscConfig+0x124>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d157      	bne.n	8003de0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e25a      	b.n	80041ea <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d3c:	d106      	bne.n	8003d4c <HAL_RCC_OscConfig+0x90>
 8003d3e:	4b7c      	ldr	r3, [pc, #496]	; (8003f30 <HAL_RCC_OscConfig+0x274>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a7b      	ldr	r2, [pc, #492]	; (8003f30 <HAL_RCC_OscConfig+0x274>)
 8003d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d48:	6013      	str	r3, [r2, #0]
 8003d4a:	e01d      	b.n	8003d88 <HAL_RCC_OscConfig+0xcc>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d54:	d10c      	bne.n	8003d70 <HAL_RCC_OscConfig+0xb4>
 8003d56:	4b76      	ldr	r3, [pc, #472]	; (8003f30 <HAL_RCC_OscConfig+0x274>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a75      	ldr	r2, [pc, #468]	; (8003f30 <HAL_RCC_OscConfig+0x274>)
 8003d5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d60:	6013      	str	r3, [r2, #0]
 8003d62:	4b73      	ldr	r3, [pc, #460]	; (8003f30 <HAL_RCC_OscConfig+0x274>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a72      	ldr	r2, [pc, #456]	; (8003f30 <HAL_RCC_OscConfig+0x274>)
 8003d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d6c:	6013      	str	r3, [r2, #0]
 8003d6e:	e00b      	b.n	8003d88 <HAL_RCC_OscConfig+0xcc>
 8003d70:	4b6f      	ldr	r3, [pc, #444]	; (8003f30 <HAL_RCC_OscConfig+0x274>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a6e      	ldr	r2, [pc, #440]	; (8003f30 <HAL_RCC_OscConfig+0x274>)
 8003d76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d7a:	6013      	str	r3, [r2, #0]
 8003d7c:	4b6c      	ldr	r3, [pc, #432]	; (8003f30 <HAL_RCC_OscConfig+0x274>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a6b      	ldr	r2, [pc, #428]	; (8003f30 <HAL_RCC_OscConfig+0x274>)
 8003d82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d013      	beq.n	8003db8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d90:	f7fe fd5e 	bl	8002850 <HAL_GetTick>
 8003d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d96:	e008      	b.n	8003daa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d98:	f7fe fd5a 	bl	8002850 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b64      	cmp	r3, #100	; 0x64
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e21f      	b.n	80041ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003daa:	4b61      	ldr	r3, [pc, #388]	; (8003f30 <HAL_RCC_OscConfig+0x274>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d0f0      	beq.n	8003d98 <HAL_RCC_OscConfig+0xdc>
 8003db6:	e014      	b.n	8003de2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db8:	f7fe fd4a 	bl	8002850 <HAL_GetTick>
 8003dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dbe:	e008      	b.n	8003dd2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dc0:	f7fe fd46 	bl	8002850 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	2b64      	cmp	r3, #100	; 0x64
 8003dcc:	d901      	bls.n	8003dd2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e20b      	b.n	80041ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dd2:	4b57      	ldr	r3, [pc, #348]	; (8003f30 <HAL_RCC_OscConfig+0x274>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1f0      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x104>
 8003dde:	e000      	b.n	8003de2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003de0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d06f      	beq.n	8003ece <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003dee:	4b50      	ldr	r3, [pc, #320]	; (8003f30 <HAL_RCC_OscConfig+0x274>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f003 030c 	and.w	r3, r3, #12
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d017      	beq.n	8003e2a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003dfa:	4b4d      	ldr	r3, [pc, #308]	; (8003f30 <HAL_RCC_OscConfig+0x274>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003e02:	2b08      	cmp	r3, #8
 8003e04:	d105      	bne.n	8003e12 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e06:	4b4a      	ldr	r3, [pc, #296]	; (8003f30 <HAL_RCC_OscConfig+0x274>)
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00b      	beq.n	8003e2a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e12:	4b47      	ldr	r3, [pc, #284]	; (8003f30 <HAL_RCC_OscConfig+0x274>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e1a:	2b0c      	cmp	r3, #12
 8003e1c:	d11c      	bne.n	8003e58 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e1e:	4b44      	ldr	r3, [pc, #272]	; (8003f30 <HAL_RCC_OscConfig+0x274>)
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d116      	bne.n	8003e58 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e2a:	4b41      	ldr	r3, [pc, #260]	; (8003f30 <HAL_RCC_OscConfig+0x274>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d005      	beq.n	8003e42 <HAL_RCC_OscConfig+0x186>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d001      	beq.n	8003e42 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e1d3      	b.n	80041ea <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e42:	4b3b      	ldr	r3, [pc, #236]	; (8003f30 <HAL_RCC_OscConfig+0x274>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	4937      	ldr	r1, [pc, #220]	; (8003f30 <HAL_RCC_OscConfig+0x274>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e56:	e03a      	b.n	8003ece <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d020      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e60:	4b34      	ldr	r3, [pc, #208]	; (8003f34 <HAL_RCC_OscConfig+0x278>)
 8003e62:	2201      	movs	r2, #1
 8003e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e66:	f7fe fcf3 	bl	8002850 <HAL_GetTick>
 8003e6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e6c:	e008      	b.n	8003e80 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e6e:	f7fe fcef 	bl	8002850 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d901      	bls.n	8003e80 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e1b4      	b.n	80041ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e80:	4b2b      	ldr	r3, [pc, #172]	; (8003f30 <HAL_RCC_OscConfig+0x274>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d0f0      	beq.n	8003e6e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e8c:	4b28      	ldr	r3, [pc, #160]	; (8003f30 <HAL_RCC_OscConfig+0x274>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	00db      	lsls	r3, r3, #3
 8003e9a:	4925      	ldr	r1, [pc, #148]	; (8003f30 <HAL_RCC_OscConfig+0x274>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	600b      	str	r3, [r1, #0]
 8003ea0:	e015      	b.n	8003ece <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ea2:	4b24      	ldr	r3, [pc, #144]	; (8003f34 <HAL_RCC_OscConfig+0x278>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea8:	f7fe fcd2 	bl	8002850 <HAL_GetTick>
 8003eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eae:	e008      	b.n	8003ec2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003eb0:	f7fe fcce 	bl	8002850 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e193      	b.n	80041ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ec2:	4b1b      	ldr	r3, [pc, #108]	; (8003f30 <HAL_RCC_OscConfig+0x274>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1f0      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0308 	and.w	r3, r3, #8
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d036      	beq.n	8003f48 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d016      	beq.n	8003f10 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ee2:	4b15      	ldr	r3, [pc, #84]	; (8003f38 <HAL_RCC_OscConfig+0x27c>)
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee8:	f7fe fcb2 	bl	8002850 <HAL_GetTick>
 8003eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eee:	e008      	b.n	8003f02 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ef0:	f7fe fcae 	bl	8002850 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e173      	b.n	80041ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f02:	4b0b      	ldr	r3, [pc, #44]	; (8003f30 <HAL_RCC_OscConfig+0x274>)
 8003f04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d0f0      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x234>
 8003f0e:	e01b      	b.n	8003f48 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f10:	4b09      	ldr	r3, [pc, #36]	; (8003f38 <HAL_RCC_OscConfig+0x27c>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f16:	f7fe fc9b 	bl	8002850 <HAL_GetTick>
 8003f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f1c:	e00e      	b.n	8003f3c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f1e:	f7fe fc97 	bl	8002850 <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d907      	bls.n	8003f3c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e15c      	b.n	80041ea <HAL_RCC_OscConfig+0x52e>
 8003f30:	40023800 	.word	0x40023800
 8003f34:	42470000 	.word	0x42470000
 8003f38:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f3c:	4b8a      	ldr	r3, [pc, #552]	; (8004168 <HAL_RCC_OscConfig+0x4ac>)
 8003f3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d1ea      	bne.n	8003f1e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0304 	and.w	r3, r3, #4
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f000 8097 	beq.w	8004084 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f56:	2300      	movs	r3, #0
 8003f58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f5a:	4b83      	ldr	r3, [pc, #524]	; (8004168 <HAL_RCC_OscConfig+0x4ac>)
 8003f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10f      	bne.n	8003f86 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f66:	2300      	movs	r3, #0
 8003f68:	60bb      	str	r3, [r7, #8]
 8003f6a:	4b7f      	ldr	r3, [pc, #508]	; (8004168 <HAL_RCC_OscConfig+0x4ac>)
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6e:	4a7e      	ldr	r2, [pc, #504]	; (8004168 <HAL_RCC_OscConfig+0x4ac>)
 8003f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f74:	6413      	str	r3, [r2, #64]	; 0x40
 8003f76:	4b7c      	ldr	r3, [pc, #496]	; (8004168 <HAL_RCC_OscConfig+0x4ac>)
 8003f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f7e:	60bb      	str	r3, [r7, #8]
 8003f80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f82:	2301      	movs	r3, #1
 8003f84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f86:	4b79      	ldr	r3, [pc, #484]	; (800416c <HAL_RCC_OscConfig+0x4b0>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d118      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f92:	4b76      	ldr	r3, [pc, #472]	; (800416c <HAL_RCC_OscConfig+0x4b0>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a75      	ldr	r2, [pc, #468]	; (800416c <HAL_RCC_OscConfig+0x4b0>)
 8003f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f9e:	f7fe fc57 	bl	8002850 <HAL_GetTick>
 8003fa2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fa4:	e008      	b.n	8003fb8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fa6:	f7fe fc53 	bl	8002850 <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d901      	bls.n	8003fb8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e118      	b.n	80041ea <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb8:	4b6c      	ldr	r3, [pc, #432]	; (800416c <HAL_RCC_OscConfig+0x4b0>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d0f0      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d106      	bne.n	8003fda <HAL_RCC_OscConfig+0x31e>
 8003fcc:	4b66      	ldr	r3, [pc, #408]	; (8004168 <HAL_RCC_OscConfig+0x4ac>)
 8003fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd0:	4a65      	ldr	r2, [pc, #404]	; (8004168 <HAL_RCC_OscConfig+0x4ac>)
 8003fd2:	f043 0301 	orr.w	r3, r3, #1
 8003fd6:	6713      	str	r3, [r2, #112]	; 0x70
 8003fd8:	e01c      	b.n	8004014 <HAL_RCC_OscConfig+0x358>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	2b05      	cmp	r3, #5
 8003fe0:	d10c      	bne.n	8003ffc <HAL_RCC_OscConfig+0x340>
 8003fe2:	4b61      	ldr	r3, [pc, #388]	; (8004168 <HAL_RCC_OscConfig+0x4ac>)
 8003fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe6:	4a60      	ldr	r2, [pc, #384]	; (8004168 <HAL_RCC_OscConfig+0x4ac>)
 8003fe8:	f043 0304 	orr.w	r3, r3, #4
 8003fec:	6713      	str	r3, [r2, #112]	; 0x70
 8003fee:	4b5e      	ldr	r3, [pc, #376]	; (8004168 <HAL_RCC_OscConfig+0x4ac>)
 8003ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff2:	4a5d      	ldr	r2, [pc, #372]	; (8004168 <HAL_RCC_OscConfig+0x4ac>)
 8003ff4:	f043 0301 	orr.w	r3, r3, #1
 8003ff8:	6713      	str	r3, [r2, #112]	; 0x70
 8003ffa:	e00b      	b.n	8004014 <HAL_RCC_OscConfig+0x358>
 8003ffc:	4b5a      	ldr	r3, [pc, #360]	; (8004168 <HAL_RCC_OscConfig+0x4ac>)
 8003ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004000:	4a59      	ldr	r2, [pc, #356]	; (8004168 <HAL_RCC_OscConfig+0x4ac>)
 8004002:	f023 0301 	bic.w	r3, r3, #1
 8004006:	6713      	str	r3, [r2, #112]	; 0x70
 8004008:	4b57      	ldr	r3, [pc, #348]	; (8004168 <HAL_RCC_OscConfig+0x4ac>)
 800400a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800400c:	4a56      	ldr	r2, [pc, #344]	; (8004168 <HAL_RCC_OscConfig+0x4ac>)
 800400e:	f023 0304 	bic.w	r3, r3, #4
 8004012:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d015      	beq.n	8004048 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800401c:	f7fe fc18 	bl	8002850 <HAL_GetTick>
 8004020:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004022:	e00a      	b.n	800403a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004024:	f7fe fc14 	bl	8002850 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004032:	4293      	cmp	r3, r2
 8004034:	d901      	bls.n	800403a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e0d7      	b.n	80041ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800403a:	4b4b      	ldr	r3, [pc, #300]	; (8004168 <HAL_RCC_OscConfig+0x4ac>)
 800403c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800403e:	f003 0302 	and.w	r3, r3, #2
 8004042:	2b00      	cmp	r3, #0
 8004044:	d0ee      	beq.n	8004024 <HAL_RCC_OscConfig+0x368>
 8004046:	e014      	b.n	8004072 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004048:	f7fe fc02 	bl	8002850 <HAL_GetTick>
 800404c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800404e:	e00a      	b.n	8004066 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004050:	f7fe fbfe 	bl	8002850 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	f241 3288 	movw	r2, #5000	; 0x1388
 800405e:	4293      	cmp	r3, r2
 8004060:	d901      	bls.n	8004066 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e0c1      	b.n	80041ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004066:	4b40      	ldr	r3, [pc, #256]	; (8004168 <HAL_RCC_OscConfig+0x4ac>)
 8004068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1ee      	bne.n	8004050 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004072:	7dfb      	ldrb	r3, [r7, #23]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d105      	bne.n	8004084 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004078:	4b3b      	ldr	r3, [pc, #236]	; (8004168 <HAL_RCC_OscConfig+0x4ac>)
 800407a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407c:	4a3a      	ldr	r2, [pc, #232]	; (8004168 <HAL_RCC_OscConfig+0x4ac>)
 800407e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004082:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	699b      	ldr	r3, [r3, #24]
 8004088:	2b00      	cmp	r3, #0
 800408a:	f000 80ad 	beq.w	80041e8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800408e:	4b36      	ldr	r3, [pc, #216]	; (8004168 <HAL_RCC_OscConfig+0x4ac>)
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f003 030c 	and.w	r3, r3, #12
 8004096:	2b08      	cmp	r3, #8
 8004098:	d060      	beq.n	800415c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d145      	bne.n	800412e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040a2:	4b33      	ldr	r3, [pc, #204]	; (8004170 <HAL_RCC_OscConfig+0x4b4>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a8:	f7fe fbd2 	bl	8002850 <HAL_GetTick>
 80040ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ae:	e008      	b.n	80040c2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040b0:	f7fe fbce 	bl	8002850 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e093      	b.n	80041ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040c2:	4b29      	ldr	r3, [pc, #164]	; (8004168 <HAL_RCC_OscConfig+0x4ac>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1f0      	bne.n	80040b0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	69da      	ldr	r2, [r3, #28]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a1b      	ldr	r3, [r3, #32]
 80040d6:	431a      	orrs	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040dc:	019b      	lsls	r3, r3, #6
 80040de:	431a      	orrs	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e4:	085b      	lsrs	r3, r3, #1
 80040e6:	3b01      	subs	r3, #1
 80040e8:	041b      	lsls	r3, r3, #16
 80040ea:	431a      	orrs	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f0:	061b      	lsls	r3, r3, #24
 80040f2:	431a      	orrs	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f8:	071b      	lsls	r3, r3, #28
 80040fa:	491b      	ldr	r1, [pc, #108]	; (8004168 <HAL_RCC_OscConfig+0x4ac>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004100:	4b1b      	ldr	r3, [pc, #108]	; (8004170 <HAL_RCC_OscConfig+0x4b4>)
 8004102:	2201      	movs	r2, #1
 8004104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004106:	f7fe fba3 	bl	8002850 <HAL_GetTick>
 800410a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800410c:	e008      	b.n	8004120 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800410e:	f7fe fb9f 	bl	8002850 <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	2b02      	cmp	r3, #2
 800411a:	d901      	bls.n	8004120 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e064      	b.n	80041ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004120:	4b11      	ldr	r3, [pc, #68]	; (8004168 <HAL_RCC_OscConfig+0x4ac>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d0f0      	beq.n	800410e <HAL_RCC_OscConfig+0x452>
 800412c:	e05c      	b.n	80041e8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800412e:	4b10      	ldr	r3, [pc, #64]	; (8004170 <HAL_RCC_OscConfig+0x4b4>)
 8004130:	2200      	movs	r2, #0
 8004132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004134:	f7fe fb8c 	bl	8002850 <HAL_GetTick>
 8004138:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800413a:	e008      	b.n	800414e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800413c:	f7fe fb88 	bl	8002850 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b02      	cmp	r3, #2
 8004148:	d901      	bls.n	800414e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e04d      	b.n	80041ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800414e:	4b06      	ldr	r3, [pc, #24]	; (8004168 <HAL_RCC_OscConfig+0x4ac>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1f0      	bne.n	800413c <HAL_RCC_OscConfig+0x480>
 800415a:	e045      	b.n	80041e8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	699b      	ldr	r3, [r3, #24]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d107      	bne.n	8004174 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e040      	b.n	80041ea <HAL_RCC_OscConfig+0x52e>
 8004168:	40023800 	.word	0x40023800
 800416c:	40007000 	.word	0x40007000
 8004170:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004174:	4b1f      	ldr	r3, [pc, #124]	; (80041f4 <HAL_RCC_OscConfig+0x538>)
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d030      	beq.n	80041e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800418c:	429a      	cmp	r2, r3
 800418e:	d129      	bne.n	80041e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800419a:	429a      	cmp	r2, r3
 800419c:	d122      	bne.n	80041e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041a4:	4013      	ands	r3, r2
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d119      	bne.n	80041e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ba:	085b      	lsrs	r3, r3, #1
 80041bc:	3b01      	subs	r3, #1
 80041be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d10f      	bne.n	80041e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d107      	bne.n	80041e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041de:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d001      	beq.n	80041e8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e000      	b.n	80041ea <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3718      	adds	r7, #24
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	40023800 	.word	0x40023800

080041f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d101      	bne.n	800420a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e041      	b.n	800428e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d106      	bne.n	8004224 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7fe f91a 	bl	8002458 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2202      	movs	r2, #2
 8004228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	3304      	adds	r3, #4
 8004234:	4619      	mov	r1, r3
 8004236:	4610      	mov	r0, r2
 8004238:	f000 fdae 	bl	8004d98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3708      	adds	r7, #8
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
	...

08004298 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d001      	beq.n	80042b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e04e      	b.n	800434e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2202      	movs	r2, #2
 80042b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68da      	ldr	r2, [r3, #12]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f042 0201 	orr.w	r2, r2, #1
 80042c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a23      	ldr	r2, [pc, #140]	; (800435c <HAL_TIM_Base_Start_IT+0xc4>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d022      	beq.n	8004318 <HAL_TIM_Base_Start_IT+0x80>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042da:	d01d      	beq.n	8004318 <HAL_TIM_Base_Start_IT+0x80>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a1f      	ldr	r2, [pc, #124]	; (8004360 <HAL_TIM_Base_Start_IT+0xc8>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d018      	beq.n	8004318 <HAL_TIM_Base_Start_IT+0x80>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a1e      	ldr	r2, [pc, #120]	; (8004364 <HAL_TIM_Base_Start_IT+0xcc>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d013      	beq.n	8004318 <HAL_TIM_Base_Start_IT+0x80>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a1c      	ldr	r2, [pc, #112]	; (8004368 <HAL_TIM_Base_Start_IT+0xd0>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d00e      	beq.n	8004318 <HAL_TIM_Base_Start_IT+0x80>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a1b      	ldr	r2, [pc, #108]	; (800436c <HAL_TIM_Base_Start_IT+0xd4>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d009      	beq.n	8004318 <HAL_TIM_Base_Start_IT+0x80>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a19      	ldr	r2, [pc, #100]	; (8004370 <HAL_TIM_Base_Start_IT+0xd8>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d004      	beq.n	8004318 <HAL_TIM_Base_Start_IT+0x80>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a18      	ldr	r2, [pc, #96]	; (8004374 <HAL_TIM_Base_Start_IT+0xdc>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d111      	bne.n	800433c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f003 0307 	and.w	r3, r3, #7
 8004322:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2b06      	cmp	r3, #6
 8004328:	d010      	beq.n	800434c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f042 0201 	orr.w	r2, r2, #1
 8004338:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800433a:	e007      	b.n	800434c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f042 0201 	orr.w	r2, r2, #1
 800434a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	3714      	adds	r7, #20
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr
 800435a:	bf00      	nop
 800435c:	40010000 	.word	0x40010000
 8004360:	40000400 	.word	0x40000400
 8004364:	40000800 	.word	0x40000800
 8004368:	40000c00 	.word	0x40000c00
 800436c:	40010400 	.word	0x40010400
 8004370:	40014000 	.word	0x40014000
 8004374:	40001800 	.word	0x40001800

08004378 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d101      	bne.n	800438a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e041      	b.n	800440e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d106      	bne.n	80043a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 f839 	bl	8004416 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2202      	movs	r2, #2
 80043a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	3304      	adds	r3, #4
 80043b4:	4619      	mov	r1, r3
 80043b6:	4610      	mov	r0, r2
 80043b8:	f000 fcee 	bl	8004d98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3708      	adds	r7, #8
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004416:	b480      	push	{r7}
 8004418:	b083      	sub	sp, #12
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800441e:	bf00      	nop
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
	...

0800442c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d109      	bne.n	8004450 <HAL_TIM_PWM_Start+0x24>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004442:	b2db      	uxtb	r3, r3
 8004444:	2b01      	cmp	r3, #1
 8004446:	bf14      	ite	ne
 8004448:	2301      	movne	r3, #1
 800444a:	2300      	moveq	r3, #0
 800444c:	b2db      	uxtb	r3, r3
 800444e:	e022      	b.n	8004496 <HAL_TIM_PWM_Start+0x6a>
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	2b04      	cmp	r3, #4
 8004454:	d109      	bne.n	800446a <HAL_TIM_PWM_Start+0x3e>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b01      	cmp	r3, #1
 8004460:	bf14      	ite	ne
 8004462:	2301      	movne	r3, #1
 8004464:	2300      	moveq	r3, #0
 8004466:	b2db      	uxtb	r3, r3
 8004468:	e015      	b.n	8004496 <HAL_TIM_PWM_Start+0x6a>
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	2b08      	cmp	r3, #8
 800446e:	d109      	bne.n	8004484 <HAL_TIM_PWM_Start+0x58>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004476:	b2db      	uxtb	r3, r3
 8004478:	2b01      	cmp	r3, #1
 800447a:	bf14      	ite	ne
 800447c:	2301      	movne	r3, #1
 800447e:	2300      	moveq	r3, #0
 8004480:	b2db      	uxtb	r3, r3
 8004482:	e008      	b.n	8004496 <HAL_TIM_PWM_Start+0x6a>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800448a:	b2db      	uxtb	r3, r3
 800448c:	2b01      	cmp	r3, #1
 800448e:	bf14      	ite	ne
 8004490:	2301      	movne	r3, #1
 8004492:	2300      	moveq	r3, #0
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d001      	beq.n	800449e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e07c      	b.n	8004598 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d104      	bne.n	80044ae <HAL_TIM_PWM_Start+0x82>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2202      	movs	r2, #2
 80044a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044ac:	e013      	b.n	80044d6 <HAL_TIM_PWM_Start+0xaa>
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	2b04      	cmp	r3, #4
 80044b2:	d104      	bne.n	80044be <HAL_TIM_PWM_Start+0x92>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2202      	movs	r2, #2
 80044b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044bc:	e00b      	b.n	80044d6 <HAL_TIM_PWM_Start+0xaa>
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	2b08      	cmp	r3, #8
 80044c2:	d104      	bne.n	80044ce <HAL_TIM_PWM_Start+0xa2>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2202      	movs	r2, #2
 80044c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044cc:	e003      	b.n	80044d6 <HAL_TIM_PWM_Start+0xaa>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2202      	movs	r2, #2
 80044d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2201      	movs	r2, #1
 80044dc:	6839      	ldr	r1, [r7, #0]
 80044de:	4618      	mov	r0, r3
 80044e0:	f000 ff44 	bl	800536c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a2d      	ldr	r2, [pc, #180]	; (80045a0 <HAL_TIM_PWM_Start+0x174>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d004      	beq.n	80044f8 <HAL_TIM_PWM_Start+0xcc>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a2c      	ldr	r2, [pc, #176]	; (80045a4 <HAL_TIM_PWM_Start+0x178>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d101      	bne.n	80044fc <HAL_TIM_PWM_Start+0xd0>
 80044f8:	2301      	movs	r3, #1
 80044fa:	e000      	b.n	80044fe <HAL_TIM_PWM_Start+0xd2>
 80044fc:	2300      	movs	r3, #0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d007      	beq.n	8004512 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004510:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a22      	ldr	r2, [pc, #136]	; (80045a0 <HAL_TIM_PWM_Start+0x174>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d022      	beq.n	8004562 <HAL_TIM_PWM_Start+0x136>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004524:	d01d      	beq.n	8004562 <HAL_TIM_PWM_Start+0x136>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a1f      	ldr	r2, [pc, #124]	; (80045a8 <HAL_TIM_PWM_Start+0x17c>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d018      	beq.n	8004562 <HAL_TIM_PWM_Start+0x136>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a1d      	ldr	r2, [pc, #116]	; (80045ac <HAL_TIM_PWM_Start+0x180>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d013      	beq.n	8004562 <HAL_TIM_PWM_Start+0x136>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a1c      	ldr	r2, [pc, #112]	; (80045b0 <HAL_TIM_PWM_Start+0x184>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d00e      	beq.n	8004562 <HAL_TIM_PWM_Start+0x136>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a16      	ldr	r2, [pc, #88]	; (80045a4 <HAL_TIM_PWM_Start+0x178>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d009      	beq.n	8004562 <HAL_TIM_PWM_Start+0x136>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a18      	ldr	r2, [pc, #96]	; (80045b4 <HAL_TIM_PWM_Start+0x188>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d004      	beq.n	8004562 <HAL_TIM_PWM_Start+0x136>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a16      	ldr	r2, [pc, #88]	; (80045b8 <HAL_TIM_PWM_Start+0x18c>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d111      	bne.n	8004586 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f003 0307 	and.w	r3, r3, #7
 800456c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2b06      	cmp	r3, #6
 8004572:	d010      	beq.n	8004596 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f042 0201 	orr.w	r2, r2, #1
 8004582:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004584:	e007      	b.n	8004596 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f042 0201 	orr.w	r2, r2, #1
 8004594:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	3710      	adds	r7, #16
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	40010000 	.word	0x40010000
 80045a4:	40010400 	.word	0x40010400
 80045a8:	40000400 	.word	0x40000400
 80045ac:	40000800 	.word	0x40000800
 80045b0:	40000c00 	.word	0x40000c00
 80045b4:	40014000 	.word	0x40014000
 80045b8:	40001800 	.word	0x40001800

080045bc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b086      	sub	sp, #24
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d101      	bne.n	80045d0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e097      	b.n	8004700 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d106      	bne.n	80045ea <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f7fd ff75 	bl	80024d4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2202      	movs	r2, #2
 80045ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	6812      	ldr	r2, [r2, #0]
 80045fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004600:	f023 0307 	bic.w	r3, r3, #7
 8004604:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	3304      	adds	r3, #4
 800460e:	4619      	mov	r1, r3
 8004610:	4610      	mov	r0, r2
 8004612:	f000 fbc1 	bl	8004d98 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	6a1b      	ldr	r3, [r3, #32]
 800462c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	697a      	ldr	r2, [r7, #20]
 8004634:	4313      	orrs	r3, r2
 8004636:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800463e:	f023 0303 	bic.w	r3, r3, #3
 8004642:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	689a      	ldr	r2, [r3, #8]
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	021b      	lsls	r3, r3, #8
 800464e:	4313      	orrs	r3, r2
 8004650:	693a      	ldr	r2, [r7, #16]
 8004652:	4313      	orrs	r3, r2
 8004654:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800465c:	f023 030c 	bic.w	r3, r3, #12
 8004660:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004668:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800466c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	68da      	ldr	r2, [r3, #12]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	69db      	ldr	r3, [r3, #28]
 8004676:	021b      	lsls	r3, r3, #8
 8004678:	4313      	orrs	r3, r2
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	4313      	orrs	r3, r2
 800467e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	011a      	lsls	r2, r3, #4
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	031b      	lsls	r3, r3, #12
 800468c:	4313      	orrs	r3, r2
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	4313      	orrs	r3, r2
 8004692:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800469a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80046a2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	685a      	ldr	r2, [r3, #4]
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	695b      	ldr	r3, [r3, #20]
 80046ac:	011b      	lsls	r3, r3, #4
 80046ae:	4313      	orrs	r3, r2
 80046b0:	68fa      	ldr	r2, [r7, #12]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	697a      	ldr	r2, [r7, #20]
 80046bc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2201      	movs	r2, #1
 80046da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2201      	movs	r2, #1
 80046ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2201      	movs	r2, #1
 80046fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046fe:	2300      	movs	r3, #0
}
 8004700:	4618      	mov	r0, r3
 8004702:	3718      	adds	r7, #24
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004718:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004720:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004728:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004730:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d110      	bne.n	800475a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004738:	7bfb      	ldrb	r3, [r7, #15]
 800473a:	2b01      	cmp	r3, #1
 800473c:	d102      	bne.n	8004744 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800473e:	7b7b      	ldrb	r3, [r7, #13]
 8004740:	2b01      	cmp	r3, #1
 8004742:	d001      	beq.n	8004748 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e069      	b.n	800481c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2202      	movs	r2, #2
 800474c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2202      	movs	r2, #2
 8004754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004758:	e031      	b.n	80047be <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	2b04      	cmp	r3, #4
 800475e:	d110      	bne.n	8004782 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004760:	7bbb      	ldrb	r3, [r7, #14]
 8004762:	2b01      	cmp	r3, #1
 8004764:	d102      	bne.n	800476c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004766:	7b3b      	ldrb	r3, [r7, #12]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d001      	beq.n	8004770 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e055      	b.n	800481c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2202      	movs	r2, #2
 8004774:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2202      	movs	r2, #2
 800477c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004780:	e01d      	b.n	80047be <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004782:	7bfb      	ldrb	r3, [r7, #15]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d108      	bne.n	800479a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004788:	7bbb      	ldrb	r3, [r7, #14]
 800478a:	2b01      	cmp	r3, #1
 800478c:	d105      	bne.n	800479a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800478e:	7b7b      	ldrb	r3, [r7, #13]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d102      	bne.n	800479a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004794:	7b3b      	ldrb	r3, [r7, #12]
 8004796:	2b01      	cmp	r3, #1
 8004798:	d001      	beq.n	800479e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e03e      	b.n	800481c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2202      	movs	r2, #2
 80047a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2202      	movs	r2, #2
 80047aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2202      	movs	r2, #2
 80047b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2202      	movs	r2, #2
 80047ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d003      	beq.n	80047cc <HAL_TIM_Encoder_Start+0xc4>
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	2b04      	cmp	r3, #4
 80047c8:	d008      	beq.n	80047dc <HAL_TIM_Encoder_Start+0xd4>
 80047ca:	e00f      	b.n	80047ec <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2201      	movs	r2, #1
 80047d2:	2100      	movs	r1, #0
 80047d4:	4618      	mov	r0, r3
 80047d6:	f000 fdc9 	bl	800536c <TIM_CCxChannelCmd>
      break;
 80047da:	e016      	b.n	800480a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2201      	movs	r2, #1
 80047e2:	2104      	movs	r1, #4
 80047e4:	4618      	mov	r0, r3
 80047e6:	f000 fdc1 	bl	800536c <TIM_CCxChannelCmd>
      break;
 80047ea:	e00e      	b.n	800480a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2201      	movs	r2, #1
 80047f2:	2100      	movs	r1, #0
 80047f4:	4618      	mov	r0, r3
 80047f6:	f000 fdb9 	bl	800536c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2201      	movs	r2, #1
 8004800:	2104      	movs	r1, #4
 8004802:	4618      	mov	r0, r3
 8004804:	f000 fdb2 	bl	800536c <TIM_CCxChannelCmd>
      break;
 8004808:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f042 0201 	orr.w	r2, r2, #1
 8004818:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	3710      	adds	r7, #16
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	f003 0302 	and.w	r3, r3, #2
 8004836:	2b02      	cmp	r3, #2
 8004838:	d122      	bne.n	8004880 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	f003 0302 	and.w	r3, r3, #2
 8004844:	2b02      	cmp	r3, #2
 8004846:	d11b      	bne.n	8004880 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f06f 0202 	mvn.w	r2, #2
 8004850:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2201      	movs	r2, #1
 8004856:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	f003 0303 	and.w	r3, r3, #3
 8004862:	2b00      	cmp	r3, #0
 8004864:	d003      	beq.n	800486e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 fa77 	bl	8004d5a <HAL_TIM_IC_CaptureCallback>
 800486c:	e005      	b.n	800487a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 fa69 	bl	8004d46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f000 fa7a 	bl	8004d6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	f003 0304 	and.w	r3, r3, #4
 800488a:	2b04      	cmp	r3, #4
 800488c:	d122      	bne.n	80048d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	f003 0304 	and.w	r3, r3, #4
 8004898:	2b04      	cmp	r3, #4
 800489a:	d11b      	bne.n	80048d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f06f 0204 	mvn.w	r2, #4
 80048a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2202      	movs	r2, #2
 80048aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d003      	beq.n	80048c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 fa4d 	bl	8004d5a <HAL_TIM_IC_CaptureCallback>
 80048c0:	e005      	b.n	80048ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 fa3f 	bl	8004d46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 fa50 	bl	8004d6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	f003 0308 	and.w	r3, r3, #8
 80048de:	2b08      	cmp	r3, #8
 80048e0:	d122      	bne.n	8004928 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	f003 0308 	and.w	r3, r3, #8
 80048ec:	2b08      	cmp	r3, #8
 80048ee:	d11b      	bne.n	8004928 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f06f 0208 	mvn.w	r2, #8
 80048f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2204      	movs	r2, #4
 80048fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	69db      	ldr	r3, [r3, #28]
 8004906:	f003 0303 	and.w	r3, r3, #3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d003      	beq.n	8004916 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 fa23 	bl	8004d5a <HAL_TIM_IC_CaptureCallback>
 8004914:	e005      	b.n	8004922 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 fa15 	bl	8004d46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f000 fa26 	bl	8004d6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	f003 0310 	and.w	r3, r3, #16
 8004932:	2b10      	cmp	r3, #16
 8004934:	d122      	bne.n	800497c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	f003 0310 	and.w	r3, r3, #16
 8004940:	2b10      	cmp	r3, #16
 8004942:	d11b      	bne.n	800497c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f06f 0210 	mvn.w	r2, #16
 800494c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2208      	movs	r2, #8
 8004952:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	69db      	ldr	r3, [r3, #28]
 800495a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800495e:	2b00      	cmp	r3, #0
 8004960:	d003      	beq.n	800496a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 f9f9 	bl	8004d5a <HAL_TIM_IC_CaptureCallback>
 8004968:	e005      	b.n	8004976 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 f9eb 	bl	8004d46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 f9fc 	bl	8004d6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b01      	cmp	r3, #1
 8004988:	d10e      	bne.n	80049a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	f003 0301 	and.w	r3, r3, #1
 8004994:	2b01      	cmp	r3, #1
 8004996:	d107      	bne.n	80049a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f06f 0201 	mvn.w	r2, #1
 80049a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f7fd fa24 	bl	8001df0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049b2:	2b80      	cmp	r3, #128	; 0x80
 80049b4:	d10e      	bne.n	80049d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c0:	2b80      	cmp	r3, #128	; 0x80
 80049c2:	d107      	bne.n	80049d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 fdca 	bl	8005568 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049de:	2b40      	cmp	r3, #64	; 0x40
 80049e0:	d10e      	bne.n	8004a00 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ec:	2b40      	cmp	r3, #64	; 0x40
 80049ee:	d107      	bne.n	8004a00 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 f9c1 	bl	8004d82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	f003 0320 	and.w	r3, r3, #32
 8004a0a:	2b20      	cmp	r3, #32
 8004a0c:	d10e      	bne.n	8004a2c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	f003 0320 	and.w	r3, r3, #32
 8004a18:	2b20      	cmp	r3, #32
 8004a1a:	d107      	bne.n	8004a2c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f06f 0220 	mvn.w	r2, #32
 8004a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 fd94 	bl	8005554 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a2c:	bf00      	nop
 8004a2e:	3708      	adds	r7, #8
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b086      	sub	sp, #24
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a40:	2300      	movs	r3, #0
 8004a42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d101      	bne.n	8004a52 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a4e:	2302      	movs	r3, #2
 8004a50:	e0ae      	b.n	8004bb0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2201      	movs	r2, #1
 8004a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2b0c      	cmp	r3, #12
 8004a5e:	f200 809f 	bhi.w	8004ba0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004a62:	a201      	add	r2, pc, #4	; (adr r2, 8004a68 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a68:	08004a9d 	.word	0x08004a9d
 8004a6c:	08004ba1 	.word	0x08004ba1
 8004a70:	08004ba1 	.word	0x08004ba1
 8004a74:	08004ba1 	.word	0x08004ba1
 8004a78:	08004add 	.word	0x08004add
 8004a7c:	08004ba1 	.word	0x08004ba1
 8004a80:	08004ba1 	.word	0x08004ba1
 8004a84:	08004ba1 	.word	0x08004ba1
 8004a88:	08004b1f 	.word	0x08004b1f
 8004a8c:	08004ba1 	.word	0x08004ba1
 8004a90:	08004ba1 	.word	0x08004ba1
 8004a94:	08004ba1 	.word	0x08004ba1
 8004a98:	08004b5f 	.word	0x08004b5f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68b9      	ldr	r1, [r7, #8]
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f000 fa18 	bl	8004ed8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	699a      	ldr	r2, [r3, #24]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f042 0208 	orr.w	r2, r2, #8
 8004ab6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	699a      	ldr	r2, [r3, #24]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f022 0204 	bic.w	r2, r2, #4
 8004ac6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	6999      	ldr	r1, [r3, #24]
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	691a      	ldr	r2, [r3, #16]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	619a      	str	r2, [r3, #24]
      break;
 8004ada:	e064      	b.n	8004ba6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68b9      	ldr	r1, [r7, #8]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f000 fa68 	bl	8004fb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	699a      	ldr	r2, [r3, #24]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004af6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	699a      	ldr	r2, [r3, #24]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	6999      	ldr	r1, [r3, #24]
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	021a      	lsls	r2, r3, #8
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	619a      	str	r2, [r3, #24]
      break;
 8004b1c:	e043      	b.n	8004ba6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68b9      	ldr	r1, [r7, #8]
 8004b24:	4618      	mov	r0, r3
 8004b26:	f000 fabd 	bl	80050a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	69da      	ldr	r2, [r3, #28]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f042 0208 	orr.w	r2, r2, #8
 8004b38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	69da      	ldr	r2, [r3, #28]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f022 0204 	bic.w	r2, r2, #4
 8004b48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	69d9      	ldr	r1, [r3, #28]
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	691a      	ldr	r2, [r3, #16]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	61da      	str	r2, [r3, #28]
      break;
 8004b5c:	e023      	b.n	8004ba6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68b9      	ldr	r1, [r7, #8]
 8004b64:	4618      	mov	r0, r3
 8004b66:	f000 fb11 	bl	800518c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	69da      	ldr	r2, [r3, #28]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	69da      	ldr	r2, [r3, #28]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	69d9      	ldr	r1, [r3, #28]
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	021a      	lsls	r2, r3, #8
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	61da      	str	r2, [r3, #28]
      break;
 8004b9e:	e002      	b.n	8004ba6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	75fb      	strb	r3, [r7, #23]
      break;
 8004ba4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004bae:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3718      	adds	r7, #24
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d101      	bne.n	8004bd4 <HAL_TIM_ConfigClockSource+0x1c>
 8004bd0:	2302      	movs	r3, #2
 8004bd2:	e0b4      	b.n	8004d3e <HAL_TIM_ConfigClockSource+0x186>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2202      	movs	r2, #2
 8004be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004bf2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bfa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68ba      	ldr	r2, [r7, #8]
 8004c02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c0c:	d03e      	beq.n	8004c8c <HAL_TIM_ConfigClockSource+0xd4>
 8004c0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c12:	f200 8087 	bhi.w	8004d24 <HAL_TIM_ConfigClockSource+0x16c>
 8004c16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c1a:	f000 8086 	beq.w	8004d2a <HAL_TIM_ConfigClockSource+0x172>
 8004c1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c22:	d87f      	bhi.n	8004d24 <HAL_TIM_ConfigClockSource+0x16c>
 8004c24:	2b70      	cmp	r3, #112	; 0x70
 8004c26:	d01a      	beq.n	8004c5e <HAL_TIM_ConfigClockSource+0xa6>
 8004c28:	2b70      	cmp	r3, #112	; 0x70
 8004c2a:	d87b      	bhi.n	8004d24 <HAL_TIM_ConfigClockSource+0x16c>
 8004c2c:	2b60      	cmp	r3, #96	; 0x60
 8004c2e:	d050      	beq.n	8004cd2 <HAL_TIM_ConfigClockSource+0x11a>
 8004c30:	2b60      	cmp	r3, #96	; 0x60
 8004c32:	d877      	bhi.n	8004d24 <HAL_TIM_ConfigClockSource+0x16c>
 8004c34:	2b50      	cmp	r3, #80	; 0x50
 8004c36:	d03c      	beq.n	8004cb2 <HAL_TIM_ConfigClockSource+0xfa>
 8004c38:	2b50      	cmp	r3, #80	; 0x50
 8004c3a:	d873      	bhi.n	8004d24 <HAL_TIM_ConfigClockSource+0x16c>
 8004c3c:	2b40      	cmp	r3, #64	; 0x40
 8004c3e:	d058      	beq.n	8004cf2 <HAL_TIM_ConfigClockSource+0x13a>
 8004c40:	2b40      	cmp	r3, #64	; 0x40
 8004c42:	d86f      	bhi.n	8004d24 <HAL_TIM_ConfigClockSource+0x16c>
 8004c44:	2b30      	cmp	r3, #48	; 0x30
 8004c46:	d064      	beq.n	8004d12 <HAL_TIM_ConfigClockSource+0x15a>
 8004c48:	2b30      	cmp	r3, #48	; 0x30
 8004c4a:	d86b      	bhi.n	8004d24 <HAL_TIM_ConfigClockSource+0x16c>
 8004c4c:	2b20      	cmp	r3, #32
 8004c4e:	d060      	beq.n	8004d12 <HAL_TIM_ConfigClockSource+0x15a>
 8004c50:	2b20      	cmp	r3, #32
 8004c52:	d867      	bhi.n	8004d24 <HAL_TIM_ConfigClockSource+0x16c>
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d05c      	beq.n	8004d12 <HAL_TIM_ConfigClockSource+0x15a>
 8004c58:	2b10      	cmp	r3, #16
 8004c5a:	d05a      	beq.n	8004d12 <HAL_TIM_ConfigClockSource+0x15a>
 8004c5c:	e062      	b.n	8004d24 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6818      	ldr	r0, [r3, #0]
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	6899      	ldr	r1, [r3, #8]
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	685a      	ldr	r2, [r3, #4]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	f000 fb5d 	bl	800532c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68ba      	ldr	r2, [r7, #8]
 8004c88:	609a      	str	r2, [r3, #8]
      break;
 8004c8a:	e04f      	b.n	8004d2c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6818      	ldr	r0, [r3, #0]
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	6899      	ldr	r1, [r3, #8]
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	685a      	ldr	r2, [r3, #4]
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	f000 fb46 	bl	800532c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	689a      	ldr	r2, [r3, #8]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cae:	609a      	str	r2, [r3, #8]
      break;
 8004cb0:	e03c      	b.n	8004d2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6818      	ldr	r0, [r3, #0]
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	6859      	ldr	r1, [r3, #4]
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	f000 faba 	bl	8005238 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2150      	movs	r1, #80	; 0x50
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f000 fb13 	bl	80052f6 <TIM_ITRx_SetConfig>
      break;
 8004cd0:	e02c      	b.n	8004d2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6818      	ldr	r0, [r3, #0]
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	6859      	ldr	r1, [r3, #4]
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	461a      	mov	r2, r3
 8004ce0:	f000 fad9 	bl	8005296 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2160      	movs	r1, #96	; 0x60
 8004cea:	4618      	mov	r0, r3
 8004cec:	f000 fb03 	bl	80052f6 <TIM_ITRx_SetConfig>
      break;
 8004cf0:	e01c      	b.n	8004d2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6818      	ldr	r0, [r3, #0]
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	6859      	ldr	r1, [r3, #4]
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	461a      	mov	r2, r3
 8004d00:	f000 fa9a 	bl	8005238 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2140      	movs	r1, #64	; 0x40
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f000 faf3 	bl	80052f6 <TIM_ITRx_SetConfig>
      break;
 8004d10:	e00c      	b.n	8004d2c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	4610      	mov	r0, r2
 8004d1e:	f000 faea 	bl	80052f6 <TIM_ITRx_SetConfig>
      break;
 8004d22:	e003      	b.n	8004d2c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	73fb      	strb	r3, [r7, #15]
      break;
 8004d28:	e000      	b.n	8004d2c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3710      	adds	r7, #16
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d46:	b480      	push	{r7}
 8004d48:	b083      	sub	sp, #12
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d4e:	bf00      	nop
 8004d50:	370c      	adds	r7, #12
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr

08004d5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	b083      	sub	sp, #12
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d62:	bf00      	nop
 8004d64:	370c      	adds	r7, #12
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr

08004d6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b083      	sub	sp, #12
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d76:	bf00      	nop
 8004d78:	370c      	adds	r7, #12
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr

08004d82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d82:	b480      	push	{r7}
 8004d84:	b083      	sub	sp, #12
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d8a:	bf00      	nop
 8004d8c:	370c      	adds	r7, #12
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
	...

08004d98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	4a40      	ldr	r2, [pc, #256]	; (8004eac <TIM_Base_SetConfig+0x114>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d013      	beq.n	8004dd8 <TIM_Base_SetConfig+0x40>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004db6:	d00f      	beq.n	8004dd8 <TIM_Base_SetConfig+0x40>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a3d      	ldr	r2, [pc, #244]	; (8004eb0 <TIM_Base_SetConfig+0x118>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d00b      	beq.n	8004dd8 <TIM_Base_SetConfig+0x40>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a3c      	ldr	r2, [pc, #240]	; (8004eb4 <TIM_Base_SetConfig+0x11c>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d007      	beq.n	8004dd8 <TIM_Base_SetConfig+0x40>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a3b      	ldr	r2, [pc, #236]	; (8004eb8 <TIM_Base_SetConfig+0x120>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d003      	beq.n	8004dd8 <TIM_Base_SetConfig+0x40>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a3a      	ldr	r2, [pc, #232]	; (8004ebc <TIM_Base_SetConfig+0x124>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d108      	bne.n	8004dea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a2f      	ldr	r2, [pc, #188]	; (8004eac <TIM_Base_SetConfig+0x114>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d02b      	beq.n	8004e4a <TIM_Base_SetConfig+0xb2>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004df8:	d027      	beq.n	8004e4a <TIM_Base_SetConfig+0xb2>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a2c      	ldr	r2, [pc, #176]	; (8004eb0 <TIM_Base_SetConfig+0x118>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d023      	beq.n	8004e4a <TIM_Base_SetConfig+0xb2>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a2b      	ldr	r2, [pc, #172]	; (8004eb4 <TIM_Base_SetConfig+0x11c>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d01f      	beq.n	8004e4a <TIM_Base_SetConfig+0xb2>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a2a      	ldr	r2, [pc, #168]	; (8004eb8 <TIM_Base_SetConfig+0x120>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d01b      	beq.n	8004e4a <TIM_Base_SetConfig+0xb2>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a29      	ldr	r2, [pc, #164]	; (8004ebc <TIM_Base_SetConfig+0x124>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d017      	beq.n	8004e4a <TIM_Base_SetConfig+0xb2>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a28      	ldr	r2, [pc, #160]	; (8004ec0 <TIM_Base_SetConfig+0x128>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d013      	beq.n	8004e4a <TIM_Base_SetConfig+0xb2>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a27      	ldr	r2, [pc, #156]	; (8004ec4 <TIM_Base_SetConfig+0x12c>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d00f      	beq.n	8004e4a <TIM_Base_SetConfig+0xb2>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a26      	ldr	r2, [pc, #152]	; (8004ec8 <TIM_Base_SetConfig+0x130>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d00b      	beq.n	8004e4a <TIM_Base_SetConfig+0xb2>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a25      	ldr	r2, [pc, #148]	; (8004ecc <TIM_Base_SetConfig+0x134>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d007      	beq.n	8004e4a <TIM_Base_SetConfig+0xb2>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a24      	ldr	r2, [pc, #144]	; (8004ed0 <TIM_Base_SetConfig+0x138>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d003      	beq.n	8004e4a <TIM_Base_SetConfig+0xb2>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a23      	ldr	r2, [pc, #140]	; (8004ed4 <TIM_Base_SetConfig+0x13c>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d108      	bne.n	8004e5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	689a      	ldr	r2, [r3, #8]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a0a      	ldr	r2, [pc, #40]	; (8004eac <TIM_Base_SetConfig+0x114>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d003      	beq.n	8004e90 <TIM_Base_SetConfig+0xf8>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a0c      	ldr	r2, [pc, #48]	; (8004ebc <TIM_Base_SetConfig+0x124>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d103      	bne.n	8004e98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	691a      	ldr	r2, [r3, #16]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	615a      	str	r2, [r3, #20]
}
 8004e9e:	bf00      	nop
 8004ea0:	3714      	adds	r7, #20
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	40010000 	.word	0x40010000
 8004eb0:	40000400 	.word	0x40000400
 8004eb4:	40000800 	.word	0x40000800
 8004eb8:	40000c00 	.word	0x40000c00
 8004ebc:	40010400 	.word	0x40010400
 8004ec0:	40014000 	.word	0x40014000
 8004ec4:	40014400 	.word	0x40014400
 8004ec8:	40014800 	.word	0x40014800
 8004ecc:	40001800 	.word	0x40001800
 8004ed0:	40001c00 	.word	0x40001c00
 8004ed4:	40002000 	.word	0x40002000

08004ed8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b087      	sub	sp, #28
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	f023 0201 	bic.w	r2, r3, #1
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f023 0303 	bic.w	r3, r3, #3
 8004f0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	f023 0302 	bic.w	r3, r3, #2
 8004f20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	697a      	ldr	r2, [r7, #20]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a20      	ldr	r2, [pc, #128]	; (8004fb0 <TIM_OC1_SetConfig+0xd8>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d003      	beq.n	8004f3c <TIM_OC1_SetConfig+0x64>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a1f      	ldr	r2, [pc, #124]	; (8004fb4 <TIM_OC1_SetConfig+0xdc>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d10c      	bne.n	8004f56 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	f023 0308 	bic.w	r3, r3, #8
 8004f42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	697a      	ldr	r2, [r7, #20]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	f023 0304 	bic.w	r3, r3, #4
 8004f54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a15      	ldr	r2, [pc, #84]	; (8004fb0 <TIM_OC1_SetConfig+0xd8>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d003      	beq.n	8004f66 <TIM_OC1_SetConfig+0x8e>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a14      	ldr	r2, [pc, #80]	; (8004fb4 <TIM_OC1_SetConfig+0xdc>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d111      	bne.n	8004f8a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	699b      	ldr	r3, [r3, #24]
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	685a      	ldr	r2, [r3, #4]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	697a      	ldr	r2, [r7, #20]
 8004fa2:	621a      	str	r2, [r3, #32]
}
 8004fa4:	bf00      	nop
 8004fa6:	371c      	adds	r7, #28
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr
 8004fb0:	40010000 	.word	0x40010000
 8004fb4:	40010400 	.word	0x40010400

08004fb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b087      	sub	sp, #28
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	f023 0210 	bic.w	r2, r3, #16
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	021b      	lsls	r3, r3, #8
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	f023 0320 	bic.w	r3, r3, #32
 8005002:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	011b      	lsls	r3, r3, #4
 800500a:	697a      	ldr	r2, [r7, #20]
 800500c:	4313      	orrs	r3, r2
 800500e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4a22      	ldr	r2, [pc, #136]	; (800509c <TIM_OC2_SetConfig+0xe4>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d003      	beq.n	8005020 <TIM_OC2_SetConfig+0x68>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4a21      	ldr	r2, [pc, #132]	; (80050a0 <TIM_OC2_SetConfig+0xe8>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d10d      	bne.n	800503c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005026:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	011b      	lsls	r3, r3, #4
 800502e:	697a      	ldr	r2, [r7, #20]
 8005030:	4313      	orrs	r3, r2
 8005032:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800503a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a17      	ldr	r2, [pc, #92]	; (800509c <TIM_OC2_SetConfig+0xe4>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d003      	beq.n	800504c <TIM_OC2_SetConfig+0x94>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a16      	ldr	r2, [pc, #88]	; (80050a0 <TIM_OC2_SetConfig+0xe8>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d113      	bne.n	8005074 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005052:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800505a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	695b      	ldr	r3, [r3, #20]
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	693a      	ldr	r2, [r7, #16]
 8005064:	4313      	orrs	r3, r2
 8005066:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	699b      	ldr	r3, [r3, #24]
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	693a      	ldr	r2, [r7, #16]
 8005070:	4313      	orrs	r3, r2
 8005072:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	693a      	ldr	r2, [r7, #16]
 8005078:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	685a      	ldr	r2, [r3, #4]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	697a      	ldr	r2, [r7, #20]
 800508c:	621a      	str	r2, [r3, #32]
}
 800508e:	bf00      	nop
 8005090:	371c      	adds	r7, #28
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	40010000 	.word	0x40010000
 80050a0:	40010400 	.word	0x40010400

080050a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b087      	sub	sp, #28
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a1b      	ldr	r3, [r3, #32]
 80050be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	69db      	ldr	r3, [r3, #28]
 80050ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f023 0303 	bic.w	r3, r3, #3
 80050da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	021b      	lsls	r3, r3, #8
 80050f4:	697a      	ldr	r2, [r7, #20]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a21      	ldr	r2, [pc, #132]	; (8005184 <TIM_OC3_SetConfig+0xe0>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d003      	beq.n	800510a <TIM_OC3_SetConfig+0x66>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a20      	ldr	r2, [pc, #128]	; (8005188 <TIM_OC3_SetConfig+0xe4>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d10d      	bne.n	8005126 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005110:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	021b      	lsls	r3, r3, #8
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	4313      	orrs	r3, r2
 800511c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005124:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a16      	ldr	r2, [pc, #88]	; (8005184 <TIM_OC3_SetConfig+0xe0>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d003      	beq.n	8005136 <TIM_OC3_SetConfig+0x92>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a15      	ldr	r2, [pc, #84]	; (8005188 <TIM_OC3_SetConfig+0xe4>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d113      	bne.n	800515e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800513c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005144:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	011b      	lsls	r3, r3, #4
 800514c:	693a      	ldr	r2, [r7, #16]
 800514e:	4313      	orrs	r3, r2
 8005150:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	011b      	lsls	r3, r3, #4
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	4313      	orrs	r3, r2
 800515c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	693a      	ldr	r2, [r7, #16]
 8005162:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	685a      	ldr	r2, [r3, #4]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	697a      	ldr	r2, [r7, #20]
 8005176:	621a      	str	r2, [r3, #32]
}
 8005178:	bf00      	nop
 800517a:	371c      	adds	r7, #28
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr
 8005184:	40010000 	.word	0x40010000
 8005188:	40010400 	.word	0x40010400

0800518c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800518c:	b480      	push	{r7}
 800518e:	b087      	sub	sp, #28
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a1b      	ldr	r3, [r3, #32]
 80051a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	69db      	ldr	r3, [r3, #28]
 80051b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	021b      	lsls	r3, r3, #8
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	031b      	lsls	r3, r3, #12
 80051de:	693a      	ldr	r2, [r7, #16]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a12      	ldr	r2, [pc, #72]	; (8005230 <TIM_OC4_SetConfig+0xa4>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d003      	beq.n	80051f4 <TIM_OC4_SetConfig+0x68>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a11      	ldr	r2, [pc, #68]	; (8005234 <TIM_OC4_SetConfig+0xa8>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d109      	bne.n	8005208 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	695b      	ldr	r3, [r3, #20]
 8005200:	019b      	lsls	r3, r3, #6
 8005202:	697a      	ldr	r2, [r7, #20]
 8005204:	4313      	orrs	r3, r2
 8005206:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	697a      	ldr	r2, [r7, #20]
 800520c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	685a      	ldr	r2, [r3, #4]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	621a      	str	r2, [r3, #32]
}
 8005222:	bf00      	nop
 8005224:	371c      	adds	r7, #28
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	40010000 	.word	0x40010000
 8005234:	40010400 	.word	0x40010400

08005238 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005238:	b480      	push	{r7}
 800523a:	b087      	sub	sp, #28
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6a1b      	ldr	r3, [r3, #32]
 8005248:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6a1b      	ldr	r3, [r3, #32]
 800524e:	f023 0201 	bic.w	r2, r3, #1
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	699b      	ldr	r3, [r3, #24]
 800525a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005262:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	011b      	lsls	r3, r3, #4
 8005268:	693a      	ldr	r2, [r7, #16]
 800526a:	4313      	orrs	r3, r2
 800526c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	f023 030a 	bic.w	r3, r3, #10
 8005274:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005276:	697a      	ldr	r2, [r7, #20]
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	4313      	orrs	r3, r2
 800527c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	693a      	ldr	r2, [r7, #16]
 8005282:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	697a      	ldr	r2, [r7, #20]
 8005288:	621a      	str	r2, [r3, #32]
}
 800528a:	bf00      	nop
 800528c:	371c      	adds	r7, #28
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr

08005296 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005296:	b480      	push	{r7}
 8005298:	b087      	sub	sp, #28
 800529a:	af00      	add	r7, sp, #0
 800529c:	60f8      	str	r0, [r7, #12]
 800529e:	60b9      	str	r1, [r7, #8]
 80052a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6a1b      	ldr	r3, [r3, #32]
 80052a6:	f023 0210 	bic.w	r2, r3, #16
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6a1b      	ldr	r3, [r3, #32]
 80052b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	031b      	lsls	r3, r3, #12
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	011b      	lsls	r3, r3, #4
 80052d8:	693a      	ldr	r2, [r7, #16]
 80052da:	4313      	orrs	r3, r2
 80052dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	697a      	ldr	r2, [r7, #20]
 80052e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	693a      	ldr	r2, [r7, #16]
 80052e8:	621a      	str	r2, [r3, #32]
}
 80052ea:	bf00      	nop
 80052ec:	371c      	adds	r7, #28
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr

080052f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052f6:	b480      	push	{r7}
 80052f8:	b085      	sub	sp, #20
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
 80052fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800530c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800530e:	683a      	ldr	r2, [r7, #0]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	4313      	orrs	r3, r2
 8005314:	f043 0307 	orr.w	r3, r3, #7
 8005318:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	609a      	str	r2, [r3, #8]
}
 8005320:	bf00      	nop
 8005322:	3714      	adds	r7, #20
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800532c:	b480      	push	{r7}
 800532e:	b087      	sub	sp, #28
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	607a      	str	r2, [r7, #4]
 8005338:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005346:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	021a      	lsls	r2, r3, #8
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	431a      	orrs	r2, r3
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	4313      	orrs	r3, r2
 8005354:	697a      	ldr	r2, [r7, #20]
 8005356:	4313      	orrs	r3, r2
 8005358:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	697a      	ldr	r2, [r7, #20]
 800535e:	609a      	str	r2, [r3, #8]
}
 8005360:	bf00      	nop
 8005362:	371c      	adds	r7, #28
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800536c:	b480      	push	{r7}
 800536e:	b087      	sub	sp, #28
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	f003 031f 	and.w	r3, r3, #31
 800537e:	2201      	movs	r2, #1
 8005380:	fa02 f303 	lsl.w	r3, r2, r3
 8005384:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6a1a      	ldr	r2, [r3, #32]
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	43db      	mvns	r3, r3
 800538e:	401a      	ands	r2, r3
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6a1a      	ldr	r2, [r3, #32]
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	f003 031f 	and.w	r3, r3, #31
 800539e:	6879      	ldr	r1, [r7, #4]
 80053a0:	fa01 f303 	lsl.w	r3, r1, r3
 80053a4:	431a      	orrs	r2, r3
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	621a      	str	r2, [r3, #32]
}
 80053aa:	bf00      	nop
 80053ac:	371c      	adds	r7, #28
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
	...

080053b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b085      	sub	sp, #20
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d101      	bne.n	80053d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053cc:	2302      	movs	r3, #2
 80053ce:	e05a      	b.n	8005486 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2202      	movs	r2, #2
 80053dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	4313      	orrs	r3, r2
 8005400:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a21      	ldr	r2, [pc, #132]	; (8005494 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d022      	beq.n	800545a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800541c:	d01d      	beq.n	800545a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a1d      	ldr	r2, [pc, #116]	; (8005498 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d018      	beq.n	800545a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a1b      	ldr	r2, [pc, #108]	; (800549c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d013      	beq.n	800545a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a1a      	ldr	r2, [pc, #104]	; (80054a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d00e      	beq.n	800545a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a18      	ldr	r2, [pc, #96]	; (80054a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d009      	beq.n	800545a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a17      	ldr	r2, [pc, #92]	; (80054a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d004      	beq.n	800545a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a15      	ldr	r2, [pc, #84]	; (80054ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d10c      	bne.n	8005474 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005460:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	68ba      	ldr	r2, [r7, #8]
 8005468:	4313      	orrs	r3, r2
 800546a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68ba      	ldr	r2, [r7, #8]
 8005472:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3714      	adds	r7, #20
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop
 8005494:	40010000 	.word	0x40010000
 8005498:	40000400 	.word	0x40000400
 800549c:	40000800 	.word	0x40000800
 80054a0:	40000c00 	.word	0x40000c00
 80054a4:	40010400 	.word	0x40010400
 80054a8:	40014000 	.word	0x40014000
 80054ac:	40001800 	.word	0x40001800

080054b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b085      	sub	sp, #20
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80054ba:	2300      	movs	r3, #0
 80054bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d101      	bne.n	80054cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80054c8:	2302      	movs	r3, #2
 80054ca:	e03d      	b.n	8005548 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	4313      	orrs	r3, r2
 80054e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4313      	orrs	r3, r2
 800550a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	4313      	orrs	r3, r2
 8005518:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	695b      	ldr	r3, [r3, #20]
 8005524:	4313      	orrs	r3, r2
 8005526:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	69db      	ldr	r3, [r3, #28]
 8005532:	4313      	orrs	r3, r2
 8005534:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005546:	2300      	movs	r3, #0
}
 8005548:	4618      	mov	r0, r3
 800554a:	3714      	adds	r7, #20
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800555c:	bf00      	nop
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005568:	b480      	push	{r7}
 800556a:	b083      	sub	sp, #12
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005570:	bf00      	nop
 8005572:	370c      	adds	r7, #12
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b082      	sub	sp, #8
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d101      	bne.n	800558e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e03f      	b.n	800560e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005594:	b2db      	uxtb	r3, r3
 8005596:	2b00      	cmp	r3, #0
 8005598:	d106      	bne.n	80055a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f7fd f874 	bl	8002690 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2224      	movs	r2, #36	; 0x24
 80055ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68da      	ldr	r2, [r3, #12]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f000 fddb 	bl	800617c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	691a      	ldr	r2, [r3, #16]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	695a      	ldr	r2, [r3, #20]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68da      	ldr	r2, [r3, #12]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2220      	movs	r2, #32
 8005600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2220      	movs	r2, #32
 8005608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3708      	adds	r7, #8
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}

08005616 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005616:	b580      	push	{r7, lr}
 8005618:	b08a      	sub	sp, #40	; 0x28
 800561a:	af02      	add	r7, sp, #8
 800561c:	60f8      	str	r0, [r7, #12]
 800561e:	60b9      	str	r1, [r7, #8]
 8005620:	603b      	str	r3, [r7, #0]
 8005622:	4613      	mov	r3, r2
 8005624:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005626:	2300      	movs	r3, #0
 8005628:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005630:	b2db      	uxtb	r3, r3
 8005632:	2b20      	cmp	r3, #32
 8005634:	d17c      	bne.n	8005730 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d002      	beq.n	8005642 <HAL_UART_Transmit+0x2c>
 800563c:	88fb      	ldrh	r3, [r7, #6]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d101      	bne.n	8005646 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e075      	b.n	8005732 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800564c:	2b01      	cmp	r3, #1
 800564e:	d101      	bne.n	8005654 <HAL_UART_Transmit+0x3e>
 8005650:	2302      	movs	r3, #2
 8005652:	e06e      	b.n	8005732 <HAL_UART_Transmit+0x11c>
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2200      	movs	r2, #0
 8005660:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2221      	movs	r2, #33	; 0x21
 8005666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800566a:	f7fd f8f1 	bl	8002850 <HAL_GetTick>
 800566e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	88fa      	ldrh	r2, [r7, #6]
 8005674:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	88fa      	ldrh	r2, [r7, #6]
 800567a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005684:	d108      	bne.n	8005698 <HAL_UART_Transmit+0x82>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d104      	bne.n	8005698 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800568e:	2300      	movs	r3, #0
 8005690:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	61bb      	str	r3, [r7, #24]
 8005696:	e003      	b.n	80056a0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800569c:	2300      	movs	r3, #0
 800569e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80056a8:	e02a      	b.n	8005700 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	9300      	str	r3, [sp, #0]
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	2200      	movs	r2, #0
 80056b2:	2180      	movs	r1, #128	; 0x80
 80056b4:	68f8      	ldr	r0, [r7, #12]
 80056b6:	f000 fb1f 	bl	8005cf8 <UART_WaitOnFlagUntilTimeout>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d001      	beq.n	80056c4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80056c0:	2303      	movs	r3, #3
 80056c2:	e036      	b.n	8005732 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d10b      	bne.n	80056e2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	881b      	ldrh	r3, [r3, #0]
 80056ce:	461a      	mov	r2, r3
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	3302      	adds	r3, #2
 80056de:	61bb      	str	r3, [r7, #24]
 80056e0:	e007      	b.n	80056f2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	781a      	ldrb	r2, [r3, #0]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	3301      	adds	r3, #1
 80056f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	3b01      	subs	r3, #1
 80056fa:	b29a      	uxth	r2, r3
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005704:	b29b      	uxth	r3, r3
 8005706:	2b00      	cmp	r3, #0
 8005708:	d1cf      	bne.n	80056aa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	9300      	str	r3, [sp, #0]
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	2200      	movs	r2, #0
 8005712:	2140      	movs	r1, #64	; 0x40
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f000 faef 	bl	8005cf8 <UART_WaitOnFlagUntilTimeout>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d001      	beq.n	8005724 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e006      	b.n	8005732 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2220      	movs	r2, #32
 8005728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800572c:	2300      	movs	r3, #0
 800572e:	e000      	b.n	8005732 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005730:	2302      	movs	r3, #2
  }
}
 8005732:	4618      	mov	r0, r3
 8005734:	3720      	adds	r7, #32
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}

0800573a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800573a:	b580      	push	{r7, lr}
 800573c:	b084      	sub	sp, #16
 800573e:	af00      	add	r7, sp, #0
 8005740:	60f8      	str	r0, [r7, #12]
 8005742:	60b9      	str	r1, [r7, #8]
 8005744:	4613      	mov	r3, r2
 8005746:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800574e:	b2db      	uxtb	r3, r3
 8005750:	2b20      	cmp	r3, #32
 8005752:	d11d      	bne.n	8005790 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d002      	beq.n	8005760 <HAL_UART_Receive_IT+0x26>
 800575a:	88fb      	ldrh	r3, [r7, #6]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d101      	bne.n	8005764 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	e016      	b.n	8005792 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800576a:	2b01      	cmp	r3, #1
 800576c:	d101      	bne.n	8005772 <HAL_UART_Receive_IT+0x38>
 800576e:	2302      	movs	r3, #2
 8005770:	e00f      	b.n	8005792 <HAL_UART_Receive_IT+0x58>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2201      	movs	r2, #1
 8005776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2200      	movs	r2, #0
 800577e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005780:	88fb      	ldrh	r3, [r7, #6]
 8005782:	461a      	mov	r2, r3
 8005784:	68b9      	ldr	r1, [r7, #8]
 8005786:	68f8      	ldr	r0, [r7, #12]
 8005788:	f000 fb24 	bl	8005dd4 <UART_Start_Receive_IT>
 800578c:	4603      	mov	r3, r0
 800578e:	e000      	b.n	8005792 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005790:	2302      	movs	r3, #2
  }
}
 8005792:	4618      	mov	r0, r3
 8005794:	3710      	adds	r7, #16
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
	...

0800579c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b0ba      	sub	sp, #232	; 0xe8
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	695b      	ldr	r3, [r3, #20]
 80057be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80057c2:	2300      	movs	r3, #0
 80057c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80057c8:	2300      	movs	r3, #0
 80057ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80057ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057d2:	f003 030f 	and.w	r3, r3, #15
 80057d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80057da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d10f      	bne.n	8005802 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80057e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057e6:	f003 0320 	and.w	r3, r3, #32
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d009      	beq.n	8005802 <HAL_UART_IRQHandler+0x66>
 80057ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057f2:	f003 0320 	and.w	r3, r3, #32
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d003      	beq.n	8005802 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 fc03 	bl	8006006 <UART_Receive_IT>
      return;
 8005800:	e256      	b.n	8005cb0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005802:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005806:	2b00      	cmp	r3, #0
 8005808:	f000 80de 	beq.w	80059c8 <HAL_UART_IRQHandler+0x22c>
 800580c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005810:	f003 0301 	and.w	r3, r3, #1
 8005814:	2b00      	cmp	r3, #0
 8005816:	d106      	bne.n	8005826 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800581c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005820:	2b00      	cmp	r3, #0
 8005822:	f000 80d1 	beq.w	80059c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800582a:	f003 0301 	and.w	r3, r3, #1
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00b      	beq.n	800584a <HAL_UART_IRQHandler+0xae>
 8005832:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800583a:	2b00      	cmp	r3, #0
 800583c:	d005      	beq.n	800584a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005842:	f043 0201 	orr.w	r2, r3, #1
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800584a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800584e:	f003 0304 	and.w	r3, r3, #4
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00b      	beq.n	800586e <HAL_UART_IRQHandler+0xd2>
 8005856:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800585a:	f003 0301 	and.w	r3, r3, #1
 800585e:	2b00      	cmp	r3, #0
 8005860:	d005      	beq.n	800586e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005866:	f043 0202 	orr.w	r2, r3, #2
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800586e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005872:	f003 0302 	and.w	r3, r3, #2
 8005876:	2b00      	cmp	r3, #0
 8005878:	d00b      	beq.n	8005892 <HAL_UART_IRQHandler+0xf6>
 800587a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800587e:	f003 0301 	and.w	r3, r3, #1
 8005882:	2b00      	cmp	r3, #0
 8005884:	d005      	beq.n	8005892 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588a:	f043 0204 	orr.w	r2, r3, #4
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005896:	f003 0308 	and.w	r3, r3, #8
 800589a:	2b00      	cmp	r3, #0
 800589c:	d011      	beq.n	80058c2 <HAL_UART_IRQHandler+0x126>
 800589e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058a2:	f003 0320 	and.w	r3, r3, #32
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d105      	bne.n	80058b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80058aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d005      	beq.n	80058c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ba:	f043 0208 	orr.w	r2, r3, #8
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	f000 81ed 	beq.w	8005ca6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058d0:	f003 0320 	and.w	r3, r3, #32
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d008      	beq.n	80058ea <HAL_UART_IRQHandler+0x14e>
 80058d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058dc:	f003 0320 	and.w	r3, r3, #32
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d002      	beq.n	80058ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f000 fb8e 	bl	8006006 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	695b      	ldr	r3, [r3, #20]
 80058f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f4:	2b40      	cmp	r3, #64	; 0x40
 80058f6:	bf0c      	ite	eq
 80058f8:	2301      	moveq	r3, #1
 80058fa:	2300      	movne	r3, #0
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005906:	f003 0308 	and.w	r3, r3, #8
 800590a:	2b00      	cmp	r3, #0
 800590c:	d103      	bne.n	8005916 <HAL_UART_IRQHandler+0x17a>
 800590e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005912:	2b00      	cmp	r3, #0
 8005914:	d04f      	beq.n	80059b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 fa96 	bl	8005e48 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	695b      	ldr	r3, [r3, #20]
 8005922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005926:	2b40      	cmp	r3, #64	; 0x40
 8005928:	d141      	bne.n	80059ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	3314      	adds	r3, #20
 8005930:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005934:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005938:	e853 3f00 	ldrex	r3, [r3]
 800593c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005940:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005944:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005948:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	3314      	adds	r3, #20
 8005952:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005956:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800595a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800595e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005962:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005966:	e841 2300 	strex	r3, r2, [r1]
 800596a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800596e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1d9      	bne.n	800592a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800597a:	2b00      	cmp	r3, #0
 800597c:	d013      	beq.n	80059a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005982:	4a7d      	ldr	r2, [pc, #500]	; (8005b78 <HAL_UART_IRQHandler+0x3dc>)
 8005984:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800598a:	4618      	mov	r0, r3
 800598c:	f7fd fce1 	bl	8003352 <HAL_DMA_Abort_IT>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d016      	beq.n	80059c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80059a0:	4610      	mov	r0, r2
 80059a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059a4:	e00e      	b.n	80059c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f000 f990 	bl	8005ccc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059ac:	e00a      	b.n	80059c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 f98c 	bl	8005ccc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059b4:	e006      	b.n	80059c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 f988 	bl	8005ccc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80059c2:	e170      	b.n	8005ca6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059c4:	bf00      	nop
    return;
 80059c6:	e16e      	b.n	8005ca6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	f040 814a 	bne.w	8005c66 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80059d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059d6:	f003 0310 	and.w	r3, r3, #16
 80059da:	2b00      	cmp	r3, #0
 80059dc:	f000 8143 	beq.w	8005c66 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80059e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059e4:	f003 0310 	and.w	r3, r3, #16
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	f000 813c 	beq.w	8005c66 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80059ee:	2300      	movs	r3, #0
 80059f0:	60bb      	str	r3, [r7, #8]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	60bb      	str	r3, [r7, #8]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	60bb      	str	r3, [r7, #8]
 8005a02:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a0e:	2b40      	cmp	r3, #64	; 0x40
 8005a10:	f040 80b4 	bne.w	8005b7c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005a20:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	f000 8140 	beq.w	8005caa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005a2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005a32:	429a      	cmp	r2, r3
 8005a34:	f080 8139 	bcs.w	8005caa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005a3e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a44:	69db      	ldr	r3, [r3, #28]
 8005a46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a4a:	f000 8088 	beq.w	8005b5e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	330c      	adds	r3, #12
 8005a54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005a5c:	e853 3f00 	ldrex	r3, [r3]
 8005a60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005a64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	330c      	adds	r3, #12
 8005a76:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005a7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005a7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a82:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005a86:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005a8a:	e841 2300 	strex	r3, r2, [r1]
 8005a8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005a92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d1d9      	bne.n	8005a4e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	3314      	adds	r3, #20
 8005aa0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005aa4:	e853 3f00 	ldrex	r3, [r3]
 8005aa8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005aaa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005aac:	f023 0301 	bic.w	r3, r3, #1
 8005ab0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	3314      	adds	r3, #20
 8005aba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005abe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005ac2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005ac6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005aca:	e841 2300 	strex	r3, r2, [r1]
 8005ace:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005ad0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d1e1      	bne.n	8005a9a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	3314      	adds	r3, #20
 8005adc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ade:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ae0:	e853 3f00 	ldrex	r3, [r3]
 8005ae4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005ae6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ae8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	3314      	adds	r3, #20
 8005af6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005afa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005afc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005afe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005b00:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005b02:	e841 2300 	strex	r3, r2, [r1]
 8005b06:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005b08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d1e3      	bne.n	8005ad6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2220      	movs	r2, #32
 8005b12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	330c      	adds	r3, #12
 8005b22:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b26:	e853 3f00 	ldrex	r3, [r3]
 8005b2a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005b2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b2e:	f023 0310 	bic.w	r3, r3, #16
 8005b32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	330c      	adds	r3, #12
 8005b3c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005b40:	65ba      	str	r2, [r7, #88]	; 0x58
 8005b42:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b44:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005b46:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b48:	e841 2300 	strex	r3, r2, [r1]
 8005b4c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005b4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d1e3      	bne.n	8005b1c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f7fd fb8a 	bl	8003272 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 f8b6 	bl	8005ce0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b74:	e099      	b.n	8005caa <HAL_UART_IRQHandler+0x50e>
 8005b76:	bf00      	nop
 8005b78:	08005f0f 	.word	0x08005f0f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	1ad3      	subs	r3, r2, r3
 8005b88:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	f000 808b 	beq.w	8005cae <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005b98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	f000 8086 	beq.w	8005cae <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	330c      	adds	r3, #12
 8005ba8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bac:	e853 3f00 	ldrex	r3, [r3]
 8005bb0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005bb8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	330c      	adds	r3, #12
 8005bc2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005bc6:	647a      	str	r2, [r7, #68]	; 0x44
 8005bc8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005bcc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005bce:	e841 2300 	strex	r3, r2, [r1]
 8005bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005bd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d1e3      	bne.n	8005ba2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	3314      	adds	r3, #20
 8005be0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be4:	e853 3f00 	ldrex	r3, [r3]
 8005be8:	623b      	str	r3, [r7, #32]
   return(result);
 8005bea:	6a3b      	ldr	r3, [r7, #32]
 8005bec:	f023 0301 	bic.w	r3, r3, #1
 8005bf0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	3314      	adds	r3, #20
 8005bfa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005bfe:	633a      	str	r2, [r7, #48]	; 0x30
 8005c00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c06:	e841 2300 	strex	r3, r2, [r1]
 8005c0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1e3      	bne.n	8005bda <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2220      	movs	r2, #32
 8005c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	330c      	adds	r3, #12
 8005c26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	e853 3f00 	ldrex	r3, [r3]
 8005c2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f023 0310 	bic.w	r3, r3, #16
 8005c36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	330c      	adds	r3, #12
 8005c40:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005c44:	61fa      	str	r2, [r7, #28]
 8005c46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c48:	69b9      	ldr	r1, [r7, #24]
 8005c4a:	69fa      	ldr	r2, [r7, #28]
 8005c4c:	e841 2300 	strex	r3, r2, [r1]
 8005c50:	617b      	str	r3, [r7, #20]
   return(result);
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1e3      	bne.n	8005c20 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 f83e 	bl	8005ce0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c64:	e023      	b.n	8005cae <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d009      	beq.n	8005c86 <HAL_UART_IRQHandler+0x4ea>
 8005c72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d003      	beq.n	8005c86 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 f959 	bl	8005f36 <UART_Transmit_IT>
    return;
 8005c84:	e014      	b.n	8005cb0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00e      	beq.n	8005cb0 <HAL_UART_IRQHandler+0x514>
 8005c92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d008      	beq.n	8005cb0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 f999 	bl	8005fd6 <UART_EndTransmit_IT>
    return;
 8005ca4:	e004      	b.n	8005cb0 <HAL_UART_IRQHandler+0x514>
    return;
 8005ca6:	bf00      	nop
 8005ca8:	e002      	b.n	8005cb0 <HAL_UART_IRQHandler+0x514>
      return;
 8005caa:	bf00      	nop
 8005cac:	e000      	b.n	8005cb0 <HAL_UART_IRQHandler+0x514>
      return;
 8005cae:	bf00      	nop
  }
}
 8005cb0:	37e8      	adds	r7, #232	; 0xe8
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop

08005cb8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005cc0:	bf00      	nop
 8005cc2:	370c      	adds	r7, #12
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005cd4:	bf00      	nop
 8005cd6:	370c      	adds	r7, #12
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	460b      	mov	r3, r1
 8005cea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005cec:	bf00      	nop
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b090      	sub	sp, #64	; 0x40
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	603b      	str	r3, [r7, #0]
 8005d04:	4613      	mov	r3, r2
 8005d06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d08:	e050      	b.n	8005dac <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d10:	d04c      	beq.n	8005dac <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005d12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d007      	beq.n	8005d28 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d18:	f7fc fd9a 	bl	8002850 <HAL_GetTick>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	1ad3      	subs	r3, r2, r3
 8005d22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d241      	bcs.n	8005dac <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	330c      	adds	r3, #12
 8005d2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d32:	e853 3f00 	ldrex	r3, [r3]
 8005d36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	330c      	adds	r3, #12
 8005d46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d48:	637a      	str	r2, [r7, #52]	; 0x34
 8005d4a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d50:	e841 2300 	strex	r3, r2, [r1]
 8005d54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d1e5      	bne.n	8005d28 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	3314      	adds	r3, #20
 8005d62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	e853 3f00 	ldrex	r3, [r3]
 8005d6a:	613b      	str	r3, [r7, #16]
   return(result);
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	f023 0301 	bic.w	r3, r3, #1
 8005d72:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	3314      	adds	r3, #20
 8005d7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d7c:	623a      	str	r2, [r7, #32]
 8005d7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d80:	69f9      	ldr	r1, [r7, #28]
 8005d82:	6a3a      	ldr	r2, [r7, #32]
 8005d84:	e841 2300 	strex	r3, r2, [r1]
 8005d88:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d1e5      	bne.n	8005d5c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2220      	movs	r2, #32
 8005d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2220      	movs	r2, #32
 8005d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005da8:	2303      	movs	r3, #3
 8005daa:	e00f      	b.n	8005dcc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	4013      	ands	r3, r2
 8005db6:	68ba      	ldr	r2, [r7, #8]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	bf0c      	ite	eq
 8005dbc:	2301      	moveq	r3, #1
 8005dbe:	2300      	movne	r3, #0
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	79fb      	ldrb	r3, [r7, #7]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d09f      	beq.n	8005d0a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3740      	adds	r7, #64	; 0x40
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b085      	sub	sp, #20
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	4613      	mov	r3, r2
 8005de0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	68ba      	ldr	r2, [r7, #8]
 8005de6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	88fa      	ldrh	r2, [r7, #6]
 8005dec:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	88fa      	ldrh	r2, [r7, #6]
 8005df2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2200      	movs	r2, #0
 8005df8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2222      	movs	r2, #34	; 0x22
 8005dfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68da      	ldr	r2, [r3, #12]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e18:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	695a      	ldr	r2, [r3, #20]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f042 0201 	orr.w	r2, r2, #1
 8005e28:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	68da      	ldr	r2, [r3, #12]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f042 0220 	orr.w	r2, r2, #32
 8005e38:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005e3a:	2300      	movs	r3, #0
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3714      	adds	r7, #20
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b095      	sub	sp, #84	; 0x54
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	330c      	adds	r3, #12
 8005e56:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e5a:	e853 3f00 	ldrex	r3, [r3]
 8005e5e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e62:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	330c      	adds	r3, #12
 8005e6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e70:	643a      	str	r2, [r7, #64]	; 0x40
 8005e72:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005e76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e78:	e841 2300 	strex	r3, r2, [r1]
 8005e7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d1e5      	bne.n	8005e50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	3314      	adds	r3, #20
 8005e8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e8c:	6a3b      	ldr	r3, [r7, #32]
 8005e8e:	e853 3f00 	ldrex	r3, [r3]
 8005e92:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	f023 0301 	bic.w	r3, r3, #1
 8005e9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	3314      	adds	r3, #20
 8005ea2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ea4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ea6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005eaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005eac:	e841 2300 	strex	r3, r2, [r1]
 8005eb0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d1e5      	bne.n	8005e84 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d119      	bne.n	8005ef4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	330c      	adds	r3, #12
 8005ec6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	e853 3f00 	ldrex	r3, [r3]
 8005ece:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	f023 0310 	bic.w	r3, r3, #16
 8005ed6:	647b      	str	r3, [r7, #68]	; 0x44
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	330c      	adds	r3, #12
 8005ede:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ee0:	61ba      	str	r2, [r7, #24]
 8005ee2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee4:	6979      	ldr	r1, [r7, #20]
 8005ee6:	69ba      	ldr	r2, [r7, #24]
 8005ee8:	e841 2300 	strex	r3, r2, [r1]
 8005eec:	613b      	str	r3, [r7, #16]
   return(result);
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d1e5      	bne.n	8005ec0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2220      	movs	r2, #32
 8005ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005f02:	bf00      	nop
 8005f04:	3754      	adds	r7, #84	; 0x54
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr

08005f0e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f0e:	b580      	push	{r7, lr}
 8005f10:	b084      	sub	sp, #16
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f1a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f28:	68f8      	ldr	r0, [r7, #12]
 8005f2a:	f7ff fecf 	bl	8005ccc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f2e:	bf00      	nop
 8005f30:	3710      	adds	r7, #16
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}

08005f36 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005f36:	b480      	push	{r7}
 8005f38:	b085      	sub	sp, #20
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	2b21      	cmp	r3, #33	; 0x21
 8005f48:	d13e      	bne.n	8005fc8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f52:	d114      	bne.n	8005f7e <UART_Transmit_IT+0x48>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d110      	bne.n	8005f7e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6a1b      	ldr	r3, [r3, #32]
 8005f60:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	881b      	ldrh	r3, [r3, #0]
 8005f66:	461a      	mov	r2, r3
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f70:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a1b      	ldr	r3, [r3, #32]
 8005f76:	1c9a      	adds	r2, r3, #2
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	621a      	str	r2, [r3, #32]
 8005f7c:	e008      	b.n	8005f90 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a1b      	ldr	r3, [r3, #32]
 8005f82:	1c59      	adds	r1, r3, #1
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	6211      	str	r1, [r2, #32]
 8005f88:	781a      	ldrb	r2, [r3, #0]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	3b01      	subs	r3, #1
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d10f      	bne.n	8005fc4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	68da      	ldr	r2, [r3, #12]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005fb2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	68da      	ldr	r2, [r3, #12]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fc2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	e000      	b.n	8005fca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005fc8:	2302      	movs	r3, #2
  }
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3714      	adds	r7, #20
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr

08005fd6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005fd6:	b580      	push	{r7, lr}
 8005fd8:	b082      	sub	sp, #8
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	68da      	ldr	r2, [r3, #12]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2220      	movs	r2, #32
 8005ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f7ff fe5e 	bl	8005cb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3708      	adds	r7, #8
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}

08006006 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006006:	b580      	push	{r7, lr}
 8006008:	b08c      	sub	sp, #48	; 0x30
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006014:	b2db      	uxtb	r3, r3
 8006016:	2b22      	cmp	r3, #34	; 0x22
 8006018:	f040 80ab 	bne.w	8006172 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006024:	d117      	bne.n	8006056 <UART_Receive_IT+0x50>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d113      	bne.n	8006056 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800602e:	2300      	movs	r3, #0
 8006030:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006036:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	b29b      	uxth	r3, r3
 8006040:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006044:	b29a      	uxth	r2, r3
 8006046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006048:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800604e:	1c9a      	adds	r2, r3, #2
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	629a      	str	r2, [r3, #40]	; 0x28
 8006054:	e026      	b.n	80060a4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800605a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800605c:	2300      	movs	r3, #0
 800605e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006068:	d007      	beq.n	800607a <UART_Receive_IT+0x74>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d10a      	bne.n	8006088 <UART_Receive_IT+0x82>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d106      	bne.n	8006088 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	b2da      	uxtb	r2, r3
 8006082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006084:	701a      	strb	r2, [r3, #0]
 8006086:	e008      	b.n	800609a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	b2db      	uxtb	r3, r3
 8006090:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006094:	b2da      	uxtb	r2, r3
 8006096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006098:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800609e:	1c5a      	adds	r2, r3, #1
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	3b01      	subs	r3, #1
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	4619      	mov	r1, r3
 80060b2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d15a      	bne.n	800616e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68da      	ldr	r2, [r3, #12]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f022 0220 	bic.w	r2, r2, #32
 80060c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	68da      	ldr	r2, [r3, #12]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80060d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	695a      	ldr	r2, [r3, #20]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f022 0201 	bic.w	r2, r2, #1
 80060e6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2220      	movs	r2, #32
 80060ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d135      	bne.n	8006164 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	330c      	adds	r3, #12
 8006104:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	e853 3f00 	ldrex	r3, [r3]
 800610c:	613b      	str	r3, [r7, #16]
   return(result);
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	f023 0310 	bic.w	r3, r3, #16
 8006114:	627b      	str	r3, [r7, #36]	; 0x24
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	330c      	adds	r3, #12
 800611c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800611e:	623a      	str	r2, [r7, #32]
 8006120:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006122:	69f9      	ldr	r1, [r7, #28]
 8006124:	6a3a      	ldr	r2, [r7, #32]
 8006126:	e841 2300 	strex	r3, r2, [r1]
 800612a:	61bb      	str	r3, [r7, #24]
   return(result);
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d1e5      	bne.n	80060fe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f003 0310 	and.w	r3, r3, #16
 800613c:	2b10      	cmp	r3, #16
 800613e:	d10a      	bne.n	8006156 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006140:	2300      	movs	r3, #0
 8006142:	60fb      	str	r3, [r7, #12]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	60fb      	str	r3, [r7, #12]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	60fb      	str	r3, [r7, #12]
 8006154:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800615a:	4619      	mov	r1, r3
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f7ff fdbf 	bl	8005ce0 <HAL_UARTEx_RxEventCallback>
 8006162:	e002      	b.n	800616a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f7fb fe29 	bl	8001dbc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800616a:	2300      	movs	r3, #0
 800616c:	e002      	b.n	8006174 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800616e:	2300      	movs	r3, #0
 8006170:	e000      	b.n	8006174 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006172:	2302      	movs	r3, #2
  }
}
 8006174:	4618      	mov	r0, r3
 8006176:	3730      	adds	r7, #48	; 0x30
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800617c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006180:	b09f      	sub	sp, #124	; 0x7c
 8006182:	af00      	add	r7, sp, #0
 8006184:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006186:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006190:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006192:	68d9      	ldr	r1, [r3, #12]
 8006194:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	ea40 0301 	orr.w	r3, r0, r1
 800619c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800619e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061a0:	689a      	ldr	r2, [r3, #8]
 80061a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	431a      	orrs	r2, r3
 80061a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061aa:	695b      	ldr	r3, [r3, #20]
 80061ac:	431a      	orrs	r2, r3
 80061ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061b0:	69db      	ldr	r3, [r3, #28]
 80061b2:	4313      	orrs	r3, r2
 80061b4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80061b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80061c0:	f021 010c 	bic.w	r1, r1, #12
 80061c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061ca:	430b      	orrs	r3, r1
 80061cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80061ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	695b      	ldr	r3, [r3, #20]
 80061d4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80061d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061da:	6999      	ldr	r1, [r3, #24]
 80061dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	ea40 0301 	orr.w	r3, r0, r1
 80061e4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80061e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	4bc5      	ldr	r3, [pc, #788]	; (8006500 <UART_SetConfig+0x384>)
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d004      	beq.n	80061fa <UART_SetConfig+0x7e>
 80061f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	4bc3      	ldr	r3, [pc, #780]	; (8006504 <UART_SetConfig+0x388>)
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d103      	bne.n	8006202 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80061fa:	f7fd fb99 	bl	8003930 <HAL_RCC_GetPCLK2Freq>
 80061fe:	6778      	str	r0, [r7, #116]	; 0x74
 8006200:	e002      	b.n	8006208 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006202:	f7fd fb81 	bl	8003908 <HAL_RCC_GetPCLK1Freq>
 8006206:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006208:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800620a:	69db      	ldr	r3, [r3, #28]
 800620c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006210:	f040 80b6 	bne.w	8006380 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006214:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006216:	461c      	mov	r4, r3
 8006218:	f04f 0500 	mov.w	r5, #0
 800621c:	4622      	mov	r2, r4
 800621e:	462b      	mov	r3, r5
 8006220:	1891      	adds	r1, r2, r2
 8006222:	6439      	str	r1, [r7, #64]	; 0x40
 8006224:	415b      	adcs	r3, r3
 8006226:	647b      	str	r3, [r7, #68]	; 0x44
 8006228:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800622c:	1912      	adds	r2, r2, r4
 800622e:	eb45 0303 	adc.w	r3, r5, r3
 8006232:	f04f 0000 	mov.w	r0, #0
 8006236:	f04f 0100 	mov.w	r1, #0
 800623a:	00d9      	lsls	r1, r3, #3
 800623c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006240:	00d0      	lsls	r0, r2, #3
 8006242:	4602      	mov	r2, r0
 8006244:	460b      	mov	r3, r1
 8006246:	1911      	adds	r1, r2, r4
 8006248:	6639      	str	r1, [r7, #96]	; 0x60
 800624a:	416b      	adcs	r3, r5
 800624c:	667b      	str	r3, [r7, #100]	; 0x64
 800624e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	461a      	mov	r2, r3
 8006254:	f04f 0300 	mov.w	r3, #0
 8006258:	1891      	adds	r1, r2, r2
 800625a:	63b9      	str	r1, [r7, #56]	; 0x38
 800625c:	415b      	adcs	r3, r3
 800625e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006260:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006264:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006268:	f7fa fd1e 	bl	8000ca8 <__aeabi_uldivmod>
 800626c:	4602      	mov	r2, r0
 800626e:	460b      	mov	r3, r1
 8006270:	4ba5      	ldr	r3, [pc, #660]	; (8006508 <UART_SetConfig+0x38c>)
 8006272:	fba3 2302 	umull	r2, r3, r3, r2
 8006276:	095b      	lsrs	r3, r3, #5
 8006278:	011e      	lsls	r6, r3, #4
 800627a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800627c:	461c      	mov	r4, r3
 800627e:	f04f 0500 	mov.w	r5, #0
 8006282:	4622      	mov	r2, r4
 8006284:	462b      	mov	r3, r5
 8006286:	1891      	adds	r1, r2, r2
 8006288:	6339      	str	r1, [r7, #48]	; 0x30
 800628a:	415b      	adcs	r3, r3
 800628c:	637b      	str	r3, [r7, #52]	; 0x34
 800628e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006292:	1912      	adds	r2, r2, r4
 8006294:	eb45 0303 	adc.w	r3, r5, r3
 8006298:	f04f 0000 	mov.w	r0, #0
 800629c:	f04f 0100 	mov.w	r1, #0
 80062a0:	00d9      	lsls	r1, r3, #3
 80062a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80062a6:	00d0      	lsls	r0, r2, #3
 80062a8:	4602      	mov	r2, r0
 80062aa:	460b      	mov	r3, r1
 80062ac:	1911      	adds	r1, r2, r4
 80062ae:	65b9      	str	r1, [r7, #88]	; 0x58
 80062b0:	416b      	adcs	r3, r5
 80062b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	461a      	mov	r2, r3
 80062ba:	f04f 0300 	mov.w	r3, #0
 80062be:	1891      	adds	r1, r2, r2
 80062c0:	62b9      	str	r1, [r7, #40]	; 0x28
 80062c2:	415b      	adcs	r3, r3
 80062c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80062ca:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80062ce:	f7fa fceb 	bl	8000ca8 <__aeabi_uldivmod>
 80062d2:	4602      	mov	r2, r0
 80062d4:	460b      	mov	r3, r1
 80062d6:	4b8c      	ldr	r3, [pc, #560]	; (8006508 <UART_SetConfig+0x38c>)
 80062d8:	fba3 1302 	umull	r1, r3, r3, r2
 80062dc:	095b      	lsrs	r3, r3, #5
 80062de:	2164      	movs	r1, #100	; 0x64
 80062e0:	fb01 f303 	mul.w	r3, r1, r3
 80062e4:	1ad3      	subs	r3, r2, r3
 80062e6:	00db      	lsls	r3, r3, #3
 80062e8:	3332      	adds	r3, #50	; 0x32
 80062ea:	4a87      	ldr	r2, [pc, #540]	; (8006508 <UART_SetConfig+0x38c>)
 80062ec:	fba2 2303 	umull	r2, r3, r2, r3
 80062f0:	095b      	lsrs	r3, r3, #5
 80062f2:	005b      	lsls	r3, r3, #1
 80062f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80062f8:	441e      	add	r6, r3
 80062fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062fc:	4618      	mov	r0, r3
 80062fe:	f04f 0100 	mov.w	r1, #0
 8006302:	4602      	mov	r2, r0
 8006304:	460b      	mov	r3, r1
 8006306:	1894      	adds	r4, r2, r2
 8006308:	623c      	str	r4, [r7, #32]
 800630a:	415b      	adcs	r3, r3
 800630c:	627b      	str	r3, [r7, #36]	; 0x24
 800630e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006312:	1812      	adds	r2, r2, r0
 8006314:	eb41 0303 	adc.w	r3, r1, r3
 8006318:	f04f 0400 	mov.w	r4, #0
 800631c:	f04f 0500 	mov.w	r5, #0
 8006320:	00dd      	lsls	r5, r3, #3
 8006322:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006326:	00d4      	lsls	r4, r2, #3
 8006328:	4622      	mov	r2, r4
 800632a:	462b      	mov	r3, r5
 800632c:	1814      	adds	r4, r2, r0
 800632e:	653c      	str	r4, [r7, #80]	; 0x50
 8006330:	414b      	adcs	r3, r1
 8006332:	657b      	str	r3, [r7, #84]	; 0x54
 8006334:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	461a      	mov	r2, r3
 800633a:	f04f 0300 	mov.w	r3, #0
 800633e:	1891      	adds	r1, r2, r2
 8006340:	61b9      	str	r1, [r7, #24]
 8006342:	415b      	adcs	r3, r3
 8006344:	61fb      	str	r3, [r7, #28]
 8006346:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800634a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800634e:	f7fa fcab 	bl	8000ca8 <__aeabi_uldivmod>
 8006352:	4602      	mov	r2, r0
 8006354:	460b      	mov	r3, r1
 8006356:	4b6c      	ldr	r3, [pc, #432]	; (8006508 <UART_SetConfig+0x38c>)
 8006358:	fba3 1302 	umull	r1, r3, r3, r2
 800635c:	095b      	lsrs	r3, r3, #5
 800635e:	2164      	movs	r1, #100	; 0x64
 8006360:	fb01 f303 	mul.w	r3, r1, r3
 8006364:	1ad3      	subs	r3, r2, r3
 8006366:	00db      	lsls	r3, r3, #3
 8006368:	3332      	adds	r3, #50	; 0x32
 800636a:	4a67      	ldr	r2, [pc, #412]	; (8006508 <UART_SetConfig+0x38c>)
 800636c:	fba2 2303 	umull	r2, r3, r2, r3
 8006370:	095b      	lsrs	r3, r3, #5
 8006372:	f003 0207 	and.w	r2, r3, #7
 8006376:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4432      	add	r2, r6
 800637c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800637e:	e0b9      	b.n	80064f4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006380:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006382:	461c      	mov	r4, r3
 8006384:	f04f 0500 	mov.w	r5, #0
 8006388:	4622      	mov	r2, r4
 800638a:	462b      	mov	r3, r5
 800638c:	1891      	adds	r1, r2, r2
 800638e:	6139      	str	r1, [r7, #16]
 8006390:	415b      	adcs	r3, r3
 8006392:	617b      	str	r3, [r7, #20]
 8006394:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006398:	1912      	adds	r2, r2, r4
 800639a:	eb45 0303 	adc.w	r3, r5, r3
 800639e:	f04f 0000 	mov.w	r0, #0
 80063a2:	f04f 0100 	mov.w	r1, #0
 80063a6:	00d9      	lsls	r1, r3, #3
 80063a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80063ac:	00d0      	lsls	r0, r2, #3
 80063ae:	4602      	mov	r2, r0
 80063b0:	460b      	mov	r3, r1
 80063b2:	eb12 0804 	adds.w	r8, r2, r4
 80063b6:	eb43 0905 	adc.w	r9, r3, r5
 80063ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	4618      	mov	r0, r3
 80063c0:	f04f 0100 	mov.w	r1, #0
 80063c4:	f04f 0200 	mov.w	r2, #0
 80063c8:	f04f 0300 	mov.w	r3, #0
 80063cc:	008b      	lsls	r3, r1, #2
 80063ce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80063d2:	0082      	lsls	r2, r0, #2
 80063d4:	4640      	mov	r0, r8
 80063d6:	4649      	mov	r1, r9
 80063d8:	f7fa fc66 	bl	8000ca8 <__aeabi_uldivmod>
 80063dc:	4602      	mov	r2, r0
 80063de:	460b      	mov	r3, r1
 80063e0:	4b49      	ldr	r3, [pc, #292]	; (8006508 <UART_SetConfig+0x38c>)
 80063e2:	fba3 2302 	umull	r2, r3, r3, r2
 80063e6:	095b      	lsrs	r3, r3, #5
 80063e8:	011e      	lsls	r6, r3, #4
 80063ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063ec:	4618      	mov	r0, r3
 80063ee:	f04f 0100 	mov.w	r1, #0
 80063f2:	4602      	mov	r2, r0
 80063f4:	460b      	mov	r3, r1
 80063f6:	1894      	adds	r4, r2, r2
 80063f8:	60bc      	str	r4, [r7, #8]
 80063fa:	415b      	adcs	r3, r3
 80063fc:	60fb      	str	r3, [r7, #12]
 80063fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006402:	1812      	adds	r2, r2, r0
 8006404:	eb41 0303 	adc.w	r3, r1, r3
 8006408:	f04f 0400 	mov.w	r4, #0
 800640c:	f04f 0500 	mov.w	r5, #0
 8006410:	00dd      	lsls	r5, r3, #3
 8006412:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006416:	00d4      	lsls	r4, r2, #3
 8006418:	4622      	mov	r2, r4
 800641a:	462b      	mov	r3, r5
 800641c:	1814      	adds	r4, r2, r0
 800641e:	64bc      	str	r4, [r7, #72]	; 0x48
 8006420:	414b      	adcs	r3, r1
 8006422:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006424:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	4618      	mov	r0, r3
 800642a:	f04f 0100 	mov.w	r1, #0
 800642e:	f04f 0200 	mov.w	r2, #0
 8006432:	f04f 0300 	mov.w	r3, #0
 8006436:	008b      	lsls	r3, r1, #2
 8006438:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800643c:	0082      	lsls	r2, r0, #2
 800643e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006442:	f7fa fc31 	bl	8000ca8 <__aeabi_uldivmod>
 8006446:	4602      	mov	r2, r0
 8006448:	460b      	mov	r3, r1
 800644a:	4b2f      	ldr	r3, [pc, #188]	; (8006508 <UART_SetConfig+0x38c>)
 800644c:	fba3 1302 	umull	r1, r3, r3, r2
 8006450:	095b      	lsrs	r3, r3, #5
 8006452:	2164      	movs	r1, #100	; 0x64
 8006454:	fb01 f303 	mul.w	r3, r1, r3
 8006458:	1ad3      	subs	r3, r2, r3
 800645a:	011b      	lsls	r3, r3, #4
 800645c:	3332      	adds	r3, #50	; 0x32
 800645e:	4a2a      	ldr	r2, [pc, #168]	; (8006508 <UART_SetConfig+0x38c>)
 8006460:	fba2 2303 	umull	r2, r3, r2, r3
 8006464:	095b      	lsrs	r3, r3, #5
 8006466:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800646a:	441e      	add	r6, r3
 800646c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800646e:	4618      	mov	r0, r3
 8006470:	f04f 0100 	mov.w	r1, #0
 8006474:	4602      	mov	r2, r0
 8006476:	460b      	mov	r3, r1
 8006478:	1894      	adds	r4, r2, r2
 800647a:	603c      	str	r4, [r7, #0]
 800647c:	415b      	adcs	r3, r3
 800647e:	607b      	str	r3, [r7, #4]
 8006480:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006484:	1812      	adds	r2, r2, r0
 8006486:	eb41 0303 	adc.w	r3, r1, r3
 800648a:	f04f 0400 	mov.w	r4, #0
 800648e:	f04f 0500 	mov.w	r5, #0
 8006492:	00dd      	lsls	r5, r3, #3
 8006494:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006498:	00d4      	lsls	r4, r2, #3
 800649a:	4622      	mov	r2, r4
 800649c:	462b      	mov	r3, r5
 800649e:	eb12 0a00 	adds.w	sl, r2, r0
 80064a2:	eb43 0b01 	adc.w	fp, r3, r1
 80064a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	4618      	mov	r0, r3
 80064ac:	f04f 0100 	mov.w	r1, #0
 80064b0:	f04f 0200 	mov.w	r2, #0
 80064b4:	f04f 0300 	mov.w	r3, #0
 80064b8:	008b      	lsls	r3, r1, #2
 80064ba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80064be:	0082      	lsls	r2, r0, #2
 80064c0:	4650      	mov	r0, sl
 80064c2:	4659      	mov	r1, fp
 80064c4:	f7fa fbf0 	bl	8000ca8 <__aeabi_uldivmod>
 80064c8:	4602      	mov	r2, r0
 80064ca:	460b      	mov	r3, r1
 80064cc:	4b0e      	ldr	r3, [pc, #56]	; (8006508 <UART_SetConfig+0x38c>)
 80064ce:	fba3 1302 	umull	r1, r3, r3, r2
 80064d2:	095b      	lsrs	r3, r3, #5
 80064d4:	2164      	movs	r1, #100	; 0x64
 80064d6:	fb01 f303 	mul.w	r3, r1, r3
 80064da:	1ad3      	subs	r3, r2, r3
 80064dc:	011b      	lsls	r3, r3, #4
 80064de:	3332      	adds	r3, #50	; 0x32
 80064e0:	4a09      	ldr	r2, [pc, #36]	; (8006508 <UART_SetConfig+0x38c>)
 80064e2:	fba2 2303 	umull	r2, r3, r2, r3
 80064e6:	095b      	lsrs	r3, r3, #5
 80064e8:	f003 020f 	and.w	r2, r3, #15
 80064ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4432      	add	r2, r6
 80064f2:	609a      	str	r2, [r3, #8]
}
 80064f4:	bf00      	nop
 80064f6:	377c      	adds	r7, #124	; 0x7c
 80064f8:	46bd      	mov	sp, r7
 80064fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064fe:	bf00      	nop
 8006500:	40011000 	.word	0x40011000
 8006504:	40011400 	.word	0x40011400
 8006508:	51eb851f 	.word	0x51eb851f

0800650c <__errno>:
 800650c:	4b01      	ldr	r3, [pc, #4]	; (8006514 <__errno+0x8>)
 800650e:	6818      	ldr	r0, [r3, #0]
 8006510:	4770      	bx	lr
 8006512:	bf00      	nop
 8006514:	2000002c 	.word	0x2000002c

08006518 <__libc_init_array>:
 8006518:	b570      	push	{r4, r5, r6, lr}
 800651a:	4d0d      	ldr	r5, [pc, #52]	; (8006550 <__libc_init_array+0x38>)
 800651c:	4c0d      	ldr	r4, [pc, #52]	; (8006554 <__libc_init_array+0x3c>)
 800651e:	1b64      	subs	r4, r4, r5
 8006520:	10a4      	asrs	r4, r4, #2
 8006522:	2600      	movs	r6, #0
 8006524:	42a6      	cmp	r6, r4
 8006526:	d109      	bne.n	800653c <__libc_init_array+0x24>
 8006528:	4d0b      	ldr	r5, [pc, #44]	; (8006558 <__libc_init_array+0x40>)
 800652a:	4c0c      	ldr	r4, [pc, #48]	; (800655c <__libc_init_array+0x44>)
 800652c:	f002 fd7e 	bl	800902c <_init>
 8006530:	1b64      	subs	r4, r4, r5
 8006532:	10a4      	asrs	r4, r4, #2
 8006534:	2600      	movs	r6, #0
 8006536:	42a6      	cmp	r6, r4
 8006538:	d105      	bne.n	8006546 <__libc_init_array+0x2e>
 800653a:	bd70      	pop	{r4, r5, r6, pc}
 800653c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006540:	4798      	blx	r3
 8006542:	3601      	adds	r6, #1
 8006544:	e7ee      	b.n	8006524 <__libc_init_array+0xc>
 8006546:	f855 3b04 	ldr.w	r3, [r5], #4
 800654a:	4798      	blx	r3
 800654c:	3601      	adds	r6, #1
 800654e:	e7f2      	b.n	8006536 <__libc_init_array+0x1e>
 8006550:	0800952c 	.word	0x0800952c
 8006554:	0800952c 	.word	0x0800952c
 8006558:	0800952c 	.word	0x0800952c
 800655c:	08009530 	.word	0x08009530

08006560 <memset>:
 8006560:	4402      	add	r2, r0
 8006562:	4603      	mov	r3, r0
 8006564:	4293      	cmp	r3, r2
 8006566:	d100      	bne.n	800656a <memset+0xa>
 8006568:	4770      	bx	lr
 800656a:	f803 1b01 	strb.w	r1, [r3], #1
 800656e:	e7f9      	b.n	8006564 <memset+0x4>

08006570 <__cvt>:
 8006570:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006574:	ec55 4b10 	vmov	r4, r5, d0
 8006578:	2d00      	cmp	r5, #0
 800657a:	460e      	mov	r6, r1
 800657c:	4619      	mov	r1, r3
 800657e:	462b      	mov	r3, r5
 8006580:	bfbb      	ittet	lt
 8006582:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006586:	461d      	movlt	r5, r3
 8006588:	2300      	movge	r3, #0
 800658a:	232d      	movlt	r3, #45	; 0x2d
 800658c:	700b      	strb	r3, [r1, #0]
 800658e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006590:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006594:	4691      	mov	r9, r2
 8006596:	f023 0820 	bic.w	r8, r3, #32
 800659a:	bfbc      	itt	lt
 800659c:	4622      	movlt	r2, r4
 800659e:	4614      	movlt	r4, r2
 80065a0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80065a4:	d005      	beq.n	80065b2 <__cvt+0x42>
 80065a6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80065aa:	d100      	bne.n	80065ae <__cvt+0x3e>
 80065ac:	3601      	adds	r6, #1
 80065ae:	2102      	movs	r1, #2
 80065b0:	e000      	b.n	80065b4 <__cvt+0x44>
 80065b2:	2103      	movs	r1, #3
 80065b4:	ab03      	add	r3, sp, #12
 80065b6:	9301      	str	r3, [sp, #4]
 80065b8:	ab02      	add	r3, sp, #8
 80065ba:	9300      	str	r3, [sp, #0]
 80065bc:	ec45 4b10 	vmov	d0, r4, r5
 80065c0:	4653      	mov	r3, sl
 80065c2:	4632      	mov	r2, r6
 80065c4:	f000 fe18 	bl	80071f8 <_dtoa_r>
 80065c8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80065cc:	4607      	mov	r7, r0
 80065ce:	d102      	bne.n	80065d6 <__cvt+0x66>
 80065d0:	f019 0f01 	tst.w	r9, #1
 80065d4:	d022      	beq.n	800661c <__cvt+0xac>
 80065d6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80065da:	eb07 0906 	add.w	r9, r7, r6
 80065de:	d110      	bne.n	8006602 <__cvt+0x92>
 80065e0:	783b      	ldrb	r3, [r7, #0]
 80065e2:	2b30      	cmp	r3, #48	; 0x30
 80065e4:	d10a      	bne.n	80065fc <__cvt+0x8c>
 80065e6:	2200      	movs	r2, #0
 80065e8:	2300      	movs	r3, #0
 80065ea:	4620      	mov	r0, r4
 80065ec:	4629      	mov	r1, r5
 80065ee:	f7fa fa9b 	bl	8000b28 <__aeabi_dcmpeq>
 80065f2:	b918      	cbnz	r0, 80065fc <__cvt+0x8c>
 80065f4:	f1c6 0601 	rsb	r6, r6, #1
 80065f8:	f8ca 6000 	str.w	r6, [sl]
 80065fc:	f8da 3000 	ldr.w	r3, [sl]
 8006600:	4499      	add	r9, r3
 8006602:	2200      	movs	r2, #0
 8006604:	2300      	movs	r3, #0
 8006606:	4620      	mov	r0, r4
 8006608:	4629      	mov	r1, r5
 800660a:	f7fa fa8d 	bl	8000b28 <__aeabi_dcmpeq>
 800660e:	b108      	cbz	r0, 8006614 <__cvt+0xa4>
 8006610:	f8cd 900c 	str.w	r9, [sp, #12]
 8006614:	2230      	movs	r2, #48	; 0x30
 8006616:	9b03      	ldr	r3, [sp, #12]
 8006618:	454b      	cmp	r3, r9
 800661a:	d307      	bcc.n	800662c <__cvt+0xbc>
 800661c:	9b03      	ldr	r3, [sp, #12]
 800661e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006620:	1bdb      	subs	r3, r3, r7
 8006622:	4638      	mov	r0, r7
 8006624:	6013      	str	r3, [r2, #0]
 8006626:	b004      	add	sp, #16
 8006628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800662c:	1c59      	adds	r1, r3, #1
 800662e:	9103      	str	r1, [sp, #12]
 8006630:	701a      	strb	r2, [r3, #0]
 8006632:	e7f0      	b.n	8006616 <__cvt+0xa6>

08006634 <__exponent>:
 8006634:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006636:	4603      	mov	r3, r0
 8006638:	2900      	cmp	r1, #0
 800663a:	bfb8      	it	lt
 800663c:	4249      	neglt	r1, r1
 800663e:	f803 2b02 	strb.w	r2, [r3], #2
 8006642:	bfb4      	ite	lt
 8006644:	222d      	movlt	r2, #45	; 0x2d
 8006646:	222b      	movge	r2, #43	; 0x2b
 8006648:	2909      	cmp	r1, #9
 800664a:	7042      	strb	r2, [r0, #1]
 800664c:	dd2a      	ble.n	80066a4 <__exponent+0x70>
 800664e:	f10d 0407 	add.w	r4, sp, #7
 8006652:	46a4      	mov	ip, r4
 8006654:	270a      	movs	r7, #10
 8006656:	46a6      	mov	lr, r4
 8006658:	460a      	mov	r2, r1
 800665a:	fb91 f6f7 	sdiv	r6, r1, r7
 800665e:	fb07 1516 	mls	r5, r7, r6, r1
 8006662:	3530      	adds	r5, #48	; 0x30
 8006664:	2a63      	cmp	r2, #99	; 0x63
 8006666:	f104 34ff 	add.w	r4, r4, #4294967295
 800666a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800666e:	4631      	mov	r1, r6
 8006670:	dcf1      	bgt.n	8006656 <__exponent+0x22>
 8006672:	3130      	adds	r1, #48	; 0x30
 8006674:	f1ae 0502 	sub.w	r5, lr, #2
 8006678:	f804 1c01 	strb.w	r1, [r4, #-1]
 800667c:	1c44      	adds	r4, r0, #1
 800667e:	4629      	mov	r1, r5
 8006680:	4561      	cmp	r1, ip
 8006682:	d30a      	bcc.n	800669a <__exponent+0x66>
 8006684:	f10d 0209 	add.w	r2, sp, #9
 8006688:	eba2 020e 	sub.w	r2, r2, lr
 800668c:	4565      	cmp	r5, ip
 800668e:	bf88      	it	hi
 8006690:	2200      	movhi	r2, #0
 8006692:	4413      	add	r3, r2
 8006694:	1a18      	subs	r0, r3, r0
 8006696:	b003      	add	sp, #12
 8006698:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800669a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800669e:	f804 2f01 	strb.w	r2, [r4, #1]!
 80066a2:	e7ed      	b.n	8006680 <__exponent+0x4c>
 80066a4:	2330      	movs	r3, #48	; 0x30
 80066a6:	3130      	adds	r1, #48	; 0x30
 80066a8:	7083      	strb	r3, [r0, #2]
 80066aa:	70c1      	strb	r1, [r0, #3]
 80066ac:	1d03      	adds	r3, r0, #4
 80066ae:	e7f1      	b.n	8006694 <__exponent+0x60>

080066b0 <_printf_float>:
 80066b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066b4:	ed2d 8b02 	vpush	{d8}
 80066b8:	b08d      	sub	sp, #52	; 0x34
 80066ba:	460c      	mov	r4, r1
 80066bc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80066c0:	4616      	mov	r6, r2
 80066c2:	461f      	mov	r7, r3
 80066c4:	4605      	mov	r5, r0
 80066c6:	f001 fd3b 	bl	8008140 <_localeconv_r>
 80066ca:	f8d0 a000 	ldr.w	sl, [r0]
 80066ce:	4650      	mov	r0, sl
 80066d0:	f7f9 fda8 	bl	8000224 <strlen>
 80066d4:	2300      	movs	r3, #0
 80066d6:	930a      	str	r3, [sp, #40]	; 0x28
 80066d8:	6823      	ldr	r3, [r4, #0]
 80066da:	9305      	str	r3, [sp, #20]
 80066dc:	f8d8 3000 	ldr.w	r3, [r8]
 80066e0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80066e4:	3307      	adds	r3, #7
 80066e6:	f023 0307 	bic.w	r3, r3, #7
 80066ea:	f103 0208 	add.w	r2, r3, #8
 80066ee:	f8c8 2000 	str.w	r2, [r8]
 80066f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80066fa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80066fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006702:	9307      	str	r3, [sp, #28]
 8006704:	f8cd 8018 	str.w	r8, [sp, #24]
 8006708:	ee08 0a10 	vmov	s16, r0
 800670c:	4b9f      	ldr	r3, [pc, #636]	; (800698c <_printf_float+0x2dc>)
 800670e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006712:	f04f 32ff 	mov.w	r2, #4294967295
 8006716:	f7fa fa39 	bl	8000b8c <__aeabi_dcmpun>
 800671a:	bb88      	cbnz	r0, 8006780 <_printf_float+0xd0>
 800671c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006720:	4b9a      	ldr	r3, [pc, #616]	; (800698c <_printf_float+0x2dc>)
 8006722:	f04f 32ff 	mov.w	r2, #4294967295
 8006726:	f7fa fa13 	bl	8000b50 <__aeabi_dcmple>
 800672a:	bb48      	cbnz	r0, 8006780 <_printf_float+0xd0>
 800672c:	2200      	movs	r2, #0
 800672e:	2300      	movs	r3, #0
 8006730:	4640      	mov	r0, r8
 8006732:	4649      	mov	r1, r9
 8006734:	f7fa fa02 	bl	8000b3c <__aeabi_dcmplt>
 8006738:	b110      	cbz	r0, 8006740 <_printf_float+0x90>
 800673a:	232d      	movs	r3, #45	; 0x2d
 800673c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006740:	4b93      	ldr	r3, [pc, #588]	; (8006990 <_printf_float+0x2e0>)
 8006742:	4894      	ldr	r0, [pc, #592]	; (8006994 <_printf_float+0x2e4>)
 8006744:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006748:	bf94      	ite	ls
 800674a:	4698      	movls	r8, r3
 800674c:	4680      	movhi	r8, r0
 800674e:	2303      	movs	r3, #3
 8006750:	6123      	str	r3, [r4, #16]
 8006752:	9b05      	ldr	r3, [sp, #20]
 8006754:	f023 0204 	bic.w	r2, r3, #4
 8006758:	6022      	str	r2, [r4, #0]
 800675a:	f04f 0900 	mov.w	r9, #0
 800675e:	9700      	str	r7, [sp, #0]
 8006760:	4633      	mov	r3, r6
 8006762:	aa0b      	add	r2, sp, #44	; 0x2c
 8006764:	4621      	mov	r1, r4
 8006766:	4628      	mov	r0, r5
 8006768:	f000 f9d8 	bl	8006b1c <_printf_common>
 800676c:	3001      	adds	r0, #1
 800676e:	f040 8090 	bne.w	8006892 <_printf_float+0x1e2>
 8006772:	f04f 30ff 	mov.w	r0, #4294967295
 8006776:	b00d      	add	sp, #52	; 0x34
 8006778:	ecbd 8b02 	vpop	{d8}
 800677c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006780:	4642      	mov	r2, r8
 8006782:	464b      	mov	r3, r9
 8006784:	4640      	mov	r0, r8
 8006786:	4649      	mov	r1, r9
 8006788:	f7fa fa00 	bl	8000b8c <__aeabi_dcmpun>
 800678c:	b140      	cbz	r0, 80067a0 <_printf_float+0xf0>
 800678e:	464b      	mov	r3, r9
 8006790:	2b00      	cmp	r3, #0
 8006792:	bfbc      	itt	lt
 8006794:	232d      	movlt	r3, #45	; 0x2d
 8006796:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800679a:	487f      	ldr	r0, [pc, #508]	; (8006998 <_printf_float+0x2e8>)
 800679c:	4b7f      	ldr	r3, [pc, #508]	; (800699c <_printf_float+0x2ec>)
 800679e:	e7d1      	b.n	8006744 <_printf_float+0x94>
 80067a0:	6863      	ldr	r3, [r4, #4]
 80067a2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80067a6:	9206      	str	r2, [sp, #24]
 80067a8:	1c5a      	adds	r2, r3, #1
 80067aa:	d13f      	bne.n	800682c <_printf_float+0x17c>
 80067ac:	2306      	movs	r3, #6
 80067ae:	6063      	str	r3, [r4, #4]
 80067b0:	9b05      	ldr	r3, [sp, #20]
 80067b2:	6861      	ldr	r1, [r4, #4]
 80067b4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80067b8:	2300      	movs	r3, #0
 80067ba:	9303      	str	r3, [sp, #12]
 80067bc:	ab0a      	add	r3, sp, #40	; 0x28
 80067be:	e9cd b301 	strd	fp, r3, [sp, #4]
 80067c2:	ab09      	add	r3, sp, #36	; 0x24
 80067c4:	ec49 8b10 	vmov	d0, r8, r9
 80067c8:	9300      	str	r3, [sp, #0]
 80067ca:	6022      	str	r2, [r4, #0]
 80067cc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80067d0:	4628      	mov	r0, r5
 80067d2:	f7ff fecd 	bl	8006570 <__cvt>
 80067d6:	9b06      	ldr	r3, [sp, #24]
 80067d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067da:	2b47      	cmp	r3, #71	; 0x47
 80067dc:	4680      	mov	r8, r0
 80067de:	d108      	bne.n	80067f2 <_printf_float+0x142>
 80067e0:	1cc8      	adds	r0, r1, #3
 80067e2:	db02      	blt.n	80067ea <_printf_float+0x13a>
 80067e4:	6863      	ldr	r3, [r4, #4]
 80067e6:	4299      	cmp	r1, r3
 80067e8:	dd41      	ble.n	800686e <_printf_float+0x1be>
 80067ea:	f1ab 0b02 	sub.w	fp, fp, #2
 80067ee:	fa5f fb8b 	uxtb.w	fp, fp
 80067f2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80067f6:	d820      	bhi.n	800683a <_printf_float+0x18a>
 80067f8:	3901      	subs	r1, #1
 80067fa:	465a      	mov	r2, fp
 80067fc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006800:	9109      	str	r1, [sp, #36]	; 0x24
 8006802:	f7ff ff17 	bl	8006634 <__exponent>
 8006806:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006808:	1813      	adds	r3, r2, r0
 800680a:	2a01      	cmp	r2, #1
 800680c:	4681      	mov	r9, r0
 800680e:	6123      	str	r3, [r4, #16]
 8006810:	dc02      	bgt.n	8006818 <_printf_float+0x168>
 8006812:	6822      	ldr	r2, [r4, #0]
 8006814:	07d2      	lsls	r2, r2, #31
 8006816:	d501      	bpl.n	800681c <_printf_float+0x16c>
 8006818:	3301      	adds	r3, #1
 800681a:	6123      	str	r3, [r4, #16]
 800681c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006820:	2b00      	cmp	r3, #0
 8006822:	d09c      	beq.n	800675e <_printf_float+0xae>
 8006824:	232d      	movs	r3, #45	; 0x2d
 8006826:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800682a:	e798      	b.n	800675e <_printf_float+0xae>
 800682c:	9a06      	ldr	r2, [sp, #24]
 800682e:	2a47      	cmp	r2, #71	; 0x47
 8006830:	d1be      	bne.n	80067b0 <_printf_float+0x100>
 8006832:	2b00      	cmp	r3, #0
 8006834:	d1bc      	bne.n	80067b0 <_printf_float+0x100>
 8006836:	2301      	movs	r3, #1
 8006838:	e7b9      	b.n	80067ae <_printf_float+0xfe>
 800683a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800683e:	d118      	bne.n	8006872 <_printf_float+0x1c2>
 8006840:	2900      	cmp	r1, #0
 8006842:	6863      	ldr	r3, [r4, #4]
 8006844:	dd0b      	ble.n	800685e <_printf_float+0x1ae>
 8006846:	6121      	str	r1, [r4, #16]
 8006848:	b913      	cbnz	r3, 8006850 <_printf_float+0x1a0>
 800684a:	6822      	ldr	r2, [r4, #0]
 800684c:	07d0      	lsls	r0, r2, #31
 800684e:	d502      	bpl.n	8006856 <_printf_float+0x1a6>
 8006850:	3301      	adds	r3, #1
 8006852:	440b      	add	r3, r1
 8006854:	6123      	str	r3, [r4, #16]
 8006856:	65a1      	str	r1, [r4, #88]	; 0x58
 8006858:	f04f 0900 	mov.w	r9, #0
 800685c:	e7de      	b.n	800681c <_printf_float+0x16c>
 800685e:	b913      	cbnz	r3, 8006866 <_printf_float+0x1b6>
 8006860:	6822      	ldr	r2, [r4, #0]
 8006862:	07d2      	lsls	r2, r2, #31
 8006864:	d501      	bpl.n	800686a <_printf_float+0x1ba>
 8006866:	3302      	adds	r3, #2
 8006868:	e7f4      	b.n	8006854 <_printf_float+0x1a4>
 800686a:	2301      	movs	r3, #1
 800686c:	e7f2      	b.n	8006854 <_printf_float+0x1a4>
 800686e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006872:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006874:	4299      	cmp	r1, r3
 8006876:	db05      	blt.n	8006884 <_printf_float+0x1d4>
 8006878:	6823      	ldr	r3, [r4, #0]
 800687a:	6121      	str	r1, [r4, #16]
 800687c:	07d8      	lsls	r0, r3, #31
 800687e:	d5ea      	bpl.n	8006856 <_printf_float+0x1a6>
 8006880:	1c4b      	adds	r3, r1, #1
 8006882:	e7e7      	b.n	8006854 <_printf_float+0x1a4>
 8006884:	2900      	cmp	r1, #0
 8006886:	bfd4      	ite	le
 8006888:	f1c1 0202 	rsble	r2, r1, #2
 800688c:	2201      	movgt	r2, #1
 800688e:	4413      	add	r3, r2
 8006890:	e7e0      	b.n	8006854 <_printf_float+0x1a4>
 8006892:	6823      	ldr	r3, [r4, #0]
 8006894:	055a      	lsls	r2, r3, #21
 8006896:	d407      	bmi.n	80068a8 <_printf_float+0x1f8>
 8006898:	6923      	ldr	r3, [r4, #16]
 800689a:	4642      	mov	r2, r8
 800689c:	4631      	mov	r1, r6
 800689e:	4628      	mov	r0, r5
 80068a0:	47b8      	blx	r7
 80068a2:	3001      	adds	r0, #1
 80068a4:	d12c      	bne.n	8006900 <_printf_float+0x250>
 80068a6:	e764      	b.n	8006772 <_printf_float+0xc2>
 80068a8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80068ac:	f240 80e0 	bls.w	8006a70 <_printf_float+0x3c0>
 80068b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80068b4:	2200      	movs	r2, #0
 80068b6:	2300      	movs	r3, #0
 80068b8:	f7fa f936 	bl	8000b28 <__aeabi_dcmpeq>
 80068bc:	2800      	cmp	r0, #0
 80068be:	d034      	beq.n	800692a <_printf_float+0x27a>
 80068c0:	4a37      	ldr	r2, [pc, #220]	; (80069a0 <_printf_float+0x2f0>)
 80068c2:	2301      	movs	r3, #1
 80068c4:	4631      	mov	r1, r6
 80068c6:	4628      	mov	r0, r5
 80068c8:	47b8      	blx	r7
 80068ca:	3001      	adds	r0, #1
 80068cc:	f43f af51 	beq.w	8006772 <_printf_float+0xc2>
 80068d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068d4:	429a      	cmp	r2, r3
 80068d6:	db02      	blt.n	80068de <_printf_float+0x22e>
 80068d8:	6823      	ldr	r3, [r4, #0]
 80068da:	07d8      	lsls	r0, r3, #31
 80068dc:	d510      	bpl.n	8006900 <_printf_float+0x250>
 80068de:	ee18 3a10 	vmov	r3, s16
 80068e2:	4652      	mov	r2, sl
 80068e4:	4631      	mov	r1, r6
 80068e6:	4628      	mov	r0, r5
 80068e8:	47b8      	blx	r7
 80068ea:	3001      	adds	r0, #1
 80068ec:	f43f af41 	beq.w	8006772 <_printf_float+0xc2>
 80068f0:	f04f 0800 	mov.w	r8, #0
 80068f4:	f104 091a 	add.w	r9, r4, #26
 80068f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068fa:	3b01      	subs	r3, #1
 80068fc:	4543      	cmp	r3, r8
 80068fe:	dc09      	bgt.n	8006914 <_printf_float+0x264>
 8006900:	6823      	ldr	r3, [r4, #0]
 8006902:	079b      	lsls	r3, r3, #30
 8006904:	f100 8105 	bmi.w	8006b12 <_printf_float+0x462>
 8006908:	68e0      	ldr	r0, [r4, #12]
 800690a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800690c:	4298      	cmp	r0, r3
 800690e:	bfb8      	it	lt
 8006910:	4618      	movlt	r0, r3
 8006912:	e730      	b.n	8006776 <_printf_float+0xc6>
 8006914:	2301      	movs	r3, #1
 8006916:	464a      	mov	r2, r9
 8006918:	4631      	mov	r1, r6
 800691a:	4628      	mov	r0, r5
 800691c:	47b8      	blx	r7
 800691e:	3001      	adds	r0, #1
 8006920:	f43f af27 	beq.w	8006772 <_printf_float+0xc2>
 8006924:	f108 0801 	add.w	r8, r8, #1
 8006928:	e7e6      	b.n	80068f8 <_printf_float+0x248>
 800692a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800692c:	2b00      	cmp	r3, #0
 800692e:	dc39      	bgt.n	80069a4 <_printf_float+0x2f4>
 8006930:	4a1b      	ldr	r2, [pc, #108]	; (80069a0 <_printf_float+0x2f0>)
 8006932:	2301      	movs	r3, #1
 8006934:	4631      	mov	r1, r6
 8006936:	4628      	mov	r0, r5
 8006938:	47b8      	blx	r7
 800693a:	3001      	adds	r0, #1
 800693c:	f43f af19 	beq.w	8006772 <_printf_float+0xc2>
 8006940:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006944:	4313      	orrs	r3, r2
 8006946:	d102      	bne.n	800694e <_printf_float+0x29e>
 8006948:	6823      	ldr	r3, [r4, #0]
 800694a:	07d9      	lsls	r1, r3, #31
 800694c:	d5d8      	bpl.n	8006900 <_printf_float+0x250>
 800694e:	ee18 3a10 	vmov	r3, s16
 8006952:	4652      	mov	r2, sl
 8006954:	4631      	mov	r1, r6
 8006956:	4628      	mov	r0, r5
 8006958:	47b8      	blx	r7
 800695a:	3001      	adds	r0, #1
 800695c:	f43f af09 	beq.w	8006772 <_printf_float+0xc2>
 8006960:	f04f 0900 	mov.w	r9, #0
 8006964:	f104 0a1a 	add.w	sl, r4, #26
 8006968:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800696a:	425b      	negs	r3, r3
 800696c:	454b      	cmp	r3, r9
 800696e:	dc01      	bgt.n	8006974 <_printf_float+0x2c4>
 8006970:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006972:	e792      	b.n	800689a <_printf_float+0x1ea>
 8006974:	2301      	movs	r3, #1
 8006976:	4652      	mov	r2, sl
 8006978:	4631      	mov	r1, r6
 800697a:	4628      	mov	r0, r5
 800697c:	47b8      	blx	r7
 800697e:	3001      	adds	r0, #1
 8006980:	f43f aef7 	beq.w	8006772 <_printf_float+0xc2>
 8006984:	f109 0901 	add.w	r9, r9, #1
 8006988:	e7ee      	b.n	8006968 <_printf_float+0x2b8>
 800698a:	bf00      	nop
 800698c:	7fefffff 	.word	0x7fefffff
 8006990:	08009144 	.word	0x08009144
 8006994:	08009148 	.word	0x08009148
 8006998:	08009150 	.word	0x08009150
 800699c:	0800914c 	.word	0x0800914c
 80069a0:	08009154 	.word	0x08009154
 80069a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80069a8:	429a      	cmp	r2, r3
 80069aa:	bfa8      	it	ge
 80069ac:	461a      	movge	r2, r3
 80069ae:	2a00      	cmp	r2, #0
 80069b0:	4691      	mov	r9, r2
 80069b2:	dc37      	bgt.n	8006a24 <_printf_float+0x374>
 80069b4:	f04f 0b00 	mov.w	fp, #0
 80069b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069bc:	f104 021a 	add.w	r2, r4, #26
 80069c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80069c2:	9305      	str	r3, [sp, #20]
 80069c4:	eba3 0309 	sub.w	r3, r3, r9
 80069c8:	455b      	cmp	r3, fp
 80069ca:	dc33      	bgt.n	8006a34 <_printf_float+0x384>
 80069cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069d0:	429a      	cmp	r2, r3
 80069d2:	db3b      	blt.n	8006a4c <_printf_float+0x39c>
 80069d4:	6823      	ldr	r3, [r4, #0]
 80069d6:	07da      	lsls	r2, r3, #31
 80069d8:	d438      	bmi.n	8006a4c <_printf_float+0x39c>
 80069da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069dc:	9b05      	ldr	r3, [sp, #20]
 80069de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069e0:	1ad3      	subs	r3, r2, r3
 80069e2:	eba2 0901 	sub.w	r9, r2, r1
 80069e6:	4599      	cmp	r9, r3
 80069e8:	bfa8      	it	ge
 80069ea:	4699      	movge	r9, r3
 80069ec:	f1b9 0f00 	cmp.w	r9, #0
 80069f0:	dc35      	bgt.n	8006a5e <_printf_float+0x3ae>
 80069f2:	f04f 0800 	mov.w	r8, #0
 80069f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069fa:	f104 0a1a 	add.w	sl, r4, #26
 80069fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a02:	1a9b      	subs	r3, r3, r2
 8006a04:	eba3 0309 	sub.w	r3, r3, r9
 8006a08:	4543      	cmp	r3, r8
 8006a0a:	f77f af79 	ble.w	8006900 <_printf_float+0x250>
 8006a0e:	2301      	movs	r3, #1
 8006a10:	4652      	mov	r2, sl
 8006a12:	4631      	mov	r1, r6
 8006a14:	4628      	mov	r0, r5
 8006a16:	47b8      	blx	r7
 8006a18:	3001      	adds	r0, #1
 8006a1a:	f43f aeaa 	beq.w	8006772 <_printf_float+0xc2>
 8006a1e:	f108 0801 	add.w	r8, r8, #1
 8006a22:	e7ec      	b.n	80069fe <_printf_float+0x34e>
 8006a24:	4613      	mov	r3, r2
 8006a26:	4631      	mov	r1, r6
 8006a28:	4642      	mov	r2, r8
 8006a2a:	4628      	mov	r0, r5
 8006a2c:	47b8      	blx	r7
 8006a2e:	3001      	adds	r0, #1
 8006a30:	d1c0      	bne.n	80069b4 <_printf_float+0x304>
 8006a32:	e69e      	b.n	8006772 <_printf_float+0xc2>
 8006a34:	2301      	movs	r3, #1
 8006a36:	4631      	mov	r1, r6
 8006a38:	4628      	mov	r0, r5
 8006a3a:	9205      	str	r2, [sp, #20]
 8006a3c:	47b8      	blx	r7
 8006a3e:	3001      	adds	r0, #1
 8006a40:	f43f ae97 	beq.w	8006772 <_printf_float+0xc2>
 8006a44:	9a05      	ldr	r2, [sp, #20]
 8006a46:	f10b 0b01 	add.w	fp, fp, #1
 8006a4a:	e7b9      	b.n	80069c0 <_printf_float+0x310>
 8006a4c:	ee18 3a10 	vmov	r3, s16
 8006a50:	4652      	mov	r2, sl
 8006a52:	4631      	mov	r1, r6
 8006a54:	4628      	mov	r0, r5
 8006a56:	47b8      	blx	r7
 8006a58:	3001      	adds	r0, #1
 8006a5a:	d1be      	bne.n	80069da <_printf_float+0x32a>
 8006a5c:	e689      	b.n	8006772 <_printf_float+0xc2>
 8006a5e:	9a05      	ldr	r2, [sp, #20]
 8006a60:	464b      	mov	r3, r9
 8006a62:	4442      	add	r2, r8
 8006a64:	4631      	mov	r1, r6
 8006a66:	4628      	mov	r0, r5
 8006a68:	47b8      	blx	r7
 8006a6a:	3001      	adds	r0, #1
 8006a6c:	d1c1      	bne.n	80069f2 <_printf_float+0x342>
 8006a6e:	e680      	b.n	8006772 <_printf_float+0xc2>
 8006a70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a72:	2a01      	cmp	r2, #1
 8006a74:	dc01      	bgt.n	8006a7a <_printf_float+0x3ca>
 8006a76:	07db      	lsls	r3, r3, #31
 8006a78:	d538      	bpl.n	8006aec <_printf_float+0x43c>
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	4642      	mov	r2, r8
 8006a7e:	4631      	mov	r1, r6
 8006a80:	4628      	mov	r0, r5
 8006a82:	47b8      	blx	r7
 8006a84:	3001      	adds	r0, #1
 8006a86:	f43f ae74 	beq.w	8006772 <_printf_float+0xc2>
 8006a8a:	ee18 3a10 	vmov	r3, s16
 8006a8e:	4652      	mov	r2, sl
 8006a90:	4631      	mov	r1, r6
 8006a92:	4628      	mov	r0, r5
 8006a94:	47b8      	blx	r7
 8006a96:	3001      	adds	r0, #1
 8006a98:	f43f ae6b 	beq.w	8006772 <_printf_float+0xc2>
 8006a9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	f7fa f840 	bl	8000b28 <__aeabi_dcmpeq>
 8006aa8:	b9d8      	cbnz	r0, 8006ae2 <_printf_float+0x432>
 8006aaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006aac:	f108 0201 	add.w	r2, r8, #1
 8006ab0:	3b01      	subs	r3, #1
 8006ab2:	4631      	mov	r1, r6
 8006ab4:	4628      	mov	r0, r5
 8006ab6:	47b8      	blx	r7
 8006ab8:	3001      	adds	r0, #1
 8006aba:	d10e      	bne.n	8006ada <_printf_float+0x42a>
 8006abc:	e659      	b.n	8006772 <_printf_float+0xc2>
 8006abe:	2301      	movs	r3, #1
 8006ac0:	4652      	mov	r2, sl
 8006ac2:	4631      	mov	r1, r6
 8006ac4:	4628      	mov	r0, r5
 8006ac6:	47b8      	blx	r7
 8006ac8:	3001      	adds	r0, #1
 8006aca:	f43f ae52 	beq.w	8006772 <_printf_float+0xc2>
 8006ace:	f108 0801 	add.w	r8, r8, #1
 8006ad2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ad4:	3b01      	subs	r3, #1
 8006ad6:	4543      	cmp	r3, r8
 8006ad8:	dcf1      	bgt.n	8006abe <_printf_float+0x40e>
 8006ada:	464b      	mov	r3, r9
 8006adc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006ae0:	e6dc      	b.n	800689c <_printf_float+0x1ec>
 8006ae2:	f04f 0800 	mov.w	r8, #0
 8006ae6:	f104 0a1a 	add.w	sl, r4, #26
 8006aea:	e7f2      	b.n	8006ad2 <_printf_float+0x422>
 8006aec:	2301      	movs	r3, #1
 8006aee:	4642      	mov	r2, r8
 8006af0:	e7df      	b.n	8006ab2 <_printf_float+0x402>
 8006af2:	2301      	movs	r3, #1
 8006af4:	464a      	mov	r2, r9
 8006af6:	4631      	mov	r1, r6
 8006af8:	4628      	mov	r0, r5
 8006afa:	47b8      	blx	r7
 8006afc:	3001      	adds	r0, #1
 8006afe:	f43f ae38 	beq.w	8006772 <_printf_float+0xc2>
 8006b02:	f108 0801 	add.w	r8, r8, #1
 8006b06:	68e3      	ldr	r3, [r4, #12]
 8006b08:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006b0a:	1a5b      	subs	r3, r3, r1
 8006b0c:	4543      	cmp	r3, r8
 8006b0e:	dcf0      	bgt.n	8006af2 <_printf_float+0x442>
 8006b10:	e6fa      	b.n	8006908 <_printf_float+0x258>
 8006b12:	f04f 0800 	mov.w	r8, #0
 8006b16:	f104 0919 	add.w	r9, r4, #25
 8006b1a:	e7f4      	b.n	8006b06 <_printf_float+0x456>

08006b1c <_printf_common>:
 8006b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b20:	4616      	mov	r6, r2
 8006b22:	4699      	mov	r9, r3
 8006b24:	688a      	ldr	r2, [r1, #8]
 8006b26:	690b      	ldr	r3, [r1, #16]
 8006b28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	bfb8      	it	lt
 8006b30:	4613      	movlt	r3, r2
 8006b32:	6033      	str	r3, [r6, #0]
 8006b34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b38:	4607      	mov	r7, r0
 8006b3a:	460c      	mov	r4, r1
 8006b3c:	b10a      	cbz	r2, 8006b42 <_printf_common+0x26>
 8006b3e:	3301      	adds	r3, #1
 8006b40:	6033      	str	r3, [r6, #0]
 8006b42:	6823      	ldr	r3, [r4, #0]
 8006b44:	0699      	lsls	r1, r3, #26
 8006b46:	bf42      	ittt	mi
 8006b48:	6833      	ldrmi	r3, [r6, #0]
 8006b4a:	3302      	addmi	r3, #2
 8006b4c:	6033      	strmi	r3, [r6, #0]
 8006b4e:	6825      	ldr	r5, [r4, #0]
 8006b50:	f015 0506 	ands.w	r5, r5, #6
 8006b54:	d106      	bne.n	8006b64 <_printf_common+0x48>
 8006b56:	f104 0a19 	add.w	sl, r4, #25
 8006b5a:	68e3      	ldr	r3, [r4, #12]
 8006b5c:	6832      	ldr	r2, [r6, #0]
 8006b5e:	1a9b      	subs	r3, r3, r2
 8006b60:	42ab      	cmp	r3, r5
 8006b62:	dc26      	bgt.n	8006bb2 <_printf_common+0x96>
 8006b64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b68:	1e13      	subs	r3, r2, #0
 8006b6a:	6822      	ldr	r2, [r4, #0]
 8006b6c:	bf18      	it	ne
 8006b6e:	2301      	movne	r3, #1
 8006b70:	0692      	lsls	r2, r2, #26
 8006b72:	d42b      	bmi.n	8006bcc <_printf_common+0xb0>
 8006b74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b78:	4649      	mov	r1, r9
 8006b7a:	4638      	mov	r0, r7
 8006b7c:	47c0      	blx	r8
 8006b7e:	3001      	adds	r0, #1
 8006b80:	d01e      	beq.n	8006bc0 <_printf_common+0xa4>
 8006b82:	6823      	ldr	r3, [r4, #0]
 8006b84:	68e5      	ldr	r5, [r4, #12]
 8006b86:	6832      	ldr	r2, [r6, #0]
 8006b88:	f003 0306 	and.w	r3, r3, #6
 8006b8c:	2b04      	cmp	r3, #4
 8006b8e:	bf08      	it	eq
 8006b90:	1aad      	subeq	r5, r5, r2
 8006b92:	68a3      	ldr	r3, [r4, #8]
 8006b94:	6922      	ldr	r2, [r4, #16]
 8006b96:	bf0c      	ite	eq
 8006b98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b9c:	2500      	movne	r5, #0
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	bfc4      	itt	gt
 8006ba2:	1a9b      	subgt	r3, r3, r2
 8006ba4:	18ed      	addgt	r5, r5, r3
 8006ba6:	2600      	movs	r6, #0
 8006ba8:	341a      	adds	r4, #26
 8006baa:	42b5      	cmp	r5, r6
 8006bac:	d11a      	bne.n	8006be4 <_printf_common+0xc8>
 8006bae:	2000      	movs	r0, #0
 8006bb0:	e008      	b.n	8006bc4 <_printf_common+0xa8>
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	4652      	mov	r2, sl
 8006bb6:	4649      	mov	r1, r9
 8006bb8:	4638      	mov	r0, r7
 8006bba:	47c0      	blx	r8
 8006bbc:	3001      	adds	r0, #1
 8006bbe:	d103      	bne.n	8006bc8 <_printf_common+0xac>
 8006bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8006bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bc8:	3501      	adds	r5, #1
 8006bca:	e7c6      	b.n	8006b5a <_printf_common+0x3e>
 8006bcc:	18e1      	adds	r1, r4, r3
 8006bce:	1c5a      	adds	r2, r3, #1
 8006bd0:	2030      	movs	r0, #48	; 0x30
 8006bd2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006bd6:	4422      	add	r2, r4
 8006bd8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006bdc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006be0:	3302      	adds	r3, #2
 8006be2:	e7c7      	b.n	8006b74 <_printf_common+0x58>
 8006be4:	2301      	movs	r3, #1
 8006be6:	4622      	mov	r2, r4
 8006be8:	4649      	mov	r1, r9
 8006bea:	4638      	mov	r0, r7
 8006bec:	47c0      	blx	r8
 8006bee:	3001      	adds	r0, #1
 8006bf0:	d0e6      	beq.n	8006bc0 <_printf_common+0xa4>
 8006bf2:	3601      	adds	r6, #1
 8006bf4:	e7d9      	b.n	8006baa <_printf_common+0x8e>
	...

08006bf8 <_printf_i>:
 8006bf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bfc:	460c      	mov	r4, r1
 8006bfe:	4691      	mov	r9, r2
 8006c00:	7e27      	ldrb	r7, [r4, #24]
 8006c02:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006c04:	2f78      	cmp	r7, #120	; 0x78
 8006c06:	4680      	mov	r8, r0
 8006c08:	469a      	mov	sl, r3
 8006c0a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c0e:	d807      	bhi.n	8006c20 <_printf_i+0x28>
 8006c10:	2f62      	cmp	r7, #98	; 0x62
 8006c12:	d80a      	bhi.n	8006c2a <_printf_i+0x32>
 8006c14:	2f00      	cmp	r7, #0
 8006c16:	f000 80d8 	beq.w	8006dca <_printf_i+0x1d2>
 8006c1a:	2f58      	cmp	r7, #88	; 0x58
 8006c1c:	f000 80a3 	beq.w	8006d66 <_printf_i+0x16e>
 8006c20:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006c24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006c28:	e03a      	b.n	8006ca0 <_printf_i+0xa8>
 8006c2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006c2e:	2b15      	cmp	r3, #21
 8006c30:	d8f6      	bhi.n	8006c20 <_printf_i+0x28>
 8006c32:	a001      	add	r0, pc, #4	; (adr r0, 8006c38 <_printf_i+0x40>)
 8006c34:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006c38:	08006c91 	.word	0x08006c91
 8006c3c:	08006ca5 	.word	0x08006ca5
 8006c40:	08006c21 	.word	0x08006c21
 8006c44:	08006c21 	.word	0x08006c21
 8006c48:	08006c21 	.word	0x08006c21
 8006c4c:	08006c21 	.word	0x08006c21
 8006c50:	08006ca5 	.word	0x08006ca5
 8006c54:	08006c21 	.word	0x08006c21
 8006c58:	08006c21 	.word	0x08006c21
 8006c5c:	08006c21 	.word	0x08006c21
 8006c60:	08006c21 	.word	0x08006c21
 8006c64:	08006db1 	.word	0x08006db1
 8006c68:	08006cd5 	.word	0x08006cd5
 8006c6c:	08006d93 	.word	0x08006d93
 8006c70:	08006c21 	.word	0x08006c21
 8006c74:	08006c21 	.word	0x08006c21
 8006c78:	08006dd3 	.word	0x08006dd3
 8006c7c:	08006c21 	.word	0x08006c21
 8006c80:	08006cd5 	.word	0x08006cd5
 8006c84:	08006c21 	.word	0x08006c21
 8006c88:	08006c21 	.word	0x08006c21
 8006c8c:	08006d9b 	.word	0x08006d9b
 8006c90:	680b      	ldr	r3, [r1, #0]
 8006c92:	1d1a      	adds	r2, r3, #4
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	600a      	str	r2, [r1, #0]
 8006c98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006c9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e0a3      	b.n	8006dec <_printf_i+0x1f4>
 8006ca4:	6825      	ldr	r5, [r4, #0]
 8006ca6:	6808      	ldr	r0, [r1, #0]
 8006ca8:	062e      	lsls	r6, r5, #24
 8006caa:	f100 0304 	add.w	r3, r0, #4
 8006cae:	d50a      	bpl.n	8006cc6 <_printf_i+0xce>
 8006cb0:	6805      	ldr	r5, [r0, #0]
 8006cb2:	600b      	str	r3, [r1, #0]
 8006cb4:	2d00      	cmp	r5, #0
 8006cb6:	da03      	bge.n	8006cc0 <_printf_i+0xc8>
 8006cb8:	232d      	movs	r3, #45	; 0x2d
 8006cba:	426d      	negs	r5, r5
 8006cbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cc0:	485e      	ldr	r0, [pc, #376]	; (8006e3c <_printf_i+0x244>)
 8006cc2:	230a      	movs	r3, #10
 8006cc4:	e019      	b.n	8006cfa <_printf_i+0x102>
 8006cc6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006cca:	6805      	ldr	r5, [r0, #0]
 8006ccc:	600b      	str	r3, [r1, #0]
 8006cce:	bf18      	it	ne
 8006cd0:	b22d      	sxthne	r5, r5
 8006cd2:	e7ef      	b.n	8006cb4 <_printf_i+0xbc>
 8006cd4:	680b      	ldr	r3, [r1, #0]
 8006cd6:	6825      	ldr	r5, [r4, #0]
 8006cd8:	1d18      	adds	r0, r3, #4
 8006cda:	6008      	str	r0, [r1, #0]
 8006cdc:	0628      	lsls	r0, r5, #24
 8006cde:	d501      	bpl.n	8006ce4 <_printf_i+0xec>
 8006ce0:	681d      	ldr	r5, [r3, #0]
 8006ce2:	e002      	b.n	8006cea <_printf_i+0xf2>
 8006ce4:	0669      	lsls	r1, r5, #25
 8006ce6:	d5fb      	bpl.n	8006ce0 <_printf_i+0xe8>
 8006ce8:	881d      	ldrh	r5, [r3, #0]
 8006cea:	4854      	ldr	r0, [pc, #336]	; (8006e3c <_printf_i+0x244>)
 8006cec:	2f6f      	cmp	r7, #111	; 0x6f
 8006cee:	bf0c      	ite	eq
 8006cf0:	2308      	moveq	r3, #8
 8006cf2:	230a      	movne	r3, #10
 8006cf4:	2100      	movs	r1, #0
 8006cf6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006cfa:	6866      	ldr	r6, [r4, #4]
 8006cfc:	60a6      	str	r6, [r4, #8]
 8006cfe:	2e00      	cmp	r6, #0
 8006d00:	bfa2      	ittt	ge
 8006d02:	6821      	ldrge	r1, [r4, #0]
 8006d04:	f021 0104 	bicge.w	r1, r1, #4
 8006d08:	6021      	strge	r1, [r4, #0]
 8006d0a:	b90d      	cbnz	r5, 8006d10 <_printf_i+0x118>
 8006d0c:	2e00      	cmp	r6, #0
 8006d0e:	d04d      	beq.n	8006dac <_printf_i+0x1b4>
 8006d10:	4616      	mov	r6, r2
 8006d12:	fbb5 f1f3 	udiv	r1, r5, r3
 8006d16:	fb03 5711 	mls	r7, r3, r1, r5
 8006d1a:	5dc7      	ldrb	r7, [r0, r7]
 8006d1c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006d20:	462f      	mov	r7, r5
 8006d22:	42bb      	cmp	r3, r7
 8006d24:	460d      	mov	r5, r1
 8006d26:	d9f4      	bls.n	8006d12 <_printf_i+0x11a>
 8006d28:	2b08      	cmp	r3, #8
 8006d2a:	d10b      	bne.n	8006d44 <_printf_i+0x14c>
 8006d2c:	6823      	ldr	r3, [r4, #0]
 8006d2e:	07df      	lsls	r7, r3, #31
 8006d30:	d508      	bpl.n	8006d44 <_printf_i+0x14c>
 8006d32:	6923      	ldr	r3, [r4, #16]
 8006d34:	6861      	ldr	r1, [r4, #4]
 8006d36:	4299      	cmp	r1, r3
 8006d38:	bfde      	ittt	le
 8006d3a:	2330      	movle	r3, #48	; 0x30
 8006d3c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006d40:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006d44:	1b92      	subs	r2, r2, r6
 8006d46:	6122      	str	r2, [r4, #16]
 8006d48:	f8cd a000 	str.w	sl, [sp]
 8006d4c:	464b      	mov	r3, r9
 8006d4e:	aa03      	add	r2, sp, #12
 8006d50:	4621      	mov	r1, r4
 8006d52:	4640      	mov	r0, r8
 8006d54:	f7ff fee2 	bl	8006b1c <_printf_common>
 8006d58:	3001      	adds	r0, #1
 8006d5a:	d14c      	bne.n	8006df6 <_printf_i+0x1fe>
 8006d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d60:	b004      	add	sp, #16
 8006d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d66:	4835      	ldr	r0, [pc, #212]	; (8006e3c <_printf_i+0x244>)
 8006d68:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006d6c:	6823      	ldr	r3, [r4, #0]
 8006d6e:	680e      	ldr	r6, [r1, #0]
 8006d70:	061f      	lsls	r7, r3, #24
 8006d72:	f856 5b04 	ldr.w	r5, [r6], #4
 8006d76:	600e      	str	r6, [r1, #0]
 8006d78:	d514      	bpl.n	8006da4 <_printf_i+0x1ac>
 8006d7a:	07d9      	lsls	r1, r3, #31
 8006d7c:	bf44      	itt	mi
 8006d7e:	f043 0320 	orrmi.w	r3, r3, #32
 8006d82:	6023      	strmi	r3, [r4, #0]
 8006d84:	b91d      	cbnz	r5, 8006d8e <_printf_i+0x196>
 8006d86:	6823      	ldr	r3, [r4, #0]
 8006d88:	f023 0320 	bic.w	r3, r3, #32
 8006d8c:	6023      	str	r3, [r4, #0]
 8006d8e:	2310      	movs	r3, #16
 8006d90:	e7b0      	b.n	8006cf4 <_printf_i+0xfc>
 8006d92:	6823      	ldr	r3, [r4, #0]
 8006d94:	f043 0320 	orr.w	r3, r3, #32
 8006d98:	6023      	str	r3, [r4, #0]
 8006d9a:	2378      	movs	r3, #120	; 0x78
 8006d9c:	4828      	ldr	r0, [pc, #160]	; (8006e40 <_printf_i+0x248>)
 8006d9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006da2:	e7e3      	b.n	8006d6c <_printf_i+0x174>
 8006da4:	065e      	lsls	r6, r3, #25
 8006da6:	bf48      	it	mi
 8006da8:	b2ad      	uxthmi	r5, r5
 8006daa:	e7e6      	b.n	8006d7a <_printf_i+0x182>
 8006dac:	4616      	mov	r6, r2
 8006dae:	e7bb      	b.n	8006d28 <_printf_i+0x130>
 8006db0:	680b      	ldr	r3, [r1, #0]
 8006db2:	6826      	ldr	r6, [r4, #0]
 8006db4:	6960      	ldr	r0, [r4, #20]
 8006db6:	1d1d      	adds	r5, r3, #4
 8006db8:	600d      	str	r5, [r1, #0]
 8006dba:	0635      	lsls	r5, r6, #24
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	d501      	bpl.n	8006dc4 <_printf_i+0x1cc>
 8006dc0:	6018      	str	r0, [r3, #0]
 8006dc2:	e002      	b.n	8006dca <_printf_i+0x1d2>
 8006dc4:	0671      	lsls	r1, r6, #25
 8006dc6:	d5fb      	bpl.n	8006dc0 <_printf_i+0x1c8>
 8006dc8:	8018      	strh	r0, [r3, #0]
 8006dca:	2300      	movs	r3, #0
 8006dcc:	6123      	str	r3, [r4, #16]
 8006dce:	4616      	mov	r6, r2
 8006dd0:	e7ba      	b.n	8006d48 <_printf_i+0x150>
 8006dd2:	680b      	ldr	r3, [r1, #0]
 8006dd4:	1d1a      	adds	r2, r3, #4
 8006dd6:	600a      	str	r2, [r1, #0]
 8006dd8:	681e      	ldr	r6, [r3, #0]
 8006dda:	6862      	ldr	r2, [r4, #4]
 8006ddc:	2100      	movs	r1, #0
 8006dde:	4630      	mov	r0, r6
 8006de0:	f7f9 fa2e 	bl	8000240 <memchr>
 8006de4:	b108      	cbz	r0, 8006dea <_printf_i+0x1f2>
 8006de6:	1b80      	subs	r0, r0, r6
 8006de8:	6060      	str	r0, [r4, #4]
 8006dea:	6863      	ldr	r3, [r4, #4]
 8006dec:	6123      	str	r3, [r4, #16]
 8006dee:	2300      	movs	r3, #0
 8006df0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006df4:	e7a8      	b.n	8006d48 <_printf_i+0x150>
 8006df6:	6923      	ldr	r3, [r4, #16]
 8006df8:	4632      	mov	r2, r6
 8006dfa:	4649      	mov	r1, r9
 8006dfc:	4640      	mov	r0, r8
 8006dfe:	47d0      	blx	sl
 8006e00:	3001      	adds	r0, #1
 8006e02:	d0ab      	beq.n	8006d5c <_printf_i+0x164>
 8006e04:	6823      	ldr	r3, [r4, #0]
 8006e06:	079b      	lsls	r3, r3, #30
 8006e08:	d413      	bmi.n	8006e32 <_printf_i+0x23a>
 8006e0a:	68e0      	ldr	r0, [r4, #12]
 8006e0c:	9b03      	ldr	r3, [sp, #12]
 8006e0e:	4298      	cmp	r0, r3
 8006e10:	bfb8      	it	lt
 8006e12:	4618      	movlt	r0, r3
 8006e14:	e7a4      	b.n	8006d60 <_printf_i+0x168>
 8006e16:	2301      	movs	r3, #1
 8006e18:	4632      	mov	r2, r6
 8006e1a:	4649      	mov	r1, r9
 8006e1c:	4640      	mov	r0, r8
 8006e1e:	47d0      	blx	sl
 8006e20:	3001      	adds	r0, #1
 8006e22:	d09b      	beq.n	8006d5c <_printf_i+0x164>
 8006e24:	3501      	adds	r5, #1
 8006e26:	68e3      	ldr	r3, [r4, #12]
 8006e28:	9903      	ldr	r1, [sp, #12]
 8006e2a:	1a5b      	subs	r3, r3, r1
 8006e2c:	42ab      	cmp	r3, r5
 8006e2e:	dcf2      	bgt.n	8006e16 <_printf_i+0x21e>
 8006e30:	e7eb      	b.n	8006e0a <_printf_i+0x212>
 8006e32:	2500      	movs	r5, #0
 8006e34:	f104 0619 	add.w	r6, r4, #25
 8006e38:	e7f5      	b.n	8006e26 <_printf_i+0x22e>
 8006e3a:	bf00      	nop
 8006e3c:	08009156 	.word	0x08009156
 8006e40:	08009167 	.word	0x08009167

08006e44 <iprintf>:
 8006e44:	b40f      	push	{r0, r1, r2, r3}
 8006e46:	4b0a      	ldr	r3, [pc, #40]	; (8006e70 <iprintf+0x2c>)
 8006e48:	b513      	push	{r0, r1, r4, lr}
 8006e4a:	681c      	ldr	r4, [r3, #0]
 8006e4c:	b124      	cbz	r4, 8006e58 <iprintf+0x14>
 8006e4e:	69a3      	ldr	r3, [r4, #24]
 8006e50:	b913      	cbnz	r3, 8006e58 <iprintf+0x14>
 8006e52:	4620      	mov	r0, r4
 8006e54:	f001 f8d6 	bl	8008004 <__sinit>
 8006e58:	ab05      	add	r3, sp, #20
 8006e5a:	9a04      	ldr	r2, [sp, #16]
 8006e5c:	68a1      	ldr	r1, [r4, #8]
 8006e5e:	9301      	str	r3, [sp, #4]
 8006e60:	4620      	mov	r0, r4
 8006e62:	f001 fe51 	bl	8008b08 <_vfiprintf_r>
 8006e66:	b002      	add	sp, #8
 8006e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e6c:	b004      	add	sp, #16
 8006e6e:	4770      	bx	lr
 8006e70:	2000002c 	.word	0x2000002c

08006e74 <_puts_r>:
 8006e74:	b570      	push	{r4, r5, r6, lr}
 8006e76:	460e      	mov	r6, r1
 8006e78:	4605      	mov	r5, r0
 8006e7a:	b118      	cbz	r0, 8006e84 <_puts_r+0x10>
 8006e7c:	6983      	ldr	r3, [r0, #24]
 8006e7e:	b90b      	cbnz	r3, 8006e84 <_puts_r+0x10>
 8006e80:	f001 f8c0 	bl	8008004 <__sinit>
 8006e84:	69ab      	ldr	r3, [r5, #24]
 8006e86:	68ac      	ldr	r4, [r5, #8]
 8006e88:	b913      	cbnz	r3, 8006e90 <_puts_r+0x1c>
 8006e8a:	4628      	mov	r0, r5
 8006e8c:	f001 f8ba 	bl	8008004 <__sinit>
 8006e90:	4b2c      	ldr	r3, [pc, #176]	; (8006f44 <_puts_r+0xd0>)
 8006e92:	429c      	cmp	r4, r3
 8006e94:	d120      	bne.n	8006ed8 <_puts_r+0x64>
 8006e96:	686c      	ldr	r4, [r5, #4]
 8006e98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e9a:	07db      	lsls	r3, r3, #31
 8006e9c:	d405      	bmi.n	8006eaa <_puts_r+0x36>
 8006e9e:	89a3      	ldrh	r3, [r4, #12]
 8006ea0:	0598      	lsls	r0, r3, #22
 8006ea2:	d402      	bmi.n	8006eaa <_puts_r+0x36>
 8006ea4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ea6:	f001 f950 	bl	800814a <__retarget_lock_acquire_recursive>
 8006eaa:	89a3      	ldrh	r3, [r4, #12]
 8006eac:	0719      	lsls	r1, r3, #28
 8006eae:	d51d      	bpl.n	8006eec <_puts_r+0x78>
 8006eb0:	6923      	ldr	r3, [r4, #16]
 8006eb2:	b1db      	cbz	r3, 8006eec <_puts_r+0x78>
 8006eb4:	3e01      	subs	r6, #1
 8006eb6:	68a3      	ldr	r3, [r4, #8]
 8006eb8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006ebc:	3b01      	subs	r3, #1
 8006ebe:	60a3      	str	r3, [r4, #8]
 8006ec0:	bb39      	cbnz	r1, 8006f12 <_puts_r+0x9e>
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	da38      	bge.n	8006f38 <_puts_r+0xc4>
 8006ec6:	4622      	mov	r2, r4
 8006ec8:	210a      	movs	r1, #10
 8006eca:	4628      	mov	r0, r5
 8006ecc:	f000 f848 	bl	8006f60 <__swbuf_r>
 8006ed0:	3001      	adds	r0, #1
 8006ed2:	d011      	beq.n	8006ef8 <_puts_r+0x84>
 8006ed4:	250a      	movs	r5, #10
 8006ed6:	e011      	b.n	8006efc <_puts_r+0x88>
 8006ed8:	4b1b      	ldr	r3, [pc, #108]	; (8006f48 <_puts_r+0xd4>)
 8006eda:	429c      	cmp	r4, r3
 8006edc:	d101      	bne.n	8006ee2 <_puts_r+0x6e>
 8006ede:	68ac      	ldr	r4, [r5, #8]
 8006ee0:	e7da      	b.n	8006e98 <_puts_r+0x24>
 8006ee2:	4b1a      	ldr	r3, [pc, #104]	; (8006f4c <_puts_r+0xd8>)
 8006ee4:	429c      	cmp	r4, r3
 8006ee6:	bf08      	it	eq
 8006ee8:	68ec      	ldreq	r4, [r5, #12]
 8006eea:	e7d5      	b.n	8006e98 <_puts_r+0x24>
 8006eec:	4621      	mov	r1, r4
 8006eee:	4628      	mov	r0, r5
 8006ef0:	f000 f888 	bl	8007004 <__swsetup_r>
 8006ef4:	2800      	cmp	r0, #0
 8006ef6:	d0dd      	beq.n	8006eb4 <_puts_r+0x40>
 8006ef8:	f04f 35ff 	mov.w	r5, #4294967295
 8006efc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006efe:	07da      	lsls	r2, r3, #31
 8006f00:	d405      	bmi.n	8006f0e <_puts_r+0x9a>
 8006f02:	89a3      	ldrh	r3, [r4, #12]
 8006f04:	059b      	lsls	r3, r3, #22
 8006f06:	d402      	bmi.n	8006f0e <_puts_r+0x9a>
 8006f08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f0a:	f001 f91f 	bl	800814c <__retarget_lock_release_recursive>
 8006f0e:	4628      	mov	r0, r5
 8006f10:	bd70      	pop	{r4, r5, r6, pc}
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	da04      	bge.n	8006f20 <_puts_r+0xac>
 8006f16:	69a2      	ldr	r2, [r4, #24]
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	dc06      	bgt.n	8006f2a <_puts_r+0xb6>
 8006f1c:	290a      	cmp	r1, #10
 8006f1e:	d004      	beq.n	8006f2a <_puts_r+0xb6>
 8006f20:	6823      	ldr	r3, [r4, #0]
 8006f22:	1c5a      	adds	r2, r3, #1
 8006f24:	6022      	str	r2, [r4, #0]
 8006f26:	7019      	strb	r1, [r3, #0]
 8006f28:	e7c5      	b.n	8006eb6 <_puts_r+0x42>
 8006f2a:	4622      	mov	r2, r4
 8006f2c:	4628      	mov	r0, r5
 8006f2e:	f000 f817 	bl	8006f60 <__swbuf_r>
 8006f32:	3001      	adds	r0, #1
 8006f34:	d1bf      	bne.n	8006eb6 <_puts_r+0x42>
 8006f36:	e7df      	b.n	8006ef8 <_puts_r+0x84>
 8006f38:	6823      	ldr	r3, [r4, #0]
 8006f3a:	250a      	movs	r5, #10
 8006f3c:	1c5a      	adds	r2, r3, #1
 8006f3e:	6022      	str	r2, [r4, #0]
 8006f40:	701d      	strb	r5, [r3, #0]
 8006f42:	e7db      	b.n	8006efc <_puts_r+0x88>
 8006f44:	0800922c 	.word	0x0800922c
 8006f48:	0800924c 	.word	0x0800924c
 8006f4c:	0800920c 	.word	0x0800920c

08006f50 <puts>:
 8006f50:	4b02      	ldr	r3, [pc, #8]	; (8006f5c <puts+0xc>)
 8006f52:	4601      	mov	r1, r0
 8006f54:	6818      	ldr	r0, [r3, #0]
 8006f56:	f7ff bf8d 	b.w	8006e74 <_puts_r>
 8006f5a:	bf00      	nop
 8006f5c:	2000002c 	.word	0x2000002c

08006f60 <__swbuf_r>:
 8006f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f62:	460e      	mov	r6, r1
 8006f64:	4614      	mov	r4, r2
 8006f66:	4605      	mov	r5, r0
 8006f68:	b118      	cbz	r0, 8006f72 <__swbuf_r+0x12>
 8006f6a:	6983      	ldr	r3, [r0, #24]
 8006f6c:	b90b      	cbnz	r3, 8006f72 <__swbuf_r+0x12>
 8006f6e:	f001 f849 	bl	8008004 <__sinit>
 8006f72:	4b21      	ldr	r3, [pc, #132]	; (8006ff8 <__swbuf_r+0x98>)
 8006f74:	429c      	cmp	r4, r3
 8006f76:	d12b      	bne.n	8006fd0 <__swbuf_r+0x70>
 8006f78:	686c      	ldr	r4, [r5, #4]
 8006f7a:	69a3      	ldr	r3, [r4, #24]
 8006f7c:	60a3      	str	r3, [r4, #8]
 8006f7e:	89a3      	ldrh	r3, [r4, #12]
 8006f80:	071a      	lsls	r2, r3, #28
 8006f82:	d52f      	bpl.n	8006fe4 <__swbuf_r+0x84>
 8006f84:	6923      	ldr	r3, [r4, #16]
 8006f86:	b36b      	cbz	r3, 8006fe4 <__swbuf_r+0x84>
 8006f88:	6923      	ldr	r3, [r4, #16]
 8006f8a:	6820      	ldr	r0, [r4, #0]
 8006f8c:	1ac0      	subs	r0, r0, r3
 8006f8e:	6963      	ldr	r3, [r4, #20]
 8006f90:	b2f6      	uxtb	r6, r6
 8006f92:	4283      	cmp	r3, r0
 8006f94:	4637      	mov	r7, r6
 8006f96:	dc04      	bgt.n	8006fa2 <__swbuf_r+0x42>
 8006f98:	4621      	mov	r1, r4
 8006f9a:	4628      	mov	r0, r5
 8006f9c:	f000 ff9e 	bl	8007edc <_fflush_r>
 8006fa0:	bb30      	cbnz	r0, 8006ff0 <__swbuf_r+0x90>
 8006fa2:	68a3      	ldr	r3, [r4, #8]
 8006fa4:	3b01      	subs	r3, #1
 8006fa6:	60a3      	str	r3, [r4, #8]
 8006fa8:	6823      	ldr	r3, [r4, #0]
 8006faa:	1c5a      	adds	r2, r3, #1
 8006fac:	6022      	str	r2, [r4, #0]
 8006fae:	701e      	strb	r6, [r3, #0]
 8006fb0:	6963      	ldr	r3, [r4, #20]
 8006fb2:	3001      	adds	r0, #1
 8006fb4:	4283      	cmp	r3, r0
 8006fb6:	d004      	beq.n	8006fc2 <__swbuf_r+0x62>
 8006fb8:	89a3      	ldrh	r3, [r4, #12]
 8006fba:	07db      	lsls	r3, r3, #31
 8006fbc:	d506      	bpl.n	8006fcc <__swbuf_r+0x6c>
 8006fbe:	2e0a      	cmp	r6, #10
 8006fc0:	d104      	bne.n	8006fcc <__swbuf_r+0x6c>
 8006fc2:	4621      	mov	r1, r4
 8006fc4:	4628      	mov	r0, r5
 8006fc6:	f000 ff89 	bl	8007edc <_fflush_r>
 8006fca:	b988      	cbnz	r0, 8006ff0 <__swbuf_r+0x90>
 8006fcc:	4638      	mov	r0, r7
 8006fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fd0:	4b0a      	ldr	r3, [pc, #40]	; (8006ffc <__swbuf_r+0x9c>)
 8006fd2:	429c      	cmp	r4, r3
 8006fd4:	d101      	bne.n	8006fda <__swbuf_r+0x7a>
 8006fd6:	68ac      	ldr	r4, [r5, #8]
 8006fd8:	e7cf      	b.n	8006f7a <__swbuf_r+0x1a>
 8006fda:	4b09      	ldr	r3, [pc, #36]	; (8007000 <__swbuf_r+0xa0>)
 8006fdc:	429c      	cmp	r4, r3
 8006fde:	bf08      	it	eq
 8006fe0:	68ec      	ldreq	r4, [r5, #12]
 8006fe2:	e7ca      	b.n	8006f7a <__swbuf_r+0x1a>
 8006fe4:	4621      	mov	r1, r4
 8006fe6:	4628      	mov	r0, r5
 8006fe8:	f000 f80c 	bl	8007004 <__swsetup_r>
 8006fec:	2800      	cmp	r0, #0
 8006fee:	d0cb      	beq.n	8006f88 <__swbuf_r+0x28>
 8006ff0:	f04f 37ff 	mov.w	r7, #4294967295
 8006ff4:	e7ea      	b.n	8006fcc <__swbuf_r+0x6c>
 8006ff6:	bf00      	nop
 8006ff8:	0800922c 	.word	0x0800922c
 8006ffc:	0800924c 	.word	0x0800924c
 8007000:	0800920c 	.word	0x0800920c

08007004 <__swsetup_r>:
 8007004:	4b32      	ldr	r3, [pc, #200]	; (80070d0 <__swsetup_r+0xcc>)
 8007006:	b570      	push	{r4, r5, r6, lr}
 8007008:	681d      	ldr	r5, [r3, #0]
 800700a:	4606      	mov	r6, r0
 800700c:	460c      	mov	r4, r1
 800700e:	b125      	cbz	r5, 800701a <__swsetup_r+0x16>
 8007010:	69ab      	ldr	r3, [r5, #24]
 8007012:	b913      	cbnz	r3, 800701a <__swsetup_r+0x16>
 8007014:	4628      	mov	r0, r5
 8007016:	f000 fff5 	bl	8008004 <__sinit>
 800701a:	4b2e      	ldr	r3, [pc, #184]	; (80070d4 <__swsetup_r+0xd0>)
 800701c:	429c      	cmp	r4, r3
 800701e:	d10f      	bne.n	8007040 <__swsetup_r+0x3c>
 8007020:	686c      	ldr	r4, [r5, #4]
 8007022:	89a3      	ldrh	r3, [r4, #12]
 8007024:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007028:	0719      	lsls	r1, r3, #28
 800702a:	d42c      	bmi.n	8007086 <__swsetup_r+0x82>
 800702c:	06dd      	lsls	r5, r3, #27
 800702e:	d411      	bmi.n	8007054 <__swsetup_r+0x50>
 8007030:	2309      	movs	r3, #9
 8007032:	6033      	str	r3, [r6, #0]
 8007034:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007038:	81a3      	strh	r3, [r4, #12]
 800703a:	f04f 30ff 	mov.w	r0, #4294967295
 800703e:	e03e      	b.n	80070be <__swsetup_r+0xba>
 8007040:	4b25      	ldr	r3, [pc, #148]	; (80070d8 <__swsetup_r+0xd4>)
 8007042:	429c      	cmp	r4, r3
 8007044:	d101      	bne.n	800704a <__swsetup_r+0x46>
 8007046:	68ac      	ldr	r4, [r5, #8]
 8007048:	e7eb      	b.n	8007022 <__swsetup_r+0x1e>
 800704a:	4b24      	ldr	r3, [pc, #144]	; (80070dc <__swsetup_r+0xd8>)
 800704c:	429c      	cmp	r4, r3
 800704e:	bf08      	it	eq
 8007050:	68ec      	ldreq	r4, [r5, #12]
 8007052:	e7e6      	b.n	8007022 <__swsetup_r+0x1e>
 8007054:	0758      	lsls	r0, r3, #29
 8007056:	d512      	bpl.n	800707e <__swsetup_r+0x7a>
 8007058:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800705a:	b141      	cbz	r1, 800706e <__swsetup_r+0x6a>
 800705c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007060:	4299      	cmp	r1, r3
 8007062:	d002      	beq.n	800706a <__swsetup_r+0x66>
 8007064:	4630      	mov	r0, r6
 8007066:	f001 fc7b 	bl	8008960 <_free_r>
 800706a:	2300      	movs	r3, #0
 800706c:	6363      	str	r3, [r4, #52]	; 0x34
 800706e:	89a3      	ldrh	r3, [r4, #12]
 8007070:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007074:	81a3      	strh	r3, [r4, #12]
 8007076:	2300      	movs	r3, #0
 8007078:	6063      	str	r3, [r4, #4]
 800707a:	6923      	ldr	r3, [r4, #16]
 800707c:	6023      	str	r3, [r4, #0]
 800707e:	89a3      	ldrh	r3, [r4, #12]
 8007080:	f043 0308 	orr.w	r3, r3, #8
 8007084:	81a3      	strh	r3, [r4, #12]
 8007086:	6923      	ldr	r3, [r4, #16]
 8007088:	b94b      	cbnz	r3, 800709e <__swsetup_r+0x9a>
 800708a:	89a3      	ldrh	r3, [r4, #12]
 800708c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007090:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007094:	d003      	beq.n	800709e <__swsetup_r+0x9a>
 8007096:	4621      	mov	r1, r4
 8007098:	4630      	mov	r0, r6
 800709a:	f001 f87d 	bl	8008198 <__smakebuf_r>
 800709e:	89a0      	ldrh	r0, [r4, #12]
 80070a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80070a4:	f010 0301 	ands.w	r3, r0, #1
 80070a8:	d00a      	beq.n	80070c0 <__swsetup_r+0xbc>
 80070aa:	2300      	movs	r3, #0
 80070ac:	60a3      	str	r3, [r4, #8]
 80070ae:	6963      	ldr	r3, [r4, #20]
 80070b0:	425b      	negs	r3, r3
 80070b2:	61a3      	str	r3, [r4, #24]
 80070b4:	6923      	ldr	r3, [r4, #16]
 80070b6:	b943      	cbnz	r3, 80070ca <__swsetup_r+0xc6>
 80070b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80070bc:	d1ba      	bne.n	8007034 <__swsetup_r+0x30>
 80070be:	bd70      	pop	{r4, r5, r6, pc}
 80070c0:	0781      	lsls	r1, r0, #30
 80070c2:	bf58      	it	pl
 80070c4:	6963      	ldrpl	r3, [r4, #20]
 80070c6:	60a3      	str	r3, [r4, #8]
 80070c8:	e7f4      	b.n	80070b4 <__swsetup_r+0xb0>
 80070ca:	2000      	movs	r0, #0
 80070cc:	e7f7      	b.n	80070be <__swsetup_r+0xba>
 80070ce:	bf00      	nop
 80070d0:	2000002c 	.word	0x2000002c
 80070d4:	0800922c 	.word	0x0800922c
 80070d8:	0800924c 	.word	0x0800924c
 80070dc:	0800920c 	.word	0x0800920c

080070e0 <quorem>:
 80070e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070e4:	6903      	ldr	r3, [r0, #16]
 80070e6:	690c      	ldr	r4, [r1, #16]
 80070e8:	42a3      	cmp	r3, r4
 80070ea:	4607      	mov	r7, r0
 80070ec:	f2c0 8081 	blt.w	80071f2 <quorem+0x112>
 80070f0:	3c01      	subs	r4, #1
 80070f2:	f101 0814 	add.w	r8, r1, #20
 80070f6:	f100 0514 	add.w	r5, r0, #20
 80070fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070fe:	9301      	str	r3, [sp, #4]
 8007100:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007104:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007108:	3301      	adds	r3, #1
 800710a:	429a      	cmp	r2, r3
 800710c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007110:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007114:	fbb2 f6f3 	udiv	r6, r2, r3
 8007118:	d331      	bcc.n	800717e <quorem+0x9e>
 800711a:	f04f 0e00 	mov.w	lr, #0
 800711e:	4640      	mov	r0, r8
 8007120:	46ac      	mov	ip, r5
 8007122:	46f2      	mov	sl, lr
 8007124:	f850 2b04 	ldr.w	r2, [r0], #4
 8007128:	b293      	uxth	r3, r2
 800712a:	fb06 e303 	mla	r3, r6, r3, lr
 800712e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007132:	b29b      	uxth	r3, r3
 8007134:	ebaa 0303 	sub.w	r3, sl, r3
 8007138:	0c12      	lsrs	r2, r2, #16
 800713a:	f8dc a000 	ldr.w	sl, [ip]
 800713e:	fb06 e202 	mla	r2, r6, r2, lr
 8007142:	fa13 f38a 	uxtah	r3, r3, sl
 8007146:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800714a:	fa1f fa82 	uxth.w	sl, r2
 800714e:	f8dc 2000 	ldr.w	r2, [ip]
 8007152:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007156:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800715a:	b29b      	uxth	r3, r3
 800715c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007160:	4581      	cmp	r9, r0
 8007162:	f84c 3b04 	str.w	r3, [ip], #4
 8007166:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800716a:	d2db      	bcs.n	8007124 <quorem+0x44>
 800716c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007170:	b92b      	cbnz	r3, 800717e <quorem+0x9e>
 8007172:	9b01      	ldr	r3, [sp, #4]
 8007174:	3b04      	subs	r3, #4
 8007176:	429d      	cmp	r5, r3
 8007178:	461a      	mov	r2, r3
 800717a:	d32e      	bcc.n	80071da <quorem+0xfa>
 800717c:	613c      	str	r4, [r7, #16]
 800717e:	4638      	mov	r0, r7
 8007180:	f001 fade 	bl	8008740 <__mcmp>
 8007184:	2800      	cmp	r0, #0
 8007186:	db24      	blt.n	80071d2 <quorem+0xf2>
 8007188:	3601      	adds	r6, #1
 800718a:	4628      	mov	r0, r5
 800718c:	f04f 0c00 	mov.w	ip, #0
 8007190:	f858 2b04 	ldr.w	r2, [r8], #4
 8007194:	f8d0 e000 	ldr.w	lr, [r0]
 8007198:	b293      	uxth	r3, r2
 800719a:	ebac 0303 	sub.w	r3, ip, r3
 800719e:	0c12      	lsrs	r2, r2, #16
 80071a0:	fa13 f38e 	uxtah	r3, r3, lr
 80071a4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80071a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071b2:	45c1      	cmp	r9, r8
 80071b4:	f840 3b04 	str.w	r3, [r0], #4
 80071b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80071bc:	d2e8      	bcs.n	8007190 <quorem+0xb0>
 80071be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80071c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80071c6:	b922      	cbnz	r2, 80071d2 <quorem+0xf2>
 80071c8:	3b04      	subs	r3, #4
 80071ca:	429d      	cmp	r5, r3
 80071cc:	461a      	mov	r2, r3
 80071ce:	d30a      	bcc.n	80071e6 <quorem+0x106>
 80071d0:	613c      	str	r4, [r7, #16]
 80071d2:	4630      	mov	r0, r6
 80071d4:	b003      	add	sp, #12
 80071d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071da:	6812      	ldr	r2, [r2, #0]
 80071dc:	3b04      	subs	r3, #4
 80071de:	2a00      	cmp	r2, #0
 80071e0:	d1cc      	bne.n	800717c <quorem+0x9c>
 80071e2:	3c01      	subs	r4, #1
 80071e4:	e7c7      	b.n	8007176 <quorem+0x96>
 80071e6:	6812      	ldr	r2, [r2, #0]
 80071e8:	3b04      	subs	r3, #4
 80071ea:	2a00      	cmp	r2, #0
 80071ec:	d1f0      	bne.n	80071d0 <quorem+0xf0>
 80071ee:	3c01      	subs	r4, #1
 80071f0:	e7eb      	b.n	80071ca <quorem+0xea>
 80071f2:	2000      	movs	r0, #0
 80071f4:	e7ee      	b.n	80071d4 <quorem+0xf4>
	...

080071f8 <_dtoa_r>:
 80071f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071fc:	ed2d 8b02 	vpush	{d8}
 8007200:	ec57 6b10 	vmov	r6, r7, d0
 8007204:	b095      	sub	sp, #84	; 0x54
 8007206:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007208:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800720c:	9105      	str	r1, [sp, #20]
 800720e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007212:	4604      	mov	r4, r0
 8007214:	9209      	str	r2, [sp, #36]	; 0x24
 8007216:	930f      	str	r3, [sp, #60]	; 0x3c
 8007218:	b975      	cbnz	r5, 8007238 <_dtoa_r+0x40>
 800721a:	2010      	movs	r0, #16
 800721c:	f000 fffc 	bl	8008218 <malloc>
 8007220:	4602      	mov	r2, r0
 8007222:	6260      	str	r0, [r4, #36]	; 0x24
 8007224:	b920      	cbnz	r0, 8007230 <_dtoa_r+0x38>
 8007226:	4bb2      	ldr	r3, [pc, #712]	; (80074f0 <_dtoa_r+0x2f8>)
 8007228:	21ea      	movs	r1, #234	; 0xea
 800722a:	48b2      	ldr	r0, [pc, #712]	; (80074f4 <_dtoa_r+0x2fc>)
 800722c:	f001 fe02 	bl	8008e34 <__assert_func>
 8007230:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007234:	6005      	str	r5, [r0, #0]
 8007236:	60c5      	str	r5, [r0, #12]
 8007238:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800723a:	6819      	ldr	r1, [r3, #0]
 800723c:	b151      	cbz	r1, 8007254 <_dtoa_r+0x5c>
 800723e:	685a      	ldr	r2, [r3, #4]
 8007240:	604a      	str	r2, [r1, #4]
 8007242:	2301      	movs	r3, #1
 8007244:	4093      	lsls	r3, r2
 8007246:	608b      	str	r3, [r1, #8]
 8007248:	4620      	mov	r0, r4
 800724a:	f001 f83b 	bl	80082c4 <_Bfree>
 800724e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007250:	2200      	movs	r2, #0
 8007252:	601a      	str	r2, [r3, #0]
 8007254:	1e3b      	subs	r3, r7, #0
 8007256:	bfb9      	ittee	lt
 8007258:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800725c:	9303      	strlt	r3, [sp, #12]
 800725e:	2300      	movge	r3, #0
 8007260:	f8c8 3000 	strge.w	r3, [r8]
 8007264:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007268:	4ba3      	ldr	r3, [pc, #652]	; (80074f8 <_dtoa_r+0x300>)
 800726a:	bfbc      	itt	lt
 800726c:	2201      	movlt	r2, #1
 800726e:	f8c8 2000 	strlt.w	r2, [r8]
 8007272:	ea33 0309 	bics.w	r3, r3, r9
 8007276:	d11b      	bne.n	80072b0 <_dtoa_r+0xb8>
 8007278:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800727a:	f242 730f 	movw	r3, #9999	; 0x270f
 800727e:	6013      	str	r3, [r2, #0]
 8007280:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007284:	4333      	orrs	r3, r6
 8007286:	f000 857a 	beq.w	8007d7e <_dtoa_r+0xb86>
 800728a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800728c:	b963      	cbnz	r3, 80072a8 <_dtoa_r+0xb0>
 800728e:	4b9b      	ldr	r3, [pc, #620]	; (80074fc <_dtoa_r+0x304>)
 8007290:	e024      	b.n	80072dc <_dtoa_r+0xe4>
 8007292:	4b9b      	ldr	r3, [pc, #620]	; (8007500 <_dtoa_r+0x308>)
 8007294:	9300      	str	r3, [sp, #0]
 8007296:	3308      	adds	r3, #8
 8007298:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800729a:	6013      	str	r3, [r2, #0]
 800729c:	9800      	ldr	r0, [sp, #0]
 800729e:	b015      	add	sp, #84	; 0x54
 80072a0:	ecbd 8b02 	vpop	{d8}
 80072a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072a8:	4b94      	ldr	r3, [pc, #592]	; (80074fc <_dtoa_r+0x304>)
 80072aa:	9300      	str	r3, [sp, #0]
 80072ac:	3303      	adds	r3, #3
 80072ae:	e7f3      	b.n	8007298 <_dtoa_r+0xa0>
 80072b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80072b4:	2200      	movs	r2, #0
 80072b6:	ec51 0b17 	vmov	r0, r1, d7
 80072ba:	2300      	movs	r3, #0
 80072bc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80072c0:	f7f9 fc32 	bl	8000b28 <__aeabi_dcmpeq>
 80072c4:	4680      	mov	r8, r0
 80072c6:	b158      	cbz	r0, 80072e0 <_dtoa_r+0xe8>
 80072c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80072ca:	2301      	movs	r3, #1
 80072cc:	6013      	str	r3, [r2, #0]
 80072ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	f000 8551 	beq.w	8007d78 <_dtoa_r+0xb80>
 80072d6:	488b      	ldr	r0, [pc, #556]	; (8007504 <_dtoa_r+0x30c>)
 80072d8:	6018      	str	r0, [r3, #0]
 80072da:	1e43      	subs	r3, r0, #1
 80072dc:	9300      	str	r3, [sp, #0]
 80072de:	e7dd      	b.n	800729c <_dtoa_r+0xa4>
 80072e0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80072e4:	aa12      	add	r2, sp, #72	; 0x48
 80072e6:	a913      	add	r1, sp, #76	; 0x4c
 80072e8:	4620      	mov	r0, r4
 80072ea:	f001 facd 	bl	8008888 <__d2b>
 80072ee:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80072f2:	4683      	mov	fp, r0
 80072f4:	2d00      	cmp	r5, #0
 80072f6:	d07c      	beq.n	80073f2 <_dtoa_r+0x1fa>
 80072f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072fa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80072fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007302:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007306:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800730a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800730e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007312:	4b7d      	ldr	r3, [pc, #500]	; (8007508 <_dtoa_r+0x310>)
 8007314:	2200      	movs	r2, #0
 8007316:	4630      	mov	r0, r6
 8007318:	4639      	mov	r1, r7
 800731a:	f7f8 ffe5 	bl	80002e8 <__aeabi_dsub>
 800731e:	a36e      	add	r3, pc, #440	; (adr r3, 80074d8 <_dtoa_r+0x2e0>)
 8007320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007324:	f7f9 f998 	bl	8000658 <__aeabi_dmul>
 8007328:	a36d      	add	r3, pc, #436	; (adr r3, 80074e0 <_dtoa_r+0x2e8>)
 800732a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800732e:	f7f8 ffdd 	bl	80002ec <__adddf3>
 8007332:	4606      	mov	r6, r0
 8007334:	4628      	mov	r0, r5
 8007336:	460f      	mov	r7, r1
 8007338:	f7f9 f924 	bl	8000584 <__aeabi_i2d>
 800733c:	a36a      	add	r3, pc, #424	; (adr r3, 80074e8 <_dtoa_r+0x2f0>)
 800733e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007342:	f7f9 f989 	bl	8000658 <__aeabi_dmul>
 8007346:	4602      	mov	r2, r0
 8007348:	460b      	mov	r3, r1
 800734a:	4630      	mov	r0, r6
 800734c:	4639      	mov	r1, r7
 800734e:	f7f8 ffcd 	bl	80002ec <__adddf3>
 8007352:	4606      	mov	r6, r0
 8007354:	460f      	mov	r7, r1
 8007356:	f7f9 fc2f 	bl	8000bb8 <__aeabi_d2iz>
 800735a:	2200      	movs	r2, #0
 800735c:	4682      	mov	sl, r0
 800735e:	2300      	movs	r3, #0
 8007360:	4630      	mov	r0, r6
 8007362:	4639      	mov	r1, r7
 8007364:	f7f9 fbea 	bl	8000b3c <__aeabi_dcmplt>
 8007368:	b148      	cbz	r0, 800737e <_dtoa_r+0x186>
 800736a:	4650      	mov	r0, sl
 800736c:	f7f9 f90a 	bl	8000584 <__aeabi_i2d>
 8007370:	4632      	mov	r2, r6
 8007372:	463b      	mov	r3, r7
 8007374:	f7f9 fbd8 	bl	8000b28 <__aeabi_dcmpeq>
 8007378:	b908      	cbnz	r0, 800737e <_dtoa_r+0x186>
 800737a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800737e:	f1ba 0f16 	cmp.w	sl, #22
 8007382:	d854      	bhi.n	800742e <_dtoa_r+0x236>
 8007384:	4b61      	ldr	r3, [pc, #388]	; (800750c <_dtoa_r+0x314>)
 8007386:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800738a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800738e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007392:	f7f9 fbd3 	bl	8000b3c <__aeabi_dcmplt>
 8007396:	2800      	cmp	r0, #0
 8007398:	d04b      	beq.n	8007432 <_dtoa_r+0x23a>
 800739a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800739e:	2300      	movs	r3, #0
 80073a0:	930e      	str	r3, [sp, #56]	; 0x38
 80073a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80073a4:	1b5d      	subs	r5, r3, r5
 80073a6:	1e6b      	subs	r3, r5, #1
 80073a8:	9304      	str	r3, [sp, #16]
 80073aa:	bf43      	ittte	mi
 80073ac:	2300      	movmi	r3, #0
 80073ae:	f1c5 0801 	rsbmi	r8, r5, #1
 80073b2:	9304      	strmi	r3, [sp, #16]
 80073b4:	f04f 0800 	movpl.w	r8, #0
 80073b8:	f1ba 0f00 	cmp.w	sl, #0
 80073bc:	db3b      	blt.n	8007436 <_dtoa_r+0x23e>
 80073be:	9b04      	ldr	r3, [sp, #16]
 80073c0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80073c4:	4453      	add	r3, sl
 80073c6:	9304      	str	r3, [sp, #16]
 80073c8:	2300      	movs	r3, #0
 80073ca:	9306      	str	r3, [sp, #24]
 80073cc:	9b05      	ldr	r3, [sp, #20]
 80073ce:	2b09      	cmp	r3, #9
 80073d0:	d869      	bhi.n	80074a6 <_dtoa_r+0x2ae>
 80073d2:	2b05      	cmp	r3, #5
 80073d4:	bfc4      	itt	gt
 80073d6:	3b04      	subgt	r3, #4
 80073d8:	9305      	strgt	r3, [sp, #20]
 80073da:	9b05      	ldr	r3, [sp, #20]
 80073dc:	f1a3 0302 	sub.w	r3, r3, #2
 80073e0:	bfcc      	ite	gt
 80073e2:	2500      	movgt	r5, #0
 80073e4:	2501      	movle	r5, #1
 80073e6:	2b03      	cmp	r3, #3
 80073e8:	d869      	bhi.n	80074be <_dtoa_r+0x2c6>
 80073ea:	e8df f003 	tbb	[pc, r3]
 80073ee:	4e2c      	.short	0x4e2c
 80073f0:	5a4c      	.short	0x5a4c
 80073f2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80073f6:	441d      	add	r5, r3
 80073f8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80073fc:	2b20      	cmp	r3, #32
 80073fe:	bfc1      	itttt	gt
 8007400:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007404:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007408:	fa09 f303 	lslgt.w	r3, r9, r3
 800740c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007410:	bfda      	itte	le
 8007412:	f1c3 0320 	rsble	r3, r3, #32
 8007416:	fa06 f003 	lslle.w	r0, r6, r3
 800741a:	4318      	orrgt	r0, r3
 800741c:	f7f9 f8a2 	bl	8000564 <__aeabi_ui2d>
 8007420:	2301      	movs	r3, #1
 8007422:	4606      	mov	r6, r0
 8007424:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007428:	3d01      	subs	r5, #1
 800742a:	9310      	str	r3, [sp, #64]	; 0x40
 800742c:	e771      	b.n	8007312 <_dtoa_r+0x11a>
 800742e:	2301      	movs	r3, #1
 8007430:	e7b6      	b.n	80073a0 <_dtoa_r+0x1a8>
 8007432:	900e      	str	r0, [sp, #56]	; 0x38
 8007434:	e7b5      	b.n	80073a2 <_dtoa_r+0x1aa>
 8007436:	f1ca 0300 	rsb	r3, sl, #0
 800743a:	9306      	str	r3, [sp, #24]
 800743c:	2300      	movs	r3, #0
 800743e:	eba8 080a 	sub.w	r8, r8, sl
 8007442:	930d      	str	r3, [sp, #52]	; 0x34
 8007444:	e7c2      	b.n	80073cc <_dtoa_r+0x1d4>
 8007446:	2300      	movs	r3, #0
 8007448:	9308      	str	r3, [sp, #32]
 800744a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800744c:	2b00      	cmp	r3, #0
 800744e:	dc39      	bgt.n	80074c4 <_dtoa_r+0x2cc>
 8007450:	f04f 0901 	mov.w	r9, #1
 8007454:	f8cd 9004 	str.w	r9, [sp, #4]
 8007458:	464b      	mov	r3, r9
 800745a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800745e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007460:	2200      	movs	r2, #0
 8007462:	6042      	str	r2, [r0, #4]
 8007464:	2204      	movs	r2, #4
 8007466:	f102 0614 	add.w	r6, r2, #20
 800746a:	429e      	cmp	r6, r3
 800746c:	6841      	ldr	r1, [r0, #4]
 800746e:	d92f      	bls.n	80074d0 <_dtoa_r+0x2d8>
 8007470:	4620      	mov	r0, r4
 8007472:	f000 fee7 	bl	8008244 <_Balloc>
 8007476:	9000      	str	r0, [sp, #0]
 8007478:	2800      	cmp	r0, #0
 800747a:	d14b      	bne.n	8007514 <_dtoa_r+0x31c>
 800747c:	4b24      	ldr	r3, [pc, #144]	; (8007510 <_dtoa_r+0x318>)
 800747e:	4602      	mov	r2, r0
 8007480:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007484:	e6d1      	b.n	800722a <_dtoa_r+0x32>
 8007486:	2301      	movs	r3, #1
 8007488:	e7de      	b.n	8007448 <_dtoa_r+0x250>
 800748a:	2300      	movs	r3, #0
 800748c:	9308      	str	r3, [sp, #32]
 800748e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007490:	eb0a 0903 	add.w	r9, sl, r3
 8007494:	f109 0301 	add.w	r3, r9, #1
 8007498:	2b01      	cmp	r3, #1
 800749a:	9301      	str	r3, [sp, #4]
 800749c:	bfb8      	it	lt
 800749e:	2301      	movlt	r3, #1
 80074a0:	e7dd      	b.n	800745e <_dtoa_r+0x266>
 80074a2:	2301      	movs	r3, #1
 80074a4:	e7f2      	b.n	800748c <_dtoa_r+0x294>
 80074a6:	2501      	movs	r5, #1
 80074a8:	2300      	movs	r3, #0
 80074aa:	9305      	str	r3, [sp, #20]
 80074ac:	9508      	str	r5, [sp, #32]
 80074ae:	f04f 39ff 	mov.w	r9, #4294967295
 80074b2:	2200      	movs	r2, #0
 80074b4:	f8cd 9004 	str.w	r9, [sp, #4]
 80074b8:	2312      	movs	r3, #18
 80074ba:	9209      	str	r2, [sp, #36]	; 0x24
 80074bc:	e7cf      	b.n	800745e <_dtoa_r+0x266>
 80074be:	2301      	movs	r3, #1
 80074c0:	9308      	str	r3, [sp, #32]
 80074c2:	e7f4      	b.n	80074ae <_dtoa_r+0x2b6>
 80074c4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80074c8:	f8cd 9004 	str.w	r9, [sp, #4]
 80074cc:	464b      	mov	r3, r9
 80074ce:	e7c6      	b.n	800745e <_dtoa_r+0x266>
 80074d0:	3101      	adds	r1, #1
 80074d2:	6041      	str	r1, [r0, #4]
 80074d4:	0052      	lsls	r2, r2, #1
 80074d6:	e7c6      	b.n	8007466 <_dtoa_r+0x26e>
 80074d8:	636f4361 	.word	0x636f4361
 80074dc:	3fd287a7 	.word	0x3fd287a7
 80074e0:	8b60c8b3 	.word	0x8b60c8b3
 80074e4:	3fc68a28 	.word	0x3fc68a28
 80074e8:	509f79fb 	.word	0x509f79fb
 80074ec:	3fd34413 	.word	0x3fd34413
 80074f0:	08009185 	.word	0x08009185
 80074f4:	0800919c 	.word	0x0800919c
 80074f8:	7ff00000 	.word	0x7ff00000
 80074fc:	08009181 	.word	0x08009181
 8007500:	08009178 	.word	0x08009178
 8007504:	08009155 	.word	0x08009155
 8007508:	3ff80000 	.word	0x3ff80000
 800750c:	080092f8 	.word	0x080092f8
 8007510:	080091fb 	.word	0x080091fb
 8007514:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007516:	9a00      	ldr	r2, [sp, #0]
 8007518:	601a      	str	r2, [r3, #0]
 800751a:	9b01      	ldr	r3, [sp, #4]
 800751c:	2b0e      	cmp	r3, #14
 800751e:	f200 80ad 	bhi.w	800767c <_dtoa_r+0x484>
 8007522:	2d00      	cmp	r5, #0
 8007524:	f000 80aa 	beq.w	800767c <_dtoa_r+0x484>
 8007528:	f1ba 0f00 	cmp.w	sl, #0
 800752c:	dd36      	ble.n	800759c <_dtoa_r+0x3a4>
 800752e:	4ac3      	ldr	r2, [pc, #780]	; (800783c <_dtoa_r+0x644>)
 8007530:	f00a 030f 	and.w	r3, sl, #15
 8007534:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007538:	ed93 7b00 	vldr	d7, [r3]
 800753c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007540:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007544:	eeb0 8a47 	vmov.f32	s16, s14
 8007548:	eef0 8a67 	vmov.f32	s17, s15
 800754c:	d016      	beq.n	800757c <_dtoa_r+0x384>
 800754e:	4bbc      	ldr	r3, [pc, #752]	; (8007840 <_dtoa_r+0x648>)
 8007550:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007554:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007558:	f7f9 f9a8 	bl	80008ac <__aeabi_ddiv>
 800755c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007560:	f007 070f 	and.w	r7, r7, #15
 8007564:	2503      	movs	r5, #3
 8007566:	4eb6      	ldr	r6, [pc, #728]	; (8007840 <_dtoa_r+0x648>)
 8007568:	b957      	cbnz	r7, 8007580 <_dtoa_r+0x388>
 800756a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800756e:	ec53 2b18 	vmov	r2, r3, d8
 8007572:	f7f9 f99b 	bl	80008ac <__aeabi_ddiv>
 8007576:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800757a:	e029      	b.n	80075d0 <_dtoa_r+0x3d8>
 800757c:	2502      	movs	r5, #2
 800757e:	e7f2      	b.n	8007566 <_dtoa_r+0x36e>
 8007580:	07f9      	lsls	r1, r7, #31
 8007582:	d508      	bpl.n	8007596 <_dtoa_r+0x39e>
 8007584:	ec51 0b18 	vmov	r0, r1, d8
 8007588:	e9d6 2300 	ldrd	r2, r3, [r6]
 800758c:	f7f9 f864 	bl	8000658 <__aeabi_dmul>
 8007590:	ec41 0b18 	vmov	d8, r0, r1
 8007594:	3501      	adds	r5, #1
 8007596:	107f      	asrs	r7, r7, #1
 8007598:	3608      	adds	r6, #8
 800759a:	e7e5      	b.n	8007568 <_dtoa_r+0x370>
 800759c:	f000 80a6 	beq.w	80076ec <_dtoa_r+0x4f4>
 80075a0:	f1ca 0600 	rsb	r6, sl, #0
 80075a4:	4ba5      	ldr	r3, [pc, #660]	; (800783c <_dtoa_r+0x644>)
 80075a6:	4fa6      	ldr	r7, [pc, #664]	; (8007840 <_dtoa_r+0x648>)
 80075a8:	f006 020f 	and.w	r2, r6, #15
 80075ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80075b8:	f7f9 f84e 	bl	8000658 <__aeabi_dmul>
 80075bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075c0:	1136      	asrs	r6, r6, #4
 80075c2:	2300      	movs	r3, #0
 80075c4:	2502      	movs	r5, #2
 80075c6:	2e00      	cmp	r6, #0
 80075c8:	f040 8085 	bne.w	80076d6 <_dtoa_r+0x4de>
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d1d2      	bne.n	8007576 <_dtoa_r+0x37e>
 80075d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	f000 808c 	beq.w	80076f0 <_dtoa_r+0x4f8>
 80075d8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80075dc:	4b99      	ldr	r3, [pc, #612]	; (8007844 <_dtoa_r+0x64c>)
 80075de:	2200      	movs	r2, #0
 80075e0:	4630      	mov	r0, r6
 80075e2:	4639      	mov	r1, r7
 80075e4:	f7f9 faaa 	bl	8000b3c <__aeabi_dcmplt>
 80075e8:	2800      	cmp	r0, #0
 80075ea:	f000 8081 	beq.w	80076f0 <_dtoa_r+0x4f8>
 80075ee:	9b01      	ldr	r3, [sp, #4]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d07d      	beq.n	80076f0 <_dtoa_r+0x4f8>
 80075f4:	f1b9 0f00 	cmp.w	r9, #0
 80075f8:	dd3c      	ble.n	8007674 <_dtoa_r+0x47c>
 80075fa:	f10a 33ff 	add.w	r3, sl, #4294967295
 80075fe:	9307      	str	r3, [sp, #28]
 8007600:	2200      	movs	r2, #0
 8007602:	4b91      	ldr	r3, [pc, #580]	; (8007848 <_dtoa_r+0x650>)
 8007604:	4630      	mov	r0, r6
 8007606:	4639      	mov	r1, r7
 8007608:	f7f9 f826 	bl	8000658 <__aeabi_dmul>
 800760c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007610:	3501      	adds	r5, #1
 8007612:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007616:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800761a:	4628      	mov	r0, r5
 800761c:	f7f8 ffb2 	bl	8000584 <__aeabi_i2d>
 8007620:	4632      	mov	r2, r6
 8007622:	463b      	mov	r3, r7
 8007624:	f7f9 f818 	bl	8000658 <__aeabi_dmul>
 8007628:	4b88      	ldr	r3, [pc, #544]	; (800784c <_dtoa_r+0x654>)
 800762a:	2200      	movs	r2, #0
 800762c:	f7f8 fe5e 	bl	80002ec <__adddf3>
 8007630:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007634:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007638:	9303      	str	r3, [sp, #12]
 800763a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800763c:	2b00      	cmp	r3, #0
 800763e:	d15c      	bne.n	80076fa <_dtoa_r+0x502>
 8007640:	4b83      	ldr	r3, [pc, #524]	; (8007850 <_dtoa_r+0x658>)
 8007642:	2200      	movs	r2, #0
 8007644:	4630      	mov	r0, r6
 8007646:	4639      	mov	r1, r7
 8007648:	f7f8 fe4e 	bl	80002e8 <__aeabi_dsub>
 800764c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007650:	4606      	mov	r6, r0
 8007652:	460f      	mov	r7, r1
 8007654:	f7f9 fa90 	bl	8000b78 <__aeabi_dcmpgt>
 8007658:	2800      	cmp	r0, #0
 800765a:	f040 8296 	bne.w	8007b8a <_dtoa_r+0x992>
 800765e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007662:	4630      	mov	r0, r6
 8007664:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007668:	4639      	mov	r1, r7
 800766a:	f7f9 fa67 	bl	8000b3c <__aeabi_dcmplt>
 800766e:	2800      	cmp	r0, #0
 8007670:	f040 8288 	bne.w	8007b84 <_dtoa_r+0x98c>
 8007674:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007678:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800767c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800767e:	2b00      	cmp	r3, #0
 8007680:	f2c0 8158 	blt.w	8007934 <_dtoa_r+0x73c>
 8007684:	f1ba 0f0e 	cmp.w	sl, #14
 8007688:	f300 8154 	bgt.w	8007934 <_dtoa_r+0x73c>
 800768c:	4b6b      	ldr	r3, [pc, #428]	; (800783c <_dtoa_r+0x644>)
 800768e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007692:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007696:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007698:	2b00      	cmp	r3, #0
 800769a:	f280 80e3 	bge.w	8007864 <_dtoa_r+0x66c>
 800769e:	9b01      	ldr	r3, [sp, #4]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	f300 80df 	bgt.w	8007864 <_dtoa_r+0x66c>
 80076a6:	f040 826d 	bne.w	8007b84 <_dtoa_r+0x98c>
 80076aa:	4b69      	ldr	r3, [pc, #420]	; (8007850 <_dtoa_r+0x658>)
 80076ac:	2200      	movs	r2, #0
 80076ae:	4640      	mov	r0, r8
 80076b0:	4649      	mov	r1, r9
 80076b2:	f7f8 ffd1 	bl	8000658 <__aeabi_dmul>
 80076b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80076ba:	f7f9 fa53 	bl	8000b64 <__aeabi_dcmpge>
 80076be:	9e01      	ldr	r6, [sp, #4]
 80076c0:	4637      	mov	r7, r6
 80076c2:	2800      	cmp	r0, #0
 80076c4:	f040 8243 	bne.w	8007b4e <_dtoa_r+0x956>
 80076c8:	9d00      	ldr	r5, [sp, #0]
 80076ca:	2331      	movs	r3, #49	; 0x31
 80076cc:	f805 3b01 	strb.w	r3, [r5], #1
 80076d0:	f10a 0a01 	add.w	sl, sl, #1
 80076d4:	e23f      	b.n	8007b56 <_dtoa_r+0x95e>
 80076d6:	07f2      	lsls	r2, r6, #31
 80076d8:	d505      	bpl.n	80076e6 <_dtoa_r+0x4ee>
 80076da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076de:	f7f8 ffbb 	bl	8000658 <__aeabi_dmul>
 80076e2:	3501      	adds	r5, #1
 80076e4:	2301      	movs	r3, #1
 80076e6:	1076      	asrs	r6, r6, #1
 80076e8:	3708      	adds	r7, #8
 80076ea:	e76c      	b.n	80075c6 <_dtoa_r+0x3ce>
 80076ec:	2502      	movs	r5, #2
 80076ee:	e76f      	b.n	80075d0 <_dtoa_r+0x3d8>
 80076f0:	9b01      	ldr	r3, [sp, #4]
 80076f2:	f8cd a01c 	str.w	sl, [sp, #28]
 80076f6:	930c      	str	r3, [sp, #48]	; 0x30
 80076f8:	e78d      	b.n	8007616 <_dtoa_r+0x41e>
 80076fa:	9900      	ldr	r1, [sp, #0]
 80076fc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80076fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007700:	4b4e      	ldr	r3, [pc, #312]	; (800783c <_dtoa_r+0x644>)
 8007702:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007706:	4401      	add	r1, r0
 8007708:	9102      	str	r1, [sp, #8]
 800770a:	9908      	ldr	r1, [sp, #32]
 800770c:	eeb0 8a47 	vmov.f32	s16, s14
 8007710:	eef0 8a67 	vmov.f32	s17, s15
 8007714:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007718:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800771c:	2900      	cmp	r1, #0
 800771e:	d045      	beq.n	80077ac <_dtoa_r+0x5b4>
 8007720:	494c      	ldr	r1, [pc, #304]	; (8007854 <_dtoa_r+0x65c>)
 8007722:	2000      	movs	r0, #0
 8007724:	f7f9 f8c2 	bl	80008ac <__aeabi_ddiv>
 8007728:	ec53 2b18 	vmov	r2, r3, d8
 800772c:	f7f8 fddc 	bl	80002e8 <__aeabi_dsub>
 8007730:	9d00      	ldr	r5, [sp, #0]
 8007732:	ec41 0b18 	vmov	d8, r0, r1
 8007736:	4639      	mov	r1, r7
 8007738:	4630      	mov	r0, r6
 800773a:	f7f9 fa3d 	bl	8000bb8 <__aeabi_d2iz>
 800773e:	900c      	str	r0, [sp, #48]	; 0x30
 8007740:	f7f8 ff20 	bl	8000584 <__aeabi_i2d>
 8007744:	4602      	mov	r2, r0
 8007746:	460b      	mov	r3, r1
 8007748:	4630      	mov	r0, r6
 800774a:	4639      	mov	r1, r7
 800774c:	f7f8 fdcc 	bl	80002e8 <__aeabi_dsub>
 8007750:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007752:	3330      	adds	r3, #48	; 0x30
 8007754:	f805 3b01 	strb.w	r3, [r5], #1
 8007758:	ec53 2b18 	vmov	r2, r3, d8
 800775c:	4606      	mov	r6, r0
 800775e:	460f      	mov	r7, r1
 8007760:	f7f9 f9ec 	bl	8000b3c <__aeabi_dcmplt>
 8007764:	2800      	cmp	r0, #0
 8007766:	d165      	bne.n	8007834 <_dtoa_r+0x63c>
 8007768:	4632      	mov	r2, r6
 800776a:	463b      	mov	r3, r7
 800776c:	4935      	ldr	r1, [pc, #212]	; (8007844 <_dtoa_r+0x64c>)
 800776e:	2000      	movs	r0, #0
 8007770:	f7f8 fdba 	bl	80002e8 <__aeabi_dsub>
 8007774:	ec53 2b18 	vmov	r2, r3, d8
 8007778:	f7f9 f9e0 	bl	8000b3c <__aeabi_dcmplt>
 800777c:	2800      	cmp	r0, #0
 800777e:	f040 80b9 	bne.w	80078f4 <_dtoa_r+0x6fc>
 8007782:	9b02      	ldr	r3, [sp, #8]
 8007784:	429d      	cmp	r5, r3
 8007786:	f43f af75 	beq.w	8007674 <_dtoa_r+0x47c>
 800778a:	4b2f      	ldr	r3, [pc, #188]	; (8007848 <_dtoa_r+0x650>)
 800778c:	ec51 0b18 	vmov	r0, r1, d8
 8007790:	2200      	movs	r2, #0
 8007792:	f7f8 ff61 	bl	8000658 <__aeabi_dmul>
 8007796:	4b2c      	ldr	r3, [pc, #176]	; (8007848 <_dtoa_r+0x650>)
 8007798:	ec41 0b18 	vmov	d8, r0, r1
 800779c:	2200      	movs	r2, #0
 800779e:	4630      	mov	r0, r6
 80077a0:	4639      	mov	r1, r7
 80077a2:	f7f8 ff59 	bl	8000658 <__aeabi_dmul>
 80077a6:	4606      	mov	r6, r0
 80077a8:	460f      	mov	r7, r1
 80077aa:	e7c4      	b.n	8007736 <_dtoa_r+0x53e>
 80077ac:	ec51 0b17 	vmov	r0, r1, d7
 80077b0:	f7f8 ff52 	bl	8000658 <__aeabi_dmul>
 80077b4:	9b02      	ldr	r3, [sp, #8]
 80077b6:	9d00      	ldr	r5, [sp, #0]
 80077b8:	930c      	str	r3, [sp, #48]	; 0x30
 80077ba:	ec41 0b18 	vmov	d8, r0, r1
 80077be:	4639      	mov	r1, r7
 80077c0:	4630      	mov	r0, r6
 80077c2:	f7f9 f9f9 	bl	8000bb8 <__aeabi_d2iz>
 80077c6:	9011      	str	r0, [sp, #68]	; 0x44
 80077c8:	f7f8 fedc 	bl	8000584 <__aeabi_i2d>
 80077cc:	4602      	mov	r2, r0
 80077ce:	460b      	mov	r3, r1
 80077d0:	4630      	mov	r0, r6
 80077d2:	4639      	mov	r1, r7
 80077d4:	f7f8 fd88 	bl	80002e8 <__aeabi_dsub>
 80077d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80077da:	3330      	adds	r3, #48	; 0x30
 80077dc:	f805 3b01 	strb.w	r3, [r5], #1
 80077e0:	9b02      	ldr	r3, [sp, #8]
 80077e2:	429d      	cmp	r5, r3
 80077e4:	4606      	mov	r6, r0
 80077e6:	460f      	mov	r7, r1
 80077e8:	f04f 0200 	mov.w	r2, #0
 80077ec:	d134      	bne.n	8007858 <_dtoa_r+0x660>
 80077ee:	4b19      	ldr	r3, [pc, #100]	; (8007854 <_dtoa_r+0x65c>)
 80077f0:	ec51 0b18 	vmov	r0, r1, d8
 80077f4:	f7f8 fd7a 	bl	80002ec <__adddf3>
 80077f8:	4602      	mov	r2, r0
 80077fa:	460b      	mov	r3, r1
 80077fc:	4630      	mov	r0, r6
 80077fe:	4639      	mov	r1, r7
 8007800:	f7f9 f9ba 	bl	8000b78 <__aeabi_dcmpgt>
 8007804:	2800      	cmp	r0, #0
 8007806:	d175      	bne.n	80078f4 <_dtoa_r+0x6fc>
 8007808:	ec53 2b18 	vmov	r2, r3, d8
 800780c:	4911      	ldr	r1, [pc, #68]	; (8007854 <_dtoa_r+0x65c>)
 800780e:	2000      	movs	r0, #0
 8007810:	f7f8 fd6a 	bl	80002e8 <__aeabi_dsub>
 8007814:	4602      	mov	r2, r0
 8007816:	460b      	mov	r3, r1
 8007818:	4630      	mov	r0, r6
 800781a:	4639      	mov	r1, r7
 800781c:	f7f9 f98e 	bl	8000b3c <__aeabi_dcmplt>
 8007820:	2800      	cmp	r0, #0
 8007822:	f43f af27 	beq.w	8007674 <_dtoa_r+0x47c>
 8007826:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007828:	1e6b      	subs	r3, r5, #1
 800782a:	930c      	str	r3, [sp, #48]	; 0x30
 800782c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007830:	2b30      	cmp	r3, #48	; 0x30
 8007832:	d0f8      	beq.n	8007826 <_dtoa_r+0x62e>
 8007834:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007838:	e04a      	b.n	80078d0 <_dtoa_r+0x6d8>
 800783a:	bf00      	nop
 800783c:	080092f8 	.word	0x080092f8
 8007840:	080092d0 	.word	0x080092d0
 8007844:	3ff00000 	.word	0x3ff00000
 8007848:	40240000 	.word	0x40240000
 800784c:	401c0000 	.word	0x401c0000
 8007850:	40140000 	.word	0x40140000
 8007854:	3fe00000 	.word	0x3fe00000
 8007858:	4baf      	ldr	r3, [pc, #700]	; (8007b18 <_dtoa_r+0x920>)
 800785a:	f7f8 fefd 	bl	8000658 <__aeabi_dmul>
 800785e:	4606      	mov	r6, r0
 8007860:	460f      	mov	r7, r1
 8007862:	e7ac      	b.n	80077be <_dtoa_r+0x5c6>
 8007864:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007868:	9d00      	ldr	r5, [sp, #0]
 800786a:	4642      	mov	r2, r8
 800786c:	464b      	mov	r3, r9
 800786e:	4630      	mov	r0, r6
 8007870:	4639      	mov	r1, r7
 8007872:	f7f9 f81b 	bl	80008ac <__aeabi_ddiv>
 8007876:	f7f9 f99f 	bl	8000bb8 <__aeabi_d2iz>
 800787a:	9002      	str	r0, [sp, #8]
 800787c:	f7f8 fe82 	bl	8000584 <__aeabi_i2d>
 8007880:	4642      	mov	r2, r8
 8007882:	464b      	mov	r3, r9
 8007884:	f7f8 fee8 	bl	8000658 <__aeabi_dmul>
 8007888:	4602      	mov	r2, r0
 800788a:	460b      	mov	r3, r1
 800788c:	4630      	mov	r0, r6
 800788e:	4639      	mov	r1, r7
 8007890:	f7f8 fd2a 	bl	80002e8 <__aeabi_dsub>
 8007894:	9e02      	ldr	r6, [sp, #8]
 8007896:	9f01      	ldr	r7, [sp, #4]
 8007898:	3630      	adds	r6, #48	; 0x30
 800789a:	f805 6b01 	strb.w	r6, [r5], #1
 800789e:	9e00      	ldr	r6, [sp, #0]
 80078a0:	1bae      	subs	r6, r5, r6
 80078a2:	42b7      	cmp	r7, r6
 80078a4:	4602      	mov	r2, r0
 80078a6:	460b      	mov	r3, r1
 80078a8:	d137      	bne.n	800791a <_dtoa_r+0x722>
 80078aa:	f7f8 fd1f 	bl	80002ec <__adddf3>
 80078ae:	4642      	mov	r2, r8
 80078b0:	464b      	mov	r3, r9
 80078b2:	4606      	mov	r6, r0
 80078b4:	460f      	mov	r7, r1
 80078b6:	f7f9 f95f 	bl	8000b78 <__aeabi_dcmpgt>
 80078ba:	b9c8      	cbnz	r0, 80078f0 <_dtoa_r+0x6f8>
 80078bc:	4642      	mov	r2, r8
 80078be:	464b      	mov	r3, r9
 80078c0:	4630      	mov	r0, r6
 80078c2:	4639      	mov	r1, r7
 80078c4:	f7f9 f930 	bl	8000b28 <__aeabi_dcmpeq>
 80078c8:	b110      	cbz	r0, 80078d0 <_dtoa_r+0x6d8>
 80078ca:	9b02      	ldr	r3, [sp, #8]
 80078cc:	07d9      	lsls	r1, r3, #31
 80078ce:	d40f      	bmi.n	80078f0 <_dtoa_r+0x6f8>
 80078d0:	4620      	mov	r0, r4
 80078d2:	4659      	mov	r1, fp
 80078d4:	f000 fcf6 	bl	80082c4 <_Bfree>
 80078d8:	2300      	movs	r3, #0
 80078da:	702b      	strb	r3, [r5, #0]
 80078dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80078de:	f10a 0001 	add.w	r0, sl, #1
 80078e2:	6018      	str	r0, [r3, #0]
 80078e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	f43f acd8 	beq.w	800729c <_dtoa_r+0xa4>
 80078ec:	601d      	str	r5, [r3, #0]
 80078ee:	e4d5      	b.n	800729c <_dtoa_r+0xa4>
 80078f0:	f8cd a01c 	str.w	sl, [sp, #28]
 80078f4:	462b      	mov	r3, r5
 80078f6:	461d      	mov	r5, r3
 80078f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80078fc:	2a39      	cmp	r2, #57	; 0x39
 80078fe:	d108      	bne.n	8007912 <_dtoa_r+0x71a>
 8007900:	9a00      	ldr	r2, [sp, #0]
 8007902:	429a      	cmp	r2, r3
 8007904:	d1f7      	bne.n	80078f6 <_dtoa_r+0x6fe>
 8007906:	9a07      	ldr	r2, [sp, #28]
 8007908:	9900      	ldr	r1, [sp, #0]
 800790a:	3201      	adds	r2, #1
 800790c:	9207      	str	r2, [sp, #28]
 800790e:	2230      	movs	r2, #48	; 0x30
 8007910:	700a      	strb	r2, [r1, #0]
 8007912:	781a      	ldrb	r2, [r3, #0]
 8007914:	3201      	adds	r2, #1
 8007916:	701a      	strb	r2, [r3, #0]
 8007918:	e78c      	b.n	8007834 <_dtoa_r+0x63c>
 800791a:	4b7f      	ldr	r3, [pc, #508]	; (8007b18 <_dtoa_r+0x920>)
 800791c:	2200      	movs	r2, #0
 800791e:	f7f8 fe9b 	bl	8000658 <__aeabi_dmul>
 8007922:	2200      	movs	r2, #0
 8007924:	2300      	movs	r3, #0
 8007926:	4606      	mov	r6, r0
 8007928:	460f      	mov	r7, r1
 800792a:	f7f9 f8fd 	bl	8000b28 <__aeabi_dcmpeq>
 800792e:	2800      	cmp	r0, #0
 8007930:	d09b      	beq.n	800786a <_dtoa_r+0x672>
 8007932:	e7cd      	b.n	80078d0 <_dtoa_r+0x6d8>
 8007934:	9a08      	ldr	r2, [sp, #32]
 8007936:	2a00      	cmp	r2, #0
 8007938:	f000 80c4 	beq.w	8007ac4 <_dtoa_r+0x8cc>
 800793c:	9a05      	ldr	r2, [sp, #20]
 800793e:	2a01      	cmp	r2, #1
 8007940:	f300 80a8 	bgt.w	8007a94 <_dtoa_r+0x89c>
 8007944:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007946:	2a00      	cmp	r2, #0
 8007948:	f000 80a0 	beq.w	8007a8c <_dtoa_r+0x894>
 800794c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007950:	9e06      	ldr	r6, [sp, #24]
 8007952:	4645      	mov	r5, r8
 8007954:	9a04      	ldr	r2, [sp, #16]
 8007956:	2101      	movs	r1, #1
 8007958:	441a      	add	r2, r3
 800795a:	4620      	mov	r0, r4
 800795c:	4498      	add	r8, r3
 800795e:	9204      	str	r2, [sp, #16]
 8007960:	f000 fd6c 	bl	800843c <__i2b>
 8007964:	4607      	mov	r7, r0
 8007966:	2d00      	cmp	r5, #0
 8007968:	dd0b      	ble.n	8007982 <_dtoa_r+0x78a>
 800796a:	9b04      	ldr	r3, [sp, #16]
 800796c:	2b00      	cmp	r3, #0
 800796e:	dd08      	ble.n	8007982 <_dtoa_r+0x78a>
 8007970:	42ab      	cmp	r3, r5
 8007972:	9a04      	ldr	r2, [sp, #16]
 8007974:	bfa8      	it	ge
 8007976:	462b      	movge	r3, r5
 8007978:	eba8 0803 	sub.w	r8, r8, r3
 800797c:	1aed      	subs	r5, r5, r3
 800797e:	1ad3      	subs	r3, r2, r3
 8007980:	9304      	str	r3, [sp, #16]
 8007982:	9b06      	ldr	r3, [sp, #24]
 8007984:	b1fb      	cbz	r3, 80079c6 <_dtoa_r+0x7ce>
 8007986:	9b08      	ldr	r3, [sp, #32]
 8007988:	2b00      	cmp	r3, #0
 800798a:	f000 809f 	beq.w	8007acc <_dtoa_r+0x8d4>
 800798e:	2e00      	cmp	r6, #0
 8007990:	dd11      	ble.n	80079b6 <_dtoa_r+0x7be>
 8007992:	4639      	mov	r1, r7
 8007994:	4632      	mov	r2, r6
 8007996:	4620      	mov	r0, r4
 8007998:	f000 fe0c 	bl	80085b4 <__pow5mult>
 800799c:	465a      	mov	r2, fp
 800799e:	4601      	mov	r1, r0
 80079a0:	4607      	mov	r7, r0
 80079a2:	4620      	mov	r0, r4
 80079a4:	f000 fd60 	bl	8008468 <__multiply>
 80079a8:	4659      	mov	r1, fp
 80079aa:	9007      	str	r0, [sp, #28]
 80079ac:	4620      	mov	r0, r4
 80079ae:	f000 fc89 	bl	80082c4 <_Bfree>
 80079b2:	9b07      	ldr	r3, [sp, #28]
 80079b4:	469b      	mov	fp, r3
 80079b6:	9b06      	ldr	r3, [sp, #24]
 80079b8:	1b9a      	subs	r2, r3, r6
 80079ba:	d004      	beq.n	80079c6 <_dtoa_r+0x7ce>
 80079bc:	4659      	mov	r1, fp
 80079be:	4620      	mov	r0, r4
 80079c0:	f000 fdf8 	bl	80085b4 <__pow5mult>
 80079c4:	4683      	mov	fp, r0
 80079c6:	2101      	movs	r1, #1
 80079c8:	4620      	mov	r0, r4
 80079ca:	f000 fd37 	bl	800843c <__i2b>
 80079ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	4606      	mov	r6, r0
 80079d4:	dd7c      	ble.n	8007ad0 <_dtoa_r+0x8d8>
 80079d6:	461a      	mov	r2, r3
 80079d8:	4601      	mov	r1, r0
 80079da:	4620      	mov	r0, r4
 80079dc:	f000 fdea 	bl	80085b4 <__pow5mult>
 80079e0:	9b05      	ldr	r3, [sp, #20]
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	4606      	mov	r6, r0
 80079e6:	dd76      	ble.n	8007ad6 <_dtoa_r+0x8de>
 80079e8:	2300      	movs	r3, #0
 80079ea:	9306      	str	r3, [sp, #24]
 80079ec:	6933      	ldr	r3, [r6, #16]
 80079ee:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80079f2:	6918      	ldr	r0, [r3, #16]
 80079f4:	f000 fcd2 	bl	800839c <__hi0bits>
 80079f8:	f1c0 0020 	rsb	r0, r0, #32
 80079fc:	9b04      	ldr	r3, [sp, #16]
 80079fe:	4418      	add	r0, r3
 8007a00:	f010 001f 	ands.w	r0, r0, #31
 8007a04:	f000 8086 	beq.w	8007b14 <_dtoa_r+0x91c>
 8007a08:	f1c0 0320 	rsb	r3, r0, #32
 8007a0c:	2b04      	cmp	r3, #4
 8007a0e:	dd7f      	ble.n	8007b10 <_dtoa_r+0x918>
 8007a10:	f1c0 001c 	rsb	r0, r0, #28
 8007a14:	9b04      	ldr	r3, [sp, #16]
 8007a16:	4403      	add	r3, r0
 8007a18:	4480      	add	r8, r0
 8007a1a:	4405      	add	r5, r0
 8007a1c:	9304      	str	r3, [sp, #16]
 8007a1e:	f1b8 0f00 	cmp.w	r8, #0
 8007a22:	dd05      	ble.n	8007a30 <_dtoa_r+0x838>
 8007a24:	4659      	mov	r1, fp
 8007a26:	4642      	mov	r2, r8
 8007a28:	4620      	mov	r0, r4
 8007a2a:	f000 fe1d 	bl	8008668 <__lshift>
 8007a2e:	4683      	mov	fp, r0
 8007a30:	9b04      	ldr	r3, [sp, #16]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	dd05      	ble.n	8007a42 <_dtoa_r+0x84a>
 8007a36:	4631      	mov	r1, r6
 8007a38:	461a      	mov	r2, r3
 8007a3a:	4620      	mov	r0, r4
 8007a3c:	f000 fe14 	bl	8008668 <__lshift>
 8007a40:	4606      	mov	r6, r0
 8007a42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d069      	beq.n	8007b1c <_dtoa_r+0x924>
 8007a48:	4631      	mov	r1, r6
 8007a4a:	4658      	mov	r0, fp
 8007a4c:	f000 fe78 	bl	8008740 <__mcmp>
 8007a50:	2800      	cmp	r0, #0
 8007a52:	da63      	bge.n	8007b1c <_dtoa_r+0x924>
 8007a54:	2300      	movs	r3, #0
 8007a56:	4659      	mov	r1, fp
 8007a58:	220a      	movs	r2, #10
 8007a5a:	4620      	mov	r0, r4
 8007a5c:	f000 fc54 	bl	8008308 <__multadd>
 8007a60:	9b08      	ldr	r3, [sp, #32]
 8007a62:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007a66:	4683      	mov	fp, r0
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	f000 818f 	beq.w	8007d8c <_dtoa_r+0xb94>
 8007a6e:	4639      	mov	r1, r7
 8007a70:	2300      	movs	r3, #0
 8007a72:	220a      	movs	r2, #10
 8007a74:	4620      	mov	r0, r4
 8007a76:	f000 fc47 	bl	8008308 <__multadd>
 8007a7a:	f1b9 0f00 	cmp.w	r9, #0
 8007a7e:	4607      	mov	r7, r0
 8007a80:	f300 808e 	bgt.w	8007ba0 <_dtoa_r+0x9a8>
 8007a84:	9b05      	ldr	r3, [sp, #20]
 8007a86:	2b02      	cmp	r3, #2
 8007a88:	dc50      	bgt.n	8007b2c <_dtoa_r+0x934>
 8007a8a:	e089      	b.n	8007ba0 <_dtoa_r+0x9a8>
 8007a8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007a8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007a92:	e75d      	b.n	8007950 <_dtoa_r+0x758>
 8007a94:	9b01      	ldr	r3, [sp, #4]
 8007a96:	1e5e      	subs	r6, r3, #1
 8007a98:	9b06      	ldr	r3, [sp, #24]
 8007a9a:	42b3      	cmp	r3, r6
 8007a9c:	bfbf      	itttt	lt
 8007a9e:	9b06      	ldrlt	r3, [sp, #24]
 8007aa0:	9606      	strlt	r6, [sp, #24]
 8007aa2:	1af2      	sublt	r2, r6, r3
 8007aa4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8007aa6:	bfb6      	itet	lt
 8007aa8:	189b      	addlt	r3, r3, r2
 8007aaa:	1b9e      	subge	r6, r3, r6
 8007aac:	930d      	strlt	r3, [sp, #52]	; 0x34
 8007aae:	9b01      	ldr	r3, [sp, #4]
 8007ab0:	bfb8      	it	lt
 8007ab2:	2600      	movlt	r6, #0
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	bfb5      	itete	lt
 8007ab8:	eba8 0503 	sublt.w	r5, r8, r3
 8007abc:	9b01      	ldrge	r3, [sp, #4]
 8007abe:	2300      	movlt	r3, #0
 8007ac0:	4645      	movge	r5, r8
 8007ac2:	e747      	b.n	8007954 <_dtoa_r+0x75c>
 8007ac4:	9e06      	ldr	r6, [sp, #24]
 8007ac6:	9f08      	ldr	r7, [sp, #32]
 8007ac8:	4645      	mov	r5, r8
 8007aca:	e74c      	b.n	8007966 <_dtoa_r+0x76e>
 8007acc:	9a06      	ldr	r2, [sp, #24]
 8007ace:	e775      	b.n	80079bc <_dtoa_r+0x7c4>
 8007ad0:	9b05      	ldr	r3, [sp, #20]
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	dc18      	bgt.n	8007b08 <_dtoa_r+0x910>
 8007ad6:	9b02      	ldr	r3, [sp, #8]
 8007ad8:	b9b3      	cbnz	r3, 8007b08 <_dtoa_r+0x910>
 8007ada:	9b03      	ldr	r3, [sp, #12]
 8007adc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ae0:	b9a3      	cbnz	r3, 8007b0c <_dtoa_r+0x914>
 8007ae2:	9b03      	ldr	r3, [sp, #12]
 8007ae4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ae8:	0d1b      	lsrs	r3, r3, #20
 8007aea:	051b      	lsls	r3, r3, #20
 8007aec:	b12b      	cbz	r3, 8007afa <_dtoa_r+0x902>
 8007aee:	9b04      	ldr	r3, [sp, #16]
 8007af0:	3301      	adds	r3, #1
 8007af2:	9304      	str	r3, [sp, #16]
 8007af4:	f108 0801 	add.w	r8, r8, #1
 8007af8:	2301      	movs	r3, #1
 8007afa:	9306      	str	r3, [sp, #24]
 8007afc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	f47f af74 	bne.w	80079ec <_dtoa_r+0x7f4>
 8007b04:	2001      	movs	r0, #1
 8007b06:	e779      	b.n	80079fc <_dtoa_r+0x804>
 8007b08:	2300      	movs	r3, #0
 8007b0a:	e7f6      	b.n	8007afa <_dtoa_r+0x902>
 8007b0c:	9b02      	ldr	r3, [sp, #8]
 8007b0e:	e7f4      	b.n	8007afa <_dtoa_r+0x902>
 8007b10:	d085      	beq.n	8007a1e <_dtoa_r+0x826>
 8007b12:	4618      	mov	r0, r3
 8007b14:	301c      	adds	r0, #28
 8007b16:	e77d      	b.n	8007a14 <_dtoa_r+0x81c>
 8007b18:	40240000 	.word	0x40240000
 8007b1c:	9b01      	ldr	r3, [sp, #4]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	dc38      	bgt.n	8007b94 <_dtoa_r+0x99c>
 8007b22:	9b05      	ldr	r3, [sp, #20]
 8007b24:	2b02      	cmp	r3, #2
 8007b26:	dd35      	ble.n	8007b94 <_dtoa_r+0x99c>
 8007b28:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007b2c:	f1b9 0f00 	cmp.w	r9, #0
 8007b30:	d10d      	bne.n	8007b4e <_dtoa_r+0x956>
 8007b32:	4631      	mov	r1, r6
 8007b34:	464b      	mov	r3, r9
 8007b36:	2205      	movs	r2, #5
 8007b38:	4620      	mov	r0, r4
 8007b3a:	f000 fbe5 	bl	8008308 <__multadd>
 8007b3e:	4601      	mov	r1, r0
 8007b40:	4606      	mov	r6, r0
 8007b42:	4658      	mov	r0, fp
 8007b44:	f000 fdfc 	bl	8008740 <__mcmp>
 8007b48:	2800      	cmp	r0, #0
 8007b4a:	f73f adbd 	bgt.w	80076c8 <_dtoa_r+0x4d0>
 8007b4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b50:	9d00      	ldr	r5, [sp, #0]
 8007b52:	ea6f 0a03 	mvn.w	sl, r3
 8007b56:	f04f 0800 	mov.w	r8, #0
 8007b5a:	4631      	mov	r1, r6
 8007b5c:	4620      	mov	r0, r4
 8007b5e:	f000 fbb1 	bl	80082c4 <_Bfree>
 8007b62:	2f00      	cmp	r7, #0
 8007b64:	f43f aeb4 	beq.w	80078d0 <_dtoa_r+0x6d8>
 8007b68:	f1b8 0f00 	cmp.w	r8, #0
 8007b6c:	d005      	beq.n	8007b7a <_dtoa_r+0x982>
 8007b6e:	45b8      	cmp	r8, r7
 8007b70:	d003      	beq.n	8007b7a <_dtoa_r+0x982>
 8007b72:	4641      	mov	r1, r8
 8007b74:	4620      	mov	r0, r4
 8007b76:	f000 fba5 	bl	80082c4 <_Bfree>
 8007b7a:	4639      	mov	r1, r7
 8007b7c:	4620      	mov	r0, r4
 8007b7e:	f000 fba1 	bl	80082c4 <_Bfree>
 8007b82:	e6a5      	b.n	80078d0 <_dtoa_r+0x6d8>
 8007b84:	2600      	movs	r6, #0
 8007b86:	4637      	mov	r7, r6
 8007b88:	e7e1      	b.n	8007b4e <_dtoa_r+0x956>
 8007b8a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007b8c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007b90:	4637      	mov	r7, r6
 8007b92:	e599      	b.n	80076c8 <_dtoa_r+0x4d0>
 8007b94:	9b08      	ldr	r3, [sp, #32]
 8007b96:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	f000 80fd 	beq.w	8007d9a <_dtoa_r+0xba2>
 8007ba0:	2d00      	cmp	r5, #0
 8007ba2:	dd05      	ble.n	8007bb0 <_dtoa_r+0x9b8>
 8007ba4:	4639      	mov	r1, r7
 8007ba6:	462a      	mov	r2, r5
 8007ba8:	4620      	mov	r0, r4
 8007baa:	f000 fd5d 	bl	8008668 <__lshift>
 8007bae:	4607      	mov	r7, r0
 8007bb0:	9b06      	ldr	r3, [sp, #24]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d05c      	beq.n	8007c70 <_dtoa_r+0xa78>
 8007bb6:	6879      	ldr	r1, [r7, #4]
 8007bb8:	4620      	mov	r0, r4
 8007bba:	f000 fb43 	bl	8008244 <_Balloc>
 8007bbe:	4605      	mov	r5, r0
 8007bc0:	b928      	cbnz	r0, 8007bce <_dtoa_r+0x9d6>
 8007bc2:	4b80      	ldr	r3, [pc, #512]	; (8007dc4 <_dtoa_r+0xbcc>)
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007bca:	f7ff bb2e 	b.w	800722a <_dtoa_r+0x32>
 8007bce:	693a      	ldr	r2, [r7, #16]
 8007bd0:	3202      	adds	r2, #2
 8007bd2:	0092      	lsls	r2, r2, #2
 8007bd4:	f107 010c 	add.w	r1, r7, #12
 8007bd8:	300c      	adds	r0, #12
 8007bda:	f000 fb25 	bl	8008228 <memcpy>
 8007bde:	2201      	movs	r2, #1
 8007be0:	4629      	mov	r1, r5
 8007be2:	4620      	mov	r0, r4
 8007be4:	f000 fd40 	bl	8008668 <__lshift>
 8007be8:	9b00      	ldr	r3, [sp, #0]
 8007bea:	3301      	adds	r3, #1
 8007bec:	9301      	str	r3, [sp, #4]
 8007bee:	9b00      	ldr	r3, [sp, #0]
 8007bf0:	444b      	add	r3, r9
 8007bf2:	9307      	str	r3, [sp, #28]
 8007bf4:	9b02      	ldr	r3, [sp, #8]
 8007bf6:	f003 0301 	and.w	r3, r3, #1
 8007bfa:	46b8      	mov	r8, r7
 8007bfc:	9306      	str	r3, [sp, #24]
 8007bfe:	4607      	mov	r7, r0
 8007c00:	9b01      	ldr	r3, [sp, #4]
 8007c02:	4631      	mov	r1, r6
 8007c04:	3b01      	subs	r3, #1
 8007c06:	4658      	mov	r0, fp
 8007c08:	9302      	str	r3, [sp, #8]
 8007c0a:	f7ff fa69 	bl	80070e0 <quorem>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	3330      	adds	r3, #48	; 0x30
 8007c12:	9004      	str	r0, [sp, #16]
 8007c14:	4641      	mov	r1, r8
 8007c16:	4658      	mov	r0, fp
 8007c18:	9308      	str	r3, [sp, #32]
 8007c1a:	f000 fd91 	bl	8008740 <__mcmp>
 8007c1e:	463a      	mov	r2, r7
 8007c20:	4681      	mov	r9, r0
 8007c22:	4631      	mov	r1, r6
 8007c24:	4620      	mov	r0, r4
 8007c26:	f000 fda7 	bl	8008778 <__mdiff>
 8007c2a:	68c2      	ldr	r2, [r0, #12]
 8007c2c:	9b08      	ldr	r3, [sp, #32]
 8007c2e:	4605      	mov	r5, r0
 8007c30:	bb02      	cbnz	r2, 8007c74 <_dtoa_r+0xa7c>
 8007c32:	4601      	mov	r1, r0
 8007c34:	4658      	mov	r0, fp
 8007c36:	f000 fd83 	bl	8008740 <__mcmp>
 8007c3a:	9b08      	ldr	r3, [sp, #32]
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	4629      	mov	r1, r5
 8007c40:	4620      	mov	r0, r4
 8007c42:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8007c46:	f000 fb3d 	bl	80082c4 <_Bfree>
 8007c4a:	9b05      	ldr	r3, [sp, #20]
 8007c4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c4e:	9d01      	ldr	r5, [sp, #4]
 8007c50:	ea43 0102 	orr.w	r1, r3, r2
 8007c54:	9b06      	ldr	r3, [sp, #24]
 8007c56:	430b      	orrs	r3, r1
 8007c58:	9b08      	ldr	r3, [sp, #32]
 8007c5a:	d10d      	bne.n	8007c78 <_dtoa_r+0xa80>
 8007c5c:	2b39      	cmp	r3, #57	; 0x39
 8007c5e:	d029      	beq.n	8007cb4 <_dtoa_r+0xabc>
 8007c60:	f1b9 0f00 	cmp.w	r9, #0
 8007c64:	dd01      	ble.n	8007c6a <_dtoa_r+0xa72>
 8007c66:	9b04      	ldr	r3, [sp, #16]
 8007c68:	3331      	adds	r3, #49	; 0x31
 8007c6a:	9a02      	ldr	r2, [sp, #8]
 8007c6c:	7013      	strb	r3, [r2, #0]
 8007c6e:	e774      	b.n	8007b5a <_dtoa_r+0x962>
 8007c70:	4638      	mov	r0, r7
 8007c72:	e7b9      	b.n	8007be8 <_dtoa_r+0x9f0>
 8007c74:	2201      	movs	r2, #1
 8007c76:	e7e2      	b.n	8007c3e <_dtoa_r+0xa46>
 8007c78:	f1b9 0f00 	cmp.w	r9, #0
 8007c7c:	db06      	blt.n	8007c8c <_dtoa_r+0xa94>
 8007c7e:	9905      	ldr	r1, [sp, #20]
 8007c80:	ea41 0909 	orr.w	r9, r1, r9
 8007c84:	9906      	ldr	r1, [sp, #24]
 8007c86:	ea59 0101 	orrs.w	r1, r9, r1
 8007c8a:	d120      	bne.n	8007cce <_dtoa_r+0xad6>
 8007c8c:	2a00      	cmp	r2, #0
 8007c8e:	ddec      	ble.n	8007c6a <_dtoa_r+0xa72>
 8007c90:	4659      	mov	r1, fp
 8007c92:	2201      	movs	r2, #1
 8007c94:	4620      	mov	r0, r4
 8007c96:	9301      	str	r3, [sp, #4]
 8007c98:	f000 fce6 	bl	8008668 <__lshift>
 8007c9c:	4631      	mov	r1, r6
 8007c9e:	4683      	mov	fp, r0
 8007ca0:	f000 fd4e 	bl	8008740 <__mcmp>
 8007ca4:	2800      	cmp	r0, #0
 8007ca6:	9b01      	ldr	r3, [sp, #4]
 8007ca8:	dc02      	bgt.n	8007cb0 <_dtoa_r+0xab8>
 8007caa:	d1de      	bne.n	8007c6a <_dtoa_r+0xa72>
 8007cac:	07da      	lsls	r2, r3, #31
 8007cae:	d5dc      	bpl.n	8007c6a <_dtoa_r+0xa72>
 8007cb0:	2b39      	cmp	r3, #57	; 0x39
 8007cb2:	d1d8      	bne.n	8007c66 <_dtoa_r+0xa6e>
 8007cb4:	9a02      	ldr	r2, [sp, #8]
 8007cb6:	2339      	movs	r3, #57	; 0x39
 8007cb8:	7013      	strb	r3, [r2, #0]
 8007cba:	462b      	mov	r3, r5
 8007cbc:	461d      	mov	r5, r3
 8007cbe:	3b01      	subs	r3, #1
 8007cc0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007cc4:	2a39      	cmp	r2, #57	; 0x39
 8007cc6:	d050      	beq.n	8007d6a <_dtoa_r+0xb72>
 8007cc8:	3201      	adds	r2, #1
 8007cca:	701a      	strb	r2, [r3, #0]
 8007ccc:	e745      	b.n	8007b5a <_dtoa_r+0x962>
 8007cce:	2a00      	cmp	r2, #0
 8007cd0:	dd03      	ble.n	8007cda <_dtoa_r+0xae2>
 8007cd2:	2b39      	cmp	r3, #57	; 0x39
 8007cd4:	d0ee      	beq.n	8007cb4 <_dtoa_r+0xabc>
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	e7c7      	b.n	8007c6a <_dtoa_r+0xa72>
 8007cda:	9a01      	ldr	r2, [sp, #4]
 8007cdc:	9907      	ldr	r1, [sp, #28]
 8007cde:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007ce2:	428a      	cmp	r2, r1
 8007ce4:	d02a      	beq.n	8007d3c <_dtoa_r+0xb44>
 8007ce6:	4659      	mov	r1, fp
 8007ce8:	2300      	movs	r3, #0
 8007cea:	220a      	movs	r2, #10
 8007cec:	4620      	mov	r0, r4
 8007cee:	f000 fb0b 	bl	8008308 <__multadd>
 8007cf2:	45b8      	cmp	r8, r7
 8007cf4:	4683      	mov	fp, r0
 8007cf6:	f04f 0300 	mov.w	r3, #0
 8007cfa:	f04f 020a 	mov.w	r2, #10
 8007cfe:	4641      	mov	r1, r8
 8007d00:	4620      	mov	r0, r4
 8007d02:	d107      	bne.n	8007d14 <_dtoa_r+0xb1c>
 8007d04:	f000 fb00 	bl	8008308 <__multadd>
 8007d08:	4680      	mov	r8, r0
 8007d0a:	4607      	mov	r7, r0
 8007d0c:	9b01      	ldr	r3, [sp, #4]
 8007d0e:	3301      	adds	r3, #1
 8007d10:	9301      	str	r3, [sp, #4]
 8007d12:	e775      	b.n	8007c00 <_dtoa_r+0xa08>
 8007d14:	f000 faf8 	bl	8008308 <__multadd>
 8007d18:	4639      	mov	r1, r7
 8007d1a:	4680      	mov	r8, r0
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	220a      	movs	r2, #10
 8007d20:	4620      	mov	r0, r4
 8007d22:	f000 faf1 	bl	8008308 <__multadd>
 8007d26:	4607      	mov	r7, r0
 8007d28:	e7f0      	b.n	8007d0c <_dtoa_r+0xb14>
 8007d2a:	f1b9 0f00 	cmp.w	r9, #0
 8007d2e:	9a00      	ldr	r2, [sp, #0]
 8007d30:	bfcc      	ite	gt
 8007d32:	464d      	movgt	r5, r9
 8007d34:	2501      	movle	r5, #1
 8007d36:	4415      	add	r5, r2
 8007d38:	f04f 0800 	mov.w	r8, #0
 8007d3c:	4659      	mov	r1, fp
 8007d3e:	2201      	movs	r2, #1
 8007d40:	4620      	mov	r0, r4
 8007d42:	9301      	str	r3, [sp, #4]
 8007d44:	f000 fc90 	bl	8008668 <__lshift>
 8007d48:	4631      	mov	r1, r6
 8007d4a:	4683      	mov	fp, r0
 8007d4c:	f000 fcf8 	bl	8008740 <__mcmp>
 8007d50:	2800      	cmp	r0, #0
 8007d52:	dcb2      	bgt.n	8007cba <_dtoa_r+0xac2>
 8007d54:	d102      	bne.n	8007d5c <_dtoa_r+0xb64>
 8007d56:	9b01      	ldr	r3, [sp, #4]
 8007d58:	07db      	lsls	r3, r3, #31
 8007d5a:	d4ae      	bmi.n	8007cba <_dtoa_r+0xac2>
 8007d5c:	462b      	mov	r3, r5
 8007d5e:	461d      	mov	r5, r3
 8007d60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d64:	2a30      	cmp	r2, #48	; 0x30
 8007d66:	d0fa      	beq.n	8007d5e <_dtoa_r+0xb66>
 8007d68:	e6f7      	b.n	8007b5a <_dtoa_r+0x962>
 8007d6a:	9a00      	ldr	r2, [sp, #0]
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d1a5      	bne.n	8007cbc <_dtoa_r+0xac4>
 8007d70:	f10a 0a01 	add.w	sl, sl, #1
 8007d74:	2331      	movs	r3, #49	; 0x31
 8007d76:	e779      	b.n	8007c6c <_dtoa_r+0xa74>
 8007d78:	4b13      	ldr	r3, [pc, #76]	; (8007dc8 <_dtoa_r+0xbd0>)
 8007d7a:	f7ff baaf 	b.w	80072dc <_dtoa_r+0xe4>
 8007d7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	f47f aa86 	bne.w	8007292 <_dtoa_r+0x9a>
 8007d86:	4b11      	ldr	r3, [pc, #68]	; (8007dcc <_dtoa_r+0xbd4>)
 8007d88:	f7ff baa8 	b.w	80072dc <_dtoa_r+0xe4>
 8007d8c:	f1b9 0f00 	cmp.w	r9, #0
 8007d90:	dc03      	bgt.n	8007d9a <_dtoa_r+0xba2>
 8007d92:	9b05      	ldr	r3, [sp, #20]
 8007d94:	2b02      	cmp	r3, #2
 8007d96:	f73f aec9 	bgt.w	8007b2c <_dtoa_r+0x934>
 8007d9a:	9d00      	ldr	r5, [sp, #0]
 8007d9c:	4631      	mov	r1, r6
 8007d9e:	4658      	mov	r0, fp
 8007da0:	f7ff f99e 	bl	80070e0 <quorem>
 8007da4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007da8:	f805 3b01 	strb.w	r3, [r5], #1
 8007dac:	9a00      	ldr	r2, [sp, #0]
 8007dae:	1aaa      	subs	r2, r5, r2
 8007db0:	4591      	cmp	r9, r2
 8007db2:	ddba      	ble.n	8007d2a <_dtoa_r+0xb32>
 8007db4:	4659      	mov	r1, fp
 8007db6:	2300      	movs	r3, #0
 8007db8:	220a      	movs	r2, #10
 8007dba:	4620      	mov	r0, r4
 8007dbc:	f000 faa4 	bl	8008308 <__multadd>
 8007dc0:	4683      	mov	fp, r0
 8007dc2:	e7eb      	b.n	8007d9c <_dtoa_r+0xba4>
 8007dc4:	080091fb 	.word	0x080091fb
 8007dc8:	08009154 	.word	0x08009154
 8007dcc:	08009178 	.word	0x08009178

08007dd0 <__sflush_r>:
 8007dd0:	898a      	ldrh	r2, [r1, #12]
 8007dd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dd6:	4605      	mov	r5, r0
 8007dd8:	0710      	lsls	r0, r2, #28
 8007dda:	460c      	mov	r4, r1
 8007ddc:	d458      	bmi.n	8007e90 <__sflush_r+0xc0>
 8007dde:	684b      	ldr	r3, [r1, #4]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	dc05      	bgt.n	8007df0 <__sflush_r+0x20>
 8007de4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	dc02      	bgt.n	8007df0 <__sflush_r+0x20>
 8007dea:	2000      	movs	r0, #0
 8007dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007df0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007df2:	2e00      	cmp	r6, #0
 8007df4:	d0f9      	beq.n	8007dea <__sflush_r+0x1a>
 8007df6:	2300      	movs	r3, #0
 8007df8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007dfc:	682f      	ldr	r7, [r5, #0]
 8007dfe:	602b      	str	r3, [r5, #0]
 8007e00:	d032      	beq.n	8007e68 <__sflush_r+0x98>
 8007e02:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007e04:	89a3      	ldrh	r3, [r4, #12]
 8007e06:	075a      	lsls	r2, r3, #29
 8007e08:	d505      	bpl.n	8007e16 <__sflush_r+0x46>
 8007e0a:	6863      	ldr	r3, [r4, #4]
 8007e0c:	1ac0      	subs	r0, r0, r3
 8007e0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e10:	b10b      	cbz	r3, 8007e16 <__sflush_r+0x46>
 8007e12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e14:	1ac0      	subs	r0, r0, r3
 8007e16:	2300      	movs	r3, #0
 8007e18:	4602      	mov	r2, r0
 8007e1a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e1c:	6a21      	ldr	r1, [r4, #32]
 8007e1e:	4628      	mov	r0, r5
 8007e20:	47b0      	blx	r6
 8007e22:	1c43      	adds	r3, r0, #1
 8007e24:	89a3      	ldrh	r3, [r4, #12]
 8007e26:	d106      	bne.n	8007e36 <__sflush_r+0x66>
 8007e28:	6829      	ldr	r1, [r5, #0]
 8007e2a:	291d      	cmp	r1, #29
 8007e2c:	d82c      	bhi.n	8007e88 <__sflush_r+0xb8>
 8007e2e:	4a2a      	ldr	r2, [pc, #168]	; (8007ed8 <__sflush_r+0x108>)
 8007e30:	40ca      	lsrs	r2, r1
 8007e32:	07d6      	lsls	r6, r2, #31
 8007e34:	d528      	bpl.n	8007e88 <__sflush_r+0xb8>
 8007e36:	2200      	movs	r2, #0
 8007e38:	6062      	str	r2, [r4, #4]
 8007e3a:	04d9      	lsls	r1, r3, #19
 8007e3c:	6922      	ldr	r2, [r4, #16]
 8007e3e:	6022      	str	r2, [r4, #0]
 8007e40:	d504      	bpl.n	8007e4c <__sflush_r+0x7c>
 8007e42:	1c42      	adds	r2, r0, #1
 8007e44:	d101      	bne.n	8007e4a <__sflush_r+0x7a>
 8007e46:	682b      	ldr	r3, [r5, #0]
 8007e48:	b903      	cbnz	r3, 8007e4c <__sflush_r+0x7c>
 8007e4a:	6560      	str	r0, [r4, #84]	; 0x54
 8007e4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e4e:	602f      	str	r7, [r5, #0]
 8007e50:	2900      	cmp	r1, #0
 8007e52:	d0ca      	beq.n	8007dea <__sflush_r+0x1a>
 8007e54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e58:	4299      	cmp	r1, r3
 8007e5a:	d002      	beq.n	8007e62 <__sflush_r+0x92>
 8007e5c:	4628      	mov	r0, r5
 8007e5e:	f000 fd7f 	bl	8008960 <_free_r>
 8007e62:	2000      	movs	r0, #0
 8007e64:	6360      	str	r0, [r4, #52]	; 0x34
 8007e66:	e7c1      	b.n	8007dec <__sflush_r+0x1c>
 8007e68:	6a21      	ldr	r1, [r4, #32]
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	4628      	mov	r0, r5
 8007e6e:	47b0      	blx	r6
 8007e70:	1c41      	adds	r1, r0, #1
 8007e72:	d1c7      	bne.n	8007e04 <__sflush_r+0x34>
 8007e74:	682b      	ldr	r3, [r5, #0]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d0c4      	beq.n	8007e04 <__sflush_r+0x34>
 8007e7a:	2b1d      	cmp	r3, #29
 8007e7c:	d001      	beq.n	8007e82 <__sflush_r+0xb2>
 8007e7e:	2b16      	cmp	r3, #22
 8007e80:	d101      	bne.n	8007e86 <__sflush_r+0xb6>
 8007e82:	602f      	str	r7, [r5, #0]
 8007e84:	e7b1      	b.n	8007dea <__sflush_r+0x1a>
 8007e86:	89a3      	ldrh	r3, [r4, #12]
 8007e88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e8c:	81a3      	strh	r3, [r4, #12]
 8007e8e:	e7ad      	b.n	8007dec <__sflush_r+0x1c>
 8007e90:	690f      	ldr	r7, [r1, #16]
 8007e92:	2f00      	cmp	r7, #0
 8007e94:	d0a9      	beq.n	8007dea <__sflush_r+0x1a>
 8007e96:	0793      	lsls	r3, r2, #30
 8007e98:	680e      	ldr	r6, [r1, #0]
 8007e9a:	bf08      	it	eq
 8007e9c:	694b      	ldreq	r3, [r1, #20]
 8007e9e:	600f      	str	r7, [r1, #0]
 8007ea0:	bf18      	it	ne
 8007ea2:	2300      	movne	r3, #0
 8007ea4:	eba6 0807 	sub.w	r8, r6, r7
 8007ea8:	608b      	str	r3, [r1, #8]
 8007eaa:	f1b8 0f00 	cmp.w	r8, #0
 8007eae:	dd9c      	ble.n	8007dea <__sflush_r+0x1a>
 8007eb0:	6a21      	ldr	r1, [r4, #32]
 8007eb2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007eb4:	4643      	mov	r3, r8
 8007eb6:	463a      	mov	r2, r7
 8007eb8:	4628      	mov	r0, r5
 8007eba:	47b0      	blx	r6
 8007ebc:	2800      	cmp	r0, #0
 8007ebe:	dc06      	bgt.n	8007ece <__sflush_r+0xfe>
 8007ec0:	89a3      	ldrh	r3, [r4, #12]
 8007ec2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ec6:	81a3      	strh	r3, [r4, #12]
 8007ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8007ecc:	e78e      	b.n	8007dec <__sflush_r+0x1c>
 8007ece:	4407      	add	r7, r0
 8007ed0:	eba8 0800 	sub.w	r8, r8, r0
 8007ed4:	e7e9      	b.n	8007eaa <__sflush_r+0xda>
 8007ed6:	bf00      	nop
 8007ed8:	20400001 	.word	0x20400001

08007edc <_fflush_r>:
 8007edc:	b538      	push	{r3, r4, r5, lr}
 8007ede:	690b      	ldr	r3, [r1, #16]
 8007ee0:	4605      	mov	r5, r0
 8007ee2:	460c      	mov	r4, r1
 8007ee4:	b913      	cbnz	r3, 8007eec <_fflush_r+0x10>
 8007ee6:	2500      	movs	r5, #0
 8007ee8:	4628      	mov	r0, r5
 8007eea:	bd38      	pop	{r3, r4, r5, pc}
 8007eec:	b118      	cbz	r0, 8007ef6 <_fflush_r+0x1a>
 8007eee:	6983      	ldr	r3, [r0, #24]
 8007ef0:	b90b      	cbnz	r3, 8007ef6 <_fflush_r+0x1a>
 8007ef2:	f000 f887 	bl	8008004 <__sinit>
 8007ef6:	4b14      	ldr	r3, [pc, #80]	; (8007f48 <_fflush_r+0x6c>)
 8007ef8:	429c      	cmp	r4, r3
 8007efa:	d11b      	bne.n	8007f34 <_fflush_r+0x58>
 8007efc:	686c      	ldr	r4, [r5, #4]
 8007efe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d0ef      	beq.n	8007ee6 <_fflush_r+0xa>
 8007f06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007f08:	07d0      	lsls	r0, r2, #31
 8007f0a:	d404      	bmi.n	8007f16 <_fflush_r+0x3a>
 8007f0c:	0599      	lsls	r1, r3, #22
 8007f0e:	d402      	bmi.n	8007f16 <_fflush_r+0x3a>
 8007f10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f12:	f000 f91a 	bl	800814a <__retarget_lock_acquire_recursive>
 8007f16:	4628      	mov	r0, r5
 8007f18:	4621      	mov	r1, r4
 8007f1a:	f7ff ff59 	bl	8007dd0 <__sflush_r>
 8007f1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f20:	07da      	lsls	r2, r3, #31
 8007f22:	4605      	mov	r5, r0
 8007f24:	d4e0      	bmi.n	8007ee8 <_fflush_r+0xc>
 8007f26:	89a3      	ldrh	r3, [r4, #12]
 8007f28:	059b      	lsls	r3, r3, #22
 8007f2a:	d4dd      	bmi.n	8007ee8 <_fflush_r+0xc>
 8007f2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f2e:	f000 f90d 	bl	800814c <__retarget_lock_release_recursive>
 8007f32:	e7d9      	b.n	8007ee8 <_fflush_r+0xc>
 8007f34:	4b05      	ldr	r3, [pc, #20]	; (8007f4c <_fflush_r+0x70>)
 8007f36:	429c      	cmp	r4, r3
 8007f38:	d101      	bne.n	8007f3e <_fflush_r+0x62>
 8007f3a:	68ac      	ldr	r4, [r5, #8]
 8007f3c:	e7df      	b.n	8007efe <_fflush_r+0x22>
 8007f3e:	4b04      	ldr	r3, [pc, #16]	; (8007f50 <_fflush_r+0x74>)
 8007f40:	429c      	cmp	r4, r3
 8007f42:	bf08      	it	eq
 8007f44:	68ec      	ldreq	r4, [r5, #12]
 8007f46:	e7da      	b.n	8007efe <_fflush_r+0x22>
 8007f48:	0800922c 	.word	0x0800922c
 8007f4c:	0800924c 	.word	0x0800924c
 8007f50:	0800920c 	.word	0x0800920c

08007f54 <std>:
 8007f54:	2300      	movs	r3, #0
 8007f56:	b510      	push	{r4, lr}
 8007f58:	4604      	mov	r4, r0
 8007f5a:	e9c0 3300 	strd	r3, r3, [r0]
 8007f5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f62:	6083      	str	r3, [r0, #8]
 8007f64:	8181      	strh	r1, [r0, #12]
 8007f66:	6643      	str	r3, [r0, #100]	; 0x64
 8007f68:	81c2      	strh	r2, [r0, #14]
 8007f6a:	6183      	str	r3, [r0, #24]
 8007f6c:	4619      	mov	r1, r3
 8007f6e:	2208      	movs	r2, #8
 8007f70:	305c      	adds	r0, #92	; 0x5c
 8007f72:	f7fe faf5 	bl	8006560 <memset>
 8007f76:	4b05      	ldr	r3, [pc, #20]	; (8007f8c <std+0x38>)
 8007f78:	6263      	str	r3, [r4, #36]	; 0x24
 8007f7a:	4b05      	ldr	r3, [pc, #20]	; (8007f90 <std+0x3c>)
 8007f7c:	62a3      	str	r3, [r4, #40]	; 0x28
 8007f7e:	4b05      	ldr	r3, [pc, #20]	; (8007f94 <std+0x40>)
 8007f80:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007f82:	4b05      	ldr	r3, [pc, #20]	; (8007f98 <std+0x44>)
 8007f84:	6224      	str	r4, [r4, #32]
 8007f86:	6323      	str	r3, [r4, #48]	; 0x30
 8007f88:	bd10      	pop	{r4, pc}
 8007f8a:	bf00      	nop
 8007f8c:	08008d89 	.word	0x08008d89
 8007f90:	08008dab 	.word	0x08008dab
 8007f94:	08008de3 	.word	0x08008de3
 8007f98:	08008e07 	.word	0x08008e07

08007f9c <_cleanup_r>:
 8007f9c:	4901      	ldr	r1, [pc, #4]	; (8007fa4 <_cleanup_r+0x8>)
 8007f9e:	f000 b8af 	b.w	8008100 <_fwalk_reent>
 8007fa2:	bf00      	nop
 8007fa4:	08007edd 	.word	0x08007edd

08007fa8 <__sfmoreglue>:
 8007fa8:	b570      	push	{r4, r5, r6, lr}
 8007faa:	1e4a      	subs	r2, r1, #1
 8007fac:	2568      	movs	r5, #104	; 0x68
 8007fae:	4355      	muls	r5, r2
 8007fb0:	460e      	mov	r6, r1
 8007fb2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007fb6:	f000 fd23 	bl	8008a00 <_malloc_r>
 8007fba:	4604      	mov	r4, r0
 8007fbc:	b140      	cbz	r0, 8007fd0 <__sfmoreglue+0x28>
 8007fbe:	2100      	movs	r1, #0
 8007fc0:	e9c0 1600 	strd	r1, r6, [r0]
 8007fc4:	300c      	adds	r0, #12
 8007fc6:	60a0      	str	r0, [r4, #8]
 8007fc8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007fcc:	f7fe fac8 	bl	8006560 <memset>
 8007fd0:	4620      	mov	r0, r4
 8007fd2:	bd70      	pop	{r4, r5, r6, pc}

08007fd4 <__sfp_lock_acquire>:
 8007fd4:	4801      	ldr	r0, [pc, #4]	; (8007fdc <__sfp_lock_acquire+0x8>)
 8007fd6:	f000 b8b8 	b.w	800814a <__retarget_lock_acquire_recursive>
 8007fda:	bf00      	nop
 8007fdc:	20000588 	.word	0x20000588

08007fe0 <__sfp_lock_release>:
 8007fe0:	4801      	ldr	r0, [pc, #4]	; (8007fe8 <__sfp_lock_release+0x8>)
 8007fe2:	f000 b8b3 	b.w	800814c <__retarget_lock_release_recursive>
 8007fe6:	bf00      	nop
 8007fe8:	20000588 	.word	0x20000588

08007fec <__sinit_lock_acquire>:
 8007fec:	4801      	ldr	r0, [pc, #4]	; (8007ff4 <__sinit_lock_acquire+0x8>)
 8007fee:	f000 b8ac 	b.w	800814a <__retarget_lock_acquire_recursive>
 8007ff2:	bf00      	nop
 8007ff4:	20000583 	.word	0x20000583

08007ff8 <__sinit_lock_release>:
 8007ff8:	4801      	ldr	r0, [pc, #4]	; (8008000 <__sinit_lock_release+0x8>)
 8007ffa:	f000 b8a7 	b.w	800814c <__retarget_lock_release_recursive>
 8007ffe:	bf00      	nop
 8008000:	20000583 	.word	0x20000583

08008004 <__sinit>:
 8008004:	b510      	push	{r4, lr}
 8008006:	4604      	mov	r4, r0
 8008008:	f7ff fff0 	bl	8007fec <__sinit_lock_acquire>
 800800c:	69a3      	ldr	r3, [r4, #24]
 800800e:	b11b      	cbz	r3, 8008018 <__sinit+0x14>
 8008010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008014:	f7ff bff0 	b.w	8007ff8 <__sinit_lock_release>
 8008018:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800801c:	6523      	str	r3, [r4, #80]	; 0x50
 800801e:	4b13      	ldr	r3, [pc, #76]	; (800806c <__sinit+0x68>)
 8008020:	4a13      	ldr	r2, [pc, #76]	; (8008070 <__sinit+0x6c>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	62a2      	str	r2, [r4, #40]	; 0x28
 8008026:	42a3      	cmp	r3, r4
 8008028:	bf04      	itt	eq
 800802a:	2301      	moveq	r3, #1
 800802c:	61a3      	streq	r3, [r4, #24]
 800802e:	4620      	mov	r0, r4
 8008030:	f000 f820 	bl	8008074 <__sfp>
 8008034:	6060      	str	r0, [r4, #4]
 8008036:	4620      	mov	r0, r4
 8008038:	f000 f81c 	bl	8008074 <__sfp>
 800803c:	60a0      	str	r0, [r4, #8]
 800803e:	4620      	mov	r0, r4
 8008040:	f000 f818 	bl	8008074 <__sfp>
 8008044:	2200      	movs	r2, #0
 8008046:	60e0      	str	r0, [r4, #12]
 8008048:	2104      	movs	r1, #4
 800804a:	6860      	ldr	r0, [r4, #4]
 800804c:	f7ff ff82 	bl	8007f54 <std>
 8008050:	68a0      	ldr	r0, [r4, #8]
 8008052:	2201      	movs	r2, #1
 8008054:	2109      	movs	r1, #9
 8008056:	f7ff ff7d 	bl	8007f54 <std>
 800805a:	68e0      	ldr	r0, [r4, #12]
 800805c:	2202      	movs	r2, #2
 800805e:	2112      	movs	r1, #18
 8008060:	f7ff ff78 	bl	8007f54 <std>
 8008064:	2301      	movs	r3, #1
 8008066:	61a3      	str	r3, [r4, #24]
 8008068:	e7d2      	b.n	8008010 <__sinit+0xc>
 800806a:	bf00      	nop
 800806c:	08009140 	.word	0x08009140
 8008070:	08007f9d 	.word	0x08007f9d

08008074 <__sfp>:
 8008074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008076:	4607      	mov	r7, r0
 8008078:	f7ff ffac 	bl	8007fd4 <__sfp_lock_acquire>
 800807c:	4b1e      	ldr	r3, [pc, #120]	; (80080f8 <__sfp+0x84>)
 800807e:	681e      	ldr	r6, [r3, #0]
 8008080:	69b3      	ldr	r3, [r6, #24]
 8008082:	b913      	cbnz	r3, 800808a <__sfp+0x16>
 8008084:	4630      	mov	r0, r6
 8008086:	f7ff ffbd 	bl	8008004 <__sinit>
 800808a:	3648      	adds	r6, #72	; 0x48
 800808c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008090:	3b01      	subs	r3, #1
 8008092:	d503      	bpl.n	800809c <__sfp+0x28>
 8008094:	6833      	ldr	r3, [r6, #0]
 8008096:	b30b      	cbz	r3, 80080dc <__sfp+0x68>
 8008098:	6836      	ldr	r6, [r6, #0]
 800809a:	e7f7      	b.n	800808c <__sfp+0x18>
 800809c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80080a0:	b9d5      	cbnz	r5, 80080d8 <__sfp+0x64>
 80080a2:	4b16      	ldr	r3, [pc, #88]	; (80080fc <__sfp+0x88>)
 80080a4:	60e3      	str	r3, [r4, #12]
 80080a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80080aa:	6665      	str	r5, [r4, #100]	; 0x64
 80080ac:	f000 f84c 	bl	8008148 <__retarget_lock_init_recursive>
 80080b0:	f7ff ff96 	bl	8007fe0 <__sfp_lock_release>
 80080b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80080b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80080bc:	6025      	str	r5, [r4, #0]
 80080be:	61a5      	str	r5, [r4, #24]
 80080c0:	2208      	movs	r2, #8
 80080c2:	4629      	mov	r1, r5
 80080c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80080c8:	f7fe fa4a 	bl	8006560 <memset>
 80080cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80080d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80080d4:	4620      	mov	r0, r4
 80080d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080d8:	3468      	adds	r4, #104	; 0x68
 80080da:	e7d9      	b.n	8008090 <__sfp+0x1c>
 80080dc:	2104      	movs	r1, #4
 80080de:	4638      	mov	r0, r7
 80080e0:	f7ff ff62 	bl	8007fa8 <__sfmoreglue>
 80080e4:	4604      	mov	r4, r0
 80080e6:	6030      	str	r0, [r6, #0]
 80080e8:	2800      	cmp	r0, #0
 80080ea:	d1d5      	bne.n	8008098 <__sfp+0x24>
 80080ec:	f7ff ff78 	bl	8007fe0 <__sfp_lock_release>
 80080f0:	230c      	movs	r3, #12
 80080f2:	603b      	str	r3, [r7, #0]
 80080f4:	e7ee      	b.n	80080d4 <__sfp+0x60>
 80080f6:	bf00      	nop
 80080f8:	08009140 	.word	0x08009140
 80080fc:	ffff0001 	.word	0xffff0001

08008100 <_fwalk_reent>:
 8008100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008104:	4606      	mov	r6, r0
 8008106:	4688      	mov	r8, r1
 8008108:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800810c:	2700      	movs	r7, #0
 800810e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008112:	f1b9 0901 	subs.w	r9, r9, #1
 8008116:	d505      	bpl.n	8008124 <_fwalk_reent+0x24>
 8008118:	6824      	ldr	r4, [r4, #0]
 800811a:	2c00      	cmp	r4, #0
 800811c:	d1f7      	bne.n	800810e <_fwalk_reent+0xe>
 800811e:	4638      	mov	r0, r7
 8008120:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008124:	89ab      	ldrh	r3, [r5, #12]
 8008126:	2b01      	cmp	r3, #1
 8008128:	d907      	bls.n	800813a <_fwalk_reent+0x3a>
 800812a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800812e:	3301      	adds	r3, #1
 8008130:	d003      	beq.n	800813a <_fwalk_reent+0x3a>
 8008132:	4629      	mov	r1, r5
 8008134:	4630      	mov	r0, r6
 8008136:	47c0      	blx	r8
 8008138:	4307      	orrs	r7, r0
 800813a:	3568      	adds	r5, #104	; 0x68
 800813c:	e7e9      	b.n	8008112 <_fwalk_reent+0x12>
	...

08008140 <_localeconv_r>:
 8008140:	4800      	ldr	r0, [pc, #0]	; (8008144 <_localeconv_r+0x4>)
 8008142:	4770      	bx	lr
 8008144:	20000180 	.word	0x20000180

08008148 <__retarget_lock_init_recursive>:
 8008148:	4770      	bx	lr

0800814a <__retarget_lock_acquire_recursive>:
 800814a:	4770      	bx	lr

0800814c <__retarget_lock_release_recursive>:
 800814c:	4770      	bx	lr

0800814e <__swhatbuf_r>:
 800814e:	b570      	push	{r4, r5, r6, lr}
 8008150:	460e      	mov	r6, r1
 8008152:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008156:	2900      	cmp	r1, #0
 8008158:	b096      	sub	sp, #88	; 0x58
 800815a:	4614      	mov	r4, r2
 800815c:	461d      	mov	r5, r3
 800815e:	da07      	bge.n	8008170 <__swhatbuf_r+0x22>
 8008160:	2300      	movs	r3, #0
 8008162:	602b      	str	r3, [r5, #0]
 8008164:	89b3      	ldrh	r3, [r6, #12]
 8008166:	061a      	lsls	r2, r3, #24
 8008168:	d410      	bmi.n	800818c <__swhatbuf_r+0x3e>
 800816a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800816e:	e00e      	b.n	800818e <__swhatbuf_r+0x40>
 8008170:	466a      	mov	r2, sp
 8008172:	f000 fe9f 	bl	8008eb4 <_fstat_r>
 8008176:	2800      	cmp	r0, #0
 8008178:	dbf2      	blt.n	8008160 <__swhatbuf_r+0x12>
 800817a:	9a01      	ldr	r2, [sp, #4]
 800817c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008180:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008184:	425a      	negs	r2, r3
 8008186:	415a      	adcs	r2, r3
 8008188:	602a      	str	r2, [r5, #0]
 800818a:	e7ee      	b.n	800816a <__swhatbuf_r+0x1c>
 800818c:	2340      	movs	r3, #64	; 0x40
 800818e:	2000      	movs	r0, #0
 8008190:	6023      	str	r3, [r4, #0]
 8008192:	b016      	add	sp, #88	; 0x58
 8008194:	bd70      	pop	{r4, r5, r6, pc}
	...

08008198 <__smakebuf_r>:
 8008198:	898b      	ldrh	r3, [r1, #12]
 800819a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800819c:	079d      	lsls	r5, r3, #30
 800819e:	4606      	mov	r6, r0
 80081a0:	460c      	mov	r4, r1
 80081a2:	d507      	bpl.n	80081b4 <__smakebuf_r+0x1c>
 80081a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80081a8:	6023      	str	r3, [r4, #0]
 80081aa:	6123      	str	r3, [r4, #16]
 80081ac:	2301      	movs	r3, #1
 80081ae:	6163      	str	r3, [r4, #20]
 80081b0:	b002      	add	sp, #8
 80081b2:	bd70      	pop	{r4, r5, r6, pc}
 80081b4:	ab01      	add	r3, sp, #4
 80081b6:	466a      	mov	r2, sp
 80081b8:	f7ff ffc9 	bl	800814e <__swhatbuf_r>
 80081bc:	9900      	ldr	r1, [sp, #0]
 80081be:	4605      	mov	r5, r0
 80081c0:	4630      	mov	r0, r6
 80081c2:	f000 fc1d 	bl	8008a00 <_malloc_r>
 80081c6:	b948      	cbnz	r0, 80081dc <__smakebuf_r+0x44>
 80081c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081cc:	059a      	lsls	r2, r3, #22
 80081ce:	d4ef      	bmi.n	80081b0 <__smakebuf_r+0x18>
 80081d0:	f023 0303 	bic.w	r3, r3, #3
 80081d4:	f043 0302 	orr.w	r3, r3, #2
 80081d8:	81a3      	strh	r3, [r4, #12]
 80081da:	e7e3      	b.n	80081a4 <__smakebuf_r+0xc>
 80081dc:	4b0d      	ldr	r3, [pc, #52]	; (8008214 <__smakebuf_r+0x7c>)
 80081de:	62b3      	str	r3, [r6, #40]	; 0x28
 80081e0:	89a3      	ldrh	r3, [r4, #12]
 80081e2:	6020      	str	r0, [r4, #0]
 80081e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081e8:	81a3      	strh	r3, [r4, #12]
 80081ea:	9b00      	ldr	r3, [sp, #0]
 80081ec:	6163      	str	r3, [r4, #20]
 80081ee:	9b01      	ldr	r3, [sp, #4]
 80081f0:	6120      	str	r0, [r4, #16]
 80081f2:	b15b      	cbz	r3, 800820c <__smakebuf_r+0x74>
 80081f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081f8:	4630      	mov	r0, r6
 80081fa:	f000 fe6d 	bl	8008ed8 <_isatty_r>
 80081fe:	b128      	cbz	r0, 800820c <__smakebuf_r+0x74>
 8008200:	89a3      	ldrh	r3, [r4, #12]
 8008202:	f023 0303 	bic.w	r3, r3, #3
 8008206:	f043 0301 	orr.w	r3, r3, #1
 800820a:	81a3      	strh	r3, [r4, #12]
 800820c:	89a0      	ldrh	r0, [r4, #12]
 800820e:	4305      	orrs	r5, r0
 8008210:	81a5      	strh	r5, [r4, #12]
 8008212:	e7cd      	b.n	80081b0 <__smakebuf_r+0x18>
 8008214:	08007f9d 	.word	0x08007f9d

08008218 <malloc>:
 8008218:	4b02      	ldr	r3, [pc, #8]	; (8008224 <malloc+0xc>)
 800821a:	4601      	mov	r1, r0
 800821c:	6818      	ldr	r0, [r3, #0]
 800821e:	f000 bbef 	b.w	8008a00 <_malloc_r>
 8008222:	bf00      	nop
 8008224:	2000002c 	.word	0x2000002c

08008228 <memcpy>:
 8008228:	440a      	add	r2, r1
 800822a:	4291      	cmp	r1, r2
 800822c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008230:	d100      	bne.n	8008234 <memcpy+0xc>
 8008232:	4770      	bx	lr
 8008234:	b510      	push	{r4, lr}
 8008236:	f811 4b01 	ldrb.w	r4, [r1], #1
 800823a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800823e:	4291      	cmp	r1, r2
 8008240:	d1f9      	bne.n	8008236 <memcpy+0xe>
 8008242:	bd10      	pop	{r4, pc}

08008244 <_Balloc>:
 8008244:	b570      	push	{r4, r5, r6, lr}
 8008246:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008248:	4604      	mov	r4, r0
 800824a:	460d      	mov	r5, r1
 800824c:	b976      	cbnz	r6, 800826c <_Balloc+0x28>
 800824e:	2010      	movs	r0, #16
 8008250:	f7ff ffe2 	bl	8008218 <malloc>
 8008254:	4602      	mov	r2, r0
 8008256:	6260      	str	r0, [r4, #36]	; 0x24
 8008258:	b920      	cbnz	r0, 8008264 <_Balloc+0x20>
 800825a:	4b18      	ldr	r3, [pc, #96]	; (80082bc <_Balloc+0x78>)
 800825c:	4818      	ldr	r0, [pc, #96]	; (80082c0 <_Balloc+0x7c>)
 800825e:	2166      	movs	r1, #102	; 0x66
 8008260:	f000 fde8 	bl	8008e34 <__assert_func>
 8008264:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008268:	6006      	str	r6, [r0, #0]
 800826a:	60c6      	str	r6, [r0, #12]
 800826c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800826e:	68f3      	ldr	r3, [r6, #12]
 8008270:	b183      	cbz	r3, 8008294 <_Balloc+0x50>
 8008272:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008274:	68db      	ldr	r3, [r3, #12]
 8008276:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800827a:	b9b8      	cbnz	r0, 80082ac <_Balloc+0x68>
 800827c:	2101      	movs	r1, #1
 800827e:	fa01 f605 	lsl.w	r6, r1, r5
 8008282:	1d72      	adds	r2, r6, #5
 8008284:	0092      	lsls	r2, r2, #2
 8008286:	4620      	mov	r0, r4
 8008288:	f000 fb5a 	bl	8008940 <_calloc_r>
 800828c:	b160      	cbz	r0, 80082a8 <_Balloc+0x64>
 800828e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008292:	e00e      	b.n	80082b2 <_Balloc+0x6e>
 8008294:	2221      	movs	r2, #33	; 0x21
 8008296:	2104      	movs	r1, #4
 8008298:	4620      	mov	r0, r4
 800829a:	f000 fb51 	bl	8008940 <_calloc_r>
 800829e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082a0:	60f0      	str	r0, [r6, #12]
 80082a2:	68db      	ldr	r3, [r3, #12]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d1e4      	bne.n	8008272 <_Balloc+0x2e>
 80082a8:	2000      	movs	r0, #0
 80082aa:	bd70      	pop	{r4, r5, r6, pc}
 80082ac:	6802      	ldr	r2, [r0, #0]
 80082ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80082b2:	2300      	movs	r3, #0
 80082b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80082b8:	e7f7      	b.n	80082aa <_Balloc+0x66>
 80082ba:	bf00      	nop
 80082bc:	08009185 	.word	0x08009185
 80082c0:	0800926c 	.word	0x0800926c

080082c4 <_Bfree>:
 80082c4:	b570      	push	{r4, r5, r6, lr}
 80082c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80082c8:	4605      	mov	r5, r0
 80082ca:	460c      	mov	r4, r1
 80082cc:	b976      	cbnz	r6, 80082ec <_Bfree+0x28>
 80082ce:	2010      	movs	r0, #16
 80082d0:	f7ff ffa2 	bl	8008218 <malloc>
 80082d4:	4602      	mov	r2, r0
 80082d6:	6268      	str	r0, [r5, #36]	; 0x24
 80082d8:	b920      	cbnz	r0, 80082e4 <_Bfree+0x20>
 80082da:	4b09      	ldr	r3, [pc, #36]	; (8008300 <_Bfree+0x3c>)
 80082dc:	4809      	ldr	r0, [pc, #36]	; (8008304 <_Bfree+0x40>)
 80082de:	218a      	movs	r1, #138	; 0x8a
 80082e0:	f000 fda8 	bl	8008e34 <__assert_func>
 80082e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80082e8:	6006      	str	r6, [r0, #0]
 80082ea:	60c6      	str	r6, [r0, #12]
 80082ec:	b13c      	cbz	r4, 80082fe <_Bfree+0x3a>
 80082ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80082f0:	6862      	ldr	r2, [r4, #4]
 80082f2:	68db      	ldr	r3, [r3, #12]
 80082f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80082f8:	6021      	str	r1, [r4, #0]
 80082fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80082fe:	bd70      	pop	{r4, r5, r6, pc}
 8008300:	08009185 	.word	0x08009185
 8008304:	0800926c 	.word	0x0800926c

08008308 <__multadd>:
 8008308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800830c:	690e      	ldr	r6, [r1, #16]
 800830e:	4607      	mov	r7, r0
 8008310:	4698      	mov	r8, r3
 8008312:	460c      	mov	r4, r1
 8008314:	f101 0014 	add.w	r0, r1, #20
 8008318:	2300      	movs	r3, #0
 800831a:	6805      	ldr	r5, [r0, #0]
 800831c:	b2a9      	uxth	r1, r5
 800831e:	fb02 8101 	mla	r1, r2, r1, r8
 8008322:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008326:	0c2d      	lsrs	r5, r5, #16
 8008328:	fb02 c505 	mla	r5, r2, r5, ip
 800832c:	b289      	uxth	r1, r1
 800832e:	3301      	adds	r3, #1
 8008330:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008334:	429e      	cmp	r6, r3
 8008336:	f840 1b04 	str.w	r1, [r0], #4
 800833a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800833e:	dcec      	bgt.n	800831a <__multadd+0x12>
 8008340:	f1b8 0f00 	cmp.w	r8, #0
 8008344:	d022      	beq.n	800838c <__multadd+0x84>
 8008346:	68a3      	ldr	r3, [r4, #8]
 8008348:	42b3      	cmp	r3, r6
 800834a:	dc19      	bgt.n	8008380 <__multadd+0x78>
 800834c:	6861      	ldr	r1, [r4, #4]
 800834e:	4638      	mov	r0, r7
 8008350:	3101      	adds	r1, #1
 8008352:	f7ff ff77 	bl	8008244 <_Balloc>
 8008356:	4605      	mov	r5, r0
 8008358:	b928      	cbnz	r0, 8008366 <__multadd+0x5e>
 800835a:	4602      	mov	r2, r0
 800835c:	4b0d      	ldr	r3, [pc, #52]	; (8008394 <__multadd+0x8c>)
 800835e:	480e      	ldr	r0, [pc, #56]	; (8008398 <__multadd+0x90>)
 8008360:	21b5      	movs	r1, #181	; 0xb5
 8008362:	f000 fd67 	bl	8008e34 <__assert_func>
 8008366:	6922      	ldr	r2, [r4, #16]
 8008368:	3202      	adds	r2, #2
 800836a:	f104 010c 	add.w	r1, r4, #12
 800836e:	0092      	lsls	r2, r2, #2
 8008370:	300c      	adds	r0, #12
 8008372:	f7ff ff59 	bl	8008228 <memcpy>
 8008376:	4621      	mov	r1, r4
 8008378:	4638      	mov	r0, r7
 800837a:	f7ff ffa3 	bl	80082c4 <_Bfree>
 800837e:	462c      	mov	r4, r5
 8008380:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008384:	3601      	adds	r6, #1
 8008386:	f8c3 8014 	str.w	r8, [r3, #20]
 800838a:	6126      	str	r6, [r4, #16]
 800838c:	4620      	mov	r0, r4
 800838e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008392:	bf00      	nop
 8008394:	080091fb 	.word	0x080091fb
 8008398:	0800926c 	.word	0x0800926c

0800839c <__hi0bits>:
 800839c:	0c03      	lsrs	r3, r0, #16
 800839e:	041b      	lsls	r3, r3, #16
 80083a0:	b9d3      	cbnz	r3, 80083d8 <__hi0bits+0x3c>
 80083a2:	0400      	lsls	r0, r0, #16
 80083a4:	2310      	movs	r3, #16
 80083a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80083aa:	bf04      	itt	eq
 80083ac:	0200      	lsleq	r0, r0, #8
 80083ae:	3308      	addeq	r3, #8
 80083b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80083b4:	bf04      	itt	eq
 80083b6:	0100      	lsleq	r0, r0, #4
 80083b8:	3304      	addeq	r3, #4
 80083ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80083be:	bf04      	itt	eq
 80083c0:	0080      	lsleq	r0, r0, #2
 80083c2:	3302      	addeq	r3, #2
 80083c4:	2800      	cmp	r0, #0
 80083c6:	db05      	blt.n	80083d4 <__hi0bits+0x38>
 80083c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80083cc:	f103 0301 	add.w	r3, r3, #1
 80083d0:	bf08      	it	eq
 80083d2:	2320      	moveq	r3, #32
 80083d4:	4618      	mov	r0, r3
 80083d6:	4770      	bx	lr
 80083d8:	2300      	movs	r3, #0
 80083da:	e7e4      	b.n	80083a6 <__hi0bits+0xa>

080083dc <__lo0bits>:
 80083dc:	6803      	ldr	r3, [r0, #0]
 80083de:	f013 0207 	ands.w	r2, r3, #7
 80083e2:	4601      	mov	r1, r0
 80083e4:	d00b      	beq.n	80083fe <__lo0bits+0x22>
 80083e6:	07da      	lsls	r2, r3, #31
 80083e8:	d424      	bmi.n	8008434 <__lo0bits+0x58>
 80083ea:	0798      	lsls	r0, r3, #30
 80083ec:	bf49      	itett	mi
 80083ee:	085b      	lsrmi	r3, r3, #1
 80083f0:	089b      	lsrpl	r3, r3, #2
 80083f2:	2001      	movmi	r0, #1
 80083f4:	600b      	strmi	r3, [r1, #0]
 80083f6:	bf5c      	itt	pl
 80083f8:	600b      	strpl	r3, [r1, #0]
 80083fa:	2002      	movpl	r0, #2
 80083fc:	4770      	bx	lr
 80083fe:	b298      	uxth	r0, r3
 8008400:	b9b0      	cbnz	r0, 8008430 <__lo0bits+0x54>
 8008402:	0c1b      	lsrs	r3, r3, #16
 8008404:	2010      	movs	r0, #16
 8008406:	f013 0fff 	tst.w	r3, #255	; 0xff
 800840a:	bf04      	itt	eq
 800840c:	0a1b      	lsreq	r3, r3, #8
 800840e:	3008      	addeq	r0, #8
 8008410:	071a      	lsls	r2, r3, #28
 8008412:	bf04      	itt	eq
 8008414:	091b      	lsreq	r3, r3, #4
 8008416:	3004      	addeq	r0, #4
 8008418:	079a      	lsls	r2, r3, #30
 800841a:	bf04      	itt	eq
 800841c:	089b      	lsreq	r3, r3, #2
 800841e:	3002      	addeq	r0, #2
 8008420:	07da      	lsls	r2, r3, #31
 8008422:	d403      	bmi.n	800842c <__lo0bits+0x50>
 8008424:	085b      	lsrs	r3, r3, #1
 8008426:	f100 0001 	add.w	r0, r0, #1
 800842a:	d005      	beq.n	8008438 <__lo0bits+0x5c>
 800842c:	600b      	str	r3, [r1, #0]
 800842e:	4770      	bx	lr
 8008430:	4610      	mov	r0, r2
 8008432:	e7e8      	b.n	8008406 <__lo0bits+0x2a>
 8008434:	2000      	movs	r0, #0
 8008436:	4770      	bx	lr
 8008438:	2020      	movs	r0, #32
 800843a:	4770      	bx	lr

0800843c <__i2b>:
 800843c:	b510      	push	{r4, lr}
 800843e:	460c      	mov	r4, r1
 8008440:	2101      	movs	r1, #1
 8008442:	f7ff feff 	bl	8008244 <_Balloc>
 8008446:	4602      	mov	r2, r0
 8008448:	b928      	cbnz	r0, 8008456 <__i2b+0x1a>
 800844a:	4b05      	ldr	r3, [pc, #20]	; (8008460 <__i2b+0x24>)
 800844c:	4805      	ldr	r0, [pc, #20]	; (8008464 <__i2b+0x28>)
 800844e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008452:	f000 fcef 	bl	8008e34 <__assert_func>
 8008456:	2301      	movs	r3, #1
 8008458:	6144      	str	r4, [r0, #20]
 800845a:	6103      	str	r3, [r0, #16]
 800845c:	bd10      	pop	{r4, pc}
 800845e:	bf00      	nop
 8008460:	080091fb 	.word	0x080091fb
 8008464:	0800926c 	.word	0x0800926c

08008468 <__multiply>:
 8008468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800846c:	4614      	mov	r4, r2
 800846e:	690a      	ldr	r2, [r1, #16]
 8008470:	6923      	ldr	r3, [r4, #16]
 8008472:	429a      	cmp	r2, r3
 8008474:	bfb8      	it	lt
 8008476:	460b      	movlt	r3, r1
 8008478:	460d      	mov	r5, r1
 800847a:	bfbc      	itt	lt
 800847c:	4625      	movlt	r5, r4
 800847e:	461c      	movlt	r4, r3
 8008480:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008484:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008488:	68ab      	ldr	r3, [r5, #8]
 800848a:	6869      	ldr	r1, [r5, #4]
 800848c:	eb0a 0709 	add.w	r7, sl, r9
 8008490:	42bb      	cmp	r3, r7
 8008492:	b085      	sub	sp, #20
 8008494:	bfb8      	it	lt
 8008496:	3101      	addlt	r1, #1
 8008498:	f7ff fed4 	bl	8008244 <_Balloc>
 800849c:	b930      	cbnz	r0, 80084ac <__multiply+0x44>
 800849e:	4602      	mov	r2, r0
 80084a0:	4b42      	ldr	r3, [pc, #264]	; (80085ac <__multiply+0x144>)
 80084a2:	4843      	ldr	r0, [pc, #268]	; (80085b0 <__multiply+0x148>)
 80084a4:	f240 115d 	movw	r1, #349	; 0x15d
 80084a8:	f000 fcc4 	bl	8008e34 <__assert_func>
 80084ac:	f100 0614 	add.w	r6, r0, #20
 80084b0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80084b4:	4633      	mov	r3, r6
 80084b6:	2200      	movs	r2, #0
 80084b8:	4543      	cmp	r3, r8
 80084ba:	d31e      	bcc.n	80084fa <__multiply+0x92>
 80084bc:	f105 0c14 	add.w	ip, r5, #20
 80084c0:	f104 0314 	add.w	r3, r4, #20
 80084c4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80084c8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80084cc:	9202      	str	r2, [sp, #8]
 80084ce:	ebac 0205 	sub.w	r2, ip, r5
 80084d2:	3a15      	subs	r2, #21
 80084d4:	f022 0203 	bic.w	r2, r2, #3
 80084d8:	3204      	adds	r2, #4
 80084da:	f105 0115 	add.w	r1, r5, #21
 80084de:	458c      	cmp	ip, r1
 80084e0:	bf38      	it	cc
 80084e2:	2204      	movcc	r2, #4
 80084e4:	9201      	str	r2, [sp, #4]
 80084e6:	9a02      	ldr	r2, [sp, #8]
 80084e8:	9303      	str	r3, [sp, #12]
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d808      	bhi.n	8008500 <__multiply+0x98>
 80084ee:	2f00      	cmp	r7, #0
 80084f0:	dc55      	bgt.n	800859e <__multiply+0x136>
 80084f2:	6107      	str	r7, [r0, #16]
 80084f4:	b005      	add	sp, #20
 80084f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084fa:	f843 2b04 	str.w	r2, [r3], #4
 80084fe:	e7db      	b.n	80084b8 <__multiply+0x50>
 8008500:	f8b3 a000 	ldrh.w	sl, [r3]
 8008504:	f1ba 0f00 	cmp.w	sl, #0
 8008508:	d020      	beq.n	800854c <__multiply+0xe4>
 800850a:	f105 0e14 	add.w	lr, r5, #20
 800850e:	46b1      	mov	r9, r6
 8008510:	2200      	movs	r2, #0
 8008512:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008516:	f8d9 b000 	ldr.w	fp, [r9]
 800851a:	b2a1      	uxth	r1, r4
 800851c:	fa1f fb8b 	uxth.w	fp, fp
 8008520:	fb0a b101 	mla	r1, sl, r1, fp
 8008524:	4411      	add	r1, r2
 8008526:	f8d9 2000 	ldr.w	r2, [r9]
 800852a:	0c24      	lsrs	r4, r4, #16
 800852c:	0c12      	lsrs	r2, r2, #16
 800852e:	fb0a 2404 	mla	r4, sl, r4, r2
 8008532:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008536:	b289      	uxth	r1, r1
 8008538:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800853c:	45f4      	cmp	ip, lr
 800853e:	f849 1b04 	str.w	r1, [r9], #4
 8008542:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008546:	d8e4      	bhi.n	8008512 <__multiply+0xaa>
 8008548:	9901      	ldr	r1, [sp, #4]
 800854a:	5072      	str	r2, [r6, r1]
 800854c:	9a03      	ldr	r2, [sp, #12]
 800854e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008552:	3304      	adds	r3, #4
 8008554:	f1b9 0f00 	cmp.w	r9, #0
 8008558:	d01f      	beq.n	800859a <__multiply+0x132>
 800855a:	6834      	ldr	r4, [r6, #0]
 800855c:	f105 0114 	add.w	r1, r5, #20
 8008560:	46b6      	mov	lr, r6
 8008562:	f04f 0a00 	mov.w	sl, #0
 8008566:	880a      	ldrh	r2, [r1, #0]
 8008568:	f8be b002 	ldrh.w	fp, [lr, #2]
 800856c:	fb09 b202 	mla	r2, r9, r2, fp
 8008570:	4492      	add	sl, r2
 8008572:	b2a4      	uxth	r4, r4
 8008574:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008578:	f84e 4b04 	str.w	r4, [lr], #4
 800857c:	f851 4b04 	ldr.w	r4, [r1], #4
 8008580:	f8be 2000 	ldrh.w	r2, [lr]
 8008584:	0c24      	lsrs	r4, r4, #16
 8008586:	fb09 2404 	mla	r4, r9, r4, r2
 800858a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800858e:	458c      	cmp	ip, r1
 8008590:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008594:	d8e7      	bhi.n	8008566 <__multiply+0xfe>
 8008596:	9a01      	ldr	r2, [sp, #4]
 8008598:	50b4      	str	r4, [r6, r2]
 800859a:	3604      	adds	r6, #4
 800859c:	e7a3      	b.n	80084e6 <__multiply+0x7e>
 800859e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d1a5      	bne.n	80084f2 <__multiply+0x8a>
 80085a6:	3f01      	subs	r7, #1
 80085a8:	e7a1      	b.n	80084ee <__multiply+0x86>
 80085aa:	bf00      	nop
 80085ac:	080091fb 	.word	0x080091fb
 80085b0:	0800926c 	.word	0x0800926c

080085b4 <__pow5mult>:
 80085b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085b8:	4615      	mov	r5, r2
 80085ba:	f012 0203 	ands.w	r2, r2, #3
 80085be:	4606      	mov	r6, r0
 80085c0:	460f      	mov	r7, r1
 80085c2:	d007      	beq.n	80085d4 <__pow5mult+0x20>
 80085c4:	4c25      	ldr	r4, [pc, #148]	; (800865c <__pow5mult+0xa8>)
 80085c6:	3a01      	subs	r2, #1
 80085c8:	2300      	movs	r3, #0
 80085ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80085ce:	f7ff fe9b 	bl	8008308 <__multadd>
 80085d2:	4607      	mov	r7, r0
 80085d4:	10ad      	asrs	r5, r5, #2
 80085d6:	d03d      	beq.n	8008654 <__pow5mult+0xa0>
 80085d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80085da:	b97c      	cbnz	r4, 80085fc <__pow5mult+0x48>
 80085dc:	2010      	movs	r0, #16
 80085de:	f7ff fe1b 	bl	8008218 <malloc>
 80085e2:	4602      	mov	r2, r0
 80085e4:	6270      	str	r0, [r6, #36]	; 0x24
 80085e6:	b928      	cbnz	r0, 80085f4 <__pow5mult+0x40>
 80085e8:	4b1d      	ldr	r3, [pc, #116]	; (8008660 <__pow5mult+0xac>)
 80085ea:	481e      	ldr	r0, [pc, #120]	; (8008664 <__pow5mult+0xb0>)
 80085ec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80085f0:	f000 fc20 	bl	8008e34 <__assert_func>
 80085f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80085f8:	6004      	str	r4, [r0, #0]
 80085fa:	60c4      	str	r4, [r0, #12]
 80085fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008600:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008604:	b94c      	cbnz	r4, 800861a <__pow5mult+0x66>
 8008606:	f240 2171 	movw	r1, #625	; 0x271
 800860a:	4630      	mov	r0, r6
 800860c:	f7ff ff16 	bl	800843c <__i2b>
 8008610:	2300      	movs	r3, #0
 8008612:	f8c8 0008 	str.w	r0, [r8, #8]
 8008616:	4604      	mov	r4, r0
 8008618:	6003      	str	r3, [r0, #0]
 800861a:	f04f 0900 	mov.w	r9, #0
 800861e:	07eb      	lsls	r3, r5, #31
 8008620:	d50a      	bpl.n	8008638 <__pow5mult+0x84>
 8008622:	4639      	mov	r1, r7
 8008624:	4622      	mov	r2, r4
 8008626:	4630      	mov	r0, r6
 8008628:	f7ff ff1e 	bl	8008468 <__multiply>
 800862c:	4639      	mov	r1, r7
 800862e:	4680      	mov	r8, r0
 8008630:	4630      	mov	r0, r6
 8008632:	f7ff fe47 	bl	80082c4 <_Bfree>
 8008636:	4647      	mov	r7, r8
 8008638:	106d      	asrs	r5, r5, #1
 800863a:	d00b      	beq.n	8008654 <__pow5mult+0xa0>
 800863c:	6820      	ldr	r0, [r4, #0]
 800863e:	b938      	cbnz	r0, 8008650 <__pow5mult+0x9c>
 8008640:	4622      	mov	r2, r4
 8008642:	4621      	mov	r1, r4
 8008644:	4630      	mov	r0, r6
 8008646:	f7ff ff0f 	bl	8008468 <__multiply>
 800864a:	6020      	str	r0, [r4, #0]
 800864c:	f8c0 9000 	str.w	r9, [r0]
 8008650:	4604      	mov	r4, r0
 8008652:	e7e4      	b.n	800861e <__pow5mult+0x6a>
 8008654:	4638      	mov	r0, r7
 8008656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800865a:	bf00      	nop
 800865c:	080093c0 	.word	0x080093c0
 8008660:	08009185 	.word	0x08009185
 8008664:	0800926c 	.word	0x0800926c

08008668 <__lshift>:
 8008668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800866c:	460c      	mov	r4, r1
 800866e:	6849      	ldr	r1, [r1, #4]
 8008670:	6923      	ldr	r3, [r4, #16]
 8008672:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008676:	68a3      	ldr	r3, [r4, #8]
 8008678:	4607      	mov	r7, r0
 800867a:	4691      	mov	r9, r2
 800867c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008680:	f108 0601 	add.w	r6, r8, #1
 8008684:	42b3      	cmp	r3, r6
 8008686:	db0b      	blt.n	80086a0 <__lshift+0x38>
 8008688:	4638      	mov	r0, r7
 800868a:	f7ff fddb 	bl	8008244 <_Balloc>
 800868e:	4605      	mov	r5, r0
 8008690:	b948      	cbnz	r0, 80086a6 <__lshift+0x3e>
 8008692:	4602      	mov	r2, r0
 8008694:	4b28      	ldr	r3, [pc, #160]	; (8008738 <__lshift+0xd0>)
 8008696:	4829      	ldr	r0, [pc, #164]	; (800873c <__lshift+0xd4>)
 8008698:	f240 11d9 	movw	r1, #473	; 0x1d9
 800869c:	f000 fbca 	bl	8008e34 <__assert_func>
 80086a0:	3101      	adds	r1, #1
 80086a2:	005b      	lsls	r3, r3, #1
 80086a4:	e7ee      	b.n	8008684 <__lshift+0x1c>
 80086a6:	2300      	movs	r3, #0
 80086a8:	f100 0114 	add.w	r1, r0, #20
 80086ac:	f100 0210 	add.w	r2, r0, #16
 80086b0:	4618      	mov	r0, r3
 80086b2:	4553      	cmp	r3, sl
 80086b4:	db33      	blt.n	800871e <__lshift+0xb6>
 80086b6:	6920      	ldr	r0, [r4, #16]
 80086b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80086bc:	f104 0314 	add.w	r3, r4, #20
 80086c0:	f019 091f 	ands.w	r9, r9, #31
 80086c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80086c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80086cc:	d02b      	beq.n	8008726 <__lshift+0xbe>
 80086ce:	f1c9 0e20 	rsb	lr, r9, #32
 80086d2:	468a      	mov	sl, r1
 80086d4:	2200      	movs	r2, #0
 80086d6:	6818      	ldr	r0, [r3, #0]
 80086d8:	fa00 f009 	lsl.w	r0, r0, r9
 80086dc:	4302      	orrs	r2, r0
 80086de:	f84a 2b04 	str.w	r2, [sl], #4
 80086e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80086e6:	459c      	cmp	ip, r3
 80086e8:	fa22 f20e 	lsr.w	r2, r2, lr
 80086ec:	d8f3      	bhi.n	80086d6 <__lshift+0x6e>
 80086ee:	ebac 0304 	sub.w	r3, ip, r4
 80086f2:	3b15      	subs	r3, #21
 80086f4:	f023 0303 	bic.w	r3, r3, #3
 80086f8:	3304      	adds	r3, #4
 80086fa:	f104 0015 	add.w	r0, r4, #21
 80086fe:	4584      	cmp	ip, r0
 8008700:	bf38      	it	cc
 8008702:	2304      	movcc	r3, #4
 8008704:	50ca      	str	r2, [r1, r3]
 8008706:	b10a      	cbz	r2, 800870c <__lshift+0xa4>
 8008708:	f108 0602 	add.w	r6, r8, #2
 800870c:	3e01      	subs	r6, #1
 800870e:	4638      	mov	r0, r7
 8008710:	612e      	str	r6, [r5, #16]
 8008712:	4621      	mov	r1, r4
 8008714:	f7ff fdd6 	bl	80082c4 <_Bfree>
 8008718:	4628      	mov	r0, r5
 800871a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800871e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008722:	3301      	adds	r3, #1
 8008724:	e7c5      	b.n	80086b2 <__lshift+0x4a>
 8008726:	3904      	subs	r1, #4
 8008728:	f853 2b04 	ldr.w	r2, [r3], #4
 800872c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008730:	459c      	cmp	ip, r3
 8008732:	d8f9      	bhi.n	8008728 <__lshift+0xc0>
 8008734:	e7ea      	b.n	800870c <__lshift+0xa4>
 8008736:	bf00      	nop
 8008738:	080091fb 	.word	0x080091fb
 800873c:	0800926c 	.word	0x0800926c

08008740 <__mcmp>:
 8008740:	b530      	push	{r4, r5, lr}
 8008742:	6902      	ldr	r2, [r0, #16]
 8008744:	690c      	ldr	r4, [r1, #16]
 8008746:	1b12      	subs	r2, r2, r4
 8008748:	d10e      	bne.n	8008768 <__mcmp+0x28>
 800874a:	f100 0314 	add.w	r3, r0, #20
 800874e:	3114      	adds	r1, #20
 8008750:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008754:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008758:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800875c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008760:	42a5      	cmp	r5, r4
 8008762:	d003      	beq.n	800876c <__mcmp+0x2c>
 8008764:	d305      	bcc.n	8008772 <__mcmp+0x32>
 8008766:	2201      	movs	r2, #1
 8008768:	4610      	mov	r0, r2
 800876a:	bd30      	pop	{r4, r5, pc}
 800876c:	4283      	cmp	r3, r0
 800876e:	d3f3      	bcc.n	8008758 <__mcmp+0x18>
 8008770:	e7fa      	b.n	8008768 <__mcmp+0x28>
 8008772:	f04f 32ff 	mov.w	r2, #4294967295
 8008776:	e7f7      	b.n	8008768 <__mcmp+0x28>

08008778 <__mdiff>:
 8008778:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800877c:	460c      	mov	r4, r1
 800877e:	4606      	mov	r6, r0
 8008780:	4611      	mov	r1, r2
 8008782:	4620      	mov	r0, r4
 8008784:	4617      	mov	r7, r2
 8008786:	f7ff ffdb 	bl	8008740 <__mcmp>
 800878a:	1e05      	subs	r5, r0, #0
 800878c:	d110      	bne.n	80087b0 <__mdiff+0x38>
 800878e:	4629      	mov	r1, r5
 8008790:	4630      	mov	r0, r6
 8008792:	f7ff fd57 	bl	8008244 <_Balloc>
 8008796:	b930      	cbnz	r0, 80087a6 <__mdiff+0x2e>
 8008798:	4b39      	ldr	r3, [pc, #228]	; (8008880 <__mdiff+0x108>)
 800879a:	4602      	mov	r2, r0
 800879c:	f240 2132 	movw	r1, #562	; 0x232
 80087a0:	4838      	ldr	r0, [pc, #224]	; (8008884 <__mdiff+0x10c>)
 80087a2:	f000 fb47 	bl	8008e34 <__assert_func>
 80087a6:	2301      	movs	r3, #1
 80087a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80087ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087b0:	bfa4      	itt	ge
 80087b2:	463b      	movge	r3, r7
 80087b4:	4627      	movge	r7, r4
 80087b6:	4630      	mov	r0, r6
 80087b8:	6879      	ldr	r1, [r7, #4]
 80087ba:	bfa6      	itte	ge
 80087bc:	461c      	movge	r4, r3
 80087be:	2500      	movge	r5, #0
 80087c0:	2501      	movlt	r5, #1
 80087c2:	f7ff fd3f 	bl	8008244 <_Balloc>
 80087c6:	b920      	cbnz	r0, 80087d2 <__mdiff+0x5a>
 80087c8:	4b2d      	ldr	r3, [pc, #180]	; (8008880 <__mdiff+0x108>)
 80087ca:	4602      	mov	r2, r0
 80087cc:	f44f 7110 	mov.w	r1, #576	; 0x240
 80087d0:	e7e6      	b.n	80087a0 <__mdiff+0x28>
 80087d2:	693e      	ldr	r6, [r7, #16]
 80087d4:	60c5      	str	r5, [r0, #12]
 80087d6:	6925      	ldr	r5, [r4, #16]
 80087d8:	f107 0114 	add.w	r1, r7, #20
 80087dc:	f104 0914 	add.w	r9, r4, #20
 80087e0:	f100 0e14 	add.w	lr, r0, #20
 80087e4:	f107 0210 	add.w	r2, r7, #16
 80087e8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80087ec:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80087f0:	46f2      	mov	sl, lr
 80087f2:	2700      	movs	r7, #0
 80087f4:	f859 3b04 	ldr.w	r3, [r9], #4
 80087f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80087fc:	fa1f f883 	uxth.w	r8, r3
 8008800:	fa17 f78b 	uxtah	r7, r7, fp
 8008804:	0c1b      	lsrs	r3, r3, #16
 8008806:	eba7 0808 	sub.w	r8, r7, r8
 800880a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800880e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008812:	fa1f f888 	uxth.w	r8, r8
 8008816:	141f      	asrs	r7, r3, #16
 8008818:	454d      	cmp	r5, r9
 800881a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800881e:	f84a 3b04 	str.w	r3, [sl], #4
 8008822:	d8e7      	bhi.n	80087f4 <__mdiff+0x7c>
 8008824:	1b2b      	subs	r3, r5, r4
 8008826:	3b15      	subs	r3, #21
 8008828:	f023 0303 	bic.w	r3, r3, #3
 800882c:	3304      	adds	r3, #4
 800882e:	3415      	adds	r4, #21
 8008830:	42a5      	cmp	r5, r4
 8008832:	bf38      	it	cc
 8008834:	2304      	movcc	r3, #4
 8008836:	4419      	add	r1, r3
 8008838:	4473      	add	r3, lr
 800883a:	469e      	mov	lr, r3
 800883c:	460d      	mov	r5, r1
 800883e:	4565      	cmp	r5, ip
 8008840:	d30e      	bcc.n	8008860 <__mdiff+0xe8>
 8008842:	f10c 0203 	add.w	r2, ip, #3
 8008846:	1a52      	subs	r2, r2, r1
 8008848:	f022 0203 	bic.w	r2, r2, #3
 800884c:	3903      	subs	r1, #3
 800884e:	458c      	cmp	ip, r1
 8008850:	bf38      	it	cc
 8008852:	2200      	movcc	r2, #0
 8008854:	441a      	add	r2, r3
 8008856:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800885a:	b17b      	cbz	r3, 800887c <__mdiff+0x104>
 800885c:	6106      	str	r6, [r0, #16]
 800885e:	e7a5      	b.n	80087ac <__mdiff+0x34>
 8008860:	f855 8b04 	ldr.w	r8, [r5], #4
 8008864:	fa17 f488 	uxtah	r4, r7, r8
 8008868:	1422      	asrs	r2, r4, #16
 800886a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800886e:	b2a4      	uxth	r4, r4
 8008870:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008874:	f84e 4b04 	str.w	r4, [lr], #4
 8008878:	1417      	asrs	r7, r2, #16
 800887a:	e7e0      	b.n	800883e <__mdiff+0xc6>
 800887c:	3e01      	subs	r6, #1
 800887e:	e7ea      	b.n	8008856 <__mdiff+0xde>
 8008880:	080091fb 	.word	0x080091fb
 8008884:	0800926c 	.word	0x0800926c

08008888 <__d2b>:
 8008888:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800888c:	4689      	mov	r9, r1
 800888e:	2101      	movs	r1, #1
 8008890:	ec57 6b10 	vmov	r6, r7, d0
 8008894:	4690      	mov	r8, r2
 8008896:	f7ff fcd5 	bl	8008244 <_Balloc>
 800889a:	4604      	mov	r4, r0
 800889c:	b930      	cbnz	r0, 80088ac <__d2b+0x24>
 800889e:	4602      	mov	r2, r0
 80088a0:	4b25      	ldr	r3, [pc, #148]	; (8008938 <__d2b+0xb0>)
 80088a2:	4826      	ldr	r0, [pc, #152]	; (800893c <__d2b+0xb4>)
 80088a4:	f240 310a 	movw	r1, #778	; 0x30a
 80088a8:	f000 fac4 	bl	8008e34 <__assert_func>
 80088ac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80088b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80088b4:	bb35      	cbnz	r5, 8008904 <__d2b+0x7c>
 80088b6:	2e00      	cmp	r6, #0
 80088b8:	9301      	str	r3, [sp, #4]
 80088ba:	d028      	beq.n	800890e <__d2b+0x86>
 80088bc:	4668      	mov	r0, sp
 80088be:	9600      	str	r6, [sp, #0]
 80088c0:	f7ff fd8c 	bl	80083dc <__lo0bits>
 80088c4:	9900      	ldr	r1, [sp, #0]
 80088c6:	b300      	cbz	r0, 800890a <__d2b+0x82>
 80088c8:	9a01      	ldr	r2, [sp, #4]
 80088ca:	f1c0 0320 	rsb	r3, r0, #32
 80088ce:	fa02 f303 	lsl.w	r3, r2, r3
 80088d2:	430b      	orrs	r3, r1
 80088d4:	40c2      	lsrs	r2, r0
 80088d6:	6163      	str	r3, [r4, #20]
 80088d8:	9201      	str	r2, [sp, #4]
 80088da:	9b01      	ldr	r3, [sp, #4]
 80088dc:	61a3      	str	r3, [r4, #24]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	bf14      	ite	ne
 80088e2:	2202      	movne	r2, #2
 80088e4:	2201      	moveq	r2, #1
 80088e6:	6122      	str	r2, [r4, #16]
 80088e8:	b1d5      	cbz	r5, 8008920 <__d2b+0x98>
 80088ea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80088ee:	4405      	add	r5, r0
 80088f0:	f8c9 5000 	str.w	r5, [r9]
 80088f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80088f8:	f8c8 0000 	str.w	r0, [r8]
 80088fc:	4620      	mov	r0, r4
 80088fe:	b003      	add	sp, #12
 8008900:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008904:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008908:	e7d5      	b.n	80088b6 <__d2b+0x2e>
 800890a:	6161      	str	r1, [r4, #20]
 800890c:	e7e5      	b.n	80088da <__d2b+0x52>
 800890e:	a801      	add	r0, sp, #4
 8008910:	f7ff fd64 	bl	80083dc <__lo0bits>
 8008914:	9b01      	ldr	r3, [sp, #4]
 8008916:	6163      	str	r3, [r4, #20]
 8008918:	2201      	movs	r2, #1
 800891a:	6122      	str	r2, [r4, #16]
 800891c:	3020      	adds	r0, #32
 800891e:	e7e3      	b.n	80088e8 <__d2b+0x60>
 8008920:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008924:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008928:	f8c9 0000 	str.w	r0, [r9]
 800892c:	6918      	ldr	r0, [r3, #16]
 800892e:	f7ff fd35 	bl	800839c <__hi0bits>
 8008932:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008936:	e7df      	b.n	80088f8 <__d2b+0x70>
 8008938:	080091fb 	.word	0x080091fb
 800893c:	0800926c 	.word	0x0800926c

08008940 <_calloc_r>:
 8008940:	b513      	push	{r0, r1, r4, lr}
 8008942:	434a      	muls	r2, r1
 8008944:	4611      	mov	r1, r2
 8008946:	9201      	str	r2, [sp, #4]
 8008948:	f000 f85a 	bl	8008a00 <_malloc_r>
 800894c:	4604      	mov	r4, r0
 800894e:	b118      	cbz	r0, 8008958 <_calloc_r+0x18>
 8008950:	9a01      	ldr	r2, [sp, #4]
 8008952:	2100      	movs	r1, #0
 8008954:	f7fd fe04 	bl	8006560 <memset>
 8008958:	4620      	mov	r0, r4
 800895a:	b002      	add	sp, #8
 800895c:	bd10      	pop	{r4, pc}
	...

08008960 <_free_r>:
 8008960:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008962:	2900      	cmp	r1, #0
 8008964:	d048      	beq.n	80089f8 <_free_r+0x98>
 8008966:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800896a:	9001      	str	r0, [sp, #4]
 800896c:	2b00      	cmp	r3, #0
 800896e:	f1a1 0404 	sub.w	r4, r1, #4
 8008972:	bfb8      	it	lt
 8008974:	18e4      	addlt	r4, r4, r3
 8008976:	f000 fae3 	bl	8008f40 <__malloc_lock>
 800897a:	4a20      	ldr	r2, [pc, #128]	; (80089fc <_free_r+0x9c>)
 800897c:	9801      	ldr	r0, [sp, #4]
 800897e:	6813      	ldr	r3, [r2, #0]
 8008980:	4615      	mov	r5, r2
 8008982:	b933      	cbnz	r3, 8008992 <_free_r+0x32>
 8008984:	6063      	str	r3, [r4, #4]
 8008986:	6014      	str	r4, [r2, #0]
 8008988:	b003      	add	sp, #12
 800898a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800898e:	f000 badd 	b.w	8008f4c <__malloc_unlock>
 8008992:	42a3      	cmp	r3, r4
 8008994:	d90b      	bls.n	80089ae <_free_r+0x4e>
 8008996:	6821      	ldr	r1, [r4, #0]
 8008998:	1862      	adds	r2, r4, r1
 800899a:	4293      	cmp	r3, r2
 800899c:	bf04      	itt	eq
 800899e:	681a      	ldreq	r2, [r3, #0]
 80089a0:	685b      	ldreq	r3, [r3, #4]
 80089a2:	6063      	str	r3, [r4, #4]
 80089a4:	bf04      	itt	eq
 80089a6:	1852      	addeq	r2, r2, r1
 80089a8:	6022      	streq	r2, [r4, #0]
 80089aa:	602c      	str	r4, [r5, #0]
 80089ac:	e7ec      	b.n	8008988 <_free_r+0x28>
 80089ae:	461a      	mov	r2, r3
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	b10b      	cbz	r3, 80089b8 <_free_r+0x58>
 80089b4:	42a3      	cmp	r3, r4
 80089b6:	d9fa      	bls.n	80089ae <_free_r+0x4e>
 80089b8:	6811      	ldr	r1, [r2, #0]
 80089ba:	1855      	adds	r5, r2, r1
 80089bc:	42a5      	cmp	r5, r4
 80089be:	d10b      	bne.n	80089d8 <_free_r+0x78>
 80089c0:	6824      	ldr	r4, [r4, #0]
 80089c2:	4421      	add	r1, r4
 80089c4:	1854      	adds	r4, r2, r1
 80089c6:	42a3      	cmp	r3, r4
 80089c8:	6011      	str	r1, [r2, #0]
 80089ca:	d1dd      	bne.n	8008988 <_free_r+0x28>
 80089cc:	681c      	ldr	r4, [r3, #0]
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	6053      	str	r3, [r2, #4]
 80089d2:	4421      	add	r1, r4
 80089d4:	6011      	str	r1, [r2, #0]
 80089d6:	e7d7      	b.n	8008988 <_free_r+0x28>
 80089d8:	d902      	bls.n	80089e0 <_free_r+0x80>
 80089da:	230c      	movs	r3, #12
 80089dc:	6003      	str	r3, [r0, #0]
 80089de:	e7d3      	b.n	8008988 <_free_r+0x28>
 80089e0:	6825      	ldr	r5, [r4, #0]
 80089e2:	1961      	adds	r1, r4, r5
 80089e4:	428b      	cmp	r3, r1
 80089e6:	bf04      	itt	eq
 80089e8:	6819      	ldreq	r1, [r3, #0]
 80089ea:	685b      	ldreq	r3, [r3, #4]
 80089ec:	6063      	str	r3, [r4, #4]
 80089ee:	bf04      	itt	eq
 80089f0:	1949      	addeq	r1, r1, r5
 80089f2:	6021      	streq	r1, [r4, #0]
 80089f4:	6054      	str	r4, [r2, #4]
 80089f6:	e7c7      	b.n	8008988 <_free_r+0x28>
 80089f8:	b003      	add	sp, #12
 80089fa:	bd30      	pop	{r4, r5, pc}
 80089fc:	20000324 	.word	0x20000324

08008a00 <_malloc_r>:
 8008a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a02:	1ccd      	adds	r5, r1, #3
 8008a04:	f025 0503 	bic.w	r5, r5, #3
 8008a08:	3508      	adds	r5, #8
 8008a0a:	2d0c      	cmp	r5, #12
 8008a0c:	bf38      	it	cc
 8008a0e:	250c      	movcc	r5, #12
 8008a10:	2d00      	cmp	r5, #0
 8008a12:	4606      	mov	r6, r0
 8008a14:	db01      	blt.n	8008a1a <_malloc_r+0x1a>
 8008a16:	42a9      	cmp	r1, r5
 8008a18:	d903      	bls.n	8008a22 <_malloc_r+0x22>
 8008a1a:	230c      	movs	r3, #12
 8008a1c:	6033      	str	r3, [r6, #0]
 8008a1e:	2000      	movs	r0, #0
 8008a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a22:	f000 fa8d 	bl	8008f40 <__malloc_lock>
 8008a26:	4921      	ldr	r1, [pc, #132]	; (8008aac <_malloc_r+0xac>)
 8008a28:	680a      	ldr	r2, [r1, #0]
 8008a2a:	4614      	mov	r4, r2
 8008a2c:	b99c      	cbnz	r4, 8008a56 <_malloc_r+0x56>
 8008a2e:	4f20      	ldr	r7, [pc, #128]	; (8008ab0 <_malloc_r+0xb0>)
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	b923      	cbnz	r3, 8008a3e <_malloc_r+0x3e>
 8008a34:	4621      	mov	r1, r4
 8008a36:	4630      	mov	r0, r6
 8008a38:	f000 f996 	bl	8008d68 <_sbrk_r>
 8008a3c:	6038      	str	r0, [r7, #0]
 8008a3e:	4629      	mov	r1, r5
 8008a40:	4630      	mov	r0, r6
 8008a42:	f000 f991 	bl	8008d68 <_sbrk_r>
 8008a46:	1c43      	adds	r3, r0, #1
 8008a48:	d123      	bne.n	8008a92 <_malloc_r+0x92>
 8008a4a:	230c      	movs	r3, #12
 8008a4c:	6033      	str	r3, [r6, #0]
 8008a4e:	4630      	mov	r0, r6
 8008a50:	f000 fa7c 	bl	8008f4c <__malloc_unlock>
 8008a54:	e7e3      	b.n	8008a1e <_malloc_r+0x1e>
 8008a56:	6823      	ldr	r3, [r4, #0]
 8008a58:	1b5b      	subs	r3, r3, r5
 8008a5a:	d417      	bmi.n	8008a8c <_malloc_r+0x8c>
 8008a5c:	2b0b      	cmp	r3, #11
 8008a5e:	d903      	bls.n	8008a68 <_malloc_r+0x68>
 8008a60:	6023      	str	r3, [r4, #0]
 8008a62:	441c      	add	r4, r3
 8008a64:	6025      	str	r5, [r4, #0]
 8008a66:	e004      	b.n	8008a72 <_malloc_r+0x72>
 8008a68:	6863      	ldr	r3, [r4, #4]
 8008a6a:	42a2      	cmp	r2, r4
 8008a6c:	bf0c      	ite	eq
 8008a6e:	600b      	streq	r3, [r1, #0]
 8008a70:	6053      	strne	r3, [r2, #4]
 8008a72:	4630      	mov	r0, r6
 8008a74:	f000 fa6a 	bl	8008f4c <__malloc_unlock>
 8008a78:	f104 000b 	add.w	r0, r4, #11
 8008a7c:	1d23      	adds	r3, r4, #4
 8008a7e:	f020 0007 	bic.w	r0, r0, #7
 8008a82:	1ac2      	subs	r2, r0, r3
 8008a84:	d0cc      	beq.n	8008a20 <_malloc_r+0x20>
 8008a86:	1a1b      	subs	r3, r3, r0
 8008a88:	50a3      	str	r3, [r4, r2]
 8008a8a:	e7c9      	b.n	8008a20 <_malloc_r+0x20>
 8008a8c:	4622      	mov	r2, r4
 8008a8e:	6864      	ldr	r4, [r4, #4]
 8008a90:	e7cc      	b.n	8008a2c <_malloc_r+0x2c>
 8008a92:	1cc4      	adds	r4, r0, #3
 8008a94:	f024 0403 	bic.w	r4, r4, #3
 8008a98:	42a0      	cmp	r0, r4
 8008a9a:	d0e3      	beq.n	8008a64 <_malloc_r+0x64>
 8008a9c:	1a21      	subs	r1, r4, r0
 8008a9e:	4630      	mov	r0, r6
 8008aa0:	f000 f962 	bl	8008d68 <_sbrk_r>
 8008aa4:	3001      	adds	r0, #1
 8008aa6:	d1dd      	bne.n	8008a64 <_malloc_r+0x64>
 8008aa8:	e7cf      	b.n	8008a4a <_malloc_r+0x4a>
 8008aaa:	bf00      	nop
 8008aac:	20000324 	.word	0x20000324
 8008ab0:	20000328 	.word	0x20000328

08008ab4 <__sfputc_r>:
 8008ab4:	6893      	ldr	r3, [r2, #8]
 8008ab6:	3b01      	subs	r3, #1
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	b410      	push	{r4}
 8008abc:	6093      	str	r3, [r2, #8]
 8008abe:	da08      	bge.n	8008ad2 <__sfputc_r+0x1e>
 8008ac0:	6994      	ldr	r4, [r2, #24]
 8008ac2:	42a3      	cmp	r3, r4
 8008ac4:	db01      	blt.n	8008aca <__sfputc_r+0x16>
 8008ac6:	290a      	cmp	r1, #10
 8008ac8:	d103      	bne.n	8008ad2 <__sfputc_r+0x1e>
 8008aca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ace:	f7fe ba47 	b.w	8006f60 <__swbuf_r>
 8008ad2:	6813      	ldr	r3, [r2, #0]
 8008ad4:	1c58      	adds	r0, r3, #1
 8008ad6:	6010      	str	r0, [r2, #0]
 8008ad8:	7019      	strb	r1, [r3, #0]
 8008ada:	4608      	mov	r0, r1
 8008adc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ae0:	4770      	bx	lr

08008ae2 <__sfputs_r>:
 8008ae2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ae4:	4606      	mov	r6, r0
 8008ae6:	460f      	mov	r7, r1
 8008ae8:	4614      	mov	r4, r2
 8008aea:	18d5      	adds	r5, r2, r3
 8008aec:	42ac      	cmp	r4, r5
 8008aee:	d101      	bne.n	8008af4 <__sfputs_r+0x12>
 8008af0:	2000      	movs	r0, #0
 8008af2:	e007      	b.n	8008b04 <__sfputs_r+0x22>
 8008af4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008af8:	463a      	mov	r2, r7
 8008afa:	4630      	mov	r0, r6
 8008afc:	f7ff ffda 	bl	8008ab4 <__sfputc_r>
 8008b00:	1c43      	adds	r3, r0, #1
 8008b02:	d1f3      	bne.n	8008aec <__sfputs_r+0xa>
 8008b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008b08 <_vfiprintf_r>:
 8008b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b0c:	460d      	mov	r5, r1
 8008b0e:	b09d      	sub	sp, #116	; 0x74
 8008b10:	4614      	mov	r4, r2
 8008b12:	4698      	mov	r8, r3
 8008b14:	4606      	mov	r6, r0
 8008b16:	b118      	cbz	r0, 8008b20 <_vfiprintf_r+0x18>
 8008b18:	6983      	ldr	r3, [r0, #24]
 8008b1a:	b90b      	cbnz	r3, 8008b20 <_vfiprintf_r+0x18>
 8008b1c:	f7ff fa72 	bl	8008004 <__sinit>
 8008b20:	4b89      	ldr	r3, [pc, #548]	; (8008d48 <_vfiprintf_r+0x240>)
 8008b22:	429d      	cmp	r5, r3
 8008b24:	d11b      	bne.n	8008b5e <_vfiprintf_r+0x56>
 8008b26:	6875      	ldr	r5, [r6, #4]
 8008b28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b2a:	07d9      	lsls	r1, r3, #31
 8008b2c:	d405      	bmi.n	8008b3a <_vfiprintf_r+0x32>
 8008b2e:	89ab      	ldrh	r3, [r5, #12]
 8008b30:	059a      	lsls	r2, r3, #22
 8008b32:	d402      	bmi.n	8008b3a <_vfiprintf_r+0x32>
 8008b34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b36:	f7ff fb08 	bl	800814a <__retarget_lock_acquire_recursive>
 8008b3a:	89ab      	ldrh	r3, [r5, #12]
 8008b3c:	071b      	lsls	r3, r3, #28
 8008b3e:	d501      	bpl.n	8008b44 <_vfiprintf_r+0x3c>
 8008b40:	692b      	ldr	r3, [r5, #16]
 8008b42:	b9eb      	cbnz	r3, 8008b80 <_vfiprintf_r+0x78>
 8008b44:	4629      	mov	r1, r5
 8008b46:	4630      	mov	r0, r6
 8008b48:	f7fe fa5c 	bl	8007004 <__swsetup_r>
 8008b4c:	b1c0      	cbz	r0, 8008b80 <_vfiprintf_r+0x78>
 8008b4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b50:	07dc      	lsls	r4, r3, #31
 8008b52:	d50e      	bpl.n	8008b72 <_vfiprintf_r+0x6a>
 8008b54:	f04f 30ff 	mov.w	r0, #4294967295
 8008b58:	b01d      	add	sp, #116	; 0x74
 8008b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b5e:	4b7b      	ldr	r3, [pc, #492]	; (8008d4c <_vfiprintf_r+0x244>)
 8008b60:	429d      	cmp	r5, r3
 8008b62:	d101      	bne.n	8008b68 <_vfiprintf_r+0x60>
 8008b64:	68b5      	ldr	r5, [r6, #8]
 8008b66:	e7df      	b.n	8008b28 <_vfiprintf_r+0x20>
 8008b68:	4b79      	ldr	r3, [pc, #484]	; (8008d50 <_vfiprintf_r+0x248>)
 8008b6a:	429d      	cmp	r5, r3
 8008b6c:	bf08      	it	eq
 8008b6e:	68f5      	ldreq	r5, [r6, #12]
 8008b70:	e7da      	b.n	8008b28 <_vfiprintf_r+0x20>
 8008b72:	89ab      	ldrh	r3, [r5, #12]
 8008b74:	0598      	lsls	r0, r3, #22
 8008b76:	d4ed      	bmi.n	8008b54 <_vfiprintf_r+0x4c>
 8008b78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b7a:	f7ff fae7 	bl	800814c <__retarget_lock_release_recursive>
 8008b7e:	e7e9      	b.n	8008b54 <_vfiprintf_r+0x4c>
 8008b80:	2300      	movs	r3, #0
 8008b82:	9309      	str	r3, [sp, #36]	; 0x24
 8008b84:	2320      	movs	r3, #32
 8008b86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b8e:	2330      	movs	r3, #48	; 0x30
 8008b90:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008d54 <_vfiprintf_r+0x24c>
 8008b94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b98:	f04f 0901 	mov.w	r9, #1
 8008b9c:	4623      	mov	r3, r4
 8008b9e:	469a      	mov	sl, r3
 8008ba0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ba4:	b10a      	cbz	r2, 8008baa <_vfiprintf_r+0xa2>
 8008ba6:	2a25      	cmp	r2, #37	; 0x25
 8008ba8:	d1f9      	bne.n	8008b9e <_vfiprintf_r+0x96>
 8008baa:	ebba 0b04 	subs.w	fp, sl, r4
 8008bae:	d00b      	beq.n	8008bc8 <_vfiprintf_r+0xc0>
 8008bb0:	465b      	mov	r3, fp
 8008bb2:	4622      	mov	r2, r4
 8008bb4:	4629      	mov	r1, r5
 8008bb6:	4630      	mov	r0, r6
 8008bb8:	f7ff ff93 	bl	8008ae2 <__sfputs_r>
 8008bbc:	3001      	adds	r0, #1
 8008bbe:	f000 80aa 	beq.w	8008d16 <_vfiprintf_r+0x20e>
 8008bc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bc4:	445a      	add	r2, fp
 8008bc6:	9209      	str	r2, [sp, #36]	; 0x24
 8008bc8:	f89a 3000 	ldrb.w	r3, [sl]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	f000 80a2 	beq.w	8008d16 <_vfiprintf_r+0x20e>
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8008bd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008bdc:	f10a 0a01 	add.w	sl, sl, #1
 8008be0:	9304      	str	r3, [sp, #16]
 8008be2:	9307      	str	r3, [sp, #28]
 8008be4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008be8:	931a      	str	r3, [sp, #104]	; 0x68
 8008bea:	4654      	mov	r4, sl
 8008bec:	2205      	movs	r2, #5
 8008bee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bf2:	4858      	ldr	r0, [pc, #352]	; (8008d54 <_vfiprintf_r+0x24c>)
 8008bf4:	f7f7 fb24 	bl	8000240 <memchr>
 8008bf8:	9a04      	ldr	r2, [sp, #16]
 8008bfa:	b9d8      	cbnz	r0, 8008c34 <_vfiprintf_r+0x12c>
 8008bfc:	06d1      	lsls	r1, r2, #27
 8008bfe:	bf44      	itt	mi
 8008c00:	2320      	movmi	r3, #32
 8008c02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c06:	0713      	lsls	r3, r2, #28
 8008c08:	bf44      	itt	mi
 8008c0a:	232b      	movmi	r3, #43	; 0x2b
 8008c0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c10:	f89a 3000 	ldrb.w	r3, [sl]
 8008c14:	2b2a      	cmp	r3, #42	; 0x2a
 8008c16:	d015      	beq.n	8008c44 <_vfiprintf_r+0x13c>
 8008c18:	9a07      	ldr	r2, [sp, #28]
 8008c1a:	4654      	mov	r4, sl
 8008c1c:	2000      	movs	r0, #0
 8008c1e:	f04f 0c0a 	mov.w	ip, #10
 8008c22:	4621      	mov	r1, r4
 8008c24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c28:	3b30      	subs	r3, #48	; 0x30
 8008c2a:	2b09      	cmp	r3, #9
 8008c2c:	d94e      	bls.n	8008ccc <_vfiprintf_r+0x1c4>
 8008c2e:	b1b0      	cbz	r0, 8008c5e <_vfiprintf_r+0x156>
 8008c30:	9207      	str	r2, [sp, #28]
 8008c32:	e014      	b.n	8008c5e <_vfiprintf_r+0x156>
 8008c34:	eba0 0308 	sub.w	r3, r0, r8
 8008c38:	fa09 f303 	lsl.w	r3, r9, r3
 8008c3c:	4313      	orrs	r3, r2
 8008c3e:	9304      	str	r3, [sp, #16]
 8008c40:	46a2      	mov	sl, r4
 8008c42:	e7d2      	b.n	8008bea <_vfiprintf_r+0xe2>
 8008c44:	9b03      	ldr	r3, [sp, #12]
 8008c46:	1d19      	adds	r1, r3, #4
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	9103      	str	r1, [sp, #12]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	bfbb      	ittet	lt
 8008c50:	425b      	neglt	r3, r3
 8008c52:	f042 0202 	orrlt.w	r2, r2, #2
 8008c56:	9307      	strge	r3, [sp, #28]
 8008c58:	9307      	strlt	r3, [sp, #28]
 8008c5a:	bfb8      	it	lt
 8008c5c:	9204      	strlt	r2, [sp, #16]
 8008c5e:	7823      	ldrb	r3, [r4, #0]
 8008c60:	2b2e      	cmp	r3, #46	; 0x2e
 8008c62:	d10c      	bne.n	8008c7e <_vfiprintf_r+0x176>
 8008c64:	7863      	ldrb	r3, [r4, #1]
 8008c66:	2b2a      	cmp	r3, #42	; 0x2a
 8008c68:	d135      	bne.n	8008cd6 <_vfiprintf_r+0x1ce>
 8008c6a:	9b03      	ldr	r3, [sp, #12]
 8008c6c:	1d1a      	adds	r2, r3, #4
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	9203      	str	r2, [sp, #12]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	bfb8      	it	lt
 8008c76:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c7a:	3402      	adds	r4, #2
 8008c7c:	9305      	str	r3, [sp, #20]
 8008c7e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008d64 <_vfiprintf_r+0x25c>
 8008c82:	7821      	ldrb	r1, [r4, #0]
 8008c84:	2203      	movs	r2, #3
 8008c86:	4650      	mov	r0, sl
 8008c88:	f7f7 fada 	bl	8000240 <memchr>
 8008c8c:	b140      	cbz	r0, 8008ca0 <_vfiprintf_r+0x198>
 8008c8e:	2340      	movs	r3, #64	; 0x40
 8008c90:	eba0 000a 	sub.w	r0, r0, sl
 8008c94:	fa03 f000 	lsl.w	r0, r3, r0
 8008c98:	9b04      	ldr	r3, [sp, #16]
 8008c9a:	4303      	orrs	r3, r0
 8008c9c:	3401      	adds	r4, #1
 8008c9e:	9304      	str	r3, [sp, #16]
 8008ca0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ca4:	482c      	ldr	r0, [pc, #176]	; (8008d58 <_vfiprintf_r+0x250>)
 8008ca6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008caa:	2206      	movs	r2, #6
 8008cac:	f7f7 fac8 	bl	8000240 <memchr>
 8008cb0:	2800      	cmp	r0, #0
 8008cb2:	d03f      	beq.n	8008d34 <_vfiprintf_r+0x22c>
 8008cb4:	4b29      	ldr	r3, [pc, #164]	; (8008d5c <_vfiprintf_r+0x254>)
 8008cb6:	bb1b      	cbnz	r3, 8008d00 <_vfiprintf_r+0x1f8>
 8008cb8:	9b03      	ldr	r3, [sp, #12]
 8008cba:	3307      	adds	r3, #7
 8008cbc:	f023 0307 	bic.w	r3, r3, #7
 8008cc0:	3308      	adds	r3, #8
 8008cc2:	9303      	str	r3, [sp, #12]
 8008cc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cc6:	443b      	add	r3, r7
 8008cc8:	9309      	str	r3, [sp, #36]	; 0x24
 8008cca:	e767      	b.n	8008b9c <_vfiprintf_r+0x94>
 8008ccc:	fb0c 3202 	mla	r2, ip, r2, r3
 8008cd0:	460c      	mov	r4, r1
 8008cd2:	2001      	movs	r0, #1
 8008cd4:	e7a5      	b.n	8008c22 <_vfiprintf_r+0x11a>
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	3401      	adds	r4, #1
 8008cda:	9305      	str	r3, [sp, #20]
 8008cdc:	4619      	mov	r1, r3
 8008cde:	f04f 0c0a 	mov.w	ip, #10
 8008ce2:	4620      	mov	r0, r4
 8008ce4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ce8:	3a30      	subs	r2, #48	; 0x30
 8008cea:	2a09      	cmp	r2, #9
 8008cec:	d903      	bls.n	8008cf6 <_vfiprintf_r+0x1ee>
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d0c5      	beq.n	8008c7e <_vfiprintf_r+0x176>
 8008cf2:	9105      	str	r1, [sp, #20]
 8008cf4:	e7c3      	b.n	8008c7e <_vfiprintf_r+0x176>
 8008cf6:	fb0c 2101 	mla	r1, ip, r1, r2
 8008cfa:	4604      	mov	r4, r0
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	e7f0      	b.n	8008ce2 <_vfiprintf_r+0x1da>
 8008d00:	ab03      	add	r3, sp, #12
 8008d02:	9300      	str	r3, [sp, #0]
 8008d04:	462a      	mov	r2, r5
 8008d06:	4b16      	ldr	r3, [pc, #88]	; (8008d60 <_vfiprintf_r+0x258>)
 8008d08:	a904      	add	r1, sp, #16
 8008d0a:	4630      	mov	r0, r6
 8008d0c:	f7fd fcd0 	bl	80066b0 <_printf_float>
 8008d10:	4607      	mov	r7, r0
 8008d12:	1c78      	adds	r0, r7, #1
 8008d14:	d1d6      	bne.n	8008cc4 <_vfiprintf_r+0x1bc>
 8008d16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d18:	07d9      	lsls	r1, r3, #31
 8008d1a:	d405      	bmi.n	8008d28 <_vfiprintf_r+0x220>
 8008d1c:	89ab      	ldrh	r3, [r5, #12]
 8008d1e:	059a      	lsls	r2, r3, #22
 8008d20:	d402      	bmi.n	8008d28 <_vfiprintf_r+0x220>
 8008d22:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d24:	f7ff fa12 	bl	800814c <__retarget_lock_release_recursive>
 8008d28:	89ab      	ldrh	r3, [r5, #12]
 8008d2a:	065b      	lsls	r3, r3, #25
 8008d2c:	f53f af12 	bmi.w	8008b54 <_vfiprintf_r+0x4c>
 8008d30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d32:	e711      	b.n	8008b58 <_vfiprintf_r+0x50>
 8008d34:	ab03      	add	r3, sp, #12
 8008d36:	9300      	str	r3, [sp, #0]
 8008d38:	462a      	mov	r2, r5
 8008d3a:	4b09      	ldr	r3, [pc, #36]	; (8008d60 <_vfiprintf_r+0x258>)
 8008d3c:	a904      	add	r1, sp, #16
 8008d3e:	4630      	mov	r0, r6
 8008d40:	f7fd ff5a 	bl	8006bf8 <_printf_i>
 8008d44:	e7e4      	b.n	8008d10 <_vfiprintf_r+0x208>
 8008d46:	bf00      	nop
 8008d48:	0800922c 	.word	0x0800922c
 8008d4c:	0800924c 	.word	0x0800924c
 8008d50:	0800920c 	.word	0x0800920c
 8008d54:	080093cc 	.word	0x080093cc
 8008d58:	080093d6 	.word	0x080093d6
 8008d5c:	080066b1 	.word	0x080066b1
 8008d60:	08008ae3 	.word	0x08008ae3
 8008d64:	080093d2 	.word	0x080093d2

08008d68 <_sbrk_r>:
 8008d68:	b538      	push	{r3, r4, r5, lr}
 8008d6a:	4d06      	ldr	r5, [pc, #24]	; (8008d84 <_sbrk_r+0x1c>)
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	4604      	mov	r4, r0
 8008d70:	4608      	mov	r0, r1
 8008d72:	602b      	str	r3, [r5, #0]
 8008d74:	f7f9 f99e 	bl	80020b4 <_sbrk>
 8008d78:	1c43      	adds	r3, r0, #1
 8008d7a:	d102      	bne.n	8008d82 <_sbrk_r+0x1a>
 8008d7c:	682b      	ldr	r3, [r5, #0]
 8008d7e:	b103      	cbz	r3, 8008d82 <_sbrk_r+0x1a>
 8008d80:	6023      	str	r3, [r4, #0]
 8008d82:	bd38      	pop	{r3, r4, r5, pc}
 8008d84:	2000058c 	.word	0x2000058c

08008d88 <__sread>:
 8008d88:	b510      	push	{r4, lr}
 8008d8a:	460c      	mov	r4, r1
 8008d8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d90:	f000 f8e2 	bl	8008f58 <_read_r>
 8008d94:	2800      	cmp	r0, #0
 8008d96:	bfab      	itete	ge
 8008d98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008d9a:	89a3      	ldrhlt	r3, [r4, #12]
 8008d9c:	181b      	addge	r3, r3, r0
 8008d9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008da2:	bfac      	ite	ge
 8008da4:	6563      	strge	r3, [r4, #84]	; 0x54
 8008da6:	81a3      	strhlt	r3, [r4, #12]
 8008da8:	bd10      	pop	{r4, pc}

08008daa <__swrite>:
 8008daa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dae:	461f      	mov	r7, r3
 8008db0:	898b      	ldrh	r3, [r1, #12]
 8008db2:	05db      	lsls	r3, r3, #23
 8008db4:	4605      	mov	r5, r0
 8008db6:	460c      	mov	r4, r1
 8008db8:	4616      	mov	r6, r2
 8008dba:	d505      	bpl.n	8008dc8 <__swrite+0x1e>
 8008dbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dc0:	2302      	movs	r3, #2
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	f000 f898 	bl	8008ef8 <_lseek_r>
 8008dc8:	89a3      	ldrh	r3, [r4, #12]
 8008dca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008dce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008dd2:	81a3      	strh	r3, [r4, #12]
 8008dd4:	4632      	mov	r2, r6
 8008dd6:	463b      	mov	r3, r7
 8008dd8:	4628      	mov	r0, r5
 8008dda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008dde:	f000 b817 	b.w	8008e10 <_write_r>

08008de2 <__sseek>:
 8008de2:	b510      	push	{r4, lr}
 8008de4:	460c      	mov	r4, r1
 8008de6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dea:	f000 f885 	bl	8008ef8 <_lseek_r>
 8008dee:	1c43      	adds	r3, r0, #1
 8008df0:	89a3      	ldrh	r3, [r4, #12]
 8008df2:	bf15      	itete	ne
 8008df4:	6560      	strne	r0, [r4, #84]	; 0x54
 8008df6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008dfa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008dfe:	81a3      	strheq	r3, [r4, #12]
 8008e00:	bf18      	it	ne
 8008e02:	81a3      	strhne	r3, [r4, #12]
 8008e04:	bd10      	pop	{r4, pc}

08008e06 <__sclose>:
 8008e06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e0a:	f000 b831 	b.w	8008e70 <_close_r>
	...

08008e10 <_write_r>:
 8008e10:	b538      	push	{r3, r4, r5, lr}
 8008e12:	4d07      	ldr	r5, [pc, #28]	; (8008e30 <_write_r+0x20>)
 8008e14:	4604      	mov	r4, r0
 8008e16:	4608      	mov	r0, r1
 8008e18:	4611      	mov	r1, r2
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	602a      	str	r2, [r5, #0]
 8008e1e:	461a      	mov	r2, r3
 8008e20:	f7f9 f8f7 	bl	8002012 <_write>
 8008e24:	1c43      	adds	r3, r0, #1
 8008e26:	d102      	bne.n	8008e2e <_write_r+0x1e>
 8008e28:	682b      	ldr	r3, [r5, #0]
 8008e2a:	b103      	cbz	r3, 8008e2e <_write_r+0x1e>
 8008e2c:	6023      	str	r3, [r4, #0]
 8008e2e:	bd38      	pop	{r3, r4, r5, pc}
 8008e30:	2000058c 	.word	0x2000058c

08008e34 <__assert_func>:
 8008e34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008e36:	4614      	mov	r4, r2
 8008e38:	461a      	mov	r2, r3
 8008e3a:	4b09      	ldr	r3, [pc, #36]	; (8008e60 <__assert_func+0x2c>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4605      	mov	r5, r0
 8008e40:	68d8      	ldr	r0, [r3, #12]
 8008e42:	b14c      	cbz	r4, 8008e58 <__assert_func+0x24>
 8008e44:	4b07      	ldr	r3, [pc, #28]	; (8008e64 <__assert_func+0x30>)
 8008e46:	9100      	str	r1, [sp, #0]
 8008e48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008e4c:	4906      	ldr	r1, [pc, #24]	; (8008e68 <__assert_func+0x34>)
 8008e4e:	462b      	mov	r3, r5
 8008e50:	f000 f81e 	bl	8008e90 <fiprintf>
 8008e54:	f000 f89f 	bl	8008f96 <abort>
 8008e58:	4b04      	ldr	r3, [pc, #16]	; (8008e6c <__assert_func+0x38>)
 8008e5a:	461c      	mov	r4, r3
 8008e5c:	e7f3      	b.n	8008e46 <__assert_func+0x12>
 8008e5e:	bf00      	nop
 8008e60:	2000002c 	.word	0x2000002c
 8008e64:	080093dd 	.word	0x080093dd
 8008e68:	080093ea 	.word	0x080093ea
 8008e6c:	08009418 	.word	0x08009418

08008e70 <_close_r>:
 8008e70:	b538      	push	{r3, r4, r5, lr}
 8008e72:	4d06      	ldr	r5, [pc, #24]	; (8008e8c <_close_r+0x1c>)
 8008e74:	2300      	movs	r3, #0
 8008e76:	4604      	mov	r4, r0
 8008e78:	4608      	mov	r0, r1
 8008e7a:	602b      	str	r3, [r5, #0]
 8008e7c:	f7f9 f8e5 	bl	800204a <_close>
 8008e80:	1c43      	adds	r3, r0, #1
 8008e82:	d102      	bne.n	8008e8a <_close_r+0x1a>
 8008e84:	682b      	ldr	r3, [r5, #0]
 8008e86:	b103      	cbz	r3, 8008e8a <_close_r+0x1a>
 8008e88:	6023      	str	r3, [r4, #0]
 8008e8a:	bd38      	pop	{r3, r4, r5, pc}
 8008e8c:	2000058c 	.word	0x2000058c

08008e90 <fiprintf>:
 8008e90:	b40e      	push	{r1, r2, r3}
 8008e92:	b503      	push	{r0, r1, lr}
 8008e94:	4601      	mov	r1, r0
 8008e96:	ab03      	add	r3, sp, #12
 8008e98:	4805      	ldr	r0, [pc, #20]	; (8008eb0 <fiprintf+0x20>)
 8008e9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e9e:	6800      	ldr	r0, [r0, #0]
 8008ea0:	9301      	str	r3, [sp, #4]
 8008ea2:	f7ff fe31 	bl	8008b08 <_vfiprintf_r>
 8008ea6:	b002      	add	sp, #8
 8008ea8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008eac:	b003      	add	sp, #12
 8008eae:	4770      	bx	lr
 8008eb0:	2000002c 	.word	0x2000002c

08008eb4 <_fstat_r>:
 8008eb4:	b538      	push	{r3, r4, r5, lr}
 8008eb6:	4d07      	ldr	r5, [pc, #28]	; (8008ed4 <_fstat_r+0x20>)
 8008eb8:	2300      	movs	r3, #0
 8008eba:	4604      	mov	r4, r0
 8008ebc:	4608      	mov	r0, r1
 8008ebe:	4611      	mov	r1, r2
 8008ec0:	602b      	str	r3, [r5, #0]
 8008ec2:	f7f9 f8ce 	bl	8002062 <_fstat>
 8008ec6:	1c43      	adds	r3, r0, #1
 8008ec8:	d102      	bne.n	8008ed0 <_fstat_r+0x1c>
 8008eca:	682b      	ldr	r3, [r5, #0]
 8008ecc:	b103      	cbz	r3, 8008ed0 <_fstat_r+0x1c>
 8008ece:	6023      	str	r3, [r4, #0]
 8008ed0:	bd38      	pop	{r3, r4, r5, pc}
 8008ed2:	bf00      	nop
 8008ed4:	2000058c 	.word	0x2000058c

08008ed8 <_isatty_r>:
 8008ed8:	b538      	push	{r3, r4, r5, lr}
 8008eda:	4d06      	ldr	r5, [pc, #24]	; (8008ef4 <_isatty_r+0x1c>)
 8008edc:	2300      	movs	r3, #0
 8008ede:	4604      	mov	r4, r0
 8008ee0:	4608      	mov	r0, r1
 8008ee2:	602b      	str	r3, [r5, #0]
 8008ee4:	f7f9 f8cd 	bl	8002082 <_isatty>
 8008ee8:	1c43      	adds	r3, r0, #1
 8008eea:	d102      	bne.n	8008ef2 <_isatty_r+0x1a>
 8008eec:	682b      	ldr	r3, [r5, #0]
 8008eee:	b103      	cbz	r3, 8008ef2 <_isatty_r+0x1a>
 8008ef0:	6023      	str	r3, [r4, #0]
 8008ef2:	bd38      	pop	{r3, r4, r5, pc}
 8008ef4:	2000058c 	.word	0x2000058c

08008ef8 <_lseek_r>:
 8008ef8:	b538      	push	{r3, r4, r5, lr}
 8008efa:	4d07      	ldr	r5, [pc, #28]	; (8008f18 <_lseek_r+0x20>)
 8008efc:	4604      	mov	r4, r0
 8008efe:	4608      	mov	r0, r1
 8008f00:	4611      	mov	r1, r2
 8008f02:	2200      	movs	r2, #0
 8008f04:	602a      	str	r2, [r5, #0]
 8008f06:	461a      	mov	r2, r3
 8008f08:	f7f9 f8c6 	bl	8002098 <_lseek>
 8008f0c:	1c43      	adds	r3, r0, #1
 8008f0e:	d102      	bne.n	8008f16 <_lseek_r+0x1e>
 8008f10:	682b      	ldr	r3, [r5, #0]
 8008f12:	b103      	cbz	r3, 8008f16 <_lseek_r+0x1e>
 8008f14:	6023      	str	r3, [r4, #0]
 8008f16:	bd38      	pop	{r3, r4, r5, pc}
 8008f18:	2000058c 	.word	0x2000058c

08008f1c <__ascii_mbtowc>:
 8008f1c:	b082      	sub	sp, #8
 8008f1e:	b901      	cbnz	r1, 8008f22 <__ascii_mbtowc+0x6>
 8008f20:	a901      	add	r1, sp, #4
 8008f22:	b142      	cbz	r2, 8008f36 <__ascii_mbtowc+0x1a>
 8008f24:	b14b      	cbz	r3, 8008f3a <__ascii_mbtowc+0x1e>
 8008f26:	7813      	ldrb	r3, [r2, #0]
 8008f28:	600b      	str	r3, [r1, #0]
 8008f2a:	7812      	ldrb	r2, [r2, #0]
 8008f2c:	1e10      	subs	r0, r2, #0
 8008f2e:	bf18      	it	ne
 8008f30:	2001      	movne	r0, #1
 8008f32:	b002      	add	sp, #8
 8008f34:	4770      	bx	lr
 8008f36:	4610      	mov	r0, r2
 8008f38:	e7fb      	b.n	8008f32 <__ascii_mbtowc+0x16>
 8008f3a:	f06f 0001 	mvn.w	r0, #1
 8008f3e:	e7f8      	b.n	8008f32 <__ascii_mbtowc+0x16>

08008f40 <__malloc_lock>:
 8008f40:	4801      	ldr	r0, [pc, #4]	; (8008f48 <__malloc_lock+0x8>)
 8008f42:	f7ff b902 	b.w	800814a <__retarget_lock_acquire_recursive>
 8008f46:	bf00      	nop
 8008f48:	20000584 	.word	0x20000584

08008f4c <__malloc_unlock>:
 8008f4c:	4801      	ldr	r0, [pc, #4]	; (8008f54 <__malloc_unlock+0x8>)
 8008f4e:	f7ff b8fd 	b.w	800814c <__retarget_lock_release_recursive>
 8008f52:	bf00      	nop
 8008f54:	20000584 	.word	0x20000584

08008f58 <_read_r>:
 8008f58:	b538      	push	{r3, r4, r5, lr}
 8008f5a:	4d07      	ldr	r5, [pc, #28]	; (8008f78 <_read_r+0x20>)
 8008f5c:	4604      	mov	r4, r0
 8008f5e:	4608      	mov	r0, r1
 8008f60:	4611      	mov	r1, r2
 8008f62:	2200      	movs	r2, #0
 8008f64:	602a      	str	r2, [r5, #0]
 8008f66:	461a      	mov	r2, r3
 8008f68:	f7f9 f836 	bl	8001fd8 <_read>
 8008f6c:	1c43      	adds	r3, r0, #1
 8008f6e:	d102      	bne.n	8008f76 <_read_r+0x1e>
 8008f70:	682b      	ldr	r3, [r5, #0]
 8008f72:	b103      	cbz	r3, 8008f76 <_read_r+0x1e>
 8008f74:	6023      	str	r3, [r4, #0]
 8008f76:	bd38      	pop	{r3, r4, r5, pc}
 8008f78:	2000058c 	.word	0x2000058c

08008f7c <__ascii_wctomb>:
 8008f7c:	b149      	cbz	r1, 8008f92 <__ascii_wctomb+0x16>
 8008f7e:	2aff      	cmp	r2, #255	; 0xff
 8008f80:	bf85      	ittet	hi
 8008f82:	238a      	movhi	r3, #138	; 0x8a
 8008f84:	6003      	strhi	r3, [r0, #0]
 8008f86:	700a      	strbls	r2, [r1, #0]
 8008f88:	f04f 30ff 	movhi.w	r0, #4294967295
 8008f8c:	bf98      	it	ls
 8008f8e:	2001      	movls	r0, #1
 8008f90:	4770      	bx	lr
 8008f92:	4608      	mov	r0, r1
 8008f94:	4770      	bx	lr

08008f96 <abort>:
 8008f96:	b508      	push	{r3, lr}
 8008f98:	2006      	movs	r0, #6
 8008f9a:	f000 f82b 	bl	8008ff4 <raise>
 8008f9e:	2001      	movs	r0, #1
 8008fa0:	f7f9 f810 	bl	8001fc4 <_exit>

08008fa4 <_raise_r>:
 8008fa4:	291f      	cmp	r1, #31
 8008fa6:	b538      	push	{r3, r4, r5, lr}
 8008fa8:	4604      	mov	r4, r0
 8008faa:	460d      	mov	r5, r1
 8008fac:	d904      	bls.n	8008fb8 <_raise_r+0x14>
 8008fae:	2316      	movs	r3, #22
 8008fb0:	6003      	str	r3, [r0, #0]
 8008fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8008fb6:	bd38      	pop	{r3, r4, r5, pc}
 8008fb8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008fba:	b112      	cbz	r2, 8008fc2 <_raise_r+0x1e>
 8008fbc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008fc0:	b94b      	cbnz	r3, 8008fd6 <_raise_r+0x32>
 8008fc2:	4620      	mov	r0, r4
 8008fc4:	f000 f830 	bl	8009028 <_getpid_r>
 8008fc8:	462a      	mov	r2, r5
 8008fca:	4601      	mov	r1, r0
 8008fcc:	4620      	mov	r0, r4
 8008fce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008fd2:	f000 b817 	b.w	8009004 <_kill_r>
 8008fd6:	2b01      	cmp	r3, #1
 8008fd8:	d00a      	beq.n	8008ff0 <_raise_r+0x4c>
 8008fda:	1c59      	adds	r1, r3, #1
 8008fdc:	d103      	bne.n	8008fe6 <_raise_r+0x42>
 8008fde:	2316      	movs	r3, #22
 8008fe0:	6003      	str	r3, [r0, #0]
 8008fe2:	2001      	movs	r0, #1
 8008fe4:	e7e7      	b.n	8008fb6 <_raise_r+0x12>
 8008fe6:	2400      	movs	r4, #0
 8008fe8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008fec:	4628      	mov	r0, r5
 8008fee:	4798      	blx	r3
 8008ff0:	2000      	movs	r0, #0
 8008ff2:	e7e0      	b.n	8008fb6 <_raise_r+0x12>

08008ff4 <raise>:
 8008ff4:	4b02      	ldr	r3, [pc, #8]	; (8009000 <raise+0xc>)
 8008ff6:	4601      	mov	r1, r0
 8008ff8:	6818      	ldr	r0, [r3, #0]
 8008ffa:	f7ff bfd3 	b.w	8008fa4 <_raise_r>
 8008ffe:	bf00      	nop
 8009000:	2000002c 	.word	0x2000002c

08009004 <_kill_r>:
 8009004:	b538      	push	{r3, r4, r5, lr}
 8009006:	4d07      	ldr	r5, [pc, #28]	; (8009024 <_kill_r+0x20>)
 8009008:	2300      	movs	r3, #0
 800900a:	4604      	mov	r4, r0
 800900c:	4608      	mov	r0, r1
 800900e:	4611      	mov	r1, r2
 8009010:	602b      	str	r3, [r5, #0]
 8009012:	f7f8 ffc7 	bl	8001fa4 <_kill>
 8009016:	1c43      	adds	r3, r0, #1
 8009018:	d102      	bne.n	8009020 <_kill_r+0x1c>
 800901a:	682b      	ldr	r3, [r5, #0]
 800901c:	b103      	cbz	r3, 8009020 <_kill_r+0x1c>
 800901e:	6023      	str	r3, [r4, #0]
 8009020:	bd38      	pop	{r3, r4, r5, pc}
 8009022:	bf00      	nop
 8009024:	2000058c 	.word	0x2000058c

08009028 <_getpid_r>:
 8009028:	f7f8 bfb4 	b.w	8001f94 <_getpid>

0800902c <_init>:
 800902c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800902e:	bf00      	nop
 8009030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009032:	bc08      	pop	{r3}
 8009034:	469e      	mov	lr, r3
 8009036:	4770      	bx	lr

08009038 <_fini>:
 8009038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800903a:	bf00      	nop
 800903c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800903e:	bc08      	pop	{r3}
 8009040:	469e      	mov	lr, r3
 8009042:	4770      	bx	lr
