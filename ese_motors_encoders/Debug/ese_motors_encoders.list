
ese_motors_encoders.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000563c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  0800580c  0800580c  0001580c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058e4  080058e4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080058e4  080058e4  000158e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058ec  080058ec  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058ec  080058ec  000158ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058f0  080058f0  000158f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080058f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  20000070  08005964  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  08005964  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015570  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b74  00000000  00000000  00035610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e68  00000000  00000000  00038188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d30  00000000  00000000  00038ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023c52  00000000  00000000  00039d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012b06  00000000  00000000  0005d972  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d27e7  00000000  00000000  00070478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00142c5f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000422c  00000000  00000000  00142cb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080057f4 	.word	0x080057f4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080057f4 	.word	0x080057f4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <Ctrl_Init_SetTimer>:
/*	@brief	Initialization of the motor control configuration structure with timer settings
 *	@param	Motor is a Ctrl_Struct structure
 *	@param 	htim is the TIM handle
 *	@retval 0
 */
uint8_t Ctrl_Init_SetTimer(Ctrl_Struct* Control, TIM_HandleTypeDef *htim){
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
 80005b0:	6039      	str	r1, [r7, #0]
	Control->Timer = htim;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	683a      	ldr	r2, [r7, #0]
 80005b6:	601a      	str	r2, [r3, #0]

	HAL_TIM_Base_Start_IT(Control->Timer);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4618      	mov	r0, r3
 80005be:	f001 ffe1 	bl	8002584 <HAL_TIM_Base_Start_IT>
	return 0;
 80005c2:	2300      	movs	r3, #0
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <Ctrl_MotorControl>:

/*	@brief	Main motor control function
 *	@param	None
 *	@retval 0
 */
uint8_t Ctrl_MotorControl(){
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	Odo_Odometry();
 80005d0:	f000 f91a 	bl	8000808 <Odo_Odometry>

	return 0;
 80005d4:	2300      	movs	r3, #0
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	bd80      	pop	{r7, pc}

080005da <Enc_Init_SetTimer>:
 *	@param 	htim is the TIM handle
 *  @param  Channel_A is the TIM Channels
 *  @param  Channel_B is the TIM Channels
 *	@retval 0
 */
uint8_t Enc_Init_SetTimer(Enc_Struct* Encoder, TIM_HandleTypeDef *htim, uint32_t Channel_A, uint32_t Channel_B){
 80005da:	b580      	push	{r7, lr}
 80005dc:	b084      	sub	sp, #16
 80005de:	af00      	add	r7, sp, #0
 80005e0:	60f8      	str	r0, [r7, #12]
 80005e2:	60b9      	str	r1, [r7, #8]
 80005e4:	607a      	str	r2, [r7, #4]
 80005e6:	603b      	str	r3, [r7, #0]
	Encoder->Timer = htim;
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	68ba      	ldr	r2, [r7, #8]
 80005ec:	601a      	str	r2, [r3, #0]
	Encoder->Timer_Channel_A = Channel_A;
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	687a      	ldr	r2, [r7, #4]
 80005f2:	605a      	str	r2, [r3, #4]
	Encoder->Timer_Channel_B = Channel_B;
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	683a      	ldr	r2, [r7, #0]
 80005f8:	609a      	str	r2, [r3, #8]

	HAL_TIM_Encoder_Start(Encoder->Timer, Encoder->Timer_Channel_A & Encoder->Timer_Channel_B);
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	6818      	ldr	r0, [r3, #0]
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	685a      	ldr	r2, [r3, #4]
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	689b      	ldr	r3, [r3, #8]
 8000606:	4013      	ands	r3, r2
 8000608:	4619      	mov	r1, r3
 800060a:	f002 f9f3 	bl	80029f4 <HAL_TIM_Encoder_Start>
	return 0;
 800060e:	2300      	movs	r3, #0
}
 8000610:	4618      	mov	r0, r3
 8000612:	3710      	adds	r7, #16
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}

08000618 <Enc_GetTick>:

/*	@brief	Get the counter value of the timer
 *	@param	Encoder is a Enc_Struct structure
 *	@retval CNT value of the timer
 */
uint16_t Enc_GetTick(Enc_Struct* Encoder){
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	//uint16_t ticks = __HAL_TIM_GET_COUNTER(Encoder->Timer);
	uint16_t ticks = Encoder->Timer->Instance->CNT;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000628:	81fb      	strh	r3, [r7, #14]

	return ticks;
 800062a:	89fb      	ldrh	r3, [r7, #14]
}
 800062c:	4618      	mov	r0, r3
 800062e:	3714      	adds	r7, #20
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr

08000638 <Mot_Init_SetTimer>:
 *	@param	Motor is a Mot_Struct structure
 *	@param 	htim is the TIM handle
 *  @param  Channel is the TIM Channels
 *	@retval 0
 */
uint8_t Mot_Init_SetTimer(Mot_Struct* Motor, TIM_HandleTypeDef *htim, uint32_t Channel){
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	60f8      	str	r0, [r7, #12]
 8000640:	60b9      	str	r1, [r7, #8]
 8000642:	607a      	str	r2, [r7, #4]
	Motor->Timer = htim;
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	68ba      	ldr	r2, [r7, #8]
 8000648:	601a      	str	r2, [r3, #0]
	Motor->Timer_Channel = Channel;
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	687a      	ldr	r2, [r7, #4]
 800064e:	605a      	str	r2, [r3, #4]

	HAL_TIM_PWM_Start(Motor->Timer, Motor->Timer_Channel);
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	681a      	ldr	r2, [r3, #0]
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	685b      	ldr	r3, [r3, #4]
 8000658:	4619      	mov	r1, r3
 800065a:	4610      	mov	r0, r2
 800065c:	f002 f85c 	bl	8002718 <HAL_TIM_PWM_Start>
	return 0;
 8000660:	2300      	movs	r3, #0
}
 8000662:	4618      	mov	r0, r3
 8000664:	3710      	adds	r7, #16
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}

0800066a <Mot_Init_SetGPIOs>:
 *	@param 	IN2_GPIOx is a GPIOx where x can be (A..K) to select the GPIO peripheral for STM32
 *  @param  IN2_GPIO_Pin specifies the port bit
 *	@retval 0
 */
uint8_t Mot_Init_SetGPIOs(Mot_Struct* Motor, GPIO_TypeDef* IN1_GPIOx, uint16_t IN1_GPIO_Pin,
		GPIO_TypeDef* IN2_GPIOx, uint16_t IN2_GPIO_Pin){
 800066a:	b480      	push	{r7}
 800066c:	b085      	sub	sp, #20
 800066e:	af00      	add	r7, sp, #0
 8000670:	60f8      	str	r0, [r7, #12]
 8000672:	60b9      	str	r1, [r7, #8]
 8000674:	603b      	str	r3, [r7, #0]
 8000676:	4613      	mov	r3, r2
 8000678:	80fb      	strh	r3, [r7, #6]
	Motor->IN1_GPIOx = IN1_GPIOx;
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	68ba      	ldr	r2, [r7, #8]
 800067e:	609a      	str	r2, [r3, #8]
	Motor->IN1_GPIO_Pin = IN1_GPIO_Pin;
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	88fa      	ldrh	r2, [r7, #6]
 8000684:	819a      	strh	r2, [r3, #12]
	Motor->IN2_GPIOx = IN2_GPIOx;
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	683a      	ldr	r2, [r7, #0]
 800068a:	611a      	str	r2, [r3, #16]
	Motor->IN2_GPIO_Pin = IN2_GPIO_Pin;
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	8b3a      	ldrh	r2, [r7, #24]
 8000690:	829a      	strh	r2, [r3, #20]
	return 0;
 8000692:	2300      	movs	r3, #0
}
 8000694:	4618      	mov	r0, r3
 8000696:	3714      	adds	r7, #20
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr

080006a0 <Mot_SetDirection>:
 *		@arg 	MOTOR_FORWARD
 *		@arg 	MOTOR_REVERSE
 *	@retval 0
 */

uint8_t Mot_SetDirection(Mot_Struct* Motor, uint8_t direction){
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	460b      	mov	r3, r1
 80006aa:	70fb      	strb	r3, [r7, #3]
	switch(direction){
 80006ac:	78fb      	ldrb	r3, [r7, #3]
 80006ae:	2b02      	cmp	r3, #2
 80006b0:	d028      	beq.n	8000704 <Mot_SetDirection+0x64>
 80006b2:	2b02      	cmp	r3, #2
 80006b4:	dc37      	bgt.n	8000726 <Mot_SetDirection+0x86>
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d002      	beq.n	80006c0 <Mot_SetDirection+0x20>
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d011      	beq.n	80006e2 <Mot_SetDirection+0x42>
 80006be:	e032      	b.n	8000726 <Mot_SetDirection+0x86>

	case MOTOR_STOP:
		HAL_GPIO_WritePin(Motor->IN1_GPIOx, Motor->IN1_GPIO_Pin, GPIO_PIN_RESET);
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	6898      	ldr	r0, [r3, #8]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	899b      	ldrh	r3, [r3, #12]
 80006c8:	2200      	movs	r2, #0
 80006ca:	4619      	mov	r1, r3
 80006cc:	f001 f986 	bl	80019dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor->IN2_GPIOx, Motor->IN2_GPIO_Pin, GPIO_PIN_RESET);
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	6918      	ldr	r0, [r3, #16]
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	8a9b      	ldrh	r3, [r3, #20]
 80006d8:	2200      	movs	r2, #0
 80006da:	4619      	mov	r1, r3
 80006dc:	f001 f97e 	bl	80019dc <HAL_GPIO_WritePin>
		break;
 80006e0:	e031      	b.n	8000746 <Mot_SetDirection+0xa6>

	case MOTOR_FORWARD:
		HAL_GPIO_WritePin(Motor->IN1_GPIOx, Motor->IN1_GPIO_Pin, GPIO_PIN_SET);
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	6898      	ldr	r0, [r3, #8]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	899b      	ldrh	r3, [r3, #12]
 80006ea:	2201      	movs	r2, #1
 80006ec:	4619      	mov	r1, r3
 80006ee:	f001 f975 	bl	80019dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor->IN2_GPIOx, Motor->IN2_GPIO_Pin, GPIO_PIN_RESET);
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	6918      	ldr	r0, [r3, #16]
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	8a9b      	ldrh	r3, [r3, #20]
 80006fa:	2200      	movs	r2, #0
 80006fc:	4619      	mov	r1, r3
 80006fe:	f001 f96d 	bl	80019dc <HAL_GPIO_WritePin>
		break;
 8000702:	e020      	b.n	8000746 <Mot_SetDirection+0xa6>

	case MOTOR_REVERSE:
		HAL_GPIO_WritePin(Motor->IN1_GPIOx, Motor->IN1_GPIO_Pin, GPIO_PIN_RESET);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	6898      	ldr	r0, [r3, #8]
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	899b      	ldrh	r3, [r3, #12]
 800070c:	2200      	movs	r2, #0
 800070e:	4619      	mov	r1, r3
 8000710:	f001 f964 	bl	80019dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor->IN2_GPIOx, Motor->IN2_GPIO_Pin, GPIO_PIN_SET);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	6918      	ldr	r0, [r3, #16]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	8a9b      	ldrh	r3, [r3, #20]
 800071c:	2201      	movs	r2, #1
 800071e:	4619      	mov	r1, r3
 8000720:	f001 f95c 	bl	80019dc <HAL_GPIO_WritePin>
		break;
 8000724:	e00f      	b.n	8000746 <Mot_SetDirection+0xa6>

	default:
		HAL_GPIO_WritePin(Motor->IN1_GPIOx, Motor->IN1_GPIO_Pin, GPIO_PIN_RESET);
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	6898      	ldr	r0, [r3, #8]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	899b      	ldrh	r3, [r3, #12]
 800072e:	2200      	movs	r2, #0
 8000730:	4619      	mov	r1, r3
 8000732:	f001 f953 	bl	80019dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor->IN2_GPIOx, Motor->IN2_GPIO_Pin, GPIO_PIN_RESET);
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	6918      	ldr	r0, [r3, #16]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	8a9b      	ldrh	r3, [r3, #20]
 800073e:	2200      	movs	r2, #0
 8000740:	4619      	mov	r1, r3
 8000742:	f001 f94b 	bl	80019dc <HAL_GPIO_WritePin>
	}
}
 8000746:	bf00      	nop
 8000748:	4618      	mov	r0, r3
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <Mot_SetDutyCycle>:
/*	@brief	Set the PWM Duty Cycle
 *	@param	Motor is a Mot_Struct structure
 *	@param	duty_cycle is value between 0 and 100
 *	@retval 0
 */
uint8_t Mot_SetDutyCycle(Mot_Struct* Motor, uint8_t duty_cycle){
 8000750:	b480      	push	{r7}
 8000752:	b085      	sub	sp, #20
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	460b      	mov	r3, r1
 800075a:	70fb      	strb	r3, [r7, #3]
	if(duty_cycle > 100) duty_cycle = 100;
 800075c:	78fb      	ldrb	r3, [r7, #3]
 800075e:	2b64      	cmp	r3, #100	; 0x64
 8000760:	d901      	bls.n	8000766 <Mot_SetDutyCycle+0x16>
 8000762:	2364      	movs	r3, #100	; 0x64
 8000764:	70fb      	strb	r3, [r7, #3]

	float pulse = ((float)duty_cycle / 100) * (float)COUNTER_PERIOD;
 8000766:	78fb      	ldrb	r3, [r7, #3]
 8000768:	ee07 3a90 	vmov	s15, r3
 800076c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000770:	eddf 6a23 	vldr	s13, [pc, #140]	; 8000800 <Mot_SetDutyCycle+0xb0>
 8000774:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000778:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8000804 <Mot_SetDutyCycle+0xb4>
 800077c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000780:	edc7 7a03 	vstr	s15, [r7, #12]

	__HAL_TIM_SET_COMPARE(Motor->Timer, Motor->Timer_Channel, (uint32_t)pulse);
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	685b      	ldr	r3, [r3, #4]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d10a      	bne.n	80007a2 <Mot_SetDutyCycle+0x52>
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	edd7 7a03 	vldr	s15, [r7, #12]
 8000796:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800079a:	ee17 2a90 	vmov	r2, s15
 800079e:	635a      	str	r2, [r3, #52]	; 0x34
 80007a0:	e027      	b.n	80007f2 <Mot_SetDutyCycle+0xa2>
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	685b      	ldr	r3, [r3, #4]
 80007a6:	2b04      	cmp	r3, #4
 80007a8:	d10a      	bne.n	80007c0 <Mot_SetDutyCycle+0x70>
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80007b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007b8:	ee17 3a90 	vmov	r3, s15
 80007bc:	6393      	str	r3, [r2, #56]	; 0x38
 80007be:	e018      	b.n	80007f2 <Mot_SetDutyCycle+0xa2>
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	685b      	ldr	r3, [r3, #4]
 80007c4:	2b08      	cmp	r3, #8
 80007c6:	d10a      	bne.n	80007de <Mot_SetDutyCycle+0x8e>
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80007d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007d6:	ee17 3a90 	vmov	r3, s15
 80007da:	63d3      	str	r3, [r2, #60]	; 0x3c
 80007dc:	e009      	b.n	80007f2 <Mot_SetDutyCycle+0xa2>
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	681a      	ldr	r2, [r3, #0]
 80007e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80007e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007ec:	ee17 3a90 	vmov	r3, s15
 80007f0:	6413      	str	r3, [r2, #64]	; 0x40
	return 0;
 80007f2:	2300      	movs	r3, #0
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3714      	adds	r7, #20
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr
 8000800:	42c80000 	.word	0x42c80000
 8000804:	42200000 	.word	0x42200000

08000808 <Odo_Odometry>:
#include "Odometry.h"

uint8_t Odo_Odometry(){
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0

	return 0;
 800080c:	2300      	movs	r3, #0
}
 800080e:	4618      	mov	r0, r3
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr

08000818 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08a      	sub	sp, #40	; 0x28
 800081c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081e:	f107 0314 	add.w	r3, r7, #20
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
 800082c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	613b      	str	r3, [r7, #16]
 8000832:	4b37      	ldr	r3, [pc, #220]	; (8000910 <MX_GPIO_Init+0xf8>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a36      	ldr	r2, [pc, #216]	; (8000910 <MX_GPIO_Init+0xf8>)
 8000838:	f043 0304 	orr.w	r3, r3, #4
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b34      	ldr	r3, [pc, #208]	; (8000910 <MX_GPIO_Init+0xf8>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0304 	and.w	r3, r3, #4
 8000846:	613b      	str	r3, [r7, #16]
 8000848:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	4b30      	ldr	r3, [pc, #192]	; (8000910 <MX_GPIO_Init+0xf8>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a2f      	ldr	r2, [pc, #188]	; (8000910 <MX_GPIO_Init+0xf8>)
 8000854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b2d      	ldr	r3, [pc, #180]	; (8000910 <MX_GPIO_Init+0xf8>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	60bb      	str	r3, [r7, #8]
 800086a:	4b29      	ldr	r3, [pc, #164]	; (8000910 <MX_GPIO_Init+0xf8>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a28      	ldr	r2, [pc, #160]	; (8000910 <MX_GPIO_Init+0xf8>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b26      	ldr	r3, [pc, #152]	; (8000910 <MX_GPIO_Init+0xf8>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	4b22      	ldr	r3, [pc, #136]	; (8000910 <MX_GPIO_Init+0xf8>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a21      	ldr	r2, [pc, #132]	; (8000910 <MX_GPIO_Init+0xf8>)
 800088c:	f043 0302 	orr.w	r3, r3, #2
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b1f      	ldr	r3, [pc, #124]	; (8000910 <MX_GPIO_Init+0xf8>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0302 	and.w	r3, r3, #2
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOT_IN1_Pin|MOT_IN2_Pin, GPIO_PIN_RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	2103      	movs	r1, #3
 80008a2:	481c      	ldr	r0, [pc, #112]	; (8000914 <MX_GPIO_Init+0xfc>)
 80008a4:	f001 f89a 	bl	80019dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008a8:	2200      	movs	r2, #0
 80008aa:	2120      	movs	r1, #32
 80008ac:	481a      	ldr	r0, [pc, #104]	; (8000918 <MX_GPIO_Init+0x100>)
 80008ae:	f001 f895 	bl	80019dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008b8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 0314 	add.w	r3, r7, #20
 80008c6:	4619      	mov	r1, r3
 80008c8:	4812      	ldr	r0, [pc, #72]	; (8000914 <MX_GPIO_Init+0xfc>)
 80008ca:	f000 fef3 	bl	80016b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MOT_IN1_Pin|MOT_IN2_Pin;
 80008ce:	2303      	movs	r3, #3
 80008d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d2:	2301      	movs	r3, #1
 80008d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	2300      	movs	r3, #0
 80008dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008de:	f107 0314 	add.w	r3, r7, #20
 80008e2:	4619      	mov	r1, r3
 80008e4:	480b      	ldr	r0, [pc, #44]	; (8000914 <MX_GPIO_Init+0xfc>)
 80008e6:	f000 fee5 	bl	80016b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008ea:	2320      	movs	r3, #32
 80008ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ee:	2301      	movs	r3, #1
 80008f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f6:	2300      	movs	r3, #0
 80008f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 0314 	add.w	r3, r7, #20
 80008fe:	4619      	mov	r1, r3
 8000900:	4805      	ldr	r0, [pc, #20]	; (8000918 <MX_GPIO_Init+0x100>)
 8000902:	f000 fed7 	bl	80016b4 <HAL_GPIO_Init>

}
 8000906:	bf00      	nop
 8000908:	3728      	adds	r7, #40	; 0x28
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40023800 	.word	0x40023800
 8000914:	40020800 	.word	0x40020800
 8000918:	40020000 	.word	0x40020000

0800091c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08e      	sub	sp, #56	; 0x38
 8000920:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000922:	f000 fcb1 	bl	8001288 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000926:	f000 f857 	bl	80009d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800092a:	f7ff ff75 	bl	8000818 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800092e:	f000 fc07 	bl	8001140 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000932:	f000 fa1d 	bl	8000d70 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000936:	f000 fabb 	bl	8000eb0 <MX_TIM2_Init>
  MX_TIM6_Init();
 800093a:	f000 fb0d 	bl	8000f58 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  printf("\r\nese_motors_encoders\r\n");
 800093e:	481e      	ldr	r0, [pc, #120]	; (80009b8 <main+0x9c>)
 8000940:	f004 f812 	bl	8004968 <puts>

  // Configuration de la réception UART avec interruption
  HAL_UART_Receive_IT(&huart2, (uint8_t*)&data, 1);
 8000944:	2201      	movs	r2, #1
 8000946:	491d      	ldr	r1, [pc, #116]	; (80009bc <main+0xa0>)
 8000948:	481d      	ldr	r0, [pc, #116]	; (80009c0 <main+0xa4>)
 800094a:	f003 f86c 	bl	8003a26 <HAL_UART_Receive_IT>

  // Initialisation du Moteur A
  Mot_Struct MoteurA;
  Mot_Init_SetTimer(&MoteurA, &htim1, TIM_CHANNEL_1);
 800094e:	f107 0314 	add.w	r3, r7, #20
 8000952:	2200      	movs	r2, #0
 8000954:	491b      	ldr	r1, [pc, #108]	; (80009c4 <main+0xa8>)
 8000956:	4618      	mov	r0, r3
 8000958:	f7ff fe6e 	bl	8000638 <Mot_Init_SetTimer>
  Mot_Init_SetGPIOs(&MoteurA, GPIOC, GPIO_PIN_0, GPIOC, GPIO_PIN_1); // IN1:PC0 et IN2:PC1
 800095c:	f107 0014 	add.w	r0, r7, #20
 8000960:	2302      	movs	r3, #2
 8000962:	9300      	str	r3, [sp, #0]
 8000964:	4b18      	ldr	r3, [pc, #96]	; (80009c8 <main+0xac>)
 8000966:	2201      	movs	r2, #1
 8000968:	4917      	ldr	r1, [pc, #92]	; (80009c8 <main+0xac>)
 800096a:	f7ff fe7e 	bl	800066a <Mot_Init_SetGPIOs>
  Mot_SetDirection(&MoteurA, MOTOR_REVERSE);
 800096e:	f107 0314 	add.w	r3, r7, #20
 8000972:	2102      	movs	r1, #2
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff fe93 	bl	80006a0 <Mot_SetDirection>
  Mot_SetDutyCycle(&MoteurA, 65);
 800097a:	f107 0314 	add.w	r3, r7, #20
 800097e:	2141      	movs	r1, #65	; 0x41
 8000980:	4618      	mov	r0, r3
 8000982:	f7ff fee5 	bl	8000750 <Mot_SetDutyCycle>

  // Initialisation du Codeur A
  Enc_Struct CodeurA;
  Enc_Init_SetTimer(&CodeurA, &htim2, TIM_CHANNEL_1, TIM_CHANNEL_2); // PhA:PA0 et PhB:PA1
 8000986:	f107 0008 	add.w	r0, r7, #8
 800098a:	2304      	movs	r3, #4
 800098c:	2200      	movs	r2, #0
 800098e:	490f      	ldr	r1, [pc, #60]	; (80009cc <main+0xb0>)
 8000990:	f7ff fe23 	bl	80005da <Enc_Init_SetTimer>

  // Initialisation de l'asservissement
  Ctrl_Struct Control;
  Ctrl_Init_SetTimer(&Control, &htim6);
 8000994:	1d3b      	adds	r3, r7, #4
 8000996:	490e      	ldr	r1, [pc, #56]	; (80009d0 <main+0xb4>)
 8000998:	4618      	mov	r0, r3
 800099a:	f7ff fe05 	bl	80005a8 <Ctrl_Init_SetTimer>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  int i = Enc_GetTick(&CodeurA);
 800099e:	f107 0308 	add.w	r3, r7, #8
 80009a2:	4618      	mov	r0, r3
 80009a4:	f7ff fe38 	bl	8000618 <Enc_GetTick>
 80009a8:	4603      	mov	r3, r0
 80009aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	  printf("Ticks = %d\r\n",i);
 80009ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80009ae:	4809      	ldr	r0, [pc, #36]	; (80009d4 <main+0xb8>)
 80009b0:	f003 ff54 	bl	800485c <iprintf>
  {
 80009b4:	e7f3      	b.n	800099e <main+0x82>
 80009b6:	bf00      	nop
 80009b8:	0800580c 	.word	0x0800580c
 80009bc:	20000098 	.word	0x20000098
 80009c0:	20000178 	.word	0x20000178
 80009c4:	200000e8 	.word	0x200000e8
 80009c8:	40020800 	.word	0x40020800
 80009cc:	20000130 	.word	0x20000130
 80009d0:	200000a0 	.word	0x200000a0
 80009d4:	08005824 	.word	0x08005824

080009d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b094      	sub	sp, #80	; 0x50
 80009dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	2234      	movs	r2, #52	; 0x34
 80009e4:	2100      	movs	r1, #0
 80009e6:	4618      	mov	r0, r3
 80009e8:	f003 ff30 	bl	800484c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009ec:	f107 0308 	add.w	r3, r7, #8
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fc:	2300      	movs	r3, #0
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	4b2a      	ldr	r3, [pc, #168]	; (8000aac <SystemClock_Config+0xd4>)
 8000a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a04:	4a29      	ldr	r2, [pc, #164]	; (8000aac <SystemClock_Config+0xd4>)
 8000a06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a0c:	4b27      	ldr	r3, [pc, #156]	; (8000aac <SystemClock_Config+0xd4>)
 8000a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a18:	2300      	movs	r3, #0
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	4b24      	ldr	r3, [pc, #144]	; (8000ab0 <SystemClock_Config+0xd8>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a24:	4a22      	ldr	r2, [pc, #136]	; (8000ab0 <SystemClock_Config+0xd8>)
 8000a26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a2a:	6013      	str	r3, [r2, #0]
 8000a2c:	4b20      	ldr	r3, [pc, #128]	; (8000ab0 <SystemClock_Config+0xd8>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a34:	603b      	str	r3, [r7, #0]
 8000a36:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a40:	2310      	movs	r3, #16
 8000a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a44:	2302      	movs	r3, #2
 8000a46:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a4c:	2310      	movs	r3, #16
 8000a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a50:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a54:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a56:	2304      	movs	r3, #4
 8000a58:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a62:	f107 031c 	add.w	r3, r7, #28
 8000a66:	4618      	mov	r0, r3
 8000a68:	f001 fa9e 	bl	8001fa8 <HAL_RCC_OscConfig>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a72:	f000 f849 	bl	8000b08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a76:	230f      	movs	r3, #15
 8000a78:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a8c:	f107 0308 	add.w	r3, r7, #8
 8000a90:	2102      	movs	r1, #2
 8000a92:	4618      	mov	r0, r3
 8000a94:	f000 ffbc 	bl	8001a10 <HAL_RCC_ClockConfig>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000a9e:	f000 f833 	bl	8000b08 <Error_Handler>
  }
}
 8000aa2:	bf00      	nop
 8000aa4:	3750      	adds	r7, #80	; 0x50
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40023800 	.word	0x40023800
 8000ab0:	40007000 	.word	0x40007000

08000ab4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart){
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)&data, 1, 0xFFFF);
 8000abc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	4906      	ldr	r1, [pc, #24]	; (8000adc <HAL_UART_RxCpltCallback+0x28>)
 8000ac4:	4806      	ldr	r0, [pc, #24]	; (8000ae0 <HAL_UART_RxCpltCallback+0x2c>)
 8000ac6:	f002 ff1c 	bl	8003902 <HAL_UART_Transmit>
    HAL_UART_Receive_IT(&huart2, (uint8_t*)&data, 1);
 8000aca:	2201      	movs	r2, #1
 8000acc:	4903      	ldr	r1, [pc, #12]	; (8000adc <HAL_UART_RxCpltCallback+0x28>)
 8000ace:	4804      	ldr	r0, [pc, #16]	; (8000ae0 <HAL_UART_RxCpltCallback+0x2c>)
 8000ad0:	f002 ffa9 	bl	8003a26 <HAL_UART_Receive_IT>
}
 8000ad4:	bf00      	nop
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20000098 	.word	0x20000098
 8000ae0:	20000178 	.word	0x20000178

08000ae4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a04      	ldr	r2, [pc, #16]	; (8000b04 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d101      	bne.n	8000afa <HAL_TIM_PeriodElapsedCallback+0x16>
		Ctrl_MotorControl();
 8000af6:	f7ff fd69 	bl	80005cc <Ctrl_MotorControl>
	}
}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40001000 	.word	0x40001000

08000b08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b0c:	b672      	cpsid	i
}
 8000b0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <Error_Handler+0x8>
	...

08000b14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	607b      	str	r3, [r7, #4]
 8000b1e:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <HAL_MspInit+0x4c>)
 8000b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b22:	4a0f      	ldr	r2, [pc, #60]	; (8000b60 <HAL_MspInit+0x4c>)
 8000b24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b28:	6453      	str	r3, [r2, #68]	; 0x44
 8000b2a:	4b0d      	ldr	r3, [pc, #52]	; (8000b60 <HAL_MspInit+0x4c>)
 8000b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	603b      	str	r3, [r7, #0]
 8000b3a:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <HAL_MspInit+0x4c>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	4a08      	ldr	r2, [pc, #32]	; (8000b60 <HAL_MspInit+0x4c>)
 8000b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b44:	6413      	str	r3, [r2, #64]	; 0x40
 8000b46:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <HAL_MspInit+0x4c>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b4e:	603b      	str	r3, [r7, #0]
 8000b50:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b52:	2007      	movs	r0, #7
 8000b54:	f000 fcda 	bl	800150c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b58:	bf00      	nop
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40023800 	.word	0x40023800

08000b64 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000b6c:	1d39      	adds	r1, r7, #4
 8000b6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b72:	2201      	movs	r2, #1
 8000b74:	4803      	ldr	r0, [pc, #12]	; (8000b84 <__io_putchar+0x20>)
 8000b76:	f002 fec4 	bl	8003902 <HAL_UART_Transmit>

  return ch;
 8000b7a:	687b      	ldr	r3, [r7, #4]
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20000178 	.word	0x20000178

08000b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <NMI_Handler+0x4>

08000b8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b92:	e7fe      	b.n	8000b92 <HardFault_Handler+0x4>

08000b94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <MemManage_Handler+0x4>

08000b9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b9e:	e7fe      	b.n	8000b9e <BusFault_Handler+0x4>

08000ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <UsageFault_Handler+0x4>

08000ba6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bd4:	f000 fbaa 	bl	800132c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000be0:	4802      	ldr	r0, [pc, #8]	; (8000bec <USART2_IRQHandler+0x10>)
 8000be2:	f002 ff51 	bl	8003a88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000178 	.word	0x20000178

08000bf0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000bf4:	4802      	ldr	r0, [pc, #8]	; (8000c00 <TIM6_DAC_IRQHandler+0x10>)
 8000bf6:	f001 ff8b 	bl	8002b10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	200000a0 	.word	0x200000a0

08000c04 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b086      	sub	sp, #24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]
 8000c14:	e00a      	b.n	8000c2c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c16:	f3af 8000 	nop.w
 8000c1a:	4601      	mov	r1, r0
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	1c5a      	adds	r2, r3, #1
 8000c20:	60ba      	str	r2, [r7, #8]
 8000c22:	b2ca      	uxtb	r2, r1
 8000c24:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	617b      	str	r3, [r7, #20]
 8000c2c:	697a      	ldr	r2, [r7, #20]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	dbf0      	blt.n	8000c16 <_read+0x12>
	}

return len;
 8000c34:	687b      	ldr	r3, [r7, #4]
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3718      	adds	r7, #24
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b086      	sub	sp, #24
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	60f8      	str	r0, [r7, #12]
 8000c46:	60b9      	str	r1, [r7, #8]
 8000c48:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	617b      	str	r3, [r7, #20]
 8000c4e:	e009      	b.n	8000c64 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	1c5a      	adds	r2, r3, #1
 8000c54:	60ba      	str	r2, [r7, #8]
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff ff83 	bl	8000b64 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	3301      	adds	r3, #1
 8000c62:	617b      	str	r3, [r7, #20]
 8000c64:	697a      	ldr	r2, [r7, #20]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	dbf1      	blt.n	8000c50 <_write+0x12>
	}
	return len;
 8000c6c:	687b      	ldr	r3, [r7, #4]
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3718      	adds	r7, #24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <_close>:

int _close(int file)
{
 8000c76:	b480      	push	{r7}
 8000c78:	b083      	sub	sp, #12
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
	return -1;
 8000c7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr

08000c8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	b083      	sub	sp, #12
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
 8000c96:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c9e:	605a      	str	r2, [r3, #4]
	return 0;
 8000ca0:	2300      	movs	r3, #0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr

08000cae <_isatty>:

int _isatty(int file)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	b083      	sub	sp, #12
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
	return 1;
 8000cb6:	2301      	movs	r3, #1
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
	return 0;
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3714      	adds	r7, #20
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
	...

08000ce0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ce8:	4a14      	ldr	r2, [pc, #80]	; (8000d3c <_sbrk+0x5c>)
 8000cea:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <_sbrk+0x60>)
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cf4:	4b13      	ldr	r3, [pc, #76]	; (8000d44 <_sbrk+0x64>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d102      	bne.n	8000d02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cfc:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <_sbrk+0x64>)
 8000cfe:	4a12      	ldr	r2, [pc, #72]	; (8000d48 <_sbrk+0x68>)
 8000d00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d02:	4b10      	ldr	r3, [pc, #64]	; (8000d44 <_sbrk+0x64>)
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4413      	add	r3, r2
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d207      	bcs.n	8000d20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d10:	f003 fd72 	bl	80047f8 <__errno>
 8000d14:	4603      	mov	r3, r0
 8000d16:	220c      	movs	r2, #12
 8000d18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1e:	e009      	b.n	8000d34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d20:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <_sbrk+0x64>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d26:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <_sbrk+0x64>)
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	4a05      	ldr	r2, [pc, #20]	; (8000d44 <_sbrk+0x64>)
 8000d30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d32:	68fb      	ldr	r3, [r7, #12]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3718      	adds	r7, #24
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20020000 	.word	0x20020000
 8000d40:	00000400 	.word	0x00000400
 8000d44:	2000008c 	.word	0x2000008c
 8000d48:	200001d0 	.word	0x200001d0

08000d4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <SystemInit+0x20>)
 8000d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d56:	4a05      	ldr	r2, [pc, #20]	; (8000d6c <SystemInit+0x20>)
 8000d58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b096      	sub	sp, #88	; 0x58
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d76:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d84:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	60da      	str	r2, [r3, #12]
 8000d9c:	611a      	str	r2, [r3, #16]
 8000d9e:	615a      	str	r2, [r3, #20]
 8000da0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000da2:	1d3b      	adds	r3, r7, #4
 8000da4:	2220      	movs	r2, #32
 8000da6:	2100      	movs	r1, #0
 8000da8:	4618      	mov	r0, r3
 8000daa:	f003 fd4f 	bl	800484c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000dae:	4b3e      	ldr	r3, [pc, #248]	; (8000ea8 <MX_TIM1_Init+0x138>)
 8000db0:	4a3e      	ldr	r2, [pc, #248]	; (8000eac <MX_TIM1_Init+0x13c>)
 8000db2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8000db4:	4b3c      	ldr	r3, [pc, #240]	; (8000ea8 <MX_TIM1_Init+0x138>)
 8000db6:	2253      	movs	r2, #83	; 0x53
 8000db8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dba:	4b3b      	ldr	r3, [pc, #236]	; (8000ea8 <MX_TIM1_Init+0x138>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 40-1;
 8000dc0:	4b39      	ldr	r3, [pc, #228]	; (8000ea8 <MX_TIM1_Init+0x138>)
 8000dc2:	2227      	movs	r2, #39	; 0x27
 8000dc4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc6:	4b38      	ldr	r3, [pc, #224]	; (8000ea8 <MX_TIM1_Init+0x138>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000dcc:	4b36      	ldr	r3, [pc, #216]	; (8000ea8 <MX_TIM1_Init+0x138>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd2:	4b35      	ldr	r3, [pc, #212]	; (8000ea8 <MX_TIM1_Init+0x138>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000dd8:	4833      	ldr	r0, [pc, #204]	; (8000ea8 <MX_TIM1_Init+0x138>)
 8000dda:	f001 fb83 	bl	80024e4 <HAL_TIM_Base_Init>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000de4:	f7ff fe90 	bl	8000b08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000de8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dec:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000dee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000df2:	4619      	mov	r1, r3
 8000df4:	482c      	ldr	r0, [pc, #176]	; (8000ea8 <MX_TIM1_Init+0x138>)
 8000df6:	f002 f855 	bl	8002ea4 <HAL_TIM_ConfigClockSource>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000e00:	f7ff fe82 	bl	8000b08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e04:	4828      	ldr	r0, [pc, #160]	; (8000ea8 <MX_TIM1_Init+0x138>)
 8000e06:	f001 fc2d 	bl	8002664 <HAL_TIM_PWM_Init>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000e10:	f7ff fe7a 	bl	8000b08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e14:	2300      	movs	r3, #0
 8000e16:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e1c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e20:	4619      	mov	r1, r3
 8000e22:	4821      	ldr	r0, [pc, #132]	; (8000ea8 <MX_TIM1_Init+0x138>)
 8000e24:	f002 fc3e 	bl	80036a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000e2e:	f7ff fe6b 	bl	8000b08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e32:	2360      	movs	r3, #96	; 0x60
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000e42:	2304      	movs	r3, #4
 8000e44:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e46:	2300      	movs	r3, #0
 8000e48:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e52:	2200      	movs	r2, #0
 8000e54:	4619      	mov	r1, r3
 8000e56:	4814      	ldr	r0, [pc, #80]	; (8000ea8 <MX_TIM1_Init+0x138>)
 8000e58:	f001 ff62 	bl	8002d20 <HAL_TIM_PWM_ConfigChannel>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000e62:	f7ff fe51 	bl	8000b08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e66:	2300      	movs	r3, #0
 8000e68:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e72:	2300      	movs	r3, #0
 8000e74:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e76:	2300      	movs	r3, #0
 8000e78:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e7e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e80:	2300      	movs	r3, #0
 8000e82:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e84:	1d3b      	adds	r3, r7, #4
 8000e86:	4619      	mov	r1, r3
 8000e88:	4807      	ldr	r0, [pc, #28]	; (8000ea8 <MX_TIM1_Init+0x138>)
 8000e8a:	f002 fc87 	bl	800379c <HAL_TIMEx_ConfigBreakDeadTime>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000e94:	f7ff fe38 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e98:	4803      	ldr	r0, [pc, #12]	; (8000ea8 <MX_TIM1_Init+0x138>)
 8000e9a:	f000 f917 	bl	80010cc <HAL_TIM_MspPostInit>

}
 8000e9e:	bf00      	nop
 8000ea0:	3758      	adds	r7, #88	; 0x58
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	200000e8 	.word	0x200000e8
 8000eac:	40010000 	.word	0x40010000

08000eb0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08c      	sub	sp, #48	; 0x30
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000eb6:	f107 030c 	add.w	r3, r7, #12
 8000eba:	2224      	movs	r2, #36	; 0x24
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f003 fcc4 	bl	800484c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec4:	1d3b      	adds	r3, r7, #4
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ecc:	4b21      	ldr	r3, [pc, #132]	; (8000f54 <MX_TIM2_Init+0xa4>)
 8000ece:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ed2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ed4:	4b1f      	ldr	r3, [pc, #124]	; (8000f54 <MX_TIM2_Init+0xa4>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eda:	4b1e      	ldr	r3, [pc, #120]	; (8000f54 <MX_TIM2_Init+0xa4>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000ee0:	4b1c      	ldr	r3, [pc, #112]	; (8000f54 <MX_TIM2_Init+0xa4>)
 8000ee2:	f04f 32ff 	mov.w	r2, #4294967295
 8000ee6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ee8:	4b1a      	ldr	r3, [pc, #104]	; (8000f54 <MX_TIM2_Init+0xa4>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000eee:	4b19      	ldr	r3, [pc, #100]	; (8000f54 <MX_TIM2_Init+0xa4>)
 8000ef0:	2280      	movs	r2, #128	; 0x80
 8000ef2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000efc:	2301      	movs	r3, #1
 8000efe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f00:	2300      	movs	r3, #0
 8000f02:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000f04:	230a      	movs	r3, #10
 8000f06:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f10:	2300      	movs	r3, #0
 8000f12:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000f18:	f107 030c 	add.w	r3, r7, #12
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	480d      	ldr	r0, [pc, #52]	; (8000f54 <MX_TIM2_Init+0xa4>)
 8000f20:	f001 fcc2 	bl	80028a8 <HAL_TIM_Encoder_Init>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000f2a:	f7ff fded 	bl	8000b08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f32:	2300      	movs	r3, #0
 8000f34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f36:	1d3b      	adds	r3, r7, #4
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4806      	ldr	r0, [pc, #24]	; (8000f54 <MX_TIM2_Init+0xa4>)
 8000f3c:	f002 fbb2 	bl	80036a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000f46:	f7ff fddf 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f4a:	bf00      	nop
 8000f4c:	3730      	adds	r7, #48	; 0x30
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20000130 	.word	0x20000130

08000f58 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f5e:	463b      	mov	r3, r7
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000f66:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <MX_TIM6_Init+0x64>)
 8000f68:	4a15      	ldr	r2, [pc, #84]	; (8000fc0 <MX_TIM6_Init+0x68>)
 8000f6a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8400-1;
 8000f6c:	4b13      	ldr	r3, [pc, #76]	; (8000fbc <MX_TIM6_Init+0x64>)
 8000f6e:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000f72:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f74:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <MX_TIM6_Init+0x64>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 200;
 8000f7a:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <MX_TIM6_Init+0x64>)
 8000f7c:	22c8      	movs	r2, #200	; 0xc8
 8000f7e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f80:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <MX_TIM6_Init+0x64>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000f86:	480d      	ldr	r0, [pc, #52]	; (8000fbc <MX_TIM6_Init+0x64>)
 8000f88:	f001 faac 	bl	80024e4 <HAL_TIM_Base_Init>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000f92:	f7ff fdb9 	bl	8000b08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f96:	2300      	movs	r3, #0
 8000f98:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000f9e:	463b      	mov	r3, r7
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4806      	ldr	r0, [pc, #24]	; (8000fbc <MX_TIM6_Init+0x64>)
 8000fa4:	f002 fb7e 	bl	80036a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000fae:	f7ff fdab 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	200000a0 	.word	0x200000a0
 8000fc0:	40001000 	.word	0x40001000

08000fc4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a18      	ldr	r2, [pc, #96]	; (8001034 <HAL_TIM_Base_MspInit+0x70>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d10e      	bne.n	8000ff4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	4b17      	ldr	r3, [pc, #92]	; (8001038 <HAL_TIM_Base_MspInit+0x74>)
 8000fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fde:	4a16      	ldr	r2, [pc, #88]	; (8001038 <HAL_TIM_Base_MspInit+0x74>)
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fe6:	4b14      	ldr	r3, [pc, #80]	; (8001038 <HAL_TIM_Base_MspInit+0x74>)
 8000fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000ff2:	e01a      	b.n	800102a <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM6)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a10      	ldr	r2, [pc, #64]	; (800103c <HAL_TIM_Base_MspInit+0x78>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d115      	bne.n	800102a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	4b0d      	ldr	r3, [pc, #52]	; (8001038 <HAL_TIM_Base_MspInit+0x74>)
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	4a0c      	ldr	r2, [pc, #48]	; (8001038 <HAL_TIM_Base_MspInit+0x74>)
 8001008:	f043 0310 	orr.w	r3, r3, #16
 800100c:	6413      	str	r3, [r2, #64]	; 0x40
 800100e:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <HAL_TIM_Base_MspInit+0x74>)
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	f003 0310 	and.w	r3, r3, #16
 8001016:	60bb      	str	r3, [r7, #8]
 8001018:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800101a:	2200      	movs	r2, #0
 800101c:	2100      	movs	r1, #0
 800101e:	2036      	movs	r0, #54	; 0x36
 8001020:	f000 fa7f 	bl	8001522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001024:	2036      	movs	r0, #54	; 0x36
 8001026:	f000 fa98 	bl	800155a <HAL_NVIC_EnableIRQ>
}
 800102a:	bf00      	nop
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40010000 	.word	0x40010000
 8001038:	40023800 	.word	0x40023800
 800103c:	40001000 	.word	0x40001000

08001040 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08a      	sub	sp, #40	; 0x28
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001060:	d12b      	bne.n	80010ba <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	613b      	str	r3, [r7, #16]
 8001066:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <HAL_TIM_Encoder_MspInit+0x84>)
 8001068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106a:	4a16      	ldr	r2, [pc, #88]	; (80010c4 <HAL_TIM_Encoder_MspInit+0x84>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	6413      	str	r3, [r2, #64]	; 0x40
 8001072:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <HAL_TIM_Encoder_MspInit+0x84>)
 8001074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	613b      	str	r3, [r7, #16]
 800107c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <HAL_TIM_Encoder_MspInit+0x84>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a0f      	ldr	r2, [pc, #60]	; (80010c4 <HAL_TIM_Encoder_MspInit+0x84>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b0d      	ldr	r3, [pc, #52]	; (80010c4 <HAL_TIM_Encoder_MspInit+0x84>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 800109a:	2303      	movs	r3, #3
 800109c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109e:	2302      	movs	r3, #2
 80010a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a6:	2300      	movs	r3, #0
 80010a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010aa:	2301      	movs	r3, #1
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ae:	f107 0314 	add.w	r3, r7, #20
 80010b2:	4619      	mov	r1, r3
 80010b4:	4804      	ldr	r0, [pc, #16]	; (80010c8 <HAL_TIM_Encoder_MspInit+0x88>)
 80010b6:	f000 fafd 	bl	80016b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80010ba:	bf00      	nop
 80010bc:	3728      	adds	r7, #40	; 0x28
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40023800 	.word	0x40023800
 80010c8:	40020000 	.word	0x40020000

080010cc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b088      	sub	sp, #32
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	f107 030c 	add.w	r3, r7, #12
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a12      	ldr	r2, [pc, #72]	; (8001134 <HAL_TIM_MspPostInit+0x68>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d11e      	bne.n	800112c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	4b11      	ldr	r3, [pc, #68]	; (8001138 <HAL_TIM_MspPostInit+0x6c>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	4a10      	ldr	r2, [pc, #64]	; (8001138 <HAL_TIM_MspPostInit+0x6c>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	6313      	str	r3, [r2, #48]	; 0x30
 80010fe:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <HAL_TIM_MspPostInit+0x6c>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	60bb      	str	r3, [r7, #8]
 8001108:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = MOT_ENA_Pin;
 800110a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800110e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001110:	2302      	movs	r3, #2
 8001112:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001118:	2300      	movs	r3, #0
 800111a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800111c:	2301      	movs	r3, #1
 800111e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MOT_ENA_GPIO_Port, &GPIO_InitStruct);
 8001120:	f107 030c 	add.w	r3, r7, #12
 8001124:	4619      	mov	r1, r3
 8001126:	4805      	ldr	r0, [pc, #20]	; (800113c <HAL_TIM_MspPostInit+0x70>)
 8001128:	f000 fac4 	bl	80016b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800112c:	bf00      	nop
 800112e:	3720      	adds	r7, #32
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40010000 	.word	0x40010000
 8001138:	40023800 	.word	0x40023800
 800113c:	40020000 	.word	0x40020000

08001140 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001144:	4b11      	ldr	r3, [pc, #68]	; (800118c <MX_USART2_UART_Init+0x4c>)
 8001146:	4a12      	ldr	r2, [pc, #72]	; (8001190 <MX_USART2_UART_Init+0x50>)
 8001148:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800114a:	4b10      	ldr	r3, [pc, #64]	; (800118c <MX_USART2_UART_Init+0x4c>)
 800114c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001150:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001152:	4b0e      	ldr	r3, [pc, #56]	; (800118c <MX_USART2_UART_Init+0x4c>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001158:	4b0c      	ldr	r3, [pc, #48]	; (800118c <MX_USART2_UART_Init+0x4c>)
 800115a:	2200      	movs	r2, #0
 800115c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800115e:	4b0b      	ldr	r3, [pc, #44]	; (800118c <MX_USART2_UART_Init+0x4c>)
 8001160:	2200      	movs	r2, #0
 8001162:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001164:	4b09      	ldr	r3, [pc, #36]	; (800118c <MX_USART2_UART_Init+0x4c>)
 8001166:	220c      	movs	r2, #12
 8001168:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800116a:	4b08      	ldr	r3, [pc, #32]	; (800118c <MX_USART2_UART_Init+0x4c>)
 800116c:	2200      	movs	r2, #0
 800116e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001170:	4b06      	ldr	r3, [pc, #24]	; (800118c <MX_USART2_UART_Init+0x4c>)
 8001172:	2200      	movs	r2, #0
 8001174:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001176:	4805      	ldr	r0, [pc, #20]	; (800118c <MX_USART2_UART_Init+0x4c>)
 8001178:	f002 fb76 	bl	8003868 <HAL_UART_Init>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001182:	f7ff fcc1 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000178 	.word	0x20000178
 8001190:	40004400 	.word	0x40004400

08001194 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08a      	sub	sp, #40	; 0x28
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a1d      	ldr	r2, [pc, #116]	; (8001228 <HAL_UART_MspInit+0x94>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d133      	bne.n	800121e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	613b      	str	r3, [r7, #16]
 80011ba:	4b1c      	ldr	r3, [pc, #112]	; (800122c <HAL_UART_MspInit+0x98>)
 80011bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011be:	4a1b      	ldr	r2, [pc, #108]	; (800122c <HAL_UART_MspInit+0x98>)
 80011c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c4:	6413      	str	r3, [r2, #64]	; 0x40
 80011c6:	4b19      	ldr	r3, [pc, #100]	; (800122c <HAL_UART_MspInit+0x98>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ce:	613b      	str	r3, [r7, #16]
 80011d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	4b15      	ldr	r3, [pc, #84]	; (800122c <HAL_UART_MspInit+0x98>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a14      	ldr	r2, [pc, #80]	; (800122c <HAL_UART_MspInit+0x98>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b12      	ldr	r3, [pc, #72]	; (800122c <HAL_UART_MspInit+0x98>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80011ee:	230c      	movs	r3, #12
 80011f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f2:	2302      	movs	r3, #2
 80011f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fa:	2303      	movs	r3, #3
 80011fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011fe:	2307      	movs	r3, #7
 8001200:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001202:	f107 0314 	add.w	r3, r7, #20
 8001206:	4619      	mov	r1, r3
 8001208:	4809      	ldr	r0, [pc, #36]	; (8001230 <HAL_UART_MspInit+0x9c>)
 800120a:	f000 fa53 	bl	80016b4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800120e:	2200      	movs	r2, #0
 8001210:	2100      	movs	r1, #0
 8001212:	2026      	movs	r0, #38	; 0x26
 8001214:	f000 f985 	bl	8001522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001218:	2026      	movs	r0, #38	; 0x26
 800121a:	f000 f99e 	bl	800155a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800121e:	bf00      	nop
 8001220:	3728      	adds	r7, #40	; 0x28
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40004400 	.word	0x40004400
 800122c:	40023800 	.word	0x40023800
 8001230:	40020000 	.word	0x40020000

08001234 <Reset_Handler>:
 8001234:	f8df d034 	ldr.w	sp, [pc, #52]	; 800126c <LoopFillZerobss+0x12>
 8001238:	480d      	ldr	r0, [pc, #52]	; (8001270 <LoopFillZerobss+0x16>)
 800123a:	490e      	ldr	r1, [pc, #56]	; (8001274 <LoopFillZerobss+0x1a>)
 800123c:	4a0e      	ldr	r2, [pc, #56]	; (8001278 <LoopFillZerobss+0x1e>)
 800123e:	2300      	movs	r3, #0
 8001240:	e002      	b.n	8001248 <LoopCopyDataInit>

08001242 <CopyDataInit>:
 8001242:	58d4      	ldr	r4, [r2, r3]
 8001244:	50c4      	str	r4, [r0, r3]
 8001246:	3304      	adds	r3, #4

08001248 <LoopCopyDataInit>:
 8001248:	18c4      	adds	r4, r0, r3
 800124a:	428c      	cmp	r4, r1
 800124c:	d3f9      	bcc.n	8001242 <CopyDataInit>
 800124e:	4a0b      	ldr	r2, [pc, #44]	; (800127c <LoopFillZerobss+0x22>)
 8001250:	4c0b      	ldr	r4, [pc, #44]	; (8001280 <LoopFillZerobss+0x26>)
 8001252:	2300      	movs	r3, #0
 8001254:	e001      	b.n	800125a <LoopFillZerobss>

08001256 <FillZerobss>:
 8001256:	6013      	str	r3, [r2, #0]
 8001258:	3204      	adds	r2, #4

0800125a <LoopFillZerobss>:
 800125a:	42a2      	cmp	r2, r4
 800125c:	d3fb      	bcc.n	8001256 <FillZerobss>
 800125e:	f7ff fd75 	bl	8000d4c <SystemInit>
 8001262:	f003 facf 	bl	8004804 <__libc_init_array>
 8001266:	f7ff fb59 	bl	800091c <main>
 800126a:	4770      	bx	lr
 800126c:	20020000 	.word	0x20020000
 8001270:	20000000 	.word	0x20000000
 8001274:	20000070 	.word	0x20000070
 8001278:	080058f4 	.word	0x080058f4
 800127c:	20000070 	.word	0x20000070
 8001280:	200001d0 	.word	0x200001d0

08001284 <ADC_IRQHandler>:
 8001284:	e7fe      	b.n	8001284 <ADC_IRQHandler>
	...

08001288 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800128c:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <HAL_Init+0x40>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a0d      	ldr	r2, [pc, #52]	; (80012c8 <HAL_Init+0x40>)
 8001292:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001296:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001298:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <HAL_Init+0x40>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a0a      	ldr	r2, [pc, #40]	; (80012c8 <HAL_Init+0x40>)
 800129e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012a4:	4b08      	ldr	r3, [pc, #32]	; (80012c8 <HAL_Init+0x40>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a07      	ldr	r2, [pc, #28]	; (80012c8 <HAL_Init+0x40>)
 80012aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012b0:	2003      	movs	r0, #3
 80012b2:	f000 f92b 	bl	800150c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012b6:	2000      	movs	r0, #0
 80012b8:	f000 f808 	bl	80012cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012bc:	f7ff fc2a 	bl	8000b14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40023c00 	.word	0x40023c00

080012cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012d4:	4b12      	ldr	r3, [pc, #72]	; (8001320 <HAL_InitTick+0x54>)
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	4b12      	ldr	r3, [pc, #72]	; (8001324 <HAL_InitTick+0x58>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	4619      	mov	r1, r3
 80012de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ea:	4618      	mov	r0, r3
 80012ec:	f000 f943 	bl	8001576 <HAL_SYSTICK_Config>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e00e      	b.n	8001318 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2b0f      	cmp	r3, #15
 80012fe:	d80a      	bhi.n	8001316 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001300:	2200      	movs	r2, #0
 8001302:	6879      	ldr	r1, [r7, #4]
 8001304:	f04f 30ff 	mov.w	r0, #4294967295
 8001308:	f000 f90b 	bl	8001522 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800130c:	4a06      	ldr	r2, [pc, #24]	; (8001328 <HAL_InitTick+0x5c>)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001312:	2300      	movs	r3, #0
 8001314:	e000      	b.n	8001318 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
}
 8001318:	4618      	mov	r0, r3
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	20000000 	.word	0x20000000
 8001324:	20000008 	.word	0x20000008
 8001328:	20000004 	.word	0x20000004

0800132c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001330:	4b06      	ldr	r3, [pc, #24]	; (800134c <HAL_IncTick+0x20>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	461a      	mov	r2, r3
 8001336:	4b06      	ldr	r3, [pc, #24]	; (8001350 <HAL_IncTick+0x24>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4413      	add	r3, r2
 800133c:	4a04      	ldr	r2, [pc, #16]	; (8001350 <HAL_IncTick+0x24>)
 800133e:	6013      	str	r3, [r2, #0]
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	20000008 	.word	0x20000008
 8001350:	200001bc 	.word	0x200001bc

08001354 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  return uwTick;
 8001358:	4b03      	ldr	r3, [pc, #12]	; (8001368 <HAL_GetTick+0x14>)
 800135a:	681b      	ldr	r3, [r3, #0]
}
 800135c:	4618      	mov	r0, r3
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	200001bc 	.word	0x200001bc

0800136c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f003 0307 	and.w	r3, r3, #7
 800137a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800137c:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <__NVIC_SetPriorityGrouping+0x44>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001382:	68ba      	ldr	r2, [r7, #8]
 8001384:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001388:	4013      	ands	r3, r2
 800138a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001394:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001398:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800139c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800139e:	4a04      	ldr	r2, [pc, #16]	; (80013b0 <__NVIC_SetPriorityGrouping+0x44>)
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	60d3      	str	r3, [r2, #12]
}
 80013a4:	bf00      	nop
 80013a6:	3714      	adds	r7, #20
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013b8:	4b04      	ldr	r3, [pc, #16]	; (80013cc <__NVIC_GetPriorityGrouping+0x18>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	0a1b      	lsrs	r3, r3, #8
 80013be:	f003 0307 	and.w	r3, r3, #7
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	db0b      	blt.n	80013fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	f003 021f 	and.w	r2, r3, #31
 80013e8:	4907      	ldr	r1, [pc, #28]	; (8001408 <__NVIC_EnableIRQ+0x38>)
 80013ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ee:	095b      	lsrs	r3, r3, #5
 80013f0:	2001      	movs	r0, #1
 80013f2:	fa00 f202 	lsl.w	r2, r0, r2
 80013f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	e000e100 	.word	0xe000e100

0800140c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	6039      	str	r1, [r7, #0]
 8001416:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141c:	2b00      	cmp	r3, #0
 800141e:	db0a      	blt.n	8001436 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	b2da      	uxtb	r2, r3
 8001424:	490c      	ldr	r1, [pc, #48]	; (8001458 <__NVIC_SetPriority+0x4c>)
 8001426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142a:	0112      	lsls	r2, r2, #4
 800142c:	b2d2      	uxtb	r2, r2
 800142e:	440b      	add	r3, r1
 8001430:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001434:	e00a      	b.n	800144c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	b2da      	uxtb	r2, r3
 800143a:	4908      	ldr	r1, [pc, #32]	; (800145c <__NVIC_SetPriority+0x50>)
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	f003 030f 	and.w	r3, r3, #15
 8001442:	3b04      	subs	r3, #4
 8001444:	0112      	lsls	r2, r2, #4
 8001446:	b2d2      	uxtb	r2, r2
 8001448:	440b      	add	r3, r1
 800144a:	761a      	strb	r2, [r3, #24]
}
 800144c:	bf00      	nop
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	e000e100 	.word	0xe000e100
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001460:	b480      	push	{r7}
 8001462:	b089      	sub	sp, #36	; 0x24
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f003 0307 	and.w	r3, r3, #7
 8001472:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	f1c3 0307 	rsb	r3, r3, #7
 800147a:	2b04      	cmp	r3, #4
 800147c:	bf28      	it	cs
 800147e:	2304      	movcs	r3, #4
 8001480:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	3304      	adds	r3, #4
 8001486:	2b06      	cmp	r3, #6
 8001488:	d902      	bls.n	8001490 <NVIC_EncodePriority+0x30>
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	3b03      	subs	r3, #3
 800148e:	e000      	b.n	8001492 <NVIC_EncodePriority+0x32>
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001494:	f04f 32ff 	mov.w	r2, #4294967295
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43da      	mvns	r2, r3
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	401a      	ands	r2, r3
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014a8:	f04f 31ff 	mov.w	r1, #4294967295
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	fa01 f303 	lsl.w	r3, r1, r3
 80014b2:	43d9      	mvns	r1, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b8:	4313      	orrs	r3, r2
         );
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3724      	adds	r7, #36	; 0x24
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
	...

080014c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3b01      	subs	r3, #1
 80014d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014d8:	d301      	bcc.n	80014de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014da:	2301      	movs	r3, #1
 80014dc:	e00f      	b.n	80014fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014de:	4a0a      	ldr	r2, [pc, #40]	; (8001508 <SysTick_Config+0x40>)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3b01      	subs	r3, #1
 80014e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014e6:	210f      	movs	r1, #15
 80014e8:	f04f 30ff 	mov.w	r0, #4294967295
 80014ec:	f7ff ff8e 	bl	800140c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014f0:	4b05      	ldr	r3, [pc, #20]	; (8001508 <SysTick_Config+0x40>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014f6:	4b04      	ldr	r3, [pc, #16]	; (8001508 <SysTick_Config+0x40>)
 80014f8:	2207      	movs	r2, #7
 80014fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	e000e010 	.word	0xe000e010

0800150c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f7ff ff29 	bl	800136c <__NVIC_SetPriorityGrouping>
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001522:	b580      	push	{r7, lr}
 8001524:	b086      	sub	sp, #24
 8001526:	af00      	add	r7, sp, #0
 8001528:	4603      	mov	r3, r0
 800152a:	60b9      	str	r1, [r7, #8]
 800152c:	607a      	str	r2, [r7, #4]
 800152e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001534:	f7ff ff3e 	bl	80013b4 <__NVIC_GetPriorityGrouping>
 8001538:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	68b9      	ldr	r1, [r7, #8]
 800153e:	6978      	ldr	r0, [r7, #20]
 8001540:	f7ff ff8e 	bl	8001460 <NVIC_EncodePriority>
 8001544:	4602      	mov	r2, r0
 8001546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800154a:	4611      	mov	r1, r2
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff ff5d 	bl	800140c <__NVIC_SetPriority>
}
 8001552:	bf00      	nop
 8001554:	3718      	adds	r7, #24
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b082      	sub	sp, #8
 800155e:	af00      	add	r7, sp, #0
 8001560:	4603      	mov	r3, r0
 8001562:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff ff31 	bl	80013d0 <__NVIC_EnableIRQ>
}
 800156e:	bf00      	nop
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b082      	sub	sp, #8
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f7ff ffa2 	bl	80014c8 <SysTick_Config>
 8001584:	4603      	mov	r3, r0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b084      	sub	sp, #16
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800159a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800159c:	f7ff feda 	bl	8001354 <HAL_GetTick>
 80015a0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d008      	beq.n	80015c0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2280      	movs	r2, #128	; 0x80
 80015b2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e052      	b.n	8001666 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f022 0216 	bic.w	r2, r2, #22
 80015ce:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	695a      	ldr	r2, [r3, #20]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015de:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d103      	bne.n	80015f0 <HAL_DMA_Abort+0x62>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d007      	beq.n	8001600 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f022 0208 	bic.w	r2, r2, #8
 80015fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f022 0201 	bic.w	r2, r2, #1
 800160e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001610:	e013      	b.n	800163a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001612:	f7ff fe9f 	bl	8001354 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b05      	cmp	r3, #5
 800161e:	d90c      	bls.n	800163a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2220      	movs	r2, #32
 8001624:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2203      	movs	r2, #3
 800162a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e015      	b.n	8001666 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0301 	and.w	r3, r3, #1
 8001644:	2b00      	cmp	r3, #0
 8001646:	d1e4      	bne.n	8001612 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800164c:	223f      	movs	r2, #63	; 0x3f
 800164e:	409a      	lsls	r2, r3
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2201      	movs	r2, #1
 8001658:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2200      	movs	r2, #0
 8001660:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800166e:	b480      	push	{r7}
 8001670:	b083      	sub	sp, #12
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d004      	beq.n	800168c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2280      	movs	r2, #128	; 0x80
 8001686:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e00c      	b.n	80016a6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2205      	movs	r2, #5
 8001690:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f022 0201 	bic.w	r2, r2, #1
 80016a2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
	...

080016b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b089      	sub	sp, #36	; 0x24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016c2:	2300      	movs	r3, #0
 80016c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016c6:	2300      	movs	r3, #0
 80016c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016ca:	2300      	movs	r3, #0
 80016cc:	61fb      	str	r3, [r7, #28]
 80016ce:	e165      	b.n	800199c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016d0:	2201      	movs	r2, #1
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	697a      	ldr	r2, [r7, #20]
 80016e0:	4013      	ands	r3, r2
 80016e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	f040 8154 	bne.w	8001996 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f003 0303 	and.w	r3, r3, #3
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d005      	beq.n	8001706 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001702:	2b02      	cmp	r3, #2
 8001704:	d130      	bne.n	8001768 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	2203      	movs	r2, #3
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43db      	mvns	r3, r3
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	4013      	ands	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	68da      	ldr	r2, [r3, #12]
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	4313      	orrs	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800173c:	2201      	movs	r2, #1
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	43db      	mvns	r3, r3
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	4013      	ands	r3, r2
 800174a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	091b      	lsrs	r3, r3, #4
 8001752:	f003 0201 	and.w	r2, r3, #1
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	4313      	orrs	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f003 0303 	and.w	r3, r3, #3
 8001770:	2b03      	cmp	r3, #3
 8001772:	d017      	beq.n	80017a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	2203      	movs	r2, #3
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	43db      	mvns	r3, r3
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	4013      	ands	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	689a      	ldr	r2, [r3, #8]
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	4313      	orrs	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f003 0303 	and.w	r3, r3, #3
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d123      	bne.n	80017f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	08da      	lsrs	r2, r3, #3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	3208      	adds	r2, #8
 80017b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	f003 0307 	and.w	r3, r3, #7
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	220f      	movs	r2, #15
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	43db      	mvns	r3, r3
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	4013      	ands	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	691a      	ldr	r2, [r3, #16]
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	08da      	lsrs	r2, r3, #3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	3208      	adds	r2, #8
 80017f2:	69b9      	ldr	r1, [r7, #24]
 80017f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	2203      	movs	r2, #3
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	43db      	mvns	r3, r3
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	4013      	ands	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f003 0203 	and.w	r2, r3, #3
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	4313      	orrs	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001834:	2b00      	cmp	r3, #0
 8001836:	f000 80ae 	beq.w	8001996 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	4b5d      	ldr	r3, [pc, #372]	; (80019b4 <HAL_GPIO_Init+0x300>)
 8001840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001842:	4a5c      	ldr	r2, [pc, #368]	; (80019b4 <HAL_GPIO_Init+0x300>)
 8001844:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001848:	6453      	str	r3, [r2, #68]	; 0x44
 800184a:	4b5a      	ldr	r3, [pc, #360]	; (80019b4 <HAL_GPIO_Init+0x300>)
 800184c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001856:	4a58      	ldr	r2, [pc, #352]	; (80019b8 <HAL_GPIO_Init+0x304>)
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	089b      	lsrs	r3, r3, #2
 800185c:	3302      	adds	r3, #2
 800185e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001862:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	f003 0303 	and.w	r3, r3, #3
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	220f      	movs	r2, #15
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	43db      	mvns	r3, r3
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	4013      	ands	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a4f      	ldr	r2, [pc, #316]	; (80019bc <HAL_GPIO_Init+0x308>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d025      	beq.n	80018ce <HAL_GPIO_Init+0x21a>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a4e      	ldr	r2, [pc, #312]	; (80019c0 <HAL_GPIO_Init+0x30c>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d01f      	beq.n	80018ca <HAL_GPIO_Init+0x216>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a4d      	ldr	r2, [pc, #308]	; (80019c4 <HAL_GPIO_Init+0x310>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d019      	beq.n	80018c6 <HAL_GPIO_Init+0x212>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a4c      	ldr	r2, [pc, #304]	; (80019c8 <HAL_GPIO_Init+0x314>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d013      	beq.n	80018c2 <HAL_GPIO_Init+0x20e>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a4b      	ldr	r2, [pc, #300]	; (80019cc <HAL_GPIO_Init+0x318>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d00d      	beq.n	80018be <HAL_GPIO_Init+0x20a>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a4a      	ldr	r2, [pc, #296]	; (80019d0 <HAL_GPIO_Init+0x31c>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d007      	beq.n	80018ba <HAL_GPIO_Init+0x206>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a49      	ldr	r2, [pc, #292]	; (80019d4 <HAL_GPIO_Init+0x320>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d101      	bne.n	80018b6 <HAL_GPIO_Init+0x202>
 80018b2:	2306      	movs	r3, #6
 80018b4:	e00c      	b.n	80018d0 <HAL_GPIO_Init+0x21c>
 80018b6:	2307      	movs	r3, #7
 80018b8:	e00a      	b.n	80018d0 <HAL_GPIO_Init+0x21c>
 80018ba:	2305      	movs	r3, #5
 80018bc:	e008      	b.n	80018d0 <HAL_GPIO_Init+0x21c>
 80018be:	2304      	movs	r3, #4
 80018c0:	e006      	b.n	80018d0 <HAL_GPIO_Init+0x21c>
 80018c2:	2303      	movs	r3, #3
 80018c4:	e004      	b.n	80018d0 <HAL_GPIO_Init+0x21c>
 80018c6:	2302      	movs	r3, #2
 80018c8:	e002      	b.n	80018d0 <HAL_GPIO_Init+0x21c>
 80018ca:	2301      	movs	r3, #1
 80018cc:	e000      	b.n	80018d0 <HAL_GPIO_Init+0x21c>
 80018ce:	2300      	movs	r3, #0
 80018d0:	69fa      	ldr	r2, [r7, #28]
 80018d2:	f002 0203 	and.w	r2, r2, #3
 80018d6:	0092      	lsls	r2, r2, #2
 80018d8:	4093      	lsls	r3, r2
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	4313      	orrs	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018e0:	4935      	ldr	r1, [pc, #212]	; (80019b8 <HAL_GPIO_Init+0x304>)
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	089b      	lsrs	r3, r3, #2
 80018e6:	3302      	adds	r3, #2
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018ee:	4b3a      	ldr	r3, [pc, #232]	; (80019d8 <HAL_GPIO_Init+0x324>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	43db      	mvns	r3, r3
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	4013      	ands	r3, r2
 80018fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d003      	beq.n	8001912 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	4313      	orrs	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001912:	4a31      	ldr	r2, [pc, #196]	; (80019d8 <HAL_GPIO_Init+0x324>)
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001918:	4b2f      	ldr	r3, [pc, #188]	; (80019d8 <HAL_GPIO_Init+0x324>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	43db      	mvns	r3, r3
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	4013      	ands	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d003      	beq.n	800193c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	4313      	orrs	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800193c:	4a26      	ldr	r2, [pc, #152]	; (80019d8 <HAL_GPIO_Init+0x324>)
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001942:	4b25      	ldr	r3, [pc, #148]	; (80019d8 <HAL_GPIO_Init+0x324>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	43db      	mvns	r3, r3
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	4013      	ands	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d003      	beq.n	8001966 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	4313      	orrs	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001966:	4a1c      	ldr	r2, [pc, #112]	; (80019d8 <HAL_GPIO_Init+0x324>)
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800196c:	4b1a      	ldr	r3, [pc, #104]	; (80019d8 <HAL_GPIO_Init+0x324>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	43db      	mvns	r3, r3
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	4013      	ands	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d003      	beq.n	8001990 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	4313      	orrs	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001990:	4a11      	ldr	r2, [pc, #68]	; (80019d8 <HAL_GPIO_Init+0x324>)
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	3301      	adds	r3, #1
 800199a:	61fb      	str	r3, [r7, #28]
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	2b0f      	cmp	r3, #15
 80019a0:	f67f ae96 	bls.w	80016d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019a4:	bf00      	nop
 80019a6:	bf00      	nop
 80019a8:	3724      	adds	r7, #36	; 0x24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	40023800 	.word	0x40023800
 80019b8:	40013800 	.word	0x40013800
 80019bc:	40020000 	.word	0x40020000
 80019c0:	40020400 	.word	0x40020400
 80019c4:	40020800 	.word	0x40020800
 80019c8:	40020c00 	.word	0x40020c00
 80019cc:	40021000 	.word	0x40021000
 80019d0:	40021400 	.word	0x40021400
 80019d4:	40021800 	.word	0x40021800
 80019d8:	40013c00 	.word	0x40013c00

080019dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	460b      	mov	r3, r1
 80019e6:	807b      	strh	r3, [r7, #2]
 80019e8:	4613      	mov	r3, r2
 80019ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019ec:	787b      	ldrb	r3, [r7, #1]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d003      	beq.n	80019fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019f2:	887a      	ldrh	r2, [r7, #2]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019f8:	e003      	b.n	8001a02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019fa:	887b      	ldrh	r3, [r7, #2]
 80019fc:	041a      	lsls	r2, r3, #16
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	619a      	str	r2, [r3, #24]
}
 8001a02:	bf00      	nop
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
	...

08001a10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d101      	bne.n	8001a24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e0cc      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a24:	4b68      	ldr	r3, [pc, #416]	; (8001bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 030f 	and.w	r3, r3, #15
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d90c      	bls.n	8001a4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a32:	4b65      	ldr	r3, [pc, #404]	; (8001bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	b2d2      	uxtb	r2, r2
 8001a38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a3a:	4b63      	ldr	r3, [pc, #396]	; (8001bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 030f 	and.w	r3, r3, #15
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d001      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e0b8      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d020      	beq.n	8001a9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0304 	and.w	r3, r3, #4
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d005      	beq.n	8001a70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a64:	4b59      	ldr	r3, [pc, #356]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	4a58      	ldr	r2, [pc, #352]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001a6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0308 	and.w	r3, r3, #8
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d005      	beq.n	8001a88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a7c:	4b53      	ldr	r3, [pc, #332]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	4a52      	ldr	r2, [pc, #328]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001a82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a88:	4b50      	ldr	r3, [pc, #320]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	494d      	ldr	r1, [pc, #308]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d044      	beq.n	8001b30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d107      	bne.n	8001abe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aae:	4b47      	ldr	r3, [pc, #284]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d119      	bne.n	8001aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e07f      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d003      	beq.n	8001ace <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001aca:	2b03      	cmp	r3, #3
 8001acc:	d107      	bne.n	8001ade <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ace:	4b3f      	ldr	r3, [pc, #252]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d109      	bne.n	8001aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e06f      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ade:	4b3b      	ldr	r3, [pc, #236]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e067      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aee:	4b37      	ldr	r3, [pc, #220]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f023 0203 	bic.w	r2, r3, #3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	4934      	ldr	r1, [pc, #208]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001afc:	4313      	orrs	r3, r2
 8001afe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b00:	f7ff fc28 	bl	8001354 <HAL_GetTick>
 8001b04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b06:	e00a      	b.n	8001b1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b08:	f7ff fc24 	bl	8001354 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e04f      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b1e:	4b2b      	ldr	r3, [pc, #172]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f003 020c 	and.w	r2, r3, #12
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d1eb      	bne.n	8001b08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b30:	4b25      	ldr	r3, [pc, #148]	; (8001bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 030f 	and.w	r3, r3, #15
 8001b38:	683a      	ldr	r2, [r7, #0]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d20c      	bcs.n	8001b58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b3e:	4b22      	ldr	r3, [pc, #136]	; (8001bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b40:	683a      	ldr	r2, [r7, #0]
 8001b42:	b2d2      	uxtb	r2, r2
 8001b44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b46:	4b20      	ldr	r3, [pc, #128]	; (8001bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 030f 	and.w	r3, r3, #15
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d001      	beq.n	8001b58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e032      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0304 	and.w	r3, r3, #4
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d008      	beq.n	8001b76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b64:	4b19      	ldr	r3, [pc, #100]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	4916      	ldr	r1, [pc, #88]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0308 	and.w	r3, r3, #8
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d009      	beq.n	8001b96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b82:	4b12      	ldr	r3, [pc, #72]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	490e      	ldr	r1, [pc, #56]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b96:	f000 f855 	bl	8001c44 <HAL_RCC_GetSysClockFreq>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	4b0b      	ldr	r3, [pc, #44]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	091b      	lsrs	r3, r3, #4
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	490a      	ldr	r1, [pc, #40]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001ba8:	5ccb      	ldrb	r3, [r1, r3]
 8001baa:	fa22 f303 	lsr.w	r3, r2, r3
 8001bae:	4a09      	ldr	r2, [pc, #36]	; (8001bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001bb2:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff fb88 	bl	80012cc <HAL_InitTick>

  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40023c00 	.word	0x40023c00
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	08005834 	.word	0x08005834
 8001bd4:	20000000 	.word	0x20000000
 8001bd8:	20000004 	.word	0x20000004

08001bdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001be0:	4b03      	ldr	r3, [pc, #12]	; (8001bf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001be2:	681b      	ldr	r3, [r3, #0]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	20000000 	.word	0x20000000

08001bf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001bf8:	f7ff fff0 	bl	8001bdc <HAL_RCC_GetHCLKFreq>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	4b05      	ldr	r3, [pc, #20]	; (8001c14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	0a9b      	lsrs	r3, r3, #10
 8001c04:	f003 0307 	and.w	r3, r3, #7
 8001c08:	4903      	ldr	r1, [pc, #12]	; (8001c18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c0a:	5ccb      	ldrb	r3, [r1, r3]
 8001c0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40023800 	.word	0x40023800
 8001c18:	08005844 	.word	0x08005844

08001c1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c20:	f7ff ffdc 	bl	8001bdc <HAL_RCC_GetHCLKFreq>
 8001c24:	4602      	mov	r2, r0
 8001c26:	4b05      	ldr	r3, [pc, #20]	; (8001c3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	0b5b      	lsrs	r3, r3, #13
 8001c2c:	f003 0307 	and.w	r3, r3, #7
 8001c30:	4903      	ldr	r1, [pc, #12]	; (8001c40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c32:	5ccb      	ldrb	r3, [r1, r3]
 8001c34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	08005844 	.word	0x08005844

08001c44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c48:	b088      	sub	sp, #32
 8001c4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001c50:	2300      	movs	r3, #0
 8001c52:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8001c54:	2300      	movs	r3, #0
 8001c56:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c60:	4bce      	ldr	r3, [pc, #824]	; (8001f9c <HAL_RCC_GetSysClockFreq+0x358>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f003 030c 	and.w	r3, r3, #12
 8001c68:	2b0c      	cmp	r3, #12
 8001c6a:	f200 818d 	bhi.w	8001f88 <HAL_RCC_GetSysClockFreq+0x344>
 8001c6e:	a201      	add	r2, pc, #4	; (adr r2, 8001c74 <HAL_RCC_GetSysClockFreq+0x30>)
 8001c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c74:	08001ca9 	.word	0x08001ca9
 8001c78:	08001f89 	.word	0x08001f89
 8001c7c:	08001f89 	.word	0x08001f89
 8001c80:	08001f89 	.word	0x08001f89
 8001c84:	08001caf 	.word	0x08001caf
 8001c88:	08001f89 	.word	0x08001f89
 8001c8c:	08001f89 	.word	0x08001f89
 8001c90:	08001f89 	.word	0x08001f89
 8001c94:	08001cb5 	.word	0x08001cb5
 8001c98:	08001f89 	.word	0x08001f89
 8001c9c:	08001f89 	.word	0x08001f89
 8001ca0:	08001f89 	.word	0x08001f89
 8001ca4:	08001e29 	.word	0x08001e29
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ca8:	4bbd      	ldr	r3, [pc, #756]	; (8001fa0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001caa:	61bb      	str	r3, [r7, #24]
       break;
 8001cac:	e16f      	b.n	8001f8e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cae:	4bbd      	ldr	r3, [pc, #756]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x360>)
 8001cb0:	61bb      	str	r3, [r7, #24]
      break;
 8001cb2:	e16c      	b.n	8001f8e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cb4:	4bb9      	ldr	r3, [pc, #740]	; (8001f9c <HAL_RCC_GetSysClockFreq+0x358>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cbc:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cbe:	4bb7      	ldr	r3, [pc, #732]	; (8001f9c <HAL_RCC_GetSysClockFreq+0x358>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d053      	beq.n	8001d72 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cca:	4bb4      	ldr	r3, [pc, #720]	; (8001f9c <HAL_RCC_GetSysClockFreq+0x358>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	099b      	lsrs	r3, r3, #6
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	f04f 0300 	mov.w	r3, #0
 8001cd6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001cda:	f04f 0100 	mov.w	r1, #0
 8001cde:	ea02 0400 	and.w	r4, r2, r0
 8001ce2:	603c      	str	r4, [r7, #0]
 8001ce4:	400b      	ands	r3, r1
 8001ce6:	607b      	str	r3, [r7, #4]
 8001ce8:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001cec:	4620      	mov	r0, r4
 8001cee:	4629      	mov	r1, r5
 8001cf0:	f04f 0200 	mov.w	r2, #0
 8001cf4:	f04f 0300 	mov.w	r3, #0
 8001cf8:	014b      	lsls	r3, r1, #5
 8001cfa:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001cfe:	0142      	lsls	r2, r0, #5
 8001d00:	4610      	mov	r0, r2
 8001d02:	4619      	mov	r1, r3
 8001d04:	4623      	mov	r3, r4
 8001d06:	1ac0      	subs	r0, r0, r3
 8001d08:	462b      	mov	r3, r5
 8001d0a:	eb61 0103 	sbc.w	r1, r1, r3
 8001d0e:	f04f 0200 	mov.w	r2, #0
 8001d12:	f04f 0300 	mov.w	r3, #0
 8001d16:	018b      	lsls	r3, r1, #6
 8001d18:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001d1c:	0182      	lsls	r2, r0, #6
 8001d1e:	1a12      	subs	r2, r2, r0
 8001d20:	eb63 0301 	sbc.w	r3, r3, r1
 8001d24:	f04f 0000 	mov.w	r0, #0
 8001d28:	f04f 0100 	mov.w	r1, #0
 8001d2c:	00d9      	lsls	r1, r3, #3
 8001d2e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d32:	00d0      	lsls	r0, r2, #3
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	4621      	mov	r1, r4
 8001d3a:	1852      	adds	r2, r2, r1
 8001d3c:	4629      	mov	r1, r5
 8001d3e:	eb43 0101 	adc.w	r1, r3, r1
 8001d42:	460b      	mov	r3, r1
 8001d44:	f04f 0000 	mov.w	r0, #0
 8001d48:	f04f 0100 	mov.w	r1, #0
 8001d4c:	0259      	lsls	r1, r3, #9
 8001d4e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001d52:	0250      	lsls	r0, r2, #9
 8001d54:	4602      	mov	r2, r0
 8001d56:	460b      	mov	r3, r1
 8001d58:	4610      	mov	r0, r2
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	461a      	mov	r2, r3
 8001d60:	f04f 0300 	mov.w	r3, #0
 8001d64:	f7fe faa4 	bl	80002b0 <__aeabi_uldivmod>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	61fb      	str	r3, [r7, #28]
 8001d70:	e04c      	b.n	8001e0c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d72:	4b8a      	ldr	r3, [pc, #552]	; (8001f9c <HAL_RCC_GetSysClockFreq+0x358>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	099b      	lsrs	r3, r3, #6
 8001d78:	461a      	mov	r2, r3
 8001d7a:	f04f 0300 	mov.w	r3, #0
 8001d7e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001d82:	f04f 0100 	mov.w	r1, #0
 8001d86:	ea02 0a00 	and.w	sl, r2, r0
 8001d8a:	ea03 0b01 	and.w	fp, r3, r1
 8001d8e:	4650      	mov	r0, sl
 8001d90:	4659      	mov	r1, fp
 8001d92:	f04f 0200 	mov.w	r2, #0
 8001d96:	f04f 0300 	mov.w	r3, #0
 8001d9a:	014b      	lsls	r3, r1, #5
 8001d9c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001da0:	0142      	lsls	r2, r0, #5
 8001da2:	4610      	mov	r0, r2
 8001da4:	4619      	mov	r1, r3
 8001da6:	ebb0 000a 	subs.w	r0, r0, sl
 8001daa:	eb61 010b 	sbc.w	r1, r1, fp
 8001dae:	f04f 0200 	mov.w	r2, #0
 8001db2:	f04f 0300 	mov.w	r3, #0
 8001db6:	018b      	lsls	r3, r1, #6
 8001db8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001dbc:	0182      	lsls	r2, r0, #6
 8001dbe:	1a12      	subs	r2, r2, r0
 8001dc0:	eb63 0301 	sbc.w	r3, r3, r1
 8001dc4:	f04f 0000 	mov.w	r0, #0
 8001dc8:	f04f 0100 	mov.w	r1, #0
 8001dcc:	00d9      	lsls	r1, r3, #3
 8001dce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001dd2:	00d0      	lsls	r0, r2, #3
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	eb12 020a 	adds.w	r2, r2, sl
 8001ddc:	eb43 030b 	adc.w	r3, r3, fp
 8001de0:	f04f 0000 	mov.w	r0, #0
 8001de4:	f04f 0100 	mov.w	r1, #0
 8001de8:	0299      	lsls	r1, r3, #10
 8001dea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001dee:	0290      	lsls	r0, r2, #10
 8001df0:	4602      	mov	r2, r0
 8001df2:	460b      	mov	r3, r1
 8001df4:	4610      	mov	r0, r2
 8001df6:	4619      	mov	r1, r3
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	f04f 0300 	mov.w	r3, #0
 8001e00:	f7fe fa56 	bl	80002b0 <__aeabi_uldivmod>
 8001e04:	4602      	mov	r2, r0
 8001e06:	460b      	mov	r3, r1
 8001e08:	4613      	mov	r3, r2
 8001e0a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e0c:	4b63      	ldr	r3, [pc, #396]	; (8001f9c <HAL_RCC_GetSysClockFreq+0x358>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	0c1b      	lsrs	r3, r3, #16
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	3301      	adds	r3, #1
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8001e1c:	69fa      	ldr	r2, [r7, #28]
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e24:	61bb      	str	r3, [r7, #24]
      break;
 8001e26:	e0b2      	b.n	8001f8e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e28:	4b5c      	ldr	r3, [pc, #368]	; (8001f9c <HAL_RCC_GetSysClockFreq+0x358>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e30:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e32:	4b5a      	ldr	r3, [pc, #360]	; (8001f9c <HAL_RCC_GetSysClockFreq+0x358>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d04d      	beq.n	8001eda <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e3e:	4b57      	ldr	r3, [pc, #348]	; (8001f9c <HAL_RCC_GetSysClockFreq+0x358>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	099b      	lsrs	r3, r3, #6
 8001e44:	461a      	mov	r2, r3
 8001e46:	f04f 0300 	mov.w	r3, #0
 8001e4a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001e4e:	f04f 0100 	mov.w	r1, #0
 8001e52:	ea02 0800 	and.w	r8, r2, r0
 8001e56:	ea03 0901 	and.w	r9, r3, r1
 8001e5a:	4640      	mov	r0, r8
 8001e5c:	4649      	mov	r1, r9
 8001e5e:	f04f 0200 	mov.w	r2, #0
 8001e62:	f04f 0300 	mov.w	r3, #0
 8001e66:	014b      	lsls	r3, r1, #5
 8001e68:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e6c:	0142      	lsls	r2, r0, #5
 8001e6e:	4610      	mov	r0, r2
 8001e70:	4619      	mov	r1, r3
 8001e72:	ebb0 0008 	subs.w	r0, r0, r8
 8001e76:	eb61 0109 	sbc.w	r1, r1, r9
 8001e7a:	f04f 0200 	mov.w	r2, #0
 8001e7e:	f04f 0300 	mov.w	r3, #0
 8001e82:	018b      	lsls	r3, r1, #6
 8001e84:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001e88:	0182      	lsls	r2, r0, #6
 8001e8a:	1a12      	subs	r2, r2, r0
 8001e8c:	eb63 0301 	sbc.w	r3, r3, r1
 8001e90:	f04f 0000 	mov.w	r0, #0
 8001e94:	f04f 0100 	mov.w	r1, #0
 8001e98:	00d9      	lsls	r1, r3, #3
 8001e9a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e9e:	00d0      	lsls	r0, r2, #3
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	eb12 0208 	adds.w	r2, r2, r8
 8001ea8:	eb43 0309 	adc.w	r3, r3, r9
 8001eac:	f04f 0000 	mov.w	r0, #0
 8001eb0:	f04f 0100 	mov.w	r1, #0
 8001eb4:	0259      	lsls	r1, r3, #9
 8001eb6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001eba:	0250      	lsls	r0, r2, #9
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	4610      	mov	r0, r2
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	f04f 0300 	mov.w	r3, #0
 8001ecc:	f7fe f9f0 	bl	80002b0 <__aeabi_uldivmod>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	61fb      	str	r3, [r7, #28]
 8001ed8:	e04a      	b.n	8001f70 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eda:	4b30      	ldr	r3, [pc, #192]	; (8001f9c <HAL_RCC_GetSysClockFreq+0x358>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	099b      	lsrs	r3, r3, #6
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	f04f 0300 	mov.w	r3, #0
 8001ee6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001eea:	f04f 0100 	mov.w	r1, #0
 8001eee:	ea02 0400 	and.w	r4, r2, r0
 8001ef2:	ea03 0501 	and.w	r5, r3, r1
 8001ef6:	4620      	mov	r0, r4
 8001ef8:	4629      	mov	r1, r5
 8001efa:	f04f 0200 	mov.w	r2, #0
 8001efe:	f04f 0300 	mov.w	r3, #0
 8001f02:	014b      	lsls	r3, r1, #5
 8001f04:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001f08:	0142      	lsls	r2, r0, #5
 8001f0a:	4610      	mov	r0, r2
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	1b00      	subs	r0, r0, r4
 8001f10:	eb61 0105 	sbc.w	r1, r1, r5
 8001f14:	f04f 0200 	mov.w	r2, #0
 8001f18:	f04f 0300 	mov.w	r3, #0
 8001f1c:	018b      	lsls	r3, r1, #6
 8001f1e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001f22:	0182      	lsls	r2, r0, #6
 8001f24:	1a12      	subs	r2, r2, r0
 8001f26:	eb63 0301 	sbc.w	r3, r3, r1
 8001f2a:	f04f 0000 	mov.w	r0, #0
 8001f2e:	f04f 0100 	mov.w	r1, #0
 8001f32:	00d9      	lsls	r1, r3, #3
 8001f34:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f38:	00d0      	lsls	r0, r2, #3
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	1912      	adds	r2, r2, r4
 8001f40:	eb45 0303 	adc.w	r3, r5, r3
 8001f44:	f04f 0000 	mov.w	r0, #0
 8001f48:	f04f 0100 	mov.w	r1, #0
 8001f4c:	0299      	lsls	r1, r3, #10
 8001f4e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001f52:	0290      	lsls	r0, r2, #10
 8001f54:	4602      	mov	r2, r0
 8001f56:	460b      	mov	r3, r1
 8001f58:	4610      	mov	r0, r2
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	461a      	mov	r2, r3
 8001f60:	f04f 0300 	mov.w	r3, #0
 8001f64:	f7fe f9a4 	bl	80002b0 <__aeabi_uldivmod>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001f70:	4b0a      	ldr	r3, [pc, #40]	; (8001f9c <HAL_RCC_GetSysClockFreq+0x358>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	0f1b      	lsrs	r3, r3, #28
 8001f76:	f003 0307 	and.w	r3, r3, #7
 8001f7a:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8001f7c:	69fa      	ldr	r2, [r7, #28]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f84:	61bb      	str	r3, [r7, #24]
      break;
 8001f86:	e002      	b.n	8001f8e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f88:	4b05      	ldr	r3, [pc, #20]	; (8001fa0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001f8a:	61bb      	str	r3, [r7, #24]
      break;
 8001f8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f8e:	69bb      	ldr	r3, [r7, #24]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3720      	adds	r7, #32
 8001f94:	46bd      	mov	sp, r7
 8001f96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40023800 	.word	0x40023800
 8001fa0:	00f42400 	.word	0x00f42400
 8001fa4:	007a1200 	.word	0x007a1200

08001fa8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e28d      	b.n	80024d6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f000 8083 	beq.w	80020ce <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001fc8:	4b94      	ldr	r3, [pc, #592]	; (800221c <HAL_RCC_OscConfig+0x274>)
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f003 030c 	and.w	r3, r3, #12
 8001fd0:	2b04      	cmp	r3, #4
 8001fd2:	d019      	beq.n	8002008 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001fd4:	4b91      	ldr	r3, [pc, #580]	; (800221c <HAL_RCC_OscConfig+0x274>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001fdc:	2b08      	cmp	r3, #8
 8001fde:	d106      	bne.n	8001fee <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001fe0:	4b8e      	ldr	r3, [pc, #568]	; (800221c <HAL_RCC_OscConfig+0x274>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fe8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fec:	d00c      	beq.n	8002008 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fee:	4b8b      	ldr	r3, [pc, #556]	; (800221c <HAL_RCC_OscConfig+0x274>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ff6:	2b0c      	cmp	r3, #12
 8001ff8:	d112      	bne.n	8002020 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ffa:	4b88      	ldr	r3, [pc, #544]	; (800221c <HAL_RCC_OscConfig+0x274>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002002:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002006:	d10b      	bne.n	8002020 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002008:	4b84      	ldr	r3, [pc, #528]	; (800221c <HAL_RCC_OscConfig+0x274>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d05b      	beq.n	80020cc <HAL_RCC_OscConfig+0x124>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d157      	bne.n	80020cc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e25a      	b.n	80024d6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002028:	d106      	bne.n	8002038 <HAL_RCC_OscConfig+0x90>
 800202a:	4b7c      	ldr	r3, [pc, #496]	; (800221c <HAL_RCC_OscConfig+0x274>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a7b      	ldr	r2, [pc, #492]	; (800221c <HAL_RCC_OscConfig+0x274>)
 8002030:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002034:	6013      	str	r3, [r2, #0]
 8002036:	e01d      	b.n	8002074 <HAL_RCC_OscConfig+0xcc>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002040:	d10c      	bne.n	800205c <HAL_RCC_OscConfig+0xb4>
 8002042:	4b76      	ldr	r3, [pc, #472]	; (800221c <HAL_RCC_OscConfig+0x274>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a75      	ldr	r2, [pc, #468]	; (800221c <HAL_RCC_OscConfig+0x274>)
 8002048:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800204c:	6013      	str	r3, [r2, #0]
 800204e:	4b73      	ldr	r3, [pc, #460]	; (800221c <HAL_RCC_OscConfig+0x274>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a72      	ldr	r2, [pc, #456]	; (800221c <HAL_RCC_OscConfig+0x274>)
 8002054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002058:	6013      	str	r3, [r2, #0]
 800205a:	e00b      	b.n	8002074 <HAL_RCC_OscConfig+0xcc>
 800205c:	4b6f      	ldr	r3, [pc, #444]	; (800221c <HAL_RCC_OscConfig+0x274>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a6e      	ldr	r2, [pc, #440]	; (800221c <HAL_RCC_OscConfig+0x274>)
 8002062:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002066:	6013      	str	r3, [r2, #0]
 8002068:	4b6c      	ldr	r3, [pc, #432]	; (800221c <HAL_RCC_OscConfig+0x274>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a6b      	ldr	r2, [pc, #428]	; (800221c <HAL_RCC_OscConfig+0x274>)
 800206e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002072:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d013      	beq.n	80020a4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800207c:	f7ff f96a 	bl	8001354 <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002084:	f7ff f966 	bl	8001354 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b64      	cmp	r3, #100	; 0x64
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e21f      	b.n	80024d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002096:	4b61      	ldr	r3, [pc, #388]	; (800221c <HAL_RCC_OscConfig+0x274>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d0f0      	beq.n	8002084 <HAL_RCC_OscConfig+0xdc>
 80020a2:	e014      	b.n	80020ce <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a4:	f7ff f956 	bl	8001354 <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020ac:	f7ff f952 	bl	8001354 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b64      	cmp	r3, #100	; 0x64
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e20b      	b.n	80024d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020be:	4b57      	ldr	r3, [pc, #348]	; (800221c <HAL_RCC_OscConfig+0x274>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1f0      	bne.n	80020ac <HAL_RCC_OscConfig+0x104>
 80020ca:	e000      	b.n	80020ce <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d06f      	beq.n	80021ba <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80020da:	4b50      	ldr	r3, [pc, #320]	; (800221c <HAL_RCC_OscConfig+0x274>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f003 030c 	and.w	r3, r3, #12
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d017      	beq.n	8002116 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80020e6:	4b4d      	ldr	r3, [pc, #308]	; (800221c <HAL_RCC_OscConfig+0x274>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80020ee:	2b08      	cmp	r3, #8
 80020f0:	d105      	bne.n	80020fe <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80020f2:	4b4a      	ldr	r3, [pc, #296]	; (800221c <HAL_RCC_OscConfig+0x274>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00b      	beq.n	8002116 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020fe:	4b47      	ldr	r3, [pc, #284]	; (800221c <HAL_RCC_OscConfig+0x274>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002106:	2b0c      	cmp	r3, #12
 8002108:	d11c      	bne.n	8002144 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800210a:	4b44      	ldr	r3, [pc, #272]	; (800221c <HAL_RCC_OscConfig+0x274>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d116      	bne.n	8002144 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002116:	4b41      	ldr	r3, [pc, #260]	; (800221c <HAL_RCC_OscConfig+0x274>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d005      	beq.n	800212e <HAL_RCC_OscConfig+0x186>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d001      	beq.n	800212e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e1d3      	b.n	80024d6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800212e:	4b3b      	ldr	r3, [pc, #236]	; (800221c <HAL_RCC_OscConfig+0x274>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	4937      	ldr	r1, [pc, #220]	; (800221c <HAL_RCC_OscConfig+0x274>)
 800213e:	4313      	orrs	r3, r2
 8002140:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002142:	e03a      	b.n	80021ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d020      	beq.n	800218e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800214c:	4b34      	ldr	r3, [pc, #208]	; (8002220 <HAL_RCC_OscConfig+0x278>)
 800214e:	2201      	movs	r2, #1
 8002150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002152:	f7ff f8ff 	bl	8001354 <HAL_GetTick>
 8002156:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002158:	e008      	b.n	800216c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800215a:	f7ff f8fb 	bl	8001354 <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e1b4      	b.n	80024d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800216c:	4b2b      	ldr	r3, [pc, #172]	; (800221c <HAL_RCC_OscConfig+0x274>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d0f0      	beq.n	800215a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002178:	4b28      	ldr	r3, [pc, #160]	; (800221c <HAL_RCC_OscConfig+0x274>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	4925      	ldr	r1, [pc, #148]	; (800221c <HAL_RCC_OscConfig+0x274>)
 8002188:	4313      	orrs	r3, r2
 800218a:	600b      	str	r3, [r1, #0]
 800218c:	e015      	b.n	80021ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800218e:	4b24      	ldr	r3, [pc, #144]	; (8002220 <HAL_RCC_OscConfig+0x278>)
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002194:	f7ff f8de 	bl	8001354 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800219c:	f7ff f8da 	bl	8001354 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e193      	b.n	80024d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ae:	4b1b      	ldr	r3, [pc, #108]	; (800221c <HAL_RCC_OscConfig+0x274>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1f0      	bne.n	800219c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0308 	and.w	r3, r3, #8
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d036      	beq.n	8002234 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d016      	beq.n	80021fc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021ce:	4b15      	ldr	r3, [pc, #84]	; (8002224 <HAL_RCC_OscConfig+0x27c>)
 80021d0:	2201      	movs	r2, #1
 80021d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d4:	f7ff f8be 	bl	8001354 <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021dc:	f7ff f8ba 	bl	8001354 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e173      	b.n	80024d6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ee:	4b0b      	ldr	r3, [pc, #44]	; (800221c <HAL_RCC_OscConfig+0x274>)
 80021f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d0f0      	beq.n	80021dc <HAL_RCC_OscConfig+0x234>
 80021fa:	e01b      	b.n	8002234 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021fc:	4b09      	ldr	r3, [pc, #36]	; (8002224 <HAL_RCC_OscConfig+0x27c>)
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002202:	f7ff f8a7 	bl	8001354 <HAL_GetTick>
 8002206:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002208:	e00e      	b.n	8002228 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800220a:	f7ff f8a3 	bl	8001354 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d907      	bls.n	8002228 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e15c      	b.n	80024d6 <HAL_RCC_OscConfig+0x52e>
 800221c:	40023800 	.word	0x40023800
 8002220:	42470000 	.word	0x42470000
 8002224:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002228:	4b8a      	ldr	r3, [pc, #552]	; (8002454 <HAL_RCC_OscConfig+0x4ac>)
 800222a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d1ea      	bne.n	800220a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	2b00      	cmp	r3, #0
 800223e:	f000 8097 	beq.w	8002370 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002242:	2300      	movs	r3, #0
 8002244:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002246:	4b83      	ldr	r3, [pc, #524]	; (8002454 <HAL_RCC_OscConfig+0x4ac>)
 8002248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d10f      	bne.n	8002272 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002252:	2300      	movs	r3, #0
 8002254:	60bb      	str	r3, [r7, #8]
 8002256:	4b7f      	ldr	r3, [pc, #508]	; (8002454 <HAL_RCC_OscConfig+0x4ac>)
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	4a7e      	ldr	r2, [pc, #504]	; (8002454 <HAL_RCC_OscConfig+0x4ac>)
 800225c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002260:	6413      	str	r3, [r2, #64]	; 0x40
 8002262:	4b7c      	ldr	r3, [pc, #496]	; (8002454 <HAL_RCC_OscConfig+0x4ac>)
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226a:	60bb      	str	r3, [r7, #8]
 800226c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800226e:	2301      	movs	r3, #1
 8002270:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002272:	4b79      	ldr	r3, [pc, #484]	; (8002458 <HAL_RCC_OscConfig+0x4b0>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227a:	2b00      	cmp	r3, #0
 800227c:	d118      	bne.n	80022b0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800227e:	4b76      	ldr	r3, [pc, #472]	; (8002458 <HAL_RCC_OscConfig+0x4b0>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a75      	ldr	r2, [pc, #468]	; (8002458 <HAL_RCC_OscConfig+0x4b0>)
 8002284:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002288:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800228a:	f7ff f863 	bl	8001354 <HAL_GetTick>
 800228e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002290:	e008      	b.n	80022a4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002292:	f7ff f85f 	bl	8001354 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b02      	cmp	r3, #2
 800229e:	d901      	bls.n	80022a4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e118      	b.n	80024d6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a4:	4b6c      	ldr	r3, [pc, #432]	; (8002458 <HAL_RCC_OscConfig+0x4b0>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d0f0      	beq.n	8002292 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d106      	bne.n	80022c6 <HAL_RCC_OscConfig+0x31e>
 80022b8:	4b66      	ldr	r3, [pc, #408]	; (8002454 <HAL_RCC_OscConfig+0x4ac>)
 80022ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022bc:	4a65      	ldr	r2, [pc, #404]	; (8002454 <HAL_RCC_OscConfig+0x4ac>)
 80022be:	f043 0301 	orr.w	r3, r3, #1
 80022c2:	6713      	str	r3, [r2, #112]	; 0x70
 80022c4:	e01c      	b.n	8002300 <HAL_RCC_OscConfig+0x358>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	2b05      	cmp	r3, #5
 80022cc:	d10c      	bne.n	80022e8 <HAL_RCC_OscConfig+0x340>
 80022ce:	4b61      	ldr	r3, [pc, #388]	; (8002454 <HAL_RCC_OscConfig+0x4ac>)
 80022d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d2:	4a60      	ldr	r2, [pc, #384]	; (8002454 <HAL_RCC_OscConfig+0x4ac>)
 80022d4:	f043 0304 	orr.w	r3, r3, #4
 80022d8:	6713      	str	r3, [r2, #112]	; 0x70
 80022da:	4b5e      	ldr	r3, [pc, #376]	; (8002454 <HAL_RCC_OscConfig+0x4ac>)
 80022dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022de:	4a5d      	ldr	r2, [pc, #372]	; (8002454 <HAL_RCC_OscConfig+0x4ac>)
 80022e0:	f043 0301 	orr.w	r3, r3, #1
 80022e4:	6713      	str	r3, [r2, #112]	; 0x70
 80022e6:	e00b      	b.n	8002300 <HAL_RCC_OscConfig+0x358>
 80022e8:	4b5a      	ldr	r3, [pc, #360]	; (8002454 <HAL_RCC_OscConfig+0x4ac>)
 80022ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ec:	4a59      	ldr	r2, [pc, #356]	; (8002454 <HAL_RCC_OscConfig+0x4ac>)
 80022ee:	f023 0301 	bic.w	r3, r3, #1
 80022f2:	6713      	str	r3, [r2, #112]	; 0x70
 80022f4:	4b57      	ldr	r3, [pc, #348]	; (8002454 <HAL_RCC_OscConfig+0x4ac>)
 80022f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f8:	4a56      	ldr	r2, [pc, #344]	; (8002454 <HAL_RCC_OscConfig+0x4ac>)
 80022fa:	f023 0304 	bic.w	r3, r3, #4
 80022fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d015      	beq.n	8002334 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002308:	f7ff f824 	bl	8001354 <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800230e:	e00a      	b.n	8002326 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002310:	f7ff f820 	bl	8001354 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	f241 3288 	movw	r2, #5000	; 0x1388
 800231e:	4293      	cmp	r3, r2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e0d7      	b.n	80024d6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002326:	4b4b      	ldr	r3, [pc, #300]	; (8002454 <HAL_RCC_OscConfig+0x4ac>)
 8002328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d0ee      	beq.n	8002310 <HAL_RCC_OscConfig+0x368>
 8002332:	e014      	b.n	800235e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002334:	f7ff f80e 	bl	8001354 <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800233a:	e00a      	b.n	8002352 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800233c:	f7ff f80a 	bl	8001354 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	f241 3288 	movw	r2, #5000	; 0x1388
 800234a:	4293      	cmp	r3, r2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e0c1      	b.n	80024d6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002352:	4b40      	ldr	r3, [pc, #256]	; (8002454 <HAL_RCC_OscConfig+0x4ac>)
 8002354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1ee      	bne.n	800233c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800235e:	7dfb      	ldrb	r3, [r7, #23]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d105      	bne.n	8002370 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002364:	4b3b      	ldr	r3, [pc, #236]	; (8002454 <HAL_RCC_OscConfig+0x4ac>)
 8002366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002368:	4a3a      	ldr	r2, [pc, #232]	; (8002454 <HAL_RCC_OscConfig+0x4ac>)
 800236a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800236e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	2b00      	cmp	r3, #0
 8002376:	f000 80ad 	beq.w	80024d4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800237a:	4b36      	ldr	r3, [pc, #216]	; (8002454 <HAL_RCC_OscConfig+0x4ac>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f003 030c 	and.w	r3, r3, #12
 8002382:	2b08      	cmp	r3, #8
 8002384:	d060      	beq.n	8002448 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	2b02      	cmp	r3, #2
 800238c:	d145      	bne.n	800241a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800238e:	4b33      	ldr	r3, [pc, #204]	; (800245c <HAL_RCC_OscConfig+0x4b4>)
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002394:	f7fe ffde 	bl	8001354 <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800239c:	f7fe ffda 	bl	8001354 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e093      	b.n	80024d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ae:	4b29      	ldr	r3, [pc, #164]	; (8002454 <HAL_RCC_OscConfig+0x4ac>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1f0      	bne.n	800239c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	69da      	ldr	r2, [r3, #28]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a1b      	ldr	r3, [r3, #32]
 80023c2:	431a      	orrs	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c8:	019b      	lsls	r3, r3, #6
 80023ca:	431a      	orrs	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d0:	085b      	lsrs	r3, r3, #1
 80023d2:	3b01      	subs	r3, #1
 80023d4:	041b      	lsls	r3, r3, #16
 80023d6:	431a      	orrs	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023dc:	061b      	lsls	r3, r3, #24
 80023de:	431a      	orrs	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e4:	071b      	lsls	r3, r3, #28
 80023e6:	491b      	ldr	r1, [pc, #108]	; (8002454 <HAL_RCC_OscConfig+0x4ac>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023ec:	4b1b      	ldr	r3, [pc, #108]	; (800245c <HAL_RCC_OscConfig+0x4b4>)
 80023ee:	2201      	movs	r2, #1
 80023f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f2:	f7fe ffaf 	bl	8001354 <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023f8:	e008      	b.n	800240c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023fa:	f7fe ffab 	bl	8001354 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e064      	b.n	80024d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800240c:	4b11      	ldr	r3, [pc, #68]	; (8002454 <HAL_RCC_OscConfig+0x4ac>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d0f0      	beq.n	80023fa <HAL_RCC_OscConfig+0x452>
 8002418:	e05c      	b.n	80024d4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800241a:	4b10      	ldr	r3, [pc, #64]	; (800245c <HAL_RCC_OscConfig+0x4b4>)
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002420:	f7fe ff98 	bl	8001354 <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002428:	f7fe ff94 	bl	8001354 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e04d      	b.n	80024d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800243a:	4b06      	ldr	r3, [pc, #24]	; (8002454 <HAL_RCC_OscConfig+0x4ac>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1f0      	bne.n	8002428 <HAL_RCC_OscConfig+0x480>
 8002446:	e045      	b.n	80024d4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d107      	bne.n	8002460 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e040      	b.n	80024d6 <HAL_RCC_OscConfig+0x52e>
 8002454:	40023800 	.word	0x40023800
 8002458:	40007000 	.word	0x40007000
 800245c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002460:	4b1f      	ldr	r3, [pc, #124]	; (80024e0 <HAL_RCC_OscConfig+0x538>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d030      	beq.n	80024d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002478:	429a      	cmp	r2, r3
 800247a:	d129      	bne.n	80024d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002486:	429a      	cmp	r2, r3
 8002488:	d122      	bne.n	80024d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002490:	4013      	ands	r3, r2
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002496:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002498:	4293      	cmp	r3, r2
 800249a:	d119      	bne.n	80024d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a6:	085b      	lsrs	r3, r3, #1
 80024a8:	3b01      	subs	r3, #1
 80024aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d10f      	bne.n	80024d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024bc:	429a      	cmp	r2, r3
 80024be:	d107      	bne.n	80024d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d001      	beq.n	80024d4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e000      	b.n	80024d6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3718      	adds	r7, #24
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	40023800 	.word	0x40023800

080024e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e041      	b.n	800257a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d106      	bne.n	8002510 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7fe fd5a 	bl	8000fc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2202      	movs	r2, #2
 8002514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3304      	adds	r3, #4
 8002520:	4619      	mov	r1, r3
 8002522:	4610      	mov	r0, r2
 8002524:	f000 fdae 	bl	8003084 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
	...

08002584 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002592:	b2db      	uxtb	r3, r3
 8002594:	2b01      	cmp	r3, #1
 8002596:	d001      	beq.n	800259c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e04e      	b.n	800263a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2202      	movs	r2, #2
 80025a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68da      	ldr	r2, [r3, #12]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f042 0201 	orr.w	r2, r2, #1
 80025b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a23      	ldr	r2, [pc, #140]	; (8002648 <HAL_TIM_Base_Start_IT+0xc4>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d022      	beq.n	8002604 <HAL_TIM_Base_Start_IT+0x80>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025c6:	d01d      	beq.n	8002604 <HAL_TIM_Base_Start_IT+0x80>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a1f      	ldr	r2, [pc, #124]	; (800264c <HAL_TIM_Base_Start_IT+0xc8>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d018      	beq.n	8002604 <HAL_TIM_Base_Start_IT+0x80>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a1e      	ldr	r2, [pc, #120]	; (8002650 <HAL_TIM_Base_Start_IT+0xcc>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d013      	beq.n	8002604 <HAL_TIM_Base_Start_IT+0x80>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a1c      	ldr	r2, [pc, #112]	; (8002654 <HAL_TIM_Base_Start_IT+0xd0>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d00e      	beq.n	8002604 <HAL_TIM_Base_Start_IT+0x80>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a1b      	ldr	r2, [pc, #108]	; (8002658 <HAL_TIM_Base_Start_IT+0xd4>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d009      	beq.n	8002604 <HAL_TIM_Base_Start_IT+0x80>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a19      	ldr	r2, [pc, #100]	; (800265c <HAL_TIM_Base_Start_IT+0xd8>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d004      	beq.n	8002604 <HAL_TIM_Base_Start_IT+0x80>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a18      	ldr	r2, [pc, #96]	; (8002660 <HAL_TIM_Base_Start_IT+0xdc>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d111      	bne.n	8002628 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2b06      	cmp	r3, #6
 8002614:	d010      	beq.n	8002638 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f042 0201 	orr.w	r2, r2, #1
 8002624:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002626:	e007      	b.n	8002638 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f042 0201 	orr.w	r2, r2, #1
 8002636:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3714      	adds	r7, #20
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	40010000 	.word	0x40010000
 800264c:	40000400 	.word	0x40000400
 8002650:	40000800 	.word	0x40000800
 8002654:	40000c00 	.word	0x40000c00
 8002658:	40010400 	.word	0x40010400
 800265c:	40014000 	.word	0x40014000
 8002660:	40001800 	.word	0x40001800

08002664 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e041      	b.n	80026fa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d106      	bne.n	8002690 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 f839 	bl	8002702 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2202      	movs	r2, #2
 8002694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	3304      	adds	r3, #4
 80026a0:	4619      	mov	r1, r3
 80026a2:	4610      	mov	r0, r2
 80026a4:	f000 fcee 	bl	8003084 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002702:	b480      	push	{r7}
 8002704:	b083      	sub	sp, #12
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800270a:	bf00      	nop
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
	...

08002718 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d109      	bne.n	800273c <HAL_TIM_PWM_Start+0x24>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800272e:	b2db      	uxtb	r3, r3
 8002730:	2b01      	cmp	r3, #1
 8002732:	bf14      	ite	ne
 8002734:	2301      	movne	r3, #1
 8002736:	2300      	moveq	r3, #0
 8002738:	b2db      	uxtb	r3, r3
 800273a:	e022      	b.n	8002782 <HAL_TIM_PWM_Start+0x6a>
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	2b04      	cmp	r3, #4
 8002740:	d109      	bne.n	8002756 <HAL_TIM_PWM_Start+0x3e>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b01      	cmp	r3, #1
 800274c:	bf14      	ite	ne
 800274e:	2301      	movne	r3, #1
 8002750:	2300      	moveq	r3, #0
 8002752:	b2db      	uxtb	r3, r3
 8002754:	e015      	b.n	8002782 <HAL_TIM_PWM_Start+0x6a>
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	2b08      	cmp	r3, #8
 800275a:	d109      	bne.n	8002770 <HAL_TIM_PWM_Start+0x58>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002762:	b2db      	uxtb	r3, r3
 8002764:	2b01      	cmp	r3, #1
 8002766:	bf14      	ite	ne
 8002768:	2301      	movne	r3, #1
 800276a:	2300      	moveq	r3, #0
 800276c:	b2db      	uxtb	r3, r3
 800276e:	e008      	b.n	8002782 <HAL_TIM_PWM_Start+0x6a>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b01      	cmp	r3, #1
 800277a:	bf14      	ite	ne
 800277c:	2301      	movne	r3, #1
 800277e:	2300      	moveq	r3, #0
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e07c      	b.n	8002884 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d104      	bne.n	800279a <HAL_TIM_PWM_Start+0x82>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2202      	movs	r2, #2
 8002794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002798:	e013      	b.n	80027c2 <HAL_TIM_PWM_Start+0xaa>
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	2b04      	cmp	r3, #4
 800279e:	d104      	bne.n	80027aa <HAL_TIM_PWM_Start+0x92>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2202      	movs	r2, #2
 80027a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027a8:	e00b      	b.n	80027c2 <HAL_TIM_PWM_Start+0xaa>
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	2b08      	cmp	r3, #8
 80027ae:	d104      	bne.n	80027ba <HAL_TIM_PWM_Start+0xa2>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2202      	movs	r2, #2
 80027b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027b8:	e003      	b.n	80027c2 <HAL_TIM_PWM_Start+0xaa>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2202      	movs	r2, #2
 80027be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2201      	movs	r2, #1
 80027c8:	6839      	ldr	r1, [r7, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 ff44 	bl	8003658 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a2d      	ldr	r2, [pc, #180]	; (800288c <HAL_TIM_PWM_Start+0x174>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d004      	beq.n	80027e4 <HAL_TIM_PWM_Start+0xcc>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a2c      	ldr	r2, [pc, #176]	; (8002890 <HAL_TIM_PWM_Start+0x178>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d101      	bne.n	80027e8 <HAL_TIM_PWM_Start+0xd0>
 80027e4:	2301      	movs	r3, #1
 80027e6:	e000      	b.n	80027ea <HAL_TIM_PWM_Start+0xd2>
 80027e8:	2300      	movs	r3, #0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d007      	beq.n	80027fe <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a22      	ldr	r2, [pc, #136]	; (800288c <HAL_TIM_PWM_Start+0x174>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d022      	beq.n	800284e <HAL_TIM_PWM_Start+0x136>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002810:	d01d      	beq.n	800284e <HAL_TIM_PWM_Start+0x136>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a1f      	ldr	r2, [pc, #124]	; (8002894 <HAL_TIM_PWM_Start+0x17c>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d018      	beq.n	800284e <HAL_TIM_PWM_Start+0x136>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a1d      	ldr	r2, [pc, #116]	; (8002898 <HAL_TIM_PWM_Start+0x180>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d013      	beq.n	800284e <HAL_TIM_PWM_Start+0x136>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a1c      	ldr	r2, [pc, #112]	; (800289c <HAL_TIM_PWM_Start+0x184>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d00e      	beq.n	800284e <HAL_TIM_PWM_Start+0x136>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a16      	ldr	r2, [pc, #88]	; (8002890 <HAL_TIM_PWM_Start+0x178>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d009      	beq.n	800284e <HAL_TIM_PWM_Start+0x136>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a18      	ldr	r2, [pc, #96]	; (80028a0 <HAL_TIM_PWM_Start+0x188>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d004      	beq.n	800284e <HAL_TIM_PWM_Start+0x136>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a16      	ldr	r2, [pc, #88]	; (80028a4 <HAL_TIM_PWM_Start+0x18c>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d111      	bne.n	8002872 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f003 0307 	and.w	r3, r3, #7
 8002858:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2b06      	cmp	r3, #6
 800285e:	d010      	beq.n	8002882 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f042 0201 	orr.w	r2, r2, #1
 800286e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002870:	e007      	b.n	8002882 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f042 0201 	orr.w	r2, r2, #1
 8002880:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	40010000 	.word	0x40010000
 8002890:	40010400 	.word	0x40010400
 8002894:	40000400 	.word	0x40000400
 8002898:	40000800 	.word	0x40000800
 800289c:	40000c00 	.word	0x40000c00
 80028a0:	40014000 	.word	0x40014000
 80028a4:	40001800 	.word	0x40001800

080028a8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d101      	bne.n	80028bc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e097      	b.n	80029ec <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d106      	bne.n	80028d6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f7fe fbb5 	bl	8001040 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2202      	movs	r2, #2
 80028da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	6812      	ldr	r2, [r2, #0]
 80028e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028ec:	f023 0307 	bic.w	r3, r3, #7
 80028f0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	3304      	adds	r3, #4
 80028fa:	4619      	mov	r1, r3
 80028fc:	4610      	mov	r0, r2
 80028fe:	f000 fbc1 	bl	8003084 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	6a1b      	ldr	r3, [r3, #32]
 8002918:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	4313      	orrs	r3, r2
 8002922:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800292a:	f023 0303 	bic.w	r3, r3, #3
 800292e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	689a      	ldr	r2, [r3, #8]
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	021b      	lsls	r3, r3, #8
 800293a:	4313      	orrs	r3, r2
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	4313      	orrs	r3, r2
 8002940:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002948:	f023 030c 	bic.w	r3, r3, #12
 800294c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002954:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002958:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	68da      	ldr	r2, [r3, #12]
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	69db      	ldr	r3, [r3, #28]
 8002962:	021b      	lsls	r3, r3, #8
 8002964:	4313      	orrs	r3, r2
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	4313      	orrs	r3, r2
 800296a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	011a      	lsls	r2, r3, #4
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	031b      	lsls	r3, r3, #12
 8002978:	4313      	orrs	r3, r2
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	4313      	orrs	r3, r2
 800297e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002986:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800298e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685a      	ldr	r2, [r3, #4]
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	695b      	ldr	r3, [r3, #20]
 8002998:	011b      	lsls	r3, r3, #4
 800299a:	4313      	orrs	r3, r2
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	4313      	orrs	r3, r2
 80029a0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3718      	adds	r7, #24
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a04:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002a0c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002a14:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002a1c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d110      	bne.n	8002a46 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002a24:	7bfb      	ldrb	r3, [r7, #15]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d102      	bne.n	8002a30 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002a2a:	7b7b      	ldrb	r3, [r7, #13]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d001      	beq.n	8002a34 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e069      	b.n	8002b08 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2202      	movs	r2, #2
 8002a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2202      	movs	r2, #2
 8002a40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a44:	e031      	b.n	8002aaa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	2b04      	cmp	r3, #4
 8002a4a:	d110      	bne.n	8002a6e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002a4c:	7bbb      	ldrb	r3, [r7, #14]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d102      	bne.n	8002a58 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002a52:	7b3b      	ldrb	r3, [r7, #12]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d001      	beq.n	8002a5c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e055      	b.n	8002b08 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2202      	movs	r2, #2
 8002a60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2202      	movs	r2, #2
 8002a68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a6c:	e01d      	b.n	8002aaa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002a6e:	7bfb      	ldrb	r3, [r7, #15]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d108      	bne.n	8002a86 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002a74:	7bbb      	ldrb	r3, [r7, #14]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d105      	bne.n	8002a86 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002a7a:	7b7b      	ldrb	r3, [r7, #13]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d102      	bne.n	8002a86 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002a80:	7b3b      	ldrb	r3, [r7, #12]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d001      	beq.n	8002a8a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e03e      	b.n	8002b08 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2202      	movs	r2, #2
 8002a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2202      	movs	r2, #2
 8002a96:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2202      	movs	r2, #2
 8002a9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2202      	movs	r2, #2
 8002aa6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d003      	beq.n	8002ab8 <HAL_TIM_Encoder_Start+0xc4>
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	d008      	beq.n	8002ac8 <HAL_TIM_Encoder_Start+0xd4>
 8002ab6:	e00f      	b.n	8002ad8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2201      	movs	r2, #1
 8002abe:	2100      	movs	r1, #0
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f000 fdc9 	bl	8003658 <TIM_CCxChannelCmd>
      break;
 8002ac6:	e016      	b.n	8002af6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2201      	movs	r2, #1
 8002ace:	2104      	movs	r1, #4
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f000 fdc1 	bl	8003658 <TIM_CCxChannelCmd>
      break;
 8002ad6:	e00e      	b.n	8002af6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2201      	movs	r2, #1
 8002ade:	2100      	movs	r1, #0
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f000 fdb9 	bl	8003658 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2201      	movs	r2, #1
 8002aec:	2104      	movs	r1, #4
 8002aee:	4618      	mov	r0, r3
 8002af0:	f000 fdb2 	bl	8003658 <TIM_CCxChannelCmd>
      break;
 8002af4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f042 0201 	orr.w	r2, r2, #1
 8002b04:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002b06:	2300      	movs	r3, #0
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3710      	adds	r7, #16
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d122      	bne.n	8002b6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d11b      	bne.n	8002b6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f06f 0202 	mvn.w	r2, #2
 8002b3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2201      	movs	r2, #1
 8002b42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	f003 0303 	and.w	r3, r3, #3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 fa77 	bl	8003046 <HAL_TIM_IC_CaptureCallback>
 8002b58:	e005      	b.n	8002b66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 fa69 	bl	8003032 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 fa7a 	bl	800305a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	f003 0304 	and.w	r3, r3, #4
 8002b76:	2b04      	cmp	r3, #4
 8002b78:	d122      	bne.n	8002bc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	f003 0304 	and.w	r3, r3, #4
 8002b84:	2b04      	cmp	r3, #4
 8002b86:	d11b      	bne.n	8002bc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f06f 0204 	mvn.w	r2, #4
 8002b90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2202      	movs	r2, #2
 8002b96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d003      	beq.n	8002bae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 fa4d 	bl	8003046 <HAL_TIM_IC_CaptureCallback>
 8002bac:	e005      	b.n	8002bba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 fa3f 	bl	8003032 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 fa50 	bl	800305a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	f003 0308 	and.w	r3, r3, #8
 8002bca:	2b08      	cmp	r3, #8
 8002bcc:	d122      	bne.n	8002c14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	f003 0308 	and.w	r3, r3, #8
 8002bd8:	2b08      	cmp	r3, #8
 8002bda:	d11b      	bne.n	8002c14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f06f 0208 	mvn.w	r2, #8
 8002be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2204      	movs	r2, #4
 8002bea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	69db      	ldr	r3, [r3, #28]
 8002bf2:	f003 0303 	and.w	r3, r3, #3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 fa23 	bl	8003046 <HAL_TIM_IC_CaptureCallback>
 8002c00:	e005      	b.n	8002c0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 fa15 	bl	8003032 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 fa26 	bl	800305a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	f003 0310 	and.w	r3, r3, #16
 8002c1e:	2b10      	cmp	r3, #16
 8002c20:	d122      	bne.n	8002c68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	f003 0310 	and.w	r3, r3, #16
 8002c2c:	2b10      	cmp	r3, #16
 8002c2e:	d11b      	bne.n	8002c68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f06f 0210 	mvn.w	r2, #16
 8002c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2208      	movs	r2, #8
 8002c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	69db      	ldr	r3, [r3, #28]
 8002c46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d003      	beq.n	8002c56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 f9f9 	bl	8003046 <HAL_TIM_IC_CaptureCallback>
 8002c54:	e005      	b.n	8002c62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 f9eb 	bl	8003032 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f000 f9fc 	bl	800305a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d10e      	bne.n	8002c94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	f003 0301 	and.w	r3, r3, #1
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d107      	bne.n	8002c94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f06f 0201 	mvn.w	r2, #1
 8002c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f7fd ff28 	bl	8000ae4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c9e:	2b80      	cmp	r3, #128	; 0x80
 8002ca0:	d10e      	bne.n	8002cc0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cac:	2b80      	cmp	r3, #128	; 0x80
 8002cae:	d107      	bne.n	8002cc0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 fdca 	bl	8003854 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cca:	2b40      	cmp	r3, #64	; 0x40
 8002ccc:	d10e      	bne.n	8002cec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd8:	2b40      	cmp	r3, #64	; 0x40
 8002cda:	d107      	bne.n	8002cec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 f9c1 	bl	800306e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	f003 0320 	and.w	r3, r3, #32
 8002cf6:	2b20      	cmp	r3, #32
 8002cf8:	d10e      	bne.n	8002d18 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	f003 0320 	and.w	r3, r3, #32
 8002d04:	2b20      	cmp	r3, #32
 8002d06:	d107      	bne.n	8002d18 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f06f 0220 	mvn.w	r2, #32
 8002d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 fd94 	bl	8003840 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d18:	bf00      	nop
 8002d1a:	3708      	adds	r7, #8
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d101      	bne.n	8002d3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	e0ae      	b.n	8002e9c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2b0c      	cmp	r3, #12
 8002d4a:	f200 809f 	bhi.w	8002e8c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002d4e:	a201      	add	r2, pc, #4	; (adr r2, 8002d54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d54:	08002d89 	.word	0x08002d89
 8002d58:	08002e8d 	.word	0x08002e8d
 8002d5c:	08002e8d 	.word	0x08002e8d
 8002d60:	08002e8d 	.word	0x08002e8d
 8002d64:	08002dc9 	.word	0x08002dc9
 8002d68:	08002e8d 	.word	0x08002e8d
 8002d6c:	08002e8d 	.word	0x08002e8d
 8002d70:	08002e8d 	.word	0x08002e8d
 8002d74:	08002e0b 	.word	0x08002e0b
 8002d78:	08002e8d 	.word	0x08002e8d
 8002d7c:	08002e8d 	.word	0x08002e8d
 8002d80:	08002e8d 	.word	0x08002e8d
 8002d84:	08002e4b 	.word	0x08002e4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68b9      	ldr	r1, [r7, #8]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f000 fa18 	bl	80031c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	699a      	ldr	r2, [r3, #24]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f042 0208 	orr.w	r2, r2, #8
 8002da2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	699a      	ldr	r2, [r3, #24]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 0204 	bic.w	r2, r2, #4
 8002db2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6999      	ldr	r1, [r3, #24]
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	691a      	ldr	r2, [r3, #16]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	619a      	str	r2, [r3, #24]
      break;
 8002dc6:	e064      	b.n	8002e92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68b9      	ldr	r1, [r7, #8]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f000 fa68 	bl	80032a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	699a      	ldr	r2, [r3, #24]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002de2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	699a      	ldr	r2, [r3, #24]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002df2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	6999      	ldr	r1, [r3, #24]
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	021a      	lsls	r2, r3, #8
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	430a      	orrs	r2, r1
 8002e06:	619a      	str	r2, [r3, #24]
      break;
 8002e08:	e043      	b.n	8002e92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68b9      	ldr	r1, [r7, #8]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f000 fabd 	bl	8003390 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	69da      	ldr	r2, [r3, #28]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f042 0208 	orr.w	r2, r2, #8
 8002e24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	69da      	ldr	r2, [r3, #28]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f022 0204 	bic.w	r2, r2, #4
 8002e34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	69d9      	ldr	r1, [r3, #28]
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	691a      	ldr	r2, [r3, #16]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	430a      	orrs	r2, r1
 8002e46:	61da      	str	r2, [r3, #28]
      break;
 8002e48:	e023      	b.n	8002e92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68b9      	ldr	r1, [r7, #8]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f000 fb11 	bl	8003478 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	69da      	ldr	r2, [r3, #28]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	69da      	ldr	r2, [r3, #28]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	69d9      	ldr	r1, [r3, #28]
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	021a      	lsls	r2, r3, #8
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	430a      	orrs	r2, r1
 8002e88:	61da      	str	r2, [r3, #28]
      break;
 8002e8a:	e002      	b.n	8002e92 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	75fb      	strb	r3, [r7, #23]
      break;
 8002e90:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3718      	adds	r7, #24
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d101      	bne.n	8002ec0 <HAL_TIM_ConfigClockSource+0x1c>
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	e0b4      	b.n	800302a <HAL_TIM_ConfigClockSource+0x186>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2202      	movs	r2, #2
 8002ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ede:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ee6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68ba      	ldr	r2, [r7, #8]
 8002eee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ef8:	d03e      	beq.n	8002f78 <HAL_TIM_ConfigClockSource+0xd4>
 8002efa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002efe:	f200 8087 	bhi.w	8003010 <HAL_TIM_ConfigClockSource+0x16c>
 8002f02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f06:	f000 8086 	beq.w	8003016 <HAL_TIM_ConfigClockSource+0x172>
 8002f0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f0e:	d87f      	bhi.n	8003010 <HAL_TIM_ConfigClockSource+0x16c>
 8002f10:	2b70      	cmp	r3, #112	; 0x70
 8002f12:	d01a      	beq.n	8002f4a <HAL_TIM_ConfigClockSource+0xa6>
 8002f14:	2b70      	cmp	r3, #112	; 0x70
 8002f16:	d87b      	bhi.n	8003010 <HAL_TIM_ConfigClockSource+0x16c>
 8002f18:	2b60      	cmp	r3, #96	; 0x60
 8002f1a:	d050      	beq.n	8002fbe <HAL_TIM_ConfigClockSource+0x11a>
 8002f1c:	2b60      	cmp	r3, #96	; 0x60
 8002f1e:	d877      	bhi.n	8003010 <HAL_TIM_ConfigClockSource+0x16c>
 8002f20:	2b50      	cmp	r3, #80	; 0x50
 8002f22:	d03c      	beq.n	8002f9e <HAL_TIM_ConfigClockSource+0xfa>
 8002f24:	2b50      	cmp	r3, #80	; 0x50
 8002f26:	d873      	bhi.n	8003010 <HAL_TIM_ConfigClockSource+0x16c>
 8002f28:	2b40      	cmp	r3, #64	; 0x40
 8002f2a:	d058      	beq.n	8002fde <HAL_TIM_ConfigClockSource+0x13a>
 8002f2c:	2b40      	cmp	r3, #64	; 0x40
 8002f2e:	d86f      	bhi.n	8003010 <HAL_TIM_ConfigClockSource+0x16c>
 8002f30:	2b30      	cmp	r3, #48	; 0x30
 8002f32:	d064      	beq.n	8002ffe <HAL_TIM_ConfigClockSource+0x15a>
 8002f34:	2b30      	cmp	r3, #48	; 0x30
 8002f36:	d86b      	bhi.n	8003010 <HAL_TIM_ConfigClockSource+0x16c>
 8002f38:	2b20      	cmp	r3, #32
 8002f3a:	d060      	beq.n	8002ffe <HAL_TIM_ConfigClockSource+0x15a>
 8002f3c:	2b20      	cmp	r3, #32
 8002f3e:	d867      	bhi.n	8003010 <HAL_TIM_ConfigClockSource+0x16c>
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d05c      	beq.n	8002ffe <HAL_TIM_ConfigClockSource+0x15a>
 8002f44:	2b10      	cmp	r3, #16
 8002f46:	d05a      	beq.n	8002ffe <HAL_TIM_ConfigClockSource+0x15a>
 8002f48:	e062      	b.n	8003010 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6818      	ldr	r0, [r3, #0]
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	6899      	ldr	r1, [r3, #8]
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	f000 fb5d 	bl	8003618 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68ba      	ldr	r2, [r7, #8]
 8002f74:	609a      	str	r2, [r3, #8]
      break;
 8002f76:	e04f      	b.n	8003018 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6818      	ldr	r0, [r3, #0]
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	6899      	ldr	r1, [r3, #8]
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685a      	ldr	r2, [r3, #4]
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	f000 fb46 	bl	8003618 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	689a      	ldr	r2, [r3, #8]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f9a:	609a      	str	r2, [r3, #8]
      break;
 8002f9c:	e03c      	b.n	8003018 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6818      	ldr	r0, [r3, #0]
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	6859      	ldr	r1, [r3, #4]
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	461a      	mov	r2, r3
 8002fac:	f000 faba 	bl	8003524 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2150      	movs	r1, #80	; 0x50
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f000 fb13 	bl	80035e2 <TIM_ITRx_SetConfig>
      break;
 8002fbc:	e02c      	b.n	8003018 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6818      	ldr	r0, [r3, #0]
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	6859      	ldr	r1, [r3, #4]
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	461a      	mov	r2, r3
 8002fcc:	f000 fad9 	bl	8003582 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2160      	movs	r1, #96	; 0x60
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f000 fb03 	bl	80035e2 <TIM_ITRx_SetConfig>
      break;
 8002fdc:	e01c      	b.n	8003018 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6818      	ldr	r0, [r3, #0]
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	6859      	ldr	r1, [r3, #4]
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	461a      	mov	r2, r3
 8002fec:	f000 fa9a 	bl	8003524 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2140      	movs	r1, #64	; 0x40
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f000 faf3 	bl	80035e2 <TIM_ITRx_SetConfig>
      break;
 8002ffc:	e00c      	b.n	8003018 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4619      	mov	r1, r3
 8003008:	4610      	mov	r0, r2
 800300a:	f000 faea 	bl	80035e2 <TIM_ITRx_SetConfig>
      break;
 800300e:	e003      	b.n	8003018 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	73fb      	strb	r3, [r7, #15]
      break;
 8003014:	e000      	b.n	8003018 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003016:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003028:	7bfb      	ldrb	r3, [r7, #15]
}
 800302a:	4618      	mov	r0, r3
 800302c:	3710      	adds	r7, #16
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003032:	b480      	push	{r7}
 8003034:	b083      	sub	sp, #12
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr

08003046 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003046:	b480      	push	{r7}
 8003048:	b083      	sub	sp, #12
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800304e:	bf00      	nop
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr

0800305a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800305a:	b480      	push	{r7}
 800305c:	b083      	sub	sp, #12
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003062:	bf00      	nop
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr

0800306e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800306e:	b480      	push	{r7}
 8003070:	b083      	sub	sp, #12
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003076:	bf00      	nop
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
	...

08003084 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003084:	b480      	push	{r7}
 8003086:	b085      	sub	sp, #20
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4a40      	ldr	r2, [pc, #256]	; (8003198 <TIM_Base_SetConfig+0x114>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d013      	beq.n	80030c4 <TIM_Base_SetConfig+0x40>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030a2:	d00f      	beq.n	80030c4 <TIM_Base_SetConfig+0x40>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4a3d      	ldr	r2, [pc, #244]	; (800319c <TIM_Base_SetConfig+0x118>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d00b      	beq.n	80030c4 <TIM_Base_SetConfig+0x40>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a3c      	ldr	r2, [pc, #240]	; (80031a0 <TIM_Base_SetConfig+0x11c>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d007      	beq.n	80030c4 <TIM_Base_SetConfig+0x40>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a3b      	ldr	r2, [pc, #236]	; (80031a4 <TIM_Base_SetConfig+0x120>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d003      	beq.n	80030c4 <TIM_Base_SetConfig+0x40>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4a3a      	ldr	r2, [pc, #232]	; (80031a8 <TIM_Base_SetConfig+0x124>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d108      	bne.n	80030d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a2f      	ldr	r2, [pc, #188]	; (8003198 <TIM_Base_SetConfig+0x114>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d02b      	beq.n	8003136 <TIM_Base_SetConfig+0xb2>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030e4:	d027      	beq.n	8003136 <TIM_Base_SetConfig+0xb2>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a2c      	ldr	r2, [pc, #176]	; (800319c <TIM_Base_SetConfig+0x118>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d023      	beq.n	8003136 <TIM_Base_SetConfig+0xb2>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a2b      	ldr	r2, [pc, #172]	; (80031a0 <TIM_Base_SetConfig+0x11c>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d01f      	beq.n	8003136 <TIM_Base_SetConfig+0xb2>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a2a      	ldr	r2, [pc, #168]	; (80031a4 <TIM_Base_SetConfig+0x120>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d01b      	beq.n	8003136 <TIM_Base_SetConfig+0xb2>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a29      	ldr	r2, [pc, #164]	; (80031a8 <TIM_Base_SetConfig+0x124>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d017      	beq.n	8003136 <TIM_Base_SetConfig+0xb2>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a28      	ldr	r2, [pc, #160]	; (80031ac <TIM_Base_SetConfig+0x128>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d013      	beq.n	8003136 <TIM_Base_SetConfig+0xb2>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a27      	ldr	r2, [pc, #156]	; (80031b0 <TIM_Base_SetConfig+0x12c>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d00f      	beq.n	8003136 <TIM_Base_SetConfig+0xb2>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a26      	ldr	r2, [pc, #152]	; (80031b4 <TIM_Base_SetConfig+0x130>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d00b      	beq.n	8003136 <TIM_Base_SetConfig+0xb2>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a25      	ldr	r2, [pc, #148]	; (80031b8 <TIM_Base_SetConfig+0x134>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d007      	beq.n	8003136 <TIM_Base_SetConfig+0xb2>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a24      	ldr	r2, [pc, #144]	; (80031bc <TIM_Base_SetConfig+0x138>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d003      	beq.n	8003136 <TIM_Base_SetConfig+0xb2>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a23      	ldr	r2, [pc, #140]	; (80031c0 <TIM_Base_SetConfig+0x13c>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d108      	bne.n	8003148 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800313c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	4313      	orrs	r3, r2
 8003146:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	4313      	orrs	r3, r2
 8003154:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a0a      	ldr	r2, [pc, #40]	; (8003198 <TIM_Base_SetConfig+0x114>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d003      	beq.n	800317c <TIM_Base_SetConfig+0xf8>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a0c      	ldr	r2, [pc, #48]	; (80031a8 <TIM_Base_SetConfig+0x124>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d103      	bne.n	8003184 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	691a      	ldr	r2, [r3, #16]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	615a      	str	r2, [r3, #20]
}
 800318a:	bf00      	nop
 800318c:	3714      	adds	r7, #20
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	40010000 	.word	0x40010000
 800319c:	40000400 	.word	0x40000400
 80031a0:	40000800 	.word	0x40000800
 80031a4:	40000c00 	.word	0x40000c00
 80031a8:	40010400 	.word	0x40010400
 80031ac:	40014000 	.word	0x40014000
 80031b0:	40014400 	.word	0x40014400
 80031b4:	40014800 	.word	0x40014800
 80031b8:	40001800 	.word	0x40001800
 80031bc:	40001c00 	.word	0x40001c00
 80031c0:	40002000 	.word	0x40002000

080031c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b087      	sub	sp, #28
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	f023 0201 	bic.w	r2, r3, #1
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f023 0303 	bic.w	r3, r3, #3
 80031fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	4313      	orrs	r3, r2
 8003204:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	f023 0302 	bic.w	r3, r3, #2
 800320c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	697a      	ldr	r2, [r7, #20]
 8003214:	4313      	orrs	r3, r2
 8003216:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a20      	ldr	r2, [pc, #128]	; (800329c <TIM_OC1_SetConfig+0xd8>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d003      	beq.n	8003228 <TIM_OC1_SetConfig+0x64>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a1f      	ldr	r2, [pc, #124]	; (80032a0 <TIM_OC1_SetConfig+0xdc>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d10c      	bne.n	8003242 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	f023 0308 	bic.w	r3, r3, #8
 800322e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	697a      	ldr	r2, [r7, #20]
 8003236:	4313      	orrs	r3, r2
 8003238:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	f023 0304 	bic.w	r3, r3, #4
 8003240:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a15      	ldr	r2, [pc, #84]	; (800329c <TIM_OC1_SetConfig+0xd8>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d003      	beq.n	8003252 <TIM_OC1_SetConfig+0x8e>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a14      	ldr	r2, [pc, #80]	; (80032a0 <TIM_OC1_SetConfig+0xdc>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d111      	bne.n	8003276 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003258:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003260:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	4313      	orrs	r3, r2
 800326a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	693a      	ldr	r2, [r7, #16]
 8003272:	4313      	orrs	r3, r2
 8003274:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	693a      	ldr	r2, [r7, #16]
 800327a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	685a      	ldr	r2, [r3, #4]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	697a      	ldr	r2, [r7, #20]
 800328e:	621a      	str	r2, [r3, #32]
}
 8003290:	bf00      	nop
 8003292:	371c      	adds	r7, #28
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr
 800329c:	40010000 	.word	0x40010000
 80032a0:	40010400 	.word	0x40010400

080032a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b087      	sub	sp, #28
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	f023 0210 	bic.w	r2, r3, #16
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	021b      	lsls	r3, r3, #8
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	f023 0320 	bic.w	r3, r3, #32
 80032ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	011b      	lsls	r3, r3, #4
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a22      	ldr	r2, [pc, #136]	; (8003388 <TIM_OC2_SetConfig+0xe4>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d003      	beq.n	800330c <TIM_OC2_SetConfig+0x68>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a21      	ldr	r2, [pc, #132]	; (800338c <TIM_OC2_SetConfig+0xe8>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d10d      	bne.n	8003328 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003312:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	011b      	lsls	r3, r3, #4
 800331a:	697a      	ldr	r2, [r7, #20]
 800331c:	4313      	orrs	r3, r2
 800331e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003326:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a17      	ldr	r2, [pc, #92]	; (8003388 <TIM_OC2_SetConfig+0xe4>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d003      	beq.n	8003338 <TIM_OC2_SetConfig+0x94>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a16      	ldr	r2, [pc, #88]	; (800338c <TIM_OC2_SetConfig+0xe8>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d113      	bne.n	8003360 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800333e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003346:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	695b      	ldr	r3, [r3, #20]
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	4313      	orrs	r3, r2
 8003352:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	4313      	orrs	r3, r2
 800335e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685a      	ldr	r2, [r3, #4]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	621a      	str	r2, [r3, #32]
}
 800337a:	bf00      	nop
 800337c:	371c      	adds	r7, #28
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	40010000 	.word	0x40010000
 800338c:	40010400 	.word	0x40010400

08003390 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003390:	b480      	push	{r7}
 8003392:	b087      	sub	sp, #28
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f023 0303 	bic.w	r3, r3, #3
 80033c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	021b      	lsls	r3, r3, #8
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a21      	ldr	r2, [pc, #132]	; (8003470 <TIM_OC3_SetConfig+0xe0>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d003      	beq.n	80033f6 <TIM_OC3_SetConfig+0x66>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a20      	ldr	r2, [pc, #128]	; (8003474 <TIM_OC3_SetConfig+0xe4>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d10d      	bne.n	8003412 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	021b      	lsls	r3, r3, #8
 8003404:	697a      	ldr	r2, [r7, #20]
 8003406:	4313      	orrs	r3, r2
 8003408:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003410:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a16      	ldr	r2, [pc, #88]	; (8003470 <TIM_OC3_SetConfig+0xe0>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d003      	beq.n	8003422 <TIM_OC3_SetConfig+0x92>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a15      	ldr	r2, [pc, #84]	; (8003474 <TIM_OC3_SetConfig+0xe4>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d113      	bne.n	800344a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003428:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003430:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	011b      	lsls	r3, r3, #4
 8003438:	693a      	ldr	r2, [r7, #16]
 800343a:	4313      	orrs	r3, r2
 800343c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	011b      	lsls	r3, r3, #4
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	4313      	orrs	r3, r2
 8003448:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685a      	ldr	r2, [r3, #4]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	697a      	ldr	r2, [r7, #20]
 8003462:	621a      	str	r2, [r3, #32]
}
 8003464:	bf00      	nop
 8003466:	371c      	adds	r7, #28
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	40010000 	.word	0x40010000
 8003474:	40010400 	.word	0x40010400

08003478 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003478:	b480      	push	{r7}
 800347a:	b087      	sub	sp, #28
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	69db      	ldr	r3, [r3, #28]
 800349e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	021b      	lsls	r3, r3, #8
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	031b      	lsls	r3, r3, #12
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4a12      	ldr	r2, [pc, #72]	; (800351c <TIM_OC4_SetConfig+0xa4>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d003      	beq.n	80034e0 <TIM_OC4_SetConfig+0x68>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a11      	ldr	r2, [pc, #68]	; (8003520 <TIM_OC4_SetConfig+0xa8>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d109      	bne.n	80034f4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	695b      	ldr	r3, [r3, #20]
 80034ec:	019b      	lsls	r3, r3, #6
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685a      	ldr	r2, [r3, #4]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	621a      	str	r2, [r3, #32]
}
 800350e:	bf00      	nop
 8003510:	371c      	adds	r7, #28
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	40010000 	.word	0x40010000
 8003520:	40010400 	.word	0x40010400

08003524 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003524:	b480      	push	{r7}
 8003526:	b087      	sub	sp, #28
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6a1b      	ldr	r3, [r3, #32]
 8003534:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	f023 0201 	bic.w	r2, r3, #1
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800354e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	011b      	lsls	r3, r3, #4
 8003554:	693a      	ldr	r2, [r7, #16]
 8003556:	4313      	orrs	r3, r2
 8003558:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	f023 030a 	bic.w	r3, r3, #10
 8003560:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003562:	697a      	ldr	r2, [r7, #20]
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	4313      	orrs	r3, r2
 8003568:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	621a      	str	r2, [r3, #32]
}
 8003576:	bf00      	nop
 8003578:	371c      	adds	r7, #28
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr

08003582 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003582:	b480      	push	{r7}
 8003584:	b087      	sub	sp, #28
 8003586:	af00      	add	r7, sp, #0
 8003588:	60f8      	str	r0, [r7, #12]
 800358a:	60b9      	str	r1, [r7, #8]
 800358c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	f023 0210 	bic.w	r2, r3, #16
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6a1b      	ldr	r3, [r3, #32]
 80035a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	031b      	lsls	r3, r3, #12
 80035b2:	697a      	ldr	r2, [r7, #20]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	011b      	lsls	r3, r3, #4
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	621a      	str	r2, [r3, #32]
}
 80035d6:	bf00      	nop
 80035d8:	371c      	adds	r7, #28
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr

080035e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035e2:	b480      	push	{r7}
 80035e4:	b085      	sub	sp, #20
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
 80035ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	4313      	orrs	r3, r2
 8003600:	f043 0307 	orr.w	r3, r3, #7
 8003604:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	609a      	str	r2, [r3, #8]
}
 800360c:	bf00      	nop
 800360e:	3714      	adds	r7, #20
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003618:	b480      	push	{r7}
 800361a:	b087      	sub	sp, #28
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
 8003624:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003632:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	021a      	lsls	r2, r3, #8
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	431a      	orrs	r2, r3
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	4313      	orrs	r3, r2
 8003640:	697a      	ldr	r2, [r7, #20]
 8003642:	4313      	orrs	r3, r2
 8003644:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	697a      	ldr	r2, [r7, #20]
 800364a:	609a      	str	r2, [r3, #8]
}
 800364c:	bf00      	nop
 800364e:	371c      	adds	r7, #28
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003658:	b480      	push	{r7}
 800365a:	b087      	sub	sp, #28
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	f003 031f 	and.w	r3, r3, #31
 800366a:	2201      	movs	r2, #1
 800366c:	fa02 f303 	lsl.w	r3, r2, r3
 8003670:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6a1a      	ldr	r2, [r3, #32]
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	43db      	mvns	r3, r3
 800367a:	401a      	ands	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6a1a      	ldr	r2, [r3, #32]
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	f003 031f 	and.w	r3, r3, #31
 800368a:	6879      	ldr	r1, [r7, #4]
 800368c:	fa01 f303 	lsl.w	r3, r1, r3
 8003690:	431a      	orrs	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	621a      	str	r2, [r3, #32]
}
 8003696:	bf00      	nop
 8003698:	371c      	adds	r7, #28
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
	...

080036a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d101      	bne.n	80036bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036b8:	2302      	movs	r3, #2
 80036ba:	e05a      	b.n	8003772 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2202      	movs	r2, #2
 80036c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a21      	ldr	r2, [pc, #132]	; (8003780 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d022      	beq.n	8003746 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003708:	d01d      	beq.n	8003746 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a1d      	ldr	r2, [pc, #116]	; (8003784 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d018      	beq.n	8003746 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a1b      	ldr	r2, [pc, #108]	; (8003788 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d013      	beq.n	8003746 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a1a      	ldr	r2, [pc, #104]	; (800378c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d00e      	beq.n	8003746 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a18      	ldr	r2, [pc, #96]	; (8003790 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d009      	beq.n	8003746 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a17      	ldr	r2, [pc, #92]	; (8003794 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d004      	beq.n	8003746 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a15      	ldr	r2, [pc, #84]	; (8003798 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d10c      	bne.n	8003760 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800374c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	68ba      	ldr	r2, [r7, #8]
 8003754:	4313      	orrs	r3, r2
 8003756:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68ba      	ldr	r2, [r7, #8]
 800375e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3714      	adds	r7, #20
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	40010000 	.word	0x40010000
 8003784:	40000400 	.word	0x40000400
 8003788:	40000800 	.word	0x40000800
 800378c:	40000c00 	.word	0x40000c00
 8003790:	40010400 	.word	0x40010400
 8003794:	40014000 	.word	0x40014000
 8003798:	40001800 	.word	0x40001800

0800379c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80037a6:	2300      	movs	r3, #0
 80037a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d101      	bne.n	80037b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80037b4:	2302      	movs	r3, #2
 80037b6:	e03d      	b.n	8003834 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	4313      	orrs	r3, r2
 80037da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	4313      	orrs	r3, r2
 8003804:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	695b      	ldr	r3, [r3, #20]
 8003810:	4313      	orrs	r3, r2
 8003812:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	69db      	ldr	r3, [r3, #28]
 800381e:	4313      	orrs	r3, r2
 8003820:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3714      	adds	r7, #20
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e03f      	b.n	80038fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b00      	cmp	r3, #0
 8003884:	d106      	bne.n	8003894 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f7fd fc80 	bl	8001194 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2224      	movs	r2, #36	; 0x24
 8003898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68da      	ldr	r2, [r3, #12]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 fddb 	bl	8004468 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	691a      	ldr	r2, [r3, #16]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	695a      	ldr	r2, [r3, #20]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68da      	ldr	r2, [r3, #12]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2220      	movs	r2, #32
 80038ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2220      	movs	r2, #32
 80038f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3708      	adds	r7, #8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b08a      	sub	sp, #40	; 0x28
 8003906:	af02      	add	r7, sp, #8
 8003908:	60f8      	str	r0, [r7, #12]
 800390a:	60b9      	str	r1, [r7, #8]
 800390c:	603b      	str	r3, [r7, #0]
 800390e:	4613      	mov	r3, r2
 8003910:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003912:	2300      	movs	r3, #0
 8003914:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b20      	cmp	r3, #32
 8003920:	d17c      	bne.n	8003a1c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d002      	beq.n	800392e <HAL_UART_Transmit+0x2c>
 8003928:	88fb      	ldrh	r3, [r7, #6]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e075      	b.n	8003a1e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003938:	2b01      	cmp	r3, #1
 800393a:	d101      	bne.n	8003940 <HAL_UART_Transmit+0x3e>
 800393c:	2302      	movs	r3, #2
 800393e:	e06e      	b.n	8003a1e <HAL_UART_Transmit+0x11c>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2221      	movs	r2, #33	; 0x21
 8003952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003956:	f7fd fcfd 	bl	8001354 <HAL_GetTick>
 800395a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	88fa      	ldrh	r2, [r7, #6]
 8003960:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	88fa      	ldrh	r2, [r7, #6]
 8003966:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003970:	d108      	bne.n	8003984 <HAL_UART_Transmit+0x82>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d104      	bne.n	8003984 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800397a:	2300      	movs	r3, #0
 800397c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	61bb      	str	r3, [r7, #24]
 8003982:	e003      	b.n	800398c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003988:	2300      	movs	r3, #0
 800398a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003994:	e02a      	b.n	80039ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	9300      	str	r3, [sp, #0]
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	2200      	movs	r2, #0
 800399e:	2180      	movs	r1, #128	; 0x80
 80039a0:	68f8      	ldr	r0, [r7, #12]
 80039a2:	f000 fb1f 	bl	8003fe4 <UART_WaitOnFlagUntilTimeout>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d001      	beq.n	80039b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e036      	b.n	8003a1e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d10b      	bne.n	80039ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	881b      	ldrh	r3, [r3, #0]
 80039ba:	461a      	mov	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	3302      	adds	r3, #2
 80039ca:	61bb      	str	r3, [r7, #24]
 80039cc:	e007      	b.n	80039de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	781a      	ldrb	r2, [r3, #0]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	3301      	adds	r3, #1
 80039dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	3b01      	subs	r3, #1
 80039e6:	b29a      	uxth	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1cf      	bne.n	8003996 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	9300      	str	r3, [sp, #0]
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	2200      	movs	r2, #0
 80039fe:	2140      	movs	r1, #64	; 0x40
 8003a00:	68f8      	ldr	r0, [r7, #12]
 8003a02:	f000 faef 	bl	8003fe4 <UART_WaitOnFlagUntilTimeout>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d001      	beq.n	8003a10 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e006      	b.n	8003a1e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2220      	movs	r2, #32
 8003a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	e000      	b.n	8003a1e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003a1c:	2302      	movs	r3, #2
  }
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3720      	adds	r7, #32
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b084      	sub	sp, #16
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	60f8      	str	r0, [r7, #12]
 8003a2e:	60b9      	str	r1, [r7, #8]
 8003a30:	4613      	mov	r3, r2
 8003a32:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	2b20      	cmp	r3, #32
 8003a3e:	d11d      	bne.n	8003a7c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d002      	beq.n	8003a4c <HAL_UART_Receive_IT+0x26>
 8003a46:	88fb      	ldrh	r3, [r7, #6]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d101      	bne.n	8003a50 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e016      	b.n	8003a7e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d101      	bne.n	8003a5e <HAL_UART_Receive_IT+0x38>
 8003a5a:	2302      	movs	r3, #2
 8003a5c:	e00f      	b.n	8003a7e <HAL_UART_Receive_IT+0x58>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2201      	movs	r2, #1
 8003a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003a6c:	88fb      	ldrh	r3, [r7, #6]
 8003a6e:	461a      	mov	r2, r3
 8003a70:	68b9      	ldr	r1, [r7, #8]
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	f000 fb24 	bl	80040c0 <UART_Start_Receive_IT>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	e000      	b.n	8003a7e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003a7c:	2302      	movs	r3, #2
  }
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
	...

08003a88 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b0ba      	sub	sp, #232	; 0xe8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003abe:	f003 030f 	and.w	r3, r3, #15
 8003ac2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003ac6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10f      	bne.n	8003aee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ad2:	f003 0320 	and.w	r3, r3, #32
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d009      	beq.n	8003aee <HAL_UART_IRQHandler+0x66>
 8003ada:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ade:	f003 0320 	and.w	r3, r3, #32
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d003      	beq.n	8003aee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 fc03 	bl	80042f2 <UART_Receive_IT>
      return;
 8003aec:	e256      	b.n	8003f9c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003aee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	f000 80de 	beq.w	8003cb4 <HAL_UART_IRQHandler+0x22c>
 8003af8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d106      	bne.n	8003b12 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b08:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f000 80d1 	beq.w	8003cb4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00b      	beq.n	8003b36 <HAL_UART_IRQHandler+0xae>
 8003b1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d005      	beq.n	8003b36 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2e:	f043 0201 	orr.w	r2, r3, #1
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b3a:	f003 0304 	and.w	r3, r3, #4
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00b      	beq.n	8003b5a <HAL_UART_IRQHandler+0xd2>
 8003b42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d005      	beq.n	8003b5a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b52:	f043 0202 	orr.w	r2, r3, #2
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00b      	beq.n	8003b7e <HAL_UART_IRQHandler+0xf6>
 8003b66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d005      	beq.n	8003b7e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b76:	f043 0204 	orr.w	r2, r3, #4
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b82:	f003 0308 	and.w	r3, r3, #8
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d011      	beq.n	8003bae <HAL_UART_IRQHandler+0x126>
 8003b8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b8e:	f003 0320 	and.w	r3, r3, #32
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d105      	bne.n	8003ba2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d005      	beq.n	8003bae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	f043 0208 	orr.w	r2, r3, #8
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f000 81ed 	beq.w	8003f92 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bbc:	f003 0320 	and.w	r3, r3, #32
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d008      	beq.n	8003bd6 <HAL_UART_IRQHandler+0x14e>
 8003bc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bc8:	f003 0320 	and.w	r3, r3, #32
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d002      	beq.n	8003bd6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 fb8e 	bl	80042f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	695b      	ldr	r3, [r3, #20]
 8003bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be0:	2b40      	cmp	r3, #64	; 0x40
 8003be2:	bf0c      	ite	eq
 8003be4:	2301      	moveq	r3, #1
 8003be6:	2300      	movne	r3, #0
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf2:	f003 0308 	and.w	r3, r3, #8
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d103      	bne.n	8003c02 <HAL_UART_IRQHandler+0x17a>
 8003bfa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d04f      	beq.n	8003ca2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 fa96 	bl	8004134 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c12:	2b40      	cmp	r3, #64	; 0x40
 8003c14:	d141      	bne.n	8003c9a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	3314      	adds	r3, #20
 8003c1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c24:	e853 3f00 	ldrex	r3, [r3]
 8003c28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003c2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	3314      	adds	r3, #20
 8003c3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003c42:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003c46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003c4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003c52:	e841 2300 	strex	r3, r2, [r1]
 8003c56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003c5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1d9      	bne.n	8003c16 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d013      	beq.n	8003c92 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6e:	4a7d      	ldr	r2, [pc, #500]	; (8003e64 <HAL_UART_IRQHandler+0x3dc>)
 8003c70:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7fd fcf9 	bl	800166e <HAL_DMA_Abort_IT>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d016      	beq.n	8003cb0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c8c:	4610      	mov	r0, r2
 8003c8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c90:	e00e      	b.n	8003cb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 f990 	bl	8003fb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c98:	e00a      	b.n	8003cb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f98c 	bl	8003fb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ca0:	e006      	b.n	8003cb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f988 	bl	8003fb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003cae:	e170      	b.n	8003f92 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cb0:	bf00      	nop
    return;
 8003cb2:	e16e      	b.n	8003f92 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	f040 814a 	bne.w	8003f52 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cc2:	f003 0310 	and.w	r3, r3, #16
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	f000 8143 	beq.w	8003f52 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cd0:	f003 0310 	and.w	r3, r3, #16
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f000 813c 	beq.w	8003f52 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003cda:	2300      	movs	r3, #0
 8003cdc:	60bb      	str	r3, [r7, #8]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	60bb      	str	r3, [r7, #8]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	60bb      	str	r3, [r7, #8]
 8003cee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cfa:	2b40      	cmp	r3, #64	; 0x40
 8003cfc:	f040 80b4 	bne.w	8003e68 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d0c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	f000 8140 	beq.w	8003f96 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	f080 8139 	bcs.w	8003f96 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d2a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d30:	69db      	ldr	r3, [r3, #28]
 8003d32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d36:	f000 8088 	beq.w	8003e4a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	330c      	adds	r3, #12
 8003d40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d48:	e853 3f00 	ldrex	r3, [r3]
 8003d4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003d50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	330c      	adds	r3, #12
 8003d62:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003d66:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003d72:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d76:	e841 2300 	strex	r3, r2, [r1]
 8003d7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003d7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1d9      	bne.n	8003d3a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	3314      	adds	r3, #20
 8003d8c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d90:	e853 3f00 	ldrex	r3, [r3]
 8003d94:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003d96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d98:	f023 0301 	bic.w	r3, r3, #1
 8003d9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	3314      	adds	r3, #20
 8003da6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003daa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003dae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003db2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003db6:	e841 2300 	strex	r3, r2, [r1]
 8003dba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003dbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1e1      	bne.n	8003d86 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	3314      	adds	r3, #20
 8003dc8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003dcc:	e853 3f00 	ldrex	r3, [r3]
 8003dd0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003dd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	3314      	adds	r3, #20
 8003de2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003de6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003de8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003dec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003dee:	e841 2300 	strex	r3, r2, [r1]
 8003df2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003df4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1e3      	bne.n	8003dc2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2220      	movs	r2, #32
 8003dfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	330c      	adds	r3, #12
 8003e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e12:	e853 3f00 	ldrex	r3, [r3]
 8003e16:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003e18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e1a:	f023 0310 	bic.w	r3, r3, #16
 8003e1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	330c      	adds	r3, #12
 8003e28:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003e2c:	65ba      	str	r2, [r7, #88]	; 0x58
 8003e2e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e32:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e34:	e841 2300 	strex	r3, r2, [r1]
 8003e38:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003e3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1e3      	bne.n	8003e08 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7fd fba2 	bl	800158e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	4619      	mov	r1, r3
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f8b6 	bl	8003fcc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e60:	e099      	b.n	8003f96 <HAL_UART_IRQHandler+0x50e>
 8003e62:	bf00      	nop
 8003e64:	080041fb 	.word	0x080041fb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	f000 808b 	beq.w	8003f9a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003e84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	f000 8086 	beq.w	8003f9a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	330c      	adds	r3, #12
 8003e94:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e98:	e853 3f00 	ldrex	r3, [r3]
 8003e9c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ea0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ea4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	330c      	adds	r3, #12
 8003eae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003eb2:	647a      	str	r2, [r7, #68]	; 0x44
 8003eb4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003eb8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003eba:	e841 2300 	strex	r3, r2, [r1]
 8003ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1e3      	bne.n	8003e8e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	3314      	adds	r3, #20
 8003ecc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed0:	e853 3f00 	ldrex	r3, [r3]
 8003ed4:	623b      	str	r3, [r7, #32]
   return(result);
 8003ed6:	6a3b      	ldr	r3, [r7, #32]
 8003ed8:	f023 0301 	bic.w	r3, r3, #1
 8003edc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	3314      	adds	r3, #20
 8003ee6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003eea:	633a      	str	r2, [r7, #48]	; 0x30
 8003eec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ef0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ef2:	e841 2300 	strex	r3, r2, [r1]
 8003ef6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1e3      	bne.n	8003ec6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2220      	movs	r2, #32
 8003f02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	330c      	adds	r3, #12
 8003f12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	e853 3f00 	ldrex	r3, [r3]
 8003f1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f023 0310 	bic.w	r3, r3, #16
 8003f22:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	330c      	adds	r3, #12
 8003f2c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003f30:	61fa      	str	r2, [r7, #28]
 8003f32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f34:	69b9      	ldr	r1, [r7, #24]
 8003f36:	69fa      	ldr	r2, [r7, #28]
 8003f38:	e841 2300 	strex	r3, r2, [r1]
 8003f3c:	617b      	str	r3, [r7, #20]
   return(result);
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d1e3      	bne.n	8003f0c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f48:	4619      	mov	r1, r3
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 f83e 	bl	8003fcc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f50:	e023      	b.n	8003f9a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d009      	beq.n	8003f72 <HAL_UART_IRQHandler+0x4ea>
 8003f5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d003      	beq.n	8003f72 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 f959 	bl	8004222 <UART_Transmit_IT>
    return;
 8003f70:	e014      	b.n	8003f9c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00e      	beq.n	8003f9c <HAL_UART_IRQHandler+0x514>
 8003f7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d008      	beq.n	8003f9c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f000 f999 	bl	80042c2 <UART_EndTransmit_IT>
    return;
 8003f90:	e004      	b.n	8003f9c <HAL_UART_IRQHandler+0x514>
    return;
 8003f92:	bf00      	nop
 8003f94:	e002      	b.n	8003f9c <HAL_UART_IRQHandler+0x514>
      return;
 8003f96:	bf00      	nop
 8003f98:	e000      	b.n	8003f9c <HAL_UART_IRQHandler+0x514>
      return;
 8003f9a:	bf00      	nop
  }
}
 8003f9c:	37e8      	adds	r7, #232	; 0xe8
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop

08003fa4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003fac:	bf00      	nop
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003fc0:	bf00      	nop
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b090      	sub	sp, #64	; 0x40
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	603b      	str	r3, [r7, #0]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ff4:	e050      	b.n	8004098 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ff6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ffc:	d04c      	beq.n	8004098 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ffe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004000:	2b00      	cmp	r3, #0
 8004002:	d007      	beq.n	8004014 <UART_WaitOnFlagUntilTimeout+0x30>
 8004004:	f7fd f9a6 	bl	8001354 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004010:	429a      	cmp	r2, r3
 8004012:	d241      	bcs.n	8004098 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	330c      	adds	r3, #12
 800401a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401e:	e853 3f00 	ldrex	r3, [r3]
 8004022:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004026:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800402a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	330c      	adds	r3, #12
 8004032:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004034:	637a      	str	r2, [r7, #52]	; 0x34
 8004036:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004038:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800403a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800403c:	e841 2300 	strex	r3, r2, [r1]
 8004040:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1e5      	bne.n	8004014 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	3314      	adds	r3, #20
 800404e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	e853 3f00 	ldrex	r3, [r3]
 8004056:	613b      	str	r3, [r7, #16]
   return(result);
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	f023 0301 	bic.w	r3, r3, #1
 800405e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	3314      	adds	r3, #20
 8004066:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004068:	623a      	str	r2, [r7, #32]
 800406a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406c:	69f9      	ldr	r1, [r7, #28]
 800406e:	6a3a      	ldr	r2, [r7, #32]
 8004070:	e841 2300 	strex	r3, r2, [r1]
 8004074:	61bb      	str	r3, [r7, #24]
   return(result);
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d1e5      	bne.n	8004048 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2220      	movs	r2, #32
 8004080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2220      	movs	r2, #32
 8004088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e00f      	b.n	80040b8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	4013      	ands	r3, r2
 80040a2:	68ba      	ldr	r2, [r7, #8]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	bf0c      	ite	eq
 80040a8:	2301      	moveq	r3, #1
 80040aa:	2300      	movne	r3, #0
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	461a      	mov	r2, r3
 80040b0:	79fb      	ldrb	r3, [r7, #7]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d09f      	beq.n	8003ff6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3740      	adds	r7, #64	; 0x40
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	4613      	mov	r3, r2
 80040cc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	68ba      	ldr	r2, [r7, #8]
 80040d2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	88fa      	ldrh	r2, [r7, #6]
 80040d8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	88fa      	ldrh	r2, [r7, #6]
 80040de:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2200      	movs	r2, #0
 80040e4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2222      	movs	r2, #34	; 0x22
 80040ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68da      	ldr	r2, [r3, #12]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004104:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	695a      	ldr	r2, [r3, #20]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f042 0201 	orr.w	r2, r2, #1
 8004114:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68da      	ldr	r2, [r3, #12]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f042 0220 	orr.w	r2, r2, #32
 8004124:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	3714      	adds	r7, #20
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004134:	b480      	push	{r7}
 8004136:	b095      	sub	sp, #84	; 0x54
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	330c      	adds	r3, #12
 8004142:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004146:	e853 3f00 	ldrex	r3, [r3]
 800414a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800414c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800414e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004152:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	330c      	adds	r3, #12
 800415a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800415c:	643a      	str	r2, [r7, #64]	; 0x40
 800415e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004160:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004162:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004164:	e841 2300 	strex	r3, r2, [r1]
 8004168:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800416a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1e5      	bne.n	800413c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	3314      	adds	r3, #20
 8004176:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004178:	6a3b      	ldr	r3, [r7, #32]
 800417a:	e853 3f00 	ldrex	r3, [r3]
 800417e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	f023 0301 	bic.w	r3, r3, #1
 8004186:	64bb      	str	r3, [r7, #72]	; 0x48
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	3314      	adds	r3, #20
 800418e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004190:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004192:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004194:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004196:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004198:	e841 2300 	strex	r3, r2, [r1]
 800419c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800419e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1e5      	bne.n	8004170 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d119      	bne.n	80041e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	330c      	adds	r3, #12
 80041b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	e853 3f00 	ldrex	r3, [r3]
 80041ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	f023 0310 	bic.w	r3, r3, #16
 80041c2:	647b      	str	r3, [r7, #68]	; 0x44
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	330c      	adds	r3, #12
 80041ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041cc:	61ba      	str	r2, [r7, #24]
 80041ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d0:	6979      	ldr	r1, [r7, #20]
 80041d2:	69ba      	ldr	r2, [r7, #24]
 80041d4:	e841 2300 	strex	r3, r2, [r1]
 80041d8:	613b      	str	r3, [r7, #16]
   return(result);
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d1e5      	bne.n	80041ac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2220      	movs	r2, #32
 80041e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	631a      	str	r2, [r3, #48]	; 0x30
}
 80041ee:	bf00      	nop
 80041f0:	3754      	adds	r7, #84	; 0x54
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr

080041fa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041fa:	b580      	push	{r7, lr}
 80041fc:	b084      	sub	sp, #16
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004206:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2200      	movs	r2, #0
 800420c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004214:	68f8      	ldr	r0, [r7, #12]
 8004216:	f7ff fecf 	bl	8003fb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800421a:	bf00      	nop
 800421c:	3710      	adds	r7, #16
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}

08004222 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004222:	b480      	push	{r7}
 8004224:	b085      	sub	sp, #20
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b21      	cmp	r3, #33	; 0x21
 8004234:	d13e      	bne.n	80042b4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800423e:	d114      	bne.n	800426a <UART_Transmit_IT+0x48>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d110      	bne.n	800426a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a1b      	ldr	r3, [r3, #32]
 800424c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	881b      	ldrh	r3, [r3, #0]
 8004252:	461a      	mov	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800425c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	1c9a      	adds	r2, r3, #2
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	621a      	str	r2, [r3, #32]
 8004268:	e008      	b.n	800427c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a1b      	ldr	r3, [r3, #32]
 800426e:	1c59      	adds	r1, r3, #1
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	6211      	str	r1, [r2, #32]
 8004274:	781a      	ldrb	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004280:	b29b      	uxth	r3, r3
 8004282:	3b01      	subs	r3, #1
 8004284:	b29b      	uxth	r3, r3
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	4619      	mov	r1, r3
 800428a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800428c:	2b00      	cmp	r3, #0
 800428e:	d10f      	bne.n	80042b0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68da      	ldr	r2, [r3, #12]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800429e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68da      	ldr	r2, [r3, #12]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042ae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80042b0:	2300      	movs	r3, #0
 80042b2:	e000      	b.n	80042b6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80042b4:	2302      	movs	r3, #2
  }
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3714      	adds	r7, #20
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr

080042c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b082      	sub	sp, #8
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68da      	ldr	r2, [r3, #12]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2220      	movs	r2, #32
 80042de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f7ff fe5e 	bl	8003fa4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3708      	adds	r7, #8
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b08c      	sub	sp, #48	; 0x30
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b22      	cmp	r3, #34	; 0x22
 8004304:	f040 80ab 	bne.w	800445e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004310:	d117      	bne.n	8004342 <UART_Receive_IT+0x50>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d113      	bne.n	8004342 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800431a:	2300      	movs	r3, #0
 800431c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004322:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	b29b      	uxth	r3, r3
 800432c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004330:	b29a      	uxth	r2, r3
 8004332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004334:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800433a:	1c9a      	adds	r2, r3, #2
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	629a      	str	r2, [r3, #40]	; 0x28
 8004340:	e026      	b.n	8004390 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004346:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004348:	2300      	movs	r3, #0
 800434a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004354:	d007      	beq.n	8004366 <UART_Receive_IT+0x74>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d10a      	bne.n	8004374 <UART_Receive_IT+0x82>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d106      	bne.n	8004374 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	b2da      	uxtb	r2, r3
 800436e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004370:	701a      	strb	r2, [r3, #0]
 8004372:	e008      	b.n	8004386 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	b2db      	uxtb	r3, r3
 800437c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004380:	b2da      	uxtb	r2, r3
 8004382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004384:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800438a:	1c5a      	adds	r2, r3, #1
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004394:	b29b      	uxth	r3, r3
 8004396:	3b01      	subs	r3, #1
 8004398:	b29b      	uxth	r3, r3
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	4619      	mov	r1, r3
 800439e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d15a      	bne.n	800445a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68da      	ldr	r2, [r3, #12]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f022 0220 	bic.w	r2, r2, #32
 80043b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68da      	ldr	r2, [r3, #12]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	695a      	ldr	r2, [r3, #20]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f022 0201 	bic.w	r2, r2, #1
 80043d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2220      	movs	r2, #32
 80043d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d135      	bne.n	8004450 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	330c      	adds	r3, #12
 80043f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	e853 3f00 	ldrex	r3, [r3]
 80043f8:	613b      	str	r3, [r7, #16]
   return(result);
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	f023 0310 	bic.w	r3, r3, #16
 8004400:	627b      	str	r3, [r7, #36]	; 0x24
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	330c      	adds	r3, #12
 8004408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800440a:	623a      	str	r2, [r7, #32]
 800440c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800440e:	69f9      	ldr	r1, [r7, #28]
 8004410:	6a3a      	ldr	r2, [r7, #32]
 8004412:	e841 2300 	strex	r3, r2, [r1]
 8004416:	61bb      	str	r3, [r7, #24]
   return(result);
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1e5      	bne.n	80043ea <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0310 	and.w	r3, r3, #16
 8004428:	2b10      	cmp	r3, #16
 800442a:	d10a      	bne.n	8004442 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800442c:	2300      	movs	r3, #0
 800442e:	60fb      	str	r3, [r7, #12]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	60fb      	str	r3, [r7, #12]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	60fb      	str	r3, [r7, #12]
 8004440:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004446:	4619      	mov	r1, r3
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f7ff fdbf 	bl	8003fcc <HAL_UARTEx_RxEventCallback>
 800444e:	e002      	b.n	8004456 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f7fc fb2f 	bl	8000ab4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004456:	2300      	movs	r3, #0
 8004458:	e002      	b.n	8004460 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800445a:	2300      	movs	r3, #0
 800445c:	e000      	b.n	8004460 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800445e:	2302      	movs	r3, #2
  }
}
 8004460:	4618      	mov	r0, r3
 8004462:	3730      	adds	r7, #48	; 0x30
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800446c:	b09f      	sub	sp, #124	; 0x7c
 800446e:	af00      	add	r7, sp, #0
 8004470:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004472:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800447c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800447e:	68d9      	ldr	r1, [r3, #12]
 8004480:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	ea40 0301 	orr.w	r3, r0, r1
 8004488:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800448a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800448c:	689a      	ldr	r2, [r3, #8]
 800448e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	431a      	orrs	r2, r3
 8004494:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004496:	695b      	ldr	r3, [r3, #20]
 8004498:	431a      	orrs	r2, r3
 800449a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800449c:	69db      	ldr	r3, [r3, #28]
 800449e:	4313      	orrs	r3, r2
 80044a0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80044a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80044ac:	f021 010c 	bic.w	r1, r1, #12
 80044b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044b6:	430b      	orrs	r3, r1
 80044b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	695b      	ldr	r3, [r3, #20]
 80044c0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80044c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044c6:	6999      	ldr	r1, [r3, #24]
 80044c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	ea40 0301 	orr.w	r3, r0, r1
 80044d0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80044d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	4bc5      	ldr	r3, [pc, #788]	; (80047ec <UART_SetConfig+0x384>)
 80044d8:	429a      	cmp	r2, r3
 80044da:	d004      	beq.n	80044e6 <UART_SetConfig+0x7e>
 80044dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	4bc3      	ldr	r3, [pc, #780]	; (80047f0 <UART_SetConfig+0x388>)
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d103      	bne.n	80044ee <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80044e6:	f7fd fb99 	bl	8001c1c <HAL_RCC_GetPCLK2Freq>
 80044ea:	6778      	str	r0, [r7, #116]	; 0x74
 80044ec:	e002      	b.n	80044f4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80044ee:	f7fd fb81 	bl	8001bf4 <HAL_RCC_GetPCLK1Freq>
 80044f2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044f6:	69db      	ldr	r3, [r3, #28]
 80044f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044fc:	f040 80b6 	bne.w	800466c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004500:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004502:	461c      	mov	r4, r3
 8004504:	f04f 0500 	mov.w	r5, #0
 8004508:	4622      	mov	r2, r4
 800450a:	462b      	mov	r3, r5
 800450c:	1891      	adds	r1, r2, r2
 800450e:	6439      	str	r1, [r7, #64]	; 0x40
 8004510:	415b      	adcs	r3, r3
 8004512:	647b      	str	r3, [r7, #68]	; 0x44
 8004514:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004518:	1912      	adds	r2, r2, r4
 800451a:	eb45 0303 	adc.w	r3, r5, r3
 800451e:	f04f 0000 	mov.w	r0, #0
 8004522:	f04f 0100 	mov.w	r1, #0
 8004526:	00d9      	lsls	r1, r3, #3
 8004528:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800452c:	00d0      	lsls	r0, r2, #3
 800452e:	4602      	mov	r2, r0
 8004530:	460b      	mov	r3, r1
 8004532:	1911      	adds	r1, r2, r4
 8004534:	6639      	str	r1, [r7, #96]	; 0x60
 8004536:	416b      	adcs	r3, r5
 8004538:	667b      	str	r3, [r7, #100]	; 0x64
 800453a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	461a      	mov	r2, r3
 8004540:	f04f 0300 	mov.w	r3, #0
 8004544:	1891      	adds	r1, r2, r2
 8004546:	63b9      	str	r1, [r7, #56]	; 0x38
 8004548:	415b      	adcs	r3, r3
 800454a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800454c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004550:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004554:	f7fb feac 	bl	80002b0 <__aeabi_uldivmod>
 8004558:	4602      	mov	r2, r0
 800455a:	460b      	mov	r3, r1
 800455c:	4ba5      	ldr	r3, [pc, #660]	; (80047f4 <UART_SetConfig+0x38c>)
 800455e:	fba3 2302 	umull	r2, r3, r3, r2
 8004562:	095b      	lsrs	r3, r3, #5
 8004564:	011e      	lsls	r6, r3, #4
 8004566:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004568:	461c      	mov	r4, r3
 800456a:	f04f 0500 	mov.w	r5, #0
 800456e:	4622      	mov	r2, r4
 8004570:	462b      	mov	r3, r5
 8004572:	1891      	adds	r1, r2, r2
 8004574:	6339      	str	r1, [r7, #48]	; 0x30
 8004576:	415b      	adcs	r3, r3
 8004578:	637b      	str	r3, [r7, #52]	; 0x34
 800457a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800457e:	1912      	adds	r2, r2, r4
 8004580:	eb45 0303 	adc.w	r3, r5, r3
 8004584:	f04f 0000 	mov.w	r0, #0
 8004588:	f04f 0100 	mov.w	r1, #0
 800458c:	00d9      	lsls	r1, r3, #3
 800458e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004592:	00d0      	lsls	r0, r2, #3
 8004594:	4602      	mov	r2, r0
 8004596:	460b      	mov	r3, r1
 8004598:	1911      	adds	r1, r2, r4
 800459a:	65b9      	str	r1, [r7, #88]	; 0x58
 800459c:	416b      	adcs	r3, r5
 800459e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	461a      	mov	r2, r3
 80045a6:	f04f 0300 	mov.w	r3, #0
 80045aa:	1891      	adds	r1, r2, r2
 80045ac:	62b9      	str	r1, [r7, #40]	; 0x28
 80045ae:	415b      	adcs	r3, r3
 80045b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80045b6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80045ba:	f7fb fe79 	bl	80002b0 <__aeabi_uldivmod>
 80045be:	4602      	mov	r2, r0
 80045c0:	460b      	mov	r3, r1
 80045c2:	4b8c      	ldr	r3, [pc, #560]	; (80047f4 <UART_SetConfig+0x38c>)
 80045c4:	fba3 1302 	umull	r1, r3, r3, r2
 80045c8:	095b      	lsrs	r3, r3, #5
 80045ca:	2164      	movs	r1, #100	; 0x64
 80045cc:	fb01 f303 	mul.w	r3, r1, r3
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	00db      	lsls	r3, r3, #3
 80045d4:	3332      	adds	r3, #50	; 0x32
 80045d6:	4a87      	ldr	r2, [pc, #540]	; (80047f4 <UART_SetConfig+0x38c>)
 80045d8:	fba2 2303 	umull	r2, r3, r2, r3
 80045dc:	095b      	lsrs	r3, r3, #5
 80045de:	005b      	lsls	r3, r3, #1
 80045e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80045e4:	441e      	add	r6, r3
 80045e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045e8:	4618      	mov	r0, r3
 80045ea:	f04f 0100 	mov.w	r1, #0
 80045ee:	4602      	mov	r2, r0
 80045f0:	460b      	mov	r3, r1
 80045f2:	1894      	adds	r4, r2, r2
 80045f4:	623c      	str	r4, [r7, #32]
 80045f6:	415b      	adcs	r3, r3
 80045f8:	627b      	str	r3, [r7, #36]	; 0x24
 80045fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045fe:	1812      	adds	r2, r2, r0
 8004600:	eb41 0303 	adc.w	r3, r1, r3
 8004604:	f04f 0400 	mov.w	r4, #0
 8004608:	f04f 0500 	mov.w	r5, #0
 800460c:	00dd      	lsls	r5, r3, #3
 800460e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004612:	00d4      	lsls	r4, r2, #3
 8004614:	4622      	mov	r2, r4
 8004616:	462b      	mov	r3, r5
 8004618:	1814      	adds	r4, r2, r0
 800461a:	653c      	str	r4, [r7, #80]	; 0x50
 800461c:	414b      	adcs	r3, r1
 800461e:	657b      	str	r3, [r7, #84]	; 0x54
 8004620:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	461a      	mov	r2, r3
 8004626:	f04f 0300 	mov.w	r3, #0
 800462a:	1891      	adds	r1, r2, r2
 800462c:	61b9      	str	r1, [r7, #24]
 800462e:	415b      	adcs	r3, r3
 8004630:	61fb      	str	r3, [r7, #28]
 8004632:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004636:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800463a:	f7fb fe39 	bl	80002b0 <__aeabi_uldivmod>
 800463e:	4602      	mov	r2, r0
 8004640:	460b      	mov	r3, r1
 8004642:	4b6c      	ldr	r3, [pc, #432]	; (80047f4 <UART_SetConfig+0x38c>)
 8004644:	fba3 1302 	umull	r1, r3, r3, r2
 8004648:	095b      	lsrs	r3, r3, #5
 800464a:	2164      	movs	r1, #100	; 0x64
 800464c:	fb01 f303 	mul.w	r3, r1, r3
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	00db      	lsls	r3, r3, #3
 8004654:	3332      	adds	r3, #50	; 0x32
 8004656:	4a67      	ldr	r2, [pc, #412]	; (80047f4 <UART_SetConfig+0x38c>)
 8004658:	fba2 2303 	umull	r2, r3, r2, r3
 800465c:	095b      	lsrs	r3, r3, #5
 800465e:	f003 0207 	and.w	r2, r3, #7
 8004662:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4432      	add	r2, r6
 8004668:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800466a:	e0b9      	b.n	80047e0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800466c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800466e:	461c      	mov	r4, r3
 8004670:	f04f 0500 	mov.w	r5, #0
 8004674:	4622      	mov	r2, r4
 8004676:	462b      	mov	r3, r5
 8004678:	1891      	adds	r1, r2, r2
 800467a:	6139      	str	r1, [r7, #16]
 800467c:	415b      	adcs	r3, r3
 800467e:	617b      	str	r3, [r7, #20]
 8004680:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004684:	1912      	adds	r2, r2, r4
 8004686:	eb45 0303 	adc.w	r3, r5, r3
 800468a:	f04f 0000 	mov.w	r0, #0
 800468e:	f04f 0100 	mov.w	r1, #0
 8004692:	00d9      	lsls	r1, r3, #3
 8004694:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004698:	00d0      	lsls	r0, r2, #3
 800469a:	4602      	mov	r2, r0
 800469c:	460b      	mov	r3, r1
 800469e:	eb12 0804 	adds.w	r8, r2, r4
 80046a2:	eb43 0905 	adc.w	r9, r3, r5
 80046a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	4618      	mov	r0, r3
 80046ac:	f04f 0100 	mov.w	r1, #0
 80046b0:	f04f 0200 	mov.w	r2, #0
 80046b4:	f04f 0300 	mov.w	r3, #0
 80046b8:	008b      	lsls	r3, r1, #2
 80046ba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80046be:	0082      	lsls	r2, r0, #2
 80046c0:	4640      	mov	r0, r8
 80046c2:	4649      	mov	r1, r9
 80046c4:	f7fb fdf4 	bl	80002b0 <__aeabi_uldivmod>
 80046c8:	4602      	mov	r2, r0
 80046ca:	460b      	mov	r3, r1
 80046cc:	4b49      	ldr	r3, [pc, #292]	; (80047f4 <UART_SetConfig+0x38c>)
 80046ce:	fba3 2302 	umull	r2, r3, r3, r2
 80046d2:	095b      	lsrs	r3, r3, #5
 80046d4:	011e      	lsls	r6, r3, #4
 80046d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046d8:	4618      	mov	r0, r3
 80046da:	f04f 0100 	mov.w	r1, #0
 80046de:	4602      	mov	r2, r0
 80046e0:	460b      	mov	r3, r1
 80046e2:	1894      	adds	r4, r2, r2
 80046e4:	60bc      	str	r4, [r7, #8]
 80046e6:	415b      	adcs	r3, r3
 80046e8:	60fb      	str	r3, [r7, #12]
 80046ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046ee:	1812      	adds	r2, r2, r0
 80046f0:	eb41 0303 	adc.w	r3, r1, r3
 80046f4:	f04f 0400 	mov.w	r4, #0
 80046f8:	f04f 0500 	mov.w	r5, #0
 80046fc:	00dd      	lsls	r5, r3, #3
 80046fe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004702:	00d4      	lsls	r4, r2, #3
 8004704:	4622      	mov	r2, r4
 8004706:	462b      	mov	r3, r5
 8004708:	1814      	adds	r4, r2, r0
 800470a:	64bc      	str	r4, [r7, #72]	; 0x48
 800470c:	414b      	adcs	r3, r1
 800470e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004710:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	4618      	mov	r0, r3
 8004716:	f04f 0100 	mov.w	r1, #0
 800471a:	f04f 0200 	mov.w	r2, #0
 800471e:	f04f 0300 	mov.w	r3, #0
 8004722:	008b      	lsls	r3, r1, #2
 8004724:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004728:	0082      	lsls	r2, r0, #2
 800472a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800472e:	f7fb fdbf 	bl	80002b0 <__aeabi_uldivmod>
 8004732:	4602      	mov	r2, r0
 8004734:	460b      	mov	r3, r1
 8004736:	4b2f      	ldr	r3, [pc, #188]	; (80047f4 <UART_SetConfig+0x38c>)
 8004738:	fba3 1302 	umull	r1, r3, r3, r2
 800473c:	095b      	lsrs	r3, r3, #5
 800473e:	2164      	movs	r1, #100	; 0x64
 8004740:	fb01 f303 	mul.w	r3, r1, r3
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	011b      	lsls	r3, r3, #4
 8004748:	3332      	adds	r3, #50	; 0x32
 800474a:	4a2a      	ldr	r2, [pc, #168]	; (80047f4 <UART_SetConfig+0x38c>)
 800474c:	fba2 2303 	umull	r2, r3, r2, r3
 8004750:	095b      	lsrs	r3, r3, #5
 8004752:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004756:	441e      	add	r6, r3
 8004758:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800475a:	4618      	mov	r0, r3
 800475c:	f04f 0100 	mov.w	r1, #0
 8004760:	4602      	mov	r2, r0
 8004762:	460b      	mov	r3, r1
 8004764:	1894      	adds	r4, r2, r2
 8004766:	603c      	str	r4, [r7, #0]
 8004768:	415b      	adcs	r3, r3
 800476a:	607b      	str	r3, [r7, #4]
 800476c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004770:	1812      	adds	r2, r2, r0
 8004772:	eb41 0303 	adc.w	r3, r1, r3
 8004776:	f04f 0400 	mov.w	r4, #0
 800477a:	f04f 0500 	mov.w	r5, #0
 800477e:	00dd      	lsls	r5, r3, #3
 8004780:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004784:	00d4      	lsls	r4, r2, #3
 8004786:	4622      	mov	r2, r4
 8004788:	462b      	mov	r3, r5
 800478a:	eb12 0a00 	adds.w	sl, r2, r0
 800478e:	eb43 0b01 	adc.w	fp, r3, r1
 8004792:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	4618      	mov	r0, r3
 8004798:	f04f 0100 	mov.w	r1, #0
 800479c:	f04f 0200 	mov.w	r2, #0
 80047a0:	f04f 0300 	mov.w	r3, #0
 80047a4:	008b      	lsls	r3, r1, #2
 80047a6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80047aa:	0082      	lsls	r2, r0, #2
 80047ac:	4650      	mov	r0, sl
 80047ae:	4659      	mov	r1, fp
 80047b0:	f7fb fd7e 	bl	80002b0 <__aeabi_uldivmod>
 80047b4:	4602      	mov	r2, r0
 80047b6:	460b      	mov	r3, r1
 80047b8:	4b0e      	ldr	r3, [pc, #56]	; (80047f4 <UART_SetConfig+0x38c>)
 80047ba:	fba3 1302 	umull	r1, r3, r3, r2
 80047be:	095b      	lsrs	r3, r3, #5
 80047c0:	2164      	movs	r1, #100	; 0x64
 80047c2:	fb01 f303 	mul.w	r3, r1, r3
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	011b      	lsls	r3, r3, #4
 80047ca:	3332      	adds	r3, #50	; 0x32
 80047cc:	4a09      	ldr	r2, [pc, #36]	; (80047f4 <UART_SetConfig+0x38c>)
 80047ce:	fba2 2303 	umull	r2, r3, r2, r3
 80047d2:	095b      	lsrs	r3, r3, #5
 80047d4:	f003 020f 	and.w	r2, r3, #15
 80047d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4432      	add	r2, r6
 80047de:	609a      	str	r2, [r3, #8]
}
 80047e0:	bf00      	nop
 80047e2:	377c      	adds	r7, #124	; 0x7c
 80047e4:	46bd      	mov	sp, r7
 80047e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047ea:	bf00      	nop
 80047ec:	40011000 	.word	0x40011000
 80047f0:	40011400 	.word	0x40011400
 80047f4:	51eb851f 	.word	0x51eb851f

080047f8 <__errno>:
 80047f8:	4b01      	ldr	r3, [pc, #4]	; (8004800 <__errno+0x8>)
 80047fa:	6818      	ldr	r0, [r3, #0]
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	2000000c 	.word	0x2000000c

08004804 <__libc_init_array>:
 8004804:	b570      	push	{r4, r5, r6, lr}
 8004806:	4d0d      	ldr	r5, [pc, #52]	; (800483c <__libc_init_array+0x38>)
 8004808:	4c0d      	ldr	r4, [pc, #52]	; (8004840 <__libc_init_array+0x3c>)
 800480a:	1b64      	subs	r4, r4, r5
 800480c:	10a4      	asrs	r4, r4, #2
 800480e:	2600      	movs	r6, #0
 8004810:	42a6      	cmp	r6, r4
 8004812:	d109      	bne.n	8004828 <__libc_init_array+0x24>
 8004814:	4d0b      	ldr	r5, [pc, #44]	; (8004844 <__libc_init_array+0x40>)
 8004816:	4c0c      	ldr	r4, [pc, #48]	; (8004848 <__libc_init_array+0x44>)
 8004818:	f000 ffec 	bl	80057f4 <_init>
 800481c:	1b64      	subs	r4, r4, r5
 800481e:	10a4      	asrs	r4, r4, #2
 8004820:	2600      	movs	r6, #0
 8004822:	42a6      	cmp	r6, r4
 8004824:	d105      	bne.n	8004832 <__libc_init_array+0x2e>
 8004826:	bd70      	pop	{r4, r5, r6, pc}
 8004828:	f855 3b04 	ldr.w	r3, [r5], #4
 800482c:	4798      	blx	r3
 800482e:	3601      	adds	r6, #1
 8004830:	e7ee      	b.n	8004810 <__libc_init_array+0xc>
 8004832:	f855 3b04 	ldr.w	r3, [r5], #4
 8004836:	4798      	blx	r3
 8004838:	3601      	adds	r6, #1
 800483a:	e7f2      	b.n	8004822 <__libc_init_array+0x1e>
 800483c:	080058ec 	.word	0x080058ec
 8004840:	080058ec 	.word	0x080058ec
 8004844:	080058ec 	.word	0x080058ec
 8004848:	080058f0 	.word	0x080058f0

0800484c <memset>:
 800484c:	4402      	add	r2, r0
 800484e:	4603      	mov	r3, r0
 8004850:	4293      	cmp	r3, r2
 8004852:	d100      	bne.n	8004856 <memset+0xa>
 8004854:	4770      	bx	lr
 8004856:	f803 1b01 	strb.w	r1, [r3], #1
 800485a:	e7f9      	b.n	8004850 <memset+0x4>

0800485c <iprintf>:
 800485c:	b40f      	push	{r0, r1, r2, r3}
 800485e:	4b0a      	ldr	r3, [pc, #40]	; (8004888 <iprintf+0x2c>)
 8004860:	b513      	push	{r0, r1, r4, lr}
 8004862:	681c      	ldr	r4, [r3, #0]
 8004864:	b124      	cbz	r4, 8004870 <iprintf+0x14>
 8004866:	69a3      	ldr	r3, [r4, #24]
 8004868:	b913      	cbnz	r3, 8004870 <iprintf+0x14>
 800486a:	4620      	mov	r0, r4
 800486c:	f000 fa5e 	bl	8004d2c <__sinit>
 8004870:	ab05      	add	r3, sp, #20
 8004872:	9a04      	ldr	r2, [sp, #16]
 8004874:	68a1      	ldr	r1, [r4, #8]
 8004876:	9301      	str	r3, [sp, #4]
 8004878:	4620      	mov	r0, r4
 800487a:	f000 fc2f 	bl	80050dc <_vfiprintf_r>
 800487e:	b002      	add	sp, #8
 8004880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004884:	b004      	add	sp, #16
 8004886:	4770      	bx	lr
 8004888:	2000000c 	.word	0x2000000c

0800488c <_puts_r>:
 800488c:	b570      	push	{r4, r5, r6, lr}
 800488e:	460e      	mov	r6, r1
 8004890:	4605      	mov	r5, r0
 8004892:	b118      	cbz	r0, 800489c <_puts_r+0x10>
 8004894:	6983      	ldr	r3, [r0, #24]
 8004896:	b90b      	cbnz	r3, 800489c <_puts_r+0x10>
 8004898:	f000 fa48 	bl	8004d2c <__sinit>
 800489c:	69ab      	ldr	r3, [r5, #24]
 800489e:	68ac      	ldr	r4, [r5, #8]
 80048a0:	b913      	cbnz	r3, 80048a8 <_puts_r+0x1c>
 80048a2:	4628      	mov	r0, r5
 80048a4:	f000 fa42 	bl	8004d2c <__sinit>
 80048a8:	4b2c      	ldr	r3, [pc, #176]	; (800495c <_puts_r+0xd0>)
 80048aa:	429c      	cmp	r4, r3
 80048ac:	d120      	bne.n	80048f0 <_puts_r+0x64>
 80048ae:	686c      	ldr	r4, [r5, #4]
 80048b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80048b2:	07db      	lsls	r3, r3, #31
 80048b4:	d405      	bmi.n	80048c2 <_puts_r+0x36>
 80048b6:	89a3      	ldrh	r3, [r4, #12]
 80048b8:	0598      	lsls	r0, r3, #22
 80048ba:	d402      	bmi.n	80048c2 <_puts_r+0x36>
 80048bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048be:	f000 fad3 	bl	8004e68 <__retarget_lock_acquire_recursive>
 80048c2:	89a3      	ldrh	r3, [r4, #12]
 80048c4:	0719      	lsls	r1, r3, #28
 80048c6:	d51d      	bpl.n	8004904 <_puts_r+0x78>
 80048c8:	6923      	ldr	r3, [r4, #16]
 80048ca:	b1db      	cbz	r3, 8004904 <_puts_r+0x78>
 80048cc:	3e01      	subs	r6, #1
 80048ce:	68a3      	ldr	r3, [r4, #8]
 80048d0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80048d4:	3b01      	subs	r3, #1
 80048d6:	60a3      	str	r3, [r4, #8]
 80048d8:	bb39      	cbnz	r1, 800492a <_puts_r+0x9e>
 80048da:	2b00      	cmp	r3, #0
 80048dc:	da38      	bge.n	8004950 <_puts_r+0xc4>
 80048de:	4622      	mov	r2, r4
 80048e0:	210a      	movs	r1, #10
 80048e2:	4628      	mov	r0, r5
 80048e4:	f000 f848 	bl	8004978 <__swbuf_r>
 80048e8:	3001      	adds	r0, #1
 80048ea:	d011      	beq.n	8004910 <_puts_r+0x84>
 80048ec:	250a      	movs	r5, #10
 80048ee:	e011      	b.n	8004914 <_puts_r+0x88>
 80048f0:	4b1b      	ldr	r3, [pc, #108]	; (8004960 <_puts_r+0xd4>)
 80048f2:	429c      	cmp	r4, r3
 80048f4:	d101      	bne.n	80048fa <_puts_r+0x6e>
 80048f6:	68ac      	ldr	r4, [r5, #8]
 80048f8:	e7da      	b.n	80048b0 <_puts_r+0x24>
 80048fa:	4b1a      	ldr	r3, [pc, #104]	; (8004964 <_puts_r+0xd8>)
 80048fc:	429c      	cmp	r4, r3
 80048fe:	bf08      	it	eq
 8004900:	68ec      	ldreq	r4, [r5, #12]
 8004902:	e7d5      	b.n	80048b0 <_puts_r+0x24>
 8004904:	4621      	mov	r1, r4
 8004906:	4628      	mov	r0, r5
 8004908:	f000 f888 	bl	8004a1c <__swsetup_r>
 800490c:	2800      	cmp	r0, #0
 800490e:	d0dd      	beq.n	80048cc <_puts_r+0x40>
 8004910:	f04f 35ff 	mov.w	r5, #4294967295
 8004914:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004916:	07da      	lsls	r2, r3, #31
 8004918:	d405      	bmi.n	8004926 <_puts_r+0x9a>
 800491a:	89a3      	ldrh	r3, [r4, #12]
 800491c:	059b      	lsls	r3, r3, #22
 800491e:	d402      	bmi.n	8004926 <_puts_r+0x9a>
 8004920:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004922:	f000 faa2 	bl	8004e6a <__retarget_lock_release_recursive>
 8004926:	4628      	mov	r0, r5
 8004928:	bd70      	pop	{r4, r5, r6, pc}
 800492a:	2b00      	cmp	r3, #0
 800492c:	da04      	bge.n	8004938 <_puts_r+0xac>
 800492e:	69a2      	ldr	r2, [r4, #24]
 8004930:	429a      	cmp	r2, r3
 8004932:	dc06      	bgt.n	8004942 <_puts_r+0xb6>
 8004934:	290a      	cmp	r1, #10
 8004936:	d004      	beq.n	8004942 <_puts_r+0xb6>
 8004938:	6823      	ldr	r3, [r4, #0]
 800493a:	1c5a      	adds	r2, r3, #1
 800493c:	6022      	str	r2, [r4, #0]
 800493e:	7019      	strb	r1, [r3, #0]
 8004940:	e7c5      	b.n	80048ce <_puts_r+0x42>
 8004942:	4622      	mov	r2, r4
 8004944:	4628      	mov	r0, r5
 8004946:	f000 f817 	bl	8004978 <__swbuf_r>
 800494a:	3001      	adds	r0, #1
 800494c:	d1bf      	bne.n	80048ce <_puts_r+0x42>
 800494e:	e7df      	b.n	8004910 <_puts_r+0x84>
 8004950:	6823      	ldr	r3, [r4, #0]
 8004952:	250a      	movs	r5, #10
 8004954:	1c5a      	adds	r2, r3, #1
 8004956:	6022      	str	r2, [r4, #0]
 8004958:	701d      	strb	r5, [r3, #0]
 800495a:	e7db      	b.n	8004914 <_puts_r+0x88>
 800495c:	08005870 	.word	0x08005870
 8004960:	08005890 	.word	0x08005890
 8004964:	08005850 	.word	0x08005850

08004968 <puts>:
 8004968:	4b02      	ldr	r3, [pc, #8]	; (8004974 <puts+0xc>)
 800496a:	4601      	mov	r1, r0
 800496c:	6818      	ldr	r0, [r3, #0]
 800496e:	f7ff bf8d 	b.w	800488c <_puts_r>
 8004972:	bf00      	nop
 8004974:	2000000c 	.word	0x2000000c

08004978 <__swbuf_r>:
 8004978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800497a:	460e      	mov	r6, r1
 800497c:	4614      	mov	r4, r2
 800497e:	4605      	mov	r5, r0
 8004980:	b118      	cbz	r0, 800498a <__swbuf_r+0x12>
 8004982:	6983      	ldr	r3, [r0, #24]
 8004984:	b90b      	cbnz	r3, 800498a <__swbuf_r+0x12>
 8004986:	f000 f9d1 	bl	8004d2c <__sinit>
 800498a:	4b21      	ldr	r3, [pc, #132]	; (8004a10 <__swbuf_r+0x98>)
 800498c:	429c      	cmp	r4, r3
 800498e:	d12b      	bne.n	80049e8 <__swbuf_r+0x70>
 8004990:	686c      	ldr	r4, [r5, #4]
 8004992:	69a3      	ldr	r3, [r4, #24]
 8004994:	60a3      	str	r3, [r4, #8]
 8004996:	89a3      	ldrh	r3, [r4, #12]
 8004998:	071a      	lsls	r2, r3, #28
 800499a:	d52f      	bpl.n	80049fc <__swbuf_r+0x84>
 800499c:	6923      	ldr	r3, [r4, #16]
 800499e:	b36b      	cbz	r3, 80049fc <__swbuf_r+0x84>
 80049a0:	6923      	ldr	r3, [r4, #16]
 80049a2:	6820      	ldr	r0, [r4, #0]
 80049a4:	1ac0      	subs	r0, r0, r3
 80049a6:	6963      	ldr	r3, [r4, #20]
 80049a8:	b2f6      	uxtb	r6, r6
 80049aa:	4283      	cmp	r3, r0
 80049ac:	4637      	mov	r7, r6
 80049ae:	dc04      	bgt.n	80049ba <__swbuf_r+0x42>
 80049b0:	4621      	mov	r1, r4
 80049b2:	4628      	mov	r0, r5
 80049b4:	f000 f926 	bl	8004c04 <_fflush_r>
 80049b8:	bb30      	cbnz	r0, 8004a08 <__swbuf_r+0x90>
 80049ba:	68a3      	ldr	r3, [r4, #8]
 80049bc:	3b01      	subs	r3, #1
 80049be:	60a3      	str	r3, [r4, #8]
 80049c0:	6823      	ldr	r3, [r4, #0]
 80049c2:	1c5a      	adds	r2, r3, #1
 80049c4:	6022      	str	r2, [r4, #0]
 80049c6:	701e      	strb	r6, [r3, #0]
 80049c8:	6963      	ldr	r3, [r4, #20]
 80049ca:	3001      	adds	r0, #1
 80049cc:	4283      	cmp	r3, r0
 80049ce:	d004      	beq.n	80049da <__swbuf_r+0x62>
 80049d0:	89a3      	ldrh	r3, [r4, #12]
 80049d2:	07db      	lsls	r3, r3, #31
 80049d4:	d506      	bpl.n	80049e4 <__swbuf_r+0x6c>
 80049d6:	2e0a      	cmp	r6, #10
 80049d8:	d104      	bne.n	80049e4 <__swbuf_r+0x6c>
 80049da:	4621      	mov	r1, r4
 80049dc:	4628      	mov	r0, r5
 80049de:	f000 f911 	bl	8004c04 <_fflush_r>
 80049e2:	b988      	cbnz	r0, 8004a08 <__swbuf_r+0x90>
 80049e4:	4638      	mov	r0, r7
 80049e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049e8:	4b0a      	ldr	r3, [pc, #40]	; (8004a14 <__swbuf_r+0x9c>)
 80049ea:	429c      	cmp	r4, r3
 80049ec:	d101      	bne.n	80049f2 <__swbuf_r+0x7a>
 80049ee:	68ac      	ldr	r4, [r5, #8]
 80049f0:	e7cf      	b.n	8004992 <__swbuf_r+0x1a>
 80049f2:	4b09      	ldr	r3, [pc, #36]	; (8004a18 <__swbuf_r+0xa0>)
 80049f4:	429c      	cmp	r4, r3
 80049f6:	bf08      	it	eq
 80049f8:	68ec      	ldreq	r4, [r5, #12]
 80049fa:	e7ca      	b.n	8004992 <__swbuf_r+0x1a>
 80049fc:	4621      	mov	r1, r4
 80049fe:	4628      	mov	r0, r5
 8004a00:	f000 f80c 	bl	8004a1c <__swsetup_r>
 8004a04:	2800      	cmp	r0, #0
 8004a06:	d0cb      	beq.n	80049a0 <__swbuf_r+0x28>
 8004a08:	f04f 37ff 	mov.w	r7, #4294967295
 8004a0c:	e7ea      	b.n	80049e4 <__swbuf_r+0x6c>
 8004a0e:	bf00      	nop
 8004a10:	08005870 	.word	0x08005870
 8004a14:	08005890 	.word	0x08005890
 8004a18:	08005850 	.word	0x08005850

08004a1c <__swsetup_r>:
 8004a1c:	4b32      	ldr	r3, [pc, #200]	; (8004ae8 <__swsetup_r+0xcc>)
 8004a1e:	b570      	push	{r4, r5, r6, lr}
 8004a20:	681d      	ldr	r5, [r3, #0]
 8004a22:	4606      	mov	r6, r0
 8004a24:	460c      	mov	r4, r1
 8004a26:	b125      	cbz	r5, 8004a32 <__swsetup_r+0x16>
 8004a28:	69ab      	ldr	r3, [r5, #24]
 8004a2a:	b913      	cbnz	r3, 8004a32 <__swsetup_r+0x16>
 8004a2c:	4628      	mov	r0, r5
 8004a2e:	f000 f97d 	bl	8004d2c <__sinit>
 8004a32:	4b2e      	ldr	r3, [pc, #184]	; (8004aec <__swsetup_r+0xd0>)
 8004a34:	429c      	cmp	r4, r3
 8004a36:	d10f      	bne.n	8004a58 <__swsetup_r+0x3c>
 8004a38:	686c      	ldr	r4, [r5, #4]
 8004a3a:	89a3      	ldrh	r3, [r4, #12]
 8004a3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004a40:	0719      	lsls	r1, r3, #28
 8004a42:	d42c      	bmi.n	8004a9e <__swsetup_r+0x82>
 8004a44:	06dd      	lsls	r5, r3, #27
 8004a46:	d411      	bmi.n	8004a6c <__swsetup_r+0x50>
 8004a48:	2309      	movs	r3, #9
 8004a4a:	6033      	str	r3, [r6, #0]
 8004a4c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004a50:	81a3      	strh	r3, [r4, #12]
 8004a52:	f04f 30ff 	mov.w	r0, #4294967295
 8004a56:	e03e      	b.n	8004ad6 <__swsetup_r+0xba>
 8004a58:	4b25      	ldr	r3, [pc, #148]	; (8004af0 <__swsetup_r+0xd4>)
 8004a5a:	429c      	cmp	r4, r3
 8004a5c:	d101      	bne.n	8004a62 <__swsetup_r+0x46>
 8004a5e:	68ac      	ldr	r4, [r5, #8]
 8004a60:	e7eb      	b.n	8004a3a <__swsetup_r+0x1e>
 8004a62:	4b24      	ldr	r3, [pc, #144]	; (8004af4 <__swsetup_r+0xd8>)
 8004a64:	429c      	cmp	r4, r3
 8004a66:	bf08      	it	eq
 8004a68:	68ec      	ldreq	r4, [r5, #12]
 8004a6a:	e7e6      	b.n	8004a3a <__swsetup_r+0x1e>
 8004a6c:	0758      	lsls	r0, r3, #29
 8004a6e:	d512      	bpl.n	8004a96 <__swsetup_r+0x7a>
 8004a70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a72:	b141      	cbz	r1, 8004a86 <__swsetup_r+0x6a>
 8004a74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a78:	4299      	cmp	r1, r3
 8004a7a:	d002      	beq.n	8004a82 <__swsetup_r+0x66>
 8004a7c:	4630      	mov	r0, r6
 8004a7e:	f000 fa59 	bl	8004f34 <_free_r>
 8004a82:	2300      	movs	r3, #0
 8004a84:	6363      	str	r3, [r4, #52]	; 0x34
 8004a86:	89a3      	ldrh	r3, [r4, #12]
 8004a88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004a8c:	81a3      	strh	r3, [r4, #12]
 8004a8e:	2300      	movs	r3, #0
 8004a90:	6063      	str	r3, [r4, #4]
 8004a92:	6923      	ldr	r3, [r4, #16]
 8004a94:	6023      	str	r3, [r4, #0]
 8004a96:	89a3      	ldrh	r3, [r4, #12]
 8004a98:	f043 0308 	orr.w	r3, r3, #8
 8004a9c:	81a3      	strh	r3, [r4, #12]
 8004a9e:	6923      	ldr	r3, [r4, #16]
 8004aa0:	b94b      	cbnz	r3, 8004ab6 <__swsetup_r+0x9a>
 8004aa2:	89a3      	ldrh	r3, [r4, #12]
 8004aa4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004aa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aac:	d003      	beq.n	8004ab6 <__swsetup_r+0x9a>
 8004aae:	4621      	mov	r1, r4
 8004ab0:	4630      	mov	r0, r6
 8004ab2:	f000 f9ff 	bl	8004eb4 <__smakebuf_r>
 8004ab6:	89a0      	ldrh	r0, [r4, #12]
 8004ab8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004abc:	f010 0301 	ands.w	r3, r0, #1
 8004ac0:	d00a      	beq.n	8004ad8 <__swsetup_r+0xbc>
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	60a3      	str	r3, [r4, #8]
 8004ac6:	6963      	ldr	r3, [r4, #20]
 8004ac8:	425b      	negs	r3, r3
 8004aca:	61a3      	str	r3, [r4, #24]
 8004acc:	6923      	ldr	r3, [r4, #16]
 8004ace:	b943      	cbnz	r3, 8004ae2 <__swsetup_r+0xc6>
 8004ad0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004ad4:	d1ba      	bne.n	8004a4c <__swsetup_r+0x30>
 8004ad6:	bd70      	pop	{r4, r5, r6, pc}
 8004ad8:	0781      	lsls	r1, r0, #30
 8004ada:	bf58      	it	pl
 8004adc:	6963      	ldrpl	r3, [r4, #20]
 8004ade:	60a3      	str	r3, [r4, #8]
 8004ae0:	e7f4      	b.n	8004acc <__swsetup_r+0xb0>
 8004ae2:	2000      	movs	r0, #0
 8004ae4:	e7f7      	b.n	8004ad6 <__swsetup_r+0xba>
 8004ae6:	bf00      	nop
 8004ae8:	2000000c 	.word	0x2000000c
 8004aec:	08005870 	.word	0x08005870
 8004af0:	08005890 	.word	0x08005890
 8004af4:	08005850 	.word	0x08005850

08004af8 <__sflush_r>:
 8004af8:	898a      	ldrh	r2, [r1, #12]
 8004afa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004afe:	4605      	mov	r5, r0
 8004b00:	0710      	lsls	r0, r2, #28
 8004b02:	460c      	mov	r4, r1
 8004b04:	d458      	bmi.n	8004bb8 <__sflush_r+0xc0>
 8004b06:	684b      	ldr	r3, [r1, #4]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	dc05      	bgt.n	8004b18 <__sflush_r+0x20>
 8004b0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	dc02      	bgt.n	8004b18 <__sflush_r+0x20>
 8004b12:	2000      	movs	r0, #0
 8004b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b1a:	2e00      	cmp	r6, #0
 8004b1c:	d0f9      	beq.n	8004b12 <__sflush_r+0x1a>
 8004b1e:	2300      	movs	r3, #0
 8004b20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004b24:	682f      	ldr	r7, [r5, #0]
 8004b26:	602b      	str	r3, [r5, #0]
 8004b28:	d032      	beq.n	8004b90 <__sflush_r+0x98>
 8004b2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004b2c:	89a3      	ldrh	r3, [r4, #12]
 8004b2e:	075a      	lsls	r2, r3, #29
 8004b30:	d505      	bpl.n	8004b3e <__sflush_r+0x46>
 8004b32:	6863      	ldr	r3, [r4, #4]
 8004b34:	1ac0      	subs	r0, r0, r3
 8004b36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004b38:	b10b      	cbz	r3, 8004b3e <__sflush_r+0x46>
 8004b3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b3c:	1ac0      	subs	r0, r0, r3
 8004b3e:	2300      	movs	r3, #0
 8004b40:	4602      	mov	r2, r0
 8004b42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b44:	6a21      	ldr	r1, [r4, #32]
 8004b46:	4628      	mov	r0, r5
 8004b48:	47b0      	blx	r6
 8004b4a:	1c43      	adds	r3, r0, #1
 8004b4c:	89a3      	ldrh	r3, [r4, #12]
 8004b4e:	d106      	bne.n	8004b5e <__sflush_r+0x66>
 8004b50:	6829      	ldr	r1, [r5, #0]
 8004b52:	291d      	cmp	r1, #29
 8004b54:	d82c      	bhi.n	8004bb0 <__sflush_r+0xb8>
 8004b56:	4a2a      	ldr	r2, [pc, #168]	; (8004c00 <__sflush_r+0x108>)
 8004b58:	40ca      	lsrs	r2, r1
 8004b5a:	07d6      	lsls	r6, r2, #31
 8004b5c:	d528      	bpl.n	8004bb0 <__sflush_r+0xb8>
 8004b5e:	2200      	movs	r2, #0
 8004b60:	6062      	str	r2, [r4, #4]
 8004b62:	04d9      	lsls	r1, r3, #19
 8004b64:	6922      	ldr	r2, [r4, #16]
 8004b66:	6022      	str	r2, [r4, #0]
 8004b68:	d504      	bpl.n	8004b74 <__sflush_r+0x7c>
 8004b6a:	1c42      	adds	r2, r0, #1
 8004b6c:	d101      	bne.n	8004b72 <__sflush_r+0x7a>
 8004b6e:	682b      	ldr	r3, [r5, #0]
 8004b70:	b903      	cbnz	r3, 8004b74 <__sflush_r+0x7c>
 8004b72:	6560      	str	r0, [r4, #84]	; 0x54
 8004b74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b76:	602f      	str	r7, [r5, #0]
 8004b78:	2900      	cmp	r1, #0
 8004b7a:	d0ca      	beq.n	8004b12 <__sflush_r+0x1a>
 8004b7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b80:	4299      	cmp	r1, r3
 8004b82:	d002      	beq.n	8004b8a <__sflush_r+0x92>
 8004b84:	4628      	mov	r0, r5
 8004b86:	f000 f9d5 	bl	8004f34 <_free_r>
 8004b8a:	2000      	movs	r0, #0
 8004b8c:	6360      	str	r0, [r4, #52]	; 0x34
 8004b8e:	e7c1      	b.n	8004b14 <__sflush_r+0x1c>
 8004b90:	6a21      	ldr	r1, [r4, #32]
 8004b92:	2301      	movs	r3, #1
 8004b94:	4628      	mov	r0, r5
 8004b96:	47b0      	blx	r6
 8004b98:	1c41      	adds	r1, r0, #1
 8004b9a:	d1c7      	bne.n	8004b2c <__sflush_r+0x34>
 8004b9c:	682b      	ldr	r3, [r5, #0]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d0c4      	beq.n	8004b2c <__sflush_r+0x34>
 8004ba2:	2b1d      	cmp	r3, #29
 8004ba4:	d001      	beq.n	8004baa <__sflush_r+0xb2>
 8004ba6:	2b16      	cmp	r3, #22
 8004ba8:	d101      	bne.n	8004bae <__sflush_r+0xb6>
 8004baa:	602f      	str	r7, [r5, #0]
 8004bac:	e7b1      	b.n	8004b12 <__sflush_r+0x1a>
 8004bae:	89a3      	ldrh	r3, [r4, #12]
 8004bb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bb4:	81a3      	strh	r3, [r4, #12]
 8004bb6:	e7ad      	b.n	8004b14 <__sflush_r+0x1c>
 8004bb8:	690f      	ldr	r7, [r1, #16]
 8004bba:	2f00      	cmp	r7, #0
 8004bbc:	d0a9      	beq.n	8004b12 <__sflush_r+0x1a>
 8004bbe:	0793      	lsls	r3, r2, #30
 8004bc0:	680e      	ldr	r6, [r1, #0]
 8004bc2:	bf08      	it	eq
 8004bc4:	694b      	ldreq	r3, [r1, #20]
 8004bc6:	600f      	str	r7, [r1, #0]
 8004bc8:	bf18      	it	ne
 8004bca:	2300      	movne	r3, #0
 8004bcc:	eba6 0807 	sub.w	r8, r6, r7
 8004bd0:	608b      	str	r3, [r1, #8]
 8004bd2:	f1b8 0f00 	cmp.w	r8, #0
 8004bd6:	dd9c      	ble.n	8004b12 <__sflush_r+0x1a>
 8004bd8:	6a21      	ldr	r1, [r4, #32]
 8004bda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004bdc:	4643      	mov	r3, r8
 8004bde:	463a      	mov	r2, r7
 8004be0:	4628      	mov	r0, r5
 8004be2:	47b0      	blx	r6
 8004be4:	2800      	cmp	r0, #0
 8004be6:	dc06      	bgt.n	8004bf6 <__sflush_r+0xfe>
 8004be8:	89a3      	ldrh	r3, [r4, #12]
 8004bea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bee:	81a3      	strh	r3, [r4, #12]
 8004bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8004bf4:	e78e      	b.n	8004b14 <__sflush_r+0x1c>
 8004bf6:	4407      	add	r7, r0
 8004bf8:	eba8 0800 	sub.w	r8, r8, r0
 8004bfc:	e7e9      	b.n	8004bd2 <__sflush_r+0xda>
 8004bfe:	bf00      	nop
 8004c00:	20400001 	.word	0x20400001

08004c04 <_fflush_r>:
 8004c04:	b538      	push	{r3, r4, r5, lr}
 8004c06:	690b      	ldr	r3, [r1, #16]
 8004c08:	4605      	mov	r5, r0
 8004c0a:	460c      	mov	r4, r1
 8004c0c:	b913      	cbnz	r3, 8004c14 <_fflush_r+0x10>
 8004c0e:	2500      	movs	r5, #0
 8004c10:	4628      	mov	r0, r5
 8004c12:	bd38      	pop	{r3, r4, r5, pc}
 8004c14:	b118      	cbz	r0, 8004c1e <_fflush_r+0x1a>
 8004c16:	6983      	ldr	r3, [r0, #24]
 8004c18:	b90b      	cbnz	r3, 8004c1e <_fflush_r+0x1a>
 8004c1a:	f000 f887 	bl	8004d2c <__sinit>
 8004c1e:	4b14      	ldr	r3, [pc, #80]	; (8004c70 <_fflush_r+0x6c>)
 8004c20:	429c      	cmp	r4, r3
 8004c22:	d11b      	bne.n	8004c5c <_fflush_r+0x58>
 8004c24:	686c      	ldr	r4, [r5, #4]
 8004c26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d0ef      	beq.n	8004c0e <_fflush_r+0xa>
 8004c2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004c30:	07d0      	lsls	r0, r2, #31
 8004c32:	d404      	bmi.n	8004c3e <_fflush_r+0x3a>
 8004c34:	0599      	lsls	r1, r3, #22
 8004c36:	d402      	bmi.n	8004c3e <_fflush_r+0x3a>
 8004c38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c3a:	f000 f915 	bl	8004e68 <__retarget_lock_acquire_recursive>
 8004c3e:	4628      	mov	r0, r5
 8004c40:	4621      	mov	r1, r4
 8004c42:	f7ff ff59 	bl	8004af8 <__sflush_r>
 8004c46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c48:	07da      	lsls	r2, r3, #31
 8004c4a:	4605      	mov	r5, r0
 8004c4c:	d4e0      	bmi.n	8004c10 <_fflush_r+0xc>
 8004c4e:	89a3      	ldrh	r3, [r4, #12]
 8004c50:	059b      	lsls	r3, r3, #22
 8004c52:	d4dd      	bmi.n	8004c10 <_fflush_r+0xc>
 8004c54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c56:	f000 f908 	bl	8004e6a <__retarget_lock_release_recursive>
 8004c5a:	e7d9      	b.n	8004c10 <_fflush_r+0xc>
 8004c5c:	4b05      	ldr	r3, [pc, #20]	; (8004c74 <_fflush_r+0x70>)
 8004c5e:	429c      	cmp	r4, r3
 8004c60:	d101      	bne.n	8004c66 <_fflush_r+0x62>
 8004c62:	68ac      	ldr	r4, [r5, #8]
 8004c64:	e7df      	b.n	8004c26 <_fflush_r+0x22>
 8004c66:	4b04      	ldr	r3, [pc, #16]	; (8004c78 <_fflush_r+0x74>)
 8004c68:	429c      	cmp	r4, r3
 8004c6a:	bf08      	it	eq
 8004c6c:	68ec      	ldreq	r4, [r5, #12]
 8004c6e:	e7da      	b.n	8004c26 <_fflush_r+0x22>
 8004c70:	08005870 	.word	0x08005870
 8004c74:	08005890 	.word	0x08005890
 8004c78:	08005850 	.word	0x08005850

08004c7c <std>:
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	b510      	push	{r4, lr}
 8004c80:	4604      	mov	r4, r0
 8004c82:	e9c0 3300 	strd	r3, r3, [r0]
 8004c86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c8a:	6083      	str	r3, [r0, #8]
 8004c8c:	8181      	strh	r1, [r0, #12]
 8004c8e:	6643      	str	r3, [r0, #100]	; 0x64
 8004c90:	81c2      	strh	r2, [r0, #14]
 8004c92:	6183      	str	r3, [r0, #24]
 8004c94:	4619      	mov	r1, r3
 8004c96:	2208      	movs	r2, #8
 8004c98:	305c      	adds	r0, #92	; 0x5c
 8004c9a:	f7ff fdd7 	bl	800484c <memset>
 8004c9e:	4b05      	ldr	r3, [pc, #20]	; (8004cb4 <std+0x38>)
 8004ca0:	6263      	str	r3, [r4, #36]	; 0x24
 8004ca2:	4b05      	ldr	r3, [pc, #20]	; (8004cb8 <std+0x3c>)
 8004ca4:	62a3      	str	r3, [r4, #40]	; 0x28
 8004ca6:	4b05      	ldr	r3, [pc, #20]	; (8004cbc <std+0x40>)
 8004ca8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004caa:	4b05      	ldr	r3, [pc, #20]	; (8004cc0 <std+0x44>)
 8004cac:	6224      	str	r4, [r4, #32]
 8004cae:	6323      	str	r3, [r4, #48]	; 0x30
 8004cb0:	bd10      	pop	{r4, pc}
 8004cb2:	bf00      	nop
 8004cb4:	08005685 	.word	0x08005685
 8004cb8:	080056a7 	.word	0x080056a7
 8004cbc:	080056df 	.word	0x080056df
 8004cc0:	08005703 	.word	0x08005703

08004cc4 <_cleanup_r>:
 8004cc4:	4901      	ldr	r1, [pc, #4]	; (8004ccc <_cleanup_r+0x8>)
 8004cc6:	f000 b8af 	b.w	8004e28 <_fwalk_reent>
 8004cca:	bf00      	nop
 8004ccc:	08004c05 	.word	0x08004c05

08004cd0 <__sfmoreglue>:
 8004cd0:	b570      	push	{r4, r5, r6, lr}
 8004cd2:	1e4a      	subs	r2, r1, #1
 8004cd4:	2568      	movs	r5, #104	; 0x68
 8004cd6:	4355      	muls	r5, r2
 8004cd8:	460e      	mov	r6, r1
 8004cda:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004cde:	f000 f979 	bl	8004fd4 <_malloc_r>
 8004ce2:	4604      	mov	r4, r0
 8004ce4:	b140      	cbz	r0, 8004cf8 <__sfmoreglue+0x28>
 8004ce6:	2100      	movs	r1, #0
 8004ce8:	e9c0 1600 	strd	r1, r6, [r0]
 8004cec:	300c      	adds	r0, #12
 8004cee:	60a0      	str	r0, [r4, #8]
 8004cf0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004cf4:	f7ff fdaa 	bl	800484c <memset>
 8004cf8:	4620      	mov	r0, r4
 8004cfa:	bd70      	pop	{r4, r5, r6, pc}

08004cfc <__sfp_lock_acquire>:
 8004cfc:	4801      	ldr	r0, [pc, #4]	; (8004d04 <__sfp_lock_acquire+0x8>)
 8004cfe:	f000 b8b3 	b.w	8004e68 <__retarget_lock_acquire_recursive>
 8004d02:	bf00      	nop
 8004d04:	200001c8 	.word	0x200001c8

08004d08 <__sfp_lock_release>:
 8004d08:	4801      	ldr	r0, [pc, #4]	; (8004d10 <__sfp_lock_release+0x8>)
 8004d0a:	f000 b8ae 	b.w	8004e6a <__retarget_lock_release_recursive>
 8004d0e:	bf00      	nop
 8004d10:	200001c8 	.word	0x200001c8

08004d14 <__sinit_lock_acquire>:
 8004d14:	4801      	ldr	r0, [pc, #4]	; (8004d1c <__sinit_lock_acquire+0x8>)
 8004d16:	f000 b8a7 	b.w	8004e68 <__retarget_lock_acquire_recursive>
 8004d1a:	bf00      	nop
 8004d1c:	200001c3 	.word	0x200001c3

08004d20 <__sinit_lock_release>:
 8004d20:	4801      	ldr	r0, [pc, #4]	; (8004d28 <__sinit_lock_release+0x8>)
 8004d22:	f000 b8a2 	b.w	8004e6a <__retarget_lock_release_recursive>
 8004d26:	bf00      	nop
 8004d28:	200001c3 	.word	0x200001c3

08004d2c <__sinit>:
 8004d2c:	b510      	push	{r4, lr}
 8004d2e:	4604      	mov	r4, r0
 8004d30:	f7ff fff0 	bl	8004d14 <__sinit_lock_acquire>
 8004d34:	69a3      	ldr	r3, [r4, #24]
 8004d36:	b11b      	cbz	r3, 8004d40 <__sinit+0x14>
 8004d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d3c:	f7ff bff0 	b.w	8004d20 <__sinit_lock_release>
 8004d40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004d44:	6523      	str	r3, [r4, #80]	; 0x50
 8004d46:	4b13      	ldr	r3, [pc, #76]	; (8004d94 <__sinit+0x68>)
 8004d48:	4a13      	ldr	r2, [pc, #76]	; (8004d98 <__sinit+0x6c>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	62a2      	str	r2, [r4, #40]	; 0x28
 8004d4e:	42a3      	cmp	r3, r4
 8004d50:	bf04      	itt	eq
 8004d52:	2301      	moveq	r3, #1
 8004d54:	61a3      	streq	r3, [r4, #24]
 8004d56:	4620      	mov	r0, r4
 8004d58:	f000 f820 	bl	8004d9c <__sfp>
 8004d5c:	6060      	str	r0, [r4, #4]
 8004d5e:	4620      	mov	r0, r4
 8004d60:	f000 f81c 	bl	8004d9c <__sfp>
 8004d64:	60a0      	str	r0, [r4, #8]
 8004d66:	4620      	mov	r0, r4
 8004d68:	f000 f818 	bl	8004d9c <__sfp>
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	60e0      	str	r0, [r4, #12]
 8004d70:	2104      	movs	r1, #4
 8004d72:	6860      	ldr	r0, [r4, #4]
 8004d74:	f7ff ff82 	bl	8004c7c <std>
 8004d78:	68a0      	ldr	r0, [r4, #8]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	2109      	movs	r1, #9
 8004d7e:	f7ff ff7d 	bl	8004c7c <std>
 8004d82:	68e0      	ldr	r0, [r4, #12]
 8004d84:	2202      	movs	r2, #2
 8004d86:	2112      	movs	r1, #18
 8004d88:	f7ff ff78 	bl	8004c7c <std>
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	61a3      	str	r3, [r4, #24]
 8004d90:	e7d2      	b.n	8004d38 <__sinit+0xc>
 8004d92:	bf00      	nop
 8004d94:	0800584c 	.word	0x0800584c
 8004d98:	08004cc5 	.word	0x08004cc5

08004d9c <__sfp>:
 8004d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d9e:	4607      	mov	r7, r0
 8004da0:	f7ff ffac 	bl	8004cfc <__sfp_lock_acquire>
 8004da4:	4b1e      	ldr	r3, [pc, #120]	; (8004e20 <__sfp+0x84>)
 8004da6:	681e      	ldr	r6, [r3, #0]
 8004da8:	69b3      	ldr	r3, [r6, #24]
 8004daa:	b913      	cbnz	r3, 8004db2 <__sfp+0x16>
 8004dac:	4630      	mov	r0, r6
 8004dae:	f7ff ffbd 	bl	8004d2c <__sinit>
 8004db2:	3648      	adds	r6, #72	; 0x48
 8004db4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004db8:	3b01      	subs	r3, #1
 8004dba:	d503      	bpl.n	8004dc4 <__sfp+0x28>
 8004dbc:	6833      	ldr	r3, [r6, #0]
 8004dbe:	b30b      	cbz	r3, 8004e04 <__sfp+0x68>
 8004dc0:	6836      	ldr	r6, [r6, #0]
 8004dc2:	e7f7      	b.n	8004db4 <__sfp+0x18>
 8004dc4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004dc8:	b9d5      	cbnz	r5, 8004e00 <__sfp+0x64>
 8004dca:	4b16      	ldr	r3, [pc, #88]	; (8004e24 <__sfp+0x88>)
 8004dcc:	60e3      	str	r3, [r4, #12]
 8004dce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004dd2:	6665      	str	r5, [r4, #100]	; 0x64
 8004dd4:	f000 f847 	bl	8004e66 <__retarget_lock_init_recursive>
 8004dd8:	f7ff ff96 	bl	8004d08 <__sfp_lock_release>
 8004ddc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004de0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004de4:	6025      	str	r5, [r4, #0]
 8004de6:	61a5      	str	r5, [r4, #24]
 8004de8:	2208      	movs	r2, #8
 8004dea:	4629      	mov	r1, r5
 8004dec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004df0:	f7ff fd2c 	bl	800484c <memset>
 8004df4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004df8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004dfc:	4620      	mov	r0, r4
 8004dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e00:	3468      	adds	r4, #104	; 0x68
 8004e02:	e7d9      	b.n	8004db8 <__sfp+0x1c>
 8004e04:	2104      	movs	r1, #4
 8004e06:	4638      	mov	r0, r7
 8004e08:	f7ff ff62 	bl	8004cd0 <__sfmoreglue>
 8004e0c:	4604      	mov	r4, r0
 8004e0e:	6030      	str	r0, [r6, #0]
 8004e10:	2800      	cmp	r0, #0
 8004e12:	d1d5      	bne.n	8004dc0 <__sfp+0x24>
 8004e14:	f7ff ff78 	bl	8004d08 <__sfp_lock_release>
 8004e18:	230c      	movs	r3, #12
 8004e1a:	603b      	str	r3, [r7, #0]
 8004e1c:	e7ee      	b.n	8004dfc <__sfp+0x60>
 8004e1e:	bf00      	nop
 8004e20:	0800584c 	.word	0x0800584c
 8004e24:	ffff0001 	.word	0xffff0001

08004e28 <_fwalk_reent>:
 8004e28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e2c:	4606      	mov	r6, r0
 8004e2e:	4688      	mov	r8, r1
 8004e30:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004e34:	2700      	movs	r7, #0
 8004e36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004e3a:	f1b9 0901 	subs.w	r9, r9, #1
 8004e3e:	d505      	bpl.n	8004e4c <_fwalk_reent+0x24>
 8004e40:	6824      	ldr	r4, [r4, #0]
 8004e42:	2c00      	cmp	r4, #0
 8004e44:	d1f7      	bne.n	8004e36 <_fwalk_reent+0xe>
 8004e46:	4638      	mov	r0, r7
 8004e48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e4c:	89ab      	ldrh	r3, [r5, #12]
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d907      	bls.n	8004e62 <_fwalk_reent+0x3a>
 8004e52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004e56:	3301      	adds	r3, #1
 8004e58:	d003      	beq.n	8004e62 <_fwalk_reent+0x3a>
 8004e5a:	4629      	mov	r1, r5
 8004e5c:	4630      	mov	r0, r6
 8004e5e:	47c0      	blx	r8
 8004e60:	4307      	orrs	r7, r0
 8004e62:	3568      	adds	r5, #104	; 0x68
 8004e64:	e7e9      	b.n	8004e3a <_fwalk_reent+0x12>

08004e66 <__retarget_lock_init_recursive>:
 8004e66:	4770      	bx	lr

08004e68 <__retarget_lock_acquire_recursive>:
 8004e68:	4770      	bx	lr

08004e6a <__retarget_lock_release_recursive>:
 8004e6a:	4770      	bx	lr

08004e6c <__swhatbuf_r>:
 8004e6c:	b570      	push	{r4, r5, r6, lr}
 8004e6e:	460e      	mov	r6, r1
 8004e70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e74:	2900      	cmp	r1, #0
 8004e76:	b096      	sub	sp, #88	; 0x58
 8004e78:	4614      	mov	r4, r2
 8004e7a:	461d      	mov	r5, r3
 8004e7c:	da07      	bge.n	8004e8e <__swhatbuf_r+0x22>
 8004e7e:	2300      	movs	r3, #0
 8004e80:	602b      	str	r3, [r5, #0]
 8004e82:	89b3      	ldrh	r3, [r6, #12]
 8004e84:	061a      	lsls	r2, r3, #24
 8004e86:	d410      	bmi.n	8004eaa <__swhatbuf_r+0x3e>
 8004e88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e8c:	e00e      	b.n	8004eac <__swhatbuf_r+0x40>
 8004e8e:	466a      	mov	r2, sp
 8004e90:	f000 fc5e 	bl	8005750 <_fstat_r>
 8004e94:	2800      	cmp	r0, #0
 8004e96:	dbf2      	blt.n	8004e7e <__swhatbuf_r+0x12>
 8004e98:	9a01      	ldr	r2, [sp, #4]
 8004e9a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004e9e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004ea2:	425a      	negs	r2, r3
 8004ea4:	415a      	adcs	r2, r3
 8004ea6:	602a      	str	r2, [r5, #0]
 8004ea8:	e7ee      	b.n	8004e88 <__swhatbuf_r+0x1c>
 8004eaa:	2340      	movs	r3, #64	; 0x40
 8004eac:	2000      	movs	r0, #0
 8004eae:	6023      	str	r3, [r4, #0]
 8004eb0:	b016      	add	sp, #88	; 0x58
 8004eb2:	bd70      	pop	{r4, r5, r6, pc}

08004eb4 <__smakebuf_r>:
 8004eb4:	898b      	ldrh	r3, [r1, #12]
 8004eb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004eb8:	079d      	lsls	r5, r3, #30
 8004eba:	4606      	mov	r6, r0
 8004ebc:	460c      	mov	r4, r1
 8004ebe:	d507      	bpl.n	8004ed0 <__smakebuf_r+0x1c>
 8004ec0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004ec4:	6023      	str	r3, [r4, #0]
 8004ec6:	6123      	str	r3, [r4, #16]
 8004ec8:	2301      	movs	r3, #1
 8004eca:	6163      	str	r3, [r4, #20]
 8004ecc:	b002      	add	sp, #8
 8004ece:	bd70      	pop	{r4, r5, r6, pc}
 8004ed0:	ab01      	add	r3, sp, #4
 8004ed2:	466a      	mov	r2, sp
 8004ed4:	f7ff ffca 	bl	8004e6c <__swhatbuf_r>
 8004ed8:	9900      	ldr	r1, [sp, #0]
 8004eda:	4605      	mov	r5, r0
 8004edc:	4630      	mov	r0, r6
 8004ede:	f000 f879 	bl	8004fd4 <_malloc_r>
 8004ee2:	b948      	cbnz	r0, 8004ef8 <__smakebuf_r+0x44>
 8004ee4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ee8:	059a      	lsls	r2, r3, #22
 8004eea:	d4ef      	bmi.n	8004ecc <__smakebuf_r+0x18>
 8004eec:	f023 0303 	bic.w	r3, r3, #3
 8004ef0:	f043 0302 	orr.w	r3, r3, #2
 8004ef4:	81a3      	strh	r3, [r4, #12]
 8004ef6:	e7e3      	b.n	8004ec0 <__smakebuf_r+0xc>
 8004ef8:	4b0d      	ldr	r3, [pc, #52]	; (8004f30 <__smakebuf_r+0x7c>)
 8004efa:	62b3      	str	r3, [r6, #40]	; 0x28
 8004efc:	89a3      	ldrh	r3, [r4, #12]
 8004efe:	6020      	str	r0, [r4, #0]
 8004f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f04:	81a3      	strh	r3, [r4, #12]
 8004f06:	9b00      	ldr	r3, [sp, #0]
 8004f08:	6163      	str	r3, [r4, #20]
 8004f0a:	9b01      	ldr	r3, [sp, #4]
 8004f0c:	6120      	str	r0, [r4, #16]
 8004f0e:	b15b      	cbz	r3, 8004f28 <__smakebuf_r+0x74>
 8004f10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f14:	4630      	mov	r0, r6
 8004f16:	f000 fc2d 	bl	8005774 <_isatty_r>
 8004f1a:	b128      	cbz	r0, 8004f28 <__smakebuf_r+0x74>
 8004f1c:	89a3      	ldrh	r3, [r4, #12]
 8004f1e:	f023 0303 	bic.w	r3, r3, #3
 8004f22:	f043 0301 	orr.w	r3, r3, #1
 8004f26:	81a3      	strh	r3, [r4, #12]
 8004f28:	89a0      	ldrh	r0, [r4, #12]
 8004f2a:	4305      	orrs	r5, r0
 8004f2c:	81a5      	strh	r5, [r4, #12]
 8004f2e:	e7cd      	b.n	8004ecc <__smakebuf_r+0x18>
 8004f30:	08004cc5 	.word	0x08004cc5

08004f34 <_free_r>:
 8004f34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f36:	2900      	cmp	r1, #0
 8004f38:	d048      	beq.n	8004fcc <_free_r+0x98>
 8004f3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f3e:	9001      	str	r0, [sp, #4]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	f1a1 0404 	sub.w	r4, r1, #4
 8004f46:	bfb8      	it	lt
 8004f48:	18e4      	addlt	r4, r4, r3
 8004f4a:	f000 fc35 	bl	80057b8 <__malloc_lock>
 8004f4e:	4a20      	ldr	r2, [pc, #128]	; (8004fd0 <_free_r+0x9c>)
 8004f50:	9801      	ldr	r0, [sp, #4]
 8004f52:	6813      	ldr	r3, [r2, #0]
 8004f54:	4615      	mov	r5, r2
 8004f56:	b933      	cbnz	r3, 8004f66 <_free_r+0x32>
 8004f58:	6063      	str	r3, [r4, #4]
 8004f5a:	6014      	str	r4, [r2, #0]
 8004f5c:	b003      	add	sp, #12
 8004f5e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004f62:	f000 bc2f 	b.w	80057c4 <__malloc_unlock>
 8004f66:	42a3      	cmp	r3, r4
 8004f68:	d90b      	bls.n	8004f82 <_free_r+0x4e>
 8004f6a:	6821      	ldr	r1, [r4, #0]
 8004f6c:	1862      	adds	r2, r4, r1
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	bf04      	itt	eq
 8004f72:	681a      	ldreq	r2, [r3, #0]
 8004f74:	685b      	ldreq	r3, [r3, #4]
 8004f76:	6063      	str	r3, [r4, #4]
 8004f78:	bf04      	itt	eq
 8004f7a:	1852      	addeq	r2, r2, r1
 8004f7c:	6022      	streq	r2, [r4, #0]
 8004f7e:	602c      	str	r4, [r5, #0]
 8004f80:	e7ec      	b.n	8004f5c <_free_r+0x28>
 8004f82:	461a      	mov	r2, r3
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	b10b      	cbz	r3, 8004f8c <_free_r+0x58>
 8004f88:	42a3      	cmp	r3, r4
 8004f8a:	d9fa      	bls.n	8004f82 <_free_r+0x4e>
 8004f8c:	6811      	ldr	r1, [r2, #0]
 8004f8e:	1855      	adds	r5, r2, r1
 8004f90:	42a5      	cmp	r5, r4
 8004f92:	d10b      	bne.n	8004fac <_free_r+0x78>
 8004f94:	6824      	ldr	r4, [r4, #0]
 8004f96:	4421      	add	r1, r4
 8004f98:	1854      	adds	r4, r2, r1
 8004f9a:	42a3      	cmp	r3, r4
 8004f9c:	6011      	str	r1, [r2, #0]
 8004f9e:	d1dd      	bne.n	8004f5c <_free_r+0x28>
 8004fa0:	681c      	ldr	r4, [r3, #0]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	6053      	str	r3, [r2, #4]
 8004fa6:	4421      	add	r1, r4
 8004fa8:	6011      	str	r1, [r2, #0]
 8004faa:	e7d7      	b.n	8004f5c <_free_r+0x28>
 8004fac:	d902      	bls.n	8004fb4 <_free_r+0x80>
 8004fae:	230c      	movs	r3, #12
 8004fb0:	6003      	str	r3, [r0, #0]
 8004fb2:	e7d3      	b.n	8004f5c <_free_r+0x28>
 8004fb4:	6825      	ldr	r5, [r4, #0]
 8004fb6:	1961      	adds	r1, r4, r5
 8004fb8:	428b      	cmp	r3, r1
 8004fba:	bf04      	itt	eq
 8004fbc:	6819      	ldreq	r1, [r3, #0]
 8004fbe:	685b      	ldreq	r3, [r3, #4]
 8004fc0:	6063      	str	r3, [r4, #4]
 8004fc2:	bf04      	itt	eq
 8004fc4:	1949      	addeq	r1, r1, r5
 8004fc6:	6021      	streq	r1, [r4, #0]
 8004fc8:	6054      	str	r4, [r2, #4]
 8004fca:	e7c7      	b.n	8004f5c <_free_r+0x28>
 8004fcc:	b003      	add	sp, #12
 8004fce:	bd30      	pop	{r4, r5, pc}
 8004fd0:	20000090 	.word	0x20000090

08004fd4 <_malloc_r>:
 8004fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fd6:	1ccd      	adds	r5, r1, #3
 8004fd8:	f025 0503 	bic.w	r5, r5, #3
 8004fdc:	3508      	adds	r5, #8
 8004fde:	2d0c      	cmp	r5, #12
 8004fe0:	bf38      	it	cc
 8004fe2:	250c      	movcc	r5, #12
 8004fe4:	2d00      	cmp	r5, #0
 8004fe6:	4606      	mov	r6, r0
 8004fe8:	db01      	blt.n	8004fee <_malloc_r+0x1a>
 8004fea:	42a9      	cmp	r1, r5
 8004fec:	d903      	bls.n	8004ff6 <_malloc_r+0x22>
 8004fee:	230c      	movs	r3, #12
 8004ff0:	6033      	str	r3, [r6, #0]
 8004ff2:	2000      	movs	r0, #0
 8004ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ff6:	f000 fbdf 	bl	80057b8 <__malloc_lock>
 8004ffa:	4921      	ldr	r1, [pc, #132]	; (8005080 <_malloc_r+0xac>)
 8004ffc:	680a      	ldr	r2, [r1, #0]
 8004ffe:	4614      	mov	r4, r2
 8005000:	b99c      	cbnz	r4, 800502a <_malloc_r+0x56>
 8005002:	4f20      	ldr	r7, [pc, #128]	; (8005084 <_malloc_r+0xb0>)
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	b923      	cbnz	r3, 8005012 <_malloc_r+0x3e>
 8005008:	4621      	mov	r1, r4
 800500a:	4630      	mov	r0, r6
 800500c:	f000 fb2a 	bl	8005664 <_sbrk_r>
 8005010:	6038      	str	r0, [r7, #0]
 8005012:	4629      	mov	r1, r5
 8005014:	4630      	mov	r0, r6
 8005016:	f000 fb25 	bl	8005664 <_sbrk_r>
 800501a:	1c43      	adds	r3, r0, #1
 800501c:	d123      	bne.n	8005066 <_malloc_r+0x92>
 800501e:	230c      	movs	r3, #12
 8005020:	6033      	str	r3, [r6, #0]
 8005022:	4630      	mov	r0, r6
 8005024:	f000 fbce 	bl	80057c4 <__malloc_unlock>
 8005028:	e7e3      	b.n	8004ff2 <_malloc_r+0x1e>
 800502a:	6823      	ldr	r3, [r4, #0]
 800502c:	1b5b      	subs	r3, r3, r5
 800502e:	d417      	bmi.n	8005060 <_malloc_r+0x8c>
 8005030:	2b0b      	cmp	r3, #11
 8005032:	d903      	bls.n	800503c <_malloc_r+0x68>
 8005034:	6023      	str	r3, [r4, #0]
 8005036:	441c      	add	r4, r3
 8005038:	6025      	str	r5, [r4, #0]
 800503a:	e004      	b.n	8005046 <_malloc_r+0x72>
 800503c:	6863      	ldr	r3, [r4, #4]
 800503e:	42a2      	cmp	r2, r4
 8005040:	bf0c      	ite	eq
 8005042:	600b      	streq	r3, [r1, #0]
 8005044:	6053      	strne	r3, [r2, #4]
 8005046:	4630      	mov	r0, r6
 8005048:	f000 fbbc 	bl	80057c4 <__malloc_unlock>
 800504c:	f104 000b 	add.w	r0, r4, #11
 8005050:	1d23      	adds	r3, r4, #4
 8005052:	f020 0007 	bic.w	r0, r0, #7
 8005056:	1ac2      	subs	r2, r0, r3
 8005058:	d0cc      	beq.n	8004ff4 <_malloc_r+0x20>
 800505a:	1a1b      	subs	r3, r3, r0
 800505c:	50a3      	str	r3, [r4, r2]
 800505e:	e7c9      	b.n	8004ff4 <_malloc_r+0x20>
 8005060:	4622      	mov	r2, r4
 8005062:	6864      	ldr	r4, [r4, #4]
 8005064:	e7cc      	b.n	8005000 <_malloc_r+0x2c>
 8005066:	1cc4      	adds	r4, r0, #3
 8005068:	f024 0403 	bic.w	r4, r4, #3
 800506c:	42a0      	cmp	r0, r4
 800506e:	d0e3      	beq.n	8005038 <_malloc_r+0x64>
 8005070:	1a21      	subs	r1, r4, r0
 8005072:	4630      	mov	r0, r6
 8005074:	f000 faf6 	bl	8005664 <_sbrk_r>
 8005078:	3001      	adds	r0, #1
 800507a:	d1dd      	bne.n	8005038 <_malloc_r+0x64>
 800507c:	e7cf      	b.n	800501e <_malloc_r+0x4a>
 800507e:	bf00      	nop
 8005080:	20000090 	.word	0x20000090
 8005084:	20000094 	.word	0x20000094

08005088 <__sfputc_r>:
 8005088:	6893      	ldr	r3, [r2, #8]
 800508a:	3b01      	subs	r3, #1
 800508c:	2b00      	cmp	r3, #0
 800508e:	b410      	push	{r4}
 8005090:	6093      	str	r3, [r2, #8]
 8005092:	da08      	bge.n	80050a6 <__sfputc_r+0x1e>
 8005094:	6994      	ldr	r4, [r2, #24]
 8005096:	42a3      	cmp	r3, r4
 8005098:	db01      	blt.n	800509e <__sfputc_r+0x16>
 800509a:	290a      	cmp	r1, #10
 800509c:	d103      	bne.n	80050a6 <__sfputc_r+0x1e>
 800509e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80050a2:	f7ff bc69 	b.w	8004978 <__swbuf_r>
 80050a6:	6813      	ldr	r3, [r2, #0]
 80050a8:	1c58      	adds	r0, r3, #1
 80050aa:	6010      	str	r0, [r2, #0]
 80050ac:	7019      	strb	r1, [r3, #0]
 80050ae:	4608      	mov	r0, r1
 80050b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80050b4:	4770      	bx	lr

080050b6 <__sfputs_r>:
 80050b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050b8:	4606      	mov	r6, r0
 80050ba:	460f      	mov	r7, r1
 80050bc:	4614      	mov	r4, r2
 80050be:	18d5      	adds	r5, r2, r3
 80050c0:	42ac      	cmp	r4, r5
 80050c2:	d101      	bne.n	80050c8 <__sfputs_r+0x12>
 80050c4:	2000      	movs	r0, #0
 80050c6:	e007      	b.n	80050d8 <__sfputs_r+0x22>
 80050c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050cc:	463a      	mov	r2, r7
 80050ce:	4630      	mov	r0, r6
 80050d0:	f7ff ffda 	bl	8005088 <__sfputc_r>
 80050d4:	1c43      	adds	r3, r0, #1
 80050d6:	d1f3      	bne.n	80050c0 <__sfputs_r+0xa>
 80050d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080050dc <_vfiprintf_r>:
 80050dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050e0:	460d      	mov	r5, r1
 80050e2:	b09d      	sub	sp, #116	; 0x74
 80050e4:	4614      	mov	r4, r2
 80050e6:	4698      	mov	r8, r3
 80050e8:	4606      	mov	r6, r0
 80050ea:	b118      	cbz	r0, 80050f4 <_vfiprintf_r+0x18>
 80050ec:	6983      	ldr	r3, [r0, #24]
 80050ee:	b90b      	cbnz	r3, 80050f4 <_vfiprintf_r+0x18>
 80050f0:	f7ff fe1c 	bl	8004d2c <__sinit>
 80050f4:	4b89      	ldr	r3, [pc, #548]	; (800531c <_vfiprintf_r+0x240>)
 80050f6:	429d      	cmp	r5, r3
 80050f8:	d11b      	bne.n	8005132 <_vfiprintf_r+0x56>
 80050fa:	6875      	ldr	r5, [r6, #4]
 80050fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80050fe:	07d9      	lsls	r1, r3, #31
 8005100:	d405      	bmi.n	800510e <_vfiprintf_r+0x32>
 8005102:	89ab      	ldrh	r3, [r5, #12]
 8005104:	059a      	lsls	r2, r3, #22
 8005106:	d402      	bmi.n	800510e <_vfiprintf_r+0x32>
 8005108:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800510a:	f7ff fead 	bl	8004e68 <__retarget_lock_acquire_recursive>
 800510e:	89ab      	ldrh	r3, [r5, #12]
 8005110:	071b      	lsls	r3, r3, #28
 8005112:	d501      	bpl.n	8005118 <_vfiprintf_r+0x3c>
 8005114:	692b      	ldr	r3, [r5, #16]
 8005116:	b9eb      	cbnz	r3, 8005154 <_vfiprintf_r+0x78>
 8005118:	4629      	mov	r1, r5
 800511a:	4630      	mov	r0, r6
 800511c:	f7ff fc7e 	bl	8004a1c <__swsetup_r>
 8005120:	b1c0      	cbz	r0, 8005154 <_vfiprintf_r+0x78>
 8005122:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005124:	07dc      	lsls	r4, r3, #31
 8005126:	d50e      	bpl.n	8005146 <_vfiprintf_r+0x6a>
 8005128:	f04f 30ff 	mov.w	r0, #4294967295
 800512c:	b01d      	add	sp, #116	; 0x74
 800512e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005132:	4b7b      	ldr	r3, [pc, #492]	; (8005320 <_vfiprintf_r+0x244>)
 8005134:	429d      	cmp	r5, r3
 8005136:	d101      	bne.n	800513c <_vfiprintf_r+0x60>
 8005138:	68b5      	ldr	r5, [r6, #8]
 800513a:	e7df      	b.n	80050fc <_vfiprintf_r+0x20>
 800513c:	4b79      	ldr	r3, [pc, #484]	; (8005324 <_vfiprintf_r+0x248>)
 800513e:	429d      	cmp	r5, r3
 8005140:	bf08      	it	eq
 8005142:	68f5      	ldreq	r5, [r6, #12]
 8005144:	e7da      	b.n	80050fc <_vfiprintf_r+0x20>
 8005146:	89ab      	ldrh	r3, [r5, #12]
 8005148:	0598      	lsls	r0, r3, #22
 800514a:	d4ed      	bmi.n	8005128 <_vfiprintf_r+0x4c>
 800514c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800514e:	f7ff fe8c 	bl	8004e6a <__retarget_lock_release_recursive>
 8005152:	e7e9      	b.n	8005128 <_vfiprintf_r+0x4c>
 8005154:	2300      	movs	r3, #0
 8005156:	9309      	str	r3, [sp, #36]	; 0x24
 8005158:	2320      	movs	r3, #32
 800515a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800515e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005162:	2330      	movs	r3, #48	; 0x30
 8005164:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005328 <_vfiprintf_r+0x24c>
 8005168:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800516c:	f04f 0901 	mov.w	r9, #1
 8005170:	4623      	mov	r3, r4
 8005172:	469a      	mov	sl, r3
 8005174:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005178:	b10a      	cbz	r2, 800517e <_vfiprintf_r+0xa2>
 800517a:	2a25      	cmp	r2, #37	; 0x25
 800517c:	d1f9      	bne.n	8005172 <_vfiprintf_r+0x96>
 800517e:	ebba 0b04 	subs.w	fp, sl, r4
 8005182:	d00b      	beq.n	800519c <_vfiprintf_r+0xc0>
 8005184:	465b      	mov	r3, fp
 8005186:	4622      	mov	r2, r4
 8005188:	4629      	mov	r1, r5
 800518a:	4630      	mov	r0, r6
 800518c:	f7ff ff93 	bl	80050b6 <__sfputs_r>
 8005190:	3001      	adds	r0, #1
 8005192:	f000 80aa 	beq.w	80052ea <_vfiprintf_r+0x20e>
 8005196:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005198:	445a      	add	r2, fp
 800519a:	9209      	str	r2, [sp, #36]	; 0x24
 800519c:	f89a 3000 	ldrb.w	r3, [sl]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	f000 80a2 	beq.w	80052ea <_vfiprintf_r+0x20e>
 80051a6:	2300      	movs	r3, #0
 80051a8:	f04f 32ff 	mov.w	r2, #4294967295
 80051ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051b0:	f10a 0a01 	add.w	sl, sl, #1
 80051b4:	9304      	str	r3, [sp, #16]
 80051b6:	9307      	str	r3, [sp, #28]
 80051b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80051bc:	931a      	str	r3, [sp, #104]	; 0x68
 80051be:	4654      	mov	r4, sl
 80051c0:	2205      	movs	r2, #5
 80051c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051c6:	4858      	ldr	r0, [pc, #352]	; (8005328 <_vfiprintf_r+0x24c>)
 80051c8:	f7fb f822 	bl	8000210 <memchr>
 80051cc:	9a04      	ldr	r2, [sp, #16]
 80051ce:	b9d8      	cbnz	r0, 8005208 <_vfiprintf_r+0x12c>
 80051d0:	06d1      	lsls	r1, r2, #27
 80051d2:	bf44      	itt	mi
 80051d4:	2320      	movmi	r3, #32
 80051d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051da:	0713      	lsls	r3, r2, #28
 80051dc:	bf44      	itt	mi
 80051de:	232b      	movmi	r3, #43	; 0x2b
 80051e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051e4:	f89a 3000 	ldrb.w	r3, [sl]
 80051e8:	2b2a      	cmp	r3, #42	; 0x2a
 80051ea:	d015      	beq.n	8005218 <_vfiprintf_r+0x13c>
 80051ec:	9a07      	ldr	r2, [sp, #28]
 80051ee:	4654      	mov	r4, sl
 80051f0:	2000      	movs	r0, #0
 80051f2:	f04f 0c0a 	mov.w	ip, #10
 80051f6:	4621      	mov	r1, r4
 80051f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051fc:	3b30      	subs	r3, #48	; 0x30
 80051fe:	2b09      	cmp	r3, #9
 8005200:	d94e      	bls.n	80052a0 <_vfiprintf_r+0x1c4>
 8005202:	b1b0      	cbz	r0, 8005232 <_vfiprintf_r+0x156>
 8005204:	9207      	str	r2, [sp, #28]
 8005206:	e014      	b.n	8005232 <_vfiprintf_r+0x156>
 8005208:	eba0 0308 	sub.w	r3, r0, r8
 800520c:	fa09 f303 	lsl.w	r3, r9, r3
 8005210:	4313      	orrs	r3, r2
 8005212:	9304      	str	r3, [sp, #16]
 8005214:	46a2      	mov	sl, r4
 8005216:	e7d2      	b.n	80051be <_vfiprintf_r+0xe2>
 8005218:	9b03      	ldr	r3, [sp, #12]
 800521a:	1d19      	adds	r1, r3, #4
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	9103      	str	r1, [sp, #12]
 8005220:	2b00      	cmp	r3, #0
 8005222:	bfbb      	ittet	lt
 8005224:	425b      	neglt	r3, r3
 8005226:	f042 0202 	orrlt.w	r2, r2, #2
 800522a:	9307      	strge	r3, [sp, #28]
 800522c:	9307      	strlt	r3, [sp, #28]
 800522e:	bfb8      	it	lt
 8005230:	9204      	strlt	r2, [sp, #16]
 8005232:	7823      	ldrb	r3, [r4, #0]
 8005234:	2b2e      	cmp	r3, #46	; 0x2e
 8005236:	d10c      	bne.n	8005252 <_vfiprintf_r+0x176>
 8005238:	7863      	ldrb	r3, [r4, #1]
 800523a:	2b2a      	cmp	r3, #42	; 0x2a
 800523c:	d135      	bne.n	80052aa <_vfiprintf_r+0x1ce>
 800523e:	9b03      	ldr	r3, [sp, #12]
 8005240:	1d1a      	adds	r2, r3, #4
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	9203      	str	r2, [sp, #12]
 8005246:	2b00      	cmp	r3, #0
 8005248:	bfb8      	it	lt
 800524a:	f04f 33ff 	movlt.w	r3, #4294967295
 800524e:	3402      	adds	r4, #2
 8005250:	9305      	str	r3, [sp, #20]
 8005252:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005338 <_vfiprintf_r+0x25c>
 8005256:	7821      	ldrb	r1, [r4, #0]
 8005258:	2203      	movs	r2, #3
 800525a:	4650      	mov	r0, sl
 800525c:	f7fa ffd8 	bl	8000210 <memchr>
 8005260:	b140      	cbz	r0, 8005274 <_vfiprintf_r+0x198>
 8005262:	2340      	movs	r3, #64	; 0x40
 8005264:	eba0 000a 	sub.w	r0, r0, sl
 8005268:	fa03 f000 	lsl.w	r0, r3, r0
 800526c:	9b04      	ldr	r3, [sp, #16]
 800526e:	4303      	orrs	r3, r0
 8005270:	3401      	adds	r4, #1
 8005272:	9304      	str	r3, [sp, #16]
 8005274:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005278:	482c      	ldr	r0, [pc, #176]	; (800532c <_vfiprintf_r+0x250>)
 800527a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800527e:	2206      	movs	r2, #6
 8005280:	f7fa ffc6 	bl	8000210 <memchr>
 8005284:	2800      	cmp	r0, #0
 8005286:	d03f      	beq.n	8005308 <_vfiprintf_r+0x22c>
 8005288:	4b29      	ldr	r3, [pc, #164]	; (8005330 <_vfiprintf_r+0x254>)
 800528a:	bb1b      	cbnz	r3, 80052d4 <_vfiprintf_r+0x1f8>
 800528c:	9b03      	ldr	r3, [sp, #12]
 800528e:	3307      	adds	r3, #7
 8005290:	f023 0307 	bic.w	r3, r3, #7
 8005294:	3308      	adds	r3, #8
 8005296:	9303      	str	r3, [sp, #12]
 8005298:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800529a:	443b      	add	r3, r7
 800529c:	9309      	str	r3, [sp, #36]	; 0x24
 800529e:	e767      	b.n	8005170 <_vfiprintf_r+0x94>
 80052a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80052a4:	460c      	mov	r4, r1
 80052a6:	2001      	movs	r0, #1
 80052a8:	e7a5      	b.n	80051f6 <_vfiprintf_r+0x11a>
 80052aa:	2300      	movs	r3, #0
 80052ac:	3401      	adds	r4, #1
 80052ae:	9305      	str	r3, [sp, #20]
 80052b0:	4619      	mov	r1, r3
 80052b2:	f04f 0c0a 	mov.w	ip, #10
 80052b6:	4620      	mov	r0, r4
 80052b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052bc:	3a30      	subs	r2, #48	; 0x30
 80052be:	2a09      	cmp	r2, #9
 80052c0:	d903      	bls.n	80052ca <_vfiprintf_r+0x1ee>
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d0c5      	beq.n	8005252 <_vfiprintf_r+0x176>
 80052c6:	9105      	str	r1, [sp, #20]
 80052c8:	e7c3      	b.n	8005252 <_vfiprintf_r+0x176>
 80052ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80052ce:	4604      	mov	r4, r0
 80052d0:	2301      	movs	r3, #1
 80052d2:	e7f0      	b.n	80052b6 <_vfiprintf_r+0x1da>
 80052d4:	ab03      	add	r3, sp, #12
 80052d6:	9300      	str	r3, [sp, #0]
 80052d8:	462a      	mov	r2, r5
 80052da:	4b16      	ldr	r3, [pc, #88]	; (8005334 <_vfiprintf_r+0x258>)
 80052dc:	a904      	add	r1, sp, #16
 80052de:	4630      	mov	r0, r6
 80052e0:	f3af 8000 	nop.w
 80052e4:	4607      	mov	r7, r0
 80052e6:	1c78      	adds	r0, r7, #1
 80052e8:	d1d6      	bne.n	8005298 <_vfiprintf_r+0x1bc>
 80052ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80052ec:	07d9      	lsls	r1, r3, #31
 80052ee:	d405      	bmi.n	80052fc <_vfiprintf_r+0x220>
 80052f0:	89ab      	ldrh	r3, [r5, #12]
 80052f2:	059a      	lsls	r2, r3, #22
 80052f4:	d402      	bmi.n	80052fc <_vfiprintf_r+0x220>
 80052f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80052f8:	f7ff fdb7 	bl	8004e6a <__retarget_lock_release_recursive>
 80052fc:	89ab      	ldrh	r3, [r5, #12]
 80052fe:	065b      	lsls	r3, r3, #25
 8005300:	f53f af12 	bmi.w	8005128 <_vfiprintf_r+0x4c>
 8005304:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005306:	e711      	b.n	800512c <_vfiprintf_r+0x50>
 8005308:	ab03      	add	r3, sp, #12
 800530a:	9300      	str	r3, [sp, #0]
 800530c:	462a      	mov	r2, r5
 800530e:	4b09      	ldr	r3, [pc, #36]	; (8005334 <_vfiprintf_r+0x258>)
 8005310:	a904      	add	r1, sp, #16
 8005312:	4630      	mov	r0, r6
 8005314:	f000 f880 	bl	8005418 <_printf_i>
 8005318:	e7e4      	b.n	80052e4 <_vfiprintf_r+0x208>
 800531a:	bf00      	nop
 800531c:	08005870 	.word	0x08005870
 8005320:	08005890 	.word	0x08005890
 8005324:	08005850 	.word	0x08005850
 8005328:	080058b0 	.word	0x080058b0
 800532c:	080058ba 	.word	0x080058ba
 8005330:	00000000 	.word	0x00000000
 8005334:	080050b7 	.word	0x080050b7
 8005338:	080058b6 	.word	0x080058b6

0800533c <_printf_common>:
 800533c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005340:	4616      	mov	r6, r2
 8005342:	4699      	mov	r9, r3
 8005344:	688a      	ldr	r2, [r1, #8]
 8005346:	690b      	ldr	r3, [r1, #16]
 8005348:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800534c:	4293      	cmp	r3, r2
 800534e:	bfb8      	it	lt
 8005350:	4613      	movlt	r3, r2
 8005352:	6033      	str	r3, [r6, #0]
 8005354:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005358:	4607      	mov	r7, r0
 800535a:	460c      	mov	r4, r1
 800535c:	b10a      	cbz	r2, 8005362 <_printf_common+0x26>
 800535e:	3301      	adds	r3, #1
 8005360:	6033      	str	r3, [r6, #0]
 8005362:	6823      	ldr	r3, [r4, #0]
 8005364:	0699      	lsls	r1, r3, #26
 8005366:	bf42      	ittt	mi
 8005368:	6833      	ldrmi	r3, [r6, #0]
 800536a:	3302      	addmi	r3, #2
 800536c:	6033      	strmi	r3, [r6, #0]
 800536e:	6825      	ldr	r5, [r4, #0]
 8005370:	f015 0506 	ands.w	r5, r5, #6
 8005374:	d106      	bne.n	8005384 <_printf_common+0x48>
 8005376:	f104 0a19 	add.w	sl, r4, #25
 800537a:	68e3      	ldr	r3, [r4, #12]
 800537c:	6832      	ldr	r2, [r6, #0]
 800537e:	1a9b      	subs	r3, r3, r2
 8005380:	42ab      	cmp	r3, r5
 8005382:	dc26      	bgt.n	80053d2 <_printf_common+0x96>
 8005384:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005388:	1e13      	subs	r3, r2, #0
 800538a:	6822      	ldr	r2, [r4, #0]
 800538c:	bf18      	it	ne
 800538e:	2301      	movne	r3, #1
 8005390:	0692      	lsls	r2, r2, #26
 8005392:	d42b      	bmi.n	80053ec <_printf_common+0xb0>
 8005394:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005398:	4649      	mov	r1, r9
 800539a:	4638      	mov	r0, r7
 800539c:	47c0      	blx	r8
 800539e:	3001      	adds	r0, #1
 80053a0:	d01e      	beq.n	80053e0 <_printf_common+0xa4>
 80053a2:	6823      	ldr	r3, [r4, #0]
 80053a4:	68e5      	ldr	r5, [r4, #12]
 80053a6:	6832      	ldr	r2, [r6, #0]
 80053a8:	f003 0306 	and.w	r3, r3, #6
 80053ac:	2b04      	cmp	r3, #4
 80053ae:	bf08      	it	eq
 80053b0:	1aad      	subeq	r5, r5, r2
 80053b2:	68a3      	ldr	r3, [r4, #8]
 80053b4:	6922      	ldr	r2, [r4, #16]
 80053b6:	bf0c      	ite	eq
 80053b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053bc:	2500      	movne	r5, #0
 80053be:	4293      	cmp	r3, r2
 80053c0:	bfc4      	itt	gt
 80053c2:	1a9b      	subgt	r3, r3, r2
 80053c4:	18ed      	addgt	r5, r5, r3
 80053c6:	2600      	movs	r6, #0
 80053c8:	341a      	adds	r4, #26
 80053ca:	42b5      	cmp	r5, r6
 80053cc:	d11a      	bne.n	8005404 <_printf_common+0xc8>
 80053ce:	2000      	movs	r0, #0
 80053d0:	e008      	b.n	80053e4 <_printf_common+0xa8>
 80053d2:	2301      	movs	r3, #1
 80053d4:	4652      	mov	r2, sl
 80053d6:	4649      	mov	r1, r9
 80053d8:	4638      	mov	r0, r7
 80053da:	47c0      	blx	r8
 80053dc:	3001      	adds	r0, #1
 80053de:	d103      	bne.n	80053e8 <_printf_common+0xac>
 80053e0:	f04f 30ff 	mov.w	r0, #4294967295
 80053e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053e8:	3501      	adds	r5, #1
 80053ea:	e7c6      	b.n	800537a <_printf_common+0x3e>
 80053ec:	18e1      	adds	r1, r4, r3
 80053ee:	1c5a      	adds	r2, r3, #1
 80053f0:	2030      	movs	r0, #48	; 0x30
 80053f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80053f6:	4422      	add	r2, r4
 80053f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80053fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005400:	3302      	adds	r3, #2
 8005402:	e7c7      	b.n	8005394 <_printf_common+0x58>
 8005404:	2301      	movs	r3, #1
 8005406:	4622      	mov	r2, r4
 8005408:	4649      	mov	r1, r9
 800540a:	4638      	mov	r0, r7
 800540c:	47c0      	blx	r8
 800540e:	3001      	adds	r0, #1
 8005410:	d0e6      	beq.n	80053e0 <_printf_common+0xa4>
 8005412:	3601      	adds	r6, #1
 8005414:	e7d9      	b.n	80053ca <_printf_common+0x8e>
	...

08005418 <_printf_i>:
 8005418:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800541c:	460c      	mov	r4, r1
 800541e:	4691      	mov	r9, r2
 8005420:	7e27      	ldrb	r7, [r4, #24]
 8005422:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005424:	2f78      	cmp	r7, #120	; 0x78
 8005426:	4680      	mov	r8, r0
 8005428:	469a      	mov	sl, r3
 800542a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800542e:	d807      	bhi.n	8005440 <_printf_i+0x28>
 8005430:	2f62      	cmp	r7, #98	; 0x62
 8005432:	d80a      	bhi.n	800544a <_printf_i+0x32>
 8005434:	2f00      	cmp	r7, #0
 8005436:	f000 80d8 	beq.w	80055ea <_printf_i+0x1d2>
 800543a:	2f58      	cmp	r7, #88	; 0x58
 800543c:	f000 80a3 	beq.w	8005586 <_printf_i+0x16e>
 8005440:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005444:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005448:	e03a      	b.n	80054c0 <_printf_i+0xa8>
 800544a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800544e:	2b15      	cmp	r3, #21
 8005450:	d8f6      	bhi.n	8005440 <_printf_i+0x28>
 8005452:	a001      	add	r0, pc, #4	; (adr r0, 8005458 <_printf_i+0x40>)
 8005454:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005458:	080054b1 	.word	0x080054b1
 800545c:	080054c5 	.word	0x080054c5
 8005460:	08005441 	.word	0x08005441
 8005464:	08005441 	.word	0x08005441
 8005468:	08005441 	.word	0x08005441
 800546c:	08005441 	.word	0x08005441
 8005470:	080054c5 	.word	0x080054c5
 8005474:	08005441 	.word	0x08005441
 8005478:	08005441 	.word	0x08005441
 800547c:	08005441 	.word	0x08005441
 8005480:	08005441 	.word	0x08005441
 8005484:	080055d1 	.word	0x080055d1
 8005488:	080054f5 	.word	0x080054f5
 800548c:	080055b3 	.word	0x080055b3
 8005490:	08005441 	.word	0x08005441
 8005494:	08005441 	.word	0x08005441
 8005498:	080055f3 	.word	0x080055f3
 800549c:	08005441 	.word	0x08005441
 80054a0:	080054f5 	.word	0x080054f5
 80054a4:	08005441 	.word	0x08005441
 80054a8:	08005441 	.word	0x08005441
 80054ac:	080055bb 	.word	0x080055bb
 80054b0:	680b      	ldr	r3, [r1, #0]
 80054b2:	1d1a      	adds	r2, r3, #4
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	600a      	str	r2, [r1, #0]
 80054b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80054bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80054c0:	2301      	movs	r3, #1
 80054c2:	e0a3      	b.n	800560c <_printf_i+0x1f4>
 80054c4:	6825      	ldr	r5, [r4, #0]
 80054c6:	6808      	ldr	r0, [r1, #0]
 80054c8:	062e      	lsls	r6, r5, #24
 80054ca:	f100 0304 	add.w	r3, r0, #4
 80054ce:	d50a      	bpl.n	80054e6 <_printf_i+0xce>
 80054d0:	6805      	ldr	r5, [r0, #0]
 80054d2:	600b      	str	r3, [r1, #0]
 80054d4:	2d00      	cmp	r5, #0
 80054d6:	da03      	bge.n	80054e0 <_printf_i+0xc8>
 80054d8:	232d      	movs	r3, #45	; 0x2d
 80054da:	426d      	negs	r5, r5
 80054dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054e0:	485e      	ldr	r0, [pc, #376]	; (800565c <_printf_i+0x244>)
 80054e2:	230a      	movs	r3, #10
 80054e4:	e019      	b.n	800551a <_printf_i+0x102>
 80054e6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80054ea:	6805      	ldr	r5, [r0, #0]
 80054ec:	600b      	str	r3, [r1, #0]
 80054ee:	bf18      	it	ne
 80054f0:	b22d      	sxthne	r5, r5
 80054f2:	e7ef      	b.n	80054d4 <_printf_i+0xbc>
 80054f4:	680b      	ldr	r3, [r1, #0]
 80054f6:	6825      	ldr	r5, [r4, #0]
 80054f8:	1d18      	adds	r0, r3, #4
 80054fa:	6008      	str	r0, [r1, #0]
 80054fc:	0628      	lsls	r0, r5, #24
 80054fe:	d501      	bpl.n	8005504 <_printf_i+0xec>
 8005500:	681d      	ldr	r5, [r3, #0]
 8005502:	e002      	b.n	800550a <_printf_i+0xf2>
 8005504:	0669      	lsls	r1, r5, #25
 8005506:	d5fb      	bpl.n	8005500 <_printf_i+0xe8>
 8005508:	881d      	ldrh	r5, [r3, #0]
 800550a:	4854      	ldr	r0, [pc, #336]	; (800565c <_printf_i+0x244>)
 800550c:	2f6f      	cmp	r7, #111	; 0x6f
 800550e:	bf0c      	ite	eq
 8005510:	2308      	moveq	r3, #8
 8005512:	230a      	movne	r3, #10
 8005514:	2100      	movs	r1, #0
 8005516:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800551a:	6866      	ldr	r6, [r4, #4]
 800551c:	60a6      	str	r6, [r4, #8]
 800551e:	2e00      	cmp	r6, #0
 8005520:	bfa2      	ittt	ge
 8005522:	6821      	ldrge	r1, [r4, #0]
 8005524:	f021 0104 	bicge.w	r1, r1, #4
 8005528:	6021      	strge	r1, [r4, #0]
 800552a:	b90d      	cbnz	r5, 8005530 <_printf_i+0x118>
 800552c:	2e00      	cmp	r6, #0
 800552e:	d04d      	beq.n	80055cc <_printf_i+0x1b4>
 8005530:	4616      	mov	r6, r2
 8005532:	fbb5 f1f3 	udiv	r1, r5, r3
 8005536:	fb03 5711 	mls	r7, r3, r1, r5
 800553a:	5dc7      	ldrb	r7, [r0, r7]
 800553c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005540:	462f      	mov	r7, r5
 8005542:	42bb      	cmp	r3, r7
 8005544:	460d      	mov	r5, r1
 8005546:	d9f4      	bls.n	8005532 <_printf_i+0x11a>
 8005548:	2b08      	cmp	r3, #8
 800554a:	d10b      	bne.n	8005564 <_printf_i+0x14c>
 800554c:	6823      	ldr	r3, [r4, #0]
 800554e:	07df      	lsls	r7, r3, #31
 8005550:	d508      	bpl.n	8005564 <_printf_i+0x14c>
 8005552:	6923      	ldr	r3, [r4, #16]
 8005554:	6861      	ldr	r1, [r4, #4]
 8005556:	4299      	cmp	r1, r3
 8005558:	bfde      	ittt	le
 800555a:	2330      	movle	r3, #48	; 0x30
 800555c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005560:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005564:	1b92      	subs	r2, r2, r6
 8005566:	6122      	str	r2, [r4, #16]
 8005568:	f8cd a000 	str.w	sl, [sp]
 800556c:	464b      	mov	r3, r9
 800556e:	aa03      	add	r2, sp, #12
 8005570:	4621      	mov	r1, r4
 8005572:	4640      	mov	r0, r8
 8005574:	f7ff fee2 	bl	800533c <_printf_common>
 8005578:	3001      	adds	r0, #1
 800557a:	d14c      	bne.n	8005616 <_printf_i+0x1fe>
 800557c:	f04f 30ff 	mov.w	r0, #4294967295
 8005580:	b004      	add	sp, #16
 8005582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005586:	4835      	ldr	r0, [pc, #212]	; (800565c <_printf_i+0x244>)
 8005588:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800558c:	6823      	ldr	r3, [r4, #0]
 800558e:	680e      	ldr	r6, [r1, #0]
 8005590:	061f      	lsls	r7, r3, #24
 8005592:	f856 5b04 	ldr.w	r5, [r6], #4
 8005596:	600e      	str	r6, [r1, #0]
 8005598:	d514      	bpl.n	80055c4 <_printf_i+0x1ac>
 800559a:	07d9      	lsls	r1, r3, #31
 800559c:	bf44      	itt	mi
 800559e:	f043 0320 	orrmi.w	r3, r3, #32
 80055a2:	6023      	strmi	r3, [r4, #0]
 80055a4:	b91d      	cbnz	r5, 80055ae <_printf_i+0x196>
 80055a6:	6823      	ldr	r3, [r4, #0]
 80055a8:	f023 0320 	bic.w	r3, r3, #32
 80055ac:	6023      	str	r3, [r4, #0]
 80055ae:	2310      	movs	r3, #16
 80055b0:	e7b0      	b.n	8005514 <_printf_i+0xfc>
 80055b2:	6823      	ldr	r3, [r4, #0]
 80055b4:	f043 0320 	orr.w	r3, r3, #32
 80055b8:	6023      	str	r3, [r4, #0]
 80055ba:	2378      	movs	r3, #120	; 0x78
 80055bc:	4828      	ldr	r0, [pc, #160]	; (8005660 <_printf_i+0x248>)
 80055be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80055c2:	e7e3      	b.n	800558c <_printf_i+0x174>
 80055c4:	065e      	lsls	r6, r3, #25
 80055c6:	bf48      	it	mi
 80055c8:	b2ad      	uxthmi	r5, r5
 80055ca:	e7e6      	b.n	800559a <_printf_i+0x182>
 80055cc:	4616      	mov	r6, r2
 80055ce:	e7bb      	b.n	8005548 <_printf_i+0x130>
 80055d0:	680b      	ldr	r3, [r1, #0]
 80055d2:	6826      	ldr	r6, [r4, #0]
 80055d4:	6960      	ldr	r0, [r4, #20]
 80055d6:	1d1d      	adds	r5, r3, #4
 80055d8:	600d      	str	r5, [r1, #0]
 80055da:	0635      	lsls	r5, r6, #24
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	d501      	bpl.n	80055e4 <_printf_i+0x1cc>
 80055e0:	6018      	str	r0, [r3, #0]
 80055e2:	e002      	b.n	80055ea <_printf_i+0x1d2>
 80055e4:	0671      	lsls	r1, r6, #25
 80055e6:	d5fb      	bpl.n	80055e0 <_printf_i+0x1c8>
 80055e8:	8018      	strh	r0, [r3, #0]
 80055ea:	2300      	movs	r3, #0
 80055ec:	6123      	str	r3, [r4, #16]
 80055ee:	4616      	mov	r6, r2
 80055f0:	e7ba      	b.n	8005568 <_printf_i+0x150>
 80055f2:	680b      	ldr	r3, [r1, #0]
 80055f4:	1d1a      	adds	r2, r3, #4
 80055f6:	600a      	str	r2, [r1, #0]
 80055f8:	681e      	ldr	r6, [r3, #0]
 80055fa:	6862      	ldr	r2, [r4, #4]
 80055fc:	2100      	movs	r1, #0
 80055fe:	4630      	mov	r0, r6
 8005600:	f7fa fe06 	bl	8000210 <memchr>
 8005604:	b108      	cbz	r0, 800560a <_printf_i+0x1f2>
 8005606:	1b80      	subs	r0, r0, r6
 8005608:	6060      	str	r0, [r4, #4]
 800560a:	6863      	ldr	r3, [r4, #4]
 800560c:	6123      	str	r3, [r4, #16]
 800560e:	2300      	movs	r3, #0
 8005610:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005614:	e7a8      	b.n	8005568 <_printf_i+0x150>
 8005616:	6923      	ldr	r3, [r4, #16]
 8005618:	4632      	mov	r2, r6
 800561a:	4649      	mov	r1, r9
 800561c:	4640      	mov	r0, r8
 800561e:	47d0      	blx	sl
 8005620:	3001      	adds	r0, #1
 8005622:	d0ab      	beq.n	800557c <_printf_i+0x164>
 8005624:	6823      	ldr	r3, [r4, #0]
 8005626:	079b      	lsls	r3, r3, #30
 8005628:	d413      	bmi.n	8005652 <_printf_i+0x23a>
 800562a:	68e0      	ldr	r0, [r4, #12]
 800562c:	9b03      	ldr	r3, [sp, #12]
 800562e:	4298      	cmp	r0, r3
 8005630:	bfb8      	it	lt
 8005632:	4618      	movlt	r0, r3
 8005634:	e7a4      	b.n	8005580 <_printf_i+0x168>
 8005636:	2301      	movs	r3, #1
 8005638:	4632      	mov	r2, r6
 800563a:	4649      	mov	r1, r9
 800563c:	4640      	mov	r0, r8
 800563e:	47d0      	blx	sl
 8005640:	3001      	adds	r0, #1
 8005642:	d09b      	beq.n	800557c <_printf_i+0x164>
 8005644:	3501      	adds	r5, #1
 8005646:	68e3      	ldr	r3, [r4, #12]
 8005648:	9903      	ldr	r1, [sp, #12]
 800564a:	1a5b      	subs	r3, r3, r1
 800564c:	42ab      	cmp	r3, r5
 800564e:	dcf2      	bgt.n	8005636 <_printf_i+0x21e>
 8005650:	e7eb      	b.n	800562a <_printf_i+0x212>
 8005652:	2500      	movs	r5, #0
 8005654:	f104 0619 	add.w	r6, r4, #25
 8005658:	e7f5      	b.n	8005646 <_printf_i+0x22e>
 800565a:	bf00      	nop
 800565c:	080058c1 	.word	0x080058c1
 8005660:	080058d2 	.word	0x080058d2

08005664 <_sbrk_r>:
 8005664:	b538      	push	{r3, r4, r5, lr}
 8005666:	4d06      	ldr	r5, [pc, #24]	; (8005680 <_sbrk_r+0x1c>)
 8005668:	2300      	movs	r3, #0
 800566a:	4604      	mov	r4, r0
 800566c:	4608      	mov	r0, r1
 800566e:	602b      	str	r3, [r5, #0]
 8005670:	f7fb fb36 	bl	8000ce0 <_sbrk>
 8005674:	1c43      	adds	r3, r0, #1
 8005676:	d102      	bne.n	800567e <_sbrk_r+0x1a>
 8005678:	682b      	ldr	r3, [r5, #0]
 800567a:	b103      	cbz	r3, 800567e <_sbrk_r+0x1a>
 800567c:	6023      	str	r3, [r4, #0]
 800567e:	bd38      	pop	{r3, r4, r5, pc}
 8005680:	200001cc 	.word	0x200001cc

08005684 <__sread>:
 8005684:	b510      	push	{r4, lr}
 8005686:	460c      	mov	r4, r1
 8005688:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800568c:	f000 f8a0 	bl	80057d0 <_read_r>
 8005690:	2800      	cmp	r0, #0
 8005692:	bfab      	itete	ge
 8005694:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005696:	89a3      	ldrhlt	r3, [r4, #12]
 8005698:	181b      	addge	r3, r3, r0
 800569a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800569e:	bfac      	ite	ge
 80056a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80056a2:	81a3      	strhlt	r3, [r4, #12]
 80056a4:	bd10      	pop	{r4, pc}

080056a6 <__swrite>:
 80056a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056aa:	461f      	mov	r7, r3
 80056ac:	898b      	ldrh	r3, [r1, #12]
 80056ae:	05db      	lsls	r3, r3, #23
 80056b0:	4605      	mov	r5, r0
 80056b2:	460c      	mov	r4, r1
 80056b4:	4616      	mov	r6, r2
 80056b6:	d505      	bpl.n	80056c4 <__swrite+0x1e>
 80056b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056bc:	2302      	movs	r3, #2
 80056be:	2200      	movs	r2, #0
 80056c0:	f000 f868 	bl	8005794 <_lseek_r>
 80056c4:	89a3      	ldrh	r3, [r4, #12]
 80056c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056ce:	81a3      	strh	r3, [r4, #12]
 80056d0:	4632      	mov	r2, r6
 80056d2:	463b      	mov	r3, r7
 80056d4:	4628      	mov	r0, r5
 80056d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056da:	f000 b817 	b.w	800570c <_write_r>

080056de <__sseek>:
 80056de:	b510      	push	{r4, lr}
 80056e0:	460c      	mov	r4, r1
 80056e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056e6:	f000 f855 	bl	8005794 <_lseek_r>
 80056ea:	1c43      	adds	r3, r0, #1
 80056ec:	89a3      	ldrh	r3, [r4, #12]
 80056ee:	bf15      	itete	ne
 80056f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80056f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80056f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80056fa:	81a3      	strheq	r3, [r4, #12]
 80056fc:	bf18      	it	ne
 80056fe:	81a3      	strhne	r3, [r4, #12]
 8005700:	bd10      	pop	{r4, pc}

08005702 <__sclose>:
 8005702:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005706:	f000 b813 	b.w	8005730 <_close_r>
	...

0800570c <_write_r>:
 800570c:	b538      	push	{r3, r4, r5, lr}
 800570e:	4d07      	ldr	r5, [pc, #28]	; (800572c <_write_r+0x20>)
 8005710:	4604      	mov	r4, r0
 8005712:	4608      	mov	r0, r1
 8005714:	4611      	mov	r1, r2
 8005716:	2200      	movs	r2, #0
 8005718:	602a      	str	r2, [r5, #0]
 800571a:	461a      	mov	r2, r3
 800571c:	f7fb fa8f 	bl	8000c3e <_write>
 8005720:	1c43      	adds	r3, r0, #1
 8005722:	d102      	bne.n	800572a <_write_r+0x1e>
 8005724:	682b      	ldr	r3, [r5, #0]
 8005726:	b103      	cbz	r3, 800572a <_write_r+0x1e>
 8005728:	6023      	str	r3, [r4, #0]
 800572a:	bd38      	pop	{r3, r4, r5, pc}
 800572c:	200001cc 	.word	0x200001cc

08005730 <_close_r>:
 8005730:	b538      	push	{r3, r4, r5, lr}
 8005732:	4d06      	ldr	r5, [pc, #24]	; (800574c <_close_r+0x1c>)
 8005734:	2300      	movs	r3, #0
 8005736:	4604      	mov	r4, r0
 8005738:	4608      	mov	r0, r1
 800573a:	602b      	str	r3, [r5, #0]
 800573c:	f7fb fa9b 	bl	8000c76 <_close>
 8005740:	1c43      	adds	r3, r0, #1
 8005742:	d102      	bne.n	800574a <_close_r+0x1a>
 8005744:	682b      	ldr	r3, [r5, #0]
 8005746:	b103      	cbz	r3, 800574a <_close_r+0x1a>
 8005748:	6023      	str	r3, [r4, #0]
 800574a:	bd38      	pop	{r3, r4, r5, pc}
 800574c:	200001cc 	.word	0x200001cc

08005750 <_fstat_r>:
 8005750:	b538      	push	{r3, r4, r5, lr}
 8005752:	4d07      	ldr	r5, [pc, #28]	; (8005770 <_fstat_r+0x20>)
 8005754:	2300      	movs	r3, #0
 8005756:	4604      	mov	r4, r0
 8005758:	4608      	mov	r0, r1
 800575a:	4611      	mov	r1, r2
 800575c:	602b      	str	r3, [r5, #0]
 800575e:	f7fb fa96 	bl	8000c8e <_fstat>
 8005762:	1c43      	adds	r3, r0, #1
 8005764:	d102      	bne.n	800576c <_fstat_r+0x1c>
 8005766:	682b      	ldr	r3, [r5, #0]
 8005768:	b103      	cbz	r3, 800576c <_fstat_r+0x1c>
 800576a:	6023      	str	r3, [r4, #0]
 800576c:	bd38      	pop	{r3, r4, r5, pc}
 800576e:	bf00      	nop
 8005770:	200001cc 	.word	0x200001cc

08005774 <_isatty_r>:
 8005774:	b538      	push	{r3, r4, r5, lr}
 8005776:	4d06      	ldr	r5, [pc, #24]	; (8005790 <_isatty_r+0x1c>)
 8005778:	2300      	movs	r3, #0
 800577a:	4604      	mov	r4, r0
 800577c:	4608      	mov	r0, r1
 800577e:	602b      	str	r3, [r5, #0]
 8005780:	f7fb fa95 	bl	8000cae <_isatty>
 8005784:	1c43      	adds	r3, r0, #1
 8005786:	d102      	bne.n	800578e <_isatty_r+0x1a>
 8005788:	682b      	ldr	r3, [r5, #0]
 800578a:	b103      	cbz	r3, 800578e <_isatty_r+0x1a>
 800578c:	6023      	str	r3, [r4, #0]
 800578e:	bd38      	pop	{r3, r4, r5, pc}
 8005790:	200001cc 	.word	0x200001cc

08005794 <_lseek_r>:
 8005794:	b538      	push	{r3, r4, r5, lr}
 8005796:	4d07      	ldr	r5, [pc, #28]	; (80057b4 <_lseek_r+0x20>)
 8005798:	4604      	mov	r4, r0
 800579a:	4608      	mov	r0, r1
 800579c:	4611      	mov	r1, r2
 800579e:	2200      	movs	r2, #0
 80057a0:	602a      	str	r2, [r5, #0]
 80057a2:	461a      	mov	r2, r3
 80057a4:	f7fb fa8e 	bl	8000cc4 <_lseek>
 80057a8:	1c43      	adds	r3, r0, #1
 80057aa:	d102      	bne.n	80057b2 <_lseek_r+0x1e>
 80057ac:	682b      	ldr	r3, [r5, #0]
 80057ae:	b103      	cbz	r3, 80057b2 <_lseek_r+0x1e>
 80057b0:	6023      	str	r3, [r4, #0]
 80057b2:	bd38      	pop	{r3, r4, r5, pc}
 80057b4:	200001cc 	.word	0x200001cc

080057b8 <__malloc_lock>:
 80057b8:	4801      	ldr	r0, [pc, #4]	; (80057c0 <__malloc_lock+0x8>)
 80057ba:	f7ff bb55 	b.w	8004e68 <__retarget_lock_acquire_recursive>
 80057be:	bf00      	nop
 80057c0:	200001c4 	.word	0x200001c4

080057c4 <__malloc_unlock>:
 80057c4:	4801      	ldr	r0, [pc, #4]	; (80057cc <__malloc_unlock+0x8>)
 80057c6:	f7ff bb50 	b.w	8004e6a <__retarget_lock_release_recursive>
 80057ca:	bf00      	nop
 80057cc:	200001c4 	.word	0x200001c4

080057d0 <_read_r>:
 80057d0:	b538      	push	{r3, r4, r5, lr}
 80057d2:	4d07      	ldr	r5, [pc, #28]	; (80057f0 <_read_r+0x20>)
 80057d4:	4604      	mov	r4, r0
 80057d6:	4608      	mov	r0, r1
 80057d8:	4611      	mov	r1, r2
 80057da:	2200      	movs	r2, #0
 80057dc:	602a      	str	r2, [r5, #0]
 80057de:	461a      	mov	r2, r3
 80057e0:	f7fb fa10 	bl	8000c04 <_read>
 80057e4:	1c43      	adds	r3, r0, #1
 80057e6:	d102      	bne.n	80057ee <_read_r+0x1e>
 80057e8:	682b      	ldr	r3, [r5, #0]
 80057ea:	b103      	cbz	r3, 80057ee <_read_r+0x1e>
 80057ec:	6023      	str	r3, [r4, #0]
 80057ee:	bd38      	pop	{r3, r4, r5, pc}
 80057f0:	200001cc 	.word	0x200001cc

080057f4 <_init>:
 80057f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057f6:	bf00      	nop
 80057f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057fa:	bc08      	pop	{r3}
 80057fc:	469e      	mov	lr, r3
 80057fe:	4770      	bx	lr

08005800 <_fini>:
 8005800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005802:	bf00      	nop
 8005804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005806:	bc08      	pop	{r3}
 8005808:	469e      	mov	lr, r3
 800580a:	4770      	bx	lr
