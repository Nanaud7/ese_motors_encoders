
ese_motors_encoders.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005484  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08005654  08005654  00015654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800572c  0800572c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800572c  0800572c  0001572c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005734  08005734  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005734  08005734  00015734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005738  08005738  00015738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800573c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  20000070  080057ac  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  080057ac  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013f49  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027f5  00000000  00000000  00033fe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df0  00000000  00000000  000367e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce8  00000000  00000000  000375d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022bff  00000000  00000000  000382b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000117ae  00000000  00000000  0005aeb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d26da  00000000  00000000  0006c665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013ed3f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000412c  00000000  00000000  0013ed94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800563c 	.word	0x0800563c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	0800563c 	.word	0x0800563c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <Mot_Init_SetTimer>:
 *	@param	Motor is a Mot_Struct structure
 *	@param 	htim is the TIM handle
 *  @param  Channel is the TIM Channels
 *	@retval 0
 */
uint8_t Mot_Init_SetTimer(Mot_Struct* Motor, TIM_HandleTypeDef *htim, uint32_t Channel){
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60f8      	str	r0, [r7, #12]
 80005b0:	60b9      	str	r1, [r7, #8]
 80005b2:	607a      	str	r2, [r7, #4]
	Motor->Timer = htim;
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	68ba      	ldr	r2, [r7, #8]
 80005b8:	601a      	str	r2, [r3, #0]
	Motor->Timer_Channel = Channel;
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	687a      	ldr	r2, [r7, #4]
 80005be:	605a      	str	r2, [r3, #4]

	HAL_TIM_PWM_Start(Motor->Timer, Motor->Timer_Channel);
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	681a      	ldr	r2, [r3, #0]
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	685b      	ldr	r3, [r3, #4]
 80005c8:	4619      	mov	r1, r3
 80005ca:	4610      	mov	r0, r2
 80005cc:	f001 ffbe 	bl	800254c <HAL_TIM_PWM_Start>
	return 0;
 80005d0:	2300      	movs	r3, #0
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	3710      	adds	r7, #16
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}

080005da <Mot_Init_SetGPIOs>:
 *	@param 	IN2_GPIOx is a GPIOx where x can be (A..K) to select the GPIO peripheral for STM32
 *  @param  IN2_GPIO_Pin specifies the port bit
 *	@retval 0
 */
uint8_t Mot_Init_SetGPIOs(Mot_Struct* Motor, GPIO_TypeDef* IN1_GPIOx, uint16_t IN1_GPIO_Pin,
		GPIO_TypeDef* IN2_GPIOx, uint16_t IN2_GPIO_Pin){
 80005da:	b480      	push	{r7}
 80005dc:	b085      	sub	sp, #20
 80005de:	af00      	add	r7, sp, #0
 80005e0:	60f8      	str	r0, [r7, #12]
 80005e2:	60b9      	str	r1, [r7, #8]
 80005e4:	603b      	str	r3, [r7, #0]
 80005e6:	4613      	mov	r3, r2
 80005e8:	80fb      	strh	r3, [r7, #6]
	Motor->IN1_GPIOx = IN1_GPIOx;
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	68ba      	ldr	r2, [r7, #8]
 80005ee:	609a      	str	r2, [r3, #8]
	Motor->IN1_GPIO_Pin = IN1_GPIO_Pin;
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	88fa      	ldrh	r2, [r7, #6]
 80005f4:	819a      	strh	r2, [r3, #12]
	Motor->IN2_GPIOx = IN2_GPIOx;
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	683a      	ldr	r2, [r7, #0]
 80005fa:	611a      	str	r2, [r3, #16]
	Motor->IN2_GPIO_Pin = IN2_GPIO_Pin;
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	8b3a      	ldrh	r2, [r7, #24]
 8000600:	829a      	strh	r2, [r3, #20]
	return 0;
 8000602:	2300      	movs	r3, #0
}
 8000604:	4618      	mov	r0, r3
 8000606:	3714      	adds	r7, #20
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr

08000610 <Mot_SetDirection>:
 *		@arg 	MOTOR_FORWARD
 *		@arg 	MOTOR_REVERSE
 *	@retval 0
 */

uint8_t Mot_SetDirection(Mot_Struct* Motor, uint8_t direction){
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
 8000618:	460b      	mov	r3, r1
 800061a:	70fb      	strb	r3, [r7, #3]
	switch(direction){
 800061c:	78fb      	ldrb	r3, [r7, #3]
 800061e:	2b02      	cmp	r3, #2
 8000620:	d028      	beq.n	8000674 <Mot_SetDirection+0x64>
 8000622:	2b02      	cmp	r3, #2
 8000624:	dc37      	bgt.n	8000696 <Mot_SetDirection+0x86>
 8000626:	2b00      	cmp	r3, #0
 8000628:	d002      	beq.n	8000630 <Mot_SetDirection+0x20>
 800062a:	2b01      	cmp	r3, #1
 800062c:	d011      	beq.n	8000652 <Mot_SetDirection+0x42>
 800062e:	e032      	b.n	8000696 <Mot_SetDirection+0x86>

	case MOTOR_STOP:
		HAL_GPIO_WritePin(Motor->IN1_GPIOx, Motor->IN1_GPIO_Pin, GPIO_PIN_RESET);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	6898      	ldr	r0, [r3, #8]
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	899b      	ldrh	r3, [r3, #12]
 8000638:	2200      	movs	r2, #0
 800063a:	4619      	mov	r1, r3
 800063c:	f001 f95a 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor->IN2_GPIOx, Motor->IN2_GPIO_Pin, GPIO_PIN_RESET);
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	6918      	ldr	r0, [r3, #16]
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	8a9b      	ldrh	r3, [r3, #20]
 8000648:	2200      	movs	r2, #0
 800064a:	4619      	mov	r1, r3
 800064c:	f001 f952 	bl	80018f4 <HAL_GPIO_WritePin>
		break;
 8000650:	e031      	b.n	80006b6 <Mot_SetDirection+0xa6>

	case MOTOR_FORWARD:
		HAL_GPIO_WritePin(Motor->IN1_GPIOx, Motor->IN1_GPIO_Pin, GPIO_PIN_SET);
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	6898      	ldr	r0, [r3, #8]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	899b      	ldrh	r3, [r3, #12]
 800065a:	2201      	movs	r2, #1
 800065c:	4619      	mov	r1, r3
 800065e:	f001 f949 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor->IN2_GPIOx, Motor->IN2_GPIO_Pin, GPIO_PIN_RESET);
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	6918      	ldr	r0, [r3, #16]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	8a9b      	ldrh	r3, [r3, #20]
 800066a:	2200      	movs	r2, #0
 800066c:	4619      	mov	r1, r3
 800066e:	f001 f941 	bl	80018f4 <HAL_GPIO_WritePin>
		break;
 8000672:	e020      	b.n	80006b6 <Mot_SetDirection+0xa6>

	case MOTOR_REVERSE:
		HAL_GPIO_WritePin(Motor->IN1_GPIOx, Motor->IN1_GPIO_Pin, GPIO_PIN_RESET);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	6898      	ldr	r0, [r3, #8]
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	899b      	ldrh	r3, [r3, #12]
 800067c:	2200      	movs	r2, #0
 800067e:	4619      	mov	r1, r3
 8000680:	f001 f938 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor->IN2_GPIOx, Motor->IN2_GPIO_Pin, GPIO_PIN_SET);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	6918      	ldr	r0, [r3, #16]
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	8a9b      	ldrh	r3, [r3, #20]
 800068c:	2201      	movs	r2, #1
 800068e:	4619      	mov	r1, r3
 8000690:	f001 f930 	bl	80018f4 <HAL_GPIO_WritePin>
		break;
 8000694:	e00f      	b.n	80006b6 <Mot_SetDirection+0xa6>

	default:
		HAL_GPIO_WritePin(Motor->IN1_GPIOx, Motor->IN1_GPIO_Pin, GPIO_PIN_RESET);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	6898      	ldr	r0, [r3, #8]
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	899b      	ldrh	r3, [r3, #12]
 800069e:	2200      	movs	r2, #0
 80006a0:	4619      	mov	r1, r3
 80006a2:	f001 f927 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor->IN2_GPIOx, Motor->IN2_GPIO_Pin, GPIO_PIN_RESET);
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	6918      	ldr	r0, [r3, #16]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	8a9b      	ldrh	r3, [r3, #20]
 80006ae:	2200      	movs	r2, #0
 80006b0:	4619      	mov	r1, r3
 80006b2:	f001 f91f 	bl	80018f4 <HAL_GPIO_WritePin>
	}
}
 80006b6:	bf00      	nop
 80006b8:	4618      	mov	r0, r3
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <Mot_SetDutyCycle>:
/*	@brief	Set the PWM Duty Cycle
 *	@param	Motor is a Mot_Struct structure
 *	@param	duty_cycle is value between 0 and 100
 *	@retval 0
 */
uint8_t Mot_SetDutyCycle(Mot_Struct* Motor, uint8_t duty_cycle){
 80006c0:	b480      	push	{r7}
 80006c2:	b085      	sub	sp, #20
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	460b      	mov	r3, r1
 80006ca:	70fb      	strb	r3, [r7, #3]
	if(duty_cycle > 100) duty_cycle = 100;
 80006cc:	78fb      	ldrb	r3, [r7, #3]
 80006ce:	2b64      	cmp	r3, #100	; 0x64
 80006d0:	d901      	bls.n	80006d6 <Mot_SetDutyCycle+0x16>
 80006d2:	2364      	movs	r3, #100	; 0x64
 80006d4:	70fb      	strb	r3, [r7, #3]

	float pulse = ((float)duty_cycle / 100) * (float)COUNTER_PERIOD;
 80006d6:	78fb      	ldrb	r3, [r7, #3]
 80006d8:	ee07 3a90 	vmov	s15, r3
 80006dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80006e0:	eddf 6a23 	vldr	s13, [pc, #140]	; 8000770 <Mot_SetDutyCycle+0xb0>
 80006e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006e8:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8000774 <Mot_SetDutyCycle+0xb4>
 80006ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006f0:	edc7 7a03 	vstr	s15, [r7, #12]

	__HAL_TIM_SET_COMPARE(Motor->Timer, Motor->Timer_Channel, (uint32_t)pulse);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	685b      	ldr	r3, [r3, #4]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d10a      	bne.n	8000712 <Mot_SetDutyCycle+0x52>
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	edd7 7a03 	vldr	s15, [r7, #12]
 8000706:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800070a:	ee17 2a90 	vmov	r2, s15
 800070e:	635a      	str	r2, [r3, #52]	; 0x34
 8000710:	e027      	b.n	8000762 <Mot_SetDutyCycle+0xa2>
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	685b      	ldr	r3, [r3, #4]
 8000716:	2b04      	cmp	r3, #4
 8000718:	d10a      	bne.n	8000730 <Mot_SetDutyCycle+0x70>
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	681a      	ldr	r2, [r3, #0]
 8000720:	edd7 7a03 	vldr	s15, [r7, #12]
 8000724:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000728:	ee17 3a90 	vmov	r3, s15
 800072c:	6393      	str	r3, [r2, #56]	; 0x38
 800072e:	e018      	b.n	8000762 <Mot_SetDutyCycle+0xa2>
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	685b      	ldr	r3, [r3, #4]
 8000734:	2b08      	cmp	r3, #8
 8000736:	d10a      	bne.n	800074e <Mot_SetDutyCycle+0x8e>
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	681a      	ldr	r2, [r3, #0]
 800073e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000742:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000746:	ee17 3a90 	vmov	r3, s15
 800074a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800074c:	e009      	b.n	8000762 <Mot_SetDutyCycle+0xa2>
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	edd7 7a03 	vldr	s15, [r7, #12]
 8000758:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800075c:	ee17 3a90 	vmov	r3, s15
 8000760:	6413      	str	r3, [r2, #64]	; 0x40
	return 0;
 8000762:	2300      	movs	r3, #0
}
 8000764:	4618      	mov	r0, r3
 8000766:	3714      	adds	r7, #20
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr
 8000770:	42c80000 	.word	0x42c80000
 8000774:	42200000 	.word	0x42200000

08000778 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08a      	sub	sp, #40	; 0x28
 800077c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077e:	f107 0314 	add.w	r3, r7, #20
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
 800078c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	613b      	str	r3, [r7, #16]
 8000792:	4b37      	ldr	r3, [pc, #220]	; (8000870 <MX_GPIO_Init+0xf8>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a36      	ldr	r2, [pc, #216]	; (8000870 <MX_GPIO_Init+0xf8>)
 8000798:	f043 0304 	orr.w	r3, r3, #4
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b34      	ldr	r3, [pc, #208]	; (8000870 <MX_GPIO_Init+0xf8>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0304 	and.w	r3, r3, #4
 80007a6:	613b      	str	r3, [r7, #16]
 80007a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60fb      	str	r3, [r7, #12]
 80007ae:	4b30      	ldr	r3, [pc, #192]	; (8000870 <MX_GPIO_Init+0xf8>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a2f      	ldr	r2, [pc, #188]	; (8000870 <MX_GPIO_Init+0xf8>)
 80007b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b2d      	ldr	r3, [pc, #180]	; (8000870 <MX_GPIO_Init+0xf8>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	4b29      	ldr	r3, [pc, #164]	; (8000870 <MX_GPIO_Init+0xf8>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a28      	ldr	r2, [pc, #160]	; (8000870 <MX_GPIO_Init+0xf8>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b26      	ldr	r3, [pc, #152]	; (8000870 <MX_GPIO_Init+0xf8>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	60bb      	str	r3, [r7, #8]
 80007e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	4b22      	ldr	r3, [pc, #136]	; (8000870 <MX_GPIO_Init+0xf8>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a21      	ldr	r2, [pc, #132]	; (8000870 <MX_GPIO_Init+0xf8>)
 80007ec:	f043 0302 	orr.w	r3, r3, #2
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b1f      	ldr	r3, [pc, #124]	; (8000870 <MX_GPIO_Init+0xf8>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0302 	and.w	r3, r3, #2
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOT_IN1_Pin|MOT_IN2_Pin, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	2103      	movs	r1, #3
 8000802:	481c      	ldr	r0, [pc, #112]	; (8000874 <MX_GPIO_Init+0xfc>)
 8000804:	f001 f876 	bl	80018f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000808:	2200      	movs	r2, #0
 800080a:	2120      	movs	r1, #32
 800080c:	481a      	ldr	r0, [pc, #104]	; (8000878 <MX_GPIO_Init+0x100>)
 800080e:	f001 f871 	bl	80018f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000812:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000816:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000818:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800081c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000822:	f107 0314 	add.w	r3, r7, #20
 8000826:	4619      	mov	r1, r3
 8000828:	4812      	ldr	r0, [pc, #72]	; (8000874 <MX_GPIO_Init+0xfc>)
 800082a:	f000 fecf 	bl	80015cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MOT_IN1_Pin|MOT_IN2_Pin;
 800082e:	2303      	movs	r3, #3
 8000830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000832:	2301      	movs	r3, #1
 8000834:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083a:	2300      	movs	r3, #0
 800083c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800083e:	f107 0314 	add.w	r3, r7, #20
 8000842:	4619      	mov	r1, r3
 8000844:	480b      	ldr	r0, [pc, #44]	; (8000874 <MX_GPIO_Init+0xfc>)
 8000846:	f000 fec1 	bl	80015cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800084a:	2320      	movs	r3, #32
 800084c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084e:	2301      	movs	r3, #1
 8000850:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000856:	2300      	movs	r3, #0
 8000858:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800085a:	f107 0314 	add.w	r3, r7, #20
 800085e:	4619      	mov	r1, r3
 8000860:	4805      	ldr	r0, [pc, #20]	; (8000878 <MX_GPIO_Init+0x100>)
 8000862:	f000 feb3 	bl	80015cc <HAL_GPIO_Init>

}
 8000866:	bf00      	nop
 8000868:	3728      	adds	r7, #40	; 0x28
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40023800 	.word	0x40023800
 8000874:	40020800 	.word	0x40020800
 8000878:	40020000 	.word	0x40020000

0800087c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08a      	sub	sp, #40	; 0x28
 8000880:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000882:	f000 fc8d 	bl	80011a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000886:	f000 f845 	bl	8000914 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800088a:	f7ff ff75 	bl	8000778 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800088e:	f000 fbe3 	bl	8001058 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000892:	f000 f9f9 	bl	8000c88 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000896:	f000 fa97 	bl	8000dc8 <MX_TIM2_Init>
  MX_TIM6_Init();
 800089a:	f000 fae9 	bl	8000e70 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  printf("\r\nese_motors_encoders\r\n");
 800089e:	4816      	ldr	r0, [pc, #88]	; (80008f8 <main+0x7c>)
 80008a0:	f003 ff86 	bl	80047b0 <puts>

  // Configuration de la réception UART avec interruption
  HAL_UART_Receive_IT(&huart2, (uint8_t*)&data, 1);
 80008a4:	2201      	movs	r2, #1
 80008a6:	4915      	ldr	r1, [pc, #84]	; (80008fc <main+0x80>)
 80008a8:	4815      	ldr	r0, [pc, #84]	; (8000900 <main+0x84>)
 80008aa:	f002 ffe0 	bl	800386e <HAL_UART_Receive_IT>

  // Initialisation du Moteur A
  Mot_Struct MoteurA;
  Mot_Init_SetTimer(&MoteurA, &htim1, TIM_CHANNEL_1);
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	2200      	movs	r2, #0
 80008b2:	4914      	ldr	r1, [pc, #80]	; (8000904 <main+0x88>)
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff fe77 	bl	80005a8 <Mot_Init_SetTimer>
  Mot_Init_SetGPIOs(&MoteurA, GPIOC, GPIO_PIN_0, GPIOC, GPIO_PIN_1); // IN1:PC0 et IN2:PC1
 80008ba:	1d38      	adds	r0, r7, #4
 80008bc:	2302      	movs	r3, #2
 80008be:	9300      	str	r3, [sp, #0]
 80008c0:	4b11      	ldr	r3, [pc, #68]	; (8000908 <main+0x8c>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	4910      	ldr	r1, [pc, #64]	; (8000908 <main+0x8c>)
 80008c6:	f7ff fe88 	bl	80005da <Mot_Init_SetGPIOs>
  Mot_SetDirection(&MoteurA, MOTOR_REVERSE);
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	2102      	movs	r1, #2
 80008ce:	4618      	mov	r0, r3
 80008d0:	f7ff fe9e 	bl	8000610 <Mot_SetDirection>
  Mot_SetDutyCycle(&MoteurA, 65);
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	2141      	movs	r1, #65	; 0x41
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff fef1 	bl	80006c0 <Mot_SetDutyCycle>

  // Initialisation du Codeur A
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 & TIM_CHANNEL_2);
 80008de:	2100      	movs	r1, #0
 80008e0:	480a      	ldr	r0, [pc, #40]	; (800090c <main+0x90>)
 80008e2:	f001 ffa1 	bl	8002828 <HAL_TIM_Encoder_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  int i = TIM2->CNT;
 80008e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ec:	61fb      	str	r3, [r7, #28]
	  printf("Ticks = %d\r\n",i);
 80008ee:	69f9      	ldr	r1, [r7, #28]
 80008f0:	4807      	ldr	r0, [pc, #28]	; (8000910 <main+0x94>)
 80008f2:	f003 fed7 	bl	80046a4 <iprintf>
  {
 80008f6:	e7f6      	b.n	80008e6 <main+0x6a>
 80008f8:	08005654 	.word	0x08005654
 80008fc:	20000098 	.word	0x20000098
 8000900:	20000178 	.word	0x20000178
 8000904:	200000e8 	.word	0x200000e8
 8000908:	40020800 	.word	0x40020800
 800090c:	20000130 	.word	0x20000130
 8000910:	0800566c 	.word	0x0800566c

08000914 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b094      	sub	sp, #80	; 0x50
 8000918:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	2234      	movs	r2, #52	; 0x34
 8000920:	2100      	movs	r1, #0
 8000922:	4618      	mov	r0, r3
 8000924:	f003 feb6 	bl	8004694 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000928:	f107 0308 	add.w	r3, r7, #8
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
 8000936:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000938:	2300      	movs	r3, #0
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	4b2a      	ldr	r3, [pc, #168]	; (80009e8 <SystemClock_Config+0xd4>)
 800093e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000940:	4a29      	ldr	r2, [pc, #164]	; (80009e8 <SystemClock_Config+0xd4>)
 8000942:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000946:	6413      	str	r3, [r2, #64]	; 0x40
 8000948:	4b27      	ldr	r3, [pc, #156]	; (80009e8 <SystemClock_Config+0xd4>)
 800094a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000954:	2300      	movs	r3, #0
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	4b24      	ldr	r3, [pc, #144]	; (80009ec <SystemClock_Config+0xd8>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000960:	4a22      	ldr	r2, [pc, #136]	; (80009ec <SystemClock_Config+0xd8>)
 8000962:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000966:	6013      	str	r3, [r2, #0]
 8000968:	4b20      	ldr	r3, [pc, #128]	; (80009ec <SystemClock_Config+0xd8>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000970:	603b      	str	r3, [r7, #0]
 8000972:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000974:	2302      	movs	r3, #2
 8000976:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000978:	2301      	movs	r3, #1
 800097a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800097c:	2310      	movs	r3, #16
 800097e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000980:	2302      	movs	r3, #2
 8000982:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000984:	2300      	movs	r3, #0
 8000986:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000988:	2310      	movs	r3, #16
 800098a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800098c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000990:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000992:	2304      	movs	r3, #4
 8000994:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000996:	2302      	movs	r3, #2
 8000998:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800099a:	2302      	movs	r3, #2
 800099c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	4618      	mov	r0, r3
 80009a4:	f001 fa8c 	bl	8001ec0 <HAL_RCC_OscConfig>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80009ae:	f000 f837 	bl	8000a20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b2:	230f      	movs	r3, #15
 80009b4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009b6:	2302      	movs	r3, #2
 80009b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ba:	2300      	movs	r3, #0
 80009bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009c4:	2300      	movs	r3, #0
 80009c6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009c8:	f107 0308 	add.w	r3, r7, #8
 80009cc:	2102      	movs	r1, #2
 80009ce:	4618      	mov	r0, r3
 80009d0:	f000 ffaa 	bl	8001928 <HAL_RCC_ClockConfig>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <SystemClock_Config+0xca>
  {
    Error_Handler();
 80009da:	f000 f821 	bl	8000a20 <Error_Handler>
  }
}
 80009de:	bf00      	nop
 80009e0:	3750      	adds	r7, #80	; 0x50
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40023800 	.word	0x40023800
 80009ec:	40007000 	.word	0x40007000

080009f0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart){
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)&data, 1, 0xFFFF);
 80009f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009fc:	2201      	movs	r2, #1
 80009fe:	4906      	ldr	r1, [pc, #24]	; (8000a18 <HAL_UART_RxCpltCallback+0x28>)
 8000a00:	4806      	ldr	r0, [pc, #24]	; (8000a1c <HAL_UART_RxCpltCallback+0x2c>)
 8000a02:	f002 fea2 	bl	800374a <HAL_UART_Transmit>
    HAL_UART_Receive_IT(&huart2, (uint8_t*)&data, 1);
 8000a06:	2201      	movs	r2, #1
 8000a08:	4903      	ldr	r1, [pc, #12]	; (8000a18 <HAL_UART_RxCpltCallback+0x28>)
 8000a0a:	4804      	ldr	r0, [pc, #16]	; (8000a1c <HAL_UART_RxCpltCallback+0x2c>)
 8000a0c:	f002 ff2f 	bl	800386e <HAL_UART_Receive_IT>
}
 8000a10:	bf00      	nop
 8000a12:	3708      	adds	r7, #8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20000098 	.word	0x20000098
 8000a1c:	20000178 	.word	0x20000178

08000a20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a24:	b672      	cpsid	i
}
 8000a26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <Error_Handler+0x8>
	...

08000a2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	607b      	str	r3, [r7, #4]
 8000a36:	4b10      	ldr	r3, [pc, #64]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3a:	4a0f      	ldr	r2, [pc, #60]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a40:	6453      	str	r3, [r2, #68]	; 0x44
 8000a42:	4b0d      	ldr	r3, [pc, #52]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	603b      	str	r3, [r7, #0]
 8000a52:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a56:	4a08      	ldr	r2, [pc, #32]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a5e:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a6a:	2007      	movs	r0, #7
 8000a6c:	f000 fcda 	bl	8001424 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a70:	bf00      	nop
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40023800 	.word	0x40023800

08000a7c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000a84:	1d39      	adds	r1, r7, #4
 8000a86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	4803      	ldr	r0, [pc, #12]	; (8000a9c <__io_putchar+0x20>)
 8000a8e:	f002 fe5c 	bl	800374a <HAL_UART_Transmit>

  return ch;
 8000a92:	687b      	ldr	r3, [r7, #4]
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20000178 	.word	0x20000178

08000aa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <NMI_Handler+0x4>

08000aa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aaa:	e7fe      	b.n	8000aaa <HardFault_Handler+0x4>

08000aac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <MemManage_Handler+0x4>

08000ab2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab6:	e7fe      	b.n	8000ab6 <BusFault_Handler+0x4>

08000ab8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <UsageFault_Handler+0x4>

08000abe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aec:	f000 fbaa 	bl	8001244 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000af8:	4802      	ldr	r0, [pc, #8]	; (8000b04 <USART2_IRQHandler+0x10>)
 8000afa:	f002 fee9 	bl	80038d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000178 	.word	0x20000178

08000b08 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b0c:	4802      	ldr	r0, [pc, #8]	; (8000b18 <TIM6_DAC_IRQHandler+0x10>)
 8000b0e:	f001 ff19 	bl	8002944 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	200000a0 	.word	0x200000a0

08000b1c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	60b9      	str	r1, [r7, #8]
 8000b26:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b28:	2300      	movs	r3, #0
 8000b2a:	617b      	str	r3, [r7, #20]
 8000b2c:	e00a      	b.n	8000b44 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b2e:	f3af 8000 	nop.w
 8000b32:	4601      	mov	r1, r0
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	1c5a      	adds	r2, r3, #1
 8000b38:	60ba      	str	r2, [r7, #8]
 8000b3a:	b2ca      	uxtb	r2, r1
 8000b3c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	3301      	adds	r3, #1
 8000b42:	617b      	str	r3, [r7, #20]
 8000b44:	697a      	ldr	r2, [r7, #20]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	dbf0      	blt.n	8000b2e <_read+0x12>
	}

return len;
 8000b4c:	687b      	ldr	r3, [r7, #4]
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3718      	adds	r7, #24
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b086      	sub	sp, #24
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	60f8      	str	r0, [r7, #12]
 8000b5e:	60b9      	str	r1, [r7, #8]
 8000b60:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b62:	2300      	movs	r3, #0
 8000b64:	617b      	str	r3, [r7, #20]
 8000b66:	e009      	b.n	8000b7c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	1c5a      	adds	r2, r3, #1
 8000b6c:	60ba      	str	r2, [r7, #8]
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff ff83 	bl	8000a7c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	617b      	str	r3, [r7, #20]
 8000b7c:	697a      	ldr	r2, [r7, #20]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	dbf1      	blt.n	8000b68 <_write+0x12>
	}
	return len;
 8000b84:	687b      	ldr	r3, [r7, #4]
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3718      	adds	r7, #24
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <_close>:

int _close(int file)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	b083      	sub	sp, #12
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
	return -1;
 8000b96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	b083      	sub	sp, #12
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
 8000bae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bb6:	605a      	str	r2, [r3, #4]
	return 0;
 8000bb8:	2300      	movs	r3, #0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr

08000bc6 <_isatty>:

int _isatty(int file)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	b083      	sub	sp, #12
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
	return 1;
 8000bce:	2301      	movs	r3, #1
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	60b9      	str	r1, [r7, #8]
 8000be6:	607a      	str	r2, [r7, #4]
	return 0;
 8000be8:	2300      	movs	r3, #0
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3714      	adds	r7, #20
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
	...

08000bf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c00:	4a14      	ldr	r2, [pc, #80]	; (8000c54 <_sbrk+0x5c>)
 8000c02:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <_sbrk+0x60>)
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c0c:	4b13      	ldr	r3, [pc, #76]	; (8000c5c <_sbrk+0x64>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d102      	bne.n	8000c1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c14:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <_sbrk+0x64>)
 8000c16:	4a12      	ldr	r2, [pc, #72]	; (8000c60 <_sbrk+0x68>)
 8000c18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c1a:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <_sbrk+0x64>)
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4413      	add	r3, r2
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d207      	bcs.n	8000c38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c28:	f003 fd0a 	bl	8004640 <__errno>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	220c      	movs	r2, #12
 8000c30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c32:	f04f 33ff 	mov.w	r3, #4294967295
 8000c36:	e009      	b.n	8000c4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c38:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <_sbrk+0x64>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c3e:	4b07      	ldr	r3, [pc, #28]	; (8000c5c <_sbrk+0x64>)
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4413      	add	r3, r2
 8000c46:	4a05      	ldr	r2, [pc, #20]	; (8000c5c <_sbrk+0x64>)
 8000c48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c4a:	68fb      	ldr	r3, [r7, #12]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3718      	adds	r7, #24
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20020000 	.word	0x20020000
 8000c58:	00000400 	.word	0x00000400
 8000c5c:	2000008c 	.word	0x2000008c
 8000c60:	200001d0 	.word	0x200001d0

08000c64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <SystemInit+0x20>)
 8000c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c6e:	4a05      	ldr	r2, [pc, #20]	; (8000c84 <SystemInit+0x20>)
 8000c70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b096      	sub	sp, #88	; 0x58
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c8e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
 8000c9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c9c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ca6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	605a      	str	r2, [r3, #4]
 8000cb0:	609a      	str	r2, [r3, #8]
 8000cb2:	60da      	str	r2, [r3, #12]
 8000cb4:	611a      	str	r2, [r3, #16]
 8000cb6:	615a      	str	r2, [r3, #20]
 8000cb8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000cba:	1d3b      	adds	r3, r7, #4
 8000cbc:	2220      	movs	r2, #32
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f003 fce7 	bl	8004694 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cc6:	4b3e      	ldr	r3, [pc, #248]	; (8000dc0 <MX_TIM1_Init+0x138>)
 8000cc8:	4a3e      	ldr	r2, [pc, #248]	; (8000dc4 <MX_TIM1_Init+0x13c>)
 8000cca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8000ccc:	4b3c      	ldr	r3, [pc, #240]	; (8000dc0 <MX_TIM1_Init+0x138>)
 8000cce:	2253      	movs	r2, #83	; 0x53
 8000cd0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd2:	4b3b      	ldr	r3, [pc, #236]	; (8000dc0 <MX_TIM1_Init+0x138>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 40-1;
 8000cd8:	4b39      	ldr	r3, [pc, #228]	; (8000dc0 <MX_TIM1_Init+0x138>)
 8000cda:	2227      	movs	r2, #39	; 0x27
 8000cdc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cde:	4b38      	ldr	r3, [pc, #224]	; (8000dc0 <MX_TIM1_Init+0x138>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ce4:	4b36      	ldr	r3, [pc, #216]	; (8000dc0 <MX_TIM1_Init+0x138>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cea:	4b35      	ldr	r3, [pc, #212]	; (8000dc0 <MX_TIM1_Init+0x138>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000cf0:	4833      	ldr	r0, [pc, #204]	; (8000dc0 <MX_TIM1_Init+0x138>)
 8000cf2:	f001 fb83 	bl	80023fc <HAL_TIM_Base_Init>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000cfc:	f7ff fe90 	bl	8000a20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d04:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d06:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	482c      	ldr	r0, [pc, #176]	; (8000dc0 <MX_TIM1_Init+0x138>)
 8000d0e:	f001 ffe3 	bl	8002cd8 <HAL_TIM_ConfigClockSource>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000d18:	f7ff fe82 	bl	8000a20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d1c:	4828      	ldr	r0, [pc, #160]	; (8000dc0 <MX_TIM1_Init+0x138>)
 8000d1e:	f001 fbbc 	bl	800249a <HAL_TIM_PWM_Init>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000d28:	f7ff fe7a 	bl	8000a20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d30:	2300      	movs	r3, #0
 8000d32:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d34:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4821      	ldr	r0, [pc, #132]	; (8000dc0 <MX_TIM1_Init+0x138>)
 8000d3c:	f002 fbd6 	bl	80034ec <HAL_TIMEx_MasterConfigSynchronization>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000d46:	f7ff fe6b 	bl	8000a20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d4a:	2360      	movs	r3, #96	; 0x60
 8000d4c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d52:	2300      	movs	r3, #0
 8000d54:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d56:	2300      	movs	r3, #0
 8000d58:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000d5a:	2304      	movs	r3, #4
 8000d5c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d62:	2300      	movs	r3, #0
 8000d64:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4814      	ldr	r0, [pc, #80]	; (8000dc0 <MX_TIM1_Init+0x138>)
 8000d70:	f001 fef0 	bl	8002b54 <HAL_TIM_PWM_ConfigChannel>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000d7a:	f7ff fe51 	bl	8000a20 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d82:	2300      	movs	r3, #0
 8000d84:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d86:	2300      	movs	r3, #0
 8000d88:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d96:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4807      	ldr	r0, [pc, #28]	; (8000dc0 <MX_TIM1_Init+0x138>)
 8000da2:	f002 fc1f 	bl	80035e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000dac:	f7ff fe38 	bl	8000a20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000db0:	4803      	ldr	r0, [pc, #12]	; (8000dc0 <MX_TIM1_Init+0x138>)
 8000db2:	f000 f917 	bl	8000fe4 <HAL_TIM_MspPostInit>

}
 8000db6:	bf00      	nop
 8000db8:	3758      	adds	r7, #88	; 0x58
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	200000e8 	.word	0x200000e8
 8000dc4:	40010000 	.word	0x40010000

08000dc8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08c      	sub	sp, #48	; 0x30
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000dce:	f107 030c 	add.w	r3, r7, #12
 8000dd2:	2224      	movs	r2, #36	; 0x24
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f003 fc5c 	bl	8004694 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ddc:	1d3b      	adds	r3, r7, #4
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000de4:	4b21      	ldr	r3, [pc, #132]	; (8000e6c <MX_TIM2_Init+0xa4>)
 8000de6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000dec:	4b1f      	ldr	r3, [pc, #124]	; (8000e6c <MX_TIM2_Init+0xa4>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df2:	4b1e      	ldr	r3, [pc, #120]	; (8000e6c <MX_TIM2_Init+0xa4>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000df8:	4b1c      	ldr	r3, [pc, #112]	; (8000e6c <MX_TIM2_Init+0xa4>)
 8000dfa:	f04f 32ff 	mov.w	r2, #4294967295
 8000dfe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e00:	4b1a      	ldr	r3, [pc, #104]	; (8000e6c <MX_TIM2_Init+0xa4>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e06:	4b19      	ldr	r3, [pc, #100]	; (8000e6c <MX_TIM2_Init+0xa4>)
 8000e08:	2280      	movs	r2, #128	; 0x80
 8000e0a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e10:	2300      	movs	r3, #0
 8000e12:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e14:	2301      	movs	r3, #1
 8000e16:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000e1c:	230a      	movs	r3, #10
 8000e1e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e20:	2300      	movs	r3, #0
 8000e22:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e24:	2301      	movs	r3, #1
 8000e26:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000e30:	f107 030c 	add.w	r3, r7, #12
 8000e34:	4619      	mov	r1, r3
 8000e36:	480d      	ldr	r0, [pc, #52]	; (8000e6c <MX_TIM2_Init+0xa4>)
 8000e38:	f001 fc50 	bl	80026dc <HAL_TIM_Encoder_Init>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000e42:	f7ff fded 	bl	8000a20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e46:	2300      	movs	r3, #0
 8000e48:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e4e:	1d3b      	adds	r3, r7, #4
 8000e50:	4619      	mov	r1, r3
 8000e52:	4806      	ldr	r0, [pc, #24]	; (8000e6c <MX_TIM2_Init+0xa4>)
 8000e54:	f002 fb4a 	bl	80034ec <HAL_TIMEx_MasterConfigSynchronization>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000e5e:	f7ff fddf 	bl	8000a20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e62:	bf00      	nop
 8000e64:	3730      	adds	r7, #48	; 0x30
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000130 	.word	0x20000130

08000e70 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e76:	463b      	mov	r3, r7
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000e7e:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <MX_TIM6_Init+0x64>)
 8000e80:	4a15      	ldr	r2, [pc, #84]	; (8000ed8 <MX_TIM6_Init+0x68>)
 8000e82:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8400;
 8000e84:	4b13      	ldr	r3, [pc, #76]	; (8000ed4 <MX_TIM6_Init+0x64>)
 8000e86:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8000e8a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e8c:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <MX_TIM6_Init+0x64>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 200;
 8000e92:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <MX_TIM6_Init+0x64>)
 8000e94:	22c8      	movs	r2, #200	; 0xc8
 8000e96:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e98:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <MX_TIM6_Init+0x64>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000e9e:	480d      	ldr	r0, [pc, #52]	; (8000ed4 <MX_TIM6_Init+0x64>)
 8000ea0:	f001 faac 	bl	80023fc <HAL_TIM_Base_Init>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000eaa:	f7ff fdb9 	bl	8000a20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000eb6:	463b      	mov	r3, r7
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4806      	ldr	r0, [pc, #24]	; (8000ed4 <MX_TIM6_Init+0x64>)
 8000ebc:	f002 fb16 	bl	80034ec <HAL_TIMEx_MasterConfigSynchronization>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000ec6:	f7ff fdab 	bl	8000a20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	200000a0 	.word	0x200000a0
 8000ed8:	40001000 	.word	0x40001000

08000edc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a18      	ldr	r2, [pc, #96]	; (8000f4c <HAL_TIM_Base_MspInit+0x70>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d10e      	bne.n	8000f0c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	4b17      	ldr	r3, [pc, #92]	; (8000f50 <HAL_TIM_Base_MspInit+0x74>)
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef6:	4a16      	ldr	r2, [pc, #88]	; (8000f50 <HAL_TIM_Base_MspInit+0x74>)
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	6453      	str	r3, [r2, #68]	; 0x44
 8000efe:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <HAL_TIM_Base_MspInit+0x74>)
 8000f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000f0a:	e01a      	b.n	8000f42 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM6)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a10      	ldr	r2, [pc, #64]	; (8000f54 <HAL_TIM_Base_MspInit+0x78>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d115      	bne.n	8000f42 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	60bb      	str	r3, [r7, #8]
 8000f1a:	4b0d      	ldr	r3, [pc, #52]	; (8000f50 <HAL_TIM_Base_MspInit+0x74>)
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1e:	4a0c      	ldr	r2, [pc, #48]	; (8000f50 <HAL_TIM_Base_MspInit+0x74>)
 8000f20:	f043 0310 	orr.w	r3, r3, #16
 8000f24:	6413      	str	r3, [r2, #64]	; 0x40
 8000f26:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <HAL_TIM_Base_MspInit+0x74>)
 8000f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2a:	f003 0310 	and.w	r3, r3, #16
 8000f2e:	60bb      	str	r3, [r7, #8]
 8000f30:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000f32:	2200      	movs	r2, #0
 8000f34:	2100      	movs	r1, #0
 8000f36:	2036      	movs	r0, #54	; 0x36
 8000f38:	f000 fa7f 	bl	800143a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f3c:	2036      	movs	r0, #54	; 0x36
 8000f3e:	f000 fa98 	bl	8001472 <HAL_NVIC_EnableIRQ>
}
 8000f42:	bf00      	nop
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40010000 	.word	0x40010000
 8000f50:	40023800 	.word	0x40023800
 8000f54:	40001000 	.word	0x40001000

08000f58 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08a      	sub	sp, #40	; 0x28
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	f107 0314 	add.w	r3, r7, #20
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f78:	d12b      	bne.n	8000fd2 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	613b      	str	r3, [r7, #16]
 8000f7e:	4b17      	ldr	r3, [pc, #92]	; (8000fdc <HAL_TIM_Encoder_MspInit+0x84>)
 8000f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f82:	4a16      	ldr	r2, [pc, #88]	; (8000fdc <HAL_TIM_Encoder_MspInit+0x84>)
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	6413      	str	r3, [r2, #64]	; 0x40
 8000f8a:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <HAL_TIM_Encoder_MspInit+0x84>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <HAL_TIM_Encoder_MspInit+0x84>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	4a0f      	ldr	r2, [pc, #60]	; (8000fdc <HAL_TIM_Encoder_MspInit+0x84>)
 8000fa0:	f043 0301 	orr.w	r3, r3, #1
 8000fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa6:	4b0d      	ldr	r3, [pc, #52]	; (8000fdc <HAL_TIM_Encoder_MspInit+0x84>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc6:	f107 0314 	add.w	r3, r7, #20
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4804      	ldr	r0, [pc, #16]	; (8000fe0 <HAL_TIM_Encoder_MspInit+0x88>)
 8000fce:	f000 fafd 	bl	80015cc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000fd2:	bf00      	nop
 8000fd4:	3728      	adds	r7, #40	; 0x28
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40023800 	.word	0x40023800
 8000fe0:	40020000 	.word	0x40020000

08000fe4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b088      	sub	sp, #32
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fec:	f107 030c 	add.w	r3, r7, #12
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a12      	ldr	r2, [pc, #72]	; (800104c <HAL_TIM_MspPostInit+0x68>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d11e      	bne.n	8001044 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	60bb      	str	r3, [r7, #8]
 800100a:	4b11      	ldr	r3, [pc, #68]	; (8001050 <HAL_TIM_MspPostInit+0x6c>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	4a10      	ldr	r2, [pc, #64]	; (8001050 <HAL_TIM_MspPostInit+0x6c>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	6313      	str	r3, [r2, #48]	; 0x30
 8001016:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <HAL_TIM_MspPostInit+0x6c>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = MOT_ENA_Pin;
 8001022:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001026:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001028:	2302      	movs	r3, #2
 800102a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001030:	2300      	movs	r3, #0
 8001032:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001034:	2301      	movs	r3, #1
 8001036:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MOT_ENA_GPIO_Port, &GPIO_InitStruct);
 8001038:	f107 030c 	add.w	r3, r7, #12
 800103c:	4619      	mov	r1, r3
 800103e:	4805      	ldr	r0, [pc, #20]	; (8001054 <HAL_TIM_MspPostInit+0x70>)
 8001040:	f000 fac4 	bl	80015cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001044:	bf00      	nop
 8001046:	3720      	adds	r7, #32
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40010000 	.word	0x40010000
 8001050:	40023800 	.word	0x40023800
 8001054:	40020000 	.word	0x40020000

08001058 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800105c:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <MX_USART2_UART_Init+0x4c>)
 800105e:	4a12      	ldr	r2, [pc, #72]	; (80010a8 <MX_USART2_UART_Init+0x50>)
 8001060:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <MX_USART2_UART_Init+0x4c>)
 8001064:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001068:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800106a:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <MX_USART2_UART_Init+0x4c>)
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001070:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <MX_USART2_UART_Init+0x4c>)
 8001072:	2200      	movs	r2, #0
 8001074:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001076:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <MX_USART2_UART_Init+0x4c>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800107c:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <MX_USART2_UART_Init+0x4c>)
 800107e:	220c      	movs	r2, #12
 8001080:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001082:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <MX_USART2_UART_Init+0x4c>)
 8001084:	2200      	movs	r2, #0
 8001086:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001088:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <MX_USART2_UART_Init+0x4c>)
 800108a:	2200      	movs	r2, #0
 800108c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800108e:	4805      	ldr	r0, [pc, #20]	; (80010a4 <MX_USART2_UART_Init+0x4c>)
 8001090:	f002 fb0e 	bl	80036b0 <HAL_UART_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800109a:	f7ff fcc1 	bl	8000a20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000178 	.word	0x20000178
 80010a8:	40004400 	.word	0x40004400

080010ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	; 0x28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a1d      	ldr	r2, [pc, #116]	; (8001140 <HAL_UART_MspInit+0x94>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d133      	bne.n	8001136 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	613b      	str	r3, [r7, #16]
 80010d2:	4b1c      	ldr	r3, [pc, #112]	; (8001144 <HAL_UART_MspInit+0x98>)
 80010d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d6:	4a1b      	ldr	r2, [pc, #108]	; (8001144 <HAL_UART_MspInit+0x98>)
 80010d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010dc:	6413      	str	r3, [r2, #64]	; 0x40
 80010de:	4b19      	ldr	r3, [pc, #100]	; (8001144 <HAL_UART_MspInit+0x98>)
 80010e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e6:	613b      	str	r3, [r7, #16]
 80010e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	4b15      	ldr	r3, [pc, #84]	; (8001144 <HAL_UART_MspInit+0x98>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	4a14      	ldr	r2, [pc, #80]	; (8001144 <HAL_UART_MspInit+0x98>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	6313      	str	r3, [r2, #48]	; 0x30
 80010fa:	4b12      	ldr	r3, [pc, #72]	; (8001144 <HAL_UART_MspInit+0x98>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001106:	230c      	movs	r3, #12
 8001108:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110a:	2302      	movs	r3, #2
 800110c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001112:	2303      	movs	r3, #3
 8001114:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001116:	2307      	movs	r3, #7
 8001118:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111a:	f107 0314 	add.w	r3, r7, #20
 800111e:	4619      	mov	r1, r3
 8001120:	4809      	ldr	r0, [pc, #36]	; (8001148 <HAL_UART_MspInit+0x9c>)
 8001122:	f000 fa53 	bl	80015cc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001126:	2200      	movs	r2, #0
 8001128:	2100      	movs	r1, #0
 800112a:	2026      	movs	r0, #38	; 0x26
 800112c:	f000 f985 	bl	800143a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001130:	2026      	movs	r0, #38	; 0x26
 8001132:	f000 f99e 	bl	8001472 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001136:	bf00      	nop
 8001138:	3728      	adds	r7, #40	; 0x28
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40004400 	.word	0x40004400
 8001144:	40023800 	.word	0x40023800
 8001148:	40020000 	.word	0x40020000

0800114c <Reset_Handler>:
 800114c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001184 <LoopFillZerobss+0x12>
 8001150:	480d      	ldr	r0, [pc, #52]	; (8001188 <LoopFillZerobss+0x16>)
 8001152:	490e      	ldr	r1, [pc, #56]	; (800118c <LoopFillZerobss+0x1a>)
 8001154:	4a0e      	ldr	r2, [pc, #56]	; (8001190 <LoopFillZerobss+0x1e>)
 8001156:	2300      	movs	r3, #0
 8001158:	e002      	b.n	8001160 <LoopCopyDataInit>

0800115a <CopyDataInit>:
 800115a:	58d4      	ldr	r4, [r2, r3]
 800115c:	50c4      	str	r4, [r0, r3]
 800115e:	3304      	adds	r3, #4

08001160 <LoopCopyDataInit>:
 8001160:	18c4      	adds	r4, r0, r3
 8001162:	428c      	cmp	r4, r1
 8001164:	d3f9      	bcc.n	800115a <CopyDataInit>
 8001166:	4a0b      	ldr	r2, [pc, #44]	; (8001194 <LoopFillZerobss+0x22>)
 8001168:	4c0b      	ldr	r4, [pc, #44]	; (8001198 <LoopFillZerobss+0x26>)
 800116a:	2300      	movs	r3, #0
 800116c:	e001      	b.n	8001172 <LoopFillZerobss>

0800116e <FillZerobss>:
 800116e:	6013      	str	r3, [r2, #0]
 8001170:	3204      	adds	r2, #4

08001172 <LoopFillZerobss>:
 8001172:	42a2      	cmp	r2, r4
 8001174:	d3fb      	bcc.n	800116e <FillZerobss>
 8001176:	f7ff fd75 	bl	8000c64 <SystemInit>
 800117a:	f003 fa67 	bl	800464c <__libc_init_array>
 800117e:	f7ff fb7d 	bl	800087c <main>
 8001182:	4770      	bx	lr
 8001184:	20020000 	.word	0x20020000
 8001188:	20000000 	.word	0x20000000
 800118c:	20000070 	.word	0x20000070
 8001190:	0800573c 	.word	0x0800573c
 8001194:	20000070 	.word	0x20000070
 8001198:	200001d0 	.word	0x200001d0

0800119c <ADC_IRQHandler>:
 800119c:	e7fe      	b.n	800119c <ADC_IRQHandler>
	...

080011a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011a4:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <HAL_Init+0x40>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a0d      	ldr	r2, [pc, #52]	; (80011e0 <HAL_Init+0x40>)
 80011aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011b0:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <HAL_Init+0x40>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a0a      	ldr	r2, [pc, #40]	; (80011e0 <HAL_Init+0x40>)
 80011b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011bc:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <HAL_Init+0x40>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a07      	ldr	r2, [pc, #28]	; (80011e0 <HAL_Init+0x40>)
 80011c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011c8:	2003      	movs	r0, #3
 80011ca:	f000 f92b 	bl	8001424 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ce:	2000      	movs	r0, #0
 80011d0:	f000 f808 	bl	80011e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011d4:	f7ff fc2a 	bl	8000a2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40023c00 	.word	0x40023c00

080011e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011ec:	4b12      	ldr	r3, [pc, #72]	; (8001238 <HAL_InitTick+0x54>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	4b12      	ldr	r3, [pc, #72]	; (800123c <HAL_InitTick+0x58>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	4619      	mov	r1, r3
 80011f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80011fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001202:	4618      	mov	r0, r3
 8001204:	f000 f943 	bl	800148e <HAL_SYSTICK_Config>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e00e      	b.n	8001230 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2b0f      	cmp	r3, #15
 8001216:	d80a      	bhi.n	800122e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001218:	2200      	movs	r2, #0
 800121a:	6879      	ldr	r1, [r7, #4]
 800121c:	f04f 30ff 	mov.w	r0, #4294967295
 8001220:	f000 f90b 	bl	800143a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001224:	4a06      	ldr	r2, [pc, #24]	; (8001240 <HAL_InitTick+0x5c>)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800122a:	2300      	movs	r3, #0
 800122c:	e000      	b.n	8001230 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
}
 8001230:	4618      	mov	r0, r3
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000000 	.word	0x20000000
 800123c:	20000008 	.word	0x20000008
 8001240:	20000004 	.word	0x20000004

08001244 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001248:	4b06      	ldr	r3, [pc, #24]	; (8001264 <HAL_IncTick+0x20>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	461a      	mov	r2, r3
 800124e:	4b06      	ldr	r3, [pc, #24]	; (8001268 <HAL_IncTick+0x24>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4413      	add	r3, r2
 8001254:	4a04      	ldr	r2, [pc, #16]	; (8001268 <HAL_IncTick+0x24>)
 8001256:	6013      	str	r3, [r2, #0]
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	20000008 	.word	0x20000008
 8001268:	200001bc 	.word	0x200001bc

0800126c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  return uwTick;
 8001270:	4b03      	ldr	r3, [pc, #12]	; (8001280 <HAL_GetTick+0x14>)
 8001272:	681b      	ldr	r3, [r3, #0]
}
 8001274:	4618      	mov	r0, r3
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	200001bc 	.word	0x200001bc

08001284 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001294:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800129a:	68ba      	ldr	r2, [r7, #8]
 800129c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012a0:	4013      	ands	r3, r2
 80012a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012b6:	4a04      	ldr	r2, [pc, #16]	; (80012c8 <__NVIC_SetPriorityGrouping+0x44>)
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	60d3      	str	r3, [r2, #12]
}
 80012bc:	bf00      	nop
 80012be:	3714      	adds	r7, #20
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d0:	4b04      	ldr	r3, [pc, #16]	; (80012e4 <__NVIC_GetPriorityGrouping+0x18>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	0a1b      	lsrs	r3, r3, #8
 80012d6:	f003 0307 	and.w	r3, r3, #7
}
 80012da:	4618      	mov	r0, r3
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	db0b      	blt.n	8001312 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	f003 021f 	and.w	r2, r3, #31
 8001300:	4907      	ldr	r1, [pc, #28]	; (8001320 <__NVIC_EnableIRQ+0x38>)
 8001302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001306:	095b      	lsrs	r3, r3, #5
 8001308:	2001      	movs	r0, #1
 800130a:	fa00 f202 	lsl.w	r2, r0, r2
 800130e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	e000e100 	.word	0xe000e100

08001324 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	6039      	str	r1, [r7, #0]
 800132e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001334:	2b00      	cmp	r3, #0
 8001336:	db0a      	blt.n	800134e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	b2da      	uxtb	r2, r3
 800133c:	490c      	ldr	r1, [pc, #48]	; (8001370 <__NVIC_SetPriority+0x4c>)
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	0112      	lsls	r2, r2, #4
 8001344:	b2d2      	uxtb	r2, r2
 8001346:	440b      	add	r3, r1
 8001348:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800134c:	e00a      	b.n	8001364 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	b2da      	uxtb	r2, r3
 8001352:	4908      	ldr	r1, [pc, #32]	; (8001374 <__NVIC_SetPriority+0x50>)
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	f003 030f 	and.w	r3, r3, #15
 800135a:	3b04      	subs	r3, #4
 800135c:	0112      	lsls	r2, r2, #4
 800135e:	b2d2      	uxtb	r2, r2
 8001360:	440b      	add	r3, r1
 8001362:	761a      	strb	r2, [r3, #24]
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	e000e100 	.word	0xe000e100
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001378:	b480      	push	{r7}
 800137a:	b089      	sub	sp, #36	; 0x24
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	f1c3 0307 	rsb	r3, r3, #7
 8001392:	2b04      	cmp	r3, #4
 8001394:	bf28      	it	cs
 8001396:	2304      	movcs	r3, #4
 8001398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	3304      	adds	r3, #4
 800139e:	2b06      	cmp	r3, #6
 80013a0:	d902      	bls.n	80013a8 <NVIC_EncodePriority+0x30>
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	3b03      	subs	r3, #3
 80013a6:	e000      	b.n	80013aa <NVIC_EncodePriority+0x32>
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ac:	f04f 32ff 	mov.w	r2, #4294967295
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	43da      	mvns	r2, r3
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	401a      	ands	r2, r3
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013c0:	f04f 31ff 	mov.w	r1, #4294967295
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ca:	43d9      	mvns	r1, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d0:	4313      	orrs	r3, r2
         );
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3724      	adds	r7, #36	; 0x24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
	...

080013e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3b01      	subs	r3, #1
 80013ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013f0:	d301      	bcc.n	80013f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013f2:	2301      	movs	r3, #1
 80013f4:	e00f      	b.n	8001416 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013f6:	4a0a      	ldr	r2, [pc, #40]	; (8001420 <SysTick_Config+0x40>)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013fe:	210f      	movs	r1, #15
 8001400:	f04f 30ff 	mov.w	r0, #4294967295
 8001404:	f7ff ff8e 	bl	8001324 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001408:	4b05      	ldr	r3, [pc, #20]	; (8001420 <SysTick_Config+0x40>)
 800140a:	2200      	movs	r2, #0
 800140c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800140e:	4b04      	ldr	r3, [pc, #16]	; (8001420 <SysTick_Config+0x40>)
 8001410:	2207      	movs	r2, #7
 8001412:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	e000e010 	.word	0xe000e010

08001424 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f7ff ff29 	bl	8001284 <__NVIC_SetPriorityGrouping>
}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800143a:	b580      	push	{r7, lr}
 800143c:	b086      	sub	sp, #24
 800143e:	af00      	add	r7, sp, #0
 8001440:	4603      	mov	r3, r0
 8001442:	60b9      	str	r1, [r7, #8]
 8001444:	607a      	str	r2, [r7, #4]
 8001446:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800144c:	f7ff ff3e 	bl	80012cc <__NVIC_GetPriorityGrouping>
 8001450:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	68b9      	ldr	r1, [r7, #8]
 8001456:	6978      	ldr	r0, [r7, #20]
 8001458:	f7ff ff8e 	bl	8001378 <NVIC_EncodePriority>
 800145c:	4602      	mov	r2, r0
 800145e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001462:	4611      	mov	r1, r2
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff ff5d 	bl	8001324 <__NVIC_SetPriority>
}
 800146a:	bf00      	nop
 800146c:	3718      	adds	r7, #24
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b082      	sub	sp, #8
 8001476:	af00      	add	r7, sp, #0
 8001478:	4603      	mov	r3, r0
 800147a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800147c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff ff31 	bl	80012e8 <__NVIC_EnableIRQ>
}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b082      	sub	sp, #8
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f7ff ffa2 	bl	80013e0 <SysTick_Config>
 800149c:	4603      	mov	r3, r0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b084      	sub	sp, #16
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80014b4:	f7ff feda 	bl	800126c <HAL_GetTick>
 80014b8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d008      	beq.n	80014d8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2280      	movs	r2, #128	; 0x80
 80014ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e052      	b.n	800157e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f022 0216 	bic.w	r2, r2, #22
 80014e6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	695a      	ldr	r2, [r3, #20]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014f6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d103      	bne.n	8001508 <HAL_DMA_Abort+0x62>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001504:	2b00      	cmp	r3, #0
 8001506:	d007      	beq.n	8001518 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f022 0208 	bic.w	r2, r2, #8
 8001516:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f022 0201 	bic.w	r2, r2, #1
 8001526:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001528:	e013      	b.n	8001552 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800152a:	f7ff fe9f 	bl	800126c <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b05      	cmp	r3, #5
 8001536:	d90c      	bls.n	8001552 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2220      	movs	r2, #32
 800153c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2203      	movs	r2, #3
 8001542:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2200      	movs	r2, #0
 800154a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e015      	b.n	800157e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0301 	and.w	r3, r3, #1
 800155c:	2b00      	cmp	r3, #0
 800155e:	d1e4      	bne.n	800152a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001564:	223f      	movs	r2, #63	; 0x3f
 8001566:	409a      	lsls	r2, r3
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2201      	movs	r2, #1
 8001570:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2200      	movs	r2, #0
 8001578:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001586:	b480      	push	{r7}
 8001588:	b083      	sub	sp, #12
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2b02      	cmp	r3, #2
 8001598:	d004      	beq.n	80015a4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2280      	movs	r2, #128	; 0x80
 800159e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e00c      	b.n	80015be <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2205      	movs	r2, #5
 80015a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f022 0201 	bic.w	r2, r2, #1
 80015ba:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
	...

080015cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b089      	sub	sp, #36	; 0x24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015d6:	2300      	movs	r3, #0
 80015d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015da:	2300      	movs	r3, #0
 80015dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015de:	2300      	movs	r3, #0
 80015e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015e2:	2300      	movs	r3, #0
 80015e4:	61fb      	str	r3, [r7, #28]
 80015e6:	e165      	b.n	80018b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015e8:	2201      	movs	r2, #1
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	697a      	ldr	r2, [r7, #20]
 80015f8:	4013      	ands	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	429a      	cmp	r2, r3
 8001602:	f040 8154 	bne.w	80018ae <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f003 0303 	and.w	r3, r3, #3
 800160e:	2b01      	cmp	r3, #1
 8001610:	d005      	beq.n	800161e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800161a:	2b02      	cmp	r3, #2
 800161c:	d130      	bne.n	8001680 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	2203      	movs	r2, #3
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	43db      	mvns	r3, r3
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	4013      	ands	r3, r2
 8001634:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	68da      	ldr	r2, [r3, #12]
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	4313      	orrs	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001654:	2201      	movs	r2, #1
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	43db      	mvns	r3, r3
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	4013      	ands	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	091b      	lsrs	r3, r3, #4
 800166a:	f003 0201 	and.w	r2, r3, #1
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4313      	orrs	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f003 0303 	and.w	r3, r3, #3
 8001688:	2b03      	cmp	r3, #3
 800168a:	d017      	beq.n	80016bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	2203      	movs	r2, #3
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	43db      	mvns	r3, r3
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	4013      	ands	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	689a      	ldr	r2, [r3, #8]
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f003 0303 	and.w	r3, r3, #3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d123      	bne.n	8001710 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	08da      	lsrs	r2, r3, #3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3208      	adds	r2, #8
 80016d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	f003 0307 	and.w	r3, r3, #7
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	220f      	movs	r2, #15
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	43db      	mvns	r3, r3
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	4013      	ands	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	691a      	ldr	r2, [r3, #16]
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4313      	orrs	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	08da      	lsrs	r2, r3, #3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	3208      	adds	r2, #8
 800170a:	69b9      	ldr	r1, [r7, #24]
 800170c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	2203      	movs	r2, #3
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	43db      	mvns	r3, r3
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	4013      	ands	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f003 0203 	and.w	r2, r3, #3
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	4313      	orrs	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800174c:	2b00      	cmp	r3, #0
 800174e:	f000 80ae 	beq.w	80018ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	4b5d      	ldr	r3, [pc, #372]	; (80018cc <HAL_GPIO_Init+0x300>)
 8001758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175a:	4a5c      	ldr	r2, [pc, #368]	; (80018cc <HAL_GPIO_Init+0x300>)
 800175c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001760:	6453      	str	r3, [r2, #68]	; 0x44
 8001762:	4b5a      	ldr	r3, [pc, #360]	; (80018cc <HAL_GPIO_Init+0x300>)
 8001764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001766:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800176e:	4a58      	ldr	r2, [pc, #352]	; (80018d0 <HAL_GPIO_Init+0x304>)
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	089b      	lsrs	r3, r3, #2
 8001774:	3302      	adds	r3, #2
 8001776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800177a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	f003 0303 	and.w	r3, r3, #3
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	220f      	movs	r2, #15
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	43db      	mvns	r3, r3
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	4013      	ands	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a4f      	ldr	r2, [pc, #316]	; (80018d4 <HAL_GPIO_Init+0x308>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d025      	beq.n	80017e6 <HAL_GPIO_Init+0x21a>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a4e      	ldr	r2, [pc, #312]	; (80018d8 <HAL_GPIO_Init+0x30c>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d01f      	beq.n	80017e2 <HAL_GPIO_Init+0x216>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a4d      	ldr	r2, [pc, #308]	; (80018dc <HAL_GPIO_Init+0x310>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d019      	beq.n	80017de <HAL_GPIO_Init+0x212>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a4c      	ldr	r2, [pc, #304]	; (80018e0 <HAL_GPIO_Init+0x314>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d013      	beq.n	80017da <HAL_GPIO_Init+0x20e>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a4b      	ldr	r2, [pc, #300]	; (80018e4 <HAL_GPIO_Init+0x318>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d00d      	beq.n	80017d6 <HAL_GPIO_Init+0x20a>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a4a      	ldr	r2, [pc, #296]	; (80018e8 <HAL_GPIO_Init+0x31c>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d007      	beq.n	80017d2 <HAL_GPIO_Init+0x206>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a49      	ldr	r2, [pc, #292]	; (80018ec <HAL_GPIO_Init+0x320>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d101      	bne.n	80017ce <HAL_GPIO_Init+0x202>
 80017ca:	2306      	movs	r3, #6
 80017cc:	e00c      	b.n	80017e8 <HAL_GPIO_Init+0x21c>
 80017ce:	2307      	movs	r3, #7
 80017d0:	e00a      	b.n	80017e8 <HAL_GPIO_Init+0x21c>
 80017d2:	2305      	movs	r3, #5
 80017d4:	e008      	b.n	80017e8 <HAL_GPIO_Init+0x21c>
 80017d6:	2304      	movs	r3, #4
 80017d8:	e006      	b.n	80017e8 <HAL_GPIO_Init+0x21c>
 80017da:	2303      	movs	r3, #3
 80017dc:	e004      	b.n	80017e8 <HAL_GPIO_Init+0x21c>
 80017de:	2302      	movs	r3, #2
 80017e0:	e002      	b.n	80017e8 <HAL_GPIO_Init+0x21c>
 80017e2:	2301      	movs	r3, #1
 80017e4:	e000      	b.n	80017e8 <HAL_GPIO_Init+0x21c>
 80017e6:	2300      	movs	r3, #0
 80017e8:	69fa      	ldr	r2, [r7, #28]
 80017ea:	f002 0203 	and.w	r2, r2, #3
 80017ee:	0092      	lsls	r2, r2, #2
 80017f0:	4093      	lsls	r3, r2
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017f8:	4935      	ldr	r1, [pc, #212]	; (80018d0 <HAL_GPIO_Init+0x304>)
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	089b      	lsrs	r3, r3, #2
 80017fe:	3302      	adds	r3, #2
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001806:	4b3a      	ldr	r3, [pc, #232]	; (80018f0 <HAL_GPIO_Init+0x324>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	43db      	mvns	r3, r3
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	4013      	ands	r3, r2
 8001814:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	4313      	orrs	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800182a:	4a31      	ldr	r2, [pc, #196]	; (80018f0 <HAL_GPIO_Init+0x324>)
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001830:	4b2f      	ldr	r3, [pc, #188]	; (80018f0 <HAL_GPIO_Init+0x324>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	43db      	mvns	r3, r3
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4013      	ands	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d003      	beq.n	8001854 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	4313      	orrs	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001854:	4a26      	ldr	r2, [pc, #152]	; (80018f0 <HAL_GPIO_Init+0x324>)
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800185a:	4b25      	ldr	r3, [pc, #148]	; (80018f0 <HAL_GPIO_Init+0x324>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	43db      	mvns	r3, r3
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	4013      	ands	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	4313      	orrs	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800187e:	4a1c      	ldr	r2, [pc, #112]	; (80018f0 <HAL_GPIO_Init+0x324>)
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001884:	4b1a      	ldr	r3, [pc, #104]	; (80018f0 <HAL_GPIO_Init+0x324>)
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	43db      	mvns	r3, r3
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	4013      	ands	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d003      	beq.n	80018a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018a8:	4a11      	ldr	r2, [pc, #68]	; (80018f0 <HAL_GPIO_Init+0x324>)
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	3301      	adds	r3, #1
 80018b2:	61fb      	str	r3, [r7, #28]
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	2b0f      	cmp	r3, #15
 80018b8:	f67f ae96 	bls.w	80015e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018bc:	bf00      	nop
 80018be:	bf00      	nop
 80018c0:	3724      	adds	r7, #36	; 0x24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	40023800 	.word	0x40023800
 80018d0:	40013800 	.word	0x40013800
 80018d4:	40020000 	.word	0x40020000
 80018d8:	40020400 	.word	0x40020400
 80018dc:	40020800 	.word	0x40020800
 80018e0:	40020c00 	.word	0x40020c00
 80018e4:	40021000 	.word	0x40021000
 80018e8:	40021400 	.word	0x40021400
 80018ec:	40021800 	.word	0x40021800
 80018f0:	40013c00 	.word	0x40013c00

080018f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	460b      	mov	r3, r1
 80018fe:	807b      	strh	r3, [r7, #2]
 8001900:	4613      	mov	r3, r2
 8001902:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001904:	787b      	ldrb	r3, [r7, #1]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d003      	beq.n	8001912 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800190a:	887a      	ldrh	r2, [r7, #2]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001910:	e003      	b.n	800191a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001912:	887b      	ldrh	r3, [r7, #2]
 8001914:	041a      	lsls	r2, r3, #16
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	619a      	str	r2, [r3, #24]
}
 800191a:	bf00      	nop
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
	...

08001928 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d101      	bne.n	800193c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e0cc      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800193c:	4b68      	ldr	r3, [pc, #416]	; (8001ae0 <HAL_RCC_ClockConfig+0x1b8>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 030f 	and.w	r3, r3, #15
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	429a      	cmp	r2, r3
 8001948:	d90c      	bls.n	8001964 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800194a:	4b65      	ldr	r3, [pc, #404]	; (8001ae0 <HAL_RCC_ClockConfig+0x1b8>)
 800194c:	683a      	ldr	r2, [r7, #0]
 800194e:	b2d2      	uxtb	r2, r2
 8001950:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001952:	4b63      	ldr	r3, [pc, #396]	; (8001ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 030f 	and.w	r3, r3, #15
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	429a      	cmp	r2, r3
 800195e:	d001      	beq.n	8001964 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e0b8      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	2b00      	cmp	r3, #0
 800196e:	d020      	beq.n	80019b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0304 	and.w	r3, r3, #4
 8001978:	2b00      	cmp	r3, #0
 800197a:	d005      	beq.n	8001988 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800197c:	4b59      	ldr	r3, [pc, #356]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	4a58      	ldr	r2, [pc, #352]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8001982:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001986:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0308 	and.w	r3, r3, #8
 8001990:	2b00      	cmp	r3, #0
 8001992:	d005      	beq.n	80019a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001994:	4b53      	ldr	r3, [pc, #332]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	4a52      	ldr	r2, [pc, #328]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 800199a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800199e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019a0:	4b50      	ldr	r3, [pc, #320]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	494d      	ldr	r1, [pc, #308]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d044      	beq.n	8001a48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d107      	bne.n	80019d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019c6:	4b47      	ldr	r3, [pc, #284]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d119      	bne.n	8001a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e07f      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d003      	beq.n	80019e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019e2:	2b03      	cmp	r3, #3
 80019e4:	d107      	bne.n	80019f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019e6:	4b3f      	ldr	r3, [pc, #252]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d109      	bne.n	8001a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e06f      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f6:	4b3b      	ldr	r3, [pc, #236]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d101      	bne.n	8001a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e067      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a06:	4b37      	ldr	r3, [pc, #220]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f023 0203 	bic.w	r2, r3, #3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	4934      	ldr	r1, [pc, #208]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a14:	4313      	orrs	r3, r2
 8001a16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a18:	f7ff fc28 	bl	800126c <HAL_GetTick>
 8001a1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a1e:	e00a      	b.n	8001a36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a20:	f7ff fc24 	bl	800126c <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e04f      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a36:	4b2b      	ldr	r3, [pc, #172]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f003 020c 	and.w	r2, r3, #12
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d1eb      	bne.n	8001a20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a48:	4b25      	ldr	r3, [pc, #148]	; (8001ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 030f 	and.w	r3, r3, #15
 8001a50:	683a      	ldr	r2, [r7, #0]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d20c      	bcs.n	8001a70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a56:	4b22      	ldr	r3, [pc, #136]	; (8001ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	b2d2      	uxtb	r2, r2
 8001a5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a5e:	4b20      	ldr	r3, [pc, #128]	; (8001ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 030f 	and.w	r3, r3, #15
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d001      	beq.n	8001a70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e032      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0304 	and.w	r3, r3, #4
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d008      	beq.n	8001a8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a7c:	4b19      	ldr	r3, [pc, #100]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	4916      	ldr	r1, [pc, #88]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0308 	and.w	r3, r3, #8
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d009      	beq.n	8001aae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a9a:	4b12      	ldr	r3, [pc, #72]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	691b      	ldr	r3, [r3, #16]
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	490e      	ldr	r1, [pc, #56]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001aae:	f000 f855 	bl	8001b5c <HAL_RCC_GetSysClockFreq>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	4b0b      	ldr	r3, [pc, #44]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	091b      	lsrs	r3, r3, #4
 8001aba:	f003 030f 	and.w	r3, r3, #15
 8001abe:	490a      	ldr	r1, [pc, #40]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8001ac0:	5ccb      	ldrb	r3, [r1, r3]
 8001ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ac6:	4a09      	ldr	r2, [pc, #36]	; (8001aec <HAL_RCC_ClockConfig+0x1c4>)
 8001ac8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001aca:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <HAL_RCC_ClockConfig+0x1c8>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff fb88 	bl	80011e4 <HAL_InitTick>

  return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40023c00 	.word	0x40023c00
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	0800567c 	.word	0x0800567c
 8001aec:	20000000 	.word	0x20000000
 8001af0:	20000004 	.word	0x20000004

08001af4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001af8:	4b03      	ldr	r3, [pc, #12]	; (8001b08 <HAL_RCC_GetHCLKFreq+0x14>)
 8001afa:	681b      	ldr	r3, [r3, #0]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	20000000 	.word	0x20000000

08001b0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b10:	f7ff fff0 	bl	8001af4 <HAL_RCC_GetHCLKFreq>
 8001b14:	4602      	mov	r2, r0
 8001b16:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	0a9b      	lsrs	r3, r3, #10
 8001b1c:	f003 0307 	and.w	r3, r3, #7
 8001b20:	4903      	ldr	r1, [pc, #12]	; (8001b30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b22:	5ccb      	ldrb	r3, [r1, r3]
 8001b24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	0800568c 	.word	0x0800568c

08001b34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b38:	f7ff ffdc 	bl	8001af4 <HAL_RCC_GetHCLKFreq>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	0b5b      	lsrs	r3, r3, #13
 8001b44:	f003 0307 	and.w	r3, r3, #7
 8001b48:	4903      	ldr	r1, [pc, #12]	; (8001b58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b4a:	5ccb      	ldrb	r3, [r1, r3]
 8001b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40023800 	.word	0x40023800
 8001b58:	0800568c 	.word	0x0800568c

08001b5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b60:	b088      	sub	sp, #32
 8001b62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001b64:	2300      	movs	r3, #0
 8001b66:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8001b70:	2300      	movs	r3, #0
 8001b72:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8001b74:	2300      	movs	r3, #0
 8001b76:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b78:	4bce      	ldr	r3, [pc, #824]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f003 030c 	and.w	r3, r3, #12
 8001b80:	2b0c      	cmp	r3, #12
 8001b82:	f200 818d 	bhi.w	8001ea0 <HAL_RCC_GetSysClockFreq+0x344>
 8001b86:	a201      	add	r2, pc, #4	; (adr r2, 8001b8c <HAL_RCC_GetSysClockFreq+0x30>)
 8001b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b8c:	08001bc1 	.word	0x08001bc1
 8001b90:	08001ea1 	.word	0x08001ea1
 8001b94:	08001ea1 	.word	0x08001ea1
 8001b98:	08001ea1 	.word	0x08001ea1
 8001b9c:	08001bc7 	.word	0x08001bc7
 8001ba0:	08001ea1 	.word	0x08001ea1
 8001ba4:	08001ea1 	.word	0x08001ea1
 8001ba8:	08001ea1 	.word	0x08001ea1
 8001bac:	08001bcd 	.word	0x08001bcd
 8001bb0:	08001ea1 	.word	0x08001ea1
 8001bb4:	08001ea1 	.word	0x08001ea1
 8001bb8:	08001ea1 	.word	0x08001ea1
 8001bbc:	08001d41 	.word	0x08001d41
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bc0:	4bbd      	ldr	r3, [pc, #756]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001bc2:	61bb      	str	r3, [r7, #24]
       break;
 8001bc4:	e16f      	b.n	8001ea6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bc6:	4bbd      	ldr	r3, [pc, #756]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x360>)
 8001bc8:	61bb      	str	r3, [r7, #24]
      break;
 8001bca:	e16c      	b.n	8001ea6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bcc:	4bb9      	ldr	r3, [pc, #740]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bd4:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bd6:	4bb7      	ldr	r3, [pc, #732]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d053      	beq.n	8001c8a <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001be2:	4bb4      	ldr	r3, [pc, #720]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	099b      	lsrs	r3, r3, #6
 8001be8:	461a      	mov	r2, r3
 8001bea:	f04f 0300 	mov.w	r3, #0
 8001bee:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001bf2:	f04f 0100 	mov.w	r1, #0
 8001bf6:	ea02 0400 	and.w	r4, r2, r0
 8001bfa:	603c      	str	r4, [r7, #0]
 8001bfc:	400b      	ands	r3, r1
 8001bfe:	607b      	str	r3, [r7, #4]
 8001c00:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c04:	4620      	mov	r0, r4
 8001c06:	4629      	mov	r1, r5
 8001c08:	f04f 0200 	mov.w	r2, #0
 8001c0c:	f04f 0300 	mov.w	r3, #0
 8001c10:	014b      	lsls	r3, r1, #5
 8001c12:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c16:	0142      	lsls	r2, r0, #5
 8001c18:	4610      	mov	r0, r2
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4623      	mov	r3, r4
 8001c1e:	1ac0      	subs	r0, r0, r3
 8001c20:	462b      	mov	r3, r5
 8001c22:	eb61 0103 	sbc.w	r1, r1, r3
 8001c26:	f04f 0200 	mov.w	r2, #0
 8001c2a:	f04f 0300 	mov.w	r3, #0
 8001c2e:	018b      	lsls	r3, r1, #6
 8001c30:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001c34:	0182      	lsls	r2, r0, #6
 8001c36:	1a12      	subs	r2, r2, r0
 8001c38:	eb63 0301 	sbc.w	r3, r3, r1
 8001c3c:	f04f 0000 	mov.w	r0, #0
 8001c40:	f04f 0100 	mov.w	r1, #0
 8001c44:	00d9      	lsls	r1, r3, #3
 8001c46:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c4a:	00d0      	lsls	r0, r2, #3
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	4621      	mov	r1, r4
 8001c52:	1852      	adds	r2, r2, r1
 8001c54:	4629      	mov	r1, r5
 8001c56:	eb43 0101 	adc.w	r1, r3, r1
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	f04f 0000 	mov.w	r0, #0
 8001c60:	f04f 0100 	mov.w	r1, #0
 8001c64:	0259      	lsls	r1, r3, #9
 8001c66:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001c6a:	0250      	lsls	r0, r2, #9
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	460b      	mov	r3, r1
 8001c70:	4610      	mov	r0, r2
 8001c72:	4619      	mov	r1, r3
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	461a      	mov	r2, r3
 8001c78:	f04f 0300 	mov.w	r3, #0
 8001c7c:	f7fe fb18 	bl	80002b0 <__aeabi_uldivmod>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	4613      	mov	r3, r2
 8001c86:	61fb      	str	r3, [r7, #28]
 8001c88:	e04c      	b.n	8001d24 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c8a:	4b8a      	ldr	r3, [pc, #552]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	099b      	lsrs	r3, r3, #6
 8001c90:	461a      	mov	r2, r3
 8001c92:	f04f 0300 	mov.w	r3, #0
 8001c96:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001c9a:	f04f 0100 	mov.w	r1, #0
 8001c9e:	ea02 0a00 	and.w	sl, r2, r0
 8001ca2:	ea03 0b01 	and.w	fp, r3, r1
 8001ca6:	4650      	mov	r0, sl
 8001ca8:	4659      	mov	r1, fp
 8001caa:	f04f 0200 	mov.w	r2, #0
 8001cae:	f04f 0300 	mov.w	r3, #0
 8001cb2:	014b      	lsls	r3, r1, #5
 8001cb4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001cb8:	0142      	lsls	r2, r0, #5
 8001cba:	4610      	mov	r0, r2
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	ebb0 000a 	subs.w	r0, r0, sl
 8001cc2:	eb61 010b 	sbc.w	r1, r1, fp
 8001cc6:	f04f 0200 	mov.w	r2, #0
 8001cca:	f04f 0300 	mov.w	r3, #0
 8001cce:	018b      	lsls	r3, r1, #6
 8001cd0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001cd4:	0182      	lsls	r2, r0, #6
 8001cd6:	1a12      	subs	r2, r2, r0
 8001cd8:	eb63 0301 	sbc.w	r3, r3, r1
 8001cdc:	f04f 0000 	mov.w	r0, #0
 8001ce0:	f04f 0100 	mov.w	r1, #0
 8001ce4:	00d9      	lsls	r1, r3, #3
 8001ce6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001cea:	00d0      	lsls	r0, r2, #3
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	eb12 020a 	adds.w	r2, r2, sl
 8001cf4:	eb43 030b 	adc.w	r3, r3, fp
 8001cf8:	f04f 0000 	mov.w	r0, #0
 8001cfc:	f04f 0100 	mov.w	r1, #0
 8001d00:	0299      	lsls	r1, r3, #10
 8001d02:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001d06:	0290      	lsls	r0, r2, #10
 8001d08:	4602      	mov	r2, r0
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	4610      	mov	r0, r2
 8001d0e:	4619      	mov	r1, r3
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	461a      	mov	r2, r3
 8001d14:	f04f 0300 	mov.w	r3, #0
 8001d18:	f7fe faca 	bl	80002b0 <__aeabi_uldivmod>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	460b      	mov	r3, r1
 8001d20:	4613      	mov	r3, r2
 8001d22:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d24:	4b63      	ldr	r3, [pc, #396]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	0c1b      	lsrs	r3, r3, #16
 8001d2a:	f003 0303 	and.w	r3, r3, #3
 8001d2e:	3301      	adds	r3, #1
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8001d34:	69fa      	ldr	r2, [r7, #28]
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d3c:	61bb      	str	r3, [r7, #24]
      break;
 8001d3e:	e0b2      	b.n	8001ea6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d40:	4b5c      	ldr	r3, [pc, #368]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d48:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d4a:	4b5a      	ldr	r3, [pc, #360]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d04d      	beq.n	8001df2 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d56:	4b57      	ldr	r3, [pc, #348]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	099b      	lsrs	r3, r3, #6
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	f04f 0300 	mov.w	r3, #0
 8001d62:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001d66:	f04f 0100 	mov.w	r1, #0
 8001d6a:	ea02 0800 	and.w	r8, r2, r0
 8001d6e:	ea03 0901 	and.w	r9, r3, r1
 8001d72:	4640      	mov	r0, r8
 8001d74:	4649      	mov	r1, r9
 8001d76:	f04f 0200 	mov.w	r2, #0
 8001d7a:	f04f 0300 	mov.w	r3, #0
 8001d7e:	014b      	lsls	r3, r1, #5
 8001d80:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d84:	0142      	lsls	r2, r0, #5
 8001d86:	4610      	mov	r0, r2
 8001d88:	4619      	mov	r1, r3
 8001d8a:	ebb0 0008 	subs.w	r0, r0, r8
 8001d8e:	eb61 0109 	sbc.w	r1, r1, r9
 8001d92:	f04f 0200 	mov.w	r2, #0
 8001d96:	f04f 0300 	mov.w	r3, #0
 8001d9a:	018b      	lsls	r3, r1, #6
 8001d9c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001da0:	0182      	lsls	r2, r0, #6
 8001da2:	1a12      	subs	r2, r2, r0
 8001da4:	eb63 0301 	sbc.w	r3, r3, r1
 8001da8:	f04f 0000 	mov.w	r0, #0
 8001dac:	f04f 0100 	mov.w	r1, #0
 8001db0:	00d9      	lsls	r1, r3, #3
 8001db2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001db6:	00d0      	lsls	r0, r2, #3
 8001db8:	4602      	mov	r2, r0
 8001dba:	460b      	mov	r3, r1
 8001dbc:	eb12 0208 	adds.w	r2, r2, r8
 8001dc0:	eb43 0309 	adc.w	r3, r3, r9
 8001dc4:	f04f 0000 	mov.w	r0, #0
 8001dc8:	f04f 0100 	mov.w	r1, #0
 8001dcc:	0259      	lsls	r1, r3, #9
 8001dce:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001dd2:	0250      	lsls	r0, r2, #9
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	4610      	mov	r0, r2
 8001dda:	4619      	mov	r1, r3
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	461a      	mov	r2, r3
 8001de0:	f04f 0300 	mov.w	r3, #0
 8001de4:	f7fe fa64 	bl	80002b0 <__aeabi_uldivmod>
 8001de8:	4602      	mov	r2, r0
 8001dea:	460b      	mov	r3, r1
 8001dec:	4613      	mov	r3, r2
 8001dee:	61fb      	str	r3, [r7, #28]
 8001df0:	e04a      	b.n	8001e88 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001df2:	4b30      	ldr	r3, [pc, #192]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	099b      	lsrs	r3, r3, #6
 8001df8:	461a      	mov	r2, r3
 8001dfa:	f04f 0300 	mov.w	r3, #0
 8001dfe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001e02:	f04f 0100 	mov.w	r1, #0
 8001e06:	ea02 0400 	and.w	r4, r2, r0
 8001e0a:	ea03 0501 	and.w	r5, r3, r1
 8001e0e:	4620      	mov	r0, r4
 8001e10:	4629      	mov	r1, r5
 8001e12:	f04f 0200 	mov.w	r2, #0
 8001e16:	f04f 0300 	mov.w	r3, #0
 8001e1a:	014b      	lsls	r3, r1, #5
 8001e1c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e20:	0142      	lsls	r2, r0, #5
 8001e22:	4610      	mov	r0, r2
 8001e24:	4619      	mov	r1, r3
 8001e26:	1b00      	subs	r0, r0, r4
 8001e28:	eb61 0105 	sbc.w	r1, r1, r5
 8001e2c:	f04f 0200 	mov.w	r2, #0
 8001e30:	f04f 0300 	mov.w	r3, #0
 8001e34:	018b      	lsls	r3, r1, #6
 8001e36:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001e3a:	0182      	lsls	r2, r0, #6
 8001e3c:	1a12      	subs	r2, r2, r0
 8001e3e:	eb63 0301 	sbc.w	r3, r3, r1
 8001e42:	f04f 0000 	mov.w	r0, #0
 8001e46:	f04f 0100 	mov.w	r1, #0
 8001e4a:	00d9      	lsls	r1, r3, #3
 8001e4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e50:	00d0      	lsls	r0, r2, #3
 8001e52:	4602      	mov	r2, r0
 8001e54:	460b      	mov	r3, r1
 8001e56:	1912      	adds	r2, r2, r4
 8001e58:	eb45 0303 	adc.w	r3, r5, r3
 8001e5c:	f04f 0000 	mov.w	r0, #0
 8001e60:	f04f 0100 	mov.w	r1, #0
 8001e64:	0299      	lsls	r1, r3, #10
 8001e66:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001e6a:	0290      	lsls	r0, r2, #10
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	4610      	mov	r0, r2
 8001e72:	4619      	mov	r1, r3
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	461a      	mov	r2, r3
 8001e78:	f04f 0300 	mov.w	r3, #0
 8001e7c:	f7fe fa18 	bl	80002b0 <__aeabi_uldivmod>
 8001e80:	4602      	mov	r2, r0
 8001e82:	460b      	mov	r3, r1
 8001e84:	4613      	mov	r3, r2
 8001e86:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001e88:	4b0a      	ldr	r3, [pc, #40]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	0f1b      	lsrs	r3, r3, #28
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8001e94:	69fa      	ldr	r2, [r7, #28]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e9c:	61bb      	str	r3, [r7, #24]
      break;
 8001e9e:	e002      	b.n	8001ea6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ea0:	4b05      	ldr	r3, [pc, #20]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001ea2:	61bb      	str	r3, [r7, #24]
      break;
 8001ea4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ea6:	69bb      	ldr	r3, [r7, #24]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3720      	adds	r7, #32
 8001eac:	46bd      	mov	sp, r7
 8001eae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40023800 	.word	0x40023800
 8001eb8:	00f42400 	.word	0x00f42400
 8001ebc:	007a1200 	.word	0x007a1200

08001ec0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d101      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e28d      	b.n	80023ee <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f000 8083 	beq.w	8001fe6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001ee0:	4b94      	ldr	r3, [pc, #592]	; (8002134 <HAL_RCC_OscConfig+0x274>)
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f003 030c 	and.w	r3, r3, #12
 8001ee8:	2b04      	cmp	r3, #4
 8001eea:	d019      	beq.n	8001f20 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001eec:	4b91      	ldr	r3, [pc, #580]	; (8002134 <HAL_RCC_OscConfig+0x274>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001ef4:	2b08      	cmp	r3, #8
 8001ef6:	d106      	bne.n	8001f06 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ef8:	4b8e      	ldr	r3, [pc, #568]	; (8002134 <HAL_RCC_OscConfig+0x274>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f04:	d00c      	beq.n	8001f20 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f06:	4b8b      	ldr	r3, [pc, #556]	; (8002134 <HAL_RCC_OscConfig+0x274>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001f0e:	2b0c      	cmp	r3, #12
 8001f10:	d112      	bne.n	8001f38 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f12:	4b88      	ldr	r3, [pc, #544]	; (8002134 <HAL_RCC_OscConfig+0x274>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f1e:	d10b      	bne.n	8001f38 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f20:	4b84      	ldr	r3, [pc, #528]	; (8002134 <HAL_RCC_OscConfig+0x274>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d05b      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x124>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d157      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e25a      	b.n	80023ee <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f40:	d106      	bne.n	8001f50 <HAL_RCC_OscConfig+0x90>
 8001f42:	4b7c      	ldr	r3, [pc, #496]	; (8002134 <HAL_RCC_OscConfig+0x274>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a7b      	ldr	r2, [pc, #492]	; (8002134 <HAL_RCC_OscConfig+0x274>)
 8001f48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f4c:	6013      	str	r3, [r2, #0]
 8001f4e:	e01d      	b.n	8001f8c <HAL_RCC_OscConfig+0xcc>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f58:	d10c      	bne.n	8001f74 <HAL_RCC_OscConfig+0xb4>
 8001f5a:	4b76      	ldr	r3, [pc, #472]	; (8002134 <HAL_RCC_OscConfig+0x274>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a75      	ldr	r2, [pc, #468]	; (8002134 <HAL_RCC_OscConfig+0x274>)
 8001f60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f64:	6013      	str	r3, [r2, #0]
 8001f66:	4b73      	ldr	r3, [pc, #460]	; (8002134 <HAL_RCC_OscConfig+0x274>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a72      	ldr	r2, [pc, #456]	; (8002134 <HAL_RCC_OscConfig+0x274>)
 8001f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f70:	6013      	str	r3, [r2, #0]
 8001f72:	e00b      	b.n	8001f8c <HAL_RCC_OscConfig+0xcc>
 8001f74:	4b6f      	ldr	r3, [pc, #444]	; (8002134 <HAL_RCC_OscConfig+0x274>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a6e      	ldr	r2, [pc, #440]	; (8002134 <HAL_RCC_OscConfig+0x274>)
 8001f7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f7e:	6013      	str	r3, [r2, #0]
 8001f80:	4b6c      	ldr	r3, [pc, #432]	; (8002134 <HAL_RCC_OscConfig+0x274>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a6b      	ldr	r2, [pc, #428]	; (8002134 <HAL_RCC_OscConfig+0x274>)
 8001f86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d013      	beq.n	8001fbc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f94:	f7ff f96a 	bl	800126c <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f9c:	f7ff f966 	bl	800126c <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b64      	cmp	r3, #100	; 0x64
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e21f      	b.n	80023ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fae:	4b61      	ldr	r3, [pc, #388]	; (8002134 <HAL_RCC_OscConfig+0x274>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d0f0      	beq.n	8001f9c <HAL_RCC_OscConfig+0xdc>
 8001fba:	e014      	b.n	8001fe6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fbc:	f7ff f956 	bl	800126c <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fc4:	f7ff f952 	bl	800126c <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b64      	cmp	r3, #100	; 0x64
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e20b      	b.n	80023ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fd6:	4b57      	ldr	r3, [pc, #348]	; (8002134 <HAL_RCC_OscConfig+0x274>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1f0      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x104>
 8001fe2:	e000      	b.n	8001fe6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fe4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d06f      	beq.n	80020d2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001ff2:	4b50      	ldr	r3, [pc, #320]	; (8002134 <HAL_RCC_OscConfig+0x274>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f003 030c 	and.w	r3, r3, #12
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d017      	beq.n	800202e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ffe:	4b4d      	ldr	r3, [pc, #308]	; (8002134 <HAL_RCC_OscConfig+0x274>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002006:	2b08      	cmp	r3, #8
 8002008:	d105      	bne.n	8002016 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800200a:	4b4a      	ldr	r3, [pc, #296]	; (8002134 <HAL_RCC_OscConfig+0x274>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d00b      	beq.n	800202e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002016:	4b47      	ldr	r3, [pc, #284]	; (8002134 <HAL_RCC_OscConfig+0x274>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800201e:	2b0c      	cmp	r3, #12
 8002020:	d11c      	bne.n	800205c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002022:	4b44      	ldr	r3, [pc, #272]	; (8002134 <HAL_RCC_OscConfig+0x274>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d116      	bne.n	800205c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800202e:	4b41      	ldr	r3, [pc, #260]	; (8002134 <HAL_RCC_OscConfig+0x274>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d005      	beq.n	8002046 <HAL_RCC_OscConfig+0x186>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d001      	beq.n	8002046 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e1d3      	b.n	80023ee <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002046:	4b3b      	ldr	r3, [pc, #236]	; (8002134 <HAL_RCC_OscConfig+0x274>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	4937      	ldr	r1, [pc, #220]	; (8002134 <HAL_RCC_OscConfig+0x274>)
 8002056:	4313      	orrs	r3, r2
 8002058:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800205a:	e03a      	b.n	80020d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d020      	beq.n	80020a6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002064:	4b34      	ldr	r3, [pc, #208]	; (8002138 <HAL_RCC_OscConfig+0x278>)
 8002066:	2201      	movs	r2, #1
 8002068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800206a:	f7ff f8ff 	bl	800126c <HAL_GetTick>
 800206e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002070:	e008      	b.n	8002084 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002072:	f7ff f8fb 	bl	800126c <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e1b4      	b.n	80023ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002084:	4b2b      	ldr	r3, [pc, #172]	; (8002134 <HAL_RCC_OscConfig+0x274>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d0f0      	beq.n	8002072 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002090:	4b28      	ldr	r3, [pc, #160]	; (8002134 <HAL_RCC_OscConfig+0x274>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	4925      	ldr	r1, [pc, #148]	; (8002134 <HAL_RCC_OscConfig+0x274>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	600b      	str	r3, [r1, #0]
 80020a4:	e015      	b.n	80020d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020a6:	4b24      	ldr	r3, [pc, #144]	; (8002138 <HAL_RCC_OscConfig+0x278>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ac:	f7ff f8de 	bl	800126c <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020b4:	f7ff f8da 	bl	800126c <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e193      	b.n	80023ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020c6:	4b1b      	ldr	r3, [pc, #108]	; (8002134 <HAL_RCC_OscConfig+0x274>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1f0      	bne.n	80020b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0308 	and.w	r3, r3, #8
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d036      	beq.n	800214c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d016      	beq.n	8002114 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020e6:	4b15      	ldr	r3, [pc, #84]	; (800213c <HAL_RCC_OscConfig+0x27c>)
 80020e8:	2201      	movs	r2, #1
 80020ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ec:	f7ff f8be 	bl	800126c <HAL_GetTick>
 80020f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020f2:	e008      	b.n	8002106 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020f4:	f7ff f8ba 	bl	800126c <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e173      	b.n	80023ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002106:	4b0b      	ldr	r3, [pc, #44]	; (8002134 <HAL_RCC_OscConfig+0x274>)
 8002108:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d0f0      	beq.n	80020f4 <HAL_RCC_OscConfig+0x234>
 8002112:	e01b      	b.n	800214c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002114:	4b09      	ldr	r3, [pc, #36]	; (800213c <HAL_RCC_OscConfig+0x27c>)
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800211a:	f7ff f8a7 	bl	800126c <HAL_GetTick>
 800211e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002120:	e00e      	b.n	8002140 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002122:	f7ff f8a3 	bl	800126c <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d907      	bls.n	8002140 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e15c      	b.n	80023ee <HAL_RCC_OscConfig+0x52e>
 8002134:	40023800 	.word	0x40023800
 8002138:	42470000 	.word	0x42470000
 800213c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002140:	4b8a      	ldr	r3, [pc, #552]	; (800236c <HAL_RCC_OscConfig+0x4ac>)
 8002142:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d1ea      	bne.n	8002122 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0304 	and.w	r3, r3, #4
 8002154:	2b00      	cmp	r3, #0
 8002156:	f000 8097 	beq.w	8002288 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800215a:	2300      	movs	r3, #0
 800215c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800215e:	4b83      	ldr	r3, [pc, #524]	; (800236c <HAL_RCC_OscConfig+0x4ac>)
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d10f      	bne.n	800218a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	60bb      	str	r3, [r7, #8]
 800216e:	4b7f      	ldr	r3, [pc, #508]	; (800236c <HAL_RCC_OscConfig+0x4ac>)
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	4a7e      	ldr	r2, [pc, #504]	; (800236c <HAL_RCC_OscConfig+0x4ac>)
 8002174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002178:	6413      	str	r3, [r2, #64]	; 0x40
 800217a:	4b7c      	ldr	r3, [pc, #496]	; (800236c <HAL_RCC_OscConfig+0x4ac>)
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002182:	60bb      	str	r3, [r7, #8]
 8002184:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002186:	2301      	movs	r3, #1
 8002188:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800218a:	4b79      	ldr	r3, [pc, #484]	; (8002370 <HAL_RCC_OscConfig+0x4b0>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002192:	2b00      	cmp	r3, #0
 8002194:	d118      	bne.n	80021c8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002196:	4b76      	ldr	r3, [pc, #472]	; (8002370 <HAL_RCC_OscConfig+0x4b0>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a75      	ldr	r2, [pc, #468]	; (8002370 <HAL_RCC_OscConfig+0x4b0>)
 800219c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021a2:	f7ff f863 	bl	800126c <HAL_GetTick>
 80021a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a8:	e008      	b.n	80021bc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021aa:	f7ff f85f 	bl	800126c <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e118      	b.n	80023ee <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021bc:	4b6c      	ldr	r3, [pc, #432]	; (8002370 <HAL_RCC_OscConfig+0x4b0>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d0f0      	beq.n	80021aa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d106      	bne.n	80021de <HAL_RCC_OscConfig+0x31e>
 80021d0:	4b66      	ldr	r3, [pc, #408]	; (800236c <HAL_RCC_OscConfig+0x4ac>)
 80021d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d4:	4a65      	ldr	r2, [pc, #404]	; (800236c <HAL_RCC_OscConfig+0x4ac>)
 80021d6:	f043 0301 	orr.w	r3, r3, #1
 80021da:	6713      	str	r3, [r2, #112]	; 0x70
 80021dc:	e01c      	b.n	8002218 <HAL_RCC_OscConfig+0x358>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	2b05      	cmp	r3, #5
 80021e4:	d10c      	bne.n	8002200 <HAL_RCC_OscConfig+0x340>
 80021e6:	4b61      	ldr	r3, [pc, #388]	; (800236c <HAL_RCC_OscConfig+0x4ac>)
 80021e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ea:	4a60      	ldr	r2, [pc, #384]	; (800236c <HAL_RCC_OscConfig+0x4ac>)
 80021ec:	f043 0304 	orr.w	r3, r3, #4
 80021f0:	6713      	str	r3, [r2, #112]	; 0x70
 80021f2:	4b5e      	ldr	r3, [pc, #376]	; (800236c <HAL_RCC_OscConfig+0x4ac>)
 80021f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f6:	4a5d      	ldr	r2, [pc, #372]	; (800236c <HAL_RCC_OscConfig+0x4ac>)
 80021f8:	f043 0301 	orr.w	r3, r3, #1
 80021fc:	6713      	str	r3, [r2, #112]	; 0x70
 80021fe:	e00b      	b.n	8002218 <HAL_RCC_OscConfig+0x358>
 8002200:	4b5a      	ldr	r3, [pc, #360]	; (800236c <HAL_RCC_OscConfig+0x4ac>)
 8002202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002204:	4a59      	ldr	r2, [pc, #356]	; (800236c <HAL_RCC_OscConfig+0x4ac>)
 8002206:	f023 0301 	bic.w	r3, r3, #1
 800220a:	6713      	str	r3, [r2, #112]	; 0x70
 800220c:	4b57      	ldr	r3, [pc, #348]	; (800236c <HAL_RCC_OscConfig+0x4ac>)
 800220e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002210:	4a56      	ldr	r2, [pc, #344]	; (800236c <HAL_RCC_OscConfig+0x4ac>)
 8002212:	f023 0304 	bic.w	r3, r3, #4
 8002216:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d015      	beq.n	800224c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002220:	f7ff f824 	bl	800126c <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002226:	e00a      	b.n	800223e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002228:	f7ff f820 	bl	800126c <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	f241 3288 	movw	r2, #5000	; 0x1388
 8002236:	4293      	cmp	r3, r2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e0d7      	b.n	80023ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800223e:	4b4b      	ldr	r3, [pc, #300]	; (800236c <HAL_RCC_OscConfig+0x4ac>)
 8002240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d0ee      	beq.n	8002228 <HAL_RCC_OscConfig+0x368>
 800224a:	e014      	b.n	8002276 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800224c:	f7ff f80e 	bl	800126c <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002252:	e00a      	b.n	800226a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002254:	f7ff f80a 	bl	800126c <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002262:	4293      	cmp	r3, r2
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e0c1      	b.n	80023ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800226a:	4b40      	ldr	r3, [pc, #256]	; (800236c <HAL_RCC_OscConfig+0x4ac>)
 800226c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1ee      	bne.n	8002254 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002276:	7dfb      	ldrb	r3, [r7, #23]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d105      	bne.n	8002288 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800227c:	4b3b      	ldr	r3, [pc, #236]	; (800236c <HAL_RCC_OscConfig+0x4ac>)
 800227e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002280:	4a3a      	ldr	r2, [pc, #232]	; (800236c <HAL_RCC_OscConfig+0x4ac>)
 8002282:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002286:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	2b00      	cmp	r3, #0
 800228e:	f000 80ad 	beq.w	80023ec <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002292:	4b36      	ldr	r3, [pc, #216]	; (800236c <HAL_RCC_OscConfig+0x4ac>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 030c 	and.w	r3, r3, #12
 800229a:	2b08      	cmp	r3, #8
 800229c:	d060      	beq.n	8002360 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d145      	bne.n	8002332 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022a6:	4b33      	ldr	r3, [pc, #204]	; (8002374 <HAL_RCC_OscConfig+0x4b4>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ac:	f7fe ffde 	bl	800126c <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022b4:	f7fe ffda 	bl	800126c <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e093      	b.n	80023ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022c6:	4b29      	ldr	r3, [pc, #164]	; (800236c <HAL_RCC_OscConfig+0x4ac>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1f0      	bne.n	80022b4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	69da      	ldr	r2, [r3, #28]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a1b      	ldr	r3, [r3, #32]
 80022da:	431a      	orrs	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e0:	019b      	lsls	r3, r3, #6
 80022e2:	431a      	orrs	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e8:	085b      	lsrs	r3, r3, #1
 80022ea:	3b01      	subs	r3, #1
 80022ec:	041b      	lsls	r3, r3, #16
 80022ee:	431a      	orrs	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f4:	061b      	lsls	r3, r3, #24
 80022f6:	431a      	orrs	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fc:	071b      	lsls	r3, r3, #28
 80022fe:	491b      	ldr	r1, [pc, #108]	; (800236c <HAL_RCC_OscConfig+0x4ac>)
 8002300:	4313      	orrs	r3, r2
 8002302:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002304:	4b1b      	ldr	r3, [pc, #108]	; (8002374 <HAL_RCC_OscConfig+0x4b4>)
 8002306:	2201      	movs	r2, #1
 8002308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800230a:	f7fe ffaf 	bl	800126c <HAL_GetTick>
 800230e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002310:	e008      	b.n	8002324 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002312:	f7fe ffab 	bl	800126c <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e064      	b.n	80023ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002324:	4b11      	ldr	r3, [pc, #68]	; (800236c <HAL_RCC_OscConfig+0x4ac>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d0f0      	beq.n	8002312 <HAL_RCC_OscConfig+0x452>
 8002330:	e05c      	b.n	80023ec <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002332:	4b10      	ldr	r3, [pc, #64]	; (8002374 <HAL_RCC_OscConfig+0x4b4>)
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002338:	f7fe ff98 	bl	800126c <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002340:	f7fe ff94 	bl	800126c <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e04d      	b.n	80023ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002352:	4b06      	ldr	r3, [pc, #24]	; (800236c <HAL_RCC_OscConfig+0x4ac>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1f0      	bne.n	8002340 <HAL_RCC_OscConfig+0x480>
 800235e:	e045      	b.n	80023ec <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d107      	bne.n	8002378 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e040      	b.n	80023ee <HAL_RCC_OscConfig+0x52e>
 800236c:	40023800 	.word	0x40023800
 8002370:	40007000 	.word	0x40007000
 8002374:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002378:	4b1f      	ldr	r3, [pc, #124]	; (80023f8 <HAL_RCC_OscConfig+0x538>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d030      	beq.n	80023e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002390:	429a      	cmp	r2, r3
 8002392:	d129      	bne.n	80023e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800239e:	429a      	cmp	r2, r3
 80023a0:	d122      	bne.n	80023e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023a8:	4013      	ands	r3, r2
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d119      	bne.n	80023e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023be:	085b      	lsrs	r3, r3, #1
 80023c0:	3b01      	subs	r3, #1
 80023c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d10f      	bne.n	80023e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d107      	bne.n	80023e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d001      	beq.n	80023ec <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e000      	b.n	80023ee <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3718      	adds	r7, #24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40023800 	.word	0x40023800

080023fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e041      	b.n	8002492 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d106      	bne.n	8002428 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f7fe fd5a 	bl	8000edc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2202      	movs	r2, #2
 800242c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	3304      	adds	r3, #4
 8002438:	4619      	mov	r1, r3
 800243a:	4610      	mov	r0, r2
 800243c:	f000 fd46 	bl	8002ecc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b082      	sub	sp, #8
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d101      	bne.n	80024ac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e041      	b.n	8002530 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d106      	bne.n	80024c6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f000 f839 	bl	8002538 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2202      	movs	r2, #2
 80024ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	3304      	adds	r3, #4
 80024d6:	4619      	mov	r1, r3
 80024d8:	4610      	mov	r0, r2
 80024da:	f000 fcf7 	bl	8002ecc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2201      	movs	r2, #1
 80024e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2201      	movs	r2, #1
 80024ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2201      	movs	r2, #1
 80024f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2201      	movs	r2, #1
 80024fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2201      	movs	r2, #1
 8002502:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2201      	movs	r2, #1
 800250a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2201      	movs	r2, #1
 8002512:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2201      	movs	r2, #1
 800251a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2201      	movs	r2, #1
 8002522:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2201      	movs	r2, #1
 800252a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800252e:	2300      	movs	r3, #0
}
 8002530:	4618      	mov	r0, r3
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d109      	bne.n	8002570 <HAL_TIM_PWM_Start+0x24>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002562:	b2db      	uxtb	r3, r3
 8002564:	2b01      	cmp	r3, #1
 8002566:	bf14      	ite	ne
 8002568:	2301      	movne	r3, #1
 800256a:	2300      	moveq	r3, #0
 800256c:	b2db      	uxtb	r3, r3
 800256e:	e022      	b.n	80025b6 <HAL_TIM_PWM_Start+0x6a>
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	2b04      	cmp	r3, #4
 8002574:	d109      	bne.n	800258a <HAL_TIM_PWM_Start+0x3e>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b01      	cmp	r3, #1
 8002580:	bf14      	ite	ne
 8002582:	2301      	movne	r3, #1
 8002584:	2300      	moveq	r3, #0
 8002586:	b2db      	uxtb	r3, r3
 8002588:	e015      	b.n	80025b6 <HAL_TIM_PWM_Start+0x6a>
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	2b08      	cmp	r3, #8
 800258e:	d109      	bne.n	80025a4 <HAL_TIM_PWM_Start+0x58>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002596:	b2db      	uxtb	r3, r3
 8002598:	2b01      	cmp	r3, #1
 800259a:	bf14      	ite	ne
 800259c:	2301      	movne	r3, #1
 800259e:	2300      	moveq	r3, #0
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	e008      	b.n	80025b6 <HAL_TIM_PWM_Start+0x6a>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	bf14      	ite	ne
 80025b0:	2301      	movne	r3, #1
 80025b2:	2300      	moveq	r3, #0
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e07c      	b.n	80026b8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d104      	bne.n	80025ce <HAL_TIM_PWM_Start+0x82>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2202      	movs	r2, #2
 80025c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025cc:	e013      	b.n	80025f6 <HAL_TIM_PWM_Start+0xaa>
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	2b04      	cmp	r3, #4
 80025d2:	d104      	bne.n	80025de <HAL_TIM_PWM_Start+0x92>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2202      	movs	r2, #2
 80025d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025dc:	e00b      	b.n	80025f6 <HAL_TIM_PWM_Start+0xaa>
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	2b08      	cmp	r3, #8
 80025e2:	d104      	bne.n	80025ee <HAL_TIM_PWM_Start+0xa2>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2202      	movs	r2, #2
 80025e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025ec:	e003      	b.n	80025f6 <HAL_TIM_PWM_Start+0xaa>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2202      	movs	r2, #2
 80025f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2201      	movs	r2, #1
 80025fc:	6839      	ldr	r1, [r7, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f000 ff4e 	bl	80034a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a2d      	ldr	r2, [pc, #180]	; (80026c0 <HAL_TIM_PWM_Start+0x174>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d004      	beq.n	8002618 <HAL_TIM_PWM_Start+0xcc>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a2c      	ldr	r2, [pc, #176]	; (80026c4 <HAL_TIM_PWM_Start+0x178>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d101      	bne.n	800261c <HAL_TIM_PWM_Start+0xd0>
 8002618:	2301      	movs	r3, #1
 800261a:	e000      	b.n	800261e <HAL_TIM_PWM_Start+0xd2>
 800261c:	2300      	movs	r3, #0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d007      	beq.n	8002632 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002630:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a22      	ldr	r2, [pc, #136]	; (80026c0 <HAL_TIM_PWM_Start+0x174>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d022      	beq.n	8002682 <HAL_TIM_PWM_Start+0x136>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002644:	d01d      	beq.n	8002682 <HAL_TIM_PWM_Start+0x136>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a1f      	ldr	r2, [pc, #124]	; (80026c8 <HAL_TIM_PWM_Start+0x17c>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d018      	beq.n	8002682 <HAL_TIM_PWM_Start+0x136>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a1d      	ldr	r2, [pc, #116]	; (80026cc <HAL_TIM_PWM_Start+0x180>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d013      	beq.n	8002682 <HAL_TIM_PWM_Start+0x136>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a1c      	ldr	r2, [pc, #112]	; (80026d0 <HAL_TIM_PWM_Start+0x184>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d00e      	beq.n	8002682 <HAL_TIM_PWM_Start+0x136>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a16      	ldr	r2, [pc, #88]	; (80026c4 <HAL_TIM_PWM_Start+0x178>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d009      	beq.n	8002682 <HAL_TIM_PWM_Start+0x136>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a18      	ldr	r2, [pc, #96]	; (80026d4 <HAL_TIM_PWM_Start+0x188>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d004      	beq.n	8002682 <HAL_TIM_PWM_Start+0x136>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a16      	ldr	r2, [pc, #88]	; (80026d8 <HAL_TIM_PWM_Start+0x18c>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d111      	bne.n	80026a6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f003 0307 	and.w	r3, r3, #7
 800268c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2b06      	cmp	r3, #6
 8002692:	d010      	beq.n	80026b6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f042 0201 	orr.w	r2, r2, #1
 80026a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026a4:	e007      	b.n	80026b6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f042 0201 	orr.w	r2, r2, #1
 80026b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	40010000 	.word	0x40010000
 80026c4:	40010400 	.word	0x40010400
 80026c8:	40000400 	.word	0x40000400
 80026cc:	40000800 	.word	0x40000800
 80026d0:	40000c00 	.word	0x40000c00
 80026d4:	40014000 	.word	0x40014000
 80026d8:	40001800 	.word	0x40001800

080026dc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d101      	bne.n	80026f0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e097      	b.n	8002820 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d106      	bne.n	800270a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f7fe fc27 	bl	8000f58 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2202      	movs	r2, #2
 800270e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	6812      	ldr	r2, [r2, #0]
 800271c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002720:	f023 0307 	bic.w	r3, r3, #7
 8002724:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	3304      	adds	r3, #4
 800272e:	4619      	mov	r1, r3
 8002730:	4610      	mov	r0, r2
 8002732:	f000 fbcb 	bl	8002ecc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	6a1b      	ldr	r3, [r3, #32]
 800274c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	4313      	orrs	r3, r2
 8002756:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800275e:	f023 0303 	bic.w	r3, r3, #3
 8002762:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	021b      	lsls	r3, r3, #8
 800276e:	4313      	orrs	r3, r2
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	4313      	orrs	r3, r2
 8002774:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800277c:	f023 030c 	bic.w	r3, r3, #12
 8002780:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002788:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800278c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	68da      	ldr	r2, [r3, #12]
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	021b      	lsls	r3, r3, #8
 8002798:	4313      	orrs	r3, r2
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	4313      	orrs	r3, r2
 800279e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	011a      	lsls	r2, r3, #4
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	6a1b      	ldr	r3, [r3, #32]
 80027aa:	031b      	lsls	r3, r3, #12
 80027ac:	4313      	orrs	r3, r2
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80027ba:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80027c2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	695b      	ldr	r3, [r3, #20]
 80027cc:	011b      	lsls	r3, r3, #4
 80027ce:	4313      	orrs	r3, r2
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	697a      	ldr	r2, [r7, #20]
 80027dc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2201      	movs	r2, #1
 80027f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2201      	movs	r2, #1
 8002802:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2201      	movs	r2, #1
 800280a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2201      	movs	r2, #1
 8002812:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2201      	movs	r2, #1
 800281a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800281e:	2300      	movs	r3, #0
}
 8002820:	4618      	mov	r0, r3
 8002822:	3718      	adds	r7, #24
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002838:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002840:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002848:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002850:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d110      	bne.n	800287a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002858:	7bfb      	ldrb	r3, [r7, #15]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d102      	bne.n	8002864 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800285e:	7b7b      	ldrb	r3, [r7, #13]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d001      	beq.n	8002868 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e069      	b.n	800293c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2202      	movs	r2, #2
 800286c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2202      	movs	r2, #2
 8002874:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002878:	e031      	b.n	80028de <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	2b04      	cmp	r3, #4
 800287e:	d110      	bne.n	80028a2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002880:	7bbb      	ldrb	r3, [r7, #14]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d102      	bne.n	800288c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002886:	7b3b      	ldrb	r3, [r7, #12]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d001      	beq.n	8002890 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e055      	b.n	800293c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2202      	movs	r2, #2
 8002894:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2202      	movs	r2, #2
 800289c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028a0:	e01d      	b.n	80028de <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80028a2:	7bfb      	ldrb	r3, [r7, #15]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d108      	bne.n	80028ba <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80028a8:	7bbb      	ldrb	r3, [r7, #14]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d105      	bne.n	80028ba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80028ae:	7b7b      	ldrb	r3, [r7, #13]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d102      	bne.n	80028ba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80028b4:	7b3b      	ldrb	r3, [r7, #12]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d001      	beq.n	80028be <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e03e      	b.n	800293c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2202      	movs	r2, #2
 80028c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2202      	movs	r2, #2
 80028ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2202      	movs	r2, #2
 80028d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2202      	movs	r2, #2
 80028da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d003      	beq.n	80028ec <HAL_TIM_Encoder_Start+0xc4>
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	2b04      	cmp	r3, #4
 80028e8:	d008      	beq.n	80028fc <HAL_TIM_Encoder_Start+0xd4>
 80028ea:	e00f      	b.n	800290c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2201      	movs	r2, #1
 80028f2:	2100      	movs	r1, #0
 80028f4:	4618      	mov	r0, r3
 80028f6:	f000 fdd3 	bl	80034a0 <TIM_CCxChannelCmd>
      break;
 80028fa:	e016      	b.n	800292a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2201      	movs	r2, #1
 8002902:	2104      	movs	r1, #4
 8002904:	4618      	mov	r0, r3
 8002906:	f000 fdcb 	bl	80034a0 <TIM_CCxChannelCmd>
      break;
 800290a:	e00e      	b.n	800292a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2201      	movs	r2, #1
 8002912:	2100      	movs	r1, #0
 8002914:	4618      	mov	r0, r3
 8002916:	f000 fdc3 	bl	80034a0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2201      	movs	r2, #1
 8002920:	2104      	movs	r1, #4
 8002922:	4618      	mov	r0, r3
 8002924:	f000 fdbc 	bl	80034a0 <TIM_CCxChannelCmd>
      break;
 8002928:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f042 0201 	orr.w	r2, r2, #1
 8002938:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	3710      	adds	r7, #16
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b02      	cmp	r3, #2
 8002958:	d122      	bne.n	80029a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	2b02      	cmp	r3, #2
 8002966:	d11b      	bne.n	80029a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f06f 0202 	mvn.w	r2, #2
 8002970:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2201      	movs	r2, #1
 8002976:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	f003 0303 	and.w	r3, r3, #3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d003      	beq.n	800298e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 fa81 	bl	8002e8e <HAL_TIM_IC_CaptureCallback>
 800298c:	e005      	b.n	800299a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 fa73 	bl	8002e7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f000 fa84 	bl	8002ea2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	f003 0304 	and.w	r3, r3, #4
 80029aa:	2b04      	cmp	r3, #4
 80029ac:	d122      	bne.n	80029f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	f003 0304 	and.w	r3, r3, #4
 80029b8:	2b04      	cmp	r3, #4
 80029ba:	d11b      	bne.n	80029f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f06f 0204 	mvn.w	r2, #4
 80029c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2202      	movs	r2, #2
 80029ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d003      	beq.n	80029e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 fa57 	bl	8002e8e <HAL_TIM_IC_CaptureCallback>
 80029e0:	e005      	b.n	80029ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 fa49 	bl	8002e7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 fa5a 	bl	8002ea2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	f003 0308 	and.w	r3, r3, #8
 80029fe:	2b08      	cmp	r3, #8
 8002a00:	d122      	bne.n	8002a48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	f003 0308 	and.w	r3, r3, #8
 8002a0c:	2b08      	cmp	r3, #8
 8002a0e:	d11b      	bne.n	8002a48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f06f 0208 	mvn.w	r2, #8
 8002a18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2204      	movs	r2, #4
 8002a1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	69db      	ldr	r3, [r3, #28]
 8002a26:	f003 0303 	and.w	r3, r3, #3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d003      	beq.n	8002a36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 fa2d 	bl	8002e8e <HAL_TIM_IC_CaptureCallback>
 8002a34:	e005      	b.n	8002a42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 fa1f 	bl	8002e7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f000 fa30 	bl	8002ea2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	f003 0310 	and.w	r3, r3, #16
 8002a52:	2b10      	cmp	r3, #16
 8002a54:	d122      	bne.n	8002a9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	f003 0310 	and.w	r3, r3, #16
 8002a60:	2b10      	cmp	r3, #16
 8002a62:	d11b      	bne.n	8002a9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f06f 0210 	mvn.w	r2, #16
 8002a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2208      	movs	r2, #8
 8002a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	69db      	ldr	r3, [r3, #28]
 8002a7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d003      	beq.n	8002a8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 fa03 	bl	8002e8e <HAL_TIM_IC_CaptureCallback>
 8002a88:	e005      	b.n	8002a96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 f9f5 	bl	8002e7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f000 fa06 	bl	8002ea2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d10e      	bne.n	8002ac8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	f003 0301 	and.w	r3, r3, #1
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d107      	bne.n	8002ac8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f06f 0201 	mvn.w	r2, #1
 8002ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f9cf 	bl	8002e66 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ad2:	2b80      	cmp	r3, #128	; 0x80
 8002ad4:	d10e      	bne.n	8002af4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae0:	2b80      	cmp	r3, #128	; 0x80
 8002ae2:	d107      	bne.n	8002af4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002aec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 fdd4 	bl	800369c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002afe:	2b40      	cmp	r3, #64	; 0x40
 8002b00:	d10e      	bne.n	8002b20 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b0c:	2b40      	cmp	r3, #64	; 0x40
 8002b0e:	d107      	bne.n	8002b20 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 f9cb 	bl	8002eb6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	f003 0320 	and.w	r3, r3, #32
 8002b2a:	2b20      	cmp	r3, #32
 8002b2c:	d10e      	bne.n	8002b4c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	f003 0320 	and.w	r3, r3, #32
 8002b38:	2b20      	cmp	r3, #32
 8002b3a:	d107      	bne.n	8002b4c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f06f 0220 	mvn.w	r2, #32
 8002b44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 fd9e 	bl	8003688 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b4c:	bf00      	nop
 8002b4e:	3708      	adds	r7, #8
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b60:	2300      	movs	r3, #0
 8002b62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d101      	bne.n	8002b72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002b6e:	2302      	movs	r3, #2
 8002b70:	e0ae      	b.n	8002cd0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2201      	movs	r2, #1
 8002b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2b0c      	cmp	r3, #12
 8002b7e:	f200 809f 	bhi.w	8002cc0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002b82:	a201      	add	r2, pc, #4	; (adr r2, 8002b88 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b88:	08002bbd 	.word	0x08002bbd
 8002b8c:	08002cc1 	.word	0x08002cc1
 8002b90:	08002cc1 	.word	0x08002cc1
 8002b94:	08002cc1 	.word	0x08002cc1
 8002b98:	08002bfd 	.word	0x08002bfd
 8002b9c:	08002cc1 	.word	0x08002cc1
 8002ba0:	08002cc1 	.word	0x08002cc1
 8002ba4:	08002cc1 	.word	0x08002cc1
 8002ba8:	08002c3f 	.word	0x08002c3f
 8002bac:	08002cc1 	.word	0x08002cc1
 8002bb0:	08002cc1 	.word	0x08002cc1
 8002bb4:	08002cc1 	.word	0x08002cc1
 8002bb8:	08002c7f 	.word	0x08002c7f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68b9      	ldr	r1, [r7, #8]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f000 fa22 	bl	800300c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	699a      	ldr	r2, [r3, #24]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 0208 	orr.w	r2, r2, #8
 8002bd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	699a      	ldr	r2, [r3, #24]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f022 0204 	bic.w	r2, r2, #4
 8002be6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	6999      	ldr	r1, [r3, #24]
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	691a      	ldr	r2, [r3, #16]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	619a      	str	r2, [r3, #24]
      break;
 8002bfa:	e064      	b.n	8002cc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68b9      	ldr	r1, [r7, #8]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f000 fa72 	bl	80030ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	699a      	ldr	r2, [r3, #24]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	699a      	ldr	r2, [r3, #24]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6999      	ldr	r1, [r3, #24]
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	021a      	lsls	r2, r3, #8
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	619a      	str	r2, [r3, #24]
      break;
 8002c3c:	e043      	b.n	8002cc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68b9      	ldr	r1, [r7, #8]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f000 fac7 	bl	80031d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	69da      	ldr	r2, [r3, #28]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f042 0208 	orr.w	r2, r2, #8
 8002c58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	69da      	ldr	r2, [r3, #28]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 0204 	bic.w	r2, r2, #4
 8002c68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	69d9      	ldr	r1, [r3, #28]
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	691a      	ldr	r2, [r3, #16]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	61da      	str	r2, [r3, #28]
      break;
 8002c7c:	e023      	b.n	8002cc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68b9      	ldr	r1, [r7, #8]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f000 fb1b 	bl	80032c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	69da      	ldr	r2, [r3, #28]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	69da      	ldr	r2, [r3, #28]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ca8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	69d9      	ldr	r1, [r3, #28]
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	021a      	lsls	r2, r3, #8
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	61da      	str	r2, [r3, #28]
      break;
 8002cbe:	e002      	b.n	8002cc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	75fb      	strb	r3, [r7, #23]
      break;
 8002cc4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002cce:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3718      	adds	r7, #24
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d101      	bne.n	8002cf4 <HAL_TIM_ConfigClockSource+0x1c>
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	e0b4      	b.n	8002e5e <HAL_TIM_ConfigClockSource+0x186>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2202      	movs	r2, #2
 8002d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68ba      	ldr	r2, [r7, #8]
 8002d22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d2c:	d03e      	beq.n	8002dac <HAL_TIM_ConfigClockSource+0xd4>
 8002d2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d32:	f200 8087 	bhi.w	8002e44 <HAL_TIM_ConfigClockSource+0x16c>
 8002d36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d3a:	f000 8086 	beq.w	8002e4a <HAL_TIM_ConfigClockSource+0x172>
 8002d3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d42:	d87f      	bhi.n	8002e44 <HAL_TIM_ConfigClockSource+0x16c>
 8002d44:	2b70      	cmp	r3, #112	; 0x70
 8002d46:	d01a      	beq.n	8002d7e <HAL_TIM_ConfigClockSource+0xa6>
 8002d48:	2b70      	cmp	r3, #112	; 0x70
 8002d4a:	d87b      	bhi.n	8002e44 <HAL_TIM_ConfigClockSource+0x16c>
 8002d4c:	2b60      	cmp	r3, #96	; 0x60
 8002d4e:	d050      	beq.n	8002df2 <HAL_TIM_ConfigClockSource+0x11a>
 8002d50:	2b60      	cmp	r3, #96	; 0x60
 8002d52:	d877      	bhi.n	8002e44 <HAL_TIM_ConfigClockSource+0x16c>
 8002d54:	2b50      	cmp	r3, #80	; 0x50
 8002d56:	d03c      	beq.n	8002dd2 <HAL_TIM_ConfigClockSource+0xfa>
 8002d58:	2b50      	cmp	r3, #80	; 0x50
 8002d5a:	d873      	bhi.n	8002e44 <HAL_TIM_ConfigClockSource+0x16c>
 8002d5c:	2b40      	cmp	r3, #64	; 0x40
 8002d5e:	d058      	beq.n	8002e12 <HAL_TIM_ConfigClockSource+0x13a>
 8002d60:	2b40      	cmp	r3, #64	; 0x40
 8002d62:	d86f      	bhi.n	8002e44 <HAL_TIM_ConfigClockSource+0x16c>
 8002d64:	2b30      	cmp	r3, #48	; 0x30
 8002d66:	d064      	beq.n	8002e32 <HAL_TIM_ConfigClockSource+0x15a>
 8002d68:	2b30      	cmp	r3, #48	; 0x30
 8002d6a:	d86b      	bhi.n	8002e44 <HAL_TIM_ConfigClockSource+0x16c>
 8002d6c:	2b20      	cmp	r3, #32
 8002d6e:	d060      	beq.n	8002e32 <HAL_TIM_ConfigClockSource+0x15a>
 8002d70:	2b20      	cmp	r3, #32
 8002d72:	d867      	bhi.n	8002e44 <HAL_TIM_ConfigClockSource+0x16c>
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d05c      	beq.n	8002e32 <HAL_TIM_ConfigClockSource+0x15a>
 8002d78:	2b10      	cmp	r3, #16
 8002d7a:	d05a      	beq.n	8002e32 <HAL_TIM_ConfigClockSource+0x15a>
 8002d7c:	e062      	b.n	8002e44 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6818      	ldr	r0, [r3, #0]
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	6899      	ldr	r1, [r3, #8]
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	685a      	ldr	r2, [r3, #4]
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	f000 fb67 	bl	8003460 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002da0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68ba      	ldr	r2, [r7, #8]
 8002da8:	609a      	str	r2, [r3, #8]
      break;
 8002daa:	e04f      	b.n	8002e4c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6818      	ldr	r0, [r3, #0]
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	6899      	ldr	r1, [r3, #8]
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	f000 fb50 	bl	8003460 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689a      	ldr	r2, [r3, #8]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dce:	609a      	str	r2, [r3, #8]
      break;
 8002dd0:	e03c      	b.n	8002e4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6818      	ldr	r0, [r3, #0]
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	6859      	ldr	r1, [r3, #4]
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	461a      	mov	r2, r3
 8002de0:	f000 fac4 	bl	800336c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2150      	movs	r1, #80	; 0x50
 8002dea:	4618      	mov	r0, r3
 8002dec:	f000 fb1d 	bl	800342a <TIM_ITRx_SetConfig>
      break;
 8002df0:	e02c      	b.n	8002e4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6818      	ldr	r0, [r3, #0]
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	6859      	ldr	r1, [r3, #4]
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	f000 fae3 	bl	80033ca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2160      	movs	r1, #96	; 0x60
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f000 fb0d 	bl	800342a <TIM_ITRx_SetConfig>
      break;
 8002e10:	e01c      	b.n	8002e4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6818      	ldr	r0, [r3, #0]
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	6859      	ldr	r1, [r3, #4]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	461a      	mov	r2, r3
 8002e20:	f000 faa4 	bl	800336c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2140      	movs	r1, #64	; 0x40
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f000 fafd 	bl	800342a <TIM_ITRx_SetConfig>
      break;
 8002e30:	e00c      	b.n	8002e4c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	4610      	mov	r0, r2
 8002e3e:	f000 faf4 	bl	800342a <TIM_ITRx_SetConfig>
      break;
 8002e42:	e003      	b.n	8002e4c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	73fb      	strb	r3, [r7, #15]
      break;
 8002e48:	e000      	b.n	8002e4c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3710      	adds	r7, #16
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e66:	b480      	push	{r7}
 8002e68:	b083      	sub	sp, #12
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002e6e:	bf00      	nop
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr

08002e7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	b083      	sub	sp, #12
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e82:	bf00      	nop
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr

08002e8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b083      	sub	sp, #12
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e96:	bf00      	nop
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr

08002ea2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	b083      	sub	sp, #12
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002eaa:	bf00      	nop
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr

08002eb6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b083      	sub	sp, #12
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
	...

08002ecc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a40      	ldr	r2, [pc, #256]	; (8002fe0 <TIM_Base_SetConfig+0x114>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d013      	beq.n	8002f0c <TIM_Base_SetConfig+0x40>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eea:	d00f      	beq.n	8002f0c <TIM_Base_SetConfig+0x40>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a3d      	ldr	r2, [pc, #244]	; (8002fe4 <TIM_Base_SetConfig+0x118>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d00b      	beq.n	8002f0c <TIM_Base_SetConfig+0x40>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a3c      	ldr	r2, [pc, #240]	; (8002fe8 <TIM_Base_SetConfig+0x11c>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d007      	beq.n	8002f0c <TIM_Base_SetConfig+0x40>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a3b      	ldr	r2, [pc, #236]	; (8002fec <TIM_Base_SetConfig+0x120>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d003      	beq.n	8002f0c <TIM_Base_SetConfig+0x40>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a3a      	ldr	r2, [pc, #232]	; (8002ff0 <TIM_Base_SetConfig+0x124>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d108      	bne.n	8002f1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a2f      	ldr	r2, [pc, #188]	; (8002fe0 <TIM_Base_SetConfig+0x114>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d02b      	beq.n	8002f7e <TIM_Base_SetConfig+0xb2>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f2c:	d027      	beq.n	8002f7e <TIM_Base_SetConfig+0xb2>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a2c      	ldr	r2, [pc, #176]	; (8002fe4 <TIM_Base_SetConfig+0x118>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d023      	beq.n	8002f7e <TIM_Base_SetConfig+0xb2>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a2b      	ldr	r2, [pc, #172]	; (8002fe8 <TIM_Base_SetConfig+0x11c>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d01f      	beq.n	8002f7e <TIM_Base_SetConfig+0xb2>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a2a      	ldr	r2, [pc, #168]	; (8002fec <TIM_Base_SetConfig+0x120>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d01b      	beq.n	8002f7e <TIM_Base_SetConfig+0xb2>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a29      	ldr	r2, [pc, #164]	; (8002ff0 <TIM_Base_SetConfig+0x124>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d017      	beq.n	8002f7e <TIM_Base_SetConfig+0xb2>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a28      	ldr	r2, [pc, #160]	; (8002ff4 <TIM_Base_SetConfig+0x128>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d013      	beq.n	8002f7e <TIM_Base_SetConfig+0xb2>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a27      	ldr	r2, [pc, #156]	; (8002ff8 <TIM_Base_SetConfig+0x12c>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d00f      	beq.n	8002f7e <TIM_Base_SetConfig+0xb2>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a26      	ldr	r2, [pc, #152]	; (8002ffc <TIM_Base_SetConfig+0x130>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d00b      	beq.n	8002f7e <TIM_Base_SetConfig+0xb2>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a25      	ldr	r2, [pc, #148]	; (8003000 <TIM_Base_SetConfig+0x134>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d007      	beq.n	8002f7e <TIM_Base_SetConfig+0xb2>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a24      	ldr	r2, [pc, #144]	; (8003004 <TIM_Base_SetConfig+0x138>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d003      	beq.n	8002f7e <TIM_Base_SetConfig+0xb2>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a23      	ldr	r2, [pc, #140]	; (8003008 <TIM_Base_SetConfig+0x13c>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d108      	bne.n	8002f90 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a0a      	ldr	r2, [pc, #40]	; (8002fe0 <TIM_Base_SetConfig+0x114>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d003      	beq.n	8002fc4 <TIM_Base_SetConfig+0xf8>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a0c      	ldr	r2, [pc, #48]	; (8002ff0 <TIM_Base_SetConfig+0x124>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d103      	bne.n	8002fcc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	691a      	ldr	r2, [r3, #16]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	615a      	str	r2, [r3, #20]
}
 8002fd2:	bf00      	nop
 8002fd4:	3714      	adds	r7, #20
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	40010000 	.word	0x40010000
 8002fe4:	40000400 	.word	0x40000400
 8002fe8:	40000800 	.word	0x40000800
 8002fec:	40000c00 	.word	0x40000c00
 8002ff0:	40010400 	.word	0x40010400
 8002ff4:	40014000 	.word	0x40014000
 8002ff8:	40014400 	.word	0x40014400
 8002ffc:	40014800 	.word	0x40014800
 8003000:	40001800 	.word	0x40001800
 8003004:	40001c00 	.word	0x40001c00
 8003008:	40002000 	.word	0x40002000

0800300c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800300c:	b480      	push	{r7}
 800300e:	b087      	sub	sp, #28
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a1b      	ldr	r3, [r3, #32]
 800301a:	f023 0201 	bic.w	r2, r3, #1
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a1b      	ldr	r3, [r3, #32]
 8003026:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800303a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f023 0303 	bic.w	r3, r3, #3
 8003042:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	4313      	orrs	r3, r2
 800304c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	f023 0302 	bic.w	r3, r3, #2
 8003054:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	4313      	orrs	r3, r2
 800305e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a20      	ldr	r2, [pc, #128]	; (80030e4 <TIM_OC1_SetConfig+0xd8>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d003      	beq.n	8003070 <TIM_OC1_SetConfig+0x64>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a1f      	ldr	r2, [pc, #124]	; (80030e8 <TIM_OC1_SetConfig+0xdc>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d10c      	bne.n	800308a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	f023 0308 	bic.w	r3, r3, #8
 8003076:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	697a      	ldr	r2, [r7, #20]
 800307e:	4313      	orrs	r3, r2
 8003080:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	f023 0304 	bic.w	r3, r3, #4
 8003088:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a15      	ldr	r2, [pc, #84]	; (80030e4 <TIM_OC1_SetConfig+0xd8>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d003      	beq.n	800309a <TIM_OC1_SetConfig+0x8e>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a14      	ldr	r2, [pc, #80]	; (80030e8 <TIM_OC1_SetConfig+0xdc>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d111      	bne.n	80030be <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	685a      	ldr	r2, [r3, #4]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	697a      	ldr	r2, [r7, #20]
 80030d6:	621a      	str	r2, [r3, #32]
}
 80030d8:	bf00      	nop
 80030da:	371c      	adds	r7, #28
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr
 80030e4:	40010000 	.word	0x40010000
 80030e8:	40010400 	.word	0x40010400

080030ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b087      	sub	sp, #28
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	f023 0210 	bic.w	r2, r3, #16
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800311a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003122:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	021b      	lsls	r3, r3, #8
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	4313      	orrs	r3, r2
 800312e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	f023 0320 	bic.w	r3, r3, #32
 8003136:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	011b      	lsls	r3, r3, #4
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	4313      	orrs	r3, r2
 8003142:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a22      	ldr	r2, [pc, #136]	; (80031d0 <TIM_OC2_SetConfig+0xe4>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d003      	beq.n	8003154 <TIM_OC2_SetConfig+0x68>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a21      	ldr	r2, [pc, #132]	; (80031d4 <TIM_OC2_SetConfig+0xe8>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d10d      	bne.n	8003170 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800315a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	011b      	lsls	r3, r3, #4
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	4313      	orrs	r3, r2
 8003166:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800316e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a17      	ldr	r2, [pc, #92]	; (80031d0 <TIM_OC2_SetConfig+0xe4>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d003      	beq.n	8003180 <TIM_OC2_SetConfig+0x94>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a16      	ldr	r2, [pc, #88]	; (80031d4 <TIM_OC2_SetConfig+0xe8>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d113      	bne.n	80031a8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003186:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800318e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	695b      	ldr	r3, [r3, #20]
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	4313      	orrs	r3, r2
 800319a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	697a      	ldr	r2, [r7, #20]
 80031c0:	621a      	str	r2, [r3, #32]
}
 80031c2:	bf00      	nop
 80031c4:	371c      	adds	r7, #28
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	40010000 	.word	0x40010000
 80031d4:	40010400 	.word	0x40010400

080031d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031d8:	b480      	push	{r7}
 80031da:	b087      	sub	sp, #28
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a1b      	ldr	r3, [r3, #32]
 80031e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a1b      	ldr	r3, [r3, #32]
 80031f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f023 0303 	bic.w	r3, r3, #3
 800320e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	4313      	orrs	r3, r2
 8003218:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003220:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	021b      	lsls	r3, r3, #8
 8003228:	697a      	ldr	r2, [r7, #20]
 800322a:	4313      	orrs	r3, r2
 800322c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a21      	ldr	r2, [pc, #132]	; (80032b8 <TIM_OC3_SetConfig+0xe0>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d003      	beq.n	800323e <TIM_OC3_SetConfig+0x66>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a20      	ldr	r2, [pc, #128]	; (80032bc <TIM_OC3_SetConfig+0xe4>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d10d      	bne.n	800325a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003244:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	021b      	lsls	r3, r3, #8
 800324c:	697a      	ldr	r2, [r7, #20]
 800324e:	4313      	orrs	r3, r2
 8003250:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003258:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a16      	ldr	r2, [pc, #88]	; (80032b8 <TIM_OC3_SetConfig+0xe0>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d003      	beq.n	800326a <TIM_OC3_SetConfig+0x92>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a15      	ldr	r2, [pc, #84]	; (80032bc <TIM_OC3_SetConfig+0xe4>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d113      	bne.n	8003292 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003270:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003278:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	011b      	lsls	r3, r3, #4
 8003280:	693a      	ldr	r2, [r7, #16]
 8003282:	4313      	orrs	r3, r2
 8003284:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	011b      	lsls	r3, r3, #4
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	4313      	orrs	r3, r2
 8003290:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	685a      	ldr	r2, [r3, #4]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	621a      	str	r2, [r3, #32]
}
 80032ac:	bf00      	nop
 80032ae:	371c      	adds	r7, #28
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr
 80032b8:	40010000 	.word	0x40010000
 80032bc:	40010400 	.word	0x40010400

080032c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b087      	sub	sp, #28
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a1b      	ldr	r3, [r3, #32]
 80032ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a1b      	ldr	r3, [r3, #32]
 80032da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	69db      	ldr	r3, [r3, #28]
 80032e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	021b      	lsls	r3, r3, #8
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	4313      	orrs	r3, r2
 8003302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800330a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	031b      	lsls	r3, r3, #12
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	4313      	orrs	r3, r2
 8003316:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a12      	ldr	r2, [pc, #72]	; (8003364 <TIM_OC4_SetConfig+0xa4>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d003      	beq.n	8003328 <TIM_OC4_SetConfig+0x68>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a11      	ldr	r2, [pc, #68]	; (8003368 <TIM_OC4_SetConfig+0xa8>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d109      	bne.n	800333c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800332e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	695b      	ldr	r3, [r3, #20]
 8003334:	019b      	lsls	r3, r3, #6
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	4313      	orrs	r3, r2
 800333a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	697a      	ldr	r2, [r7, #20]
 8003340:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	621a      	str	r2, [r3, #32]
}
 8003356:	bf00      	nop
 8003358:	371c      	adds	r7, #28
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	40010000 	.word	0x40010000
 8003368:	40010400 	.word	0x40010400

0800336c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800336c:	b480      	push	{r7}
 800336e:	b087      	sub	sp, #28
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6a1b      	ldr	r3, [r3, #32]
 800337c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	f023 0201 	bic.w	r2, r3, #1
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003396:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	011b      	lsls	r3, r3, #4
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	4313      	orrs	r3, r2
 80033a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	f023 030a 	bic.w	r3, r3, #10
 80033a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	621a      	str	r2, [r3, #32]
}
 80033be:	bf00      	nop
 80033c0:	371c      	adds	r7, #28
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr

080033ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033ca:	b480      	push	{r7}
 80033cc:	b087      	sub	sp, #28
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	60f8      	str	r0, [r7, #12]
 80033d2:	60b9      	str	r1, [r7, #8]
 80033d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	f023 0210 	bic.w	r2, r3, #16
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6a1b      	ldr	r3, [r3, #32]
 80033ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	031b      	lsls	r3, r3, #12
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003406:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	011b      	lsls	r3, r3, #4
 800340c:	693a      	ldr	r2, [r7, #16]
 800340e:	4313      	orrs	r3, r2
 8003410:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	697a      	ldr	r2, [r7, #20]
 8003416:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	621a      	str	r2, [r3, #32]
}
 800341e:	bf00      	nop
 8003420:	371c      	adds	r7, #28
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr

0800342a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800342a:	b480      	push	{r7}
 800342c:	b085      	sub	sp, #20
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
 8003432:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003440:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	4313      	orrs	r3, r2
 8003448:	f043 0307 	orr.w	r3, r3, #7
 800344c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	609a      	str	r2, [r3, #8]
}
 8003454:	bf00      	nop
 8003456:	3714      	adds	r7, #20
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003460:	b480      	push	{r7}
 8003462:	b087      	sub	sp, #28
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
 800346c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800347a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	021a      	lsls	r2, r3, #8
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	431a      	orrs	r2, r3
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	4313      	orrs	r3, r2
 8003488:	697a      	ldr	r2, [r7, #20]
 800348a:	4313      	orrs	r3, r2
 800348c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	697a      	ldr	r2, [r7, #20]
 8003492:	609a      	str	r2, [r3, #8]
}
 8003494:	bf00      	nop
 8003496:	371c      	adds	r7, #28
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b087      	sub	sp, #28
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	f003 031f 	and.w	r3, r3, #31
 80034b2:	2201      	movs	r2, #1
 80034b4:	fa02 f303 	lsl.w	r3, r2, r3
 80034b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6a1a      	ldr	r2, [r3, #32]
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	43db      	mvns	r3, r3
 80034c2:	401a      	ands	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6a1a      	ldr	r2, [r3, #32]
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	f003 031f 	and.w	r3, r3, #31
 80034d2:	6879      	ldr	r1, [r7, #4]
 80034d4:	fa01 f303 	lsl.w	r3, r1, r3
 80034d8:	431a      	orrs	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	621a      	str	r2, [r3, #32]
}
 80034de:	bf00      	nop
 80034e0:	371c      	adds	r7, #28
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
	...

080034ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b085      	sub	sp, #20
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d101      	bne.n	8003504 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003500:	2302      	movs	r3, #2
 8003502:	e05a      	b.n	80035ba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2202      	movs	r2, #2
 8003510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800352a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	4313      	orrs	r3, r2
 8003534:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a21      	ldr	r2, [pc, #132]	; (80035c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d022      	beq.n	800358e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003550:	d01d      	beq.n	800358e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a1d      	ldr	r2, [pc, #116]	; (80035cc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d018      	beq.n	800358e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a1b      	ldr	r2, [pc, #108]	; (80035d0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d013      	beq.n	800358e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a1a      	ldr	r2, [pc, #104]	; (80035d4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d00e      	beq.n	800358e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a18      	ldr	r2, [pc, #96]	; (80035d8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d009      	beq.n	800358e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a17      	ldr	r2, [pc, #92]	; (80035dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d004      	beq.n	800358e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a15      	ldr	r2, [pc, #84]	; (80035e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d10c      	bne.n	80035a8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003594:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	68ba      	ldr	r2, [r7, #8]
 800359c:	4313      	orrs	r3, r2
 800359e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68ba      	ldr	r2, [r7, #8]
 80035a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3714      	adds	r7, #20
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	40010000 	.word	0x40010000
 80035cc:	40000400 	.word	0x40000400
 80035d0:	40000800 	.word	0x40000800
 80035d4:	40000c00 	.word	0x40000c00
 80035d8:	40010400 	.word	0x40010400
 80035dc:	40014000 	.word	0x40014000
 80035e0:	40001800 	.word	0x40001800

080035e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80035ee:	2300      	movs	r3, #0
 80035f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d101      	bne.n	8003600 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80035fc:	2302      	movs	r3, #2
 80035fe:	e03d      	b.n	800367c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	4313      	orrs	r3, r2
 8003614:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	4313      	orrs	r3, r2
 8003622:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	4313      	orrs	r3, r2
 8003630:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4313      	orrs	r3, r2
 800363e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	4313      	orrs	r3, r2
 800364c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	4313      	orrs	r3, r2
 800365a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	69db      	ldr	r3, [r3, #28]
 8003666:	4313      	orrs	r3, r2
 8003668:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3714      	adds	r7, #20
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003690:	bf00      	nop
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d101      	bne.n	80036c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e03f      	b.n	8003742 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d106      	bne.n	80036dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f7fd fce8 	bl	80010ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2224      	movs	r2, #36	; 0x24
 80036e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68da      	ldr	r2, [r3, #12]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 fddb 	bl	80042b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	691a      	ldr	r2, [r3, #16]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003708:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	695a      	ldr	r2, [r3, #20]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003718:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68da      	ldr	r2, [r3, #12]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003728:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2220      	movs	r2, #32
 8003734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2220      	movs	r2, #32
 800373c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3708      	adds	r7, #8
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800374a:	b580      	push	{r7, lr}
 800374c:	b08a      	sub	sp, #40	; 0x28
 800374e:	af02      	add	r7, sp, #8
 8003750:	60f8      	str	r0, [r7, #12]
 8003752:	60b9      	str	r1, [r7, #8]
 8003754:	603b      	str	r3, [r7, #0]
 8003756:	4613      	mov	r3, r2
 8003758:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800375a:	2300      	movs	r3, #0
 800375c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b20      	cmp	r3, #32
 8003768:	d17c      	bne.n	8003864 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d002      	beq.n	8003776 <HAL_UART_Transmit+0x2c>
 8003770:	88fb      	ldrh	r3, [r7, #6]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e075      	b.n	8003866 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003780:	2b01      	cmp	r3, #1
 8003782:	d101      	bne.n	8003788 <HAL_UART_Transmit+0x3e>
 8003784:	2302      	movs	r3, #2
 8003786:	e06e      	b.n	8003866 <HAL_UART_Transmit+0x11c>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2221      	movs	r2, #33	; 0x21
 800379a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800379e:	f7fd fd65 	bl	800126c <HAL_GetTick>
 80037a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	88fa      	ldrh	r2, [r7, #6]
 80037a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	88fa      	ldrh	r2, [r7, #6]
 80037ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037b8:	d108      	bne.n	80037cc <HAL_UART_Transmit+0x82>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d104      	bne.n	80037cc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80037c2:	2300      	movs	r3, #0
 80037c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	61bb      	str	r3, [r7, #24]
 80037ca:	e003      	b.n	80037d4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037d0:	2300      	movs	r3, #0
 80037d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80037dc:	e02a      	b.n	8003834 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	2200      	movs	r2, #0
 80037e6:	2180      	movs	r1, #128	; 0x80
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	f000 fb1f 	bl	8003e2c <UART_WaitOnFlagUntilTimeout>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d001      	beq.n	80037f8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e036      	b.n	8003866 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10b      	bne.n	8003816 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	881b      	ldrh	r3, [r3, #0]
 8003802:	461a      	mov	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800380c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	3302      	adds	r3, #2
 8003812:	61bb      	str	r3, [r7, #24]
 8003814:	e007      	b.n	8003826 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	781a      	ldrb	r2, [r3, #0]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	3301      	adds	r3, #1
 8003824:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800382a:	b29b      	uxth	r3, r3
 800382c:	3b01      	subs	r3, #1
 800382e:	b29a      	uxth	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003838:	b29b      	uxth	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1cf      	bne.n	80037de <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	9300      	str	r3, [sp, #0]
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	2200      	movs	r2, #0
 8003846:	2140      	movs	r1, #64	; 0x40
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	f000 faef 	bl	8003e2c <UART_WaitOnFlagUntilTimeout>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d001      	beq.n	8003858 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e006      	b.n	8003866 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2220      	movs	r2, #32
 800385c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003860:	2300      	movs	r3, #0
 8003862:	e000      	b.n	8003866 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003864:	2302      	movs	r3, #2
  }
}
 8003866:	4618      	mov	r0, r3
 8003868:	3720      	adds	r7, #32
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800386e:	b580      	push	{r7, lr}
 8003870:	b084      	sub	sp, #16
 8003872:	af00      	add	r7, sp, #0
 8003874:	60f8      	str	r0, [r7, #12]
 8003876:	60b9      	str	r1, [r7, #8]
 8003878:	4613      	mov	r3, r2
 800387a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003882:	b2db      	uxtb	r3, r3
 8003884:	2b20      	cmp	r3, #32
 8003886:	d11d      	bne.n	80038c4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d002      	beq.n	8003894 <HAL_UART_Receive_IT+0x26>
 800388e:	88fb      	ldrh	r3, [r7, #6]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d101      	bne.n	8003898 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e016      	b.n	80038c6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d101      	bne.n	80038a6 <HAL_UART_Receive_IT+0x38>
 80038a2:	2302      	movs	r3, #2
 80038a4:	e00f      	b.n	80038c6 <HAL_UART_Receive_IT+0x58>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80038b4:	88fb      	ldrh	r3, [r7, #6]
 80038b6:	461a      	mov	r2, r3
 80038b8:	68b9      	ldr	r1, [r7, #8]
 80038ba:	68f8      	ldr	r0, [r7, #12]
 80038bc:	f000 fb24 	bl	8003f08 <UART_Start_Receive_IT>
 80038c0:	4603      	mov	r3, r0
 80038c2:	e000      	b.n	80038c6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80038c4:	2302      	movs	r3, #2
  }
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
	...

080038d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b0ba      	sub	sp, #232	; 0xe8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80038f6:	2300      	movs	r3, #0
 80038f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80038fc:	2300      	movs	r3, #0
 80038fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003906:	f003 030f 	and.w	r3, r3, #15
 800390a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800390e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003912:	2b00      	cmp	r3, #0
 8003914:	d10f      	bne.n	8003936 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800391a:	f003 0320 	and.w	r3, r3, #32
 800391e:	2b00      	cmp	r3, #0
 8003920:	d009      	beq.n	8003936 <HAL_UART_IRQHandler+0x66>
 8003922:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003926:	f003 0320 	and.w	r3, r3, #32
 800392a:	2b00      	cmp	r3, #0
 800392c:	d003      	beq.n	8003936 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 fc03 	bl	800413a <UART_Receive_IT>
      return;
 8003934:	e256      	b.n	8003de4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003936:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800393a:	2b00      	cmp	r3, #0
 800393c:	f000 80de 	beq.w	8003afc <HAL_UART_IRQHandler+0x22c>
 8003940:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	2b00      	cmp	r3, #0
 800394a:	d106      	bne.n	800395a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800394c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003950:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003954:	2b00      	cmp	r3, #0
 8003956:	f000 80d1 	beq.w	8003afc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800395a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00b      	beq.n	800397e <HAL_UART_IRQHandler+0xae>
 8003966:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800396a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800396e:	2b00      	cmp	r3, #0
 8003970:	d005      	beq.n	800397e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003976:	f043 0201 	orr.w	r2, r3, #1
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800397e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003982:	f003 0304 	and.w	r3, r3, #4
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00b      	beq.n	80039a2 <HAL_UART_IRQHandler+0xd2>
 800398a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	2b00      	cmp	r3, #0
 8003994:	d005      	beq.n	80039a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399a:	f043 0202 	orr.w	r2, r3, #2
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00b      	beq.n	80039c6 <HAL_UART_IRQHandler+0xf6>
 80039ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d005      	beq.n	80039c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	f043 0204 	orr.w	r2, r3, #4
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80039c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039ca:	f003 0308 	and.w	r3, r3, #8
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d011      	beq.n	80039f6 <HAL_UART_IRQHandler+0x126>
 80039d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039d6:	f003 0320 	and.w	r3, r3, #32
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d105      	bne.n	80039ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80039de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d005      	beq.n	80039f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ee:	f043 0208 	orr.w	r2, r3, #8
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	f000 81ed 	beq.w	8003dda <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a04:	f003 0320 	and.w	r3, r3, #32
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d008      	beq.n	8003a1e <HAL_UART_IRQHandler+0x14e>
 8003a0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a10:	f003 0320 	and.w	r3, r3, #32
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d002      	beq.n	8003a1e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 fb8e 	bl	800413a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	695b      	ldr	r3, [r3, #20]
 8003a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a28:	2b40      	cmp	r3, #64	; 0x40
 8003a2a:	bf0c      	ite	eq
 8003a2c:	2301      	moveq	r3, #1
 8003a2e:	2300      	movne	r3, #0
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	f003 0308 	and.w	r3, r3, #8
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d103      	bne.n	8003a4a <HAL_UART_IRQHandler+0x17a>
 8003a42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d04f      	beq.n	8003aea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 fa96 	bl	8003f7c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a5a:	2b40      	cmp	r3, #64	; 0x40
 8003a5c:	d141      	bne.n	8003ae2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	3314      	adds	r3, #20
 8003a64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a6c:	e853 3f00 	ldrex	r3, [r3]
 8003a70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003a74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	3314      	adds	r3, #20
 8003a86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003a8a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003a8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003a96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003a9a:	e841 2300 	strex	r3, r2, [r1]
 8003a9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003aa2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1d9      	bne.n	8003a5e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d013      	beq.n	8003ada <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab6:	4a7d      	ldr	r2, [pc, #500]	; (8003cac <HAL_UART_IRQHandler+0x3dc>)
 8003ab8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7fd fd61 	bl	8001586 <HAL_DMA_Abort_IT>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d016      	beq.n	8003af8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ad4:	4610      	mov	r0, r2
 8003ad6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ad8:	e00e      	b.n	8003af8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 f990 	bl	8003e00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ae0:	e00a      	b.n	8003af8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 f98c 	bl	8003e00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ae8:	e006      	b.n	8003af8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 f988 	bl	8003e00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003af6:	e170      	b.n	8003dda <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003af8:	bf00      	nop
    return;
 8003afa:	e16e      	b.n	8003dda <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	f040 814a 	bne.w	8003d9a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b0a:	f003 0310 	and.w	r3, r3, #16
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f000 8143 	beq.w	8003d9a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003b14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b18:	f003 0310 	and.w	r3, r3, #16
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f000 813c 	beq.w	8003d9a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b22:	2300      	movs	r3, #0
 8003b24:	60bb      	str	r3, [r7, #8]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	60bb      	str	r3, [r7, #8]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	60bb      	str	r3, [r7, #8]
 8003b36:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b42:	2b40      	cmp	r3, #64	; 0x40
 8003b44:	f040 80b4 	bne.w	8003cb0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b54:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f000 8140 	beq.w	8003dde <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b66:	429a      	cmp	r2, r3
 8003b68:	f080 8139 	bcs.w	8003dde <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b72:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b78:	69db      	ldr	r3, [r3, #28]
 8003b7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b7e:	f000 8088 	beq.w	8003c92 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	330c      	adds	r3, #12
 8003b88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b90:	e853 3f00 	ldrex	r3, [r3]
 8003b94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003b98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ba0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	330c      	adds	r3, #12
 8003baa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003bae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003bb2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003bba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003bbe:	e841 2300 	strex	r3, r2, [r1]
 8003bc2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003bc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1d9      	bne.n	8003b82 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	3314      	adds	r3, #20
 8003bd4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bd8:	e853 3f00 	ldrex	r3, [r3]
 8003bdc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003bde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003be0:	f023 0301 	bic.w	r3, r3, #1
 8003be4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	3314      	adds	r3, #20
 8003bee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003bf2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003bf6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003bfa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003bfe:	e841 2300 	strex	r3, r2, [r1]
 8003c02:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003c04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1e1      	bne.n	8003bce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	3314      	adds	r3, #20
 8003c10:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c14:	e853 3f00 	ldrex	r3, [r3]
 8003c18:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003c1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	3314      	adds	r3, #20
 8003c2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003c2e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003c30:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c32:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003c34:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c36:	e841 2300 	strex	r3, r2, [r1]
 8003c3a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003c3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1e3      	bne.n	8003c0a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2220      	movs	r2, #32
 8003c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	330c      	adds	r3, #12
 8003c56:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c5a:	e853 3f00 	ldrex	r3, [r3]
 8003c5e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003c60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c62:	f023 0310 	bic.w	r3, r3, #16
 8003c66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	330c      	adds	r3, #12
 8003c70:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003c74:	65ba      	str	r2, [r7, #88]	; 0x58
 8003c76:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c78:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003c7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c7c:	e841 2300 	strex	r3, r2, [r1]
 8003c80:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003c82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1e3      	bne.n	8003c50 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7fd fc0a 	bl	80014a6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f8b6 	bl	8003e14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ca8:	e099      	b.n	8003dde <HAL_UART_IRQHandler+0x50e>
 8003caa:	bf00      	nop
 8003cac:	08004043 	.word	0x08004043
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	f000 808b 	beq.w	8003de2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003ccc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f000 8086 	beq.w	8003de2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	330c      	adds	r3, #12
 8003cdc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce0:	e853 3f00 	ldrex	r3, [r3]
 8003ce4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ce8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003cec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	330c      	adds	r3, #12
 8003cf6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003cfa:	647a      	str	r2, [r7, #68]	; 0x44
 8003cfc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cfe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d02:	e841 2300 	strex	r3, r2, [r1]
 8003d06:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1e3      	bne.n	8003cd6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	3314      	adds	r3, #20
 8003d14:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d18:	e853 3f00 	ldrex	r3, [r3]
 8003d1c:	623b      	str	r3, [r7, #32]
   return(result);
 8003d1e:	6a3b      	ldr	r3, [r7, #32]
 8003d20:	f023 0301 	bic.w	r3, r3, #1
 8003d24:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	3314      	adds	r3, #20
 8003d2e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003d32:	633a      	str	r2, [r7, #48]	; 0x30
 8003d34:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d3a:	e841 2300 	strex	r3, r2, [r1]
 8003d3e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1e3      	bne.n	8003d0e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2220      	movs	r2, #32
 8003d4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	330c      	adds	r3, #12
 8003d5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	e853 3f00 	ldrex	r3, [r3]
 8003d62:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f023 0310 	bic.w	r3, r3, #16
 8003d6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	330c      	adds	r3, #12
 8003d74:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003d78:	61fa      	str	r2, [r7, #28]
 8003d7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7c:	69b9      	ldr	r1, [r7, #24]
 8003d7e:	69fa      	ldr	r2, [r7, #28]
 8003d80:	e841 2300 	strex	r3, r2, [r1]
 8003d84:	617b      	str	r3, [r7, #20]
   return(result);
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1e3      	bne.n	8003d54 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d90:	4619      	mov	r1, r3
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 f83e 	bl	8003e14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d98:	e023      	b.n	8003de2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d009      	beq.n	8003dba <HAL_UART_IRQHandler+0x4ea>
 8003da6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d003      	beq.n	8003dba <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 f959 	bl	800406a <UART_Transmit_IT>
    return;
 8003db8:	e014      	b.n	8003de4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00e      	beq.n	8003de4 <HAL_UART_IRQHandler+0x514>
 8003dc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d008      	beq.n	8003de4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 f999 	bl	800410a <UART_EndTransmit_IT>
    return;
 8003dd8:	e004      	b.n	8003de4 <HAL_UART_IRQHandler+0x514>
    return;
 8003dda:	bf00      	nop
 8003ddc:	e002      	b.n	8003de4 <HAL_UART_IRQHandler+0x514>
      return;
 8003dde:	bf00      	nop
 8003de0:	e000      	b.n	8003de4 <HAL_UART_IRQHandler+0x514>
      return;
 8003de2:	bf00      	nop
  }
}
 8003de4:	37e8      	adds	r7, #232	; 0xe8
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop

08003dec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e08:	bf00      	nop
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b090      	sub	sp, #64	; 0x40
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	603b      	str	r3, [r7, #0]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e3c:	e050      	b.n	8003ee0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e44:	d04c      	beq.n	8003ee0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d007      	beq.n	8003e5c <UART_WaitOnFlagUntilTimeout+0x30>
 8003e4c:	f7fd fa0e 	bl	800126c <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d241      	bcs.n	8003ee0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	330c      	adds	r3, #12
 8003e62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e66:	e853 3f00 	ldrex	r3, [r3]
 8003e6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	330c      	adds	r3, #12
 8003e7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e7c:	637a      	str	r2, [r7, #52]	; 0x34
 8003e7e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e84:	e841 2300 	strex	r3, r2, [r1]
 8003e88:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d1e5      	bne.n	8003e5c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	3314      	adds	r3, #20
 8003e96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	e853 3f00 	ldrex	r3, [r3]
 8003e9e:	613b      	str	r3, [r7, #16]
   return(result);
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	f023 0301 	bic.w	r3, r3, #1
 8003ea6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	3314      	adds	r3, #20
 8003eae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003eb0:	623a      	str	r2, [r7, #32]
 8003eb2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb4:	69f9      	ldr	r1, [r7, #28]
 8003eb6:	6a3a      	ldr	r2, [r7, #32]
 8003eb8:	e841 2300 	strex	r3, r2, [r1]
 8003ebc:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1e5      	bne.n	8003e90 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2220      	movs	r2, #32
 8003ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2220      	movs	r2, #32
 8003ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e00f      	b.n	8003f00 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	4013      	ands	r3, r2
 8003eea:	68ba      	ldr	r2, [r7, #8]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	bf0c      	ite	eq
 8003ef0:	2301      	moveq	r3, #1
 8003ef2:	2300      	movne	r3, #0
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	79fb      	ldrb	r3, [r7, #7]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d09f      	beq.n	8003e3e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3740      	adds	r7, #64	; 0x40
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	4613      	mov	r3, r2
 8003f14:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	68ba      	ldr	r2, [r7, #8]
 8003f1a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	88fa      	ldrh	r2, [r7, #6]
 8003f20:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	88fa      	ldrh	r2, [r7, #6]
 8003f26:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2222      	movs	r2, #34	; 0x22
 8003f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68da      	ldr	r2, [r3, #12]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f4c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	695a      	ldr	r2, [r3, #20]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f042 0201 	orr.w	r2, r2, #1
 8003f5c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68da      	ldr	r2, [r3, #12]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f042 0220 	orr.w	r2, r2, #32
 8003f6c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3714      	adds	r7, #20
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b095      	sub	sp, #84	; 0x54
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	330c      	adds	r3, #12
 8003f8a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f8e:	e853 3f00 	ldrex	r3, [r3]
 8003f92:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f96:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	330c      	adds	r3, #12
 8003fa2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003fa4:	643a      	str	r2, [r7, #64]	; 0x40
 8003fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003faa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003fac:	e841 2300 	strex	r3, r2, [r1]
 8003fb0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1e5      	bne.n	8003f84 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	3314      	adds	r3, #20
 8003fbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc0:	6a3b      	ldr	r3, [r7, #32]
 8003fc2:	e853 3f00 	ldrex	r3, [r3]
 8003fc6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	f023 0301 	bic.w	r3, r3, #1
 8003fce:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	3314      	adds	r3, #20
 8003fd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fd8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fdc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fe0:	e841 2300 	strex	r3, r2, [r1]
 8003fe4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1e5      	bne.n	8003fb8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d119      	bne.n	8004028 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	330c      	adds	r3, #12
 8003ffa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	e853 3f00 	ldrex	r3, [r3]
 8004002:	60bb      	str	r3, [r7, #8]
   return(result);
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	f023 0310 	bic.w	r3, r3, #16
 800400a:	647b      	str	r3, [r7, #68]	; 0x44
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	330c      	adds	r3, #12
 8004012:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004014:	61ba      	str	r2, [r7, #24]
 8004016:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004018:	6979      	ldr	r1, [r7, #20]
 800401a:	69ba      	ldr	r2, [r7, #24]
 800401c:	e841 2300 	strex	r3, r2, [r1]
 8004020:	613b      	str	r3, [r7, #16]
   return(result);
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d1e5      	bne.n	8003ff4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2220      	movs	r2, #32
 800402c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004036:	bf00      	nop
 8004038:	3754      	adds	r7, #84	; 0x54
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr

08004042 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004042:	b580      	push	{r7, lr}
 8004044:	b084      	sub	sp, #16
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800404e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2200      	movs	r2, #0
 8004054:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800405c:	68f8      	ldr	r0, [r7, #12]
 800405e:	f7ff fecf 	bl	8003e00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004062:	bf00      	nop
 8004064:	3710      	adds	r7, #16
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}

0800406a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800406a:	b480      	push	{r7}
 800406c:	b085      	sub	sp, #20
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b21      	cmp	r3, #33	; 0x21
 800407c:	d13e      	bne.n	80040fc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004086:	d114      	bne.n	80040b2 <UART_Transmit_IT+0x48>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d110      	bne.n	80040b2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a1b      	ldr	r3, [r3, #32]
 8004094:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	881b      	ldrh	r3, [r3, #0]
 800409a:	461a      	mov	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040a4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	1c9a      	adds	r2, r3, #2
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	621a      	str	r2, [r3, #32]
 80040b0:	e008      	b.n	80040c4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	1c59      	adds	r1, r3, #1
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	6211      	str	r1, [r2, #32]
 80040bc:	781a      	ldrb	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	3b01      	subs	r3, #1
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	4619      	mov	r1, r3
 80040d2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d10f      	bne.n	80040f8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68da      	ldr	r2, [r3, #12]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040e6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68da      	ldr	r2, [r3, #12]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040f6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80040f8:	2300      	movs	r3, #0
 80040fa:	e000      	b.n	80040fe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80040fc:	2302      	movs	r3, #2
  }
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3714      	adds	r7, #20
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr

0800410a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800410a:	b580      	push	{r7, lr}
 800410c:	b082      	sub	sp, #8
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68da      	ldr	r2, [r3, #12]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004120:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2220      	movs	r2, #32
 8004126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f7ff fe5e 	bl	8003dec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3708      	adds	r7, #8
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}

0800413a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800413a:	b580      	push	{r7, lr}
 800413c:	b08c      	sub	sp, #48	; 0x30
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004148:	b2db      	uxtb	r3, r3
 800414a:	2b22      	cmp	r3, #34	; 0x22
 800414c:	f040 80ab 	bne.w	80042a6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004158:	d117      	bne.n	800418a <UART_Receive_IT+0x50>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d113      	bne.n	800418a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004162:	2300      	movs	r3, #0
 8004164:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800416a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	b29b      	uxth	r3, r3
 8004174:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004178:	b29a      	uxth	r2, r3
 800417a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004182:	1c9a      	adds	r2, r3, #2
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	629a      	str	r2, [r3, #40]	; 0x28
 8004188:	e026      	b.n	80041d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004190:	2300      	movs	r3, #0
 8004192:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800419c:	d007      	beq.n	80041ae <UART_Receive_IT+0x74>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d10a      	bne.n	80041bc <UART_Receive_IT+0x82>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d106      	bne.n	80041bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	b2da      	uxtb	r2, r3
 80041b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041b8:	701a      	strb	r2, [r3, #0]
 80041ba:	e008      	b.n	80041ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041c8:	b2da      	uxtb	r2, r3
 80041ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d2:	1c5a      	adds	r2, r3, #1
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041dc:	b29b      	uxth	r3, r3
 80041de:	3b01      	subs	r3, #1
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	4619      	mov	r1, r3
 80041e6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d15a      	bne.n	80042a2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68da      	ldr	r2, [r3, #12]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f022 0220 	bic.w	r2, r2, #32
 80041fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68da      	ldr	r2, [r3, #12]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800420a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	695a      	ldr	r2, [r3, #20]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f022 0201 	bic.w	r2, r2, #1
 800421a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2220      	movs	r2, #32
 8004220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004228:	2b01      	cmp	r3, #1
 800422a:	d135      	bne.n	8004298 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	330c      	adds	r3, #12
 8004238:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	e853 3f00 	ldrex	r3, [r3]
 8004240:	613b      	str	r3, [r7, #16]
   return(result);
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	f023 0310 	bic.w	r3, r3, #16
 8004248:	627b      	str	r3, [r7, #36]	; 0x24
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	330c      	adds	r3, #12
 8004250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004252:	623a      	str	r2, [r7, #32]
 8004254:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004256:	69f9      	ldr	r1, [r7, #28]
 8004258:	6a3a      	ldr	r2, [r7, #32]
 800425a:	e841 2300 	strex	r3, r2, [r1]
 800425e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d1e5      	bne.n	8004232 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0310 	and.w	r3, r3, #16
 8004270:	2b10      	cmp	r3, #16
 8004272:	d10a      	bne.n	800428a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004274:	2300      	movs	r3, #0
 8004276:	60fb      	str	r3, [r7, #12]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	60fb      	str	r3, [r7, #12]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	60fb      	str	r3, [r7, #12]
 8004288:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800428e:	4619      	mov	r1, r3
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f7ff fdbf 	bl	8003e14 <HAL_UARTEx_RxEventCallback>
 8004296:	e002      	b.n	800429e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f7fc fba9 	bl	80009f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800429e:	2300      	movs	r3, #0
 80042a0:	e002      	b.n	80042a8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80042a2:	2300      	movs	r3, #0
 80042a4:	e000      	b.n	80042a8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80042a6:	2302      	movs	r3, #2
  }
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3730      	adds	r7, #48	; 0x30
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042b4:	b09f      	sub	sp, #124	; 0x7c
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80042c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042c6:	68d9      	ldr	r1, [r3, #12]
 80042c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	ea40 0301 	orr.w	r3, r0, r1
 80042d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042d4:	689a      	ldr	r2, [r3, #8]
 80042d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	431a      	orrs	r2, r3
 80042dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042de:	695b      	ldr	r3, [r3, #20]
 80042e0:	431a      	orrs	r2, r3
 80042e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042e4:	69db      	ldr	r3, [r3, #28]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80042ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80042f4:	f021 010c 	bic.w	r1, r1, #12
 80042f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042fe:	430b      	orrs	r3, r1
 8004300:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004302:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	695b      	ldr	r3, [r3, #20]
 8004308:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800430c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800430e:	6999      	ldr	r1, [r3, #24]
 8004310:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	ea40 0301 	orr.w	r3, r0, r1
 8004318:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800431a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	4bc5      	ldr	r3, [pc, #788]	; (8004634 <UART_SetConfig+0x384>)
 8004320:	429a      	cmp	r2, r3
 8004322:	d004      	beq.n	800432e <UART_SetConfig+0x7e>
 8004324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	4bc3      	ldr	r3, [pc, #780]	; (8004638 <UART_SetConfig+0x388>)
 800432a:	429a      	cmp	r2, r3
 800432c:	d103      	bne.n	8004336 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800432e:	f7fd fc01 	bl	8001b34 <HAL_RCC_GetPCLK2Freq>
 8004332:	6778      	str	r0, [r7, #116]	; 0x74
 8004334:	e002      	b.n	800433c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004336:	f7fd fbe9 	bl	8001b0c <HAL_RCC_GetPCLK1Freq>
 800433a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800433c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800433e:	69db      	ldr	r3, [r3, #28]
 8004340:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004344:	f040 80b6 	bne.w	80044b4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004348:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800434a:	461c      	mov	r4, r3
 800434c:	f04f 0500 	mov.w	r5, #0
 8004350:	4622      	mov	r2, r4
 8004352:	462b      	mov	r3, r5
 8004354:	1891      	adds	r1, r2, r2
 8004356:	6439      	str	r1, [r7, #64]	; 0x40
 8004358:	415b      	adcs	r3, r3
 800435a:	647b      	str	r3, [r7, #68]	; 0x44
 800435c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004360:	1912      	adds	r2, r2, r4
 8004362:	eb45 0303 	adc.w	r3, r5, r3
 8004366:	f04f 0000 	mov.w	r0, #0
 800436a:	f04f 0100 	mov.w	r1, #0
 800436e:	00d9      	lsls	r1, r3, #3
 8004370:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004374:	00d0      	lsls	r0, r2, #3
 8004376:	4602      	mov	r2, r0
 8004378:	460b      	mov	r3, r1
 800437a:	1911      	adds	r1, r2, r4
 800437c:	6639      	str	r1, [r7, #96]	; 0x60
 800437e:	416b      	adcs	r3, r5
 8004380:	667b      	str	r3, [r7, #100]	; 0x64
 8004382:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	461a      	mov	r2, r3
 8004388:	f04f 0300 	mov.w	r3, #0
 800438c:	1891      	adds	r1, r2, r2
 800438e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004390:	415b      	adcs	r3, r3
 8004392:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004394:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004398:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800439c:	f7fb ff88 	bl	80002b0 <__aeabi_uldivmod>
 80043a0:	4602      	mov	r2, r0
 80043a2:	460b      	mov	r3, r1
 80043a4:	4ba5      	ldr	r3, [pc, #660]	; (800463c <UART_SetConfig+0x38c>)
 80043a6:	fba3 2302 	umull	r2, r3, r3, r2
 80043aa:	095b      	lsrs	r3, r3, #5
 80043ac:	011e      	lsls	r6, r3, #4
 80043ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043b0:	461c      	mov	r4, r3
 80043b2:	f04f 0500 	mov.w	r5, #0
 80043b6:	4622      	mov	r2, r4
 80043b8:	462b      	mov	r3, r5
 80043ba:	1891      	adds	r1, r2, r2
 80043bc:	6339      	str	r1, [r7, #48]	; 0x30
 80043be:	415b      	adcs	r3, r3
 80043c0:	637b      	str	r3, [r7, #52]	; 0x34
 80043c2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80043c6:	1912      	adds	r2, r2, r4
 80043c8:	eb45 0303 	adc.w	r3, r5, r3
 80043cc:	f04f 0000 	mov.w	r0, #0
 80043d0:	f04f 0100 	mov.w	r1, #0
 80043d4:	00d9      	lsls	r1, r3, #3
 80043d6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043da:	00d0      	lsls	r0, r2, #3
 80043dc:	4602      	mov	r2, r0
 80043de:	460b      	mov	r3, r1
 80043e0:	1911      	adds	r1, r2, r4
 80043e2:	65b9      	str	r1, [r7, #88]	; 0x58
 80043e4:	416b      	adcs	r3, r5
 80043e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	461a      	mov	r2, r3
 80043ee:	f04f 0300 	mov.w	r3, #0
 80043f2:	1891      	adds	r1, r2, r2
 80043f4:	62b9      	str	r1, [r7, #40]	; 0x28
 80043f6:	415b      	adcs	r3, r3
 80043f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043fe:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004402:	f7fb ff55 	bl	80002b0 <__aeabi_uldivmod>
 8004406:	4602      	mov	r2, r0
 8004408:	460b      	mov	r3, r1
 800440a:	4b8c      	ldr	r3, [pc, #560]	; (800463c <UART_SetConfig+0x38c>)
 800440c:	fba3 1302 	umull	r1, r3, r3, r2
 8004410:	095b      	lsrs	r3, r3, #5
 8004412:	2164      	movs	r1, #100	; 0x64
 8004414:	fb01 f303 	mul.w	r3, r1, r3
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	00db      	lsls	r3, r3, #3
 800441c:	3332      	adds	r3, #50	; 0x32
 800441e:	4a87      	ldr	r2, [pc, #540]	; (800463c <UART_SetConfig+0x38c>)
 8004420:	fba2 2303 	umull	r2, r3, r2, r3
 8004424:	095b      	lsrs	r3, r3, #5
 8004426:	005b      	lsls	r3, r3, #1
 8004428:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800442c:	441e      	add	r6, r3
 800442e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004430:	4618      	mov	r0, r3
 8004432:	f04f 0100 	mov.w	r1, #0
 8004436:	4602      	mov	r2, r0
 8004438:	460b      	mov	r3, r1
 800443a:	1894      	adds	r4, r2, r2
 800443c:	623c      	str	r4, [r7, #32]
 800443e:	415b      	adcs	r3, r3
 8004440:	627b      	str	r3, [r7, #36]	; 0x24
 8004442:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004446:	1812      	adds	r2, r2, r0
 8004448:	eb41 0303 	adc.w	r3, r1, r3
 800444c:	f04f 0400 	mov.w	r4, #0
 8004450:	f04f 0500 	mov.w	r5, #0
 8004454:	00dd      	lsls	r5, r3, #3
 8004456:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800445a:	00d4      	lsls	r4, r2, #3
 800445c:	4622      	mov	r2, r4
 800445e:	462b      	mov	r3, r5
 8004460:	1814      	adds	r4, r2, r0
 8004462:	653c      	str	r4, [r7, #80]	; 0x50
 8004464:	414b      	adcs	r3, r1
 8004466:	657b      	str	r3, [r7, #84]	; 0x54
 8004468:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	461a      	mov	r2, r3
 800446e:	f04f 0300 	mov.w	r3, #0
 8004472:	1891      	adds	r1, r2, r2
 8004474:	61b9      	str	r1, [r7, #24]
 8004476:	415b      	adcs	r3, r3
 8004478:	61fb      	str	r3, [r7, #28]
 800447a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800447e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004482:	f7fb ff15 	bl	80002b0 <__aeabi_uldivmod>
 8004486:	4602      	mov	r2, r0
 8004488:	460b      	mov	r3, r1
 800448a:	4b6c      	ldr	r3, [pc, #432]	; (800463c <UART_SetConfig+0x38c>)
 800448c:	fba3 1302 	umull	r1, r3, r3, r2
 8004490:	095b      	lsrs	r3, r3, #5
 8004492:	2164      	movs	r1, #100	; 0x64
 8004494:	fb01 f303 	mul.w	r3, r1, r3
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	00db      	lsls	r3, r3, #3
 800449c:	3332      	adds	r3, #50	; 0x32
 800449e:	4a67      	ldr	r2, [pc, #412]	; (800463c <UART_SetConfig+0x38c>)
 80044a0:	fba2 2303 	umull	r2, r3, r2, r3
 80044a4:	095b      	lsrs	r3, r3, #5
 80044a6:	f003 0207 	and.w	r2, r3, #7
 80044aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4432      	add	r2, r6
 80044b0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80044b2:	e0b9      	b.n	8004628 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044b6:	461c      	mov	r4, r3
 80044b8:	f04f 0500 	mov.w	r5, #0
 80044bc:	4622      	mov	r2, r4
 80044be:	462b      	mov	r3, r5
 80044c0:	1891      	adds	r1, r2, r2
 80044c2:	6139      	str	r1, [r7, #16]
 80044c4:	415b      	adcs	r3, r3
 80044c6:	617b      	str	r3, [r7, #20]
 80044c8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80044cc:	1912      	adds	r2, r2, r4
 80044ce:	eb45 0303 	adc.w	r3, r5, r3
 80044d2:	f04f 0000 	mov.w	r0, #0
 80044d6:	f04f 0100 	mov.w	r1, #0
 80044da:	00d9      	lsls	r1, r3, #3
 80044dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80044e0:	00d0      	lsls	r0, r2, #3
 80044e2:	4602      	mov	r2, r0
 80044e4:	460b      	mov	r3, r1
 80044e6:	eb12 0804 	adds.w	r8, r2, r4
 80044ea:	eb43 0905 	adc.w	r9, r3, r5
 80044ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	4618      	mov	r0, r3
 80044f4:	f04f 0100 	mov.w	r1, #0
 80044f8:	f04f 0200 	mov.w	r2, #0
 80044fc:	f04f 0300 	mov.w	r3, #0
 8004500:	008b      	lsls	r3, r1, #2
 8004502:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004506:	0082      	lsls	r2, r0, #2
 8004508:	4640      	mov	r0, r8
 800450a:	4649      	mov	r1, r9
 800450c:	f7fb fed0 	bl	80002b0 <__aeabi_uldivmod>
 8004510:	4602      	mov	r2, r0
 8004512:	460b      	mov	r3, r1
 8004514:	4b49      	ldr	r3, [pc, #292]	; (800463c <UART_SetConfig+0x38c>)
 8004516:	fba3 2302 	umull	r2, r3, r3, r2
 800451a:	095b      	lsrs	r3, r3, #5
 800451c:	011e      	lsls	r6, r3, #4
 800451e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004520:	4618      	mov	r0, r3
 8004522:	f04f 0100 	mov.w	r1, #0
 8004526:	4602      	mov	r2, r0
 8004528:	460b      	mov	r3, r1
 800452a:	1894      	adds	r4, r2, r2
 800452c:	60bc      	str	r4, [r7, #8]
 800452e:	415b      	adcs	r3, r3
 8004530:	60fb      	str	r3, [r7, #12]
 8004532:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004536:	1812      	adds	r2, r2, r0
 8004538:	eb41 0303 	adc.w	r3, r1, r3
 800453c:	f04f 0400 	mov.w	r4, #0
 8004540:	f04f 0500 	mov.w	r5, #0
 8004544:	00dd      	lsls	r5, r3, #3
 8004546:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800454a:	00d4      	lsls	r4, r2, #3
 800454c:	4622      	mov	r2, r4
 800454e:	462b      	mov	r3, r5
 8004550:	1814      	adds	r4, r2, r0
 8004552:	64bc      	str	r4, [r7, #72]	; 0x48
 8004554:	414b      	adcs	r3, r1
 8004556:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004558:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	4618      	mov	r0, r3
 800455e:	f04f 0100 	mov.w	r1, #0
 8004562:	f04f 0200 	mov.w	r2, #0
 8004566:	f04f 0300 	mov.w	r3, #0
 800456a:	008b      	lsls	r3, r1, #2
 800456c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004570:	0082      	lsls	r2, r0, #2
 8004572:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004576:	f7fb fe9b 	bl	80002b0 <__aeabi_uldivmod>
 800457a:	4602      	mov	r2, r0
 800457c:	460b      	mov	r3, r1
 800457e:	4b2f      	ldr	r3, [pc, #188]	; (800463c <UART_SetConfig+0x38c>)
 8004580:	fba3 1302 	umull	r1, r3, r3, r2
 8004584:	095b      	lsrs	r3, r3, #5
 8004586:	2164      	movs	r1, #100	; 0x64
 8004588:	fb01 f303 	mul.w	r3, r1, r3
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	011b      	lsls	r3, r3, #4
 8004590:	3332      	adds	r3, #50	; 0x32
 8004592:	4a2a      	ldr	r2, [pc, #168]	; (800463c <UART_SetConfig+0x38c>)
 8004594:	fba2 2303 	umull	r2, r3, r2, r3
 8004598:	095b      	lsrs	r3, r3, #5
 800459a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800459e:	441e      	add	r6, r3
 80045a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045a2:	4618      	mov	r0, r3
 80045a4:	f04f 0100 	mov.w	r1, #0
 80045a8:	4602      	mov	r2, r0
 80045aa:	460b      	mov	r3, r1
 80045ac:	1894      	adds	r4, r2, r2
 80045ae:	603c      	str	r4, [r7, #0]
 80045b0:	415b      	adcs	r3, r3
 80045b2:	607b      	str	r3, [r7, #4]
 80045b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045b8:	1812      	adds	r2, r2, r0
 80045ba:	eb41 0303 	adc.w	r3, r1, r3
 80045be:	f04f 0400 	mov.w	r4, #0
 80045c2:	f04f 0500 	mov.w	r5, #0
 80045c6:	00dd      	lsls	r5, r3, #3
 80045c8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80045cc:	00d4      	lsls	r4, r2, #3
 80045ce:	4622      	mov	r2, r4
 80045d0:	462b      	mov	r3, r5
 80045d2:	eb12 0a00 	adds.w	sl, r2, r0
 80045d6:	eb43 0b01 	adc.w	fp, r3, r1
 80045da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	4618      	mov	r0, r3
 80045e0:	f04f 0100 	mov.w	r1, #0
 80045e4:	f04f 0200 	mov.w	r2, #0
 80045e8:	f04f 0300 	mov.w	r3, #0
 80045ec:	008b      	lsls	r3, r1, #2
 80045ee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80045f2:	0082      	lsls	r2, r0, #2
 80045f4:	4650      	mov	r0, sl
 80045f6:	4659      	mov	r1, fp
 80045f8:	f7fb fe5a 	bl	80002b0 <__aeabi_uldivmod>
 80045fc:	4602      	mov	r2, r0
 80045fe:	460b      	mov	r3, r1
 8004600:	4b0e      	ldr	r3, [pc, #56]	; (800463c <UART_SetConfig+0x38c>)
 8004602:	fba3 1302 	umull	r1, r3, r3, r2
 8004606:	095b      	lsrs	r3, r3, #5
 8004608:	2164      	movs	r1, #100	; 0x64
 800460a:	fb01 f303 	mul.w	r3, r1, r3
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	011b      	lsls	r3, r3, #4
 8004612:	3332      	adds	r3, #50	; 0x32
 8004614:	4a09      	ldr	r2, [pc, #36]	; (800463c <UART_SetConfig+0x38c>)
 8004616:	fba2 2303 	umull	r2, r3, r2, r3
 800461a:	095b      	lsrs	r3, r3, #5
 800461c:	f003 020f 	and.w	r2, r3, #15
 8004620:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4432      	add	r2, r6
 8004626:	609a      	str	r2, [r3, #8]
}
 8004628:	bf00      	nop
 800462a:	377c      	adds	r7, #124	; 0x7c
 800462c:	46bd      	mov	sp, r7
 800462e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004632:	bf00      	nop
 8004634:	40011000 	.word	0x40011000
 8004638:	40011400 	.word	0x40011400
 800463c:	51eb851f 	.word	0x51eb851f

08004640 <__errno>:
 8004640:	4b01      	ldr	r3, [pc, #4]	; (8004648 <__errno+0x8>)
 8004642:	6818      	ldr	r0, [r3, #0]
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	2000000c 	.word	0x2000000c

0800464c <__libc_init_array>:
 800464c:	b570      	push	{r4, r5, r6, lr}
 800464e:	4d0d      	ldr	r5, [pc, #52]	; (8004684 <__libc_init_array+0x38>)
 8004650:	4c0d      	ldr	r4, [pc, #52]	; (8004688 <__libc_init_array+0x3c>)
 8004652:	1b64      	subs	r4, r4, r5
 8004654:	10a4      	asrs	r4, r4, #2
 8004656:	2600      	movs	r6, #0
 8004658:	42a6      	cmp	r6, r4
 800465a:	d109      	bne.n	8004670 <__libc_init_array+0x24>
 800465c:	4d0b      	ldr	r5, [pc, #44]	; (800468c <__libc_init_array+0x40>)
 800465e:	4c0c      	ldr	r4, [pc, #48]	; (8004690 <__libc_init_array+0x44>)
 8004660:	f000 ffec 	bl	800563c <_init>
 8004664:	1b64      	subs	r4, r4, r5
 8004666:	10a4      	asrs	r4, r4, #2
 8004668:	2600      	movs	r6, #0
 800466a:	42a6      	cmp	r6, r4
 800466c:	d105      	bne.n	800467a <__libc_init_array+0x2e>
 800466e:	bd70      	pop	{r4, r5, r6, pc}
 8004670:	f855 3b04 	ldr.w	r3, [r5], #4
 8004674:	4798      	blx	r3
 8004676:	3601      	adds	r6, #1
 8004678:	e7ee      	b.n	8004658 <__libc_init_array+0xc>
 800467a:	f855 3b04 	ldr.w	r3, [r5], #4
 800467e:	4798      	blx	r3
 8004680:	3601      	adds	r6, #1
 8004682:	e7f2      	b.n	800466a <__libc_init_array+0x1e>
 8004684:	08005734 	.word	0x08005734
 8004688:	08005734 	.word	0x08005734
 800468c:	08005734 	.word	0x08005734
 8004690:	08005738 	.word	0x08005738

08004694 <memset>:
 8004694:	4402      	add	r2, r0
 8004696:	4603      	mov	r3, r0
 8004698:	4293      	cmp	r3, r2
 800469a:	d100      	bne.n	800469e <memset+0xa>
 800469c:	4770      	bx	lr
 800469e:	f803 1b01 	strb.w	r1, [r3], #1
 80046a2:	e7f9      	b.n	8004698 <memset+0x4>

080046a4 <iprintf>:
 80046a4:	b40f      	push	{r0, r1, r2, r3}
 80046a6:	4b0a      	ldr	r3, [pc, #40]	; (80046d0 <iprintf+0x2c>)
 80046a8:	b513      	push	{r0, r1, r4, lr}
 80046aa:	681c      	ldr	r4, [r3, #0]
 80046ac:	b124      	cbz	r4, 80046b8 <iprintf+0x14>
 80046ae:	69a3      	ldr	r3, [r4, #24]
 80046b0:	b913      	cbnz	r3, 80046b8 <iprintf+0x14>
 80046b2:	4620      	mov	r0, r4
 80046b4:	f000 fa5e 	bl	8004b74 <__sinit>
 80046b8:	ab05      	add	r3, sp, #20
 80046ba:	9a04      	ldr	r2, [sp, #16]
 80046bc:	68a1      	ldr	r1, [r4, #8]
 80046be:	9301      	str	r3, [sp, #4]
 80046c0:	4620      	mov	r0, r4
 80046c2:	f000 fc2f 	bl	8004f24 <_vfiprintf_r>
 80046c6:	b002      	add	sp, #8
 80046c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046cc:	b004      	add	sp, #16
 80046ce:	4770      	bx	lr
 80046d0:	2000000c 	.word	0x2000000c

080046d4 <_puts_r>:
 80046d4:	b570      	push	{r4, r5, r6, lr}
 80046d6:	460e      	mov	r6, r1
 80046d8:	4605      	mov	r5, r0
 80046da:	b118      	cbz	r0, 80046e4 <_puts_r+0x10>
 80046dc:	6983      	ldr	r3, [r0, #24]
 80046de:	b90b      	cbnz	r3, 80046e4 <_puts_r+0x10>
 80046e0:	f000 fa48 	bl	8004b74 <__sinit>
 80046e4:	69ab      	ldr	r3, [r5, #24]
 80046e6:	68ac      	ldr	r4, [r5, #8]
 80046e8:	b913      	cbnz	r3, 80046f0 <_puts_r+0x1c>
 80046ea:	4628      	mov	r0, r5
 80046ec:	f000 fa42 	bl	8004b74 <__sinit>
 80046f0:	4b2c      	ldr	r3, [pc, #176]	; (80047a4 <_puts_r+0xd0>)
 80046f2:	429c      	cmp	r4, r3
 80046f4:	d120      	bne.n	8004738 <_puts_r+0x64>
 80046f6:	686c      	ldr	r4, [r5, #4]
 80046f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80046fa:	07db      	lsls	r3, r3, #31
 80046fc:	d405      	bmi.n	800470a <_puts_r+0x36>
 80046fe:	89a3      	ldrh	r3, [r4, #12]
 8004700:	0598      	lsls	r0, r3, #22
 8004702:	d402      	bmi.n	800470a <_puts_r+0x36>
 8004704:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004706:	f000 fad3 	bl	8004cb0 <__retarget_lock_acquire_recursive>
 800470a:	89a3      	ldrh	r3, [r4, #12]
 800470c:	0719      	lsls	r1, r3, #28
 800470e:	d51d      	bpl.n	800474c <_puts_r+0x78>
 8004710:	6923      	ldr	r3, [r4, #16]
 8004712:	b1db      	cbz	r3, 800474c <_puts_r+0x78>
 8004714:	3e01      	subs	r6, #1
 8004716:	68a3      	ldr	r3, [r4, #8]
 8004718:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800471c:	3b01      	subs	r3, #1
 800471e:	60a3      	str	r3, [r4, #8]
 8004720:	bb39      	cbnz	r1, 8004772 <_puts_r+0x9e>
 8004722:	2b00      	cmp	r3, #0
 8004724:	da38      	bge.n	8004798 <_puts_r+0xc4>
 8004726:	4622      	mov	r2, r4
 8004728:	210a      	movs	r1, #10
 800472a:	4628      	mov	r0, r5
 800472c:	f000 f848 	bl	80047c0 <__swbuf_r>
 8004730:	3001      	adds	r0, #1
 8004732:	d011      	beq.n	8004758 <_puts_r+0x84>
 8004734:	250a      	movs	r5, #10
 8004736:	e011      	b.n	800475c <_puts_r+0x88>
 8004738:	4b1b      	ldr	r3, [pc, #108]	; (80047a8 <_puts_r+0xd4>)
 800473a:	429c      	cmp	r4, r3
 800473c:	d101      	bne.n	8004742 <_puts_r+0x6e>
 800473e:	68ac      	ldr	r4, [r5, #8]
 8004740:	e7da      	b.n	80046f8 <_puts_r+0x24>
 8004742:	4b1a      	ldr	r3, [pc, #104]	; (80047ac <_puts_r+0xd8>)
 8004744:	429c      	cmp	r4, r3
 8004746:	bf08      	it	eq
 8004748:	68ec      	ldreq	r4, [r5, #12]
 800474a:	e7d5      	b.n	80046f8 <_puts_r+0x24>
 800474c:	4621      	mov	r1, r4
 800474e:	4628      	mov	r0, r5
 8004750:	f000 f888 	bl	8004864 <__swsetup_r>
 8004754:	2800      	cmp	r0, #0
 8004756:	d0dd      	beq.n	8004714 <_puts_r+0x40>
 8004758:	f04f 35ff 	mov.w	r5, #4294967295
 800475c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800475e:	07da      	lsls	r2, r3, #31
 8004760:	d405      	bmi.n	800476e <_puts_r+0x9a>
 8004762:	89a3      	ldrh	r3, [r4, #12]
 8004764:	059b      	lsls	r3, r3, #22
 8004766:	d402      	bmi.n	800476e <_puts_r+0x9a>
 8004768:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800476a:	f000 faa2 	bl	8004cb2 <__retarget_lock_release_recursive>
 800476e:	4628      	mov	r0, r5
 8004770:	bd70      	pop	{r4, r5, r6, pc}
 8004772:	2b00      	cmp	r3, #0
 8004774:	da04      	bge.n	8004780 <_puts_r+0xac>
 8004776:	69a2      	ldr	r2, [r4, #24]
 8004778:	429a      	cmp	r2, r3
 800477a:	dc06      	bgt.n	800478a <_puts_r+0xb6>
 800477c:	290a      	cmp	r1, #10
 800477e:	d004      	beq.n	800478a <_puts_r+0xb6>
 8004780:	6823      	ldr	r3, [r4, #0]
 8004782:	1c5a      	adds	r2, r3, #1
 8004784:	6022      	str	r2, [r4, #0]
 8004786:	7019      	strb	r1, [r3, #0]
 8004788:	e7c5      	b.n	8004716 <_puts_r+0x42>
 800478a:	4622      	mov	r2, r4
 800478c:	4628      	mov	r0, r5
 800478e:	f000 f817 	bl	80047c0 <__swbuf_r>
 8004792:	3001      	adds	r0, #1
 8004794:	d1bf      	bne.n	8004716 <_puts_r+0x42>
 8004796:	e7df      	b.n	8004758 <_puts_r+0x84>
 8004798:	6823      	ldr	r3, [r4, #0]
 800479a:	250a      	movs	r5, #10
 800479c:	1c5a      	adds	r2, r3, #1
 800479e:	6022      	str	r2, [r4, #0]
 80047a0:	701d      	strb	r5, [r3, #0]
 80047a2:	e7db      	b.n	800475c <_puts_r+0x88>
 80047a4:	080056b8 	.word	0x080056b8
 80047a8:	080056d8 	.word	0x080056d8
 80047ac:	08005698 	.word	0x08005698

080047b0 <puts>:
 80047b0:	4b02      	ldr	r3, [pc, #8]	; (80047bc <puts+0xc>)
 80047b2:	4601      	mov	r1, r0
 80047b4:	6818      	ldr	r0, [r3, #0]
 80047b6:	f7ff bf8d 	b.w	80046d4 <_puts_r>
 80047ba:	bf00      	nop
 80047bc:	2000000c 	.word	0x2000000c

080047c0 <__swbuf_r>:
 80047c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047c2:	460e      	mov	r6, r1
 80047c4:	4614      	mov	r4, r2
 80047c6:	4605      	mov	r5, r0
 80047c8:	b118      	cbz	r0, 80047d2 <__swbuf_r+0x12>
 80047ca:	6983      	ldr	r3, [r0, #24]
 80047cc:	b90b      	cbnz	r3, 80047d2 <__swbuf_r+0x12>
 80047ce:	f000 f9d1 	bl	8004b74 <__sinit>
 80047d2:	4b21      	ldr	r3, [pc, #132]	; (8004858 <__swbuf_r+0x98>)
 80047d4:	429c      	cmp	r4, r3
 80047d6:	d12b      	bne.n	8004830 <__swbuf_r+0x70>
 80047d8:	686c      	ldr	r4, [r5, #4]
 80047da:	69a3      	ldr	r3, [r4, #24]
 80047dc:	60a3      	str	r3, [r4, #8]
 80047de:	89a3      	ldrh	r3, [r4, #12]
 80047e0:	071a      	lsls	r2, r3, #28
 80047e2:	d52f      	bpl.n	8004844 <__swbuf_r+0x84>
 80047e4:	6923      	ldr	r3, [r4, #16]
 80047e6:	b36b      	cbz	r3, 8004844 <__swbuf_r+0x84>
 80047e8:	6923      	ldr	r3, [r4, #16]
 80047ea:	6820      	ldr	r0, [r4, #0]
 80047ec:	1ac0      	subs	r0, r0, r3
 80047ee:	6963      	ldr	r3, [r4, #20]
 80047f0:	b2f6      	uxtb	r6, r6
 80047f2:	4283      	cmp	r3, r0
 80047f4:	4637      	mov	r7, r6
 80047f6:	dc04      	bgt.n	8004802 <__swbuf_r+0x42>
 80047f8:	4621      	mov	r1, r4
 80047fa:	4628      	mov	r0, r5
 80047fc:	f000 f926 	bl	8004a4c <_fflush_r>
 8004800:	bb30      	cbnz	r0, 8004850 <__swbuf_r+0x90>
 8004802:	68a3      	ldr	r3, [r4, #8]
 8004804:	3b01      	subs	r3, #1
 8004806:	60a3      	str	r3, [r4, #8]
 8004808:	6823      	ldr	r3, [r4, #0]
 800480a:	1c5a      	adds	r2, r3, #1
 800480c:	6022      	str	r2, [r4, #0]
 800480e:	701e      	strb	r6, [r3, #0]
 8004810:	6963      	ldr	r3, [r4, #20]
 8004812:	3001      	adds	r0, #1
 8004814:	4283      	cmp	r3, r0
 8004816:	d004      	beq.n	8004822 <__swbuf_r+0x62>
 8004818:	89a3      	ldrh	r3, [r4, #12]
 800481a:	07db      	lsls	r3, r3, #31
 800481c:	d506      	bpl.n	800482c <__swbuf_r+0x6c>
 800481e:	2e0a      	cmp	r6, #10
 8004820:	d104      	bne.n	800482c <__swbuf_r+0x6c>
 8004822:	4621      	mov	r1, r4
 8004824:	4628      	mov	r0, r5
 8004826:	f000 f911 	bl	8004a4c <_fflush_r>
 800482a:	b988      	cbnz	r0, 8004850 <__swbuf_r+0x90>
 800482c:	4638      	mov	r0, r7
 800482e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004830:	4b0a      	ldr	r3, [pc, #40]	; (800485c <__swbuf_r+0x9c>)
 8004832:	429c      	cmp	r4, r3
 8004834:	d101      	bne.n	800483a <__swbuf_r+0x7a>
 8004836:	68ac      	ldr	r4, [r5, #8]
 8004838:	e7cf      	b.n	80047da <__swbuf_r+0x1a>
 800483a:	4b09      	ldr	r3, [pc, #36]	; (8004860 <__swbuf_r+0xa0>)
 800483c:	429c      	cmp	r4, r3
 800483e:	bf08      	it	eq
 8004840:	68ec      	ldreq	r4, [r5, #12]
 8004842:	e7ca      	b.n	80047da <__swbuf_r+0x1a>
 8004844:	4621      	mov	r1, r4
 8004846:	4628      	mov	r0, r5
 8004848:	f000 f80c 	bl	8004864 <__swsetup_r>
 800484c:	2800      	cmp	r0, #0
 800484e:	d0cb      	beq.n	80047e8 <__swbuf_r+0x28>
 8004850:	f04f 37ff 	mov.w	r7, #4294967295
 8004854:	e7ea      	b.n	800482c <__swbuf_r+0x6c>
 8004856:	bf00      	nop
 8004858:	080056b8 	.word	0x080056b8
 800485c:	080056d8 	.word	0x080056d8
 8004860:	08005698 	.word	0x08005698

08004864 <__swsetup_r>:
 8004864:	4b32      	ldr	r3, [pc, #200]	; (8004930 <__swsetup_r+0xcc>)
 8004866:	b570      	push	{r4, r5, r6, lr}
 8004868:	681d      	ldr	r5, [r3, #0]
 800486a:	4606      	mov	r6, r0
 800486c:	460c      	mov	r4, r1
 800486e:	b125      	cbz	r5, 800487a <__swsetup_r+0x16>
 8004870:	69ab      	ldr	r3, [r5, #24]
 8004872:	b913      	cbnz	r3, 800487a <__swsetup_r+0x16>
 8004874:	4628      	mov	r0, r5
 8004876:	f000 f97d 	bl	8004b74 <__sinit>
 800487a:	4b2e      	ldr	r3, [pc, #184]	; (8004934 <__swsetup_r+0xd0>)
 800487c:	429c      	cmp	r4, r3
 800487e:	d10f      	bne.n	80048a0 <__swsetup_r+0x3c>
 8004880:	686c      	ldr	r4, [r5, #4]
 8004882:	89a3      	ldrh	r3, [r4, #12]
 8004884:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004888:	0719      	lsls	r1, r3, #28
 800488a:	d42c      	bmi.n	80048e6 <__swsetup_r+0x82>
 800488c:	06dd      	lsls	r5, r3, #27
 800488e:	d411      	bmi.n	80048b4 <__swsetup_r+0x50>
 8004890:	2309      	movs	r3, #9
 8004892:	6033      	str	r3, [r6, #0]
 8004894:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004898:	81a3      	strh	r3, [r4, #12]
 800489a:	f04f 30ff 	mov.w	r0, #4294967295
 800489e:	e03e      	b.n	800491e <__swsetup_r+0xba>
 80048a0:	4b25      	ldr	r3, [pc, #148]	; (8004938 <__swsetup_r+0xd4>)
 80048a2:	429c      	cmp	r4, r3
 80048a4:	d101      	bne.n	80048aa <__swsetup_r+0x46>
 80048a6:	68ac      	ldr	r4, [r5, #8]
 80048a8:	e7eb      	b.n	8004882 <__swsetup_r+0x1e>
 80048aa:	4b24      	ldr	r3, [pc, #144]	; (800493c <__swsetup_r+0xd8>)
 80048ac:	429c      	cmp	r4, r3
 80048ae:	bf08      	it	eq
 80048b0:	68ec      	ldreq	r4, [r5, #12]
 80048b2:	e7e6      	b.n	8004882 <__swsetup_r+0x1e>
 80048b4:	0758      	lsls	r0, r3, #29
 80048b6:	d512      	bpl.n	80048de <__swsetup_r+0x7a>
 80048b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048ba:	b141      	cbz	r1, 80048ce <__swsetup_r+0x6a>
 80048bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80048c0:	4299      	cmp	r1, r3
 80048c2:	d002      	beq.n	80048ca <__swsetup_r+0x66>
 80048c4:	4630      	mov	r0, r6
 80048c6:	f000 fa59 	bl	8004d7c <_free_r>
 80048ca:	2300      	movs	r3, #0
 80048cc:	6363      	str	r3, [r4, #52]	; 0x34
 80048ce:	89a3      	ldrh	r3, [r4, #12]
 80048d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80048d4:	81a3      	strh	r3, [r4, #12]
 80048d6:	2300      	movs	r3, #0
 80048d8:	6063      	str	r3, [r4, #4]
 80048da:	6923      	ldr	r3, [r4, #16]
 80048dc:	6023      	str	r3, [r4, #0]
 80048de:	89a3      	ldrh	r3, [r4, #12]
 80048e0:	f043 0308 	orr.w	r3, r3, #8
 80048e4:	81a3      	strh	r3, [r4, #12]
 80048e6:	6923      	ldr	r3, [r4, #16]
 80048e8:	b94b      	cbnz	r3, 80048fe <__swsetup_r+0x9a>
 80048ea:	89a3      	ldrh	r3, [r4, #12]
 80048ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80048f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048f4:	d003      	beq.n	80048fe <__swsetup_r+0x9a>
 80048f6:	4621      	mov	r1, r4
 80048f8:	4630      	mov	r0, r6
 80048fa:	f000 f9ff 	bl	8004cfc <__smakebuf_r>
 80048fe:	89a0      	ldrh	r0, [r4, #12]
 8004900:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004904:	f010 0301 	ands.w	r3, r0, #1
 8004908:	d00a      	beq.n	8004920 <__swsetup_r+0xbc>
 800490a:	2300      	movs	r3, #0
 800490c:	60a3      	str	r3, [r4, #8]
 800490e:	6963      	ldr	r3, [r4, #20]
 8004910:	425b      	negs	r3, r3
 8004912:	61a3      	str	r3, [r4, #24]
 8004914:	6923      	ldr	r3, [r4, #16]
 8004916:	b943      	cbnz	r3, 800492a <__swsetup_r+0xc6>
 8004918:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800491c:	d1ba      	bne.n	8004894 <__swsetup_r+0x30>
 800491e:	bd70      	pop	{r4, r5, r6, pc}
 8004920:	0781      	lsls	r1, r0, #30
 8004922:	bf58      	it	pl
 8004924:	6963      	ldrpl	r3, [r4, #20]
 8004926:	60a3      	str	r3, [r4, #8]
 8004928:	e7f4      	b.n	8004914 <__swsetup_r+0xb0>
 800492a:	2000      	movs	r0, #0
 800492c:	e7f7      	b.n	800491e <__swsetup_r+0xba>
 800492e:	bf00      	nop
 8004930:	2000000c 	.word	0x2000000c
 8004934:	080056b8 	.word	0x080056b8
 8004938:	080056d8 	.word	0x080056d8
 800493c:	08005698 	.word	0x08005698

08004940 <__sflush_r>:
 8004940:	898a      	ldrh	r2, [r1, #12]
 8004942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004946:	4605      	mov	r5, r0
 8004948:	0710      	lsls	r0, r2, #28
 800494a:	460c      	mov	r4, r1
 800494c:	d458      	bmi.n	8004a00 <__sflush_r+0xc0>
 800494e:	684b      	ldr	r3, [r1, #4]
 8004950:	2b00      	cmp	r3, #0
 8004952:	dc05      	bgt.n	8004960 <__sflush_r+0x20>
 8004954:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004956:	2b00      	cmp	r3, #0
 8004958:	dc02      	bgt.n	8004960 <__sflush_r+0x20>
 800495a:	2000      	movs	r0, #0
 800495c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004960:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004962:	2e00      	cmp	r6, #0
 8004964:	d0f9      	beq.n	800495a <__sflush_r+0x1a>
 8004966:	2300      	movs	r3, #0
 8004968:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800496c:	682f      	ldr	r7, [r5, #0]
 800496e:	602b      	str	r3, [r5, #0]
 8004970:	d032      	beq.n	80049d8 <__sflush_r+0x98>
 8004972:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004974:	89a3      	ldrh	r3, [r4, #12]
 8004976:	075a      	lsls	r2, r3, #29
 8004978:	d505      	bpl.n	8004986 <__sflush_r+0x46>
 800497a:	6863      	ldr	r3, [r4, #4]
 800497c:	1ac0      	subs	r0, r0, r3
 800497e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004980:	b10b      	cbz	r3, 8004986 <__sflush_r+0x46>
 8004982:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004984:	1ac0      	subs	r0, r0, r3
 8004986:	2300      	movs	r3, #0
 8004988:	4602      	mov	r2, r0
 800498a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800498c:	6a21      	ldr	r1, [r4, #32]
 800498e:	4628      	mov	r0, r5
 8004990:	47b0      	blx	r6
 8004992:	1c43      	adds	r3, r0, #1
 8004994:	89a3      	ldrh	r3, [r4, #12]
 8004996:	d106      	bne.n	80049a6 <__sflush_r+0x66>
 8004998:	6829      	ldr	r1, [r5, #0]
 800499a:	291d      	cmp	r1, #29
 800499c:	d82c      	bhi.n	80049f8 <__sflush_r+0xb8>
 800499e:	4a2a      	ldr	r2, [pc, #168]	; (8004a48 <__sflush_r+0x108>)
 80049a0:	40ca      	lsrs	r2, r1
 80049a2:	07d6      	lsls	r6, r2, #31
 80049a4:	d528      	bpl.n	80049f8 <__sflush_r+0xb8>
 80049a6:	2200      	movs	r2, #0
 80049a8:	6062      	str	r2, [r4, #4]
 80049aa:	04d9      	lsls	r1, r3, #19
 80049ac:	6922      	ldr	r2, [r4, #16]
 80049ae:	6022      	str	r2, [r4, #0]
 80049b0:	d504      	bpl.n	80049bc <__sflush_r+0x7c>
 80049b2:	1c42      	adds	r2, r0, #1
 80049b4:	d101      	bne.n	80049ba <__sflush_r+0x7a>
 80049b6:	682b      	ldr	r3, [r5, #0]
 80049b8:	b903      	cbnz	r3, 80049bc <__sflush_r+0x7c>
 80049ba:	6560      	str	r0, [r4, #84]	; 0x54
 80049bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80049be:	602f      	str	r7, [r5, #0]
 80049c0:	2900      	cmp	r1, #0
 80049c2:	d0ca      	beq.n	800495a <__sflush_r+0x1a>
 80049c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80049c8:	4299      	cmp	r1, r3
 80049ca:	d002      	beq.n	80049d2 <__sflush_r+0x92>
 80049cc:	4628      	mov	r0, r5
 80049ce:	f000 f9d5 	bl	8004d7c <_free_r>
 80049d2:	2000      	movs	r0, #0
 80049d4:	6360      	str	r0, [r4, #52]	; 0x34
 80049d6:	e7c1      	b.n	800495c <__sflush_r+0x1c>
 80049d8:	6a21      	ldr	r1, [r4, #32]
 80049da:	2301      	movs	r3, #1
 80049dc:	4628      	mov	r0, r5
 80049de:	47b0      	blx	r6
 80049e0:	1c41      	adds	r1, r0, #1
 80049e2:	d1c7      	bne.n	8004974 <__sflush_r+0x34>
 80049e4:	682b      	ldr	r3, [r5, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d0c4      	beq.n	8004974 <__sflush_r+0x34>
 80049ea:	2b1d      	cmp	r3, #29
 80049ec:	d001      	beq.n	80049f2 <__sflush_r+0xb2>
 80049ee:	2b16      	cmp	r3, #22
 80049f0:	d101      	bne.n	80049f6 <__sflush_r+0xb6>
 80049f2:	602f      	str	r7, [r5, #0]
 80049f4:	e7b1      	b.n	800495a <__sflush_r+0x1a>
 80049f6:	89a3      	ldrh	r3, [r4, #12]
 80049f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049fc:	81a3      	strh	r3, [r4, #12]
 80049fe:	e7ad      	b.n	800495c <__sflush_r+0x1c>
 8004a00:	690f      	ldr	r7, [r1, #16]
 8004a02:	2f00      	cmp	r7, #0
 8004a04:	d0a9      	beq.n	800495a <__sflush_r+0x1a>
 8004a06:	0793      	lsls	r3, r2, #30
 8004a08:	680e      	ldr	r6, [r1, #0]
 8004a0a:	bf08      	it	eq
 8004a0c:	694b      	ldreq	r3, [r1, #20]
 8004a0e:	600f      	str	r7, [r1, #0]
 8004a10:	bf18      	it	ne
 8004a12:	2300      	movne	r3, #0
 8004a14:	eba6 0807 	sub.w	r8, r6, r7
 8004a18:	608b      	str	r3, [r1, #8]
 8004a1a:	f1b8 0f00 	cmp.w	r8, #0
 8004a1e:	dd9c      	ble.n	800495a <__sflush_r+0x1a>
 8004a20:	6a21      	ldr	r1, [r4, #32]
 8004a22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004a24:	4643      	mov	r3, r8
 8004a26:	463a      	mov	r2, r7
 8004a28:	4628      	mov	r0, r5
 8004a2a:	47b0      	blx	r6
 8004a2c:	2800      	cmp	r0, #0
 8004a2e:	dc06      	bgt.n	8004a3e <__sflush_r+0xfe>
 8004a30:	89a3      	ldrh	r3, [r4, #12]
 8004a32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a36:	81a3      	strh	r3, [r4, #12]
 8004a38:	f04f 30ff 	mov.w	r0, #4294967295
 8004a3c:	e78e      	b.n	800495c <__sflush_r+0x1c>
 8004a3e:	4407      	add	r7, r0
 8004a40:	eba8 0800 	sub.w	r8, r8, r0
 8004a44:	e7e9      	b.n	8004a1a <__sflush_r+0xda>
 8004a46:	bf00      	nop
 8004a48:	20400001 	.word	0x20400001

08004a4c <_fflush_r>:
 8004a4c:	b538      	push	{r3, r4, r5, lr}
 8004a4e:	690b      	ldr	r3, [r1, #16]
 8004a50:	4605      	mov	r5, r0
 8004a52:	460c      	mov	r4, r1
 8004a54:	b913      	cbnz	r3, 8004a5c <_fflush_r+0x10>
 8004a56:	2500      	movs	r5, #0
 8004a58:	4628      	mov	r0, r5
 8004a5a:	bd38      	pop	{r3, r4, r5, pc}
 8004a5c:	b118      	cbz	r0, 8004a66 <_fflush_r+0x1a>
 8004a5e:	6983      	ldr	r3, [r0, #24]
 8004a60:	b90b      	cbnz	r3, 8004a66 <_fflush_r+0x1a>
 8004a62:	f000 f887 	bl	8004b74 <__sinit>
 8004a66:	4b14      	ldr	r3, [pc, #80]	; (8004ab8 <_fflush_r+0x6c>)
 8004a68:	429c      	cmp	r4, r3
 8004a6a:	d11b      	bne.n	8004aa4 <_fflush_r+0x58>
 8004a6c:	686c      	ldr	r4, [r5, #4]
 8004a6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d0ef      	beq.n	8004a56 <_fflush_r+0xa>
 8004a76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004a78:	07d0      	lsls	r0, r2, #31
 8004a7a:	d404      	bmi.n	8004a86 <_fflush_r+0x3a>
 8004a7c:	0599      	lsls	r1, r3, #22
 8004a7e:	d402      	bmi.n	8004a86 <_fflush_r+0x3a>
 8004a80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a82:	f000 f915 	bl	8004cb0 <__retarget_lock_acquire_recursive>
 8004a86:	4628      	mov	r0, r5
 8004a88:	4621      	mov	r1, r4
 8004a8a:	f7ff ff59 	bl	8004940 <__sflush_r>
 8004a8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a90:	07da      	lsls	r2, r3, #31
 8004a92:	4605      	mov	r5, r0
 8004a94:	d4e0      	bmi.n	8004a58 <_fflush_r+0xc>
 8004a96:	89a3      	ldrh	r3, [r4, #12]
 8004a98:	059b      	lsls	r3, r3, #22
 8004a9a:	d4dd      	bmi.n	8004a58 <_fflush_r+0xc>
 8004a9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a9e:	f000 f908 	bl	8004cb2 <__retarget_lock_release_recursive>
 8004aa2:	e7d9      	b.n	8004a58 <_fflush_r+0xc>
 8004aa4:	4b05      	ldr	r3, [pc, #20]	; (8004abc <_fflush_r+0x70>)
 8004aa6:	429c      	cmp	r4, r3
 8004aa8:	d101      	bne.n	8004aae <_fflush_r+0x62>
 8004aaa:	68ac      	ldr	r4, [r5, #8]
 8004aac:	e7df      	b.n	8004a6e <_fflush_r+0x22>
 8004aae:	4b04      	ldr	r3, [pc, #16]	; (8004ac0 <_fflush_r+0x74>)
 8004ab0:	429c      	cmp	r4, r3
 8004ab2:	bf08      	it	eq
 8004ab4:	68ec      	ldreq	r4, [r5, #12]
 8004ab6:	e7da      	b.n	8004a6e <_fflush_r+0x22>
 8004ab8:	080056b8 	.word	0x080056b8
 8004abc:	080056d8 	.word	0x080056d8
 8004ac0:	08005698 	.word	0x08005698

08004ac4 <std>:
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	b510      	push	{r4, lr}
 8004ac8:	4604      	mov	r4, r0
 8004aca:	e9c0 3300 	strd	r3, r3, [r0]
 8004ace:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004ad2:	6083      	str	r3, [r0, #8]
 8004ad4:	8181      	strh	r1, [r0, #12]
 8004ad6:	6643      	str	r3, [r0, #100]	; 0x64
 8004ad8:	81c2      	strh	r2, [r0, #14]
 8004ada:	6183      	str	r3, [r0, #24]
 8004adc:	4619      	mov	r1, r3
 8004ade:	2208      	movs	r2, #8
 8004ae0:	305c      	adds	r0, #92	; 0x5c
 8004ae2:	f7ff fdd7 	bl	8004694 <memset>
 8004ae6:	4b05      	ldr	r3, [pc, #20]	; (8004afc <std+0x38>)
 8004ae8:	6263      	str	r3, [r4, #36]	; 0x24
 8004aea:	4b05      	ldr	r3, [pc, #20]	; (8004b00 <std+0x3c>)
 8004aec:	62a3      	str	r3, [r4, #40]	; 0x28
 8004aee:	4b05      	ldr	r3, [pc, #20]	; (8004b04 <std+0x40>)
 8004af0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004af2:	4b05      	ldr	r3, [pc, #20]	; (8004b08 <std+0x44>)
 8004af4:	6224      	str	r4, [r4, #32]
 8004af6:	6323      	str	r3, [r4, #48]	; 0x30
 8004af8:	bd10      	pop	{r4, pc}
 8004afa:	bf00      	nop
 8004afc:	080054cd 	.word	0x080054cd
 8004b00:	080054ef 	.word	0x080054ef
 8004b04:	08005527 	.word	0x08005527
 8004b08:	0800554b 	.word	0x0800554b

08004b0c <_cleanup_r>:
 8004b0c:	4901      	ldr	r1, [pc, #4]	; (8004b14 <_cleanup_r+0x8>)
 8004b0e:	f000 b8af 	b.w	8004c70 <_fwalk_reent>
 8004b12:	bf00      	nop
 8004b14:	08004a4d 	.word	0x08004a4d

08004b18 <__sfmoreglue>:
 8004b18:	b570      	push	{r4, r5, r6, lr}
 8004b1a:	1e4a      	subs	r2, r1, #1
 8004b1c:	2568      	movs	r5, #104	; 0x68
 8004b1e:	4355      	muls	r5, r2
 8004b20:	460e      	mov	r6, r1
 8004b22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004b26:	f000 f979 	bl	8004e1c <_malloc_r>
 8004b2a:	4604      	mov	r4, r0
 8004b2c:	b140      	cbz	r0, 8004b40 <__sfmoreglue+0x28>
 8004b2e:	2100      	movs	r1, #0
 8004b30:	e9c0 1600 	strd	r1, r6, [r0]
 8004b34:	300c      	adds	r0, #12
 8004b36:	60a0      	str	r0, [r4, #8]
 8004b38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004b3c:	f7ff fdaa 	bl	8004694 <memset>
 8004b40:	4620      	mov	r0, r4
 8004b42:	bd70      	pop	{r4, r5, r6, pc}

08004b44 <__sfp_lock_acquire>:
 8004b44:	4801      	ldr	r0, [pc, #4]	; (8004b4c <__sfp_lock_acquire+0x8>)
 8004b46:	f000 b8b3 	b.w	8004cb0 <__retarget_lock_acquire_recursive>
 8004b4a:	bf00      	nop
 8004b4c:	200001c8 	.word	0x200001c8

08004b50 <__sfp_lock_release>:
 8004b50:	4801      	ldr	r0, [pc, #4]	; (8004b58 <__sfp_lock_release+0x8>)
 8004b52:	f000 b8ae 	b.w	8004cb2 <__retarget_lock_release_recursive>
 8004b56:	bf00      	nop
 8004b58:	200001c8 	.word	0x200001c8

08004b5c <__sinit_lock_acquire>:
 8004b5c:	4801      	ldr	r0, [pc, #4]	; (8004b64 <__sinit_lock_acquire+0x8>)
 8004b5e:	f000 b8a7 	b.w	8004cb0 <__retarget_lock_acquire_recursive>
 8004b62:	bf00      	nop
 8004b64:	200001c3 	.word	0x200001c3

08004b68 <__sinit_lock_release>:
 8004b68:	4801      	ldr	r0, [pc, #4]	; (8004b70 <__sinit_lock_release+0x8>)
 8004b6a:	f000 b8a2 	b.w	8004cb2 <__retarget_lock_release_recursive>
 8004b6e:	bf00      	nop
 8004b70:	200001c3 	.word	0x200001c3

08004b74 <__sinit>:
 8004b74:	b510      	push	{r4, lr}
 8004b76:	4604      	mov	r4, r0
 8004b78:	f7ff fff0 	bl	8004b5c <__sinit_lock_acquire>
 8004b7c:	69a3      	ldr	r3, [r4, #24]
 8004b7e:	b11b      	cbz	r3, 8004b88 <__sinit+0x14>
 8004b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b84:	f7ff bff0 	b.w	8004b68 <__sinit_lock_release>
 8004b88:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004b8c:	6523      	str	r3, [r4, #80]	; 0x50
 8004b8e:	4b13      	ldr	r3, [pc, #76]	; (8004bdc <__sinit+0x68>)
 8004b90:	4a13      	ldr	r2, [pc, #76]	; (8004be0 <__sinit+0x6c>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	62a2      	str	r2, [r4, #40]	; 0x28
 8004b96:	42a3      	cmp	r3, r4
 8004b98:	bf04      	itt	eq
 8004b9a:	2301      	moveq	r3, #1
 8004b9c:	61a3      	streq	r3, [r4, #24]
 8004b9e:	4620      	mov	r0, r4
 8004ba0:	f000 f820 	bl	8004be4 <__sfp>
 8004ba4:	6060      	str	r0, [r4, #4]
 8004ba6:	4620      	mov	r0, r4
 8004ba8:	f000 f81c 	bl	8004be4 <__sfp>
 8004bac:	60a0      	str	r0, [r4, #8]
 8004bae:	4620      	mov	r0, r4
 8004bb0:	f000 f818 	bl	8004be4 <__sfp>
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	60e0      	str	r0, [r4, #12]
 8004bb8:	2104      	movs	r1, #4
 8004bba:	6860      	ldr	r0, [r4, #4]
 8004bbc:	f7ff ff82 	bl	8004ac4 <std>
 8004bc0:	68a0      	ldr	r0, [r4, #8]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	2109      	movs	r1, #9
 8004bc6:	f7ff ff7d 	bl	8004ac4 <std>
 8004bca:	68e0      	ldr	r0, [r4, #12]
 8004bcc:	2202      	movs	r2, #2
 8004bce:	2112      	movs	r1, #18
 8004bd0:	f7ff ff78 	bl	8004ac4 <std>
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	61a3      	str	r3, [r4, #24]
 8004bd8:	e7d2      	b.n	8004b80 <__sinit+0xc>
 8004bda:	bf00      	nop
 8004bdc:	08005694 	.word	0x08005694
 8004be0:	08004b0d 	.word	0x08004b0d

08004be4 <__sfp>:
 8004be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004be6:	4607      	mov	r7, r0
 8004be8:	f7ff ffac 	bl	8004b44 <__sfp_lock_acquire>
 8004bec:	4b1e      	ldr	r3, [pc, #120]	; (8004c68 <__sfp+0x84>)
 8004bee:	681e      	ldr	r6, [r3, #0]
 8004bf0:	69b3      	ldr	r3, [r6, #24]
 8004bf2:	b913      	cbnz	r3, 8004bfa <__sfp+0x16>
 8004bf4:	4630      	mov	r0, r6
 8004bf6:	f7ff ffbd 	bl	8004b74 <__sinit>
 8004bfa:	3648      	adds	r6, #72	; 0x48
 8004bfc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004c00:	3b01      	subs	r3, #1
 8004c02:	d503      	bpl.n	8004c0c <__sfp+0x28>
 8004c04:	6833      	ldr	r3, [r6, #0]
 8004c06:	b30b      	cbz	r3, 8004c4c <__sfp+0x68>
 8004c08:	6836      	ldr	r6, [r6, #0]
 8004c0a:	e7f7      	b.n	8004bfc <__sfp+0x18>
 8004c0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004c10:	b9d5      	cbnz	r5, 8004c48 <__sfp+0x64>
 8004c12:	4b16      	ldr	r3, [pc, #88]	; (8004c6c <__sfp+0x88>)
 8004c14:	60e3      	str	r3, [r4, #12]
 8004c16:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004c1a:	6665      	str	r5, [r4, #100]	; 0x64
 8004c1c:	f000 f847 	bl	8004cae <__retarget_lock_init_recursive>
 8004c20:	f7ff ff96 	bl	8004b50 <__sfp_lock_release>
 8004c24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004c28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004c2c:	6025      	str	r5, [r4, #0]
 8004c2e:	61a5      	str	r5, [r4, #24]
 8004c30:	2208      	movs	r2, #8
 8004c32:	4629      	mov	r1, r5
 8004c34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004c38:	f7ff fd2c 	bl	8004694 <memset>
 8004c3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004c40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004c44:	4620      	mov	r0, r4
 8004c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c48:	3468      	adds	r4, #104	; 0x68
 8004c4a:	e7d9      	b.n	8004c00 <__sfp+0x1c>
 8004c4c:	2104      	movs	r1, #4
 8004c4e:	4638      	mov	r0, r7
 8004c50:	f7ff ff62 	bl	8004b18 <__sfmoreglue>
 8004c54:	4604      	mov	r4, r0
 8004c56:	6030      	str	r0, [r6, #0]
 8004c58:	2800      	cmp	r0, #0
 8004c5a:	d1d5      	bne.n	8004c08 <__sfp+0x24>
 8004c5c:	f7ff ff78 	bl	8004b50 <__sfp_lock_release>
 8004c60:	230c      	movs	r3, #12
 8004c62:	603b      	str	r3, [r7, #0]
 8004c64:	e7ee      	b.n	8004c44 <__sfp+0x60>
 8004c66:	bf00      	nop
 8004c68:	08005694 	.word	0x08005694
 8004c6c:	ffff0001 	.word	0xffff0001

08004c70 <_fwalk_reent>:
 8004c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c74:	4606      	mov	r6, r0
 8004c76:	4688      	mov	r8, r1
 8004c78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004c7c:	2700      	movs	r7, #0
 8004c7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c82:	f1b9 0901 	subs.w	r9, r9, #1
 8004c86:	d505      	bpl.n	8004c94 <_fwalk_reent+0x24>
 8004c88:	6824      	ldr	r4, [r4, #0]
 8004c8a:	2c00      	cmp	r4, #0
 8004c8c:	d1f7      	bne.n	8004c7e <_fwalk_reent+0xe>
 8004c8e:	4638      	mov	r0, r7
 8004c90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c94:	89ab      	ldrh	r3, [r5, #12]
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d907      	bls.n	8004caa <_fwalk_reent+0x3a>
 8004c9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	d003      	beq.n	8004caa <_fwalk_reent+0x3a>
 8004ca2:	4629      	mov	r1, r5
 8004ca4:	4630      	mov	r0, r6
 8004ca6:	47c0      	blx	r8
 8004ca8:	4307      	orrs	r7, r0
 8004caa:	3568      	adds	r5, #104	; 0x68
 8004cac:	e7e9      	b.n	8004c82 <_fwalk_reent+0x12>

08004cae <__retarget_lock_init_recursive>:
 8004cae:	4770      	bx	lr

08004cb0 <__retarget_lock_acquire_recursive>:
 8004cb0:	4770      	bx	lr

08004cb2 <__retarget_lock_release_recursive>:
 8004cb2:	4770      	bx	lr

08004cb4 <__swhatbuf_r>:
 8004cb4:	b570      	push	{r4, r5, r6, lr}
 8004cb6:	460e      	mov	r6, r1
 8004cb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cbc:	2900      	cmp	r1, #0
 8004cbe:	b096      	sub	sp, #88	; 0x58
 8004cc0:	4614      	mov	r4, r2
 8004cc2:	461d      	mov	r5, r3
 8004cc4:	da07      	bge.n	8004cd6 <__swhatbuf_r+0x22>
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	602b      	str	r3, [r5, #0]
 8004cca:	89b3      	ldrh	r3, [r6, #12]
 8004ccc:	061a      	lsls	r2, r3, #24
 8004cce:	d410      	bmi.n	8004cf2 <__swhatbuf_r+0x3e>
 8004cd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cd4:	e00e      	b.n	8004cf4 <__swhatbuf_r+0x40>
 8004cd6:	466a      	mov	r2, sp
 8004cd8:	f000 fc5e 	bl	8005598 <_fstat_r>
 8004cdc:	2800      	cmp	r0, #0
 8004cde:	dbf2      	blt.n	8004cc6 <__swhatbuf_r+0x12>
 8004ce0:	9a01      	ldr	r2, [sp, #4]
 8004ce2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004ce6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004cea:	425a      	negs	r2, r3
 8004cec:	415a      	adcs	r2, r3
 8004cee:	602a      	str	r2, [r5, #0]
 8004cf0:	e7ee      	b.n	8004cd0 <__swhatbuf_r+0x1c>
 8004cf2:	2340      	movs	r3, #64	; 0x40
 8004cf4:	2000      	movs	r0, #0
 8004cf6:	6023      	str	r3, [r4, #0]
 8004cf8:	b016      	add	sp, #88	; 0x58
 8004cfa:	bd70      	pop	{r4, r5, r6, pc}

08004cfc <__smakebuf_r>:
 8004cfc:	898b      	ldrh	r3, [r1, #12]
 8004cfe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004d00:	079d      	lsls	r5, r3, #30
 8004d02:	4606      	mov	r6, r0
 8004d04:	460c      	mov	r4, r1
 8004d06:	d507      	bpl.n	8004d18 <__smakebuf_r+0x1c>
 8004d08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004d0c:	6023      	str	r3, [r4, #0]
 8004d0e:	6123      	str	r3, [r4, #16]
 8004d10:	2301      	movs	r3, #1
 8004d12:	6163      	str	r3, [r4, #20]
 8004d14:	b002      	add	sp, #8
 8004d16:	bd70      	pop	{r4, r5, r6, pc}
 8004d18:	ab01      	add	r3, sp, #4
 8004d1a:	466a      	mov	r2, sp
 8004d1c:	f7ff ffca 	bl	8004cb4 <__swhatbuf_r>
 8004d20:	9900      	ldr	r1, [sp, #0]
 8004d22:	4605      	mov	r5, r0
 8004d24:	4630      	mov	r0, r6
 8004d26:	f000 f879 	bl	8004e1c <_malloc_r>
 8004d2a:	b948      	cbnz	r0, 8004d40 <__smakebuf_r+0x44>
 8004d2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d30:	059a      	lsls	r2, r3, #22
 8004d32:	d4ef      	bmi.n	8004d14 <__smakebuf_r+0x18>
 8004d34:	f023 0303 	bic.w	r3, r3, #3
 8004d38:	f043 0302 	orr.w	r3, r3, #2
 8004d3c:	81a3      	strh	r3, [r4, #12]
 8004d3e:	e7e3      	b.n	8004d08 <__smakebuf_r+0xc>
 8004d40:	4b0d      	ldr	r3, [pc, #52]	; (8004d78 <__smakebuf_r+0x7c>)
 8004d42:	62b3      	str	r3, [r6, #40]	; 0x28
 8004d44:	89a3      	ldrh	r3, [r4, #12]
 8004d46:	6020      	str	r0, [r4, #0]
 8004d48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d4c:	81a3      	strh	r3, [r4, #12]
 8004d4e:	9b00      	ldr	r3, [sp, #0]
 8004d50:	6163      	str	r3, [r4, #20]
 8004d52:	9b01      	ldr	r3, [sp, #4]
 8004d54:	6120      	str	r0, [r4, #16]
 8004d56:	b15b      	cbz	r3, 8004d70 <__smakebuf_r+0x74>
 8004d58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d5c:	4630      	mov	r0, r6
 8004d5e:	f000 fc2d 	bl	80055bc <_isatty_r>
 8004d62:	b128      	cbz	r0, 8004d70 <__smakebuf_r+0x74>
 8004d64:	89a3      	ldrh	r3, [r4, #12]
 8004d66:	f023 0303 	bic.w	r3, r3, #3
 8004d6a:	f043 0301 	orr.w	r3, r3, #1
 8004d6e:	81a3      	strh	r3, [r4, #12]
 8004d70:	89a0      	ldrh	r0, [r4, #12]
 8004d72:	4305      	orrs	r5, r0
 8004d74:	81a5      	strh	r5, [r4, #12]
 8004d76:	e7cd      	b.n	8004d14 <__smakebuf_r+0x18>
 8004d78:	08004b0d 	.word	0x08004b0d

08004d7c <_free_r>:
 8004d7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d7e:	2900      	cmp	r1, #0
 8004d80:	d048      	beq.n	8004e14 <_free_r+0x98>
 8004d82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d86:	9001      	str	r0, [sp, #4]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	f1a1 0404 	sub.w	r4, r1, #4
 8004d8e:	bfb8      	it	lt
 8004d90:	18e4      	addlt	r4, r4, r3
 8004d92:	f000 fc35 	bl	8005600 <__malloc_lock>
 8004d96:	4a20      	ldr	r2, [pc, #128]	; (8004e18 <_free_r+0x9c>)
 8004d98:	9801      	ldr	r0, [sp, #4]
 8004d9a:	6813      	ldr	r3, [r2, #0]
 8004d9c:	4615      	mov	r5, r2
 8004d9e:	b933      	cbnz	r3, 8004dae <_free_r+0x32>
 8004da0:	6063      	str	r3, [r4, #4]
 8004da2:	6014      	str	r4, [r2, #0]
 8004da4:	b003      	add	sp, #12
 8004da6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004daa:	f000 bc2f 	b.w	800560c <__malloc_unlock>
 8004dae:	42a3      	cmp	r3, r4
 8004db0:	d90b      	bls.n	8004dca <_free_r+0x4e>
 8004db2:	6821      	ldr	r1, [r4, #0]
 8004db4:	1862      	adds	r2, r4, r1
 8004db6:	4293      	cmp	r3, r2
 8004db8:	bf04      	itt	eq
 8004dba:	681a      	ldreq	r2, [r3, #0]
 8004dbc:	685b      	ldreq	r3, [r3, #4]
 8004dbe:	6063      	str	r3, [r4, #4]
 8004dc0:	bf04      	itt	eq
 8004dc2:	1852      	addeq	r2, r2, r1
 8004dc4:	6022      	streq	r2, [r4, #0]
 8004dc6:	602c      	str	r4, [r5, #0]
 8004dc8:	e7ec      	b.n	8004da4 <_free_r+0x28>
 8004dca:	461a      	mov	r2, r3
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	b10b      	cbz	r3, 8004dd4 <_free_r+0x58>
 8004dd0:	42a3      	cmp	r3, r4
 8004dd2:	d9fa      	bls.n	8004dca <_free_r+0x4e>
 8004dd4:	6811      	ldr	r1, [r2, #0]
 8004dd6:	1855      	adds	r5, r2, r1
 8004dd8:	42a5      	cmp	r5, r4
 8004dda:	d10b      	bne.n	8004df4 <_free_r+0x78>
 8004ddc:	6824      	ldr	r4, [r4, #0]
 8004dde:	4421      	add	r1, r4
 8004de0:	1854      	adds	r4, r2, r1
 8004de2:	42a3      	cmp	r3, r4
 8004de4:	6011      	str	r1, [r2, #0]
 8004de6:	d1dd      	bne.n	8004da4 <_free_r+0x28>
 8004de8:	681c      	ldr	r4, [r3, #0]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	6053      	str	r3, [r2, #4]
 8004dee:	4421      	add	r1, r4
 8004df0:	6011      	str	r1, [r2, #0]
 8004df2:	e7d7      	b.n	8004da4 <_free_r+0x28>
 8004df4:	d902      	bls.n	8004dfc <_free_r+0x80>
 8004df6:	230c      	movs	r3, #12
 8004df8:	6003      	str	r3, [r0, #0]
 8004dfa:	e7d3      	b.n	8004da4 <_free_r+0x28>
 8004dfc:	6825      	ldr	r5, [r4, #0]
 8004dfe:	1961      	adds	r1, r4, r5
 8004e00:	428b      	cmp	r3, r1
 8004e02:	bf04      	itt	eq
 8004e04:	6819      	ldreq	r1, [r3, #0]
 8004e06:	685b      	ldreq	r3, [r3, #4]
 8004e08:	6063      	str	r3, [r4, #4]
 8004e0a:	bf04      	itt	eq
 8004e0c:	1949      	addeq	r1, r1, r5
 8004e0e:	6021      	streq	r1, [r4, #0]
 8004e10:	6054      	str	r4, [r2, #4]
 8004e12:	e7c7      	b.n	8004da4 <_free_r+0x28>
 8004e14:	b003      	add	sp, #12
 8004e16:	bd30      	pop	{r4, r5, pc}
 8004e18:	20000090 	.word	0x20000090

08004e1c <_malloc_r>:
 8004e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e1e:	1ccd      	adds	r5, r1, #3
 8004e20:	f025 0503 	bic.w	r5, r5, #3
 8004e24:	3508      	adds	r5, #8
 8004e26:	2d0c      	cmp	r5, #12
 8004e28:	bf38      	it	cc
 8004e2a:	250c      	movcc	r5, #12
 8004e2c:	2d00      	cmp	r5, #0
 8004e2e:	4606      	mov	r6, r0
 8004e30:	db01      	blt.n	8004e36 <_malloc_r+0x1a>
 8004e32:	42a9      	cmp	r1, r5
 8004e34:	d903      	bls.n	8004e3e <_malloc_r+0x22>
 8004e36:	230c      	movs	r3, #12
 8004e38:	6033      	str	r3, [r6, #0]
 8004e3a:	2000      	movs	r0, #0
 8004e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e3e:	f000 fbdf 	bl	8005600 <__malloc_lock>
 8004e42:	4921      	ldr	r1, [pc, #132]	; (8004ec8 <_malloc_r+0xac>)
 8004e44:	680a      	ldr	r2, [r1, #0]
 8004e46:	4614      	mov	r4, r2
 8004e48:	b99c      	cbnz	r4, 8004e72 <_malloc_r+0x56>
 8004e4a:	4f20      	ldr	r7, [pc, #128]	; (8004ecc <_malloc_r+0xb0>)
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	b923      	cbnz	r3, 8004e5a <_malloc_r+0x3e>
 8004e50:	4621      	mov	r1, r4
 8004e52:	4630      	mov	r0, r6
 8004e54:	f000 fb2a 	bl	80054ac <_sbrk_r>
 8004e58:	6038      	str	r0, [r7, #0]
 8004e5a:	4629      	mov	r1, r5
 8004e5c:	4630      	mov	r0, r6
 8004e5e:	f000 fb25 	bl	80054ac <_sbrk_r>
 8004e62:	1c43      	adds	r3, r0, #1
 8004e64:	d123      	bne.n	8004eae <_malloc_r+0x92>
 8004e66:	230c      	movs	r3, #12
 8004e68:	6033      	str	r3, [r6, #0]
 8004e6a:	4630      	mov	r0, r6
 8004e6c:	f000 fbce 	bl	800560c <__malloc_unlock>
 8004e70:	e7e3      	b.n	8004e3a <_malloc_r+0x1e>
 8004e72:	6823      	ldr	r3, [r4, #0]
 8004e74:	1b5b      	subs	r3, r3, r5
 8004e76:	d417      	bmi.n	8004ea8 <_malloc_r+0x8c>
 8004e78:	2b0b      	cmp	r3, #11
 8004e7a:	d903      	bls.n	8004e84 <_malloc_r+0x68>
 8004e7c:	6023      	str	r3, [r4, #0]
 8004e7e:	441c      	add	r4, r3
 8004e80:	6025      	str	r5, [r4, #0]
 8004e82:	e004      	b.n	8004e8e <_malloc_r+0x72>
 8004e84:	6863      	ldr	r3, [r4, #4]
 8004e86:	42a2      	cmp	r2, r4
 8004e88:	bf0c      	ite	eq
 8004e8a:	600b      	streq	r3, [r1, #0]
 8004e8c:	6053      	strne	r3, [r2, #4]
 8004e8e:	4630      	mov	r0, r6
 8004e90:	f000 fbbc 	bl	800560c <__malloc_unlock>
 8004e94:	f104 000b 	add.w	r0, r4, #11
 8004e98:	1d23      	adds	r3, r4, #4
 8004e9a:	f020 0007 	bic.w	r0, r0, #7
 8004e9e:	1ac2      	subs	r2, r0, r3
 8004ea0:	d0cc      	beq.n	8004e3c <_malloc_r+0x20>
 8004ea2:	1a1b      	subs	r3, r3, r0
 8004ea4:	50a3      	str	r3, [r4, r2]
 8004ea6:	e7c9      	b.n	8004e3c <_malloc_r+0x20>
 8004ea8:	4622      	mov	r2, r4
 8004eaa:	6864      	ldr	r4, [r4, #4]
 8004eac:	e7cc      	b.n	8004e48 <_malloc_r+0x2c>
 8004eae:	1cc4      	adds	r4, r0, #3
 8004eb0:	f024 0403 	bic.w	r4, r4, #3
 8004eb4:	42a0      	cmp	r0, r4
 8004eb6:	d0e3      	beq.n	8004e80 <_malloc_r+0x64>
 8004eb8:	1a21      	subs	r1, r4, r0
 8004eba:	4630      	mov	r0, r6
 8004ebc:	f000 faf6 	bl	80054ac <_sbrk_r>
 8004ec0:	3001      	adds	r0, #1
 8004ec2:	d1dd      	bne.n	8004e80 <_malloc_r+0x64>
 8004ec4:	e7cf      	b.n	8004e66 <_malloc_r+0x4a>
 8004ec6:	bf00      	nop
 8004ec8:	20000090 	.word	0x20000090
 8004ecc:	20000094 	.word	0x20000094

08004ed0 <__sfputc_r>:
 8004ed0:	6893      	ldr	r3, [r2, #8]
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	b410      	push	{r4}
 8004ed8:	6093      	str	r3, [r2, #8]
 8004eda:	da08      	bge.n	8004eee <__sfputc_r+0x1e>
 8004edc:	6994      	ldr	r4, [r2, #24]
 8004ede:	42a3      	cmp	r3, r4
 8004ee0:	db01      	blt.n	8004ee6 <__sfputc_r+0x16>
 8004ee2:	290a      	cmp	r1, #10
 8004ee4:	d103      	bne.n	8004eee <__sfputc_r+0x1e>
 8004ee6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004eea:	f7ff bc69 	b.w	80047c0 <__swbuf_r>
 8004eee:	6813      	ldr	r3, [r2, #0]
 8004ef0:	1c58      	adds	r0, r3, #1
 8004ef2:	6010      	str	r0, [r2, #0]
 8004ef4:	7019      	strb	r1, [r3, #0]
 8004ef6:	4608      	mov	r0, r1
 8004ef8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004efc:	4770      	bx	lr

08004efe <__sfputs_r>:
 8004efe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f00:	4606      	mov	r6, r0
 8004f02:	460f      	mov	r7, r1
 8004f04:	4614      	mov	r4, r2
 8004f06:	18d5      	adds	r5, r2, r3
 8004f08:	42ac      	cmp	r4, r5
 8004f0a:	d101      	bne.n	8004f10 <__sfputs_r+0x12>
 8004f0c:	2000      	movs	r0, #0
 8004f0e:	e007      	b.n	8004f20 <__sfputs_r+0x22>
 8004f10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f14:	463a      	mov	r2, r7
 8004f16:	4630      	mov	r0, r6
 8004f18:	f7ff ffda 	bl	8004ed0 <__sfputc_r>
 8004f1c:	1c43      	adds	r3, r0, #1
 8004f1e:	d1f3      	bne.n	8004f08 <__sfputs_r+0xa>
 8004f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004f24 <_vfiprintf_r>:
 8004f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f28:	460d      	mov	r5, r1
 8004f2a:	b09d      	sub	sp, #116	; 0x74
 8004f2c:	4614      	mov	r4, r2
 8004f2e:	4698      	mov	r8, r3
 8004f30:	4606      	mov	r6, r0
 8004f32:	b118      	cbz	r0, 8004f3c <_vfiprintf_r+0x18>
 8004f34:	6983      	ldr	r3, [r0, #24]
 8004f36:	b90b      	cbnz	r3, 8004f3c <_vfiprintf_r+0x18>
 8004f38:	f7ff fe1c 	bl	8004b74 <__sinit>
 8004f3c:	4b89      	ldr	r3, [pc, #548]	; (8005164 <_vfiprintf_r+0x240>)
 8004f3e:	429d      	cmp	r5, r3
 8004f40:	d11b      	bne.n	8004f7a <_vfiprintf_r+0x56>
 8004f42:	6875      	ldr	r5, [r6, #4]
 8004f44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f46:	07d9      	lsls	r1, r3, #31
 8004f48:	d405      	bmi.n	8004f56 <_vfiprintf_r+0x32>
 8004f4a:	89ab      	ldrh	r3, [r5, #12]
 8004f4c:	059a      	lsls	r2, r3, #22
 8004f4e:	d402      	bmi.n	8004f56 <_vfiprintf_r+0x32>
 8004f50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f52:	f7ff fead 	bl	8004cb0 <__retarget_lock_acquire_recursive>
 8004f56:	89ab      	ldrh	r3, [r5, #12]
 8004f58:	071b      	lsls	r3, r3, #28
 8004f5a:	d501      	bpl.n	8004f60 <_vfiprintf_r+0x3c>
 8004f5c:	692b      	ldr	r3, [r5, #16]
 8004f5e:	b9eb      	cbnz	r3, 8004f9c <_vfiprintf_r+0x78>
 8004f60:	4629      	mov	r1, r5
 8004f62:	4630      	mov	r0, r6
 8004f64:	f7ff fc7e 	bl	8004864 <__swsetup_r>
 8004f68:	b1c0      	cbz	r0, 8004f9c <_vfiprintf_r+0x78>
 8004f6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f6c:	07dc      	lsls	r4, r3, #31
 8004f6e:	d50e      	bpl.n	8004f8e <_vfiprintf_r+0x6a>
 8004f70:	f04f 30ff 	mov.w	r0, #4294967295
 8004f74:	b01d      	add	sp, #116	; 0x74
 8004f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f7a:	4b7b      	ldr	r3, [pc, #492]	; (8005168 <_vfiprintf_r+0x244>)
 8004f7c:	429d      	cmp	r5, r3
 8004f7e:	d101      	bne.n	8004f84 <_vfiprintf_r+0x60>
 8004f80:	68b5      	ldr	r5, [r6, #8]
 8004f82:	e7df      	b.n	8004f44 <_vfiprintf_r+0x20>
 8004f84:	4b79      	ldr	r3, [pc, #484]	; (800516c <_vfiprintf_r+0x248>)
 8004f86:	429d      	cmp	r5, r3
 8004f88:	bf08      	it	eq
 8004f8a:	68f5      	ldreq	r5, [r6, #12]
 8004f8c:	e7da      	b.n	8004f44 <_vfiprintf_r+0x20>
 8004f8e:	89ab      	ldrh	r3, [r5, #12]
 8004f90:	0598      	lsls	r0, r3, #22
 8004f92:	d4ed      	bmi.n	8004f70 <_vfiprintf_r+0x4c>
 8004f94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f96:	f7ff fe8c 	bl	8004cb2 <__retarget_lock_release_recursive>
 8004f9a:	e7e9      	b.n	8004f70 <_vfiprintf_r+0x4c>
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	9309      	str	r3, [sp, #36]	; 0x24
 8004fa0:	2320      	movs	r3, #32
 8004fa2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004fa6:	f8cd 800c 	str.w	r8, [sp, #12]
 8004faa:	2330      	movs	r3, #48	; 0x30
 8004fac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005170 <_vfiprintf_r+0x24c>
 8004fb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004fb4:	f04f 0901 	mov.w	r9, #1
 8004fb8:	4623      	mov	r3, r4
 8004fba:	469a      	mov	sl, r3
 8004fbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004fc0:	b10a      	cbz	r2, 8004fc6 <_vfiprintf_r+0xa2>
 8004fc2:	2a25      	cmp	r2, #37	; 0x25
 8004fc4:	d1f9      	bne.n	8004fba <_vfiprintf_r+0x96>
 8004fc6:	ebba 0b04 	subs.w	fp, sl, r4
 8004fca:	d00b      	beq.n	8004fe4 <_vfiprintf_r+0xc0>
 8004fcc:	465b      	mov	r3, fp
 8004fce:	4622      	mov	r2, r4
 8004fd0:	4629      	mov	r1, r5
 8004fd2:	4630      	mov	r0, r6
 8004fd4:	f7ff ff93 	bl	8004efe <__sfputs_r>
 8004fd8:	3001      	adds	r0, #1
 8004fda:	f000 80aa 	beq.w	8005132 <_vfiprintf_r+0x20e>
 8004fde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004fe0:	445a      	add	r2, fp
 8004fe2:	9209      	str	r2, [sp, #36]	; 0x24
 8004fe4:	f89a 3000 	ldrb.w	r3, [sl]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	f000 80a2 	beq.w	8005132 <_vfiprintf_r+0x20e>
 8004fee:	2300      	movs	r3, #0
 8004ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ff4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ff8:	f10a 0a01 	add.w	sl, sl, #1
 8004ffc:	9304      	str	r3, [sp, #16]
 8004ffe:	9307      	str	r3, [sp, #28]
 8005000:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005004:	931a      	str	r3, [sp, #104]	; 0x68
 8005006:	4654      	mov	r4, sl
 8005008:	2205      	movs	r2, #5
 800500a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800500e:	4858      	ldr	r0, [pc, #352]	; (8005170 <_vfiprintf_r+0x24c>)
 8005010:	f7fb f8fe 	bl	8000210 <memchr>
 8005014:	9a04      	ldr	r2, [sp, #16]
 8005016:	b9d8      	cbnz	r0, 8005050 <_vfiprintf_r+0x12c>
 8005018:	06d1      	lsls	r1, r2, #27
 800501a:	bf44      	itt	mi
 800501c:	2320      	movmi	r3, #32
 800501e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005022:	0713      	lsls	r3, r2, #28
 8005024:	bf44      	itt	mi
 8005026:	232b      	movmi	r3, #43	; 0x2b
 8005028:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800502c:	f89a 3000 	ldrb.w	r3, [sl]
 8005030:	2b2a      	cmp	r3, #42	; 0x2a
 8005032:	d015      	beq.n	8005060 <_vfiprintf_r+0x13c>
 8005034:	9a07      	ldr	r2, [sp, #28]
 8005036:	4654      	mov	r4, sl
 8005038:	2000      	movs	r0, #0
 800503a:	f04f 0c0a 	mov.w	ip, #10
 800503e:	4621      	mov	r1, r4
 8005040:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005044:	3b30      	subs	r3, #48	; 0x30
 8005046:	2b09      	cmp	r3, #9
 8005048:	d94e      	bls.n	80050e8 <_vfiprintf_r+0x1c4>
 800504a:	b1b0      	cbz	r0, 800507a <_vfiprintf_r+0x156>
 800504c:	9207      	str	r2, [sp, #28]
 800504e:	e014      	b.n	800507a <_vfiprintf_r+0x156>
 8005050:	eba0 0308 	sub.w	r3, r0, r8
 8005054:	fa09 f303 	lsl.w	r3, r9, r3
 8005058:	4313      	orrs	r3, r2
 800505a:	9304      	str	r3, [sp, #16]
 800505c:	46a2      	mov	sl, r4
 800505e:	e7d2      	b.n	8005006 <_vfiprintf_r+0xe2>
 8005060:	9b03      	ldr	r3, [sp, #12]
 8005062:	1d19      	adds	r1, r3, #4
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	9103      	str	r1, [sp, #12]
 8005068:	2b00      	cmp	r3, #0
 800506a:	bfbb      	ittet	lt
 800506c:	425b      	neglt	r3, r3
 800506e:	f042 0202 	orrlt.w	r2, r2, #2
 8005072:	9307      	strge	r3, [sp, #28]
 8005074:	9307      	strlt	r3, [sp, #28]
 8005076:	bfb8      	it	lt
 8005078:	9204      	strlt	r2, [sp, #16]
 800507a:	7823      	ldrb	r3, [r4, #0]
 800507c:	2b2e      	cmp	r3, #46	; 0x2e
 800507e:	d10c      	bne.n	800509a <_vfiprintf_r+0x176>
 8005080:	7863      	ldrb	r3, [r4, #1]
 8005082:	2b2a      	cmp	r3, #42	; 0x2a
 8005084:	d135      	bne.n	80050f2 <_vfiprintf_r+0x1ce>
 8005086:	9b03      	ldr	r3, [sp, #12]
 8005088:	1d1a      	adds	r2, r3, #4
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	9203      	str	r2, [sp, #12]
 800508e:	2b00      	cmp	r3, #0
 8005090:	bfb8      	it	lt
 8005092:	f04f 33ff 	movlt.w	r3, #4294967295
 8005096:	3402      	adds	r4, #2
 8005098:	9305      	str	r3, [sp, #20]
 800509a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005180 <_vfiprintf_r+0x25c>
 800509e:	7821      	ldrb	r1, [r4, #0]
 80050a0:	2203      	movs	r2, #3
 80050a2:	4650      	mov	r0, sl
 80050a4:	f7fb f8b4 	bl	8000210 <memchr>
 80050a8:	b140      	cbz	r0, 80050bc <_vfiprintf_r+0x198>
 80050aa:	2340      	movs	r3, #64	; 0x40
 80050ac:	eba0 000a 	sub.w	r0, r0, sl
 80050b0:	fa03 f000 	lsl.w	r0, r3, r0
 80050b4:	9b04      	ldr	r3, [sp, #16]
 80050b6:	4303      	orrs	r3, r0
 80050b8:	3401      	adds	r4, #1
 80050ba:	9304      	str	r3, [sp, #16]
 80050bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050c0:	482c      	ldr	r0, [pc, #176]	; (8005174 <_vfiprintf_r+0x250>)
 80050c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80050c6:	2206      	movs	r2, #6
 80050c8:	f7fb f8a2 	bl	8000210 <memchr>
 80050cc:	2800      	cmp	r0, #0
 80050ce:	d03f      	beq.n	8005150 <_vfiprintf_r+0x22c>
 80050d0:	4b29      	ldr	r3, [pc, #164]	; (8005178 <_vfiprintf_r+0x254>)
 80050d2:	bb1b      	cbnz	r3, 800511c <_vfiprintf_r+0x1f8>
 80050d4:	9b03      	ldr	r3, [sp, #12]
 80050d6:	3307      	adds	r3, #7
 80050d8:	f023 0307 	bic.w	r3, r3, #7
 80050dc:	3308      	adds	r3, #8
 80050de:	9303      	str	r3, [sp, #12]
 80050e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050e2:	443b      	add	r3, r7
 80050e4:	9309      	str	r3, [sp, #36]	; 0x24
 80050e6:	e767      	b.n	8004fb8 <_vfiprintf_r+0x94>
 80050e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80050ec:	460c      	mov	r4, r1
 80050ee:	2001      	movs	r0, #1
 80050f0:	e7a5      	b.n	800503e <_vfiprintf_r+0x11a>
 80050f2:	2300      	movs	r3, #0
 80050f4:	3401      	adds	r4, #1
 80050f6:	9305      	str	r3, [sp, #20]
 80050f8:	4619      	mov	r1, r3
 80050fa:	f04f 0c0a 	mov.w	ip, #10
 80050fe:	4620      	mov	r0, r4
 8005100:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005104:	3a30      	subs	r2, #48	; 0x30
 8005106:	2a09      	cmp	r2, #9
 8005108:	d903      	bls.n	8005112 <_vfiprintf_r+0x1ee>
 800510a:	2b00      	cmp	r3, #0
 800510c:	d0c5      	beq.n	800509a <_vfiprintf_r+0x176>
 800510e:	9105      	str	r1, [sp, #20]
 8005110:	e7c3      	b.n	800509a <_vfiprintf_r+0x176>
 8005112:	fb0c 2101 	mla	r1, ip, r1, r2
 8005116:	4604      	mov	r4, r0
 8005118:	2301      	movs	r3, #1
 800511a:	e7f0      	b.n	80050fe <_vfiprintf_r+0x1da>
 800511c:	ab03      	add	r3, sp, #12
 800511e:	9300      	str	r3, [sp, #0]
 8005120:	462a      	mov	r2, r5
 8005122:	4b16      	ldr	r3, [pc, #88]	; (800517c <_vfiprintf_r+0x258>)
 8005124:	a904      	add	r1, sp, #16
 8005126:	4630      	mov	r0, r6
 8005128:	f3af 8000 	nop.w
 800512c:	4607      	mov	r7, r0
 800512e:	1c78      	adds	r0, r7, #1
 8005130:	d1d6      	bne.n	80050e0 <_vfiprintf_r+0x1bc>
 8005132:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005134:	07d9      	lsls	r1, r3, #31
 8005136:	d405      	bmi.n	8005144 <_vfiprintf_r+0x220>
 8005138:	89ab      	ldrh	r3, [r5, #12]
 800513a:	059a      	lsls	r2, r3, #22
 800513c:	d402      	bmi.n	8005144 <_vfiprintf_r+0x220>
 800513e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005140:	f7ff fdb7 	bl	8004cb2 <__retarget_lock_release_recursive>
 8005144:	89ab      	ldrh	r3, [r5, #12]
 8005146:	065b      	lsls	r3, r3, #25
 8005148:	f53f af12 	bmi.w	8004f70 <_vfiprintf_r+0x4c>
 800514c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800514e:	e711      	b.n	8004f74 <_vfiprintf_r+0x50>
 8005150:	ab03      	add	r3, sp, #12
 8005152:	9300      	str	r3, [sp, #0]
 8005154:	462a      	mov	r2, r5
 8005156:	4b09      	ldr	r3, [pc, #36]	; (800517c <_vfiprintf_r+0x258>)
 8005158:	a904      	add	r1, sp, #16
 800515a:	4630      	mov	r0, r6
 800515c:	f000 f880 	bl	8005260 <_printf_i>
 8005160:	e7e4      	b.n	800512c <_vfiprintf_r+0x208>
 8005162:	bf00      	nop
 8005164:	080056b8 	.word	0x080056b8
 8005168:	080056d8 	.word	0x080056d8
 800516c:	08005698 	.word	0x08005698
 8005170:	080056f8 	.word	0x080056f8
 8005174:	08005702 	.word	0x08005702
 8005178:	00000000 	.word	0x00000000
 800517c:	08004eff 	.word	0x08004eff
 8005180:	080056fe 	.word	0x080056fe

08005184 <_printf_common>:
 8005184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005188:	4616      	mov	r6, r2
 800518a:	4699      	mov	r9, r3
 800518c:	688a      	ldr	r2, [r1, #8]
 800518e:	690b      	ldr	r3, [r1, #16]
 8005190:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005194:	4293      	cmp	r3, r2
 8005196:	bfb8      	it	lt
 8005198:	4613      	movlt	r3, r2
 800519a:	6033      	str	r3, [r6, #0]
 800519c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80051a0:	4607      	mov	r7, r0
 80051a2:	460c      	mov	r4, r1
 80051a4:	b10a      	cbz	r2, 80051aa <_printf_common+0x26>
 80051a6:	3301      	adds	r3, #1
 80051a8:	6033      	str	r3, [r6, #0]
 80051aa:	6823      	ldr	r3, [r4, #0]
 80051ac:	0699      	lsls	r1, r3, #26
 80051ae:	bf42      	ittt	mi
 80051b0:	6833      	ldrmi	r3, [r6, #0]
 80051b2:	3302      	addmi	r3, #2
 80051b4:	6033      	strmi	r3, [r6, #0]
 80051b6:	6825      	ldr	r5, [r4, #0]
 80051b8:	f015 0506 	ands.w	r5, r5, #6
 80051bc:	d106      	bne.n	80051cc <_printf_common+0x48>
 80051be:	f104 0a19 	add.w	sl, r4, #25
 80051c2:	68e3      	ldr	r3, [r4, #12]
 80051c4:	6832      	ldr	r2, [r6, #0]
 80051c6:	1a9b      	subs	r3, r3, r2
 80051c8:	42ab      	cmp	r3, r5
 80051ca:	dc26      	bgt.n	800521a <_printf_common+0x96>
 80051cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80051d0:	1e13      	subs	r3, r2, #0
 80051d2:	6822      	ldr	r2, [r4, #0]
 80051d4:	bf18      	it	ne
 80051d6:	2301      	movne	r3, #1
 80051d8:	0692      	lsls	r2, r2, #26
 80051da:	d42b      	bmi.n	8005234 <_printf_common+0xb0>
 80051dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051e0:	4649      	mov	r1, r9
 80051e2:	4638      	mov	r0, r7
 80051e4:	47c0      	blx	r8
 80051e6:	3001      	adds	r0, #1
 80051e8:	d01e      	beq.n	8005228 <_printf_common+0xa4>
 80051ea:	6823      	ldr	r3, [r4, #0]
 80051ec:	68e5      	ldr	r5, [r4, #12]
 80051ee:	6832      	ldr	r2, [r6, #0]
 80051f0:	f003 0306 	and.w	r3, r3, #6
 80051f4:	2b04      	cmp	r3, #4
 80051f6:	bf08      	it	eq
 80051f8:	1aad      	subeq	r5, r5, r2
 80051fa:	68a3      	ldr	r3, [r4, #8]
 80051fc:	6922      	ldr	r2, [r4, #16]
 80051fe:	bf0c      	ite	eq
 8005200:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005204:	2500      	movne	r5, #0
 8005206:	4293      	cmp	r3, r2
 8005208:	bfc4      	itt	gt
 800520a:	1a9b      	subgt	r3, r3, r2
 800520c:	18ed      	addgt	r5, r5, r3
 800520e:	2600      	movs	r6, #0
 8005210:	341a      	adds	r4, #26
 8005212:	42b5      	cmp	r5, r6
 8005214:	d11a      	bne.n	800524c <_printf_common+0xc8>
 8005216:	2000      	movs	r0, #0
 8005218:	e008      	b.n	800522c <_printf_common+0xa8>
 800521a:	2301      	movs	r3, #1
 800521c:	4652      	mov	r2, sl
 800521e:	4649      	mov	r1, r9
 8005220:	4638      	mov	r0, r7
 8005222:	47c0      	blx	r8
 8005224:	3001      	adds	r0, #1
 8005226:	d103      	bne.n	8005230 <_printf_common+0xac>
 8005228:	f04f 30ff 	mov.w	r0, #4294967295
 800522c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005230:	3501      	adds	r5, #1
 8005232:	e7c6      	b.n	80051c2 <_printf_common+0x3e>
 8005234:	18e1      	adds	r1, r4, r3
 8005236:	1c5a      	adds	r2, r3, #1
 8005238:	2030      	movs	r0, #48	; 0x30
 800523a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800523e:	4422      	add	r2, r4
 8005240:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005244:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005248:	3302      	adds	r3, #2
 800524a:	e7c7      	b.n	80051dc <_printf_common+0x58>
 800524c:	2301      	movs	r3, #1
 800524e:	4622      	mov	r2, r4
 8005250:	4649      	mov	r1, r9
 8005252:	4638      	mov	r0, r7
 8005254:	47c0      	blx	r8
 8005256:	3001      	adds	r0, #1
 8005258:	d0e6      	beq.n	8005228 <_printf_common+0xa4>
 800525a:	3601      	adds	r6, #1
 800525c:	e7d9      	b.n	8005212 <_printf_common+0x8e>
	...

08005260 <_printf_i>:
 8005260:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005264:	460c      	mov	r4, r1
 8005266:	4691      	mov	r9, r2
 8005268:	7e27      	ldrb	r7, [r4, #24]
 800526a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800526c:	2f78      	cmp	r7, #120	; 0x78
 800526e:	4680      	mov	r8, r0
 8005270:	469a      	mov	sl, r3
 8005272:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005276:	d807      	bhi.n	8005288 <_printf_i+0x28>
 8005278:	2f62      	cmp	r7, #98	; 0x62
 800527a:	d80a      	bhi.n	8005292 <_printf_i+0x32>
 800527c:	2f00      	cmp	r7, #0
 800527e:	f000 80d8 	beq.w	8005432 <_printf_i+0x1d2>
 8005282:	2f58      	cmp	r7, #88	; 0x58
 8005284:	f000 80a3 	beq.w	80053ce <_printf_i+0x16e>
 8005288:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800528c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005290:	e03a      	b.n	8005308 <_printf_i+0xa8>
 8005292:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005296:	2b15      	cmp	r3, #21
 8005298:	d8f6      	bhi.n	8005288 <_printf_i+0x28>
 800529a:	a001      	add	r0, pc, #4	; (adr r0, 80052a0 <_printf_i+0x40>)
 800529c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80052a0:	080052f9 	.word	0x080052f9
 80052a4:	0800530d 	.word	0x0800530d
 80052a8:	08005289 	.word	0x08005289
 80052ac:	08005289 	.word	0x08005289
 80052b0:	08005289 	.word	0x08005289
 80052b4:	08005289 	.word	0x08005289
 80052b8:	0800530d 	.word	0x0800530d
 80052bc:	08005289 	.word	0x08005289
 80052c0:	08005289 	.word	0x08005289
 80052c4:	08005289 	.word	0x08005289
 80052c8:	08005289 	.word	0x08005289
 80052cc:	08005419 	.word	0x08005419
 80052d0:	0800533d 	.word	0x0800533d
 80052d4:	080053fb 	.word	0x080053fb
 80052d8:	08005289 	.word	0x08005289
 80052dc:	08005289 	.word	0x08005289
 80052e0:	0800543b 	.word	0x0800543b
 80052e4:	08005289 	.word	0x08005289
 80052e8:	0800533d 	.word	0x0800533d
 80052ec:	08005289 	.word	0x08005289
 80052f0:	08005289 	.word	0x08005289
 80052f4:	08005403 	.word	0x08005403
 80052f8:	680b      	ldr	r3, [r1, #0]
 80052fa:	1d1a      	adds	r2, r3, #4
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	600a      	str	r2, [r1, #0]
 8005300:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005304:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005308:	2301      	movs	r3, #1
 800530a:	e0a3      	b.n	8005454 <_printf_i+0x1f4>
 800530c:	6825      	ldr	r5, [r4, #0]
 800530e:	6808      	ldr	r0, [r1, #0]
 8005310:	062e      	lsls	r6, r5, #24
 8005312:	f100 0304 	add.w	r3, r0, #4
 8005316:	d50a      	bpl.n	800532e <_printf_i+0xce>
 8005318:	6805      	ldr	r5, [r0, #0]
 800531a:	600b      	str	r3, [r1, #0]
 800531c:	2d00      	cmp	r5, #0
 800531e:	da03      	bge.n	8005328 <_printf_i+0xc8>
 8005320:	232d      	movs	r3, #45	; 0x2d
 8005322:	426d      	negs	r5, r5
 8005324:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005328:	485e      	ldr	r0, [pc, #376]	; (80054a4 <_printf_i+0x244>)
 800532a:	230a      	movs	r3, #10
 800532c:	e019      	b.n	8005362 <_printf_i+0x102>
 800532e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005332:	6805      	ldr	r5, [r0, #0]
 8005334:	600b      	str	r3, [r1, #0]
 8005336:	bf18      	it	ne
 8005338:	b22d      	sxthne	r5, r5
 800533a:	e7ef      	b.n	800531c <_printf_i+0xbc>
 800533c:	680b      	ldr	r3, [r1, #0]
 800533e:	6825      	ldr	r5, [r4, #0]
 8005340:	1d18      	adds	r0, r3, #4
 8005342:	6008      	str	r0, [r1, #0]
 8005344:	0628      	lsls	r0, r5, #24
 8005346:	d501      	bpl.n	800534c <_printf_i+0xec>
 8005348:	681d      	ldr	r5, [r3, #0]
 800534a:	e002      	b.n	8005352 <_printf_i+0xf2>
 800534c:	0669      	lsls	r1, r5, #25
 800534e:	d5fb      	bpl.n	8005348 <_printf_i+0xe8>
 8005350:	881d      	ldrh	r5, [r3, #0]
 8005352:	4854      	ldr	r0, [pc, #336]	; (80054a4 <_printf_i+0x244>)
 8005354:	2f6f      	cmp	r7, #111	; 0x6f
 8005356:	bf0c      	ite	eq
 8005358:	2308      	moveq	r3, #8
 800535a:	230a      	movne	r3, #10
 800535c:	2100      	movs	r1, #0
 800535e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005362:	6866      	ldr	r6, [r4, #4]
 8005364:	60a6      	str	r6, [r4, #8]
 8005366:	2e00      	cmp	r6, #0
 8005368:	bfa2      	ittt	ge
 800536a:	6821      	ldrge	r1, [r4, #0]
 800536c:	f021 0104 	bicge.w	r1, r1, #4
 8005370:	6021      	strge	r1, [r4, #0]
 8005372:	b90d      	cbnz	r5, 8005378 <_printf_i+0x118>
 8005374:	2e00      	cmp	r6, #0
 8005376:	d04d      	beq.n	8005414 <_printf_i+0x1b4>
 8005378:	4616      	mov	r6, r2
 800537a:	fbb5 f1f3 	udiv	r1, r5, r3
 800537e:	fb03 5711 	mls	r7, r3, r1, r5
 8005382:	5dc7      	ldrb	r7, [r0, r7]
 8005384:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005388:	462f      	mov	r7, r5
 800538a:	42bb      	cmp	r3, r7
 800538c:	460d      	mov	r5, r1
 800538e:	d9f4      	bls.n	800537a <_printf_i+0x11a>
 8005390:	2b08      	cmp	r3, #8
 8005392:	d10b      	bne.n	80053ac <_printf_i+0x14c>
 8005394:	6823      	ldr	r3, [r4, #0]
 8005396:	07df      	lsls	r7, r3, #31
 8005398:	d508      	bpl.n	80053ac <_printf_i+0x14c>
 800539a:	6923      	ldr	r3, [r4, #16]
 800539c:	6861      	ldr	r1, [r4, #4]
 800539e:	4299      	cmp	r1, r3
 80053a0:	bfde      	ittt	le
 80053a2:	2330      	movle	r3, #48	; 0x30
 80053a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80053a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80053ac:	1b92      	subs	r2, r2, r6
 80053ae:	6122      	str	r2, [r4, #16]
 80053b0:	f8cd a000 	str.w	sl, [sp]
 80053b4:	464b      	mov	r3, r9
 80053b6:	aa03      	add	r2, sp, #12
 80053b8:	4621      	mov	r1, r4
 80053ba:	4640      	mov	r0, r8
 80053bc:	f7ff fee2 	bl	8005184 <_printf_common>
 80053c0:	3001      	adds	r0, #1
 80053c2:	d14c      	bne.n	800545e <_printf_i+0x1fe>
 80053c4:	f04f 30ff 	mov.w	r0, #4294967295
 80053c8:	b004      	add	sp, #16
 80053ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053ce:	4835      	ldr	r0, [pc, #212]	; (80054a4 <_printf_i+0x244>)
 80053d0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80053d4:	6823      	ldr	r3, [r4, #0]
 80053d6:	680e      	ldr	r6, [r1, #0]
 80053d8:	061f      	lsls	r7, r3, #24
 80053da:	f856 5b04 	ldr.w	r5, [r6], #4
 80053de:	600e      	str	r6, [r1, #0]
 80053e0:	d514      	bpl.n	800540c <_printf_i+0x1ac>
 80053e2:	07d9      	lsls	r1, r3, #31
 80053e4:	bf44      	itt	mi
 80053e6:	f043 0320 	orrmi.w	r3, r3, #32
 80053ea:	6023      	strmi	r3, [r4, #0]
 80053ec:	b91d      	cbnz	r5, 80053f6 <_printf_i+0x196>
 80053ee:	6823      	ldr	r3, [r4, #0]
 80053f0:	f023 0320 	bic.w	r3, r3, #32
 80053f4:	6023      	str	r3, [r4, #0]
 80053f6:	2310      	movs	r3, #16
 80053f8:	e7b0      	b.n	800535c <_printf_i+0xfc>
 80053fa:	6823      	ldr	r3, [r4, #0]
 80053fc:	f043 0320 	orr.w	r3, r3, #32
 8005400:	6023      	str	r3, [r4, #0]
 8005402:	2378      	movs	r3, #120	; 0x78
 8005404:	4828      	ldr	r0, [pc, #160]	; (80054a8 <_printf_i+0x248>)
 8005406:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800540a:	e7e3      	b.n	80053d4 <_printf_i+0x174>
 800540c:	065e      	lsls	r6, r3, #25
 800540e:	bf48      	it	mi
 8005410:	b2ad      	uxthmi	r5, r5
 8005412:	e7e6      	b.n	80053e2 <_printf_i+0x182>
 8005414:	4616      	mov	r6, r2
 8005416:	e7bb      	b.n	8005390 <_printf_i+0x130>
 8005418:	680b      	ldr	r3, [r1, #0]
 800541a:	6826      	ldr	r6, [r4, #0]
 800541c:	6960      	ldr	r0, [r4, #20]
 800541e:	1d1d      	adds	r5, r3, #4
 8005420:	600d      	str	r5, [r1, #0]
 8005422:	0635      	lsls	r5, r6, #24
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	d501      	bpl.n	800542c <_printf_i+0x1cc>
 8005428:	6018      	str	r0, [r3, #0]
 800542a:	e002      	b.n	8005432 <_printf_i+0x1d2>
 800542c:	0671      	lsls	r1, r6, #25
 800542e:	d5fb      	bpl.n	8005428 <_printf_i+0x1c8>
 8005430:	8018      	strh	r0, [r3, #0]
 8005432:	2300      	movs	r3, #0
 8005434:	6123      	str	r3, [r4, #16]
 8005436:	4616      	mov	r6, r2
 8005438:	e7ba      	b.n	80053b0 <_printf_i+0x150>
 800543a:	680b      	ldr	r3, [r1, #0]
 800543c:	1d1a      	adds	r2, r3, #4
 800543e:	600a      	str	r2, [r1, #0]
 8005440:	681e      	ldr	r6, [r3, #0]
 8005442:	6862      	ldr	r2, [r4, #4]
 8005444:	2100      	movs	r1, #0
 8005446:	4630      	mov	r0, r6
 8005448:	f7fa fee2 	bl	8000210 <memchr>
 800544c:	b108      	cbz	r0, 8005452 <_printf_i+0x1f2>
 800544e:	1b80      	subs	r0, r0, r6
 8005450:	6060      	str	r0, [r4, #4]
 8005452:	6863      	ldr	r3, [r4, #4]
 8005454:	6123      	str	r3, [r4, #16]
 8005456:	2300      	movs	r3, #0
 8005458:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800545c:	e7a8      	b.n	80053b0 <_printf_i+0x150>
 800545e:	6923      	ldr	r3, [r4, #16]
 8005460:	4632      	mov	r2, r6
 8005462:	4649      	mov	r1, r9
 8005464:	4640      	mov	r0, r8
 8005466:	47d0      	blx	sl
 8005468:	3001      	adds	r0, #1
 800546a:	d0ab      	beq.n	80053c4 <_printf_i+0x164>
 800546c:	6823      	ldr	r3, [r4, #0]
 800546e:	079b      	lsls	r3, r3, #30
 8005470:	d413      	bmi.n	800549a <_printf_i+0x23a>
 8005472:	68e0      	ldr	r0, [r4, #12]
 8005474:	9b03      	ldr	r3, [sp, #12]
 8005476:	4298      	cmp	r0, r3
 8005478:	bfb8      	it	lt
 800547a:	4618      	movlt	r0, r3
 800547c:	e7a4      	b.n	80053c8 <_printf_i+0x168>
 800547e:	2301      	movs	r3, #1
 8005480:	4632      	mov	r2, r6
 8005482:	4649      	mov	r1, r9
 8005484:	4640      	mov	r0, r8
 8005486:	47d0      	blx	sl
 8005488:	3001      	adds	r0, #1
 800548a:	d09b      	beq.n	80053c4 <_printf_i+0x164>
 800548c:	3501      	adds	r5, #1
 800548e:	68e3      	ldr	r3, [r4, #12]
 8005490:	9903      	ldr	r1, [sp, #12]
 8005492:	1a5b      	subs	r3, r3, r1
 8005494:	42ab      	cmp	r3, r5
 8005496:	dcf2      	bgt.n	800547e <_printf_i+0x21e>
 8005498:	e7eb      	b.n	8005472 <_printf_i+0x212>
 800549a:	2500      	movs	r5, #0
 800549c:	f104 0619 	add.w	r6, r4, #25
 80054a0:	e7f5      	b.n	800548e <_printf_i+0x22e>
 80054a2:	bf00      	nop
 80054a4:	08005709 	.word	0x08005709
 80054a8:	0800571a 	.word	0x0800571a

080054ac <_sbrk_r>:
 80054ac:	b538      	push	{r3, r4, r5, lr}
 80054ae:	4d06      	ldr	r5, [pc, #24]	; (80054c8 <_sbrk_r+0x1c>)
 80054b0:	2300      	movs	r3, #0
 80054b2:	4604      	mov	r4, r0
 80054b4:	4608      	mov	r0, r1
 80054b6:	602b      	str	r3, [r5, #0]
 80054b8:	f7fb fb9e 	bl	8000bf8 <_sbrk>
 80054bc:	1c43      	adds	r3, r0, #1
 80054be:	d102      	bne.n	80054c6 <_sbrk_r+0x1a>
 80054c0:	682b      	ldr	r3, [r5, #0]
 80054c2:	b103      	cbz	r3, 80054c6 <_sbrk_r+0x1a>
 80054c4:	6023      	str	r3, [r4, #0]
 80054c6:	bd38      	pop	{r3, r4, r5, pc}
 80054c8:	200001cc 	.word	0x200001cc

080054cc <__sread>:
 80054cc:	b510      	push	{r4, lr}
 80054ce:	460c      	mov	r4, r1
 80054d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054d4:	f000 f8a0 	bl	8005618 <_read_r>
 80054d8:	2800      	cmp	r0, #0
 80054da:	bfab      	itete	ge
 80054dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80054de:	89a3      	ldrhlt	r3, [r4, #12]
 80054e0:	181b      	addge	r3, r3, r0
 80054e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80054e6:	bfac      	ite	ge
 80054e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80054ea:	81a3      	strhlt	r3, [r4, #12]
 80054ec:	bd10      	pop	{r4, pc}

080054ee <__swrite>:
 80054ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054f2:	461f      	mov	r7, r3
 80054f4:	898b      	ldrh	r3, [r1, #12]
 80054f6:	05db      	lsls	r3, r3, #23
 80054f8:	4605      	mov	r5, r0
 80054fa:	460c      	mov	r4, r1
 80054fc:	4616      	mov	r6, r2
 80054fe:	d505      	bpl.n	800550c <__swrite+0x1e>
 8005500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005504:	2302      	movs	r3, #2
 8005506:	2200      	movs	r2, #0
 8005508:	f000 f868 	bl	80055dc <_lseek_r>
 800550c:	89a3      	ldrh	r3, [r4, #12]
 800550e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005512:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005516:	81a3      	strh	r3, [r4, #12]
 8005518:	4632      	mov	r2, r6
 800551a:	463b      	mov	r3, r7
 800551c:	4628      	mov	r0, r5
 800551e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005522:	f000 b817 	b.w	8005554 <_write_r>

08005526 <__sseek>:
 8005526:	b510      	push	{r4, lr}
 8005528:	460c      	mov	r4, r1
 800552a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800552e:	f000 f855 	bl	80055dc <_lseek_r>
 8005532:	1c43      	adds	r3, r0, #1
 8005534:	89a3      	ldrh	r3, [r4, #12]
 8005536:	bf15      	itete	ne
 8005538:	6560      	strne	r0, [r4, #84]	; 0x54
 800553a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800553e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005542:	81a3      	strheq	r3, [r4, #12]
 8005544:	bf18      	it	ne
 8005546:	81a3      	strhne	r3, [r4, #12]
 8005548:	bd10      	pop	{r4, pc}

0800554a <__sclose>:
 800554a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800554e:	f000 b813 	b.w	8005578 <_close_r>
	...

08005554 <_write_r>:
 8005554:	b538      	push	{r3, r4, r5, lr}
 8005556:	4d07      	ldr	r5, [pc, #28]	; (8005574 <_write_r+0x20>)
 8005558:	4604      	mov	r4, r0
 800555a:	4608      	mov	r0, r1
 800555c:	4611      	mov	r1, r2
 800555e:	2200      	movs	r2, #0
 8005560:	602a      	str	r2, [r5, #0]
 8005562:	461a      	mov	r2, r3
 8005564:	f7fb faf7 	bl	8000b56 <_write>
 8005568:	1c43      	adds	r3, r0, #1
 800556a:	d102      	bne.n	8005572 <_write_r+0x1e>
 800556c:	682b      	ldr	r3, [r5, #0]
 800556e:	b103      	cbz	r3, 8005572 <_write_r+0x1e>
 8005570:	6023      	str	r3, [r4, #0]
 8005572:	bd38      	pop	{r3, r4, r5, pc}
 8005574:	200001cc 	.word	0x200001cc

08005578 <_close_r>:
 8005578:	b538      	push	{r3, r4, r5, lr}
 800557a:	4d06      	ldr	r5, [pc, #24]	; (8005594 <_close_r+0x1c>)
 800557c:	2300      	movs	r3, #0
 800557e:	4604      	mov	r4, r0
 8005580:	4608      	mov	r0, r1
 8005582:	602b      	str	r3, [r5, #0]
 8005584:	f7fb fb03 	bl	8000b8e <_close>
 8005588:	1c43      	adds	r3, r0, #1
 800558a:	d102      	bne.n	8005592 <_close_r+0x1a>
 800558c:	682b      	ldr	r3, [r5, #0]
 800558e:	b103      	cbz	r3, 8005592 <_close_r+0x1a>
 8005590:	6023      	str	r3, [r4, #0]
 8005592:	bd38      	pop	{r3, r4, r5, pc}
 8005594:	200001cc 	.word	0x200001cc

08005598 <_fstat_r>:
 8005598:	b538      	push	{r3, r4, r5, lr}
 800559a:	4d07      	ldr	r5, [pc, #28]	; (80055b8 <_fstat_r+0x20>)
 800559c:	2300      	movs	r3, #0
 800559e:	4604      	mov	r4, r0
 80055a0:	4608      	mov	r0, r1
 80055a2:	4611      	mov	r1, r2
 80055a4:	602b      	str	r3, [r5, #0]
 80055a6:	f7fb fafe 	bl	8000ba6 <_fstat>
 80055aa:	1c43      	adds	r3, r0, #1
 80055ac:	d102      	bne.n	80055b4 <_fstat_r+0x1c>
 80055ae:	682b      	ldr	r3, [r5, #0]
 80055b0:	b103      	cbz	r3, 80055b4 <_fstat_r+0x1c>
 80055b2:	6023      	str	r3, [r4, #0]
 80055b4:	bd38      	pop	{r3, r4, r5, pc}
 80055b6:	bf00      	nop
 80055b8:	200001cc 	.word	0x200001cc

080055bc <_isatty_r>:
 80055bc:	b538      	push	{r3, r4, r5, lr}
 80055be:	4d06      	ldr	r5, [pc, #24]	; (80055d8 <_isatty_r+0x1c>)
 80055c0:	2300      	movs	r3, #0
 80055c2:	4604      	mov	r4, r0
 80055c4:	4608      	mov	r0, r1
 80055c6:	602b      	str	r3, [r5, #0]
 80055c8:	f7fb fafd 	bl	8000bc6 <_isatty>
 80055cc:	1c43      	adds	r3, r0, #1
 80055ce:	d102      	bne.n	80055d6 <_isatty_r+0x1a>
 80055d0:	682b      	ldr	r3, [r5, #0]
 80055d2:	b103      	cbz	r3, 80055d6 <_isatty_r+0x1a>
 80055d4:	6023      	str	r3, [r4, #0]
 80055d6:	bd38      	pop	{r3, r4, r5, pc}
 80055d8:	200001cc 	.word	0x200001cc

080055dc <_lseek_r>:
 80055dc:	b538      	push	{r3, r4, r5, lr}
 80055de:	4d07      	ldr	r5, [pc, #28]	; (80055fc <_lseek_r+0x20>)
 80055e0:	4604      	mov	r4, r0
 80055e2:	4608      	mov	r0, r1
 80055e4:	4611      	mov	r1, r2
 80055e6:	2200      	movs	r2, #0
 80055e8:	602a      	str	r2, [r5, #0]
 80055ea:	461a      	mov	r2, r3
 80055ec:	f7fb faf6 	bl	8000bdc <_lseek>
 80055f0:	1c43      	adds	r3, r0, #1
 80055f2:	d102      	bne.n	80055fa <_lseek_r+0x1e>
 80055f4:	682b      	ldr	r3, [r5, #0]
 80055f6:	b103      	cbz	r3, 80055fa <_lseek_r+0x1e>
 80055f8:	6023      	str	r3, [r4, #0]
 80055fa:	bd38      	pop	{r3, r4, r5, pc}
 80055fc:	200001cc 	.word	0x200001cc

08005600 <__malloc_lock>:
 8005600:	4801      	ldr	r0, [pc, #4]	; (8005608 <__malloc_lock+0x8>)
 8005602:	f7ff bb55 	b.w	8004cb0 <__retarget_lock_acquire_recursive>
 8005606:	bf00      	nop
 8005608:	200001c4 	.word	0x200001c4

0800560c <__malloc_unlock>:
 800560c:	4801      	ldr	r0, [pc, #4]	; (8005614 <__malloc_unlock+0x8>)
 800560e:	f7ff bb50 	b.w	8004cb2 <__retarget_lock_release_recursive>
 8005612:	bf00      	nop
 8005614:	200001c4 	.word	0x200001c4

08005618 <_read_r>:
 8005618:	b538      	push	{r3, r4, r5, lr}
 800561a:	4d07      	ldr	r5, [pc, #28]	; (8005638 <_read_r+0x20>)
 800561c:	4604      	mov	r4, r0
 800561e:	4608      	mov	r0, r1
 8005620:	4611      	mov	r1, r2
 8005622:	2200      	movs	r2, #0
 8005624:	602a      	str	r2, [r5, #0]
 8005626:	461a      	mov	r2, r3
 8005628:	f7fb fa78 	bl	8000b1c <_read>
 800562c:	1c43      	adds	r3, r0, #1
 800562e:	d102      	bne.n	8005636 <_read_r+0x1e>
 8005630:	682b      	ldr	r3, [r5, #0]
 8005632:	b103      	cbz	r3, 8005636 <_read_r+0x1e>
 8005634:	6023      	str	r3, [r4, #0]
 8005636:	bd38      	pop	{r3, r4, r5, pc}
 8005638:	200001cc 	.word	0x200001cc

0800563c <_init>:
 800563c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800563e:	bf00      	nop
 8005640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005642:	bc08      	pop	{r3}
 8005644:	469e      	mov	lr, r3
 8005646:	4770      	bx	lr

08005648 <_fini>:
 8005648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800564a:	bf00      	nop
 800564c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800564e:	bc08      	pop	{r3}
 8005650:	469e      	mov	lr, r3
 8005652:	4770      	bx	lr
