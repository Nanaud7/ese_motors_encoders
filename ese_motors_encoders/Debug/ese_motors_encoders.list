
ese_motors_encoders.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a104  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000059c  0800a2d8  0800a2d8  0001a2d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a874  0800a874  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a874  0800a874  0001a874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a87c  0800a87c  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a87c  0800a87c  0001a87c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a880  0800a880  0001a880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800a884  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000530  20000200  0800aa80  00020200  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000730  0800aa80  00020730  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001885e  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003525  00000000  00000000  00038a8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001098  00000000  00000000  0003bfb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f30  00000000  00000000  0003d048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025dae  00000000  00000000  0003df78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000161b7  00000000  00000000  00063d26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dffbe  00000000  00000000  00079edd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00159e9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005784  00000000  00000000  00159ef0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000200 	.word	0x20000200
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a2bc 	.word	0x0800a2bc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000204 	.word	0x20000204
 800020c:	0800a2bc 	.word	0x0800a2bc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a4 	b.w	8001028 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468c      	mov	ip, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f040 8083 	bne.w	8000e7a <__udivmoddi4+0x116>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d947      	bls.n	8000e0a <__udivmoddi4+0xa6>
 8000d7a:	fab2 f282 	clz	r2, r2
 8000d7e:	b142      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	f1c2 0020 	rsb	r0, r2, #32
 8000d84:	fa24 f000 	lsr.w	r0, r4, r0
 8000d88:	4091      	lsls	r1, r2
 8000d8a:	4097      	lsls	r7, r2
 8000d8c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d90:	4094      	lsls	r4, r2
 8000d92:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d96:	0c23      	lsrs	r3, r4, #16
 8000d98:	fbbc f6f8 	udiv	r6, ip, r8
 8000d9c:	fa1f fe87 	uxth.w	lr, r7
 8000da0:	fb08 c116 	mls	r1, r8, r6, ip
 8000da4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dac:	4299      	cmp	r1, r3
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x60>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000db6:	f080 8119 	bcs.w	8000fec <__udivmoddi4+0x288>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 8116 	bls.w	8000fec <__udivmoddi4+0x288>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dcc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d909      	bls.n	8000df0 <__udivmoddi4+0x8c>
 8000ddc:	193c      	adds	r4, r7, r4
 8000dde:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de2:	f080 8105 	bcs.w	8000ff0 <__udivmoddi4+0x28c>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f240 8102 	bls.w	8000ff0 <__udivmoddi4+0x28c>
 8000dec:	3802      	subs	r0, #2
 8000dee:	443c      	add	r4, r7
 8000df0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df4:	eba4 040e 	sub.w	r4, r4, lr
 8000df8:	2600      	movs	r6, #0
 8000dfa:	b11d      	cbz	r5, 8000e04 <__udivmoddi4+0xa0>
 8000dfc:	40d4      	lsrs	r4, r2
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e9c5 4300 	strd	r4, r3, [r5]
 8000e04:	4631      	mov	r1, r6
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	b902      	cbnz	r2, 8000e0e <__udivmoddi4+0xaa>
 8000e0c:	deff      	udf	#255	; 0xff
 8000e0e:	fab2 f282 	clz	r2, r2
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	d150      	bne.n	8000eb8 <__udivmoddi4+0x154>
 8000e16:	1bcb      	subs	r3, r1, r7
 8000e18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1c:	fa1f f887 	uxth.w	r8, r7
 8000e20:	2601      	movs	r6, #1
 8000e22:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e26:	0c21      	lsrs	r1, r4, #16
 8000e28:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb08 f30c 	mul.w	r3, r8, ip
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d907      	bls.n	8000e48 <__udivmoddi4+0xe4>
 8000e38:	1879      	adds	r1, r7, r1
 8000e3a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0xe2>
 8000e40:	428b      	cmp	r3, r1
 8000e42:	f200 80e9 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e46:	4684      	mov	ip, r0
 8000e48:	1ac9      	subs	r1, r1, r3
 8000e4a:	b2a3      	uxth	r3, r4
 8000e4c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e50:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e54:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e58:	fb08 f800 	mul.w	r8, r8, r0
 8000e5c:	45a0      	cmp	r8, r4
 8000e5e:	d907      	bls.n	8000e70 <__udivmoddi4+0x10c>
 8000e60:	193c      	adds	r4, r7, r4
 8000e62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x10a>
 8000e68:	45a0      	cmp	r8, r4
 8000e6a:	f200 80d9 	bhi.w	8001020 <__udivmoddi4+0x2bc>
 8000e6e:	4618      	mov	r0, r3
 8000e70:	eba4 0408 	sub.w	r4, r4, r8
 8000e74:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e78:	e7bf      	b.n	8000dfa <__udivmoddi4+0x96>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d909      	bls.n	8000e92 <__udivmoddi4+0x12e>
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	f000 80b1 	beq.w	8000fe6 <__udivmoddi4+0x282>
 8000e84:	2600      	movs	r6, #0
 8000e86:	e9c5 0100 	strd	r0, r1, [r5]
 8000e8a:	4630      	mov	r0, r6
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	fab3 f683 	clz	r6, r3
 8000e96:	2e00      	cmp	r6, #0
 8000e98:	d14a      	bne.n	8000f30 <__udivmoddi4+0x1cc>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d302      	bcc.n	8000ea4 <__udivmoddi4+0x140>
 8000e9e:	4282      	cmp	r2, r0
 8000ea0:	f200 80b8 	bhi.w	8001014 <__udivmoddi4+0x2b0>
 8000ea4:	1a84      	subs	r4, r0, r2
 8000ea6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eaa:	2001      	movs	r0, #1
 8000eac:	468c      	mov	ip, r1
 8000eae:	2d00      	cmp	r5, #0
 8000eb0:	d0a8      	beq.n	8000e04 <__udivmoddi4+0xa0>
 8000eb2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eb6:	e7a5      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ec0:	4097      	lsls	r7, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eca:	40d9      	lsrs	r1, r3
 8000ecc:	4330      	orrs	r0, r6
 8000ece:	0c03      	lsrs	r3, r0, #16
 8000ed0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ed4:	fa1f f887 	uxth.w	r8, r7
 8000ed8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000edc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ee0:	fb06 f108 	mul.w	r1, r6, r8
 8000ee4:	4299      	cmp	r1, r3
 8000ee6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eea:	d909      	bls.n	8000f00 <__udivmoddi4+0x19c>
 8000eec:	18fb      	adds	r3, r7, r3
 8000eee:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ef2:	f080 808d 	bcs.w	8001010 <__udivmoddi4+0x2ac>
 8000ef6:	4299      	cmp	r1, r3
 8000ef8:	f240 808a 	bls.w	8001010 <__udivmoddi4+0x2ac>
 8000efc:	3e02      	subs	r6, #2
 8000efe:	443b      	add	r3, r7
 8000f00:	1a5b      	subs	r3, r3, r1
 8000f02:	b281      	uxth	r1, r0
 8000f04:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f08:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f10:	fb00 f308 	mul.w	r3, r0, r8
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d907      	bls.n	8000f28 <__udivmoddi4+0x1c4>
 8000f18:	1879      	adds	r1, r7, r1
 8000f1a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f1e:	d273      	bcs.n	8001008 <__udivmoddi4+0x2a4>
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d971      	bls.n	8001008 <__udivmoddi4+0x2a4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4439      	add	r1, r7
 8000f28:	1acb      	subs	r3, r1, r3
 8000f2a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f2e:	e778      	b.n	8000e22 <__udivmoddi4+0xbe>
 8000f30:	f1c6 0c20 	rsb	ip, r6, #32
 8000f34:	fa03 f406 	lsl.w	r4, r3, r6
 8000f38:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f3c:	431c      	orrs	r4, r3
 8000f3e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f42:	fa01 f306 	lsl.w	r3, r1, r6
 8000f46:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f4a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f4e:	431f      	orrs	r7, r3
 8000f50:	0c3b      	lsrs	r3, r7, #16
 8000f52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f56:	fa1f f884 	uxth.w	r8, r4
 8000f5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f5e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f62:	fb09 fa08 	mul.w	sl, r9, r8
 8000f66:	458a      	cmp	sl, r1
 8000f68:	fa02 f206 	lsl.w	r2, r2, r6
 8000f6c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x220>
 8000f72:	1861      	adds	r1, r4, r1
 8000f74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f78:	d248      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000f7a:	458a      	cmp	sl, r1
 8000f7c:	d946      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000f7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f82:	4421      	add	r1, r4
 8000f84:	eba1 010a 	sub.w	r1, r1, sl
 8000f88:	b2bf      	uxth	r7, r7
 8000f8a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f8e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f92:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f96:	fb00 f808 	mul.w	r8, r0, r8
 8000f9a:	45b8      	cmp	r8, r7
 8000f9c:	d907      	bls.n	8000fae <__udivmoddi4+0x24a>
 8000f9e:	19e7      	adds	r7, r4, r7
 8000fa0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fa4:	d22e      	bcs.n	8001004 <__udivmoddi4+0x2a0>
 8000fa6:	45b8      	cmp	r8, r7
 8000fa8:	d92c      	bls.n	8001004 <__udivmoddi4+0x2a0>
 8000faa:	3802      	subs	r0, #2
 8000fac:	4427      	add	r7, r4
 8000fae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fb2:	eba7 0708 	sub.w	r7, r7, r8
 8000fb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fba:	454f      	cmp	r7, r9
 8000fbc:	46c6      	mov	lr, r8
 8000fbe:	4649      	mov	r1, r9
 8000fc0:	d31a      	bcc.n	8000ff8 <__udivmoddi4+0x294>
 8000fc2:	d017      	beq.n	8000ff4 <__udivmoddi4+0x290>
 8000fc4:	b15d      	cbz	r5, 8000fde <__udivmoddi4+0x27a>
 8000fc6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fca:	eb67 0701 	sbc.w	r7, r7, r1
 8000fce:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fd2:	40f2      	lsrs	r2, r6
 8000fd4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fd8:	40f7      	lsrs	r7, r6
 8000fda:	e9c5 2700 	strd	r2, r7, [r5]
 8000fde:	2600      	movs	r6, #0
 8000fe0:	4631      	mov	r1, r6
 8000fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e70b      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e9      	b.n	8000dc4 <__udivmoddi4+0x60>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6fd      	b.n	8000df0 <__udivmoddi4+0x8c>
 8000ff4:	4543      	cmp	r3, r8
 8000ff6:	d2e5      	bcs.n	8000fc4 <__udivmoddi4+0x260>
 8000ff8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ffc:	eb69 0104 	sbc.w	r1, r9, r4
 8001000:	3801      	subs	r0, #1
 8001002:	e7df      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001004:	4608      	mov	r0, r1
 8001006:	e7d2      	b.n	8000fae <__udivmoddi4+0x24a>
 8001008:	4660      	mov	r0, ip
 800100a:	e78d      	b.n	8000f28 <__udivmoddi4+0x1c4>
 800100c:	4681      	mov	r9, r0
 800100e:	e7b9      	b.n	8000f84 <__udivmoddi4+0x220>
 8001010:	4666      	mov	r6, ip
 8001012:	e775      	b.n	8000f00 <__udivmoddi4+0x19c>
 8001014:	4630      	mov	r0, r6
 8001016:	e74a      	b.n	8000eae <__udivmoddi4+0x14a>
 8001018:	f1ac 0c02 	sub.w	ip, ip, #2
 800101c:	4439      	add	r1, r7
 800101e:	e713      	b.n	8000e48 <__udivmoddi4+0xe4>
 8001020:	3802      	subs	r0, #2
 8001022:	443c      	add	r4, r7
 8001024:	e724      	b.n	8000e70 <__udivmoddi4+0x10c>
 8001026:	bf00      	nop

08001028 <__aeabi_idiv0>:
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <Ctrl_Init_SetTimer>:
/*	@brief	Initialization of the motor control configuration structure with timer settings
 *	@param	Motor is a Ctrl_Struct structure
 *	@param 	htim is the TIM handle
 *	@retval 0
 */
uint8_t Ctrl_Init_SetTimer(Ctrl_Struct* Control, TIM_HandleTypeDef *htim){
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
	Control->Timer = htim;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	683a      	ldr	r2, [r7, #0]
 800103a:	601a      	str	r2, [r3, #0]

	HAL_TIM_Base_Start_IT(Control->Timer);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4618      	mov	r0, r3
 8001042:	f002 ff75 	bl	8003f30 <HAL_TIM_Base_Start_IT>
	return 0;
 8001046:	2300      	movs	r3, #0
}
 8001048:	4618      	mov	r0, r3
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <Ctrl_Set_Consigne>:

uint8_t Ctrl_Set_Consigne(double new_Consigne){
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	ed87 0b00 	vstr	d0, [r7]
	consigne = new_Consigne;
 800105a:	4908      	ldr	r1, [pc, #32]	; (800107c <Ctrl_Set_Consigne+0x2c>)
 800105c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001060:	e9c1 2300 	strd	r2, r3, [r1]
	printf("New consigne = %f\r\n",consigne);
 8001064:	4b05      	ldr	r3, [pc, #20]	; (800107c <Ctrl_Set_Consigne+0x2c>)
 8001066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106a:	4805      	ldr	r0, [pc, #20]	; (8001080 <Ctrl_Set_Consigne+0x30>)
 800106c:	f005 fd3a 	bl	8006ae4 <iprintf>
	return 0;
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20000000 	.word	0x20000000
 8001080:	0800a2d8 	.word	0x0800a2d8

08001084 <Ctrl_Set_Kp>:

uint8_t Ctrl_Set_Kp(float new_Kp){
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	ed87 0a01 	vstr	s0, [r7, #4]
	Kp = new_Kp;
 800108e:	4a05      	ldr	r2, [pc, #20]	; (80010a4 <Ctrl_Set_Kp+0x20>)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6013      	str	r3, [r2, #0]
	return 0;
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	20000008 	.word	0x20000008

080010a8 <Ctrl_Set_Ki>:

uint8_t Ctrl_Set_Ki(float new_Ki){
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	ed87 0a01 	vstr	s0, [r7, #4]
	Ki = new_Ki;
 80010b2:	4a05      	ldr	r2, [pc, #20]	; (80010c8 <Ctrl_Set_Ki+0x20>)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6013      	str	r3, [r2, #0]
	return 0;
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	2000000c 	.word	0x2000000c

080010cc <Ctrl_SpeedControl>:

/*	@brief	Speed control function called with a 50Hz frequency
 *	@param	None
 *	@retval 0
 */
float Ctrl_SpeedControl(){
 80010cc:	b5b0      	push	{r4, r5, r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
	static double sommeErreur = 0;

	// Réception du nombre de ticks du codeur
	uint16_t ticks = ENC_GetCnt(&CodeurGauche);
 80010d2:	4841      	ldr	r0, [pc, #260]	; (80011d8 <Ctrl_SpeedControl+0x10c>)
 80010d4:	f000 f8b8 	bl	8001248 <ENC_GetCnt>
 80010d8:	4603      	mov	r3, r0
 80010da:	827b      	strh	r3, [r7, #18]

	// Calcul de la vitesse à part
	int freq_codeuse = SPEED_CONTROL_FREQUENCY * ticks;
 80010dc:	8a7b      	ldrh	r3, [r7, #18]
 80010de:	2232      	movs	r2, #50	; 0x32
 80010e0:	fb02 f303 	mul.w	r3, r2, r3
 80010e4:	60fb      	str	r3, [r7, #12]
	//float speed = (float)freq_codeuse/(float)ENCODER_PPR; 				// Vitesse en tour/min
	//float speed = (float)freq_codeuse * (float)DISTANCE_PER_TICK;			// Vitesse en mm/sec
	float speed = ((float)freq_codeuse * (float)ENC_DIST_PER_TICK) / 1000;	// Vitesse en m/sec
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	ee07 3a90 	vmov	s15, r3
 80010ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010f0:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80011dc <Ctrl_SpeedControl+0x110>
 80010f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80010f8:	eddf 6a39 	vldr	s13, [pc, #228]	; 80011e0 <Ctrl_SpeedControl+0x114>
 80010fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001100:	edc7 7a02 	vstr	s15, [r7, #8]

	// Erreur entre la consigne et la vitesse calculée
	//double erreur = consigne - speed;
	float erreur = consigne - speed;
 8001104:	4b37      	ldr	r3, [pc, #220]	; (80011e4 <Ctrl_SpeedControl+0x118>)
 8001106:	e9d3 4500 	ldrd	r4, r5, [r3]
 800110a:	68b8      	ldr	r0, [r7, #8]
 800110c:	f7ff fa3c 	bl	8000588 <__aeabi_f2d>
 8001110:	4602      	mov	r2, r0
 8001112:	460b      	mov	r3, r1
 8001114:	4620      	mov	r0, r4
 8001116:	4629      	mov	r1, r5
 8001118:	f7ff f8d6 	bl	80002c8 <__aeabi_dsub>
 800111c:	4602      	mov	r2, r0
 800111e:	460b      	mov	r3, r1
 8001120:	4610      	mov	r0, r2
 8001122:	4619      	mov	r1, r3
 8001124:	f7ff fd80 	bl	8000c28 <__aeabi_d2f>
 8001128:	4603      	mov	r3, r0
 800112a:	607b      	str	r3, [r7, #4]
	sommeErreur += erreur;
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f7ff fa2b 	bl	8000588 <__aeabi_f2d>
 8001132:	4b2d      	ldr	r3, [pc, #180]	; (80011e8 <Ctrl_SpeedControl+0x11c>)
 8001134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001138:	f7ff f8c8 	bl	80002cc <__adddf3>
 800113c:	4602      	mov	r2, r0
 800113e:	460b      	mov	r3, r1
 8001140:	4929      	ldr	r1, [pc, #164]	; (80011e8 <Ctrl_SpeedControl+0x11c>)
 8001142:	e9c1 2300 	strd	r2, r3, [r1]

	// Correcteur PI
	float cmd = erreur * Kp + sommeErreur * Ki;
 8001146:	4b29      	ldr	r3, [pc, #164]	; (80011ec <Ctrl_SpeedControl+0x120>)
 8001148:	ed93 7a00 	vldr	s14, [r3]
 800114c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001150:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001154:	ee17 0a90 	vmov	r0, s15
 8001158:	f7ff fa16 	bl	8000588 <__aeabi_f2d>
 800115c:	4604      	mov	r4, r0
 800115e:	460d      	mov	r5, r1
 8001160:	4b23      	ldr	r3, [pc, #140]	; (80011f0 <Ctrl_SpeedControl+0x124>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff fa0f 	bl	8000588 <__aeabi_f2d>
 800116a:	4b1f      	ldr	r3, [pc, #124]	; (80011e8 <Ctrl_SpeedControl+0x11c>)
 800116c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001170:	f7ff fa62 	bl	8000638 <__aeabi_dmul>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	4620      	mov	r0, r4
 800117a:	4629      	mov	r1, r5
 800117c:	f7ff f8a6 	bl	80002cc <__adddf3>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	4610      	mov	r0, r2
 8001186:	4619      	mov	r1, r3
 8001188:	f7ff fd4e 	bl	8000c28 <__aeabi_d2f>
 800118c:	4603      	mov	r3, r0
 800118e:	617b      	str	r3, [r7, #20]
	if(cmd >= 80) 		cmd = 80;
 8001190:	edd7 7a05 	vldr	s15, [r7, #20]
 8001194:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80011f4 <Ctrl_SpeedControl+0x128>
 8001198:	eef4 7ac7 	vcmpe.f32	s15, s14
 800119c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a0:	db02      	blt.n	80011a8 <Ctrl_SpeedControl+0xdc>
 80011a2:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <Ctrl_SpeedControl+0x12c>)
 80011a4:	617b      	str	r3, [r7, #20]
 80011a6:	e009      	b.n	80011bc <Ctrl_SpeedControl+0xf0>
	else if(cmd < 0) 	cmd = 0;
 80011a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80011ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011b4:	d502      	bpl.n	80011bc <Ctrl_SpeedControl+0xf0>
 80011b6:	f04f 0300 	mov.w	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]

	MOT_SetDutyCycle(&MoteurGauche,cmd);
 80011bc:	ed97 0a05 	vldr	s0, [r7, #20]
 80011c0:	480e      	ldr	r0, [pc, #56]	; (80011fc <Ctrl_SpeedControl+0x130>)
 80011c2:	f000 f8f3 	bl	80013ac <MOT_SetDutyCycle>

	return speed;
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	ee07 3a90 	vmov	s15, r3
}
 80011cc:	eeb0 0a67 	vmov.f32	s0, s15
 80011d0:	3718      	adds	r7, #24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bdb0      	pop	{r4, r5, r7, pc}
 80011d6:	bf00      	nop
 80011d8:	200005ac 	.word	0x200005ac
 80011dc:	3e0d2f9d 	.word	0x3e0d2f9d
 80011e0:	447a0000 	.word	0x447a0000
 80011e4:	20000000 	.word	0x20000000
 80011e8:	20000220 	.word	0x20000220
 80011ec:	20000008 	.word	0x20000008
 80011f0:	2000000c 	.word	0x2000000c
 80011f4:	42a00000 	.word	0x42a00000
 80011f8:	42a00000 	.word	0x42a00000
 80011fc:	20000568 	.word	0x20000568

08001200 <ENC_InitTimer>:
 *	@param 	htim is a TIM handle
 *  @param  Channel_A is the TIM Channels
 *  @param  Channel_B is the TIM Channels
 *	@retval HAL_Status
 */
uint8_t ENC_InitTimer(ENC_HandleTypeDef* Encoder, TIM_HandleTypeDef *htim, uint32_t Channel_A, uint32_t Channel_B){
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
 800120c:	603b      	str	r3, [r7, #0]
	Encoder->Timer = htim;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	68ba      	ldr	r2, [r7, #8]
 8001212:	601a      	str	r2, [r3, #0]
	Encoder->Timer_Channel_A = Channel_A;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	605a      	str	r2, [r3, #4]
	Encoder->Timer_Channel_B = Channel_B;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	683a      	ldr	r2, [r7, #0]
 800121e:	609a      	str	r2, [r3, #8]

	if(HAL_OK != HAL_TIM_Encoder_Start(Encoder->Timer, Encoder->Timer_Channel_A & Encoder->Timer_Channel_B))
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	6818      	ldr	r0, [r3, #0]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	685a      	ldr	r2, [r3, #4]
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	4013      	ands	r3, r2
 800122e:	4619      	mov	r1, r3
 8001230:	f003 f8b6 	bl	80043a0 <HAL_TIM_Encoder_Start>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <ENC_InitTimer+0x3e>
		return 1;
 800123a:	2301      	movs	r3, #1
 800123c:	e000      	b.n	8001240 <ENC_InitTimer+0x40>

	return 0;
 800123e:	2300      	movs	r3, #0
}
 8001240:	4618      	mov	r0, r3
 8001242:	3710      	adds	r7, #16
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <ENC_GetCnt>:

/*	@brief	Get the counter value of the timer
 *	@param	Encoder is a Enc_Struct structure
 *	@retval CNT value of the timer
 */
int16_t ENC_GetCnt(ENC_HandleTypeDef* Encoder){
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
	//uint16_t ticks = __HAL_TIM_GET_COUNTER(Encoder->Timer);
	int16_t ticks = Encoder->Timer->Instance->CNT;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001258:	81fb      	strh	r3, [r7, #14]
	ENC_ResetCnt(Encoder);
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f000 f806 	bl	800126c <ENC_ResetCnt>

	return ticks;
 8001260:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001264:	4618      	mov	r0, r3
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <ENC_ResetCnt>:

/*	@brief	Reset the counter value of the timer
 *	@param	Encoder is a Enc_Struct structure
 *	@retval 0
 */
uint8_t ENC_ResetCnt(ENC_HandleTypeDef* Encoder){
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
	Encoder->Timer->Instance->CNT = 0;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2200      	movs	r2, #0
 800127c:	625a      	str	r2, [r3, #36]	; 0x24

	return 0;
 800127e:	2300      	movs	r3, #0
}
 8001280:	4618      	mov	r0, r3
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <MOT_InitTimer>:
 *	@param	Motor is a MOT_HandleTypeDef
 *	@param 	htim is a TIM handle
 *  @param  Channel is the TIM Channel used
 *	@retval HAL status
 */
uint8_t MOT_InitTimer(MOT_HandleTypeDef* Motor, TIM_HandleTypeDef *htim, uint32_t Channel){
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
	Motor->Timer_Handle = htim;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	68ba      	ldr	r2, [r7, #8]
 800129c:	601a      	str	r2, [r3, #0]
	Motor->Timer_Channel = Channel;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	605a      	str	r2, [r3, #4]

	if(HAL_OK != HAL_TIM_PWM_Start(Motor->Timer_Handle, Motor->Timer_Channel))
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	4619      	mov	r1, r3
 80012ae:	4610      	mov	r0, r2
 80012b0:	f002 ff08 	bl	80040c4 <HAL_TIM_PWM_Start>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MOT_InitTimer+0x32>
		return 1;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e000      	b.n	80012c0 <MOT_InitTimer+0x34>

	return 0;
 80012be:	2300      	movs	r3, #0
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3710      	adds	r7, #16
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <MOT_InitGPIOs>:
 *  @param  IN1_GPIO_Pin specifies the port bit
 *	@param 	IN2_GPIOx is a GPIOx where x can be (A..K) to select the GPIO peripheral
 *  @param  IN2_GPIO_Pin specifies the port bit
 */
void MOT_InitGPIOs(MOT_HandleTypeDef* Motor, GPIO_TypeDef* IN1_GPIOx, uint16_t IN1_GPIO_Pin,
		GPIO_TypeDef* IN2_GPIOx, uint16_t IN2_GPIO_Pin){
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	603b      	str	r3, [r7, #0]
 80012d4:	4613      	mov	r3, r2
 80012d6:	80fb      	strh	r3, [r7, #6]
	Motor->IN1_GPIOx = IN1_GPIOx;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	68ba      	ldr	r2, [r7, #8]
 80012dc:	609a      	str	r2, [r3, #8]
	Motor->IN1_GPIO_Pin = IN1_GPIO_Pin;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	88fa      	ldrh	r2, [r7, #6]
 80012e2:	819a      	strh	r2, [r3, #12]
	Motor->IN2_GPIOx = IN2_GPIOx;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	683a      	ldr	r2, [r7, #0]
 80012e8:	611a      	str	r2, [r3, #16]
	Motor->IN2_GPIO_Pin = IN2_GPIO_Pin;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	8b3a      	ldrh	r2, [r7, #24]
 80012ee:	829a      	strh	r2, [r3, #20]
}
 80012f0:	bf00      	nop
 80012f2:	3714      	adds	r7, #20
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <MOT_SetDirection>:
 *		@arg	MOT_FUNCTIONS_STOP
 *		@arg 	MOT_FUNCTIONS_FORWARD
 *		@arg 	MOT_FUNCTIONS_REVERSE
 */

void MOT_SetDirection(MOT_HandleTypeDef* Motor, uint8_t direction){
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	460b      	mov	r3, r1
 8001306:	70fb      	strb	r3, [r7, #3]
	switch(direction){
 8001308:	78fb      	ldrb	r3, [r7, #3]
 800130a:	2b02      	cmp	r3, #2
 800130c:	d028      	beq.n	8001360 <MOT_SetDirection+0x64>
 800130e:	2b02      	cmp	r3, #2
 8001310:	dc37      	bgt.n	8001382 <MOT_SetDirection+0x86>
 8001312:	2b00      	cmp	r3, #0
 8001314:	d002      	beq.n	800131c <MOT_SetDirection+0x20>
 8001316:	2b01      	cmp	r3, #1
 8001318:	d011      	beq.n	800133e <MOT_SetDirection+0x42>
 800131a:	e032      	b.n	8001382 <MOT_SetDirection+0x86>

	case MOT_FUNCTIONS_STOP:
		HAL_GPIO_WritePin(Motor->IN1_GPIOx, Motor->IN1_GPIO_Pin, GPIO_PIN_RESET);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6898      	ldr	r0, [r3, #8]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	899b      	ldrh	r3, [r3, #12]
 8001324:	2200      	movs	r2, #0
 8001326:	4619      	mov	r1, r3
 8001328:	f002 f82e 	bl	8003388 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor->IN2_GPIOx, Motor->IN2_GPIO_Pin, GPIO_PIN_RESET);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6918      	ldr	r0, [r3, #16]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	8a9b      	ldrh	r3, [r3, #20]
 8001334:	2200      	movs	r2, #0
 8001336:	4619      	mov	r1, r3
 8001338:	f002 f826 	bl	8003388 <HAL_GPIO_WritePin>
		break;
 800133c:	e032      	b.n	80013a4 <MOT_SetDirection+0xa8>

	case MOT_FUNCTIONS_FORWARD:
		HAL_GPIO_WritePin(Motor->IN1_GPIOx, Motor->IN1_GPIO_Pin, GPIO_PIN_SET);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6898      	ldr	r0, [r3, #8]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	899b      	ldrh	r3, [r3, #12]
 8001346:	2201      	movs	r2, #1
 8001348:	4619      	mov	r1, r3
 800134a:	f002 f81d 	bl	8003388 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor->IN2_GPIOx, Motor->IN2_GPIO_Pin, GPIO_PIN_RESET);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6918      	ldr	r0, [r3, #16]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	8a9b      	ldrh	r3, [r3, #20]
 8001356:	2200      	movs	r2, #0
 8001358:	4619      	mov	r1, r3
 800135a:	f002 f815 	bl	8003388 <HAL_GPIO_WritePin>
		break;
 800135e:	e021      	b.n	80013a4 <MOT_SetDirection+0xa8>

	case MOT_FUNCTIONS_REVERSE:
		HAL_GPIO_WritePin(Motor->IN1_GPIOx, Motor->IN1_GPIO_Pin, GPIO_PIN_RESET);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6898      	ldr	r0, [r3, #8]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	899b      	ldrh	r3, [r3, #12]
 8001368:	2200      	movs	r2, #0
 800136a:	4619      	mov	r1, r3
 800136c:	f002 f80c 	bl	8003388 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor->IN2_GPIOx, Motor->IN2_GPIO_Pin, GPIO_PIN_SET);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6918      	ldr	r0, [r3, #16]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	8a9b      	ldrh	r3, [r3, #20]
 8001378:	2201      	movs	r2, #1
 800137a:	4619      	mov	r1, r3
 800137c:	f002 f804 	bl	8003388 <HAL_GPIO_WritePin>
		break;
 8001380:	e010      	b.n	80013a4 <MOT_SetDirection+0xa8>

	default:
		HAL_GPIO_WritePin(Motor->IN1_GPIOx, Motor->IN1_GPIO_Pin, GPIO_PIN_RESET);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6898      	ldr	r0, [r3, #8]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	899b      	ldrh	r3, [r3, #12]
 800138a:	2200      	movs	r2, #0
 800138c:	4619      	mov	r1, r3
 800138e:	f001 fffb 	bl	8003388 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor->IN2_GPIOx, Motor->IN2_GPIO_Pin, GPIO_PIN_RESET);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6918      	ldr	r0, [r3, #16]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	8a9b      	ldrh	r3, [r3, #20]
 800139a:	2200      	movs	r2, #0
 800139c:	4619      	mov	r1, r3
 800139e:	f001 fff3 	bl	8003388 <HAL_GPIO_WritePin>
	}
}
 80013a2:	bf00      	nop
 80013a4:	bf00      	nop
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <MOT_SetDutyCycle>:

/*	@brief	Set the duty cycle of the PWM signal
 *	@param	Motor is a MOT_HandleTypeDef
 *	@param	duty_cycle is value between 0 and 100
 */
void MOT_SetDutyCycle(MOT_HandleTypeDef* Motor, float duty_cycle){
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	ed87 0a00 	vstr	s0, [r7]
	if(duty_cycle > 80) duty_cycle = 80;
 80013b8:	edd7 7a00 	vldr	s15, [r7]
 80013bc:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001478 <MOT_SetDutyCycle+0xcc>
 80013c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c8:	dd02      	ble.n	80013d0 <MOT_SetDutyCycle+0x24>
 80013ca:	4b2c      	ldr	r3, [pc, #176]	; (800147c <MOT_SetDutyCycle+0xd0>)
 80013cc:	603b      	str	r3, [r7, #0]
 80013ce:	e009      	b.n	80013e4 <MOT_SetDutyCycle+0x38>
	else if(duty_cycle < 0) duty_cycle = 0;
 80013d0:	edd7 7a00 	vldr	s15, [r7]
 80013d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013dc:	d502      	bpl.n	80013e4 <MOT_SetDutyCycle+0x38>
 80013de:	f04f 0300 	mov.w	r3, #0
 80013e2:	603b      	str	r3, [r7, #0]

	float pulse = (duty_cycle / 100) * (float)MOT_TIM_PERIOD;
 80013e4:	ed97 7a00 	vldr	s14, [r7]
 80013e8:	eddf 6a25 	vldr	s13, [pc, #148]	; 8001480 <MOT_SetDutyCycle+0xd4>
 80013ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013f0:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001484 <MOT_SetDutyCycle+0xd8>
 80013f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013f8:	edc7 7a03 	vstr	s15, [r7, #12]

	__HAL_TIM_SET_COMPARE(Motor->Timer_Handle, Motor->Timer_Channel, (uint32_t)pulse);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d10a      	bne.n	800141a <MOT_SetDutyCycle+0x6e>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	edd7 7a03 	vldr	s15, [r7, #12]
 800140e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001412:	ee17 2a90 	vmov	r2, s15
 8001416:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001418:	e027      	b.n	800146a <MOT_SetDutyCycle+0xbe>
	__HAL_TIM_SET_COMPARE(Motor->Timer_Handle, Motor->Timer_Channel, (uint32_t)pulse);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	2b04      	cmp	r3, #4
 8001420:	d10a      	bne.n	8001438 <MOT_SetDutyCycle+0x8c>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	edd7 7a03 	vldr	s15, [r7, #12]
 800142c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001430:	ee17 3a90 	vmov	r3, s15
 8001434:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001436:	e018      	b.n	800146a <MOT_SetDutyCycle+0xbe>
	__HAL_TIM_SET_COMPARE(Motor->Timer_Handle, Motor->Timer_Channel, (uint32_t)pulse);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	2b08      	cmp	r3, #8
 800143e:	d10a      	bne.n	8001456 <MOT_SetDutyCycle+0xaa>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	edd7 7a03 	vldr	s15, [r7, #12]
 800144a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800144e:	ee17 3a90 	vmov	r3, s15
 8001452:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001454:	e009      	b.n	800146a <MOT_SetDutyCycle+0xbe>
	__HAL_TIM_SET_COMPARE(Motor->Timer_Handle, Motor->Timer_Channel, (uint32_t)pulse);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001460:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001464:	ee17 3a90 	vmov	r3, s15
 8001468:	6413      	str	r3, [r2, #64]	; 0x40
}
 800146a:	bf00      	nop
 800146c:	3714      	adds	r7, #20
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	42a00000 	.word	0x42a00000
 800147c:	42a00000 	.word	0x42a00000
 8001480:	42c80000 	.word	0x42c80000
 8001484:	45520000 	.word	0x45520000

08001488 <__io_putchar>:
static int shell_func_list_size = 0;
static shell_func_t shell_func_list[_SHELL_FUNC_LIST_MAX_SIZE];

static int dataReady = 0;

int __io_putchar(int ch) {
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&UART_DEVICE, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001490:	1d39      	adds	r1, r7, #4
 8001492:	f04f 33ff 	mov.w	r3, #4294967295
 8001496:	2201      	movs	r2, #1
 8001498:	4803      	ldr	r0, [pc, #12]	; (80014a8 <__io_putchar+0x20>)
 800149a:	f003 ff08 	bl	80052ae <HAL_UART_Transmit>
	return ch;
 800149e:	687b      	ldr	r3, [r7, #4]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	200006d8 	.word	0x200006d8

080014ac <uart_write>:
	HAL_UART_Receive(&UART_DEVICE, (uint8_t*)(&c), 1, 0xFFFFFFFF);

	return c;
}

int uart_write(char * s, uint16_t size) {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	460b      	mov	r3, r1
 80014b6:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&UART_DEVICE, (uint8_t*)s, size, 0xFFFF);
 80014b8:	887a      	ldrh	r2, [r7, #2]
 80014ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014be:	6879      	ldr	r1, [r7, #4]
 80014c0:	4803      	ldr	r0, [pc, #12]	; (80014d0 <uart_write+0x24>)
 80014c2:	f003 fef4 	bl	80052ae <HAL_UART_Transmit>
	return size;
 80014c6:	887b      	ldrh	r3, [r7, #2]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	200006d8 	.word	0x200006d8

080014d4 <sh_help>:

void uart_data_ready() {
	dataReady = 1;
}

int sh_help(int argc, char ** argv) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
	int i;
	for(i = 0 ; i < shell_func_list_size ; i++) {
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	e019      	b.n	8001518 <sh_help+0x44>
		printf("%c %s\r\n", shell_func_list[i].c, shell_func_list[i].description);
 80014e4:	4911      	ldr	r1, [pc, #68]	; (800152c <sh_help+0x58>)
 80014e6:	68fa      	ldr	r2, [r7, #12]
 80014e8:	4613      	mov	r3, r2
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	4413      	add	r3, r2
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	440b      	add	r3, r1
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	4618      	mov	r0, r3
 80014f6:	490d      	ldr	r1, [pc, #52]	; (800152c <sh_help+0x58>)
 80014f8:	68fa      	ldr	r2, [r7, #12]
 80014fa:	4613      	mov	r3, r2
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	4413      	add	r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	440b      	add	r3, r1
 8001504:	3308      	adds	r3, #8
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	461a      	mov	r2, r3
 800150a:	4601      	mov	r1, r0
 800150c:	4808      	ldr	r0, [pc, #32]	; (8001530 <sh_help+0x5c>)
 800150e:	f005 fae9 	bl	8006ae4 <iprintf>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	3301      	adds	r3, #1
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	4b06      	ldr	r3, [pc, #24]	; (8001534 <sh_help+0x60>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	68fa      	ldr	r2, [r7, #12]
 800151e:	429a      	cmp	r2, r3
 8001520:	dbe0      	blt.n	80014e4 <sh_help+0x10>
	}

	return 0;
 8001522:	2300      	movs	r3, #0
}
 8001524:	4618      	mov	r0, r3
 8001526:	3710      	adds	r7, #16
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20000258 	.word	0x20000258
 8001530:	0800a2ec 	.word	0x0800a2ec
 8001534:	20000254 	.word	0x20000254

08001538 <shell_init>:

void shell_init() {
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
	printf("\r\n\r\n===== Shell =====\r\n");
 800153e:	480f      	ldr	r0, [pc, #60]	; (800157c <shell_init+0x44>)
 8001540:	f005 fb56 	bl	8006bf0 <puts>
	HAL_UART_Receive_IT(&UART_DEVICE, (uint8_t*)&c, 1);
 8001544:	2201      	movs	r2, #1
 8001546:	490e      	ldr	r1, [pc, #56]	; (8001580 <shell_init+0x48>)
 8001548:	480e      	ldr	r0, [pc, #56]	; (8001584 <shell_init+0x4c>)
 800154a:	f003 ff42 	bl	80053d2 <HAL_UART_Receive_IT>
	//uart_write(prompt,sizeof(prompt));

	shell_add('h', sh_help, help);
 800154e:	4a0e      	ldr	r2, [pc, #56]	; (8001588 <shell_init+0x50>)
 8001550:	490e      	ldr	r1, [pc, #56]	; (800158c <shell_init+0x54>)
 8001552:	2068      	movs	r0, #104	; 0x68
 8001554:	f000 f81c 	bl	8001590 <shell_add>

	for (int i = 0 ; i < 3 ; i++) {
 8001558:	2300      	movs	r3, #0
 800155a:	607b      	str	r3, [r7, #4]
 800155c:	e005      	b.n	800156a <shell_init+0x32>

		HAL_Delay(200);
 800155e:	20c8      	movs	r0, #200	; 0xc8
 8001560:	f000 ffe6 	bl	8002530 <HAL_Delay>
	for (int i = 0 ; i < 3 ; i++) {
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	3301      	adds	r3, #1
 8001568:	607b      	str	r3, [r7, #4]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2b02      	cmp	r3, #2
 800156e:	ddf6      	ble.n	800155e <shell_init+0x26>
	}
}
 8001570:	bf00      	nop
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	0800a2f4 	.word	0x0800a2f4
 8001580:	20000228 	.word	0x20000228
 8001584:	200006d8 	.word	0x200006d8
 8001588:	20000010 	.word	0x20000010
 800158c:	080014d5 	.word	0x080014d5

08001590 <shell_add>:

int shell_add(char c, int (* pfunc)(int argc, char ** argv), char * description) {
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
 800159c:	73fb      	strb	r3, [r7, #15]
	if (shell_func_list_size < _SHELL_FUNC_LIST_MAX_SIZE) {
 800159e:	4b19      	ldr	r3, [pc, #100]	; (8001604 <shell_add+0x74>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2b3f      	cmp	r3, #63	; 0x3f
 80015a4:	dc26      	bgt.n	80015f4 <shell_add+0x64>
		shell_func_list[shell_func_list_size].c = c;
 80015a6:	4b17      	ldr	r3, [pc, #92]	; (8001604 <shell_add+0x74>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	4917      	ldr	r1, [pc, #92]	; (8001608 <shell_add+0x78>)
 80015ac:	4613      	mov	r3, r2
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	4413      	add	r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	440b      	add	r3, r1
 80015b6:	7bfa      	ldrb	r2, [r7, #15]
 80015b8:	701a      	strb	r2, [r3, #0]
		shell_func_list[shell_func_list_size].func = pfunc;
 80015ba:	4b12      	ldr	r3, [pc, #72]	; (8001604 <shell_add+0x74>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	4912      	ldr	r1, [pc, #72]	; (8001608 <shell_add+0x78>)
 80015c0:	4613      	mov	r3, r2
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	4413      	add	r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	440b      	add	r3, r1
 80015ca:	3304      	adds	r3, #4
 80015cc:	68ba      	ldr	r2, [r7, #8]
 80015ce:	601a      	str	r2, [r3, #0]
		shell_func_list[shell_func_list_size].description = description;
 80015d0:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <shell_add+0x74>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	490c      	ldr	r1, [pc, #48]	; (8001608 <shell_add+0x78>)
 80015d6:	4613      	mov	r3, r2
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	4413      	add	r3, r2
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	440b      	add	r3, r1
 80015e0:	3308      	adds	r3, #8
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	601a      	str	r2, [r3, #0]
		shell_func_list_size++;
 80015e6:	4b07      	ldr	r3, [pc, #28]	; (8001604 <shell_add+0x74>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	3301      	adds	r3, #1
 80015ec:	4a05      	ldr	r2, [pc, #20]	; (8001604 <shell_add+0x74>)
 80015ee:	6013      	str	r3, [r2, #0]
		return 0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	e001      	b.n	80015f8 <shell_add+0x68>
	}

	return -1;
 80015f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3714      	adds	r7, #20
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	20000254 	.word	0x20000254
 8001608:	20000258 	.word	0x20000258

0800160c <shell_char_received>:

void shell_char_received() {
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0

	switch (c) {
 8001610:	4b23      	ldr	r3, [pc, #140]	; (80016a0 <shell_char_received+0x94>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b08      	cmp	r3, #8
 8001616:	d01c      	beq.n	8001652 <shell_char_received+0x46>
 8001618:	2b0d      	cmp	r3, #13
 800161a:	d129      	bne.n	8001670 <shell_char_received+0x64>

	case '\r':
		// Enter
		printf("\r\n");
 800161c:	4821      	ldr	r0, [pc, #132]	; (80016a4 <shell_char_received+0x98>)
 800161e:	f005 fae7 	bl	8006bf0 <puts>
		buf[pos++] = 0;
 8001622:	4b21      	ldr	r3, [pc, #132]	; (80016a8 <shell_char_received+0x9c>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	1c5a      	adds	r2, r3, #1
 8001628:	b2d1      	uxtb	r1, r2
 800162a:	4a1f      	ldr	r2, [pc, #124]	; (80016a8 <shell_char_received+0x9c>)
 800162c:	7011      	strb	r1, [r2, #0]
 800162e:	461a      	mov	r2, r3
 8001630:	4b1e      	ldr	r3, [pc, #120]	; (80016ac <shell_char_received+0xa0>)
 8001632:	2100      	movs	r1, #0
 8001634:	5499      	strb	r1, [r3, r2]
		printf(":%s\r\n", buf);
 8001636:	491d      	ldr	r1, [pc, #116]	; (80016ac <shell_char_received+0xa0>)
 8001638:	481d      	ldr	r0, [pc, #116]	; (80016b0 <shell_char_received+0xa4>)
 800163a:	f005 fa53 	bl	8006ae4 <iprintf>
		pos = 0;
 800163e:	4b1a      	ldr	r3, [pc, #104]	; (80016a8 <shell_char_received+0x9c>)
 8001640:	2200      	movs	r2, #0
 8001642:	701a      	strb	r2, [r3, #0]
		shell_exec(buf[0], buf);
 8001644:	4b19      	ldr	r3, [pc, #100]	; (80016ac <shell_char_received+0xa0>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	4918      	ldr	r1, [pc, #96]	; (80016ac <shell_char_received+0xa0>)
 800164a:	4618      	mov	r0, r3
 800164c:	f000 f834 	bl	80016b8 <shell_exec>
		break;
 8001650:	e023      	b.n	800169a <shell_char_received+0x8e>

		// Delete
	case '\b':
		if (pos > 0) {
 8001652:	4b15      	ldr	r3, [pc, #84]	; (80016a8 <shell_char_received+0x9c>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d01e      	beq.n	8001698 <shell_char_received+0x8c>
			pos--;
 800165a:	4b13      	ldr	r3, [pc, #76]	; (80016a8 <shell_char_received+0x9c>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	3b01      	subs	r3, #1
 8001660:	b2da      	uxtb	r2, r3
 8001662:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <shell_char_received+0x9c>)
 8001664:	701a      	strb	r2, [r3, #0]
			uart_write(backspace, 3);
 8001666:	2103      	movs	r1, #3
 8001668:	4812      	ldr	r0, [pc, #72]	; (80016b4 <shell_char_received+0xa8>)
 800166a:	f7ff ff1f 	bl	80014ac <uart_write>
		}
		break;
 800166e:	e013      	b.n	8001698 <shell_char_received+0x8c>

	default:
		if (pos < BUFFER_SIZE) {
 8001670:	4b0d      	ldr	r3, [pc, #52]	; (80016a8 <shell_char_received+0x9c>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	2b27      	cmp	r3, #39	; 0x27
 8001676:	d810      	bhi.n	800169a <shell_char_received+0x8e>
			uart_write(&c, 1);
 8001678:	2101      	movs	r1, #1
 800167a:	4809      	ldr	r0, [pc, #36]	; (80016a0 <shell_char_received+0x94>)
 800167c:	f7ff ff16 	bl	80014ac <uart_write>
			buf[pos++] = c;
 8001680:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <shell_char_received+0x9c>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	1c5a      	adds	r2, r3, #1
 8001686:	b2d1      	uxtb	r1, r2
 8001688:	4a07      	ldr	r2, [pc, #28]	; (80016a8 <shell_char_received+0x9c>)
 800168a:	7011      	strb	r1, [r2, #0]
 800168c:	461a      	mov	r2, r3
 800168e:	4b04      	ldr	r3, [pc, #16]	; (80016a0 <shell_char_received+0x94>)
 8001690:	7819      	ldrb	r1, [r3, #0]
 8001692:	4b06      	ldr	r3, [pc, #24]	; (80016ac <shell_char_received+0xa0>)
 8001694:	5499      	strb	r1, [r3, r2]
		}
	}
}
 8001696:	e000      	b.n	800169a <shell_char_received+0x8e>
		break;
 8001698:	bf00      	nop
}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	20000228 	.word	0x20000228
 80016a4:	0800a30c 	.word	0x0800a30c
 80016a8:	20000229 	.word	0x20000229
 80016ac:	2000022c 	.word	0x2000022c
 80016b0:	0800a310 	.word	0x0800a310
 80016b4:	20000018 	.word	0x20000018

080016b8 <shell_exec>:

int shell_exec(char c, char * buf) {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b08e      	sub	sp, #56	; 0x38
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	6039      	str	r1, [r7, #0]
 80016c2:	71fb      	strb	r3, [r7, #7]

	int argc;
	char * argv[ARGC_MAX];
	char *p;

	for(i = 0 ; i < shell_func_list_size ; i++) {
 80016c4:	2300      	movs	r3, #0
 80016c6:	637b      	str	r3, [r7, #52]	; 0x34
 80016c8:	e040      	b.n	800174c <shell_exec+0x94>
		if (shell_func_list[i].c == c) {
 80016ca:	4928      	ldr	r1, [pc, #160]	; (800176c <shell_exec+0xb4>)
 80016cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80016ce:	4613      	mov	r3, r2
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	4413      	add	r3, r2
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	440b      	add	r3, r1
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	79fa      	ldrb	r2, [r7, #7]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d132      	bne.n	8001746 <shell_exec+0x8e>
			argc = 1;
 80016e0:	2301      	movs	r3, #1
 80016e2:	633b      	str	r3, [r7, #48]	; 0x30
			argv[0] = buf;
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	60fb      	str	r3, [r7, #12]

			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016ec:	e014      	b.n	8001718 <shell_exec+0x60>
				if(*p == ' ') {
 80016ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b20      	cmp	r3, #32
 80016f4:	d10d      	bne.n	8001712 <shell_exec+0x5a>
					*p = '\0';
 80016f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016f8:	2200      	movs	r2, #0
 80016fa:	701a      	strb	r2, [r3, #0]
					argv[argc++] = p+1;
 80016fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016fe:	1c5a      	adds	r2, r3, #1
 8001700:	633a      	str	r2, [r7, #48]	; 0x30
 8001702:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001704:	3201      	adds	r2, #1
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800170c:	440b      	add	r3, r1
 800170e:	f843 2c2c 	str.w	r2, [r3, #-44]
			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8001712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001714:	3301      	adds	r3, #1
 8001716:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d002      	beq.n	8001726 <shell_exec+0x6e>
 8001720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001722:	2b07      	cmp	r3, #7
 8001724:	dde3      	ble.n	80016ee <shell_exec+0x36>
				}
			}

			return shell_func_list[i].func(argc, argv);
 8001726:	4911      	ldr	r1, [pc, #68]	; (800176c <shell_exec+0xb4>)
 8001728:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800172a:	4613      	mov	r3, r2
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	4413      	add	r3, r2
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	440b      	add	r3, r1
 8001734:	3304      	adds	r3, #4
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f107 020c 	add.w	r2, r7, #12
 800173c:	4611      	mov	r1, r2
 800173e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001740:	4798      	blx	r3
 8001742:	4603      	mov	r3, r0
 8001744:	e00e      	b.n	8001764 <shell_exec+0xac>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 8001746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001748:	3301      	adds	r3, #1
 800174a:	637b      	str	r3, [r7, #52]	; 0x34
 800174c:	4b08      	ldr	r3, [pc, #32]	; (8001770 <shell_exec+0xb8>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001752:	429a      	cmp	r2, r3
 8001754:	dbb9      	blt.n	80016ca <shell_exec+0x12>
		}
	}
	printf("%c: no such command\r\n", c);
 8001756:	79fb      	ldrb	r3, [r7, #7]
 8001758:	4619      	mov	r1, r3
 800175a:	4806      	ldr	r0, [pc, #24]	; (8001774 <shell_exec+0xbc>)
 800175c:	f005 f9c2 	bl	8006ae4 <iprintf>
	return -1;
 8001760:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001764:	4618      	mov	r0, r3
 8001766:	3738      	adds	r7, #56	; 0x38
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20000258 	.word	0x20000258
 8001770:	20000254 	.word	0x20000254
 8001774:	0800a318 	.word	0x0800a318

08001778 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800177e:	463b      	mov	r3, r7
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800178a:	4b21      	ldr	r3, [pc, #132]	; (8001810 <MX_ADC1_Init+0x98>)
 800178c:	4a21      	ldr	r2, [pc, #132]	; (8001814 <MX_ADC1_Init+0x9c>)
 800178e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001790:	4b1f      	ldr	r3, [pc, #124]	; (8001810 <MX_ADC1_Init+0x98>)
 8001792:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001796:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001798:	4b1d      	ldr	r3, [pc, #116]	; (8001810 <MX_ADC1_Init+0x98>)
 800179a:	2200      	movs	r2, #0
 800179c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800179e:	4b1c      	ldr	r3, [pc, #112]	; (8001810 <MX_ADC1_Init+0x98>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80017a4:	4b1a      	ldr	r3, [pc, #104]	; (8001810 <MX_ADC1_Init+0x98>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017aa:	4b19      	ldr	r3, [pc, #100]	; (8001810 <MX_ADC1_Init+0x98>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017b2:	4b17      	ldr	r3, [pc, #92]	; (8001810 <MX_ADC1_Init+0x98>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017b8:	4b15      	ldr	r3, [pc, #84]	; (8001810 <MX_ADC1_Init+0x98>)
 80017ba:	4a17      	ldr	r2, [pc, #92]	; (8001818 <MX_ADC1_Init+0xa0>)
 80017bc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017be:	4b14      	ldr	r3, [pc, #80]	; (8001810 <MX_ADC1_Init+0x98>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80017c4:	4b12      	ldr	r3, [pc, #72]	; (8001810 <MX_ADC1_Init+0x98>)
 80017c6:	2201      	movs	r2, #1
 80017c8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80017ca:	4b11      	ldr	r3, [pc, #68]	; (8001810 <MX_ADC1_Init+0x98>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80017d2:	4b0f      	ldr	r3, [pc, #60]	; (8001810 <MX_ADC1_Init+0x98>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017d8:	480d      	ldr	r0, [pc, #52]	; (8001810 <MX_ADC1_Init+0x98>)
 80017da:	f000 fecd 	bl	8002578 <HAL_ADC_Init>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80017e4:	f000 fa58 	bl	8001c98 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80017e8:	2308      	movs	r3, #8
 80017ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80017ec:	2301      	movs	r3, #1
 80017ee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80017f0:	2300      	movs	r3, #0
 80017f2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017f4:	463b      	mov	r3, r7
 80017f6:	4619      	mov	r1, r3
 80017f8:	4805      	ldr	r0, [pc, #20]	; (8001810 <MX_ADC1_Init+0x98>)
 80017fa:	f001 f855 	bl	80028a8 <HAL_ADC_ConfigChannel>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001804:	f000 fa48 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001808:	bf00      	nop
 800180a:	3710      	adds	r7, #16
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	200005b8 	.word	0x200005b8
 8001814:	40012000 	.word	0x40012000
 8001818:	0f000001 	.word	0x0f000001

0800181c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b08a      	sub	sp, #40	; 0x28
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001824:	f107 0314 	add.w	r3, r7, #20
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	609a      	str	r2, [r3, #8]
 8001830:	60da      	str	r2, [r3, #12]
 8001832:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a1b      	ldr	r2, [pc, #108]	; (80018a8 <HAL_ADC_MspInit+0x8c>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d12f      	bne.n	800189e <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	613b      	str	r3, [r7, #16]
 8001842:	4b1a      	ldr	r3, [pc, #104]	; (80018ac <HAL_ADC_MspInit+0x90>)
 8001844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001846:	4a19      	ldr	r2, [pc, #100]	; (80018ac <HAL_ADC_MspInit+0x90>)
 8001848:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800184c:	6453      	str	r3, [r2, #68]	; 0x44
 800184e:	4b17      	ldr	r3, [pc, #92]	; (80018ac <HAL_ADC_MspInit+0x90>)
 8001850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001856:	613b      	str	r3, [r7, #16]
 8001858:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	60fb      	str	r3, [r7, #12]
 800185e:	4b13      	ldr	r3, [pc, #76]	; (80018ac <HAL_ADC_MspInit+0x90>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	4a12      	ldr	r2, [pc, #72]	; (80018ac <HAL_ADC_MspInit+0x90>)
 8001864:	f043 0302 	orr.w	r3, r3, #2
 8001868:	6313      	str	r3, [r2, #48]	; 0x30
 800186a:	4b10      	ldr	r3, [pc, #64]	; (80018ac <HAL_ADC_MspInit+0x90>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001876:	2301      	movs	r3, #1
 8001878:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800187a:	2303      	movs	r3, #3
 800187c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001882:	f107 0314 	add.w	r3, r7, #20
 8001886:	4619      	mov	r1, r3
 8001888:	4809      	ldr	r0, [pc, #36]	; (80018b0 <HAL_ADC_MspInit+0x94>)
 800188a:	f001 fbe9 	bl	8003060 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800188e:	2200      	movs	r2, #0
 8001890:	2100      	movs	r1, #0
 8001892:	2012      	movs	r0, #18
 8001894:	f001 fb1b 	bl	8002ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001898:	2012      	movs	r0, #18
 800189a:	f001 fb34 	bl	8002f06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800189e:	bf00      	nop
 80018a0:	3728      	adds	r7, #40	; 0x28
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40012000 	.word	0x40012000
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40020400 	.word	0x40020400

080018b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08a      	sub	sp, #40	; 0x28
 80018b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ba:	f107 0314 	add.w	r3, r7, #20
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	605a      	str	r2, [r3, #4]
 80018c4:	609a      	str	r2, [r3, #8]
 80018c6:	60da      	str	r2, [r3, #12]
 80018c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	613b      	str	r3, [r7, #16]
 80018ce:	4b37      	ldr	r3, [pc, #220]	; (80019ac <MX_GPIO_Init+0xf8>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	4a36      	ldr	r2, [pc, #216]	; (80019ac <MX_GPIO_Init+0xf8>)
 80018d4:	f043 0304 	orr.w	r3, r3, #4
 80018d8:	6313      	str	r3, [r2, #48]	; 0x30
 80018da:	4b34      	ldr	r3, [pc, #208]	; (80019ac <MX_GPIO_Init+0xf8>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	f003 0304 	and.w	r3, r3, #4
 80018e2:	613b      	str	r3, [r7, #16]
 80018e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	4b30      	ldr	r3, [pc, #192]	; (80019ac <MX_GPIO_Init+0xf8>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	4a2f      	ldr	r2, [pc, #188]	; (80019ac <MX_GPIO_Init+0xf8>)
 80018f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018f4:	6313      	str	r3, [r2, #48]	; 0x30
 80018f6:	4b2d      	ldr	r3, [pc, #180]	; (80019ac <MX_GPIO_Init+0xf8>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	4b29      	ldr	r3, [pc, #164]	; (80019ac <MX_GPIO_Init+0xf8>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	4a28      	ldr	r2, [pc, #160]	; (80019ac <MX_GPIO_Init+0xf8>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	6313      	str	r3, [r2, #48]	; 0x30
 8001912:	4b26      	ldr	r3, [pc, #152]	; (80019ac <MX_GPIO_Init+0xf8>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	607b      	str	r3, [r7, #4]
 8001922:	4b22      	ldr	r3, [pc, #136]	; (80019ac <MX_GPIO_Init+0xf8>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	4a21      	ldr	r2, [pc, #132]	; (80019ac <MX_GPIO_Init+0xf8>)
 8001928:	f043 0302 	orr.w	r3, r3, #2
 800192c:	6313      	str	r3, [r2, #48]	; 0x30
 800192e:	4b1f      	ldr	r3, [pc, #124]	; (80019ac <MX_GPIO_Init+0xf8>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	607b      	str	r3, [r7, #4]
 8001938:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOT_IN1_Pin|MOT_IN2_Pin, GPIO_PIN_RESET);
 800193a:	2200      	movs	r2, #0
 800193c:	2103      	movs	r1, #3
 800193e:	481c      	ldr	r0, [pc, #112]	; (80019b0 <MX_GPIO_Init+0xfc>)
 8001940:	f001 fd22 	bl	8003388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001944:	2200      	movs	r2, #0
 8001946:	2120      	movs	r1, #32
 8001948:	481a      	ldr	r0, [pc, #104]	; (80019b4 <MX_GPIO_Init+0x100>)
 800194a:	f001 fd1d 	bl	8003388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800194e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001952:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001954:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001958:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195a:	2300      	movs	r3, #0
 800195c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800195e:	f107 0314 	add.w	r3, r7, #20
 8001962:	4619      	mov	r1, r3
 8001964:	4812      	ldr	r0, [pc, #72]	; (80019b0 <MX_GPIO_Init+0xfc>)
 8001966:	f001 fb7b 	bl	8003060 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MOT_IN1_Pin|MOT_IN2_Pin;
 800196a:	2303      	movs	r3, #3
 800196c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800196e:	2301      	movs	r3, #1
 8001970:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001976:	2300      	movs	r3, #0
 8001978:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800197a:	f107 0314 	add.w	r3, r7, #20
 800197e:	4619      	mov	r1, r3
 8001980:	480b      	ldr	r0, [pc, #44]	; (80019b0 <MX_GPIO_Init+0xfc>)
 8001982:	f001 fb6d 	bl	8003060 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001986:	2320      	movs	r3, #32
 8001988:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800198a:	2301      	movs	r3, #1
 800198c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001992:	2300      	movs	r3, #0
 8001994:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001996:	f107 0314 	add.w	r3, r7, #20
 800199a:	4619      	mov	r1, r3
 800199c:	4805      	ldr	r0, [pc, #20]	; (80019b4 <MX_GPIO_Init+0x100>)
 800199e:	f001 fb5f 	bl	8003060 <HAL_GPIO_Init>

}
 80019a2:	bf00      	nop
 80019a4:	3728      	adds	r7, #40	; 0x28
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40023800 	.word	0x40023800
 80019b0:	40020800 	.word	0x40020800
 80019b4:	40020000 	.word	0x40020000

080019b8 <fonction>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int fonction(int argc, char ** argv) {
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
	printf("Fonction Test\r\n");
 80019c2:	4810      	ldr	r0, [pc, #64]	; (8001a04 <fonction+0x4c>)
 80019c4:	f005 f914 	bl	8006bf0 <puts>

	printf("argc = %d\r\n", argc);
 80019c8:	6879      	ldr	r1, [r7, #4]
 80019ca:	480f      	ldr	r0, [pc, #60]	; (8001a08 <fonction+0x50>)
 80019cc:	f005 f88a 	bl	8006ae4 <iprintf>

	for (int i = 0 ; i < argc ; i++) {
 80019d0:	2300      	movs	r3, #0
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	e00c      	b.n	80019f0 <fonction+0x38>
		printf("arg numero %d = %s\r\n", i, argv[i]);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	683a      	ldr	r2, [r7, #0]
 80019dc:	4413      	add	r3, r2
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	461a      	mov	r2, r3
 80019e2:	68f9      	ldr	r1, [r7, #12]
 80019e4:	4809      	ldr	r0, [pc, #36]	; (8001a0c <fonction+0x54>)
 80019e6:	f005 f87d 	bl	8006ae4 <iprintf>
	for (int i = 0 ; i < argc ; i++) {
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	3301      	adds	r3, #1
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fa      	ldr	r2, [r7, #12]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	dbee      	blt.n	80019d6 <fonction+0x1e>
	}

	return 0;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	0800a330 	.word	0x0800a330
 8001a08:	0800a340 	.word	0x0800a340
 8001a0c:	0800a34c 	.word	0x0800a34c

08001a10 <asserv>:

int asserv(int argc, char ** argv) {
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
	printf("Reglage asserv\r\n");
 8001a1a:	481d      	ldr	r0, [pc, #116]	; (8001a90 <asserv+0x80>)
 8001a1c:	f005 f8e8 	bl	8006bf0 <puts>

	if(argc == 3){
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2b03      	cmp	r3, #3
 8001a24:	d128      	bne.n	8001a78 <asserv+0x68>
		Ctrl_Set_Kp(atof(argv[1]));
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	3304      	adds	r3, #4
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f004 fbb9 	bl	80061a4 <atof>
 8001a32:	ec53 2b10 	vmov	r2, r3, d0
 8001a36:	4610      	mov	r0, r2
 8001a38:	4619      	mov	r1, r3
 8001a3a:	f7ff f8f5 	bl	8000c28 <__aeabi_d2f>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	ee00 3a10 	vmov	s0, r3
 8001a44:	f7ff fb1e 	bl	8001084 <Ctrl_Set_Kp>
		Ctrl_Set_Ki(atof(argv[2]));
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	3308      	adds	r3, #8
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f004 fba8 	bl	80061a4 <atof>
 8001a54:	ec53 2b10 	vmov	r2, r3, d0
 8001a58:	4610      	mov	r0, r2
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	f7ff f8e4 	bl	8000c28 <__aeabi_d2f>
 8001a60:	4603      	mov	r3, r0
 8001a62:	ee00 3a10 	vmov	s0, r3
 8001a66:	f7ff fb1f 	bl	80010a8 <Ctrl_Set_Ki>
		reglage_asserv = 1;
 8001a6a:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <asserv+0x84>)
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	701a      	strb	r2, [r3, #0]
		Ctrl_Set_Consigne(20);
 8001a70:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8001a88 <asserv+0x78>
 8001a74:	f7ff faec 	bl	8001050 <Ctrl_Set_Consigne>
	}

	return 0;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	f3af 8000 	nop.w
 8001a88:	00000000 	.word	0x00000000
 8001a8c:	40340000 	.word	0x40340000
 8001a90:	0800a364 	.word	0x0800a364
 8001a94:	20000558 	.word	0x20000558

08001a98 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001a9e:	f000 fcd5 	bl	800244c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001aa2:	f000 f849 	bl	8001b38 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001aa6:	f7ff ff05 	bl	80018b4 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001aaa:	f000 fc2b 	bl	8002304 <MX_USART2_UART_Init>
	MX_TIM1_Init();
 8001aae:	f000 fa41 	bl	8001f34 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001ab2:	f000 fadf 	bl	8002074 <MX_TIM2_Init>
	MX_TIM6_Init();
 8001ab6:	f000 fb31 	bl	800211c <MX_TIM6_Init>
	MX_ADC1_Init();
 8001aba:	f7ff fe5d 	bl	8001778 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	shell_init();
 8001abe:	f7ff fd3b 	bl	8001538 <shell_init>
	shell_add('f', fonction, "Une fonction inutile");
 8001ac2:	4a13      	ldr	r2, [pc, #76]	; (8001b10 <main+0x78>)
 8001ac4:	4913      	ldr	r1, [pc, #76]	; (8001b14 <main+0x7c>)
 8001ac6:	2066      	movs	r0, #102	; 0x66
 8001ac8:	f7ff fd62 	bl	8001590 <shell_add>
	shell_add('a', asserv, "Reglage asservissement");
 8001acc:	4a12      	ldr	r2, [pc, #72]	; (8001b18 <main+0x80>)
 8001ace:	4913      	ldr	r1, [pc, #76]	; (8001b1c <main+0x84>)
 8001ad0:	2061      	movs	r0, #97	; 0x61
 8001ad2:	f7ff fd5d 	bl	8001590 <shell_add>

	// Initialisation du Moteur A
	//Mot_Struct MoteurA;
	MOT_InitTimer(&MoteurGauche, &htim1, TIM_CHANNEL_1);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	4911      	ldr	r1, [pc, #68]	; (8001b20 <main+0x88>)
 8001ada:	4812      	ldr	r0, [pc, #72]	; (8001b24 <main+0x8c>)
 8001adc:	f7ff fbd6 	bl	800128c <MOT_InitTimer>
	MOT_InitGPIOs(&MoteurGauche, GPIOC, GPIO_PIN_0, GPIOC, GPIO_PIN_1); // IN1:PC0 et IN2:PC1
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	4b10      	ldr	r3, [pc, #64]	; (8001b28 <main+0x90>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	490f      	ldr	r1, [pc, #60]	; (8001b28 <main+0x90>)
 8001aea:	480e      	ldr	r0, [pc, #56]	; (8001b24 <main+0x8c>)
 8001aec:	f7ff fbec 	bl	80012c8 <MOT_InitGPIOs>
	MOT_SetDirection(&MoteurGauche, MOT_FUNCTIONS_REVERSE);
 8001af0:	2102      	movs	r1, #2
 8001af2:	480c      	ldr	r0, [pc, #48]	; (8001b24 <main+0x8c>)
 8001af4:	f7ff fc02 	bl	80012fc <MOT_SetDirection>
	//MOT_SetDutyCycle(&MoteurGauche, 68); // 66
	//HAL_ADC_Start_IT(&hadc1);

	// Initialisation du Codeur A
	ENC_InitTimer(&CodeurGauche, &htim2, TIM_CHANNEL_1, TIM_CHANNEL_2); // PhA:PA0 et PhB:PA1
 8001af8:	2304      	movs	r3, #4
 8001afa:	2200      	movs	r2, #0
 8001afc:	490b      	ldr	r1, [pc, #44]	; (8001b2c <main+0x94>)
 8001afe:	480c      	ldr	r0, [pc, #48]	; (8001b30 <main+0x98>)
 8001b00:	f7ff fb7e 	bl	8001200 <ENC_InitTimer>

	// Initialisation de l'asservissement
	Ctrl_Struct Control;
	Ctrl_Init_SetTimer(&Control, &htim6);
 8001b04:	463b      	mov	r3, r7
 8001b06:	490b      	ldr	r1, [pc, #44]	; (8001b34 <main+0x9c>)
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff fa8f 	bl	800102c <Ctrl_Init_SetTimer>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8001b0e:	e7fe      	b.n	8001b0e <main+0x76>
 8001b10:	0800a374 	.word	0x0800a374
 8001b14:	080019b9 	.word	0x080019b9
 8001b18:	0800a38c 	.word	0x0800a38c
 8001b1c:	08001a11 	.word	0x08001a11
 8001b20:	20000648 	.word	0x20000648
 8001b24:	20000568 	.word	0x20000568
 8001b28:	40020800 	.word	0x40020800
 8001b2c:	20000690 	.word	0x20000690
 8001b30:	200005ac 	.word	0x200005ac
 8001b34:	20000600 	.word	0x20000600

08001b38 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b094      	sub	sp, #80	; 0x50
 8001b3c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b3e:	f107 031c 	add.w	r3, r7, #28
 8001b42:	2234      	movs	r2, #52	; 0x34
 8001b44:	2100      	movs	r1, #0
 8001b46:	4618      	mov	r0, r3
 8001b48:	f004 fb5a 	bl	8006200 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b4c:	f107 0308 	add.w	r3, r7, #8
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	60da      	str	r2, [r3, #12]
 8001b5a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	607b      	str	r3, [r7, #4]
 8001b60:	4b2a      	ldr	r3, [pc, #168]	; (8001c0c <SystemClock_Config+0xd4>)
 8001b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b64:	4a29      	ldr	r2, [pc, #164]	; (8001c0c <SystemClock_Config+0xd4>)
 8001b66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b6a:	6413      	str	r3, [r2, #64]	; 0x40
 8001b6c:	4b27      	ldr	r3, [pc, #156]	; (8001c0c <SystemClock_Config+0xd4>)
 8001b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b74:	607b      	str	r3, [r7, #4]
 8001b76:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001b78:	2300      	movs	r3, #0
 8001b7a:	603b      	str	r3, [r7, #0]
 8001b7c:	4b24      	ldr	r3, [pc, #144]	; (8001c10 <SystemClock_Config+0xd8>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001b84:	4a22      	ldr	r2, [pc, #136]	; (8001c10 <SystemClock_Config+0xd8>)
 8001b86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b8a:	6013      	str	r3, [r2, #0]
 8001b8c:	4b20      	ldr	r3, [pc, #128]	; (8001c10 <SystemClock_Config+0xd8>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b94:	603b      	str	r3, [r7, #0]
 8001b96:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ba0:	2310      	movs	r3, #16
 8001ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 8001bac:	2310      	movs	r3, #16
 8001bae:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001bb0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001bb4:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001bb6:	2304      	movs	r3, #4
 8001bb8:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bc2:	f107 031c 	add.w	r3, r7, #28
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f001 fec4 	bl	8003954 <HAL_RCC_OscConfig>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <SystemClock_Config+0x9e>
	{
		Error_Handler();
 8001bd2:	f000 f861 	bl	8001c98 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bd6:	230f      	movs	r3, #15
 8001bd8:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bde:	2300      	movs	r3, #0
 8001be0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001be2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001be6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001be8:	2300      	movs	r3, #0
 8001bea:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001bec:	f107 0308 	add.w	r3, r7, #8
 8001bf0:	2102      	movs	r1, #2
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f001 fbe2 	bl	80033bc <HAL_RCC_ClockConfig>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <SystemClock_Config+0xca>
	{
		Error_Handler();
 8001bfe:	f000 f84b 	bl	8001c98 <Error_Handler>
	}
}
 8001c02:	bf00      	nop
 8001c04:	3750      	adds	r7, #80	; 0x50
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	40007000 	.word	0x40007000

08001c14 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart){
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a06      	ldr	r2, [pc, #24]	; (8001c3c <HAL_UART_RxCpltCallback+0x28>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d106      	bne.n	8001c34 <HAL_UART_RxCpltCallback+0x20>
		shell_char_received();
 8001c26:	f7ff fcf1 	bl	800160c <shell_char_received>
		HAL_UART_Receive_IT(&huart2, (uint8_t*)&c, 1);
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	4904      	ldr	r1, [pc, #16]	; (8001c40 <HAL_UART_RxCpltCallback+0x2c>)
 8001c2e:	4805      	ldr	r0, [pc, #20]	; (8001c44 <HAL_UART_RxCpltCallback+0x30>)
 8001c30:	f003 fbcf 	bl	80053d2 <HAL_UART_Receive_IT>
	}
}
 8001c34:	bf00      	nop
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40004400 	.word	0x40004400
 8001c40:	20000228 	.word	0x20000228
 8001c44:	200006d8 	.word	0x200006d8

08001c48 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a09      	ldr	r2, [pc, #36]	; (8001c7c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d10b      	bne.n	8001c72 <HAL_TIM_PeriodElapsedCallback+0x2a>
		float speed_out = Ctrl_SpeedControl();
 8001c5a:	f7ff fa37 	bl	80010cc <Ctrl_SpeedControl>
 8001c5e:	ed87 0a03 	vstr	s0, [r7, #12]
		printf("%f\r\n", speed_out);
 8001c62:	68f8      	ldr	r0, [r7, #12]
 8001c64:	f7fe fc90 	bl	8000588 <__aeabi_f2d>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	4804      	ldr	r0, [pc, #16]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001c6e:	f004 ff39 	bl	8006ae4 <iprintf>
	}
}
 8001c72:	bf00      	nop
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40001000 	.word	0x40001000
 8001c80:	0800a3a4 	.word	0x0800a3a4

08001c84 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1){
		//uint32_t val = HAL_ADC_GetValue(&hadc1);
		//printf("val = %ld\r\n", val);
		//HAL_ADC_Start_IT(&hadc1);
	}
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c9c:	b672      	cpsid	i
}
 8001c9e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001ca0:	e7fe      	b.n	8001ca0 <Error_Handler+0x8>
	...

08001ca4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	607b      	str	r3, [r7, #4]
 8001cae:	4b10      	ldr	r3, [pc, #64]	; (8001cf0 <HAL_MspInit+0x4c>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb2:	4a0f      	ldr	r2, [pc, #60]	; (8001cf0 <HAL_MspInit+0x4c>)
 8001cb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cba:	4b0d      	ldr	r3, [pc, #52]	; (8001cf0 <HAL_MspInit+0x4c>)
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cc2:	607b      	str	r3, [r7, #4]
 8001cc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	603b      	str	r3, [r7, #0]
 8001cca:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <HAL_MspInit+0x4c>)
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	4a08      	ldr	r2, [pc, #32]	; (8001cf0 <HAL_MspInit+0x4c>)
 8001cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cd6:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <HAL_MspInit+0x4c>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cde:	603b      	str	r3, [r7, #0]
 8001ce0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ce2:	2007      	movs	r0, #7
 8001ce4:	f001 f8e8 	bl	8002eb8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ce8:	bf00      	nop
 8001cea:	3708      	adds	r7, #8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40023800 	.word	0x40023800

08001cf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cf8:	e7fe      	b.n	8001cf8 <NMI_Handler+0x4>

08001cfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cfe:	e7fe      	b.n	8001cfe <HardFault_Handler+0x4>

08001d00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d04:	e7fe      	b.n	8001d04 <MemManage_Handler+0x4>

08001d06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d06:	b480      	push	{r7}
 8001d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d0a:	e7fe      	b.n	8001d0a <BusFault_Handler+0x4>

08001d0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d10:	e7fe      	b.n	8001d10 <UsageFault_Handler+0x4>

08001d12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d12:	b480      	push	{r7}
 8001d14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d16:	bf00      	nop
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d24:	bf00      	nop
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d32:	bf00      	nop
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d40:	f000 fbd6 	bl	80024f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d44:	bf00      	nop
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001d4c:	4802      	ldr	r0, [pc, #8]	; (8001d58 <ADC_IRQHandler+0x10>)
 8001d4e:	f000 fc56 	bl	80025fe <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	200005b8 	.word	0x200005b8

08001d5c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d60:	4802      	ldr	r0, [pc, #8]	; (8001d6c <USART2_IRQHandler+0x10>)
 8001d62:	f003 fb67 	bl	8005434 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	200006d8 	.word	0x200006d8

08001d70 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001d74:	4802      	ldr	r0, [pc, #8]	; (8001d80 <TIM6_DAC_IRQHandler+0x10>)
 8001d76:	f002 fba1 	bl	80044bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20000600 	.word	0x20000600

08001d84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
	return 1;
 8001d88:	2301      	movs	r3, #1
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <_kill>:

int _kill(int pid, int sig)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d9e:	f004 fa05 	bl	80061ac <__errno>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2216      	movs	r2, #22
 8001da6:	601a      	str	r2, [r3, #0]
	return -1;
 8001da8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <_exit>:

void _exit (int status)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001dbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f7ff ffe7 	bl	8001d94 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001dc6:	e7fe      	b.n	8001dc6 <_exit+0x12>

08001dc8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	617b      	str	r3, [r7, #20]
 8001dd8:	e00a      	b.n	8001df0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001dda:	f3af 8000 	nop.w
 8001dde:	4601      	mov	r1, r0
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	1c5a      	adds	r2, r3, #1
 8001de4:	60ba      	str	r2, [r7, #8]
 8001de6:	b2ca      	uxtb	r2, r1
 8001de8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	3301      	adds	r3, #1
 8001dee:	617b      	str	r3, [r7, #20]
 8001df0:	697a      	ldr	r2, [r7, #20]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	dbf0      	blt.n	8001dda <_read+0x12>
	}

return len;
 8001df8:	687b      	ldr	r3, [r7, #4]
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3718      	adds	r7, #24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b086      	sub	sp, #24
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	60f8      	str	r0, [r7, #12]
 8001e0a:	60b9      	str	r1, [r7, #8]
 8001e0c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e0e:	2300      	movs	r3, #0
 8001e10:	617b      	str	r3, [r7, #20]
 8001e12:	e009      	b.n	8001e28 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	1c5a      	adds	r2, r3, #1
 8001e18:	60ba      	str	r2, [r7, #8]
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff fb33 	bl	8001488 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	3301      	adds	r3, #1
 8001e26:	617b      	str	r3, [r7, #20]
 8001e28:	697a      	ldr	r2, [r7, #20]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	dbf1      	blt.n	8001e14 <_write+0x12>
	}
	return len;
 8001e30:	687b      	ldr	r3, [r7, #4]
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3718      	adds	r7, #24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <_close>:

int _close(int file)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	b083      	sub	sp, #12
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
	return -1;
 8001e42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr

08001e52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e52:	b480      	push	{r7}
 8001e54:	b083      	sub	sp, #12
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
 8001e5a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e62:	605a      	str	r2, [r3, #4]
	return 0;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <_isatty>:

int _isatty(int file)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b083      	sub	sp, #12
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
	return 1;
 8001e7a:	2301      	movs	r3, #1
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
	return 0;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3714      	adds	r7, #20
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
	...

08001ea4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001eac:	4a14      	ldr	r2, [pc, #80]	; (8001f00 <_sbrk+0x5c>)
 8001eae:	4b15      	ldr	r3, [pc, #84]	; (8001f04 <_sbrk+0x60>)
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001eb8:	4b13      	ldr	r3, [pc, #76]	; (8001f08 <_sbrk+0x64>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d102      	bne.n	8001ec6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ec0:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <_sbrk+0x64>)
 8001ec2:	4a12      	ldr	r2, [pc, #72]	; (8001f0c <_sbrk+0x68>)
 8001ec4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ec6:	4b10      	ldr	r3, [pc, #64]	; (8001f08 <_sbrk+0x64>)
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4413      	add	r3, r2
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d207      	bcs.n	8001ee4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ed4:	f004 f96a 	bl	80061ac <__errno>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	220c      	movs	r2, #12
 8001edc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ede:	f04f 33ff 	mov.w	r3, #4294967295
 8001ee2:	e009      	b.n	8001ef8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ee4:	4b08      	ldr	r3, [pc, #32]	; (8001f08 <_sbrk+0x64>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eea:	4b07      	ldr	r3, [pc, #28]	; (8001f08 <_sbrk+0x64>)
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	4a05      	ldr	r2, [pc, #20]	; (8001f08 <_sbrk+0x64>)
 8001ef4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3718      	adds	r7, #24
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	20020000 	.word	0x20020000
 8001f04:	00000400 	.word	0x00000400
 8001f08:	2000055c 	.word	0x2000055c
 8001f0c:	20000730 	.word	0x20000730

08001f10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f14:	4b06      	ldr	r3, [pc, #24]	; (8001f30 <SystemInit+0x20>)
 8001f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f1a:	4a05      	ldr	r2, [pc, #20]	; (8001f30 <SystemInit+0x20>)
 8001f1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f24:	bf00      	nop
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b096      	sub	sp, #88	; 0x58
 8001f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f3a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f3e:	2200      	movs	r2, #0
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	605a      	str	r2, [r3, #4]
 8001f44:	609a      	str	r2, [r3, #8]
 8001f46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f48:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]
 8001f5a:	605a      	str	r2, [r3, #4]
 8001f5c:	609a      	str	r2, [r3, #8]
 8001f5e:	60da      	str	r2, [r3, #12]
 8001f60:	611a      	str	r2, [r3, #16]
 8001f62:	615a      	str	r2, [r3, #20]
 8001f64:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f66:	1d3b      	adds	r3, r7, #4
 8001f68:	2220      	movs	r2, #32
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f004 f947 	bl	8006200 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f72:	4b3e      	ldr	r3, [pc, #248]	; (800206c <MX_TIM1_Init+0x138>)
 8001f74:	4a3e      	ldr	r2, [pc, #248]	; (8002070 <MX_TIM1_Init+0x13c>)
 8001f76:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001f78:	4b3c      	ldr	r3, [pc, #240]	; (800206c <MX_TIM1_Init+0x138>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f7e:	4b3b      	ldr	r3, [pc, #236]	; (800206c <MX_TIM1_Init+0x138>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3360-1;
 8001f84:	4b39      	ldr	r3, [pc, #228]	; (800206c <MX_TIM1_Init+0x138>)
 8001f86:	f640 521f 	movw	r2, #3359	; 0xd1f
 8001f8a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f8c:	4b37      	ldr	r3, [pc, #220]	; (800206c <MX_TIM1_Init+0x138>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f92:	4b36      	ldr	r3, [pc, #216]	; (800206c <MX_TIM1_Init+0x138>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f98:	4b34      	ldr	r3, [pc, #208]	; (800206c <MX_TIM1_Init+0x138>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f9e:	4833      	ldr	r0, [pc, #204]	; (800206c <MX_TIM1_Init+0x138>)
 8001fa0:	f001 ff76 	bl	8003e90 <HAL_TIM_Base_Init>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001faa:	f7ff fe75 	bl	8001c98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fb2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001fb4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001fb8:	4619      	mov	r1, r3
 8001fba:	482c      	ldr	r0, [pc, #176]	; (800206c <MX_TIM1_Init+0x138>)
 8001fbc:	f002 fc48 	bl	8004850 <HAL_TIM_ConfigClockSource>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001fc6:	f7ff fe67 	bl	8001c98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001fca:	4828      	ldr	r0, [pc, #160]	; (800206c <MX_TIM1_Init+0x138>)
 8001fcc:	f002 f820 	bl	8004010 <HAL_TIM_PWM_Init>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001fd6:	f7ff fe5f 	bl	8001c98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001fe2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4820      	ldr	r0, [pc, #128]	; (800206c <MX_TIM1_Init+0x138>)
 8001fea:	f003 f831 	bl	8005050 <HAL_TIMEx_MasterConfigSynchronization>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001ff4:	f7ff fe50 	bl	8001c98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ff8:	2360      	movs	r3, #96	; 0x60
 8001ffa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002000:	2300      	movs	r3, #0
 8002002:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002004:	2300      	movs	r3, #0
 8002006:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002008:	2300      	movs	r3, #0
 800200a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800200c:	2300      	movs	r3, #0
 800200e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002010:	2300      	movs	r3, #0
 8002012:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002014:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002018:	2200      	movs	r2, #0
 800201a:	4619      	mov	r1, r3
 800201c:	4813      	ldr	r0, [pc, #76]	; (800206c <MX_TIM1_Init+0x138>)
 800201e:	f002 fb55 	bl	80046cc <HAL_TIM_PWM_ConfigChannel>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002028:	f7ff fe36 	bl	8001c98 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800202c:	2300      	movs	r3, #0
 800202e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002030:	2300      	movs	r3, #0
 8002032:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002034:	2300      	movs	r3, #0
 8002036:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002038:	2300      	movs	r3, #0
 800203a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800203c:	2300      	movs	r3, #0
 800203e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002040:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002044:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002046:	2300      	movs	r3, #0
 8002048:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800204a:	1d3b      	adds	r3, r7, #4
 800204c:	4619      	mov	r1, r3
 800204e:	4807      	ldr	r0, [pc, #28]	; (800206c <MX_TIM1_Init+0x138>)
 8002050:	f003 f87a 	bl	8005148 <HAL_TIMEx_ConfigBreakDeadTime>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800205a:	f7ff fe1d 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800205e:	4803      	ldr	r0, [pc, #12]	; (800206c <MX_TIM1_Init+0x138>)
 8002060:	f000 f916 	bl	8002290 <HAL_TIM_MspPostInit>

}
 8002064:	bf00      	nop
 8002066:	3758      	adds	r7, #88	; 0x58
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	20000648 	.word	0x20000648
 8002070:	40010000 	.word	0x40010000

08002074 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b08c      	sub	sp, #48	; 0x30
 8002078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800207a:	f107 030c 	add.w	r3, r7, #12
 800207e:	2224      	movs	r2, #36	; 0x24
 8002080:	2100      	movs	r1, #0
 8002082:	4618      	mov	r0, r3
 8002084:	f004 f8bc 	bl	8006200 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002088:	1d3b      	adds	r3, r7, #4
 800208a:	2200      	movs	r2, #0
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002090:	4b21      	ldr	r3, [pc, #132]	; (8002118 <MX_TIM2_Init+0xa4>)
 8002092:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002096:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002098:	4b1f      	ldr	r3, [pc, #124]	; (8002118 <MX_TIM2_Init+0xa4>)
 800209a:	2200      	movs	r2, #0
 800209c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800209e:	4b1e      	ldr	r3, [pc, #120]	; (8002118 <MX_TIM2_Init+0xa4>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80020a4:	4b1c      	ldr	r3, [pc, #112]	; (8002118 <MX_TIM2_Init+0xa4>)
 80020a6:	f04f 32ff 	mov.w	r2, #4294967295
 80020aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ac:	4b1a      	ldr	r3, [pc, #104]	; (8002118 <MX_TIM2_Init+0xa4>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020b2:	4b19      	ldr	r3, [pc, #100]	; (8002118 <MX_TIM2_Init+0xa4>)
 80020b4:	2280      	movs	r2, #128	; 0x80
 80020b6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80020b8:	2303      	movs	r3, #3
 80020ba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80020bc:	2300      	movs	r3, #0
 80020be:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80020c0:	2301      	movs	r3, #1
 80020c2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80020c4:	2300      	movs	r3, #0
 80020c6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80020c8:	230a      	movs	r3, #10
 80020ca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80020cc:	2300      	movs	r3, #0
 80020ce:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80020d0:	2301      	movs	r3, #1
 80020d2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80020d4:	2300      	movs	r3, #0
 80020d6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80020d8:	2300      	movs	r3, #0
 80020da:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80020dc:	f107 030c 	add.w	r3, r7, #12
 80020e0:	4619      	mov	r1, r3
 80020e2:	480d      	ldr	r0, [pc, #52]	; (8002118 <MX_TIM2_Init+0xa4>)
 80020e4:	f002 f8b6 	bl	8004254 <HAL_TIM_Encoder_Init>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80020ee:	f7ff fdd3 	bl	8001c98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020f2:	2300      	movs	r3, #0
 80020f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020f6:	2300      	movs	r3, #0
 80020f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020fa:	1d3b      	adds	r3, r7, #4
 80020fc:	4619      	mov	r1, r3
 80020fe:	4806      	ldr	r0, [pc, #24]	; (8002118 <MX_TIM2_Init+0xa4>)
 8002100:	f002 ffa6 	bl	8005050 <HAL_TIMEx_MasterConfigSynchronization>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800210a:	f7ff fdc5 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800210e:	bf00      	nop
 8002110:	3730      	adds	r7, #48	; 0x30
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	20000690 	.word	0x20000690

0800211c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002122:	463b      	mov	r3, r7
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800212a:	4b15      	ldr	r3, [pc, #84]	; (8002180 <MX_TIM6_Init+0x64>)
 800212c:	4a15      	ldr	r2, [pc, #84]	; (8002184 <MX_TIM6_Init+0x68>)
 800212e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8400-1;
 8002130:	4b13      	ldr	r3, [pc, #76]	; (8002180 <MX_TIM6_Init+0x64>)
 8002132:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8002136:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002138:	4b11      	ldr	r3, [pc, #68]	; (8002180 <MX_TIM6_Init+0x64>)
 800213a:	2200      	movs	r2, #0
 800213c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 200;
 800213e:	4b10      	ldr	r3, [pc, #64]	; (8002180 <MX_TIM6_Init+0x64>)
 8002140:	22c8      	movs	r2, #200	; 0xc8
 8002142:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002144:	4b0e      	ldr	r3, [pc, #56]	; (8002180 <MX_TIM6_Init+0x64>)
 8002146:	2200      	movs	r2, #0
 8002148:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800214a:	480d      	ldr	r0, [pc, #52]	; (8002180 <MX_TIM6_Init+0x64>)
 800214c:	f001 fea0 	bl	8003e90 <HAL_TIM_Base_Init>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002156:	f7ff fd9f 	bl	8001c98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800215a:	2300      	movs	r3, #0
 800215c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800215e:	2300      	movs	r3, #0
 8002160:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002162:	463b      	mov	r3, r7
 8002164:	4619      	mov	r1, r3
 8002166:	4806      	ldr	r0, [pc, #24]	; (8002180 <MX_TIM6_Init+0x64>)
 8002168:	f002 ff72 	bl	8005050 <HAL_TIMEx_MasterConfigSynchronization>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002172:	f7ff fd91 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002176:	bf00      	nop
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	20000600 	.word	0x20000600
 8002184:	40001000 	.word	0x40001000

08002188 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a18      	ldr	r2, [pc, #96]	; (80021f8 <HAL_TIM_Base_MspInit+0x70>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d10e      	bne.n	80021b8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	60fb      	str	r3, [r7, #12]
 800219e:	4b17      	ldr	r3, [pc, #92]	; (80021fc <HAL_TIM_Base_MspInit+0x74>)
 80021a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a2:	4a16      	ldr	r2, [pc, #88]	; (80021fc <HAL_TIM_Base_MspInit+0x74>)
 80021a4:	f043 0301 	orr.w	r3, r3, #1
 80021a8:	6453      	str	r3, [r2, #68]	; 0x44
 80021aa:	4b14      	ldr	r3, [pc, #80]	; (80021fc <HAL_TIM_Base_MspInit+0x74>)
 80021ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80021b6:	e01a      	b.n	80021ee <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM6)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a10      	ldr	r2, [pc, #64]	; (8002200 <HAL_TIM_Base_MspInit+0x78>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d115      	bne.n	80021ee <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80021c2:	2300      	movs	r3, #0
 80021c4:	60bb      	str	r3, [r7, #8]
 80021c6:	4b0d      	ldr	r3, [pc, #52]	; (80021fc <HAL_TIM_Base_MspInit+0x74>)
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	4a0c      	ldr	r2, [pc, #48]	; (80021fc <HAL_TIM_Base_MspInit+0x74>)
 80021cc:	f043 0310 	orr.w	r3, r3, #16
 80021d0:	6413      	str	r3, [r2, #64]	; 0x40
 80021d2:	4b0a      	ldr	r3, [pc, #40]	; (80021fc <HAL_TIM_Base_MspInit+0x74>)
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	f003 0310 	and.w	r3, r3, #16
 80021da:	60bb      	str	r3, [r7, #8]
 80021dc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80021de:	2200      	movs	r2, #0
 80021e0:	2100      	movs	r1, #0
 80021e2:	2036      	movs	r0, #54	; 0x36
 80021e4:	f000 fe73 	bl	8002ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80021e8:	2036      	movs	r0, #54	; 0x36
 80021ea:	f000 fe8c 	bl	8002f06 <HAL_NVIC_EnableIRQ>
}
 80021ee:	bf00      	nop
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40010000 	.word	0x40010000
 80021fc:	40023800 	.word	0x40023800
 8002200:	40001000 	.word	0x40001000

08002204 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b08a      	sub	sp, #40	; 0x28
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800220c:	f107 0314 	add.w	r3, r7, #20
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	605a      	str	r2, [r3, #4]
 8002216:	609a      	str	r2, [r3, #8]
 8002218:	60da      	str	r2, [r3, #12]
 800221a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002224:	d12b      	bne.n	800227e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	613b      	str	r3, [r7, #16]
 800222a:	4b17      	ldr	r3, [pc, #92]	; (8002288 <HAL_TIM_Encoder_MspInit+0x84>)
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	4a16      	ldr	r2, [pc, #88]	; (8002288 <HAL_TIM_Encoder_MspInit+0x84>)
 8002230:	f043 0301 	orr.w	r3, r3, #1
 8002234:	6413      	str	r3, [r2, #64]	; 0x40
 8002236:	4b14      	ldr	r3, [pc, #80]	; (8002288 <HAL_TIM_Encoder_MspInit+0x84>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	613b      	str	r3, [r7, #16]
 8002240:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002242:	2300      	movs	r3, #0
 8002244:	60fb      	str	r3, [r7, #12]
 8002246:	4b10      	ldr	r3, [pc, #64]	; (8002288 <HAL_TIM_Encoder_MspInit+0x84>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	4a0f      	ldr	r2, [pc, #60]	; (8002288 <HAL_TIM_Encoder_MspInit+0x84>)
 800224c:	f043 0301 	orr.w	r3, r3, #1
 8002250:	6313      	str	r3, [r2, #48]	; 0x30
 8002252:	4b0d      	ldr	r3, [pc, #52]	; (8002288 <HAL_TIM_Encoder_MspInit+0x84>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 800225e:	2303      	movs	r3, #3
 8002260:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002262:	2302      	movs	r3, #2
 8002264:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002266:	2300      	movs	r3, #0
 8002268:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226a:	2300      	movs	r3, #0
 800226c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800226e:	2301      	movs	r3, #1
 8002270:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002272:	f107 0314 	add.w	r3, r7, #20
 8002276:	4619      	mov	r1, r3
 8002278:	4804      	ldr	r0, [pc, #16]	; (800228c <HAL_TIM_Encoder_MspInit+0x88>)
 800227a:	f000 fef1 	bl	8003060 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800227e:	bf00      	nop
 8002280:	3728      	adds	r7, #40	; 0x28
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40023800 	.word	0x40023800
 800228c:	40020000 	.word	0x40020000

08002290 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b088      	sub	sp, #32
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002298:	f107 030c 	add.w	r3, r7, #12
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	609a      	str	r2, [r3, #8]
 80022a4:	60da      	str	r2, [r3, #12]
 80022a6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a12      	ldr	r2, [pc, #72]	; (80022f8 <HAL_TIM_MspPostInit+0x68>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d11e      	bne.n	80022f0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	60bb      	str	r3, [r7, #8]
 80022b6:	4b11      	ldr	r3, [pc, #68]	; (80022fc <HAL_TIM_MspPostInit+0x6c>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	4a10      	ldr	r2, [pc, #64]	; (80022fc <HAL_TIM_MspPostInit+0x6c>)
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	6313      	str	r3, [r2, #48]	; 0x30
 80022c2:	4b0e      	ldr	r3, [pc, #56]	; (80022fc <HAL_TIM_MspPostInit+0x6c>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	60bb      	str	r3, [r7, #8]
 80022cc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = MOT_ENA_Pin;
 80022ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022d2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d4:	2302      	movs	r3, #2
 80022d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d8:	2300      	movs	r3, #0
 80022da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022dc:	2300      	movs	r3, #0
 80022de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80022e0:	2301      	movs	r3, #1
 80022e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MOT_ENA_GPIO_Port, &GPIO_InitStruct);
 80022e4:	f107 030c 	add.w	r3, r7, #12
 80022e8:	4619      	mov	r1, r3
 80022ea:	4805      	ldr	r0, [pc, #20]	; (8002300 <HAL_TIM_MspPostInit+0x70>)
 80022ec:	f000 feb8 	bl	8003060 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80022f0:	bf00      	nop
 80022f2:	3720      	adds	r7, #32
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40010000 	.word	0x40010000
 80022fc:	40023800 	.word	0x40023800
 8002300:	40020000 	.word	0x40020000

08002304 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002308:	4b11      	ldr	r3, [pc, #68]	; (8002350 <MX_USART2_UART_Init+0x4c>)
 800230a:	4a12      	ldr	r2, [pc, #72]	; (8002354 <MX_USART2_UART_Init+0x50>)
 800230c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800230e:	4b10      	ldr	r3, [pc, #64]	; (8002350 <MX_USART2_UART_Init+0x4c>)
 8002310:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002314:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002316:	4b0e      	ldr	r3, [pc, #56]	; (8002350 <MX_USART2_UART_Init+0x4c>)
 8002318:	2200      	movs	r2, #0
 800231a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800231c:	4b0c      	ldr	r3, [pc, #48]	; (8002350 <MX_USART2_UART_Init+0x4c>)
 800231e:	2200      	movs	r2, #0
 8002320:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002322:	4b0b      	ldr	r3, [pc, #44]	; (8002350 <MX_USART2_UART_Init+0x4c>)
 8002324:	2200      	movs	r2, #0
 8002326:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002328:	4b09      	ldr	r3, [pc, #36]	; (8002350 <MX_USART2_UART_Init+0x4c>)
 800232a:	220c      	movs	r2, #12
 800232c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800232e:	4b08      	ldr	r3, [pc, #32]	; (8002350 <MX_USART2_UART_Init+0x4c>)
 8002330:	2200      	movs	r2, #0
 8002332:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002334:	4b06      	ldr	r3, [pc, #24]	; (8002350 <MX_USART2_UART_Init+0x4c>)
 8002336:	2200      	movs	r2, #0
 8002338:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800233a:	4805      	ldr	r0, [pc, #20]	; (8002350 <MX_USART2_UART_Init+0x4c>)
 800233c:	f002 ff6a 	bl	8005214 <HAL_UART_Init>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002346:	f7ff fca7 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800234a:	bf00      	nop
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	200006d8 	.word	0x200006d8
 8002354:	40004400 	.word	0x40004400

08002358 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b08a      	sub	sp, #40	; 0x28
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002360:	f107 0314 	add.w	r3, r7, #20
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	605a      	str	r2, [r3, #4]
 800236a:	609a      	str	r2, [r3, #8]
 800236c:	60da      	str	r2, [r3, #12]
 800236e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a1d      	ldr	r2, [pc, #116]	; (80023ec <HAL_UART_MspInit+0x94>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d133      	bne.n	80023e2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800237a:	2300      	movs	r3, #0
 800237c:	613b      	str	r3, [r7, #16]
 800237e:	4b1c      	ldr	r3, [pc, #112]	; (80023f0 <HAL_UART_MspInit+0x98>)
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	4a1b      	ldr	r2, [pc, #108]	; (80023f0 <HAL_UART_MspInit+0x98>)
 8002384:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002388:	6413      	str	r3, [r2, #64]	; 0x40
 800238a:	4b19      	ldr	r3, [pc, #100]	; (80023f0 <HAL_UART_MspInit+0x98>)
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002392:	613b      	str	r3, [r7, #16]
 8002394:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002396:	2300      	movs	r3, #0
 8002398:	60fb      	str	r3, [r7, #12]
 800239a:	4b15      	ldr	r3, [pc, #84]	; (80023f0 <HAL_UART_MspInit+0x98>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	4a14      	ldr	r2, [pc, #80]	; (80023f0 <HAL_UART_MspInit+0x98>)
 80023a0:	f043 0301 	orr.w	r3, r3, #1
 80023a4:	6313      	str	r3, [r2, #48]	; 0x30
 80023a6:	4b12      	ldr	r3, [pc, #72]	; (80023f0 <HAL_UART_MspInit+0x98>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	60fb      	str	r3, [r7, #12]
 80023b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80023b2:	230c      	movs	r3, #12
 80023b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b6:	2302      	movs	r3, #2
 80023b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ba:	2300      	movs	r3, #0
 80023bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023be:	2303      	movs	r3, #3
 80023c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023c2:	2307      	movs	r3, #7
 80023c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023c6:	f107 0314 	add.w	r3, r7, #20
 80023ca:	4619      	mov	r1, r3
 80023cc:	4809      	ldr	r0, [pc, #36]	; (80023f4 <HAL_UART_MspInit+0x9c>)
 80023ce:	f000 fe47 	bl	8003060 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80023d2:	2200      	movs	r2, #0
 80023d4:	2100      	movs	r1, #0
 80023d6:	2026      	movs	r0, #38	; 0x26
 80023d8:	f000 fd79 	bl	8002ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80023dc:	2026      	movs	r0, #38	; 0x26
 80023de:	f000 fd92 	bl	8002f06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80023e2:	bf00      	nop
 80023e4:	3728      	adds	r7, #40	; 0x28
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40004400 	.word	0x40004400
 80023f0:	40023800 	.word	0x40023800
 80023f4:	40020000 	.word	0x40020000

080023f8 <Reset_Handler>:
 80023f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002430 <LoopFillZerobss+0x12>
 80023fc:	480d      	ldr	r0, [pc, #52]	; (8002434 <LoopFillZerobss+0x16>)
 80023fe:	490e      	ldr	r1, [pc, #56]	; (8002438 <LoopFillZerobss+0x1a>)
 8002400:	4a0e      	ldr	r2, [pc, #56]	; (800243c <LoopFillZerobss+0x1e>)
 8002402:	2300      	movs	r3, #0
 8002404:	e002      	b.n	800240c <LoopCopyDataInit>

08002406 <CopyDataInit>:
 8002406:	58d4      	ldr	r4, [r2, r3]
 8002408:	50c4      	str	r4, [r0, r3]
 800240a:	3304      	adds	r3, #4

0800240c <LoopCopyDataInit>:
 800240c:	18c4      	adds	r4, r0, r3
 800240e:	428c      	cmp	r4, r1
 8002410:	d3f9      	bcc.n	8002406 <CopyDataInit>
 8002412:	4a0b      	ldr	r2, [pc, #44]	; (8002440 <LoopFillZerobss+0x22>)
 8002414:	4c0b      	ldr	r4, [pc, #44]	; (8002444 <LoopFillZerobss+0x26>)
 8002416:	2300      	movs	r3, #0
 8002418:	e001      	b.n	800241e <LoopFillZerobss>

0800241a <FillZerobss>:
 800241a:	6013      	str	r3, [r2, #0]
 800241c:	3204      	adds	r2, #4

0800241e <LoopFillZerobss>:
 800241e:	42a2      	cmp	r2, r4
 8002420:	d3fb      	bcc.n	800241a <FillZerobss>
 8002422:	f7ff fd75 	bl	8001f10 <SystemInit>
 8002426:	f003 fec7 	bl	80061b8 <__libc_init_array>
 800242a:	f7ff fb35 	bl	8001a98 <main>
 800242e:	4770      	bx	lr
 8002430:	20020000 	.word	0x20020000
 8002434:	20000000 	.word	0x20000000
 8002438:	200001fc 	.word	0x200001fc
 800243c:	0800a884 	.word	0x0800a884
 8002440:	20000200 	.word	0x20000200
 8002444:	20000730 	.word	0x20000730

08002448 <CAN1_RX0_IRQHandler>:
 8002448:	e7fe      	b.n	8002448 <CAN1_RX0_IRQHandler>
	...

0800244c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002450:	4b0e      	ldr	r3, [pc, #56]	; (800248c <HAL_Init+0x40>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a0d      	ldr	r2, [pc, #52]	; (800248c <HAL_Init+0x40>)
 8002456:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800245a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800245c:	4b0b      	ldr	r3, [pc, #44]	; (800248c <HAL_Init+0x40>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a0a      	ldr	r2, [pc, #40]	; (800248c <HAL_Init+0x40>)
 8002462:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002466:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002468:	4b08      	ldr	r3, [pc, #32]	; (800248c <HAL_Init+0x40>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a07      	ldr	r2, [pc, #28]	; (800248c <HAL_Init+0x40>)
 800246e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002472:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002474:	2003      	movs	r0, #3
 8002476:	f000 fd1f 	bl	8002eb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800247a:	2000      	movs	r0, #0
 800247c:	f000 f808 	bl	8002490 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002480:	f7ff fc10 	bl	8001ca4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40023c00 	.word	0x40023c00

08002490 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002498:	4b12      	ldr	r3, [pc, #72]	; (80024e4 <HAL_InitTick+0x54>)
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	4b12      	ldr	r3, [pc, #72]	; (80024e8 <HAL_InitTick+0x58>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	4619      	mov	r1, r3
 80024a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80024aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ae:	4618      	mov	r0, r3
 80024b0:	f000 fd37 	bl	8002f22 <HAL_SYSTICK_Config>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e00e      	b.n	80024dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b0f      	cmp	r3, #15
 80024c2:	d80a      	bhi.n	80024da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024c4:	2200      	movs	r2, #0
 80024c6:	6879      	ldr	r1, [r7, #4]
 80024c8:	f04f 30ff 	mov.w	r0, #4294967295
 80024cc:	f000 fcff 	bl	8002ece <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024d0:	4a06      	ldr	r2, [pc, #24]	; (80024ec <HAL_InitTick+0x5c>)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
 80024d8:	e000      	b.n	80024dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3708      	adds	r7, #8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	2000001c 	.word	0x2000001c
 80024e8:	20000024 	.word	0x20000024
 80024ec:	20000020 	.word	0x20000020

080024f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024f4:	4b06      	ldr	r3, [pc, #24]	; (8002510 <HAL_IncTick+0x20>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	461a      	mov	r2, r3
 80024fa:	4b06      	ldr	r3, [pc, #24]	; (8002514 <HAL_IncTick+0x24>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4413      	add	r3, r2
 8002500:	4a04      	ldr	r2, [pc, #16]	; (8002514 <HAL_IncTick+0x24>)
 8002502:	6013      	str	r3, [r2, #0]
}
 8002504:	bf00      	nop
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	20000024 	.word	0x20000024
 8002514:	2000071c 	.word	0x2000071c

08002518 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  return uwTick;
 800251c:	4b03      	ldr	r3, [pc, #12]	; (800252c <HAL_GetTick+0x14>)
 800251e:	681b      	ldr	r3, [r3, #0]
}
 8002520:	4618      	mov	r0, r3
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	2000071c 	.word	0x2000071c

08002530 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002538:	f7ff ffee 	bl	8002518 <HAL_GetTick>
 800253c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002548:	d005      	beq.n	8002556 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800254a:	4b0a      	ldr	r3, [pc, #40]	; (8002574 <HAL_Delay+0x44>)
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	461a      	mov	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	4413      	add	r3, r2
 8002554:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002556:	bf00      	nop
 8002558:	f7ff ffde 	bl	8002518 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	429a      	cmp	r2, r3
 8002566:	d8f7      	bhi.n	8002558 <HAL_Delay+0x28>
  {
  }
}
 8002568:	bf00      	nop
 800256a:	bf00      	nop
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	20000024 	.word	0x20000024

08002578 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002580:	2300      	movs	r3, #0
 8002582:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e033      	b.n	80025f6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	2b00      	cmp	r3, #0
 8002594:	d109      	bne.n	80025aa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f7ff f940 	bl	800181c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	f003 0310 	and.w	r3, r3, #16
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d118      	bne.n	80025e8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80025be:	f023 0302 	bic.w	r3, r3, #2
 80025c2:	f043 0202 	orr.w	r2, r3, #2
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 fa9e 	bl	8002b0c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	f023 0303 	bic.w	r3, r3, #3
 80025de:	f043 0201 	orr.w	r2, r3, #1
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	641a      	str	r2, [r3, #64]	; 0x40
 80025e6:	e001      	b.n	80025ec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80025f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b084      	sub	sp, #16
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002606:	2300      	movs	r3, #0
 8002608:	60fb      	str	r3, [r7, #12]
 800260a:	2300      	movs	r3, #0
 800260c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b02      	cmp	r3, #2
 800261a:	bf0c      	ite	eq
 800261c:	2301      	moveq	r3, #1
 800261e:	2300      	movne	r3, #0
 8002620:	b2db      	uxtb	r3, r3
 8002622:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f003 0320 	and.w	r3, r3, #32
 800262e:	2b20      	cmp	r3, #32
 8002630:	bf0c      	ite	eq
 8002632:	2301      	moveq	r3, #1
 8002634:	2300      	movne	r3, #0
 8002636:	b2db      	uxtb	r3, r3
 8002638:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d049      	beq.n	80026d4 <HAL_ADC_IRQHandler+0xd6>
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d046      	beq.n	80026d4 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	f003 0310 	and.w	r3, r3, #16
 800264e:	2b00      	cmp	r3, #0
 8002650:	d105      	bne.n	800265e <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d12b      	bne.n	80026c4 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002670:	2b00      	cmp	r3, #0
 8002672:	d127      	bne.n	80026c4 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800267e:	2b00      	cmp	r3, #0
 8002680:	d006      	beq.n	8002690 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800268c:	2b00      	cmp	r3, #0
 800268e:	d119      	bne.n	80026c4 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	685a      	ldr	r2, [r3, #4]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 0220 	bic.w	r2, r2, #32
 800269e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d105      	bne.n	80026c4 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026bc:	f043 0201 	orr.w	r2, r3, #1
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f7ff fadd 	bl	8001c84 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f06f 0212 	mvn.w	r2, #18
 80026d2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0304 	and.w	r3, r3, #4
 80026de:	2b04      	cmp	r3, #4
 80026e0:	bf0c      	ite	eq
 80026e2:	2301      	moveq	r3, #1
 80026e4:	2300      	movne	r3, #0
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026f4:	2b80      	cmp	r3, #128	; 0x80
 80026f6:	bf0c      	ite	eq
 80026f8:	2301      	moveq	r3, #1
 80026fa:	2300      	movne	r3, #0
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d057      	beq.n	80027b6 <HAL_ADC_IRQHandler+0x1b8>
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d054      	beq.n	80027b6 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002710:	f003 0310 	and.w	r3, r3, #16
 8002714:	2b00      	cmp	r3, #0
 8002716:	d105      	bne.n	8002724 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d139      	bne.n	80027a6 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002738:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800273c:	2b00      	cmp	r3, #0
 800273e:	d006      	beq.n	800274e <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800274a:	2b00      	cmp	r3, #0
 800274c:	d12b      	bne.n	80027a6 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002758:	2b00      	cmp	r3, #0
 800275a:	d124      	bne.n	80027a6 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002766:	2b00      	cmp	r3, #0
 8002768:	d11d      	bne.n	80027a6 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800276e:	2b00      	cmp	r3, #0
 8002770:	d119      	bne.n	80027a6 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	685a      	ldr	r2, [r3, #4]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002780:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002796:	2b00      	cmp	r3, #0
 8002798:	d105      	bne.n	80027a6 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	f043 0201 	orr.w	r2, r3, #1
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 faac 	bl	8002d04 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f06f 020c 	mvn.w	r2, #12
 80027b4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	bf0c      	ite	eq
 80027c4:	2301      	moveq	r3, #1
 80027c6:	2300      	movne	r3, #0
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d6:	2b40      	cmp	r3, #64	; 0x40
 80027d8:	bf0c      	ite	eq
 80027da:	2301      	moveq	r3, #1
 80027dc:	2300      	movne	r3, #0
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d017      	beq.n	8002818 <HAL_ADC_IRQHandler+0x21a>
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d014      	beq.n	8002818 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0301 	and.w	r3, r3, #1
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d10d      	bne.n	8002818 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002800:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 f839 	bl	8002880 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f06f 0201 	mvn.w	r2, #1
 8002816:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0320 	and.w	r3, r3, #32
 8002822:	2b20      	cmp	r3, #32
 8002824:	bf0c      	ite	eq
 8002826:	2301      	moveq	r3, #1
 8002828:	2300      	movne	r3, #0
 800282a:	b2db      	uxtb	r3, r3
 800282c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002838:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800283c:	bf0c      	ite	eq
 800283e:	2301      	moveq	r3, #1
 8002840:	2300      	movne	r3, #0
 8002842:	b2db      	uxtb	r3, r3
 8002844:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d015      	beq.n	8002878 <HAL_ADC_IRQHandler+0x27a>
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d012      	beq.n	8002878 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002856:	f043 0202 	orr.w	r2, r3, #2
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f06f 0220 	mvn.w	r2, #32
 8002866:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f000 f813 	bl	8002894 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f06f 0220 	mvn.w	r2, #32
 8002876:	601a      	str	r2, [r3, #0]
  }
}
 8002878:	bf00      	nop
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800289c:	bf00      	nop
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80028b2:	2300      	movs	r3, #0
 80028b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d101      	bne.n	80028c4 <HAL_ADC_ConfigChannel+0x1c>
 80028c0:	2302      	movs	r3, #2
 80028c2:	e113      	b.n	8002aec <HAL_ADC_ConfigChannel+0x244>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2b09      	cmp	r3, #9
 80028d2:	d925      	bls.n	8002920 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68d9      	ldr	r1, [r3, #12]
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	b29b      	uxth	r3, r3
 80028e0:	461a      	mov	r2, r3
 80028e2:	4613      	mov	r3, r2
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	4413      	add	r3, r2
 80028e8:	3b1e      	subs	r3, #30
 80028ea:	2207      	movs	r2, #7
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	43da      	mvns	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	400a      	ands	r2, r1
 80028f8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68d9      	ldr	r1, [r3, #12]
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	b29b      	uxth	r3, r3
 800290a:	4618      	mov	r0, r3
 800290c:	4603      	mov	r3, r0
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	4403      	add	r3, r0
 8002912:	3b1e      	subs	r3, #30
 8002914:	409a      	lsls	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	430a      	orrs	r2, r1
 800291c:	60da      	str	r2, [r3, #12]
 800291e:	e022      	b.n	8002966 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6919      	ldr	r1, [r3, #16]
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	b29b      	uxth	r3, r3
 800292c:	461a      	mov	r2, r3
 800292e:	4613      	mov	r3, r2
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	4413      	add	r3, r2
 8002934:	2207      	movs	r2, #7
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	43da      	mvns	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	400a      	ands	r2, r1
 8002942:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6919      	ldr	r1, [r3, #16]
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	689a      	ldr	r2, [r3, #8]
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	b29b      	uxth	r3, r3
 8002954:	4618      	mov	r0, r3
 8002956:	4603      	mov	r3, r0
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	4403      	add	r3, r0
 800295c:	409a      	lsls	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	430a      	orrs	r2, r1
 8002964:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	2b06      	cmp	r3, #6
 800296c:	d824      	bhi.n	80029b8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685a      	ldr	r2, [r3, #4]
 8002978:	4613      	mov	r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	4413      	add	r3, r2
 800297e:	3b05      	subs	r3, #5
 8002980:	221f      	movs	r2, #31
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	43da      	mvns	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	400a      	ands	r2, r1
 800298e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	b29b      	uxth	r3, r3
 800299c:	4618      	mov	r0, r3
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	4613      	mov	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	4413      	add	r3, r2
 80029a8:	3b05      	subs	r3, #5
 80029aa:	fa00 f203 	lsl.w	r2, r0, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	430a      	orrs	r2, r1
 80029b4:	635a      	str	r2, [r3, #52]	; 0x34
 80029b6:	e04c      	b.n	8002a52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	2b0c      	cmp	r3, #12
 80029be:	d824      	bhi.n	8002a0a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685a      	ldr	r2, [r3, #4]
 80029ca:	4613      	mov	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	4413      	add	r3, r2
 80029d0:	3b23      	subs	r3, #35	; 0x23
 80029d2:	221f      	movs	r2, #31
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	43da      	mvns	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	400a      	ands	r2, r1
 80029e0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	4618      	mov	r0, r3
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685a      	ldr	r2, [r3, #4]
 80029f4:	4613      	mov	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	4413      	add	r3, r2
 80029fa:	3b23      	subs	r3, #35	; 0x23
 80029fc:	fa00 f203 	lsl.w	r2, r0, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	430a      	orrs	r2, r1
 8002a06:	631a      	str	r2, [r3, #48]	; 0x30
 8002a08:	e023      	b.n	8002a52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685a      	ldr	r2, [r3, #4]
 8002a14:	4613      	mov	r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	4413      	add	r3, r2
 8002a1a:	3b41      	subs	r3, #65	; 0x41
 8002a1c:	221f      	movs	r2, #31
 8002a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a22:	43da      	mvns	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	400a      	ands	r2, r1
 8002a2a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	4618      	mov	r0, r3
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685a      	ldr	r2, [r3, #4]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	4413      	add	r3, r2
 8002a44:	3b41      	subs	r3, #65	; 0x41
 8002a46:	fa00 f203 	lsl.w	r2, r0, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a52:	4b29      	ldr	r3, [pc, #164]	; (8002af8 <HAL_ADC_ConfigChannel+0x250>)
 8002a54:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a28      	ldr	r2, [pc, #160]	; (8002afc <HAL_ADC_ConfigChannel+0x254>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d10f      	bne.n	8002a80 <HAL_ADC_ConfigChannel+0x1d8>
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2b12      	cmp	r3, #18
 8002a66:	d10b      	bne.n	8002a80 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a1d      	ldr	r2, [pc, #116]	; (8002afc <HAL_ADC_ConfigChannel+0x254>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d12b      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0x23a>
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a1c      	ldr	r2, [pc, #112]	; (8002b00 <HAL_ADC_ConfigChannel+0x258>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d003      	beq.n	8002a9c <HAL_ADC_ConfigChannel+0x1f4>
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2b11      	cmp	r3, #17
 8002a9a:	d122      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a11      	ldr	r2, [pc, #68]	; (8002b00 <HAL_ADC_ConfigChannel+0x258>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d111      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002abe:	4b11      	ldr	r3, [pc, #68]	; (8002b04 <HAL_ADC_ConfigChannel+0x25c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a11      	ldr	r2, [pc, #68]	; (8002b08 <HAL_ADC_ConfigChannel+0x260>)
 8002ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac8:	0c9a      	lsrs	r2, r3, #18
 8002aca:	4613      	mov	r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	4413      	add	r3, r2
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ad4:	e002      	b.n	8002adc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1f9      	bne.n	8002ad6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3714      	adds	r7, #20
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	40012300 	.word	0x40012300
 8002afc:	40012000 	.word	0x40012000
 8002b00:	10000012 	.word	0x10000012
 8002b04:	2000001c 	.word	0x2000001c
 8002b08:	431bde83 	.word	0x431bde83

08002b0c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b14:	4b79      	ldr	r3, [pc, #484]	; (8002cfc <ADC_Init+0x1f0>)
 8002b16:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	685a      	ldr	r2, [r3, #4]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	431a      	orrs	r2, r3
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	685a      	ldr	r2, [r3, #4]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	6859      	ldr	r1, [r3, #4]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	021a      	lsls	r2, r3, #8
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	685a      	ldr	r2, [r3, #4]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002b64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	6859      	ldr	r1, [r3, #4]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689a      	ldr	r2, [r3, #8]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	430a      	orrs	r2, r1
 8002b76:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689a      	ldr	r2, [r3, #8]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6899      	ldr	r1, [r3, #8]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68da      	ldr	r2, [r3, #12]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	430a      	orrs	r2, r1
 8002b98:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9e:	4a58      	ldr	r2, [pc, #352]	; (8002d00 <ADC_Init+0x1f4>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d022      	beq.n	8002bea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	689a      	ldr	r2, [r3, #8]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002bb2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6899      	ldr	r1, [r3, #8]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	689a      	ldr	r2, [r3, #8]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002bd4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	6899      	ldr	r1, [r3, #8]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	430a      	orrs	r2, r1
 8002be6:	609a      	str	r2, [r3, #8]
 8002be8:	e00f      	b.n	8002c0a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	689a      	ldr	r2, [r3, #8]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002bf8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	689a      	ldr	r2, [r3, #8]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c08:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f022 0202 	bic.w	r2, r2, #2
 8002c18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	6899      	ldr	r1, [r3, #8]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	7e1b      	ldrb	r3, [r3, #24]
 8002c24:	005a      	lsls	r2, r3, #1
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d01b      	beq.n	8002c70 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	685a      	ldr	r2, [r3, #4]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c46:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	685a      	ldr	r2, [r3, #4]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002c56:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6859      	ldr	r1, [r3, #4]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c62:	3b01      	subs	r3, #1
 8002c64:	035a      	lsls	r2, r3, #13
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	605a      	str	r2, [r3, #4]
 8002c6e:	e007      	b.n	8002c80 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	685a      	ldr	r2, [r3, #4]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c7e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002c8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	69db      	ldr	r3, [r3, #28]
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	051a      	lsls	r2, r3, #20
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	689a      	ldr	r2, [r3, #8]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002cb4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	6899      	ldr	r1, [r3, #8]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002cc2:	025a      	lsls	r2, r3, #9
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	689a      	ldr	r2, [r3, #8]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cda:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6899      	ldr	r1, [r3, #8]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	029a      	lsls	r2, r3, #10
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	430a      	orrs	r2, r1
 8002cee:	609a      	str	r2, [r3, #8]
}
 8002cf0:	bf00      	nop
 8002cf2:	3714      	adds	r7, #20
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	40012300 	.word	0x40012300
 8002d00:	0f000001 	.word	0x0f000001

08002d04 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f003 0307 	and.w	r3, r3, #7
 8002d26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d28:	4b0c      	ldr	r3, [pc, #48]	; (8002d5c <__NVIC_SetPriorityGrouping+0x44>)
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d2e:	68ba      	ldr	r2, [r7, #8]
 8002d30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d34:	4013      	ands	r3, r2
 8002d36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d4a:	4a04      	ldr	r2, [pc, #16]	; (8002d5c <__NVIC_SetPriorityGrouping+0x44>)
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	60d3      	str	r3, [r2, #12]
}
 8002d50:	bf00      	nop
 8002d52:	3714      	adds	r7, #20
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr
 8002d5c:	e000ed00 	.word	0xe000ed00

08002d60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d64:	4b04      	ldr	r3, [pc, #16]	; (8002d78 <__NVIC_GetPriorityGrouping+0x18>)
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	0a1b      	lsrs	r3, r3, #8
 8002d6a:	f003 0307 	and.w	r3, r3, #7
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr
 8002d78:	e000ed00 	.word	0xe000ed00

08002d7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	4603      	mov	r3, r0
 8002d84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	db0b      	blt.n	8002da6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d8e:	79fb      	ldrb	r3, [r7, #7]
 8002d90:	f003 021f 	and.w	r2, r3, #31
 8002d94:	4907      	ldr	r1, [pc, #28]	; (8002db4 <__NVIC_EnableIRQ+0x38>)
 8002d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9a:	095b      	lsrs	r3, r3, #5
 8002d9c:	2001      	movs	r0, #1
 8002d9e:	fa00 f202 	lsl.w	r2, r0, r2
 8002da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002da6:	bf00      	nop
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	e000e100 	.word	0xe000e100

08002db8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	6039      	str	r1, [r7, #0]
 8002dc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	db0a      	blt.n	8002de2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	b2da      	uxtb	r2, r3
 8002dd0:	490c      	ldr	r1, [pc, #48]	; (8002e04 <__NVIC_SetPriority+0x4c>)
 8002dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd6:	0112      	lsls	r2, r2, #4
 8002dd8:	b2d2      	uxtb	r2, r2
 8002dda:	440b      	add	r3, r1
 8002ddc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002de0:	e00a      	b.n	8002df8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	b2da      	uxtb	r2, r3
 8002de6:	4908      	ldr	r1, [pc, #32]	; (8002e08 <__NVIC_SetPriority+0x50>)
 8002de8:	79fb      	ldrb	r3, [r7, #7]
 8002dea:	f003 030f 	and.w	r3, r3, #15
 8002dee:	3b04      	subs	r3, #4
 8002df0:	0112      	lsls	r2, r2, #4
 8002df2:	b2d2      	uxtb	r2, r2
 8002df4:	440b      	add	r3, r1
 8002df6:	761a      	strb	r2, [r3, #24]
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	e000e100 	.word	0xe000e100
 8002e08:	e000ed00 	.word	0xe000ed00

08002e0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b089      	sub	sp, #36	; 0x24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f003 0307 	and.w	r3, r3, #7
 8002e1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	f1c3 0307 	rsb	r3, r3, #7
 8002e26:	2b04      	cmp	r3, #4
 8002e28:	bf28      	it	cs
 8002e2a:	2304      	movcs	r3, #4
 8002e2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	3304      	adds	r3, #4
 8002e32:	2b06      	cmp	r3, #6
 8002e34:	d902      	bls.n	8002e3c <NVIC_EncodePriority+0x30>
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	3b03      	subs	r3, #3
 8002e3a:	e000      	b.n	8002e3e <NVIC_EncodePriority+0x32>
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e40:	f04f 32ff 	mov.w	r2, #4294967295
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	43da      	mvns	r2, r3
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	401a      	ands	r2, r3
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e54:	f04f 31ff 	mov.w	r1, #4294967295
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e5e:	43d9      	mvns	r1, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e64:	4313      	orrs	r3, r2
         );
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3724      	adds	r7, #36	; 0x24
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
	...

08002e74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e84:	d301      	bcc.n	8002e8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e86:	2301      	movs	r3, #1
 8002e88:	e00f      	b.n	8002eaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e8a:	4a0a      	ldr	r2, [pc, #40]	; (8002eb4 <SysTick_Config+0x40>)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e92:	210f      	movs	r1, #15
 8002e94:	f04f 30ff 	mov.w	r0, #4294967295
 8002e98:	f7ff ff8e 	bl	8002db8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e9c:	4b05      	ldr	r3, [pc, #20]	; (8002eb4 <SysTick_Config+0x40>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ea2:	4b04      	ldr	r3, [pc, #16]	; (8002eb4 <SysTick_Config+0x40>)
 8002ea4:	2207      	movs	r2, #7
 8002ea6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	e000e010 	.word	0xe000e010

08002eb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f7ff ff29 	bl	8002d18 <__NVIC_SetPriorityGrouping>
}
 8002ec6:	bf00      	nop
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b086      	sub	sp, #24
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	60b9      	str	r1, [r7, #8]
 8002ed8:	607a      	str	r2, [r7, #4]
 8002eda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002edc:	2300      	movs	r3, #0
 8002ede:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ee0:	f7ff ff3e 	bl	8002d60 <__NVIC_GetPriorityGrouping>
 8002ee4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	68b9      	ldr	r1, [r7, #8]
 8002eea:	6978      	ldr	r0, [r7, #20]
 8002eec:	f7ff ff8e 	bl	8002e0c <NVIC_EncodePriority>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ef6:	4611      	mov	r1, r2
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7ff ff5d 	bl	8002db8 <__NVIC_SetPriority>
}
 8002efe:	bf00      	nop
 8002f00:	3718      	adds	r7, #24
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b082      	sub	sp, #8
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff ff31 	bl	8002d7c <__NVIC_EnableIRQ>
}
 8002f1a:	bf00      	nop
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b082      	sub	sp, #8
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f7ff ffa2 	bl	8002e74 <SysTick_Config>
 8002f30:	4603      	mov	r3, r0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b084      	sub	sp, #16
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f46:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002f48:	f7ff fae6 	bl	8002518 <HAL_GetTick>
 8002f4c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d008      	beq.n	8002f6c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2280      	movs	r2, #128	; 0x80
 8002f5e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e052      	b.n	8003012 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f022 0216 	bic.w	r2, r2, #22
 8002f7a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	695a      	ldr	r2, [r3, #20]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f8a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d103      	bne.n	8002f9c <HAL_DMA_Abort+0x62>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d007      	beq.n	8002fac <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 0208 	bic.w	r2, r2, #8
 8002faa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f022 0201 	bic.w	r2, r2, #1
 8002fba:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fbc:	e013      	b.n	8002fe6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fbe:	f7ff faab 	bl	8002518 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b05      	cmp	r3, #5
 8002fca:	d90c      	bls.n	8002fe6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2220      	movs	r2, #32
 8002fd0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2203      	movs	r2, #3
 8002fd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e015      	b.n	8003012 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d1e4      	bne.n	8002fbe <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff8:	223f      	movs	r2, #63	; 0x3f
 8002ffa:	409a      	lsls	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800301a:	b480      	push	{r7}
 800301c:	b083      	sub	sp, #12
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d004      	beq.n	8003038 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2280      	movs	r2, #128	; 0x80
 8003032:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e00c      	b.n	8003052 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2205      	movs	r2, #5
 800303c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 0201 	bic.w	r2, r2, #1
 800304e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
	...

08003060 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003060:	b480      	push	{r7}
 8003062:	b089      	sub	sp, #36	; 0x24
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800306a:	2300      	movs	r3, #0
 800306c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800306e:	2300      	movs	r3, #0
 8003070:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003072:	2300      	movs	r3, #0
 8003074:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003076:	2300      	movs	r3, #0
 8003078:	61fb      	str	r3, [r7, #28]
 800307a:	e165      	b.n	8003348 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800307c:	2201      	movs	r2, #1
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	697a      	ldr	r2, [r7, #20]
 800308c:	4013      	ands	r3, r2
 800308e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	429a      	cmp	r2, r3
 8003096:	f040 8154 	bne.w	8003342 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f003 0303 	and.w	r3, r3, #3
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d005      	beq.n	80030b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d130      	bne.n	8003114 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	2203      	movs	r2, #3
 80030be:	fa02 f303 	lsl.w	r3, r2, r3
 80030c2:	43db      	mvns	r3, r3
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	4013      	ands	r3, r2
 80030c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	68da      	ldr	r2, [r3, #12]
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	fa02 f303 	lsl.w	r3, r2, r3
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	4313      	orrs	r3, r2
 80030da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030e8:	2201      	movs	r2, #1
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	fa02 f303 	lsl.w	r3, r2, r3
 80030f0:	43db      	mvns	r3, r3
 80030f2:	69ba      	ldr	r2, [r7, #24]
 80030f4:	4013      	ands	r3, r2
 80030f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	091b      	lsrs	r3, r3, #4
 80030fe:	f003 0201 	and.w	r2, r3, #1
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	fa02 f303 	lsl.w	r3, r2, r3
 8003108:	69ba      	ldr	r2, [r7, #24]
 800310a:	4313      	orrs	r3, r2
 800310c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f003 0303 	and.w	r3, r3, #3
 800311c:	2b03      	cmp	r3, #3
 800311e:	d017      	beq.n	8003150 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	2203      	movs	r2, #3
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	43db      	mvns	r3, r3
 8003132:	69ba      	ldr	r2, [r7, #24]
 8003134:	4013      	ands	r3, r2
 8003136:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	fa02 f303 	lsl.w	r3, r2, r3
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	4313      	orrs	r3, r2
 8003148:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f003 0303 	and.w	r3, r3, #3
 8003158:	2b02      	cmp	r3, #2
 800315a:	d123      	bne.n	80031a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	08da      	lsrs	r2, r3, #3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	3208      	adds	r2, #8
 8003164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003168:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	f003 0307 	and.w	r3, r3, #7
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	220f      	movs	r2, #15
 8003174:	fa02 f303 	lsl.w	r3, r2, r3
 8003178:	43db      	mvns	r3, r3
 800317a:	69ba      	ldr	r2, [r7, #24]
 800317c:	4013      	ands	r3, r2
 800317e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	691a      	ldr	r2, [r3, #16]
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	f003 0307 	and.w	r3, r3, #7
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	fa02 f303 	lsl.w	r3, r2, r3
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	4313      	orrs	r3, r2
 8003194:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	08da      	lsrs	r2, r3, #3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	3208      	adds	r2, #8
 800319e:	69b9      	ldr	r1, [r7, #24]
 80031a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	2203      	movs	r2, #3
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	43db      	mvns	r3, r3
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	4013      	ands	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f003 0203 	and.w	r2, r3, #3
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f000 80ae 	beq.w	8003342 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031e6:	2300      	movs	r3, #0
 80031e8:	60fb      	str	r3, [r7, #12]
 80031ea:	4b5d      	ldr	r3, [pc, #372]	; (8003360 <HAL_GPIO_Init+0x300>)
 80031ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ee:	4a5c      	ldr	r2, [pc, #368]	; (8003360 <HAL_GPIO_Init+0x300>)
 80031f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031f4:	6453      	str	r3, [r2, #68]	; 0x44
 80031f6:	4b5a      	ldr	r3, [pc, #360]	; (8003360 <HAL_GPIO_Init+0x300>)
 80031f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031fe:	60fb      	str	r3, [r7, #12]
 8003200:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003202:	4a58      	ldr	r2, [pc, #352]	; (8003364 <HAL_GPIO_Init+0x304>)
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	089b      	lsrs	r3, r3, #2
 8003208:	3302      	adds	r3, #2
 800320a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800320e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	f003 0303 	and.w	r3, r3, #3
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	220f      	movs	r2, #15
 800321a:	fa02 f303 	lsl.w	r3, r2, r3
 800321e:	43db      	mvns	r3, r3
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	4013      	ands	r3, r2
 8003224:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a4f      	ldr	r2, [pc, #316]	; (8003368 <HAL_GPIO_Init+0x308>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d025      	beq.n	800327a <HAL_GPIO_Init+0x21a>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a4e      	ldr	r2, [pc, #312]	; (800336c <HAL_GPIO_Init+0x30c>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d01f      	beq.n	8003276 <HAL_GPIO_Init+0x216>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a4d      	ldr	r2, [pc, #308]	; (8003370 <HAL_GPIO_Init+0x310>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d019      	beq.n	8003272 <HAL_GPIO_Init+0x212>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a4c      	ldr	r2, [pc, #304]	; (8003374 <HAL_GPIO_Init+0x314>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d013      	beq.n	800326e <HAL_GPIO_Init+0x20e>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a4b      	ldr	r2, [pc, #300]	; (8003378 <HAL_GPIO_Init+0x318>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d00d      	beq.n	800326a <HAL_GPIO_Init+0x20a>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a4a      	ldr	r2, [pc, #296]	; (800337c <HAL_GPIO_Init+0x31c>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d007      	beq.n	8003266 <HAL_GPIO_Init+0x206>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a49      	ldr	r2, [pc, #292]	; (8003380 <HAL_GPIO_Init+0x320>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d101      	bne.n	8003262 <HAL_GPIO_Init+0x202>
 800325e:	2306      	movs	r3, #6
 8003260:	e00c      	b.n	800327c <HAL_GPIO_Init+0x21c>
 8003262:	2307      	movs	r3, #7
 8003264:	e00a      	b.n	800327c <HAL_GPIO_Init+0x21c>
 8003266:	2305      	movs	r3, #5
 8003268:	e008      	b.n	800327c <HAL_GPIO_Init+0x21c>
 800326a:	2304      	movs	r3, #4
 800326c:	e006      	b.n	800327c <HAL_GPIO_Init+0x21c>
 800326e:	2303      	movs	r3, #3
 8003270:	e004      	b.n	800327c <HAL_GPIO_Init+0x21c>
 8003272:	2302      	movs	r3, #2
 8003274:	e002      	b.n	800327c <HAL_GPIO_Init+0x21c>
 8003276:	2301      	movs	r3, #1
 8003278:	e000      	b.n	800327c <HAL_GPIO_Init+0x21c>
 800327a:	2300      	movs	r3, #0
 800327c:	69fa      	ldr	r2, [r7, #28]
 800327e:	f002 0203 	and.w	r2, r2, #3
 8003282:	0092      	lsls	r2, r2, #2
 8003284:	4093      	lsls	r3, r2
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	4313      	orrs	r3, r2
 800328a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800328c:	4935      	ldr	r1, [pc, #212]	; (8003364 <HAL_GPIO_Init+0x304>)
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	089b      	lsrs	r3, r3, #2
 8003292:	3302      	adds	r3, #2
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800329a:	4b3a      	ldr	r3, [pc, #232]	; (8003384 <HAL_GPIO_Init+0x324>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	43db      	mvns	r3, r3
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	4013      	ands	r3, r2
 80032a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d003      	beq.n	80032be <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032be:	4a31      	ldr	r2, [pc, #196]	; (8003384 <HAL_GPIO_Init+0x324>)
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80032c4:	4b2f      	ldr	r3, [pc, #188]	; (8003384 <HAL_GPIO_Init+0x324>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	43db      	mvns	r3, r3
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	4013      	ands	r3, r2
 80032d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d003      	beq.n	80032e8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032e8:	4a26      	ldr	r2, [pc, #152]	; (8003384 <HAL_GPIO_Init+0x324>)
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032ee:	4b25      	ldr	r3, [pc, #148]	; (8003384 <HAL_GPIO_Init+0x324>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	43db      	mvns	r3, r3
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	4013      	ands	r3, r2
 80032fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d003      	beq.n	8003312 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	4313      	orrs	r3, r2
 8003310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003312:	4a1c      	ldr	r2, [pc, #112]	; (8003384 <HAL_GPIO_Init+0x324>)
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003318:	4b1a      	ldr	r3, [pc, #104]	; (8003384 <HAL_GPIO_Init+0x324>)
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	43db      	mvns	r3, r3
 8003322:	69ba      	ldr	r2, [r7, #24]
 8003324:	4013      	ands	r3, r2
 8003326:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d003      	beq.n	800333c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	4313      	orrs	r3, r2
 800333a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800333c:	4a11      	ldr	r2, [pc, #68]	; (8003384 <HAL_GPIO_Init+0x324>)
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	3301      	adds	r3, #1
 8003346:	61fb      	str	r3, [r7, #28]
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	2b0f      	cmp	r3, #15
 800334c:	f67f ae96 	bls.w	800307c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003350:	bf00      	nop
 8003352:	bf00      	nop
 8003354:	3724      	adds	r7, #36	; 0x24
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	40023800 	.word	0x40023800
 8003364:	40013800 	.word	0x40013800
 8003368:	40020000 	.word	0x40020000
 800336c:	40020400 	.word	0x40020400
 8003370:	40020800 	.word	0x40020800
 8003374:	40020c00 	.word	0x40020c00
 8003378:	40021000 	.word	0x40021000
 800337c:	40021400 	.word	0x40021400
 8003380:	40021800 	.word	0x40021800
 8003384:	40013c00 	.word	0x40013c00

08003388 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	460b      	mov	r3, r1
 8003392:	807b      	strh	r3, [r7, #2]
 8003394:	4613      	mov	r3, r2
 8003396:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003398:	787b      	ldrb	r3, [r7, #1]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d003      	beq.n	80033a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800339e:	887a      	ldrh	r2, [r7, #2]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80033a4:	e003      	b.n	80033ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033a6:	887b      	ldrh	r3, [r7, #2]
 80033a8:	041a      	lsls	r2, r3, #16
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	619a      	str	r2, [r3, #24]
}
 80033ae:	bf00      	nop
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
	...

080033bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d101      	bne.n	80033d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e0cc      	b.n	800356a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033d0:	4b68      	ldr	r3, [pc, #416]	; (8003574 <HAL_RCC_ClockConfig+0x1b8>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 030f 	and.w	r3, r3, #15
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d90c      	bls.n	80033f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033de:	4b65      	ldr	r3, [pc, #404]	; (8003574 <HAL_RCC_ClockConfig+0x1b8>)
 80033e0:	683a      	ldr	r2, [r7, #0]
 80033e2:	b2d2      	uxtb	r2, r2
 80033e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033e6:	4b63      	ldr	r3, [pc, #396]	; (8003574 <HAL_RCC_ClockConfig+0x1b8>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 030f 	and.w	r3, r3, #15
 80033ee:	683a      	ldr	r2, [r7, #0]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d001      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e0b8      	b.n	800356a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0302 	and.w	r3, r3, #2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d020      	beq.n	8003446 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0304 	and.w	r3, r3, #4
 800340c:	2b00      	cmp	r3, #0
 800340e:	d005      	beq.n	800341c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003410:	4b59      	ldr	r3, [pc, #356]	; (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	4a58      	ldr	r2, [pc, #352]	; (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 8003416:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800341a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0308 	and.w	r3, r3, #8
 8003424:	2b00      	cmp	r3, #0
 8003426:	d005      	beq.n	8003434 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003428:	4b53      	ldr	r3, [pc, #332]	; (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	4a52      	ldr	r2, [pc, #328]	; (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 800342e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003432:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003434:	4b50      	ldr	r3, [pc, #320]	; (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	494d      	ldr	r1, [pc, #308]	; (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 8003442:	4313      	orrs	r3, r2
 8003444:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b00      	cmp	r3, #0
 8003450:	d044      	beq.n	80034dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d107      	bne.n	800346a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800345a:	4b47      	ldr	r3, [pc, #284]	; (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d119      	bne.n	800349a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e07f      	b.n	800356a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	2b02      	cmp	r3, #2
 8003470:	d003      	beq.n	800347a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003476:	2b03      	cmp	r3, #3
 8003478:	d107      	bne.n	800348a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800347a:	4b3f      	ldr	r3, [pc, #252]	; (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d109      	bne.n	800349a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e06f      	b.n	800356a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800348a:	4b3b      	ldr	r3, [pc, #236]	; (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e067      	b.n	800356a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800349a:	4b37      	ldr	r3, [pc, #220]	; (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f023 0203 	bic.w	r2, r3, #3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	4934      	ldr	r1, [pc, #208]	; (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034ac:	f7ff f834 	bl	8002518 <HAL_GetTick>
 80034b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034b2:	e00a      	b.n	80034ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034b4:	f7ff f830 	bl	8002518 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e04f      	b.n	800356a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ca:	4b2b      	ldr	r3, [pc, #172]	; (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 020c 	and.w	r2, r3, #12
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	429a      	cmp	r2, r3
 80034da:	d1eb      	bne.n	80034b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034dc:	4b25      	ldr	r3, [pc, #148]	; (8003574 <HAL_RCC_ClockConfig+0x1b8>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 030f 	and.w	r3, r3, #15
 80034e4:	683a      	ldr	r2, [r7, #0]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d20c      	bcs.n	8003504 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ea:	4b22      	ldr	r3, [pc, #136]	; (8003574 <HAL_RCC_ClockConfig+0x1b8>)
 80034ec:	683a      	ldr	r2, [r7, #0]
 80034ee:	b2d2      	uxtb	r2, r2
 80034f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034f2:	4b20      	ldr	r3, [pc, #128]	; (8003574 <HAL_RCC_ClockConfig+0x1b8>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 030f 	and.w	r3, r3, #15
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d001      	beq.n	8003504 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e032      	b.n	800356a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0304 	and.w	r3, r3, #4
 800350c:	2b00      	cmp	r3, #0
 800350e:	d008      	beq.n	8003522 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003510:	4b19      	ldr	r3, [pc, #100]	; (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	4916      	ldr	r1, [pc, #88]	; (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 800351e:	4313      	orrs	r3, r2
 8003520:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0308 	and.w	r3, r3, #8
 800352a:	2b00      	cmp	r3, #0
 800352c:	d009      	beq.n	8003542 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800352e:	4b12      	ldr	r3, [pc, #72]	; (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	490e      	ldr	r1, [pc, #56]	; (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 800353e:	4313      	orrs	r3, r2
 8003540:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003542:	f000 f855 	bl	80035f0 <HAL_RCC_GetSysClockFreq>
 8003546:	4602      	mov	r2, r0
 8003548:	4b0b      	ldr	r3, [pc, #44]	; (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	091b      	lsrs	r3, r3, #4
 800354e:	f003 030f 	and.w	r3, r3, #15
 8003552:	490a      	ldr	r1, [pc, #40]	; (800357c <HAL_RCC_ClockConfig+0x1c0>)
 8003554:	5ccb      	ldrb	r3, [r1, r3]
 8003556:	fa22 f303 	lsr.w	r3, r2, r3
 800355a:	4a09      	ldr	r2, [pc, #36]	; (8003580 <HAL_RCC_ClockConfig+0x1c4>)
 800355c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800355e:	4b09      	ldr	r3, [pc, #36]	; (8003584 <HAL_RCC_ClockConfig+0x1c8>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4618      	mov	r0, r3
 8003564:	f7fe ff94 	bl	8002490 <HAL_InitTick>

  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3710      	adds	r7, #16
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	40023c00 	.word	0x40023c00
 8003578:	40023800 	.word	0x40023800
 800357c:	0800a3ac 	.word	0x0800a3ac
 8003580:	2000001c 	.word	0x2000001c
 8003584:	20000020 	.word	0x20000020

08003588 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800358c:	4b03      	ldr	r3, [pc, #12]	; (800359c <HAL_RCC_GetHCLKFreq+0x14>)
 800358e:	681b      	ldr	r3, [r3, #0]
}
 8003590:	4618      	mov	r0, r3
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	2000001c 	.word	0x2000001c

080035a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80035a4:	f7ff fff0 	bl	8003588 <HAL_RCC_GetHCLKFreq>
 80035a8:	4602      	mov	r2, r0
 80035aa:	4b05      	ldr	r3, [pc, #20]	; (80035c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	0a9b      	lsrs	r3, r3, #10
 80035b0:	f003 0307 	and.w	r3, r3, #7
 80035b4:	4903      	ldr	r1, [pc, #12]	; (80035c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035b6:	5ccb      	ldrb	r3, [r1, r3]
 80035b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035bc:	4618      	mov	r0, r3
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	40023800 	.word	0x40023800
 80035c4:	0800a3bc 	.word	0x0800a3bc

080035c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80035cc:	f7ff ffdc 	bl	8003588 <HAL_RCC_GetHCLKFreq>
 80035d0:	4602      	mov	r2, r0
 80035d2:	4b05      	ldr	r3, [pc, #20]	; (80035e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	0b5b      	lsrs	r3, r3, #13
 80035d8:	f003 0307 	and.w	r3, r3, #7
 80035dc:	4903      	ldr	r1, [pc, #12]	; (80035ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80035de:	5ccb      	ldrb	r3, [r1, r3]
 80035e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	40023800 	.word	0x40023800
 80035ec:	0800a3bc 	.word	0x0800a3bc

080035f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035f4:	b088      	sub	sp, #32
 80035f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80035f8:	2300      	movs	r3, #0
 80035fa:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80035fc:	2300      	movs	r3, #0
 80035fe:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8003600:	2300      	movs	r3, #0
 8003602:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8003604:	2300      	movs	r3, #0
 8003606:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8003608:	2300      	movs	r3, #0
 800360a:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800360c:	4bce      	ldr	r3, [pc, #824]	; (8003948 <HAL_RCC_GetSysClockFreq+0x358>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f003 030c 	and.w	r3, r3, #12
 8003614:	2b0c      	cmp	r3, #12
 8003616:	f200 818d 	bhi.w	8003934 <HAL_RCC_GetSysClockFreq+0x344>
 800361a:	a201      	add	r2, pc, #4	; (adr r2, 8003620 <HAL_RCC_GetSysClockFreq+0x30>)
 800361c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003620:	08003655 	.word	0x08003655
 8003624:	08003935 	.word	0x08003935
 8003628:	08003935 	.word	0x08003935
 800362c:	08003935 	.word	0x08003935
 8003630:	0800365b 	.word	0x0800365b
 8003634:	08003935 	.word	0x08003935
 8003638:	08003935 	.word	0x08003935
 800363c:	08003935 	.word	0x08003935
 8003640:	08003661 	.word	0x08003661
 8003644:	08003935 	.word	0x08003935
 8003648:	08003935 	.word	0x08003935
 800364c:	08003935 	.word	0x08003935
 8003650:	080037d5 	.word	0x080037d5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003654:	4bbd      	ldr	r3, [pc, #756]	; (800394c <HAL_RCC_GetSysClockFreq+0x35c>)
 8003656:	61bb      	str	r3, [r7, #24]
       break;
 8003658:	e16f      	b.n	800393a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800365a:	4bbd      	ldr	r3, [pc, #756]	; (8003950 <HAL_RCC_GetSysClockFreq+0x360>)
 800365c:	61bb      	str	r3, [r7, #24]
      break;
 800365e:	e16c      	b.n	800393a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003660:	4bb9      	ldr	r3, [pc, #740]	; (8003948 <HAL_RCC_GetSysClockFreq+0x358>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003668:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800366a:	4bb7      	ldr	r3, [pc, #732]	; (8003948 <HAL_RCC_GetSysClockFreq+0x358>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d053      	beq.n	800371e <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003676:	4bb4      	ldr	r3, [pc, #720]	; (8003948 <HAL_RCC_GetSysClockFreq+0x358>)
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	099b      	lsrs	r3, r3, #6
 800367c:	461a      	mov	r2, r3
 800367e:	f04f 0300 	mov.w	r3, #0
 8003682:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003686:	f04f 0100 	mov.w	r1, #0
 800368a:	ea02 0400 	and.w	r4, r2, r0
 800368e:	603c      	str	r4, [r7, #0]
 8003690:	400b      	ands	r3, r1
 8003692:	607b      	str	r3, [r7, #4]
 8003694:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003698:	4620      	mov	r0, r4
 800369a:	4629      	mov	r1, r5
 800369c:	f04f 0200 	mov.w	r2, #0
 80036a0:	f04f 0300 	mov.w	r3, #0
 80036a4:	014b      	lsls	r3, r1, #5
 80036a6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80036aa:	0142      	lsls	r2, r0, #5
 80036ac:	4610      	mov	r0, r2
 80036ae:	4619      	mov	r1, r3
 80036b0:	4623      	mov	r3, r4
 80036b2:	1ac0      	subs	r0, r0, r3
 80036b4:	462b      	mov	r3, r5
 80036b6:	eb61 0103 	sbc.w	r1, r1, r3
 80036ba:	f04f 0200 	mov.w	r2, #0
 80036be:	f04f 0300 	mov.w	r3, #0
 80036c2:	018b      	lsls	r3, r1, #6
 80036c4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80036c8:	0182      	lsls	r2, r0, #6
 80036ca:	1a12      	subs	r2, r2, r0
 80036cc:	eb63 0301 	sbc.w	r3, r3, r1
 80036d0:	f04f 0000 	mov.w	r0, #0
 80036d4:	f04f 0100 	mov.w	r1, #0
 80036d8:	00d9      	lsls	r1, r3, #3
 80036da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036de:	00d0      	lsls	r0, r2, #3
 80036e0:	4602      	mov	r2, r0
 80036e2:	460b      	mov	r3, r1
 80036e4:	4621      	mov	r1, r4
 80036e6:	1852      	adds	r2, r2, r1
 80036e8:	4629      	mov	r1, r5
 80036ea:	eb43 0101 	adc.w	r1, r3, r1
 80036ee:	460b      	mov	r3, r1
 80036f0:	f04f 0000 	mov.w	r0, #0
 80036f4:	f04f 0100 	mov.w	r1, #0
 80036f8:	0259      	lsls	r1, r3, #9
 80036fa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80036fe:	0250      	lsls	r0, r2, #9
 8003700:	4602      	mov	r2, r0
 8003702:	460b      	mov	r3, r1
 8003704:	4610      	mov	r0, r2
 8003706:	4619      	mov	r1, r3
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	461a      	mov	r2, r3
 800370c:	f04f 0300 	mov.w	r3, #0
 8003710:	f7fd fada 	bl	8000cc8 <__aeabi_uldivmod>
 8003714:	4602      	mov	r2, r0
 8003716:	460b      	mov	r3, r1
 8003718:	4613      	mov	r3, r2
 800371a:	61fb      	str	r3, [r7, #28]
 800371c:	e04c      	b.n	80037b8 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800371e:	4b8a      	ldr	r3, [pc, #552]	; (8003948 <HAL_RCC_GetSysClockFreq+0x358>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	099b      	lsrs	r3, r3, #6
 8003724:	461a      	mov	r2, r3
 8003726:	f04f 0300 	mov.w	r3, #0
 800372a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800372e:	f04f 0100 	mov.w	r1, #0
 8003732:	ea02 0a00 	and.w	sl, r2, r0
 8003736:	ea03 0b01 	and.w	fp, r3, r1
 800373a:	4650      	mov	r0, sl
 800373c:	4659      	mov	r1, fp
 800373e:	f04f 0200 	mov.w	r2, #0
 8003742:	f04f 0300 	mov.w	r3, #0
 8003746:	014b      	lsls	r3, r1, #5
 8003748:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800374c:	0142      	lsls	r2, r0, #5
 800374e:	4610      	mov	r0, r2
 8003750:	4619      	mov	r1, r3
 8003752:	ebb0 000a 	subs.w	r0, r0, sl
 8003756:	eb61 010b 	sbc.w	r1, r1, fp
 800375a:	f04f 0200 	mov.w	r2, #0
 800375e:	f04f 0300 	mov.w	r3, #0
 8003762:	018b      	lsls	r3, r1, #6
 8003764:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003768:	0182      	lsls	r2, r0, #6
 800376a:	1a12      	subs	r2, r2, r0
 800376c:	eb63 0301 	sbc.w	r3, r3, r1
 8003770:	f04f 0000 	mov.w	r0, #0
 8003774:	f04f 0100 	mov.w	r1, #0
 8003778:	00d9      	lsls	r1, r3, #3
 800377a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800377e:	00d0      	lsls	r0, r2, #3
 8003780:	4602      	mov	r2, r0
 8003782:	460b      	mov	r3, r1
 8003784:	eb12 020a 	adds.w	r2, r2, sl
 8003788:	eb43 030b 	adc.w	r3, r3, fp
 800378c:	f04f 0000 	mov.w	r0, #0
 8003790:	f04f 0100 	mov.w	r1, #0
 8003794:	0299      	lsls	r1, r3, #10
 8003796:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800379a:	0290      	lsls	r0, r2, #10
 800379c:	4602      	mov	r2, r0
 800379e:	460b      	mov	r3, r1
 80037a0:	4610      	mov	r0, r2
 80037a2:	4619      	mov	r1, r3
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	461a      	mov	r2, r3
 80037a8:	f04f 0300 	mov.w	r3, #0
 80037ac:	f7fd fa8c 	bl	8000cc8 <__aeabi_uldivmod>
 80037b0:	4602      	mov	r2, r0
 80037b2:	460b      	mov	r3, r1
 80037b4:	4613      	mov	r3, r2
 80037b6:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037b8:	4b63      	ldr	r3, [pc, #396]	; (8003948 <HAL_RCC_GetSysClockFreq+0x358>)
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	0c1b      	lsrs	r3, r3, #16
 80037be:	f003 0303 	and.w	r3, r3, #3
 80037c2:	3301      	adds	r3, #1
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80037c8:	69fa      	ldr	r2, [r7, #28]
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d0:	61bb      	str	r3, [r7, #24]
      break;
 80037d2:	e0b2      	b.n	800393a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037d4:	4b5c      	ldr	r3, [pc, #368]	; (8003948 <HAL_RCC_GetSysClockFreq+0x358>)
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037dc:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037de:	4b5a      	ldr	r3, [pc, #360]	; (8003948 <HAL_RCC_GetSysClockFreq+0x358>)
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d04d      	beq.n	8003886 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037ea:	4b57      	ldr	r3, [pc, #348]	; (8003948 <HAL_RCC_GetSysClockFreq+0x358>)
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	099b      	lsrs	r3, r3, #6
 80037f0:	461a      	mov	r2, r3
 80037f2:	f04f 0300 	mov.w	r3, #0
 80037f6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80037fa:	f04f 0100 	mov.w	r1, #0
 80037fe:	ea02 0800 	and.w	r8, r2, r0
 8003802:	ea03 0901 	and.w	r9, r3, r1
 8003806:	4640      	mov	r0, r8
 8003808:	4649      	mov	r1, r9
 800380a:	f04f 0200 	mov.w	r2, #0
 800380e:	f04f 0300 	mov.w	r3, #0
 8003812:	014b      	lsls	r3, r1, #5
 8003814:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003818:	0142      	lsls	r2, r0, #5
 800381a:	4610      	mov	r0, r2
 800381c:	4619      	mov	r1, r3
 800381e:	ebb0 0008 	subs.w	r0, r0, r8
 8003822:	eb61 0109 	sbc.w	r1, r1, r9
 8003826:	f04f 0200 	mov.w	r2, #0
 800382a:	f04f 0300 	mov.w	r3, #0
 800382e:	018b      	lsls	r3, r1, #6
 8003830:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003834:	0182      	lsls	r2, r0, #6
 8003836:	1a12      	subs	r2, r2, r0
 8003838:	eb63 0301 	sbc.w	r3, r3, r1
 800383c:	f04f 0000 	mov.w	r0, #0
 8003840:	f04f 0100 	mov.w	r1, #0
 8003844:	00d9      	lsls	r1, r3, #3
 8003846:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800384a:	00d0      	lsls	r0, r2, #3
 800384c:	4602      	mov	r2, r0
 800384e:	460b      	mov	r3, r1
 8003850:	eb12 0208 	adds.w	r2, r2, r8
 8003854:	eb43 0309 	adc.w	r3, r3, r9
 8003858:	f04f 0000 	mov.w	r0, #0
 800385c:	f04f 0100 	mov.w	r1, #0
 8003860:	0259      	lsls	r1, r3, #9
 8003862:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003866:	0250      	lsls	r0, r2, #9
 8003868:	4602      	mov	r2, r0
 800386a:	460b      	mov	r3, r1
 800386c:	4610      	mov	r0, r2
 800386e:	4619      	mov	r1, r3
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	461a      	mov	r2, r3
 8003874:	f04f 0300 	mov.w	r3, #0
 8003878:	f7fd fa26 	bl	8000cc8 <__aeabi_uldivmod>
 800387c:	4602      	mov	r2, r0
 800387e:	460b      	mov	r3, r1
 8003880:	4613      	mov	r3, r2
 8003882:	61fb      	str	r3, [r7, #28]
 8003884:	e04a      	b.n	800391c <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003886:	4b30      	ldr	r3, [pc, #192]	; (8003948 <HAL_RCC_GetSysClockFreq+0x358>)
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	099b      	lsrs	r3, r3, #6
 800388c:	461a      	mov	r2, r3
 800388e:	f04f 0300 	mov.w	r3, #0
 8003892:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003896:	f04f 0100 	mov.w	r1, #0
 800389a:	ea02 0400 	and.w	r4, r2, r0
 800389e:	ea03 0501 	and.w	r5, r3, r1
 80038a2:	4620      	mov	r0, r4
 80038a4:	4629      	mov	r1, r5
 80038a6:	f04f 0200 	mov.w	r2, #0
 80038aa:	f04f 0300 	mov.w	r3, #0
 80038ae:	014b      	lsls	r3, r1, #5
 80038b0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80038b4:	0142      	lsls	r2, r0, #5
 80038b6:	4610      	mov	r0, r2
 80038b8:	4619      	mov	r1, r3
 80038ba:	1b00      	subs	r0, r0, r4
 80038bc:	eb61 0105 	sbc.w	r1, r1, r5
 80038c0:	f04f 0200 	mov.w	r2, #0
 80038c4:	f04f 0300 	mov.w	r3, #0
 80038c8:	018b      	lsls	r3, r1, #6
 80038ca:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80038ce:	0182      	lsls	r2, r0, #6
 80038d0:	1a12      	subs	r2, r2, r0
 80038d2:	eb63 0301 	sbc.w	r3, r3, r1
 80038d6:	f04f 0000 	mov.w	r0, #0
 80038da:	f04f 0100 	mov.w	r1, #0
 80038de:	00d9      	lsls	r1, r3, #3
 80038e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80038e4:	00d0      	lsls	r0, r2, #3
 80038e6:	4602      	mov	r2, r0
 80038e8:	460b      	mov	r3, r1
 80038ea:	1912      	adds	r2, r2, r4
 80038ec:	eb45 0303 	adc.w	r3, r5, r3
 80038f0:	f04f 0000 	mov.w	r0, #0
 80038f4:	f04f 0100 	mov.w	r1, #0
 80038f8:	0299      	lsls	r1, r3, #10
 80038fa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80038fe:	0290      	lsls	r0, r2, #10
 8003900:	4602      	mov	r2, r0
 8003902:	460b      	mov	r3, r1
 8003904:	4610      	mov	r0, r2
 8003906:	4619      	mov	r1, r3
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	461a      	mov	r2, r3
 800390c:	f04f 0300 	mov.w	r3, #0
 8003910:	f7fd f9da 	bl	8000cc8 <__aeabi_uldivmod>
 8003914:	4602      	mov	r2, r0
 8003916:	460b      	mov	r3, r1
 8003918:	4613      	mov	r3, r2
 800391a:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800391c:	4b0a      	ldr	r3, [pc, #40]	; (8003948 <HAL_RCC_GetSysClockFreq+0x358>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	0f1b      	lsrs	r3, r3, #28
 8003922:	f003 0307 	and.w	r3, r3, #7
 8003926:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8003928:	69fa      	ldr	r2, [r7, #28]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003930:	61bb      	str	r3, [r7, #24]
      break;
 8003932:	e002      	b.n	800393a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003934:	4b05      	ldr	r3, [pc, #20]	; (800394c <HAL_RCC_GetSysClockFreq+0x35c>)
 8003936:	61bb      	str	r3, [r7, #24]
      break;
 8003938:	bf00      	nop
    }
  }
  return sysclockfreq;
 800393a:	69bb      	ldr	r3, [r7, #24]
}
 800393c:	4618      	mov	r0, r3
 800393e:	3720      	adds	r7, #32
 8003940:	46bd      	mov	sp, r7
 8003942:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003946:	bf00      	nop
 8003948:	40023800 	.word	0x40023800
 800394c:	00f42400 	.word	0x00f42400
 8003950:	007a1200 	.word	0x007a1200

08003954 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e28d      	b.n	8003e82 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b00      	cmp	r3, #0
 8003970:	f000 8083 	beq.w	8003a7a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003974:	4b94      	ldr	r3, [pc, #592]	; (8003bc8 <HAL_RCC_OscConfig+0x274>)
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f003 030c 	and.w	r3, r3, #12
 800397c:	2b04      	cmp	r3, #4
 800397e:	d019      	beq.n	80039b4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003980:	4b91      	ldr	r3, [pc, #580]	; (8003bc8 <HAL_RCC_OscConfig+0x274>)
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003988:	2b08      	cmp	r3, #8
 800398a:	d106      	bne.n	800399a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800398c:	4b8e      	ldr	r3, [pc, #568]	; (8003bc8 <HAL_RCC_OscConfig+0x274>)
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003994:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003998:	d00c      	beq.n	80039b4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800399a:	4b8b      	ldr	r3, [pc, #556]	; (8003bc8 <HAL_RCC_OscConfig+0x274>)
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80039a2:	2b0c      	cmp	r3, #12
 80039a4:	d112      	bne.n	80039cc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039a6:	4b88      	ldr	r3, [pc, #544]	; (8003bc8 <HAL_RCC_OscConfig+0x274>)
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039b2:	d10b      	bne.n	80039cc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039b4:	4b84      	ldr	r3, [pc, #528]	; (8003bc8 <HAL_RCC_OscConfig+0x274>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d05b      	beq.n	8003a78 <HAL_RCC_OscConfig+0x124>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d157      	bne.n	8003a78 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e25a      	b.n	8003e82 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039d4:	d106      	bne.n	80039e4 <HAL_RCC_OscConfig+0x90>
 80039d6:	4b7c      	ldr	r3, [pc, #496]	; (8003bc8 <HAL_RCC_OscConfig+0x274>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a7b      	ldr	r2, [pc, #492]	; (8003bc8 <HAL_RCC_OscConfig+0x274>)
 80039dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039e0:	6013      	str	r3, [r2, #0]
 80039e2:	e01d      	b.n	8003a20 <HAL_RCC_OscConfig+0xcc>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039ec:	d10c      	bne.n	8003a08 <HAL_RCC_OscConfig+0xb4>
 80039ee:	4b76      	ldr	r3, [pc, #472]	; (8003bc8 <HAL_RCC_OscConfig+0x274>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a75      	ldr	r2, [pc, #468]	; (8003bc8 <HAL_RCC_OscConfig+0x274>)
 80039f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039f8:	6013      	str	r3, [r2, #0]
 80039fa:	4b73      	ldr	r3, [pc, #460]	; (8003bc8 <HAL_RCC_OscConfig+0x274>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a72      	ldr	r2, [pc, #456]	; (8003bc8 <HAL_RCC_OscConfig+0x274>)
 8003a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a04:	6013      	str	r3, [r2, #0]
 8003a06:	e00b      	b.n	8003a20 <HAL_RCC_OscConfig+0xcc>
 8003a08:	4b6f      	ldr	r3, [pc, #444]	; (8003bc8 <HAL_RCC_OscConfig+0x274>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a6e      	ldr	r2, [pc, #440]	; (8003bc8 <HAL_RCC_OscConfig+0x274>)
 8003a0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a12:	6013      	str	r3, [r2, #0]
 8003a14:	4b6c      	ldr	r3, [pc, #432]	; (8003bc8 <HAL_RCC_OscConfig+0x274>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a6b      	ldr	r2, [pc, #428]	; (8003bc8 <HAL_RCC_OscConfig+0x274>)
 8003a1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d013      	beq.n	8003a50 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a28:	f7fe fd76 	bl	8002518 <HAL_GetTick>
 8003a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a2e:	e008      	b.n	8003a42 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a30:	f7fe fd72 	bl	8002518 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b64      	cmp	r3, #100	; 0x64
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e21f      	b.n	8003e82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a42:	4b61      	ldr	r3, [pc, #388]	; (8003bc8 <HAL_RCC_OscConfig+0x274>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d0f0      	beq.n	8003a30 <HAL_RCC_OscConfig+0xdc>
 8003a4e:	e014      	b.n	8003a7a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a50:	f7fe fd62 	bl	8002518 <HAL_GetTick>
 8003a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a56:	e008      	b.n	8003a6a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a58:	f7fe fd5e 	bl	8002518 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b64      	cmp	r3, #100	; 0x64
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e20b      	b.n	8003e82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a6a:	4b57      	ldr	r3, [pc, #348]	; (8003bc8 <HAL_RCC_OscConfig+0x274>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1f0      	bne.n	8003a58 <HAL_RCC_OscConfig+0x104>
 8003a76:	e000      	b.n	8003a7a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d06f      	beq.n	8003b66 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003a86:	4b50      	ldr	r3, [pc, #320]	; (8003bc8 <HAL_RCC_OscConfig+0x274>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f003 030c 	and.w	r3, r3, #12
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d017      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a92:	4b4d      	ldr	r3, [pc, #308]	; (8003bc8 <HAL_RCC_OscConfig+0x274>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003a9a:	2b08      	cmp	r3, #8
 8003a9c:	d105      	bne.n	8003aaa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a9e:	4b4a      	ldr	r3, [pc, #296]	; (8003bc8 <HAL_RCC_OscConfig+0x274>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00b      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003aaa:	4b47      	ldr	r3, [pc, #284]	; (8003bc8 <HAL_RCC_OscConfig+0x274>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003ab2:	2b0c      	cmp	r3, #12
 8003ab4:	d11c      	bne.n	8003af0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ab6:	4b44      	ldr	r3, [pc, #272]	; (8003bc8 <HAL_RCC_OscConfig+0x274>)
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d116      	bne.n	8003af0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ac2:	4b41      	ldr	r3, [pc, #260]	; (8003bc8 <HAL_RCC_OscConfig+0x274>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d005      	beq.n	8003ada <HAL_RCC_OscConfig+0x186>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d001      	beq.n	8003ada <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e1d3      	b.n	8003e82 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ada:	4b3b      	ldr	r3, [pc, #236]	; (8003bc8 <HAL_RCC_OscConfig+0x274>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	4937      	ldr	r1, [pc, #220]	; (8003bc8 <HAL_RCC_OscConfig+0x274>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aee:	e03a      	b.n	8003b66 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d020      	beq.n	8003b3a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003af8:	4b34      	ldr	r3, [pc, #208]	; (8003bcc <HAL_RCC_OscConfig+0x278>)
 8003afa:	2201      	movs	r2, #1
 8003afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003afe:	f7fe fd0b 	bl	8002518 <HAL_GetTick>
 8003b02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b04:	e008      	b.n	8003b18 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b06:	f7fe fd07 	bl	8002518 <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d901      	bls.n	8003b18 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e1b4      	b.n	8003e82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b18:	4b2b      	ldr	r3, [pc, #172]	; (8003bc8 <HAL_RCC_OscConfig+0x274>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0302 	and.w	r3, r3, #2
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d0f0      	beq.n	8003b06 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b24:	4b28      	ldr	r3, [pc, #160]	; (8003bc8 <HAL_RCC_OscConfig+0x274>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	00db      	lsls	r3, r3, #3
 8003b32:	4925      	ldr	r1, [pc, #148]	; (8003bc8 <HAL_RCC_OscConfig+0x274>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	600b      	str	r3, [r1, #0]
 8003b38:	e015      	b.n	8003b66 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b3a:	4b24      	ldr	r3, [pc, #144]	; (8003bcc <HAL_RCC_OscConfig+0x278>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b40:	f7fe fcea 	bl	8002518 <HAL_GetTick>
 8003b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b46:	e008      	b.n	8003b5a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b48:	f7fe fce6 	bl	8002518 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e193      	b.n	8003e82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b5a:	4b1b      	ldr	r3, [pc, #108]	; (8003bc8 <HAL_RCC_OscConfig+0x274>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1f0      	bne.n	8003b48 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0308 	and.w	r3, r3, #8
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d036      	beq.n	8003be0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d016      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b7a:	4b15      	ldr	r3, [pc, #84]	; (8003bd0 <HAL_RCC_OscConfig+0x27c>)
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b80:	f7fe fcca 	bl	8002518 <HAL_GetTick>
 8003b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b86:	e008      	b.n	8003b9a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b88:	f7fe fcc6 	bl	8002518 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e173      	b.n	8003e82 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b9a:	4b0b      	ldr	r3, [pc, #44]	; (8003bc8 <HAL_RCC_OscConfig+0x274>)
 8003b9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b9e:	f003 0302 	and.w	r3, r3, #2
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d0f0      	beq.n	8003b88 <HAL_RCC_OscConfig+0x234>
 8003ba6:	e01b      	b.n	8003be0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ba8:	4b09      	ldr	r3, [pc, #36]	; (8003bd0 <HAL_RCC_OscConfig+0x27c>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bae:	f7fe fcb3 	bl	8002518 <HAL_GetTick>
 8003bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bb4:	e00e      	b.n	8003bd4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bb6:	f7fe fcaf 	bl	8002518 <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d907      	bls.n	8003bd4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e15c      	b.n	8003e82 <HAL_RCC_OscConfig+0x52e>
 8003bc8:	40023800 	.word	0x40023800
 8003bcc:	42470000 	.word	0x42470000
 8003bd0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bd4:	4b8a      	ldr	r3, [pc, #552]	; (8003e00 <HAL_RCC_OscConfig+0x4ac>)
 8003bd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bd8:	f003 0302 	and.w	r3, r3, #2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d1ea      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0304 	and.w	r3, r3, #4
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f000 8097 	beq.w	8003d1c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bf2:	4b83      	ldr	r3, [pc, #524]	; (8003e00 <HAL_RCC_OscConfig+0x4ac>)
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d10f      	bne.n	8003c1e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bfe:	2300      	movs	r3, #0
 8003c00:	60bb      	str	r3, [r7, #8]
 8003c02:	4b7f      	ldr	r3, [pc, #508]	; (8003e00 <HAL_RCC_OscConfig+0x4ac>)
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	4a7e      	ldr	r2, [pc, #504]	; (8003e00 <HAL_RCC_OscConfig+0x4ac>)
 8003c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c0e:	4b7c      	ldr	r3, [pc, #496]	; (8003e00 <HAL_RCC_OscConfig+0x4ac>)
 8003c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c16:	60bb      	str	r3, [r7, #8]
 8003c18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c1e:	4b79      	ldr	r3, [pc, #484]	; (8003e04 <HAL_RCC_OscConfig+0x4b0>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d118      	bne.n	8003c5c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c2a:	4b76      	ldr	r3, [pc, #472]	; (8003e04 <HAL_RCC_OscConfig+0x4b0>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a75      	ldr	r2, [pc, #468]	; (8003e04 <HAL_RCC_OscConfig+0x4b0>)
 8003c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c36:	f7fe fc6f 	bl	8002518 <HAL_GetTick>
 8003c3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c3c:	e008      	b.n	8003c50 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c3e:	f7fe fc6b 	bl	8002518 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d901      	bls.n	8003c50 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e118      	b.n	8003e82 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c50:	4b6c      	ldr	r3, [pc, #432]	; (8003e04 <HAL_RCC_OscConfig+0x4b0>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d0f0      	beq.n	8003c3e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d106      	bne.n	8003c72 <HAL_RCC_OscConfig+0x31e>
 8003c64:	4b66      	ldr	r3, [pc, #408]	; (8003e00 <HAL_RCC_OscConfig+0x4ac>)
 8003c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c68:	4a65      	ldr	r2, [pc, #404]	; (8003e00 <HAL_RCC_OscConfig+0x4ac>)
 8003c6a:	f043 0301 	orr.w	r3, r3, #1
 8003c6e:	6713      	str	r3, [r2, #112]	; 0x70
 8003c70:	e01c      	b.n	8003cac <HAL_RCC_OscConfig+0x358>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	2b05      	cmp	r3, #5
 8003c78:	d10c      	bne.n	8003c94 <HAL_RCC_OscConfig+0x340>
 8003c7a:	4b61      	ldr	r3, [pc, #388]	; (8003e00 <HAL_RCC_OscConfig+0x4ac>)
 8003c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7e:	4a60      	ldr	r2, [pc, #384]	; (8003e00 <HAL_RCC_OscConfig+0x4ac>)
 8003c80:	f043 0304 	orr.w	r3, r3, #4
 8003c84:	6713      	str	r3, [r2, #112]	; 0x70
 8003c86:	4b5e      	ldr	r3, [pc, #376]	; (8003e00 <HAL_RCC_OscConfig+0x4ac>)
 8003c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c8a:	4a5d      	ldr	r2, [pc, #372]	; (8003e00 <HAL_RCC_OscConfig+0x4ac>)
 8003c8c:	f043 0301 	orr.w	r3, r3, #1
 8003c90:	6713      	str	r3, [r2, #112]	; 0x70
 8003c92:	e00b      	b.n	8003cac <HAL_RCC_OscConfig+0x358>
 8003c94:	4b5a      	ldr	r3, [pc, #360]	; (8003e00 <HAL_RCC_OscConfig+0x4ac>)
 8003c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c98:	4a59      	ldr	r2, [pc, #356]	; (8003e00 <HAL_RCC_OscConfig+0x4ac>)
 8003c9a:	f023 0301 	bic.w	r3, r3, #1
 8003c9e:	6713      	str	r3, [r2, #112]	; 0x70
 8003ca0:	4b57      	ldr	r3, [pc, #348]	; (8003e00 <HAL_RCC_OscConfig+0x4ac>)
 8003ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca4:	4a56      	ldr	r2, [pc, #344]	; (8003e00 <HAL_RCC_OscConfig+0x4ac>)
 8003ca6:	f023 0304 	bic.w	r3, r3, #4
 8003caa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d015      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb4:	f7fe fc30 	bl	8002518 <HAL_GetTick>
 8003cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cba:	e00a      	b.n	8003cd2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cbc:	f7fe fc2c 	bl	8002518 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e0d7      	b.n	8003e82 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cd2:	4b4b      	ldr	r3, [pc, #300]	; (8003e00 <HAL_RCC_OscConfig+0x4ac>)
 8003cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d0ee      	beq.n	8003cbc <HAL_RCC_OscConfig+0x368>
 8003cde:	e014      	b.n	8003d0a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ce0:	f7fe fc1a 	bl	8002518 <HAL_GetTick>
 8003ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ce6:	e00a      	b.n	8003cfe <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ce8:	f7fe fc16 	bl	8002518 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e0c1      	b.n	8003e82 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cfe:	4b40      	ldr	r3, [pc, #256]	; (8003e00 <HAL_RCC_OscConfig+0x4ac>)
 8003d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1ee      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d0a:	7dfb      	ldrb	r3, [r7, #23]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d105      	bne.n	8003d1c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d10:	4b3b      	ldr	r3, [pc, #236]	; (8003e00 <HAL_RCC_OscConfig+0x4ac>)
 8003d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d14:	4a3a      	ldr	r2, [pc, #232]	; (8003e00 <HAL_RCC_OscConfig+0x4ac>)
 8003d16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d1a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	699b      	ldr	r3, [r3, #24]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f000 80ad 	beq.w	8003e80 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d26:	4b36      	ldr	r3, [pc, #216]	; (8003e00 <HAL_RCC_OscConfig+0x4ac>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f003 030c 	and.w	r3, r3, #12
 8003d2e:	2b08      	cmp	r3, #8
 8003d30:	d060      	beq.n	8003df4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d145      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d3a:	4b33      	ldr	r3, [pc, #204]	; (8003e08 <HAL_RCC_OscConfig+0x4b4>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d40:	f7fe fbea 	bl	8002518 <HAL_GetTick>
 8003d44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d46:	e008      	b.n	8003d5a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d48:	f7fe fbe6 	bl	8002518 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e093      	b.n	8003e82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d5a:	4b29      	ldr	r3, [pc, #164]	; (8003e00 <HAL_RCC_OscConfig+0x4ac>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1f0      	bne.n	8003d48 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	69da      	ldr	r2, [r3, #28]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d74:	019b      	lsls	r3, r3, #6
 8003d76:	431a      	orrs	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d7c:	085b      	lsrs	r3, r3, #1
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	041b      	lsls	r3, r3, #16
 8003d82:	431a      	orrs	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d88:	061b      	lsls	r3, r3, #24
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d90:	071b      	lsls	r3, r3, #28
 8003d92:	491b      	ldr	r1, [pc, #108]	; (8003e00 <HAL_RCC_OscConfig+0x4ac>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d98:	4b1b      	ldr	r3, [pc, #108]	; (8003e08 <HAL_RCC_OscConfig+0x4b4>)
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d9e:	f7fe fbbb 	bl	8002518 <HAL_GetTick>
 8003da2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003da4:	e008      	b.n	8003db8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003da6:	f7fe fbb7 	bl	8002518 <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d901      	bls.n	8003db8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e064      	b.n	8003e82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003db8:	4b11      	ldr	r3, [pc, #68]	; (8003e00 <HAL_RCC_OscConfig+0x4ac>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d0f0      	beq.n	8003da6 <HAL_RCC_OscConfig+0x452>
 8003dc4:	e05c      	b.n	8003e80 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dc6:	4b10      	ldr	r3, [pc, #64]	; (8003e08 <HAL_RCC_OscConfig+0x4b4>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dcc:	f7fe fba4 	bl	8002518 <HAL_GetTick>
 8003dd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dd2:	e008      	b.n	8003de6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dd4:	f7fe fba0 	bl	8002518 <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d901      	bls.n	8003de6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e04d      	b.n	8003e82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003de6:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <HAL_RCC_OscConfig+0x4ac>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1f0      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x480>
 8003df2:	e045      	b.n	8003e80 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d107      	bne.n	8003e0c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e040      	b.n	8003e82 <HAL_RCC_OscConfig+0x52e>
 8003e00:	40023800 	.word	0x40023800
 8003e04:	40007000 	.word	0x40007000
 8003e08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e0c:	4b1f      	ldr	r3, [pc, #124]	; (8003e8c <HAL_RCC_OscConfig+0x538>)
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d030      	beq.n	8003e7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d129      	bne.n	8003e7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d122      	bne.n	8003e7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d119      	bne.n	8003e7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e52:	085b      	lsrs	r3, r3, #1
 8003e54:	3b01      	subs	r3, #1
 8003e56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d10f      	bne.n	8003e7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d107      	bne.n	8003e7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e76:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d001      	beq.n	8003e80 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e000      	b.n	8003e82 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3718      	adds	r7, #24
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	40023800 	.word	0x40023800

08003e90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d101      	bne.n	8003ea2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e041      	b.n	8003f26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d106      	bne.n	8003ebc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f7fe f966 	bl	8002188 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2202      	movs	r2, #2
 8003ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	3304      	adds	r3, #4
 8003ecc:	4619      	mov	r1, r3
 8003ece:	4610      	mov	r0, r2
 8003ed0:	f000 fdae 	bl	8004a30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3708      	adds	r7, #8
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
	...

08003f30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b085      	sub	sp, #20
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d001      	beq.n	8003f48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e04e      	b.n	8003fe6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68da      	ldr	r2, [r3, #12]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f042 0201 	orr.w	r2, r2, #1
 8003f5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a23      	ldr	r2, [pc, #140]	; (8003ff4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d022      	beq.n	8003fb0 <HAL_TIM_Base_Start_IT+0x80>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f72:	d01d      	beq.n	8003fb0 <HAL_TIM_Base_Start_IT+0x80>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a1f      	ldr	r2, [pc, #124]	; (8003ff8 <HAL_TIM_Base_Start_IT+0xc8>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d018      	beq.n	8003fb0 <HAL_TIM_Base_Start_IT+0x80>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a1e      	ldr	r2, [pc, #120]	; (8003ffc <HAL_TIM_Base_Start_IT+0xcc>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d013      	beq.n	8003fb0 <HAL_TIM_Base_Start_IT+0x80>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a1c      	ldr	r2, [pc, #112]	; (8004000 <HAL_TIM_Base_Start_IT+0xd0>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d00e      	beq.n	8003fb0 <HAL_TIM_Base_Start_IT+0x80>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a1b      	ldr	r2, [pc, #108]	; (8004004 <HAL_TIM_Base_Start_IT+0xd4>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d009      	beq.n	8003fb0 <HAL_TIM_Base_Start_IT+0x80>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a19      	ldr	r2, [pc, #100]	; (8004008 <HAL_TIM_Base_Start_IT+0xd8>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d004      	beq.n	8003fb0 <HAL_TIM_Base_Start_IT+0x80>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a18      	ldr	r2, [pc, #96]	; (800400c <HAL_TIM_Base_Start_IT+0xdc>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d111      	bne.n	8003fd4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f003 0307 	and.w	r3, r3, #7
 8003fba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2b06      	cmp	r3, #6
 8003fc0:	d010      	beq.n	8003fe4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f042 0201 	orr.w	r2, r2, #1
 8003fd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fd2:	e007      	b.n	8003fe4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f042 0201 	orr.w	r2, r2, #1
 8003fe2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3714      	adds	r7, #20
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	40010000 	.word	0x40010000
 8003ff8:	40000400 	.word	0x40000400
 8003ffc:	40000800 	.word	0x40000800
 8004000:	40000c00 	.word	0x40000c00
 8004004:	40010400 	.word	0x40010400
 8004008:	40014000 	.word	0x40014000
 800400c:	40001800 	.word	0x40001800

08004010 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d101      	bne.n	8004022 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e041      	b.n	80040a6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d106      	bne.n	800403c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 f839 	bl	80040ae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2202      	movs	r2, #2
 8004040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	3304      	adds	r3, #4
 800404c:	4619      	mov	r1, r3
 800404e:	4610      	mov	r0, r2
 8004050:	f000 fcee 	bl	8004a30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3708      	adds	r7, #8
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}

080040ae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80040ae:	b480      	push	{r7}
 80040b0:	b083      	sub	sp, #12
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80040b6:	bf00      	nop
 80040b8:	370c      	adds	r7, #12
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
	...

080040c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d109      	bne.n	80040e8 <HAL_TIM_PWM_Start+0x24>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	2b01      	cmp	r3, #1
 80040de:	bf14      	ite	ne
 80040e0:	2301      	movne	r3, #1
 80040e2:	2300      	moveq	r3, #0
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	e022      	b.n	800412e <HAL_TIM_PWM_Start+0x6a>
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	2b04      	cmp	r3, #4
 80040ec:	d109      	bne.n	8004102 <HAL_TIM_PWM_Start+0x3e>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	bf14      	ite	ne
 80040fa:	2301      	movne	r3, #1
 80040fc:	2300      	moveq	r3, #0
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	e015      	b.n	800412e <HAL_TIM_PWM_Start+0x6a>
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	2b08      	cmp	r3, #8
 8004106:	d109      	bne.n	800411c <HAL_TIM_PWM_Start+0x58>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800410e:	b2db      	uxtb	r3, r3
 8004110:	2b01      	cmp	r3, #1
 8004112:	bf14      	ite	ne
 8004114:	2301      	movne	r3, #1
 8004116:	2300      	moveq	r3, #0
 8004118:	b2db      	uxtb	r3, r3
 800411a:	e008      	b.n	800412e <HAL_TIM_PWM_Start+0x6a>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004122:	b2db      	uxtb	r3, r3
 8004124:	2b01      	cmp	r3, #1
 8004126:	bf14      	ite	ne
 8004128:	2301      	movne	r3, #1
 800412a:	2300      	moveq	r3, #0
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e07c      	b.n	8004230 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d104      	bne.n	8004146 <HAL_TIM_PWM_Start+0x82>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2202      	movs	r2, #2
 8004140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004144:	e013      	b.n	800416e <HAL_TIM_PWM_Start+0xaa>
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	2b04      	cmp	r3, #4
 800414a:	d104      	bne.n	8004156 <HAL_TIM_PWM_Start+0x92>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2202      	movs	r2, #2
 8004150:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004154:	e00b      	b.n	800416e <HAL_TIM_PWM_Start+0xaa>
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	2b08      	cmp	r3, #8
 800415a:	d104      	bne.n	8004166 <HAL_TIM_PWM_Start+0xa2>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2202      	movs	r2, #2
 8004160:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004164:	e003      	b.n	800416e <HAL_TIM_PWM_Start+0xaa>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2202      	movs	r2, #2
 800416a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2201      	movs	r2, #1
 8004174:	6839      	ldr	r1, [r7, #0]
 8004176:	4618      	mov	r0, r3
 8004178:	f000 ff44 	bl	8005004 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a2d      	ldr	r2, [pc, #180]	; (8004238 <HAL_TIM_PWM_Start+0x174>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d004      	beq.n	8004190 <HAL_TIM_PWM_Start+0xcc>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a2c      	ldr	r2, [pc, #176]	; (800423c <HAL_TIM_PWM_Start+0x178>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d101      	bne.n	8004194 <HAL_TIM_PWM_Start+0xd0>
 8004190:	2301      	movs	r3, #1
 8004192:	e000      	b.n	8004196 <HAL_TIM_PWM_Start+0xd2>
 8004194:	2300      	movs	r3, #0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d007      	beq.n	80041aa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a22      	ldr	r2, [pc, #136]	; (8004238 <HAL_TIM_PWM_Start+0x174>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d022      	beq.n	80041fa <HAL_TIM_PWM_Start+0x136>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041bc:	d01d      	beq.n	80041fa <HAL_TIM_PWM_Start+0x136>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a1f      	ldr	r2, [pc, #124]	; (8004240 <HAL_TIM_PWM_Start+0x17c>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d018      	beq.n	80041fa <HAL_TIM_PWM_Start+0x136>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a1d      	ldr	r2, [pc, #116]	; (8004244 <HAL_TIM_PWM_Start+0x180>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d013      	beq.n	80041fa <HAL_TIM_PWM_Start+0x136>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a1c      	ldr	r2, [pc, #112]	; (8004248 <HAL_TIM_PWM_Start+0x184>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d00e      	beq.n	80041fa <HAL_TIM_PWM_Start+0x136>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a16      	ldr	r2, [pc, #88]	; (800423c <HAL_TIM_PWM_Start+0x178>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d009      	beq.n	80041fa <HAL_TIM_PWM_Start+0x136>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a18      	ldr	r2, [pc, #96]	; (800424c <HAL_TIM_PWM_Start+0x188>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d004      	beq.n	80041fa <HAL_TIM_PWM_Start+0x136>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a16      	ldr	r2, [pc, #88]	; (8004250 <HAL_TIM_PWM_Start+0x18c>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d111      	bne.n	800421e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f003 0307 	and.w	r3, r3, #7
 8004204:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2b06      	cmp	r3, #6
 800420a:	d010      	beq.n	800422e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f042 0201 	orr.w	r2, r2, #1
 800421a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800421c:	e007      	b.n	800422e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f042 0201 	orr.w	r2, r2, #1
 800422c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3710      	adds	r7, #16
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	40010000 	.word	0x40010000
 800423c:	40010400 	.word	0x40010400
 8004240:	40000400 	.word	0x40000400
 8004244:	40000800 	.word	0x40000800
 8004248:	40000c00 	.word	0x40000c00
 800424c:	40014000 	.word	0x40014000
 8004250:	40001800 	.word	0x40001800

08004254 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b086      	sub	sp, #24
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d101      	bne.n	8004268 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e097      	b.n	8004398 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800426e:	b2db      	uxtb	r3, r3
 8004270:	2b00      	cmp	r3, #0
 8004272:	d106      	bne.n	8004282 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f7fd ffc1 	bl	8002204 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2202      	movs	r2, #2
 8004286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	6812      	ldr	r2, [r2, #0]
 8004294:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004298:	f023 0307 	bic.w	r3, r3, #7
 800429c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	3304      	adds	r3, #4
 80042a6:	4619      	mov	r1, r3
 80042a8:	4610      	mov	r0, r2
 80042aa:	f000 fbc1 	bl	8004a30 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	6a1b      	ldr	r3, [r3, #32]
 80042c4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	697a      	ldr	r2, [r7, #20]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042d6:	f023 0303 	bic.w	r3, r3, #3
 80042da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	689a      	ldr	r2, [r3, #8]
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	021b      	lsls	r3, r3, #8
 80042e6:	4313      	orrs	r3, r2
 80042e8:	693a      	ldr	r2, [r7, #16]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80042f4:	f023 030c 	bic.w	r3, r3, #12
 80042f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004300:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004304:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	68da      	ldr	r2, [r3, #12]
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	69db      	ldr	r3, [r3, #28]
 800430e:	021b      	lsls	r3, r3, #8
 8004310:	4313      	orrs	r3, r2
 8004312:	693a      	ldr	r2, [r7, #16]
 8004314:	4313      	orrs	r3, r2
 8004316:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	691b      	ldr	r3, [r3, #16]
 800431c:	011a      	lsls	r2, r3, #4
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	6a1b      	ldr	r3, [r3, #32]
 8004322:	031b      	lsls	r3, r3, #12
 8004324:	4313      	orrs	r3, r2
 8004326:	693a      	ldr	r2, [r7, #16]
 8004328:	4313      	orrs	r3, r2
 800432a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004332:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800433a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	685a      	ldr	r2, [r3, #4]
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	011b      	lsls	r3, r3, #4
 8004346:	4313      	orrs	r3, r2
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	4313      	orrs	r3, r2
 800434c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	697a      	ldr	r2, [r7, #20]
 8004354:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68fa      	ldr	r2, [r7, #12]
 8004364:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2201      	movs	r2, #1
 800437a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2201      	movs	r2, #1
 8004382:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2201      	movs	r2, #1
 8004392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	3718      	adds	r7, #24
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043b0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80043b8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80043c0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80043c8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d110      	bne.n	80043f2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80043d0:	7bfb      	ldrb	r3, [r7, #15]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d102      	bne.n	80043dc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80043d6:	7b7b      	ldrb	r3, [r7, #13]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d001      	beq.n	80043e0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e069      	b.n	80044b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2202      	movs	r2, #2
 80043e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2202      	movs	r2, #2
 80043ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043f0:	e031      	b.n	8004456 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	2b04      	cmp	r3, #4
 80043f6:	d110      	bne.n	800441a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80043f8:	7bbb      	ldrb	r3, [r7, #14]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d102      	bne.n	8004404 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80043fe:	7b3b      	ldrb	r3, [r7, #12]
 8004400:	2b01      	cmp	r3, #1
 8004402:	d001      	beq.n	8004408 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e055      	b.n	80044b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2202      	movs	r2, #2
 800440c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2202      	movs	r2, #2
 8004414:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004418:	e01d      	b.n	8004456 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800441a:	7bfb      	ldrb	r3, [r7, #15]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d108      	bne.n	8004432 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004420:	7bbb      	ldrb	r3, [r7, #14]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d105      	bne.n	8004432 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004426:	7b7b      	ldrb	r3, [r7, #13]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d102      	bne.n	8004432 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800442c:	7b3b      	ldrb	r3, [r7, #12]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d001      	beq.n	8004436 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e03e      	b.n	80044b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2202      	movs	r2, #2
 800443a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2202      	movs	r2, #2
 8004442:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2202      	movs	r2, #2
 800444a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2202      	movs	r2, #2
 8004452:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d003      	beq.n	8004464 <HAL_TIM_Encoder_Start+0xc4>
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	2b04      	cmp	r3, #4
 8004460:	d008      	beq.n	8004474 <HAL_TIM_Encoder_Start+0xd4>
 8004462:	e00f      	b.n	8004484 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2201      	movs	r2, #1
 800446a:	2100      	movs	r1, #0
 800446c:	4618      	mov	r0, r3
 800446e:	f000 fdc9 	bl	8005004 <TIM_CCxChannelCmd>
      break;
 8004472:	e016      	b.n	80044a2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2201      	movs	r2, #1
 800447a:	2104      	movs	r1, #4
 800447c:	4618      	mov	r0, r3
 800447e:	f000 fdc1 	bl	8005004 <TIM_CCxChannelCmd>
      break;
 8004482:	e00e      	b.n	80044a2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2201      	movs	r2, #1
 800448a:	2100      	movs	r1, #0
 800448c:	4618      	mov	r0, r3
 800448e:	f000 fdb9 	bl	8005004 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2201      	movs	r2, #1
 8004498:	2104      	movs	r1, #4
 800449a:	4618      	mov	r0, r3
 800449c:	f000 fdb2 	bl	8005004 <TIM_CCxChannelCmd>
      break;
 80044a0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f042 0201 	orr.w	r2, r2, #1
 80044b0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3710      	adds	r7, #16
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	f003 0302 	and.w	r3, r3, #2
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d122      	bne.n	8004518 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	f003 0302 	and.w	r3, r3, #2
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d11b      	bne.n	8004518 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f06f 0202 	mvn.w	r2, #2
 80044e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2201      	movs	r2, #1
 80044ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	f003 0303 	and.w	r3, r3, #3
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d003      	beq.n	8004506 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 fa77 	bl	80049f2 <HAL_TIM_IC_CaptureCallback>
 8004504:	e005      	b.n	8004512 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 fa69 	bl	80049de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f000 fa7a 	bl	8004a06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	f003 0304 	and.w	r3, r3, #4
 8004522:	2b04      	cmp	r3, #4
 8004524:	d122      	bne.n	800456c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	f003 0304 	and.w	r3, r3, #4
 8004530:	2b04      	cmp	r3, #4
 8004532:	d11b      	bne.n	800456c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f06f 0204 	mvn.w	r2, #4
 800453c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2202      	movs	r2, #2
 8004542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800454e:	2b00      	cmp	r3, #0
 8004550:	d003      	beq.n	800455a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 fa4d 	bl	80049f2 <HAL_TIM_IC_CaptureCallback>
 8004558:	e005      	b.n	8004566 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 fa3f 	bl	80049de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 fa50 	bl	8004a06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	f003 0308 	and.w	r3, r3, #8
 8004576:	2b08      	cmp	r3, #8
 8004578:	d122      	bne.n	80045c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	f003 0308 	and.w	r3, r3, #8
 8004584:	2b08      	cmp	r3, #8
 8004586:	d11b      	bne.n	80045c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f06f 0208 	mvn.w	r2, #8
 8004590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2204      	movs	r2, #4
 8004596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	69db      	ldr	r3, [r3, #28]
 800459e:	f003 0303 	and.w	r3, r3, #3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d003      	beq.n	80045ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 fa23 	bl	80049f2 <HAL_TIM_IC_CaptureCallback>
 80045ac:	e005      	b.n	80045ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 fa15 	bl	80049de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 fa26 	bl	8004a06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	f003 0310 	and.w	r3, r3, #16
 80045ca:	2b10      	cmp	r3, #16
 80045cc:	d122      	bne.n	8004614 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	f003 0310 	and.w	r3, r3, #16
 80045d8:	2b10      	cmp	r3, #16
 80045da:	d11b      	bne.n	8004614 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f06f 0210 	mvn.w	r2, #16
 80045e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2208      	movs	r2, #8
 80045ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	69db      	ldr	r3, [r3, #28]
 80045f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d003      	beq.n	8004602 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 f9f9 	bl	80049f2 <HAL_TIM_IC_CaptureCallback>
 8004600:	e005      	b.n	800460e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f9eb 	bl	80049de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 f9fc 	bl	8004a06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	2b01      	cmp	r3, #1
 8004620:	d10e      	bne.n	8004640 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	f003 0301 	and.w	r3, r3, #1
 800462c:	2b01      	cmp	r3, #1
 800462e:	d107      	bne.n	8004640 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f06f 0201 	mvn.w	r2, #1
 8004638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f7fd fb04 	bl	8001c48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800464a:	2b80      	cmp	r3, #128	; 0x80
 800464c:	d10e      	bne.n	800466c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004658:	2b80      	cmp	r3, #128	; 0x80
 800465a:	d107      	bne.n	800466c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 fdca 	bl	8005200 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004676:	2b40      	cmp	r3, #64	; 0x40
 8004678:	d10e      	bne.n	8004698 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004684:	2b40      	cmp	r3, #64	; 0x40
 8004686:	d107      	bne.n	8004698 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004690:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 f9c1 	bl	8004a1a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	f003 0320 	and.w	r3, r3, #32
 80046a2:	2b20      	cmp	r3, #32
 80046a4:	d10e      	bne.n	80046c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	f003 0320 	and.w	r3, r3, #32
 80046b0:	2b20      	cmp	r3, #32
 80046b2:	d107      	bne.n	80046c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f06f 0220 	mvn.w	r2, #32
 80046bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 fd94 	bl	80051ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046c4:	bf00      	nop
 80046c6:	3708      	adds	r7, #8
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046d8:	2300      	movs	r3, #0
 80046da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d101      	bne.n	80046ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80046e6:	2302      	movs	r3, #2
 80046e8:	e0ae      	b.n	8004848 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2b0c      	cmp	r3, #12
 80046f6:	f200 809f 	bhi.w	8004838 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80046fa:	a201      	add	r2, pc, #4	; (adr r2, 8004700 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80046fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004700:	08004735 	.word	0x08004735
 8004704:	08004839 	.word	0x08004839
 8004708:	08004839 	.word	0x08004839
 800470c:	08004839 	.word	0x08004839
 8004710:	08004775 	.word	0x08004775
 8004714:	08004839 	.word	0x08004839
 8004718:	08004839 	.word	0x08004839
 800471c:	08004839 	.word	0x08004839
 8004720:	080047b7 	.word	0x080047b7
 8004724:	08004839 	.word	0x08004839
 8004728:	08004839 	.word	0x08004839
 800472c:	08004839 	.word	0x08004839
 8004730:	080047f7 	.word	0x080047f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68b9      	ldr	r1, [r7, #8]
 800473a:	4618      	mov	r0, r3
 800473c:	f000 fa18 	bl	8004b70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	699a      	ldr	r2, [r3, #24]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f042 0208 	orr.w	r2, r2, #8
 800474e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	699a      	ldr	r2, [r3, #24]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f022 0204 	bic.w	r2, r2, #4
 800475e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	6999      	ldr	r1, [r3, #24]
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	691a      	ldr	r2, [r3, #16]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	430a      	orrs	r2, r1
 8004770:	619a      	str	r2, [r3, #24]
      break;
 8004772:	e064      	b.n	800483e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68b9      	ldr	r1, [r7, #8]
 800477a:	4618      	mov	r0, r3
 800477c:	f000 fa68 	bl	8004c50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	699a      	ldr	r2, [r3, #24]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800478e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	699a      	ldr	r2, [r3, #24]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800479e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	6999      	ldr	r1, [r3, #24]
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	021a      	lsls	r2, r3, #8
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	430a      	orrs	r2, r1
 80047b2:	619a      	str	r2, [r3, #24]
      break;
 80047b4:	e043      	b.n	800483e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68b9      	ldr	r1, [r7, #8]
 80047bc:	4618      	mov	r0, r3
 80047be:	f000 fabd 	bl	8004d3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	69da      	ldr	r2, [r3, #28]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f042 0208 	orr.w	r2, r2, #8
 80047d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	69da      	ldr	r2, [r3, #28]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f022 0204 	bic.w	r2, r2, #4
 80047e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	69d9      	ldr	r1, [r3, #28]
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	691a      	ldr	r2, [r3, #16]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	430a      	orrs	r2, r1
 80047f2:	61da      	str	r2, [r3, #28]
      break;
 80047f4:	e023      	b.n	800483e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68b9      	ldr	r1, [r7, #8]
 80047fc:	4618      	mov	r0, r3
 80047fe:	f000 fb11 	bl	8004e24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	69da      	ldr	r2, [r3, #28]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004810:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	69da      	ldr	r2, [r3, #28]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004820:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	69d9      	ldr	r1, [r3, #28]
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	021a      	lsls	r2, r3, #8
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	430a      	orrs	r2, r1
 8004834:	61da      	str	r2, [r3, #28]
      break;
 8004836:	e002      	b.n	800483e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	75fb      	strb	r3, [r7, #23]
      break;
 800483c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004846:	7dfb      	ldrb	r3, [r7, #23]
}
 8004848:	4618      	mov	r0, r3
 800484a:	3718      	adds	r7, #24
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800485a:	2300      	movs	r3, #0
 800485c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004864:	2b01      	cmp	r3, #1
 8004866:	d101      	bne.n	800486c <HAL_TIM_ConfigClockSource+0x1c>
 8004868:	2302      	movs	r3, #2
 800486a:	e0b4      	b.n	80049d6 <HAL_TIM_ConfigClockSource+0x186>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2202      	movs	r2, #2
 8004878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800488a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004892:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68ba      	ldr	r2, [r7, #8]
 800489a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048a4:	d03e      	beq.n	8004924 <HAL_TIM_ConfigClockSource+0xd4>
 80048a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048aa:	f200 8087 	bhi.w	80049bc <HAL_TIM_ConfigClockSource+0x16c>
 80048ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048b2:	f000 8086 	beq.w	80049c2 <HAL_TIM_ConfigClockSource+0x172>
 80048b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ba:	d87f      	bhi.n	80049bc <HAL_TIM_ConfigClockSource+0x16c>
 80048bc:	2b70      	cmp	r3, #112	; 0x70
 80048be:	d01a      	beq.n	80048f6 <HAL_TIM_ConfigClockSource+0xa6>
 80048c0:	2b70      	cmp	r3, #112	; 0x70
 80048c2:	d87b      	bhi.n	80049bc <HAL_TIM_ConfigClockSource+0x16c>
 80048c4:	2b60      	cmp	r3, #96	; 0x60
 80048c6:	d050      	beq.n	800496a <HAL_TIM_ConfigClockSource+0x11a>
 80048c8:	2b60      	cmp	r3, #96	; 0x60
 80048ca:	d877      	bhi.n	80049bc <HAL_TIM_ConfigClockSource+0x16c>
 80048cc:	2b50      	cmp	r3, #80	; 0x50
 80048ce:	d03c      	beq.n	800494a <HAL_TIM_ConfigClockSource+0xfa>
 80048d0:	2b50      	cmp	r3, #80	; 0x50
 80048d2:	d873      	bhi.n	80049bc <HAL_TIM_ConfigClockSource+0x16c>
 80048d4:	2b40      	cmp	r3, #64	; 0x40
 80048d6:	d058      	beq.n	800498a <HAL_TIM_ConfigClockSource+0x13a>
 80048d8:	2b40      	cmp	r3, #64	; 0x40
 80048da:	d86f      	bhi.n	80049bc <HAL_TIM_ConfigClockSource+0x16c>
 80048dc:	2b30      	cmp	r3, #48	; 0x30
 80048de:	d064      	beq.n	80049aa <HAL_TIM_ConfigClockSource+0x15a>
 80048e0:	2b30      	cmp	r3, #48	; 0x30
 80048e2:	d86b      	bhi.n	80049bc <HAL_TIM_ConfigClockSource+0x16c>
 80048e4:	2b20      	cmp	r3, #32
 80048e6:	d060      	beq.n	80049aa <HAL_TIM_ConfigClockSource+0x15a>
 80048e8:	2b20      	cmp	r3, #32
 80048ea:	d867      	bhi.n	80049bc <HAL_TIM_ConfigClockSource+0x16c>
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d05c      	beq.n	80049aa <HAL_TIM_ConfigClockSource+0x15a>
 80048f0:	2b10      	cmp	r3, #16
 80048f2:	d05a      	beq.n	80049aa <HAL_TIM_ConfigClockSource+0x15a>
 80048f4:	e062      	b.n	80049bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6818      	ldr	r0, [r3, #0]
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	6899      	ldr	r1, [r3, #8]
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	685a      	ldr	r2, [r3, #4]
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	f000 fb5d 	bl	8004fc4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004918:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68ba      	ldr	r2, [r7, #8]
 8004920:	609a      	str	r2, [r3, #8]
      break;
 8004922:	e04f      	b.n	80049c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6818      	ldr	r0, [r3, #0]
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	6899      	ldr	r1, [r3, #8]
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685a      	ldr	r2, [r3, #4]
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	f000 fb46 	bl	8004fc4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	689a      	ldr	r2, [r3, #8]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004946:	609a      	str	r2, [r3, #8]
      break;
 8004948:	e03c      	b.n	80049c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6818      	ldr	r0, [r3, #0]
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	6859      	ldr	r1, [r3, #4]
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	461a      	mov	r2, r3
 8004958:	f000 faba 	bl	8004ed0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2150      	movs	r1, #80	; 0x50
 8004962:	4618      	mov	r0, r3
 8004964:	f000 fb13 	bl	8004f8e <TIM_ITRx_SetConfig>
      break;
 8004968:	e02c      	b.n	80049c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6818      	ldr	r0, [r3, #0]
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	6859      	ldr	r1, [r3, #4]
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	461a      	mov	r2, r3
 8004978:	f000 fad9 	bl	8004f2e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2160      	movs	r1, #96	; 0x60
 8004982:	4618      	mov	r0, r3
 8004984:	f000 fb03 	bl	8004f8e <TIM_ITRx_SetConfig>
      break;
 8004988:	e01c      	b.n	80049c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6818      	ldr	r0, [r3, #0]
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	6859      	ldr	r1, [r3, #4]
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	461a      	mov	r2, r3
 8004998:	f000 fa9a 	bl	8004ed0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2140      	movs	r1, #64	; 0x40
 80049a2:	4618      	mov	r0, r3
 80049a4:	f000 faf3 	bl	8004f8e <TIM_ITRx_SetConfig>
      break;
 80049a8:	e00c      	b.n	80049c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4619      	mov	r1, r3
 80049b4:	4610      	mov	r0, r2
 80049b6:	f000 faea 	bl	8004f8e <TIM_ITRx_SetConfig>
      break;
 80049ba:	e003      	b.n	80049c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	73fb      	strb	r3, [r7, #15]
      break;
 80049c0:	e000      	b.n	80049c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80049c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80049d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3710      	adds	r7, #16
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049de:	b480      	push	{r7}
 80049e0:	b083      	sub	sp, #12
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049e6:	bf00      	nop
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr

080049f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049f2:	b480      	push	{r7}
 80049f4:	b083      	sub	sp, #12
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049fa:	bf00      	nop
 80049fc:	370c      	adds	r7, #12
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr

08004a06 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a06:	b480      	push	{r7}
 8004a08:	b083      	sub	sp, #12
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a0e:	bf00      	nop
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	b083      	sub	sp, #12
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a22:	bf00      	nop
 8004a24:	370c      	adds	r7, #12
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
	...

08004a30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b085      	sub	sp, #20
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a40      	ldr	r2, [pc, #256]	; (8004b44 <TIM_Base_SetConfig+0x114>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d013      	beq.n	8004a70 <TIM_Base_SetConfig+0x40>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a4e:	d00f      	beq.n	8004a70 <TIM_Base_SetConfig+0x40>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a3d      	ldr	r2, [pc, #244]	; (8004b48 <TIM_Base_SetConfig+0x118>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d00b      	beq.n	8004a70 <TIM_Base_SetConfig+0x40>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a3c      	ldr	r2, [pc, #240]	; (8004b4c <TIM_Base_SetConfig+0x11c>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d007      	beq.n	8004a70 <TIM_Base_SetConfig+0x40>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a3b      	ldr	r2, [pc, #236]	; (8004b50 <TIM_Base_SetConfig+0x120>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d003      	beq.n	8004a70 <TIM_Base_SetConfig+0x40>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a3a      	ldr	r2, [pc, #232]	; (8004b54 <TIM_Base_SetConfig+0x124>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d108      	bne.n	8004a82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a2f      	ldr	r2, [pc, #188]	; (8004b44 <TIM_Base_SetConfig+0x114>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d02b      	beq.n	8004ae2 <TIM_Base_SetConfig+0xb2>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a90:	d027      	beq.n	8004ae2 <TIM_Base_SetConfig+0xb2>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a2c      	ldr	r2, [pc, #176]	; (8004b48 <TIM_Base_SetConfig+0x118>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d023      	beq.n	8004ae2 <TIM_Base_SetConfig+0xb2>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a2b      	ldr	r2, [pc, #172]	; (8004b4c <TIM_Base_SetConfig+0x11c>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d01f      	beq.n	8004ae2 <TIM_Base_SetConfig+0xb2>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a2a      	ldr	r2, [pc, #168]	; (8004b50 <TIM_Base_SetConfig+0x120>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d01b      	beq.n	8004ae2 <TIM_Base_SetConfig+0xb2>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a29      	ldr	r2, [pc, #164]	; (8004b54 <TIM_Base_SetConfig+0x124>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d017      	beq.n	8004ae2 <TIM_Base_SetConfig+0xb2>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a28      	ldr	r2, [pc, #160]	; (8004b58 <TIM_Base_SetConfig+0x128>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d013      	beq.n	8004ae2 <TIM_Base_SetConfig+0xb2>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a27      	ldr	r2, [pc, #156]	; (8004b5c <TIM_Base_SetConfig+0x12c>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d00f      	beq.n	8004ae2 <TIM_Base_SetConfig+0xb2>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a26      	ldr	r2, [pc, #152]	; (8004b60 <TIM_Base_SetConfig+0x130>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d00b      	beq.n	8004ae2 <TIM_Base_SetConfig+0xb2>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a25      	ldr	r2, [pc, #148]	; (8004b64 <TIM_Base_SetConfig+0x134>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d007      	beq.n	8004ae2 <TIM_Base_SetConfig+0xb2>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a24      	ldr	r2, [pc, #144]	; (8004b68 <TIM_Base_SetConfig+0x138>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d003      	beq.n	8004ae2 <TIM_Base_SetConfig+0xb2>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a23      	ldr	r2, [pc, #140]	; (8004b6c <TIM_Base_SetConfig+0x13c>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d108      	bne.n	8004af4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ae8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	68fa      	ldr	r2, [r7, #12]
 8004b06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	689a      	ldr	r2, [r3, #8]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a0a      	ldr	r2, [pc, #40]	; (8004b44 <TIM_Base_SetConfig+0x114>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d003      	beq.n	8004b28 <TIM_Base_SetConfig+0xf8>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a0c      	ldr	r2, [pc, #48]	; (8004b54 <TIM_Base_SetConfig+0x124>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d103      	bne.n	8004b30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	691a      	ldr	r2, [r3, #16]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	615a      	str	r2, [r3, #20]
}
 8004b36:	bf00      	nop
 8004b38:	3714      	adds	r7, #20
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	40010000 	.word	0x40010000
 8004b48:	40000400 	.word	0x40000400
 8004b4c:	40000800 	.word	0x40000800
 8004b50:	40000c00 	.word	0x40000c00
 8004b54:	40010400 	.word	0x40010400
 8004b58:	40014000 	.word	0x40014000
 8004b5c:	40014400 	.word	0x40014400
 8004b60:	40014800 	.word	0x40014800
 8004b64:	40001800 	.word	0x40001800
 8004b68:	40001c00 	.word	0x40001c00
 8004b6c:	40002000 	.word	0x40002000

08004b70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b087      	sub	sp, #28
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a1b      	ldr	r3, [r3, #32]
 8004b7e:	f023 0201 	bic.w	r2, r3, #1
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a1b      	ldr	r3, [r3, #32]
 8004b8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f023 0303 	bic.w	r3, r3, #3
 8004ba6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	f023 0302 	bic.w	r3, r3, #2
 8004bb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	697a      	ldr	r2, [r7, #20]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4a20      	ldr	r2, [pc, #128]	; (8004c48 <TIM_OC1_SetConfig+0xd8>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d003      	beq.n	8004bd4 <TIM_OC1_SetConfig+0x64>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4a1f      	ldr	r2, [pc, #124]	; (8004c4c <TIM_OC1_SetConfig+0xdc>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d10c      	bne.n	8004bee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	f023 0308 	bic.w	r3, r3, #8
 8004bda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	f023 0304 	bic.w	r3, r3, #4
 8004bec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a15      	ldr	r2, [pc, #84]	; (8004c48 <TIM_OC1_SetConfig+0xd8>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d003      	beq.n	8004bfe <TIM_OC1_SetConfig+0x8e>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a14      	ldr	r2, [pc, #80]	; (8004c4c <TIM_OC1_SetConfig+0xdc>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d111      	bne.n	8004c22 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	693a      	ldr	r2, [r7, #16]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	685a      	ldr	r2, [r3, #4]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	697a      	ldr	r2, [r7, #20]
 8004c3a:	621a      	str	r2, [r3, #32]
}
 8004c3c:	bf00      	nop
 8004c3e:	371c      	adds	r7, #28
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr
 8004c48:	40010000 	.word	0x40010000
 8004c4c:	40010400 	.word	0x40010400

08004c50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b087      	sub	sp, #28
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a1b      	ldr	r3, [r3, #32]
 8004c5e:	f023 0210 	bic.w	r2, r3, #16
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a1b      	ldr	r3, [r3, #32]
 8004c6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	021b      	lsls	r3, r3, #8
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	f023 0320 	bic.w	r3, r3, #32
 8004c9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	011b      	lsls	r3, r3, #4
 8004ca2:	697a      	ldr	r2, [r7, #20]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a22      	ldr	r2, [pc, #136]	; (8004d34 <TIM_OC2_SetConfig+0xe4>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d003      	beq.n	8004cb8 <TIM_OC2_SetConfig+0x68>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4a21      	ldr	r2, [pc, #132]	; (8004d38 <TIM_OC2_SetConfig+0xe8>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d10d      	bne.n	8004cd4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	011b      	lsls	r3, r3, #4
 8004cc6:	697a      	ldr	r2, [r7, #20]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cd2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a17      	ldr	r2, [pc, #92]	; (8004d34 <TIM_OC2_SetConfig+0xe4>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d003      	beq.n	8004ce4 <TIM_OC2_SetConfig+0x94>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a16      	ldr	r2, [pc, #88]	; (8004d38 <TIM_OC2_SetConfig+0xe8>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d113      	bne.n	8004d0c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cf2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	695b      	ldr	r3, [r3, #20]
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	693a      	ldr	r2, [r7, #16]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	693a      	ldr	r2, [r7, #16]
 8004d10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	685a      	ldr	r2, [r3, #4]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	621a      	str	r2, [r3, #32]
}
 8004d26:	bf00      	nop
 8004d28:	371c      	adds	r7, #28
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	40010000 	.word	0x40010000
 8004d38:	40010400 	.word	0x40010400

08004d3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b087      	sub	sp, #28
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a1b      	ldr	r3, [r3, #32]
 8004d4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	69db      	ldr	r3, [r3, #28]
 8004d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f023 0303 	bic.w	r3, r3, #3
 8004d72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	021b      	lsls	r3, r3, #8
 8004d8c:	697a      	ldr	r2, [r7, #20]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a21      	ldr	r2, [pc, #132]	; (8004e1c <TIM_OC3_SetConfig+0xe0>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d003      	beq.n	8004da2 <TIM_OC3_SetConfig+0x66>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a20      	ldr	r2, [pc, #128]	; (8004e20 <TIM_OC3_SetConfig+0xe4>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d10d      	bne.n	8004dbe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004da8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	021b      	lsls	r3, r3, #8
 8004db0:	697a      	ldr	r2, [r7, #20]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004dbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a16      	ldr	r2, [pc, #88]	; (8004e1c <TIM_OC3_SetConfig+0xe0>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d003      	beq.n	8004dce <TIM_OC3_SetConfig+0x92>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a15      	ldr	r2, [pc, #84]	; (8004e20 <TIM_OC3_SetConfig+0xe4>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d113      	bne.n	8004df6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004dd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ddc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	011b      	lsls	r3, r3, #4
 8004de4:	693a      	ldr	r2, [r7, #16]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	011b      	lsls	r3, r3, #4
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	685a      	ldr	r2, [r3, #4]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	697a      	ldr	r2, [r7, #20]
 8004e0e:	621a      	str	r2, [r3, #32]
}
 8004e10:	bf00      	nop
 8004e12:	371c      	adds	r7, #28
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr
 8004e1c:	40010000 	.word	0x40010000
 8004e20:	40010400 	.word	0x40010400

08004e24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b087      	sub	sp, #28
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a1b      	ldr	r3, [r3, #32]
 8004e32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a1b      	ldr	r3, [r3, #32]
 8004e3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	69db      	ldr	r3, [r3, #28]
 8004e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	021b      	lsls	r3, r3, #8
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	031b      	lsls	r3, r3, #12
 8004e76:	693a      	ldr	r2, [r7, #16]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a12      	ldr	r2, [pc, #72]	; (8004ec8 <TIM_OC4_SetConfig+0xa4>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d003      	beq.n	8004e8c <TIM_OC4_SetConfig+0x68>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a11      	ldr	r2, [pc, #68]	; (8004ecc <TIM_OC4_SetConfig+0xa8>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d109      	bne.n	8004ea0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	695b      	ldr	r3, [r3, #20]
 8004e98:	019b      	lsls	r3, r3, #6
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	697a      	ldr	r2, [r7, #20]
 8004ea4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	685a      	ldr	r2, [r3, #4]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	693a      	ldr	r2, [r7, #16]
 8004eb8:	621a      	str	r2, [r3, #32]
}
 8004eba:	bf00      	nop
 8004ebc:	371c      	adds	r7, #28
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	40010000 	.word	0x40010000
 8004ecc:	40010400 	.word	0x40010400

08004ed0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b087      	sub	sp, #28
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6a1b      	ldr	r3, [r3, #32]
 8004ee0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	f023 0201 	bic.w	r2, r3, #1
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004efa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	011b      	lsls	r3, r3, #4
 8004f00:	693a      	ldr	r2, [r7, #16]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	f023 030a 	bic.w	r3, r3, #10
 8004f0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	693a      	ldr	r2, [r7, #16]
 8004f1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	697a      	ldr	r2, [r7, #20]
 8004f20:	621a      	str	r2, [r3, #32]
}
 8004f22:	bf00      	nop
 8004f24:	371c      	adds	r7, #28
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr

08004f2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f2e:	b480      	push	{r7}
 8004f30:	b087      	sub	sp, #28
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	60f8      	str	r0, [r7, #12]
 8004f36:	60b9      	str	r1, [r7, #8]
 8004f38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	f023 0210 	bic.w	r2, r3, #16
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6a1b      	ldr	r3, [r3, #32]
 8004f50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	031b      	lsls	r3, r3, #12
 8004f5e:	697a      	ldr	r2, [r7, #20]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f6a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	011b      	lsls	r3, r3, #4
 8004f70:	693a      	ldr	r2, [r7, #16]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	697a      	ldr	r2, [r7, #20]
 8004f7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	621a      	str	r2, [r3, #32]
}
 8004f82:	bf00      	nop
 8004f84:	371c      	adds	r7, #28
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr

08004f8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f8e:	b480      	push	{r7}
 8004f90:	b085      	sub	sp, #20
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
 8004f96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fa4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fa6:	683a      	ldr	r2, [r7, #0]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	f043 0307 	orr.w	r3, r3, #7
 8004fb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	609a      	str	r2, [r3, #8]
}
 8004fb8:	bf00      	nop
 8004fba:	3714      	adds	r7, #20
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b087      	sub	sp, #28
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]
 8004fd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fde:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	021a      	lsls	r2, r3, #8
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	431a      	orrs	r2, r3
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	697a      	ldr	r2, [r7, #20]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	697a      	ldr	r2, [r7, #20]
 8004ff6:	609a      	str	r2, [r3, #8]
}
 8004ff8:	bf00      	nop
 8004ffa:	371c      	adds	r7, #28
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005004:	b480      	push	{r7}
 8005006:	b087      	sub	sp, #28
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	f003 031f 	and.w	r3, r3, #31
 8005016:	2201      	movs	r2, #1
 8005018:	fa02 f303 	lsl.w	r3, r2, r3
 800501c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6a1a      	ldr	r2, [r3, #32]
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	43db      	mvns	r3, r3
 8005026:	401a      	ands	r2, r3
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6a1a      	ldr	r2, [r3, #32]
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	f003 031f 	and.w	r3, r3, #31
 8005036:	6879      	ldr	r1, [r7, #4]
 8005038:	fa01 f303 	lsl.w	r3, r1, r3
 800503c:	431a      	orrs	r2, r3
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	621a      	str	r2, [r3, #32]
}
 8005042:	bf00      	nop
 8005044:	371c      	adds	r7, #28
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
	...

08005050 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005050:	b480      	push	{r7}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005060:	2b01      	cmp	r3, #1
 8005062:	d101      	bne.n	8005068 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005064:	2302      	movs	r3, #2
 8005066:	e05a      	b.n	800511e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2202      	movs	r2, #2
 8005074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800508e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	4313      	orrs	r3, r2
 8005098:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a21      	ldr	r2, [pc, #132]	; (800512c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d022      	beq.n	80050f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050b4:	d01d      	beq.n	80050f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a1d      	ldr	r2, [pc, #116]	; (8005130 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d018      	beq.n	80050f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a1b      	ldr	r2, [pc, #108]	; (8005134 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d013      	beq.n	80050f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a1a      	ldr	r2, [pc, #104]	; (8005138 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d00e      	beq.n	80050f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a18      	ldr	r2, [pc, #96]	; (800513c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d009      	beq.n	80050f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a17      	ldr	r2, [pc, #92]	; (8005140 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d004      	beq.n	80050f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a15      	ldr	r2, [pc, #84]	; (8005144 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d10c      	bne.n	800510c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	68ba      	ldr	r2, [r7, #8]
 8005100:	4313      	orrs	r3, r2
 8005102:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68ba      	ldr	r2, [r7, #8]
 800510a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3714      	adds	r7, #20
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	40010000 	.word	0x40010000
 8005130:	40000400 	.word	0x40000400
 8005134:	40000800 	.word	0x40000800
 8005138:	40000c00 	.word	0x40000c00
 800513c:	40010400 	.word	0x40010400
 8005140:	40014000 	.word	0x40014000
 8005144:	40001800 	.word	0x40001800

08005148 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005148:	b480      	push	{r7}
 800514a:	b085      	sub	sp, #20
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005152:	2300      	movs	r3, #0
 8005154:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800515c:	2b01      	cmp	r3, #1
 800515e:	d101      	bne.n	8005164 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005160:	2302      	movs	r3, #2
 8005162:	e03d      	b.n	80051e0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	4313      	orrs	r3, r2
 8005178:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	4313      	orrs	r3, r2
 8005186:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	4313      	orrs	r3, r2
 8005194:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	695b      	ldr	r3, [r3, #20]
 80051bc:	4313      	orrs	r3, r2
 80051be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	69db      	ldr	r3, [r3, #28]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3714      	adds	r7, #20
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051f4:	bf00      	nop
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005208:	bf00      	nop
 800520a:	370c      	adds	r7, #12
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b082      	sub	sp, #8
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d101      	bne.n	8005226 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e03f      	b.n	80052a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800522c:	b2db      	uxtb	r3, r3
 800522e:	2b00      	cmp	r3, #0
 8005230:	d106      	bne.n	8005240 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f7fd f88c 	bl	8002358 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2224      	movs	r2, #36	; 0x24
 8005244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	68da      	ldr	r2, [r3, #12]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005256:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f000 fddb 	bl	8005e14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	691a      	ldr	r2, [r3, #16]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800526c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	695a      	ldr	r2, [r3, #20]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800527c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68da      	ldr	r2, [r3, #12]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800528c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2220      	movs	r2, #32
 8005298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2220      	movs	r2, #32
 80052a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3708      	adds	r7, #8
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}

080052ae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052ae:	b580      	push	{r7, lr}
 80052b0:	b08a      	sub	sp, #40	; 0x28
 80052b2:	af02      	add	r7, sp, #8
 80052b4:	60f8      	str	r0, [r7, #12]
 80052b6:	60b9      	str	r1, [r7, #8]
 80052b8:	603b      	str	r3, [r7, #0]
 80052ba:	4613      	mov	r3, r2
 80052bc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80052be:	2300      	movs	r3, #0
 80052c0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	2b20      	cmp	r3, #32
 80052cc:	d17c      	bne.n	80053c8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d002      	beq.n	80052da <HAL_UART_Transmit+0x2c>
 80052d4:	88fb      	ldrh	r3, [r7, #6]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d101      	bne.n	80052de <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e075      	b.n	80053ca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d101      	bne.n	80052ec <HAL_UART_Transmit+0x3e>
 80052e8:	2302      	movs	r3, #2
 80052ea:	e06e      	b.n	80053ca <HAL_UART_Transmit+0x11c>
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2200      	movs	r2, #0
 80052f8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2221      	movs	r2, #33	; 0x21
 80052fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005302:	f7fd f909 	bl	8002518 <HAL_GetTick>
 8005306:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	88fa      	ldrh	r2, [r7, #6]
 800530c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	88fa      	ldrh	r2, [r7, #6]
 8005312:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800531c:	d108      	bne.n	8005330 <HAL_UART_Transmit+0x82>
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d104      	bne.n	8005330 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005326:	2300      	movs	r3, #0
 8005328:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	61bb      	str	r3, [r7, #24]
 800532e:	e003      	b.n	8005338 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005334:	2300      	movs	r3, #0
 8005336:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005340:	e02a      	b.n	8005398 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	9300      	str	r3, [sp, #0]
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	2200      	movs	r2, #0
 800534a:	2180      	movs	r1, #128	; 0x80
 800534c:	68f8      	ldr	r0, [r7, #12]
 800534e:	f000 fb1f 	bl	8005990 <UART_WaitOnFlagUntilTimeout>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d001      	beq.n	800535c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e036      	b.n	80053ca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d10b      	bne.n	800537a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	881b      	ldrh	r3, [r3, #0]
 8005366:	461a      	mov	r2, r3
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005370:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	3302      	adds	r3, #2
 8005376:	61bb      	str	r3, [r7, #24]
 8005378:	e007      	b.n	800538a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	781a      	ldrb	r2, [r3, #0]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	3301      	adds	r3, #1
 8005388:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800538e:	b29b      	uxth	r3, r3
 8005390:	3b01      	subs	r3, #1
 8005392:	b29a      	uxth	r2, r3
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800539c:	b29b      	uxth	r3, r3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1cf      	bne.n	8005342 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	9300      	str	r3, [sp, #0]
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	2200      	movs	r2, #0
 80053aa:	2140      	movs	r1, #64	; 0x40
 80053ac:	68f8      	ldr	r0, [r7, #12]
 80053ae:	f000 faef 	bl	8005990 <UART_WaitOnFlagUntilTimeout>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d001      	beq.n	80053bc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	e006      	b.n	80053ca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2220      	movs	r2, #32
 80053c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80053c4:	2300      	movs	r3, #0
 80053c6:	e000      	b.n	80053ca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80053c8:	2302      	movs	r3, #2
  }
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3720      	adds	r7, #32
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}

080053d2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053d2:	b580      	push	{r7, lr}
 80053d4:	b084      	sub	sp, #16
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	60f8      	str	r0, [r7, #12]
 80053da:	60b9      	str	r1, [r7, #8]
 80053dc:	4613      	mov	r3, r2
 80053de:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	2b20      	cmp	r3, #32
 80053ea:	d11d      	bne.n	8005428 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d002      	beq.n	80053f8 <HAL_UART_Receive_IT+0x26>
 80053f2:	88fb      	ldrh	r3, [r7, #6]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d101      	bne.n	80053fc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e016      	b.n	800542a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005402:	2b01      	cmp	r3, #1
 8005404:	d101      	bne.n	800540a <HAL_UART_Receive_IT+0x38>
 8005406:	2302      	movs	r3, #2
 8005408:	e00f      	b.n	800542a <HAL_UART_Receive_IT+0x58>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2201      	movs	r2, #1
 800540e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2200      	movs	r2, #0
 8005416:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005418:	88fb      	ldrh	r3, [r7, #6]
 800541a:	461a      	mov	r2, r3
 800541c:	68b9      	ldr	r1, [r7, #8]
 800541e:	68f8      	ldr	r0, [r7, #12]
 8005420:	f000 fb24 	bl	8005a6c <UART_Start_Receive_IT>
 8005424:	4603      	mov	r3, r0
 8005426:	e000      	b.n	800542a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005428:	2302      	movs	r3, #2
  }
}
 800542a:	4618      	mov	r0, r3
 800542c:	3710      	adds	r7, #16
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
	...

08005434 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b0ba      	sub	sp, #232	; 0xe8
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800545a:	2300      	movs	r3, #0
 800545c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005460:	2300      	movs	r3, #0
 8005462:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800546a:	f003 030f 	and.w	r3, r3, #15
 800546e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005472:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005476:	2b00      	cmp	r3, #0
 8005478:	d10f      	bne.n	800549a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800547a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800547e:	f003 0320 	and.w	r3, r3, #32
 8005482:	2b00      	cmp	r3, #0
 8005484:	d009      	beq.n	800549a <HAL_UART_IRQHandler+0x66>
 8005486:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800548a:	f003 0320 	and.w	r3, r3, #32
 800548e:	2b00      	cmp	r3, #0
 8005490:	d003      	beq.n	800549a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 fc03 	bl	8005c9e <UART_Receive_IT>
      return;
 8005498:	e256      	b.n	8005948 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800549a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800549e:	2b00      	cmp	r3, #0
 80054a0:	f000 80de 	beq.w	8005660 <HAL_UART_IRQHandler+0x22c>
 80054a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054a8:	f003 0301 	and.w	r3, r3, #1
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d106      	bne.n	80054be <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80054b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054b4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	f000 80d1 	beq.w	8005660 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80054be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00b      	beq.n	80054e2 <HAL_UART_IRQHandler+0xae>
 80054ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d005      	beq.n	80054e2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054da:	f043 0201 	orr.w	r2, r3, #1
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054e6:	f003 0304 	and.w	r3, r3, #4
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00b      	beq.n	8005506 <HAL_UART_IRQHandler+0xd2>
 80054ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054f2:	f003 0301 	and.w	r3, r3, #1
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d005      	beq.n	8005506 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fe:	f043 0202 	orr.w	r2, r3, #2
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800550a:	f003 0302 	and.w	r3, r3, #2
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00b      	beq.n	800552a <HAL_UART_IRQHandler+0xf6>
 8005512:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005516:	f003 0301 	and.w	r3, r3, #1
 800551a:	2b00      	cmp	r3, #0
 800551c:	d005      	beq.n	800552a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005522:	f043 0204 	orr.w	r2, r3, #4
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800552a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800552e:	f003 0308 	and.w	r3, r3, #8
 8005532:	2b00      	cmp	r3, #0
 8005534:	d011      	beq.n	800555a <HAL_UART_IRQHandler+0x126>
 8005536:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800553a:	f003 0320 	and.w	r3, r3, #32
 800553e:	2b00      	cmp	r3, #0
 8005540:	d105      	bne.n	800554e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005542:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	2b00      	cmp	r3, #0
 800554c:	d005      	beq.n	800555a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005552:	f043 0208 	orr.w	r2, r3, #8
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555e:	2b00      	cmp	r3, #0
 8005560:	f000 81ed 	beq.w	800593e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005564:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005568:	f003 0320 	and.w	r3, r3, #32
 800556c:	2b00      	cmp	r3, #0
 800556e:	d008      	beq.n	8005582 <HAL_UART_IRQHandler+0x14e>
 8005570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005574:	f003 0320 	and.w	r3, r3, #32
 8005578:	2b00      	cmp	r3, #0
 800557a:	d002      	beq.n	8005582 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 fb8e 	bl	8005c9e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	695b      	ldr	r3, [r3, #20]
 8005588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800558c:	2b40      	cmp	r3, #64	; 0x40
 800558e:	bf0c      	ite	eq
 8005590:	2301      	moveq	r3, #1
 8005592:	2300      	movne	r3, #0
 8005594:	b2db      	uxtb	r3, r3
 8005596:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559e:	f003 0308 	and.w	r3, r3, #8
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d103      	bne.n	80055ae <HAL_UART_IRQHandler+0x17a>
 80055a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d04f      	beq.n	800564e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 fa96 	bl	8005ae0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	695b      	ldr	r3, [r3, #20]
 80055ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055be:	2b40      	cmp	r3, #64	; 0x40
 80055c0:	d141      	bne.n	8005646 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	3314      	adds	r3, #20
 80055c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80055d0:	e853 3f00 	ldrex	r3, [r3]
 80055d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80055d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	3314      	adds	r3, #20
 80055ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80055ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80055f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80055fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80055fe:	e841 2300 	strex	r3, r2, [r1]
 8005602:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005606:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1d9      	bne.n	80055c2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005612:	2b00      	cmp	r3, #0
 8005614:	d013      	beq.n	800563e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800561a:	4a7d      	ldr	r2, [pc, #500]	; (8005810 <HAL_UART_IRQHandler+0x3dc>)
 800561c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005622:	4618      	mov	r0, r3
 8005624:	f7fd fcf9 	bl	800301a <HAL_DMA_Abort_IT>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d016      	beq.n	800565c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005638:	4610      	mov	r0, r2
 800563a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800563c:	e00e      	b.n	800565c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 f990 	bl	8005964 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005644:	e00a      	b.n	800565c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 f98c 	bl	8005964 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800564c:	e006      	b.n	800565c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 f988 	bl	8005964 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800565a:	e170      	b.n	800593e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800565c:	bf00      	nop
    return;
 800565e:	e16e      	b.n	800593e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005664:	2b01      	cmp	r3, #1
 8005666:	f040 814a 	bne.w	80058fe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800566a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800566e:	f003 0310 	and.w	r3, r3, #16
 8005672:	2b00      	cmp	r3, #0
 8005674:	f000 8143 	beq.w	80058fe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800567c:	f003 0310 	and.w	r3, r3, #16
 8005680:	2b00      	cmp	r3, #0
 8005682:	f000 813c 	beq.w	80058fe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005686:	2300      	movs	r3, #0
 8005688:	60bb      	str	r3, [r7, #8]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	60bb      	str	r3, [r7, #8]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	60bb      	str	r3, [r7, #8]
 800569a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	695b      	ldr	r3, [r3, #20]
 80056a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056a6:	2b40      	cmp	r3, #64	; 0x40
 80056a8:	f040 80b4 	bne.w	8005814 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80056b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80056bc:	2b00      	cmp	r3, #0
 80056be:	f000 8140 	beq.w	8005942 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80056c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80056ca:	429a      	cmp	r2, r3
 80056cc:	f080 8139 	bcs.w	8005942 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80056d6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056dc:	69db      	ldr	r3, [r3, #28]
 80056de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056e2:	f000 8088 	beq.w	80057f6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	330c      	adds	r3, #12
 80056ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80056f4:	e853 3f00 	ldrex	r3, [r3]
 80056f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80056fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005700:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005704:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	330c      	adds	r3, #12
 800570e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005712:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005716:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800571e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005722:	e841 2300 	strex	r3, r2, [r1]
 8005726:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800572a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800572e:	2b00      	cmp	r3, #0
 8005730:	d1d9      	bne.n	80056e6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	3314      	adds	r3, #20
 8005738:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800573a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800573c:	e853 3f00 	ldrex	r3, [r3]
 8005740:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005742:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005744:	f023 0301 	bic.w	r3, r3, #1
 8005748:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	3314      	adds	r3, #20
 8005752:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005756:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800575a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800575e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005762:	e841 2300 	strex	r3, r2, [r1]
 8005766:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005768:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800576a:	2b00      	cmp	r3, #0
 800576c:	d1e1      	bne.n	8005732 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	3314      	adds	r3, #20
 8005774:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005776:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005778:	e853 3f00 	ldrex	r3, [r3]
 800577c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800577e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005780:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005784:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	3314      	adds	r3, #20
 800578e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005792:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005794:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005796:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005798:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800579a:	e841 2300 	strex	r3, r2, [r1]
 800579e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80057a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1e3      	bne.n	800576e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2220      	movs	r2, #32
 80057aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	330c      	adds	r3, #12
 80057ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057be:	e853 3f00 	ldrex	r3, [r3]
 80057c2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80057c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057c6:	f023 0310 	bic.w	r3, r3, #16
 80057ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	330c      	adds	r3, #12
 80057d4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80057d8:	65ba      	str	r2, [r7, #88]	; 0x58
 80057da:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80057de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80057e0:	e841 2300 	strex	r3, r2, [r1]
 80057e4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80057e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d1e3      	bne.n	80057b4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f0:	4618      	mov	r0, r3
 80057f2:	f7fd fba2 	bl	8002f3a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057fe:	b29b      	uxth	r3, r3
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	b29b      	uxth	r3, r3
 8005804:	4619      	mov	r1, r3
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 f8b6 	bl	8005978 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800580c:	e099      	b.n	8005942 <HAL_UART_IRQHandler+0x50e>
 800580e:	bf00      	nop
 8005810:	08005ba7 	.word	0x08005ba7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800581c:	b29b      	uxth	r3, r3
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005828:	b29b      	uxth	r3, r3
 800582a:	2b00      	cmp	r3, #0
 800582c:	f000 808b 	beq.w	8005946 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005830:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005834:	2b00      	cmp	r3, #0
 8005836:	f000 8086 	beq.w	8005946 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	330c      	adds	r3, #12
 8005840:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005844:	e853 3f00 	ldrex	r3, [r3]
 8005848:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800584a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800584c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005850:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	330c      	adds	r3, #12
 800585a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800585e:	647a      	str	r2, [r7, #68]	; 0x44
 8005860:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005862:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005864:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005866:	e841 2300 	strex	r3, r2, [r1]
 800586a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800586c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800586e:	2b00      	cmp	r3, #0
 8005870:	d1e3      	bne.n	800583a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	3314      	adds	r3, #20
 8005878:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800587a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587c:	e853 3f00 	ldrex	r3, [r3]
 8005880:	623b      	str	r3, [r7, #32]
   return(result);
 8005882:	6a3b      	ldr	r3, [r7, #32]
 8005884:	f023 0301 	bic.w	r3, r3, #1
 8005888:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	3314      	adds	r3, #20
 8005892:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005896:	633a      	str	r2, [r7, #48]	; 0x30
 8005898:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800589a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800589c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800589e:	e841 2300 	strex	r3, r2, [r1]
 80058a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80058a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d1e3      	bne.n	8005872 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2220      	movs	r2, #32
 80058ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	330c      	adds	r3, #12
 80058be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	e853 3f00 	ldrex	r3, [r3]
 80058c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f023 0310 	bic.w	r3, r3, #16
 80058ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	330c      	adds	r3, #12
 80058d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80058dc:	61fa      	str	r2, [r7, #28]
 80058de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e0:	69b9      	ldr	r1, [r7, #24]
 80058e2:	69fa      	ldr	r2, [r7, #28]
 80058e4:	e841 2300 	strex	r3, r2, [r1]
 80058e8:	617b      	str	r3, [r7, #20]
   return(result);
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d1e3      	bne.n	80058b8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80058f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80058f4:	4619      	mov	r1, r3
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 f83e 	bl	8005978 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80058fc:	e023      	b.n	8005946 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80058fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005906:	2b00      	cmp	r3, #0
 8005908:	d009      	beq.n	800591e <HAL_UART_IRQHandler+0x4ea>
 800590a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800590e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005912:	2b00      	cmp	r3, #0
 8005914:	d003      	beq.n	800591e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 f959 	bl	8005bce <UART_Transmit_IT>
    return;
 800591c:	e014      	b.n	8005948 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800591e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00e      	beq.n	8005948 <HAL_UART_IRQHandler+0x514>
 800592a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800592e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005932:	2b00      	cmp	r3, #0
 8005934:	d008      	beq.n	8005948 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 f999 	bl	8005c6e <UART_EndTransmit_IT>
    return;
 800593c:	e004      	b.n	8005948 <HAL_UART_IRQHandler+0x514>
    return;
 800593e:	bf00      	nop
 8005940:	e002      	b.n	8005948 <HAL_UART_IRQHandler+0x514>
      return;
 8005942:	bf00      	nop
 8005944:	e000      	b.n	8005948 <HAL_UART_IRQHandler+0x514>
      return;
 8005946:	bf00      	nop
  }
}
 8005948:	37e8      	adds	r7, #232	; 0xe8
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop

08005950 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005958:	bf00      	nop
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr

08005964 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800596c:	bf00      	nop
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	460b      	mov	r3, r1
 8005982:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005984:	bf00      	nop
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b090      	sub	sp, #64	; 0x40
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	603b      	str	r3, [r7, #0]
 800599c:	4613      	mov	r3, r2
 800599e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059a0:	e050      	b.n	8005a44 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059a8:	d04c      	beq.n	8005a44 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80059aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d007      	beq.n	80059c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80059b0:	f7fc fdb2 	bl	8002518 <HAL_GetTick>
 80059b4:	4602      	mov	r2, r0
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059bc:	429a      	cmp	r2, r3
 80059be:	d241      	bcs.n	8005a44 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	330c      	adds	r3, #12
 80059c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ca:	e853 3f00 	ldrex	r3, [r3]
 80059ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80059d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	330c      	adds	r3, #12
 80059de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80059e0:	637a      	str	r2, [r7, #52]	; 0x34
 80059e2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80059e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059e8:	e841 2300 	strex	r3, r2, [r1]
 80059ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80059ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d1e5      	bne.n	80059c0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	3314      	adds	r3, #20
 80059fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	e853 3f00 	ldrex	r3, [r3]
 8005a02:	613b      	str	r3, [r7, #16]
   return(result);
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	f023 0301 	bic.w	r3, r3, #1
 8005a0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	3314      	adds	r3, #20
 8005a12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a14:	623a      	str	r2, [r7, #32]
 8005a16:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a18:	69f9      	ldr	r1, [r7, #28]
 8005a1a:	6a3a      	ldr	r2, [r7, #32]
 8005a1c:	e841 2300 	strex	r3, r2, [r1]
 8005a20:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d1e5      	bne.n	80059f4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2220      	movs	r2, #32
 8005a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2220      	movs	r2, #32
 8005a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005a40:	2303      	movs	r3, #3
 8005a42:	e00f      	b.n	8005a64 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	68ba      	ldr	r2, [r7, #8]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	bf0c      	ite	eq
 8005a54:	2301      	moveq	r3, #1
 8005a56:	2300      	movne	r3, #0
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	79fb      	ldrb	r3, [r7, #7]
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d09f      	beq.n	80059a2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a62:	2300      	movs	r3, #0
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3740      	adds	r7, #64	; 0x40
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b085      	sub	sp, #20
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	4613      	mov	r3, r2
 8005a78:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	68ba      	ldr	r2, [r7, #8]
 8005a7e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	88fa      	ldrh	r2, [r7, #6]
 8005a84:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	88fa      	ldrh	r2, [r7, #6]
 8005a8a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2222      	movs	r2, #34	; 0x22
 8005a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	68da      	ldr	r2, [r3, #12]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ab0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	695a      	ldr	r2, [r3, #20]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f042 0201 	orr.w	r2, r2, #1
 8005ac0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68da      	ldr	r2, [r3, #12]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f042 0220 	orr.w	r2, r2, #32
 8005ad0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005ad2:	2300      	movs	r3, #0
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3714      	adds	r7, #20
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b095      	sub	sp, #84	; 0x54
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	330c      	adds	r3, #12
 8005aee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005af2:	e853 3f00 	ldrex	r3, [r3]
 8005af6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005afa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005afe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	330c      	adds	r3, #12
 8005b06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b08:	643a      	str	r2, [r7, #64]	; 0x40
 8005b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b10:	e841 2300 	strex	r3, r2, [r1]
 8005b14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d1e5      	bne.n	8005ae8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	3314      	adds	r3, #20
 8005b22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b24:	6a3b      	ldr	r3, [r7, #32]
 8005b26:	e853 3f00 	ldrex	r3, [r3]
 8005b2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	f023 0301 	bic.w	r3, r3, #1
 8005b32:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	3314      	adds	r3, #20
 8005b3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b3c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b44:	e841 2300 	strex	r3, r2, [r1]
 8005b48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d1e5      	bne.n	8005b1c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d119      	bne.n	8005b8c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	330c      	adds	r3, #12
 8005b5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	e853 3f00 	ldrex	r3, [r3]
 8005b66:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	f023 0310 	bic.w	r3, r3, #16
 8005b6e:	647b      	str	r3, [r7, #68]	; 0x44
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	330c      	adds	r3, #12
 8005b76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b78:	61ba      	str	r2, [r7, #24]
 8005b7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b7c:	6979      	ldr	r1, [r7, #20]
 8005b7e:	69ba      	ldr	r2, [r7, #24]
 8005b80:	e841 2300 	strex	r3, r2, [r1]
 8005b84:	613b      	str	r3, [r7, #16]
   return(result);
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d1e5      	bne.n	8005b58 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2220      	movs	r2, #32
 8005b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005b9a:	bf00      	nop
 8005b9c:	3754      	adds	r7, #84	; 0x54
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr

08005ba6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ba6:	b580      	push	{r7, lr}
 8005ba8:	b084      	sub	sp, #16
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005bc0:	68f8      	ldr	r0, [r7, #12]
 8005bc2:	f7ff fecf 	bl	8005964 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bc6:	bf00      	nop
 8005bc8:	3710      	adds	r7, #16
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}

08005bce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005bce:	b480      	push	{r7}
 8005bd0:	b085      	sub	sp, #20
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	2b21      	cmp	r3, #33	; 0x21
 8005be0:	d13e      	bne.n	8005c60 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bea:	d114      	bne.n	8005c16 <UART_Transmit_IT+0x48>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	691b      	ldr	r3, [r3, #16]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d110      	bne.n	8005c16 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6a1b      	ldr	r3, [r3, #32]
 8005bf8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	881b      	ldrh	r3, [r3, #0]
 8005bfe:	461a      	mov	r2, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c08:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a1b      	ldr	r3, [r3, #32]
 8005c0e:	1c9a      	adds	r2, r3, #2
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	621a      	str	r2, [r3, #32]
 8005c14:	e008      	b.n	8005c28 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a1b      	ldr	r3, [r3, #32]
 8005c1a:	1c59      	adds	r1, r3, #1
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	6211      	str	r1, [r2, #32]
 8005c20:	781a      	ldrb	r2, [r3, #0]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	3b01      	subs	r3, #1
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	4619      	mov	r1, r3
 8005c36:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d10f      	bne.n	8005c5c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	68da      	ldr	r2, [r3, #12]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c4a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68da      	ldr	r2, [r3, #12]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c5a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	e000      	b.n	8005c62 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005c60:	2302      	movs	r3, #2
  }
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3714      	adds	r7, #20
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr

08005c6e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c6e:	b580      	push	{r7, lr}
 8005c70:	b082      	sub	sp, #8
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68da      	ldr	r2, [r3, #12]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c84:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2220      	movs	r2, #32
 8005c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f7ff fe5e 	bl	8005950 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3708      	adds	r7, #8
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}

08005c9e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005c9e:	b580      	push	{r7, lr}
 8005ca0:	b08c      	sub	sp, #48	; 0x30
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	2b22      	cmp	r3, #34	; 0x22
 8005cb0:	f040 80ab 	bne.w	8005e0a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cbc:	d117      	bne.n	8005cee <UART_Receive_IT+0x50>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d113      	bne.n	8005cee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cce:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cdc:	b29a      	uxth	r2, r3
 8005cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce6:	1c9a      	adds	r2, r3, #2
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	629a      	str	r2, [r3, #40]	; 0x28
 8005cec:	e026      	b.n	8005d3c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d00:	d007      	beq.n	8005d12 <UART_Receive_IT+0x74>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d10a      	bne.n	8005d20 <UART_Receive_IT+0x82>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	691b      	ldr	r3, [r3, #16]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d106      	bne.n	8005d20 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	b2da      	uxtb	r2, r3
 8005d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d1c:	701a      	strb	r2, [r3, #0]
 8005d1e:	e008      	b.n	8005d32 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d2c:	b2da      	uxtb	r2, r3
 8005d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d30:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d36:	1c5a      	adds	r2, r3, #1
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	3b01      	subs	r3, #1
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	4619      	mov	r1, r3
 8005d4a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d15a      	bne.n	8005e06 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68da      	ldr	r2, [r3, #12]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f022 0220 	bic.w	r2, r2, #32
 8005d5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68da      	ldr	r2, [r3, #12]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	695a      	ldr	r2, [r3, #20]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f022 0201 	bic.w	r2, r2, #1
 8005d7e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2220      	movs	r2, #32
 8005d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d135      	bne.n	8005dfc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	330c      	adds	r3, #12
 8005d9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	e853 3f00 	ldrex	r3, [r3]
 8005da4:	613b      	str	r3, [r7, #16]
   return(result);
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	f023 0310 	bic.w	r3, r3, #16
 8005dac:	627b      	str	r3, [r7, #36]	; 0x24
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	330c      	adds	r3, #12
 8005db4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005db6:	623a      	str	r2, [r7, #32]
 8005db8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dba:	69f9      	ldr	r1, [r7, #28]
 8005dbc:	6a3a      	ldr	r2, [r7, #32]
 8005dbe:	e841 2300 	strex	r3, r2, [r1]
 8005dc2:	61bb      	str	r3, [r7, #24]
   return(result);
 8005dc4:	69bb      	ldr	r3, [r7, #24]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d1e5      	bne.n	8005d96 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0310 	and.w	r3, r3, #16
 8005dd4:	2b10      	cmp	r3, #16
 8005dd6:	d10a      	bne.n	8005dee <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005dd8:	2300      	movs	r3, #0
 8005dda:	60fb      	str	r3, [r7, #12]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	60fb      	str	r3, [r7, #12]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	60fb      	str	r3, [r7, #12]
 8005dec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005df2:	4619      	mov	r1, r3
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f7ff fdbf 	bl	8005978 <HAL_UARTEx_RxEventCallback>
 8005dfa:	e002      	b.n	8005e02 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f7fb ff09 	bl	8001c14 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005e02:	2300      	movs	r3, #0
 8005e04:	e002      	b.n	8005e0c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005e06:	2300      	movs	r3, #0
 8005e08:	e000      	b.n	8005e0c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005e0a:	2302      	movs	r3, #2
  }
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3730      	adds	r7, #48	; 0x30
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e18:	b09f      	sub	sp, #124	; 0x7c
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e2a:	68d9      	ldr	r1, [r3, #12]
 8005e2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	ea40 0301 	orr.w	r3, r0, r1
 8005e34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e38:	689a      	ldr	r2, [r3, #8]
 8005e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e3c:	691b      	ldr	r3, [r3, #16]
 8005e3e:	431a      	orrs	r2, r3
 8005e40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e42:	695b      	ldr	r3, [r3, #20]
 8005e44:	431a      	orrs	r2, r3
 8005e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e48:	69db      	ldr	r3, [r3, #28]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005e4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005e58:	f021 010c 	bic.w	r1, r1, #12
 8005e5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e62:	430b      	orrs	r3, r1
 8005e64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	695b      	ldr	r3, [r3, #20]
 8005e6c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005e70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e72:	6999      	ldr	r1, [r3, #24]
 8005e74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	ea40 0301 	orr.w	r3, r0, r1
 8005e7c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	4bc5      	ldr	r3, [pc, #788]	; (8006198 <UART_SetConfig+0x384>)
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d004      	beq.n	8005e92 <UART_SetConfig+0x7e>
 8005e88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	4bc3      	ldr	r3, [pc, #780]	; (800619c <UART_SetConfig+0x388>)
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d103      	bne.n	8005e9a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e92:	f7fd fb99 	bl	80035c8 <HAL_RCC_GetPCLK2Freq>
 8005e96:	6778      	str	r0, [r7, #116]	; 0x74
 8005e98:	e002      	b.n	8005ea0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e9a:	f7fd fb81 	bl	80035a0 <HAL_RCC_GetPCLK1Freq>
 8005e9e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ea2:	69db      	ldr	r3, [r3, #28]
 8005ea4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ea8:	f040 80b6 	bne.w	8006018 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005eac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005eae:	461c      	mov	r4, r3
 8005eb0:	f04f 0500 	mov.w	r5, #0
 8005eb4:	4622      	mov	r2, r4
 8005eb6:	462b      	mov	r3, r5
 8005eb8:	1891      	adds	r1, r2, r2
 8005eba:	6439      	str	r1, [r7, #64]	; 0x40
 8005ebc:	415b      	adcs	r3, r3
 8005ebe:	647b      	str	r3, [r7, #68]	; 0x44
 8005ec0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005ec4:	1912      	adds	r2, r2, r4
 8005ec6:	eb45 0303 	adc.w	r3, r5, r3
 8005eca:	f04f 0000 	mov.w	r0, #0
 8005ece:	f04f 0100 	mov.w	r1, #0
 8005ed2:	00d9      	lsls	r1, r3, #3
 8005ed4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ed8:	00d0      	lsls	r0, r2, #3
 8005eda:	4602      	mov	r2, r0
 8005edc:	460b      	mov	r3, r1
 8005ede:	1911      	adds	r1, r2, r4
 8005ee0:	6639      	str	r1, [r7, #96]	; 0x60
 8005ee2:	416b      	adcs	r3, r5
 8005ee4:	667b      	str	r3, [r7, #100]	; 0x64
 8005ee6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	461a      	mov	r2, r3
 8005eec:	f04f 0300 	mov.w	r3, #0
 8005ef0:	1891      	adds	r1, r2, r2
 8005ef2:	63b9      	str	r1, [r7, #56]	; 0x38
 8005ef4:	415b      	adcs	r3, r3
 8005ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ef8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005efc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005f00:	f7fa fee2 	bl	8000cc8 <__aeabi_uldivmod>
 8005f04:	4602      	mov	r2, r0
 8005f06:	460b      	mov	r3, r1
 8005f08:	4ba5      	ldr	r3, [pc, #660]	; (80061a0 <UART_SetConfig+0x38c>)
 8005f0a:	fba3 2302 	umull	r2, r3, r3, r2
 8005f0e:	095b      	lsrs	r3, r3, #5
 8005f10:	011e      	lsls	r6, r3, #4
 8005f12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f14:	461c      	mov	r4, r3
 8005f16:	f04f 0500 	mov.w	r5, #0
 8005f1a:	4622      	mov	r2, r4
 8005f1c:	462b      	mov	r3, r5
 8005f1e:	1891      	adds	r1, r2, r2
 8005f20:	6339      	str	r1, [r7, #48]	; 0x30
 8005f22:	415b      	adcs	r3, r3
 8005f24:	637b      	str	r3, [r7, #52]	; 0x34
 8005f26:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005f2a:	1912      	adds	r2, r2, r4
 8005f2c:	eb45 0303 	adc.w	r3, r5, r3
 8005f30:	f04f 0000 	mov.w	r0, #0
 8005f34:	f04f 0100 	mov.w	r1, #0
 8005f38:	00d9      	lsls	r1, r3, #3
 8005f3a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f3e:	00d0      	lsls	r0, r2, #3
 8005f40:	4602      	mov	r2, r0
 8005f42:	460b      	mov	r3, r1
 8005f44:	1911      	adds	r1, r2, r4
 8005f46:	65b9      	str	r1, [r7, #88]	; 0x58
 8005f48:	416b      	adcs	r3, r5
 8005f4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	461a      	mov	r2, r3
 8005f52:	f04f 0300 	mov.w	r3, #0
 8005f56:	1891      	adds	r1, r2, r2
 8005f58:	62b9      	str	r1, [r7, #40]	; 0x28
 8005f5a:	415b      	adcs	r3, r3
 8005f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005f62:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005f66:	f7fa feaf 	bl	8000cc8 <__aeabi_uldivmod>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	4b8c      	ldr	r3, [pc, #560]	; (80061a0 <UART_SetConfig+0x38c>)
 8005f70:	fba3 1302 	umull	r1, r3, r3, r2
 8005f74:	095b      	lsrs	r3, r3, #5
 8005f76:	2164      	movs	r1, #100	; 0x64
 8005f78:	fb01 f303 	mul.w	r3, r1, r3
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	00db      	lsls	r3, r3, #3
 8005f80:	3332      	adds	r3, #50	; 0x32
 8005f82:	4a87      	ldr	r2, [pc, #540]	; (80061a0 <UART_SetConfig+0x38c>)
 8005f84:	fba2 2303 	umull	r2, r3, r2, r3
 8005f88:	095b      	lsrs	r3, r3, #5
 8005f8a:	005b      	lsls	r3, r3, #1
 8005f8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f90:	441e      	add	r6, r3
 8005f92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f94:	4618      	mov	r0, r3
 8005f96:	f04f 0100 	mov.w	r1, #0
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	460b      	mov	r3, r1
 8005f9e:	1894      	adds	r4, r2, r2
 8005fa0:	623c      	str	r4, [r7, #32]
 8005fa2:	415b      	adcs	r3, r3
 8005fa4:	627b      	str	r3, [r7, #36]	; 0x24
 8005fa6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005faa:	1812      	adds	r2, r2, r0
 8005fac:	eb41 0303 	adc.w	r3, r1, r3
 8005fb0:	f04f 0400 	mov.w	r4, #0
 8005fb4:	f04f 0500 	mov.w	r5, #0
 8005fb8:	00dd      	lsls	r5, r3, #3
 8005fba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005fbe:	00d4      	lsls	r4, r2, #3
 8005fc0:	4622      	mov	r2, r4
 8005fc2:	462b      	mov	r3, r5
 8005fc4:	1814      	adds	r4, r2, r0
 8005fc6:	653c      	str	r4, [r7, #80]	; 0x50
 8005fc8:	414b      	adcs	r3, r1
 8005fca:	657b      	str	r3, [r7, #84]	; 0x54
 8005fcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	f04f 0300 	mov.w	r3, #0
 8005fd6:	1891      	adds	r1, r2, r2
 8005fd8:	61b9      	str	r1, [r7, #24]
 8005fda:	415b      	adcs	r3, r3
 8005fdc:	61fb      	str	r3, [r7, #28]
 8005fde:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005fe2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005fe6:	f7fa fe6f 	bl	8000cc8 <__aeabi_uldivmod>
 8005fea:	4602      	mov	r2, r0
 8005fec:	460b      	mov	r3, r1
 8005fee:	4b6c      	ldr	r3, [pc, #432]	; (80061a0 <UART_SetConfig+0x38c>)
 8005ff0:	fba3 1302 	umull	r1, r3, r3, r2
 8005ff4:	095b      	lsrs	r3, r3, #5
 8005ff6:	2164      	movs	r1, #100	; 0x64
 8005ff8:	fb01 f303 	mul.w	r3, r1, r3
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	00db      	lsls	r3, r3, #3
 8006000:	3332      	adds	r3, #50	; 0x32
 8006002:	4a67      	ldr	r2, [pc, #412]	; (80061a0 <UART_SetConfig+0x38c>)
 8006004:	fba2 2303 	umull	r2, r3, r2, r3
 8006008:	095b      	lsrs	r3, r3, #5
 800600a:	f003 0207 	and.w	r2, r3, #7
 800600e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4432      	add	r2, r6
 8006014:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006016:	e0b9      	b.n	800618c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006018:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800601a:	461c      	mov	r4, r3
 800601c:	f04f 0500 	mov.w	r5, #0
 8006020:	4622      	mov	r2, r4
 8006022:	462b      	mov	r3, r5
 8006024:	1891      	adds	r1, r2, r2
 8006026:	6139      	str	r1, [r7, #16]
 8006028:	415b      	adcs	r3, r3
 800602a:	617b      	str	r3, [r7, #20]
 800602c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006030:	1912      	adds	r2, r2, r4
 8006032:	eb45 0303 	adc.w	r3, r5, r3
 8006036:	f04f 0000 	mov.w	r0, #0
 800603a:	f04f 0100 	mov.w	r1, #0
 800603e:	00d9      	lsls	r1, r3, #3
 8006040:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006044:	00d0      	lsls	r0, r2, #3
 8006046:	4602      	mov	r2, r0
 8006048:	460b      	mov	r3, r1
 800604a:	eb12 0804 	adds.w	r8, r2, r4
 800604e:	eb43 0905 	adc.w	r9, r3, r5
 8006052:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	4618      	mov	r0, r3
 8006058:	f04f 0100 	mov.w	r1, #0
 800605c:	f04f 0200 	mov.w	r2, #0
 8006060:	f04f 0300 	mov.w	r3, #0
 8006064:	008b      	lsls	r3, r1, #2
 8006066:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800606a:	0082      	lsls	r2, r0, #2
 800606c:	4640      	mov	r0, r8
 800606e:	4649      	mov	r1, r9
 8006070:	f7fa fe2a 	bl	8000cc8 <__aeabi_uldivmod>
 8006074:	4602      	mov	r2, r0
 8006076:	460b      	mov	r3, r1
 8006078:	4b49      	ldr	r3, [pc, #292]	; (80061a0 <UART_SetConfig+0x38c>)
 800607a:	fba3 2302 	umull	r2, r3, r3, r2
 800607e:	095b      	lsrs	r3, r3, #5
 8006080:	011e      	lsls	r6, r3, #4
 8006082:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006084:	4618      	mov	r0, r3
 8006086:	f04f 0100 	mov.w	r1, #0
 800608a:	4602      	mov	r2, r0
 800608c:	460b      	mov	r3, r1
 800608e:	1894      	adds	r4, r2, r2
 8006090:	60bc      	str	r4, [r7, #8]
 8006092:	415b      	adcs	r3, r3
 8006094:	60fb      	str	r3, [r7, #12]
 8006096:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800609a:	1812      	adds	r2, r2, r0
 800609c:	eb41 0303 	adc.w	r3, r1, r3
 80060a0:	f04f 0400 	mov.w	r4, #0
 80060a4:	f04f 0500 	mov.w	r5, #0
 80060a8:	00dd      	lsls	r5, r3, #3
 80060aa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80060ae:	00d4      	lsls	r4, r2, #3
 80060b0:	4622      	mov	r2, r4
 80060b2:	462b      	mov	r3, r5
 80060b4:	1814      	adds	r4, r2, r0
 80060b6:	64bc      	str	r4, [r7, #72]	; 0x48
 80060b8:	414b      	adcs	r3, r1
 80060ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	4618      	mov	r0, r3
 80060c2:	f04f 0100 	mov.w	r1, #0
 80060c6:	f04f 0200 	mov.w	r2, #0
 80060ca:	f04f 0300 	mov.w	r3, #0
 80060ce:	008b      	lsls	r3, r1, #2
 80060d0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80060d4:	0082      	lsls	r2, r0, #2
 80060d6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80060da:	f7fa fdf5 	bl	8000cc8 <__aeabi_uldivmod>
 80060de:	4602      	mov	r2, r0
 80060e0:	460b      	mov	r3, r1
 80060e2:	4b2f      	ldr	r3, [pc, #188]	; (80061a0 <UART_SetConfig+0x38c>)
 80060e4:	fba3 1302 	umull	r1, r3, r3, r2
 80060e8:	095b      	lsrs	r3, r3, #5
 80060ea:	2164      	movs	r1, #100	; 0x64
 80060ec:	fb01 f303 	mul.w	r3, r1, r3
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	011b      	lsls	r3, r3, #4
 80060f4:	3332      	adds	r3, #50	; 0x32
 80060f6:	4a2a      	ldr	r2, [pc, #168]	; (80061a0 <UART_SetConfig+0x38c>)
 80060f8:	fba2 2303 	umull	r2, r3, r2, r3
 80060fc:	095b      	lsrs	r3, r3, #5
 80060fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006102:	441e      	add	r6, r3
 8006104:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006106:	4618      	mov	r0, r3
 8006108:	f04f 0100 	mov.w	r1, #0
 800610c:	4602      	mov	r2, r0
 800610e:	460b      	mov	r3, r1
 8006110:	1894      	adds	r4, r2, r2
 8006112:	603c      	str	r4, [r7, #0]
 8006114:	415b      	adcs	r3, r3
 8006116:	607b      	str	r3, [r7, #4]
 8006118:	e9d7 2300 	ldrd	r2, r3, [r7]
 800611c:	1812      	adds	r2, r2, r0
 800611e:	eb41 0303 	adc.w	r3, r1, r3
 8006122:	f04f 0400 	mov.w	r4, #0
 8006126:	f04f 0500 	mov.w	r5, #0
 800612a:	00dd      	lsls	r5, r3, #3
 800612c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006130:	00d4      	lsls	r4, r2, #3
 8006132:	4622      	mov	r2, r4
 8006134:	462b      	mov	r3, r5
 8006136:	eb12 0a00 	adds.w	sl, r2, r0
 800613a:	eb43 0b01 	adc.w	fp, r3, r1
 800613e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	4618      	mov	r0, r3
 8006144:	f04f 0100 	mov.w	r1, #0
 8006148:	f04f 0200 	mov.w	r2, #0
 800614c:	f04f 0300 	mov.w	r3, #0
 8006150:	008b      	lsls	r3, r1, #2
 8006152:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006156:	0082      	lsls	r2, r0, #2
 8006158:	4650      	mov	r0, sl
 800615a:	4659      	mov	r1, fp
 800615c:	f7fa fdb4 	bl	8000cc8 <__aeabi_uldivmod>
 8006160:	4602      	mov	r2, r0
 8006162:	460b      	mov	r3, r1
 8006164:	4b0e      	ldr	r3, [pc, #56]	; (80061a0 <UART_SetConfig+0x38c>)
 8006166:	fba3 1302 	umull	r1, r3, r3, r2
 800616a:	095b      	lsrs	r3, r3, #5
 800616c:	2164      	movs	r1, #100	; 0x64
 800616e:	fb01 f303 	mul.w	r3, r1, r3
 8006172:	1ad3      	subs	r3, r2, r3
 8006174:	011b      	lsls	r3, r3, #4
 8006176:	3332      	adds	r3, #50	; 0x32
 8006178:	4a09      	ldr	r2, [pc, #36]	; (80061a0 <UART_SetConfig+0x38c>)
 800617a:	fba2 2303 	umull	r2, r3, r2, r3
 800617e:	095b      	lsrs	r3, r3, #5
 8006180:	f003 020f 	and.w	r2, r3, #15
 8006184:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4432      	add	r2, r6
 800618a:	609a      	str	r2, [r3, #8]
}
 800618c:	bf00      	nop
 800618e:	377c      	adds	r7, #124	; 0x7c
 8006190:	46bd      	mov	sp, r7
 8006192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006196:	bf00      	nop
 8006198:	40011000 	.word	0x40011000
 800619c:	40011400 	.word	0x40011400
 80061a0:	51eb851f 	.word	0x51eb851f

080061a4 <atof>:
 80061a4:	2100      	movs	r1, #0
 80061a6:	f001 bb51 	b.w	800784c <strtod>
	...

080061ac <__errno>:
 80061ac:	4b01      	ldr	r3, [pc, #4]	; (80061b4 <__errno+0x8>)
 80061ae:	6818      	ldr	r0, [r3, #0]
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop
 80061b4:	20000028 	.word	0x20000028

080061b8 <__libc_init_array>:
 80061b8:	b570      	push	{r4, r5, r6, lr}
 80061ba:	4d0d      	ldr	r5, [pc, #52]	; (80061f0 <__libc_init_array+0x38>)
 80061bc:	4c0d      	ldr	r4, [pc, #52]	; (80061f4 <__libc_init_array+0x3c>)
 80061be:	1b64      	subs	r4, r4, r5
 80061c0:	10a4      	asrs	r4, r4, #2
 80061c2:	2600      	movs	r6, #0
 80061c4:	42a6      	cmp	r6, r4
 80061c6:	d109      	bne.n	80061dc <__libc_init_array+0x24>
 80061c8:	4d0b      	ldr	r5, [pc, #44]	; (80061f8 <__libc_init_array+0x40>)
 80061ca:	4c0c      	ldr	r4, [pc, #48]	; (80061fc <__libc_init_array+0x44>)
 80061cc:	f004 f876 	bl	800a2bc <_init>
 80061d0:	1b64      	subs	r4, r4, r5
 80061d2:	10a4      	asrs	r4, r4, #2
 80061d4:	2600      	movs	r6, #0
 80061d6:	42a6      	cmp	r6, r4
 80061d8:	d105      	bne.n	80061e6 <__libc_init_array+0x2e>
 80061da:	bd70      	pop	{r4, r5, r6, pc}
 80061dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80061e0:	4798      	blx	r3
 80061e2:	3601      	adds	r6, #1
 80061e4:	e7ee      	b.n	80061c4 <__libc_init_array+0xc>
 80061e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80061ea:	4798      	blx	r3
 80061ec:	3601      	adds	r6, #1
 80061ee:	e7f2      	b.n	80061d6 <__libc_init_array+0x1e>
 80061f0:	0800a87c 	.word	0x0800a87c
 80061f4:	0800a87c 	.word	0x0800a87c
 80061f8:	0800a87c 	.word	0x0800a87c
 80061fc:	0800a880 	.word	0x0800a880

08006200 <memset>:
 8006200:	4402      	add	r2, r0
 8006202:	4603      	mov	r3, r0
 8006204:	4293      	cmp	r3, r2
 8006206:	d100      	bne.n	800620a <memset+0xa>
 8006208:	4770      	bx	lr
 800620a:	f803 1b01 	strb.w	r1, [r3], #1
 800620e:	e7f9      	b.n	8006204 <memset+0x4>

08006210 <__cvt>:
 8006210:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006214:	ec55 4b10 	vmov	r4, r5, d0
 8006218:	2d00      	cmp	r5, #0
 800621a:	460e      	mov	r6, r1
 800621c:	4619      	mov	r1, r3
 800621e:	462b      	mov	r3, r5
 8006220:	bfbb      	ittet	lt
 8006222:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006226:	461d      	movlt	r5, r3
 8006228:	2300      	movge	r3, #0
 800622a:	232d      	movlt	r3, #45	; 0x2d
 800622c:	700b      	strb	r3, [r1, #0]
 800622e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006230:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006234:	4691      	mov	r9, r2
 8006236:	f023 0820 	bic.w	r8, r3, #32
 800623a:	bfbc      	itt	lt
 800623c:	4622      	movlt	r2, r4
 800623e:	4614      	movlt	r4, r2
 8006240:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006244:	d005      	beq.n	8006252 <__cvt+0x42>
 8006246:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800624a:	d100      	bne.n	800624e <__cvt+0x3e>
 800624c:	3601      	adds	r6, #1
 800624e:	2102      	movs	r1, #2
 8006250:	e000      	b.n	8006254 <__cvt+0x44>
 8006252:	2103      	movs	r1, #3
 8006254:	ab03      	add	r3, sp, #12
 8006256:	9301      	str	r3, [sp, #4]
 8006258:	ab02      	add	r3, sp, #8
 800625a:	9300      	str	r3, [sp, #0]
 800625c:	ec45 4b10 	vmov	d0, r4, r5
 8006260:	4653      	mov	r3, sl
 8006262:	4632      	mov	r2, r6
 8006264:	f001 fc4c 	bl	8007b00 <_dtoa_r>
 8006268:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800626c:	4607      	mov	r7, r0
 800626e:	d102      	bne.n	8006276 <__cvt+0x66>
 8006270:	f019 0f01 	tst.w	r9, #1
 8006274:	d022      	beq.n	80062bc <__cvt+0xac>
 8006276:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800627a:	eb07 0906 	add.w	r9, r7, r6
 800627e:	d110      	bne.n	80062a2 <__cvt+0x92>
 8006280:	783b      	ldrb	r3, [r7, #0]
 8006282:	2b30      	cmp	r3, #48	; 0x30
 8006284:	d10a      	bne.n	800629c <__cvt+0x8c>
 8006286:	2200      	movs	r2, #0
 8006288:	2300      	movs	r3, #0
 800628a:	4620      	mov	r0, r4
 800628c:	4629      	mov	r1, r5
 800628e:	f7fa fc3b 	bl	8000b08 <__aeabi_dcmpeq>
 8006292:	b918      	cbnz	r0, 800629c <__cvt+0x8c>
 8006294:	f1c6 0601 	rsb	r6, r6, #1
 8006298:	f8ca 6000 	str.w	r6, [sl]
 800629c:	f8da 3000 	ldr.w	r3, [sl]
 80062a0:	4499      	add	r9, r3
 80062a2:	2200      	movs	r2, #0
 80062a4:	2300      	movs	r3, #0
 80062a6:	4620      	mov	r0, r4
 80062a8:	4629      	mov	r1, r5
 80062aa:	f7fa fc2d 	bl	8000b08 <__aeabi_dcmpeq>
 80062ae:	b108      	cbz	r0, 80062b4 <__cvt+0xa4>
 80062b0:	f8cd 900c 	str.w	r9, [sp, #12]
 80062b4:	2230      	movs	r2, #48	; 0x30
 80062b6:	9b03      	ldr	r3, [sp, #12]
 80062b8:	454b      	cmp	r3, r9
 80062ba:	d307      	bcc.n	80062cc <__cvt+0xbc>
 80062bc:	9b03      	ldr	r3, [sp, #12]
 80062be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80062c0:	1bdb      	subs	r3, r3, r7
 80062c2:	4638      	mov	r0, r7
 80062c4:	6013      	str	r3, [r2, #0]
 80062c6:	b004      	add	sp, #16
 80062c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062cc:	1c59      	adds	r1, r3, #1
 80062ce:	9103      	str	r1, [sp, #12]
 80062d0:	701a      	strb	r2, [r3, #0]
 80062d2:	e7f0      	b.n	80062b6 <__cvt+0xa6>

080062d4 <__exponent>:
 80062d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80062d6:	4603      	mov	r3, r0
 80062d8:	2900      	cmp	r1, #0
 80062da:	bfb8      	it	lt
 80062dc:	4249      	neglt	r1, r1
 80062de:	f803 2b02 	strb.w	r2, [r3], #2
 80062e2:	bfb4      	ite	lt
 80062e4:	222d      	movlt	r2, #45	; 0x2d
 80062e6:	222b      	movge	r2, #43	; 0x2b
 80062e8:	2909      	cmp	r1, #9
 80062ea:	7042      	strb	r2, [r0, #1]
 80062ec:	dd2a      	ble.n	8006344 <__exponent+0x70>
 80062ee:	f10d 0407 	add.w	r4, sp, #7
 80062f2:	46a4      	mov	ip, r4
 80062f4:	270a      	movs	r7, #10
 80062f6:	46a6      	mov	lr, r4
 80062f8:	460a      	mov	r2, r1
 80062fa:	fb91 f6f7 	sdiv	r6, r1, r7
 80062fe:	fb07 1516 	mls	r5, r7, r6, r1
 8006302:	3530      	adds	r5, #48	; 0x30
 8006304:	2a63      	cmp	r2, #99	; 0x63
 8006306:	f104 34ff 	add.w	r4, r4, #4294967295
 800630a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800630e:	4631      	mov	r1, r6
 8006310:	dcf1      	bgt.n	80062f6 <__exponent+0x22>
 8006312:	3130      	adds	r1, #48	; 0x30
 8006314:	f1ae 0502 	sub.w	r5, lr, #2
 8006318:	f804 1c01 	strb.w	r1, [r4, #-1]
 800631c:	1c44      	adds	r4, r0, #1
 800631e:	4629      	mov	r1, r5
 8006320:	4561      	cmp	r1, ip
 8006322:	d30a      	bcc.n	800633a <__exponent+0x66>
 8006324:	f10d 0209 	add.w	r2, sp, #9
 8006328:	eba2 020e 	sub.w	r2, r2, lr
 800632c:	4565      	cmp	r5, ip
 800632e:	bf88      	it	hi
 8006330:	2200      	movhi	r2, #0
 8006332:	4413      	add	r3, r2
 8006334:	1a18      	subs	r0, r3, r0
 8006336:	b003      	add	sp, #12
 8006338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800633a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800633e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006342:	e7ed      	b.n	8006320 <__exponent+0x4c>
 8006344:	2330      	movs	r3, #48	; 0x30
 8006346:	3130      	adds	r1, #48	; 0x30
 8006348:	7083      	strb	r3, [r0, #2]
 800634a:	70c1      	strb	r1, [r0, #3]
 800634c:	1d03      	adds	r3, r0, #4
 800634e:	e7f1      	b.n	8006334 <__exponent+0x60>

08006350 <_printf_float>:
 8006350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006354:	ed2d 8b02 	vpush	{d8}
 8006358:	b08d      	sub	sp, #52	; 0x34
 800635a:	460c      	mov	r4, r1
 800635c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006360:	4616      	mov	r6, r2
 8006362:	461f      	mov	r7, r3
 8006364:	4605      	mov	r5, r0
 8006366:	f002 fedd 	bl	8009124 <_localeconv_r>
 800636a:	f8d0 a000 	ldr.w	sl, [r0]
 800636e:	4650      	mov	r0, sl
 8006370:	f7f9 ff4e 	bl	8000210 <strlen>
 8006374:	2300      	movs	r3, #0
 8006376:	930a      	str	r3, [sp, #40]	; 0x28
 8006378:	6823      	ldr	r3, [r4, #0]
 800637a:	9305      	str	r3, [sp, #20]
 800637c:	f8d8 3000 	ldr.w	r3, [r8]
 8006380:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006384:	3307      	adds	r3, #7
 8006386:	f023 0307 	bic.w	r3, r3, #7
 800638a:	f103 0208 	add.w	r2, r3, #8
 800638e:	f8c8 2000 	str.w	r2, [r8]
 8006392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006396:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800639a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800639e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80063a2:	9307      	str	r3, [sp, #28]
 80063a4:	f8cd 8018 	str.w	r8, [sp, #24]
 80063a8:	ee08 0a10 	vmov	s16, r0
 80063ac:	4b9f      	ldr	r3, [pc, #636]	; (800662c <_printf_float+0x2dc>)
 80063ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80063b2:	f04f 32ff 	mov.w	r2, #4294967295
 80063b6:	f7fa fbd9 	bl	8000b6c <__aeabi_dcmpun>
 80063ba:	bb88      	cbnz	r0, 8006420 <_printf_float+0xd0>
 80063bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80063c0:	4b9a      	ldr	r3, [pc, #616]	; (800662c <_printf_float+0x2dc>)
 80063c2:	f04f 32ff 	mov.w	r2, #4294967295
 80063c6:	f7fa fbb3 	bl	8000b30 <__aeabi_dcmple>
 80063ca:	bb48      	cbnz	r0, 8006420 <_printf_float+0xd0>
 80063cc:	2200      	movs	r2, #0
 80063ce:	2300      	movs	r3, #0
 80063d0:	4640      	mov	r0, r8
 80063d2:	4649      	mov	r1, r9
 80063d4:	f7fa fba2 	bl	8000b1c <__aeabi_dcmplt>
 80063d8:	b110      	cbz	r0, 80063e0 <_printf_float+0x90>
 80063da:	232d      	movs	r3, #45	; 0x2d
 80063dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063e0:	4b93      	ldr	r3, [pc, #588]	; (8006630 <_printf_float+0x2e0>)
 80063e2:	4894      	ldr	r0, [pc, #592]	; (8006634 <_printf_float+0x2e4>)
 80063e4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80063e8:	bf94      	ite	ls
 80063ea:	4698      	movls	r8, r3
 80063ec:	4680      	movhi	r8, r0
 80063ee:	2303      	movs	r3, #3
 80063f0:	6123      	str	r3, [r4, #16]
 80063f2:	9b05      	ldr	r3, [sp, #20]
 80063f4:	f023 0204 	bic.w	r2, r3, #4
 80063f8:	6022      	str	r2, [r4, #0]
 80063fa:	f04f 0900 	mov.w	r9, #0
 80063fe:	9700      	str	r7, [sp, #0]
 8006400:	4633      	mov	r3, r6
 8006402:	aa0b      	add	r2, sp, #44	; 0x2c
 8006404:	4621      	mov	r1, r4
 8006406:	4628      	mov	r0, r5
 8006408:	f000 f9d8 	bl	80067bc <_printf_common>
 800640c:	3001      	adds	r0, #1
 800640e:	f040 8090 	bne.w	8006532 <_printf_float+0x1e2>
 8006412:	f04f 30ff 	mov.w	r0, #4294967295
 8006416:	b00d      	add	sp, #52	; 0x34
 8006418:	ecbd 8b02 	vpop	{d8}
 800641c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006420:	4642      	mov	r2, r8
 8006422:	464b      	mov	r3, r9
 8006424:	4640      	mov	r0, r8
 8006426:	4649      	mov	r1, r9
 8006428:	f7fa fba0 	bl	8000b6c <__aeabi_dcmpun>
 800642c:	b140      	cbz	r0, 8006440 <_printf_float+0xf0>
 800642e:	464b      	mov	r3, r9
 8006430:	2b00      	cmp	r3, #0
 8006432:	bfbc      	itt	lt
 8006434:	232d      	movlt	r3, #45	; 0x2d
 8006436:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800643a:	487f      	ldr	r0, [pc, #508]	; (8006638 <_printf_float+0x2e8>)
 800643c:	4b7f      	ldr	r3, [pc, #508]	; (800663c <_printf_float+0x2ec>)
 800643e:	e7d1      	b.n	80063e4 <_printf_float+0x94>
 8006440:	6863      	ldr	r3, [r4, #4]
 8006442:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006446:	9206      	str	r2, [sp, #24]
 8006448:	1c5a      	adds	r2, r3, #1
 800644a:	d13f      	bne.n	80064cc <_printf_float+0x17c>
 800644c:	2306      	movs	r3, #6
 800644e:	6063      	str	r3, [r4, #4]
 8006450:	9b05      	ldr	r3, [sp, #20]
 8006452:	6861      	ldr	r1, [r4, #4]
 8006454:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006458:	2300      	movs	r3, #0
 800645a:	9303      	str	r3, [sp, #12]
 800645c:	ab0a      	add	r3, sp, #40	; 0x28
 800645e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006462:	ab09      	add	r3, sp, #36	; 0x24
 8006464:	ec49 8b10 	vmov	d0, r8, r9
 8006468:	9300      	str	r3, [sp, #0]
 800646a:	6022      	str	r2, [r4, #0]
 800646c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006470:	4628      	mov	r0, r5
 8006472:	f7ff fecd 	bl	8006210 <__cvt>
 8006476:	9b06      	ldr	r3, [sp, #24]
 8006478:	9909      	ldr	r1, [sp, #36]	; 0x24
 800647a:	2b47      	cmp	r3, #71	; 0x47
 800647c:	4680      	mov	r8, r0
 800647e:	d108      	bne.n	8006492 <_printf_float+0x142>
 8006480:	1cc8      	adds	r0, r1, #3
 8006482:	db02      	blt.n	800648a <_printf_float+0x13a>
 8006484:	6863      	ldr	r3, [r4, #4]
 8006486:	4299      	cmp	r1, r3
 8006488:	dd41      	ble.n	800650e <_printf_float+0x1be>
 800648a:	f1ab 0b02 	sub.w	fp, fp, #2
 800648e:	fa5f fb8b 	uxtb.w	fp, fp
 8006492:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006496:	d820      	bhi.n	80064da <_printf_float+0x18a>
 8006498:	3901      	subs	r1, #1
 800649a:	465a      	mov	r2, fp
 800649c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80064a0:	9109      	str	r1, [sp, #36]	; 0x24
 80064a2:	f7ff ff17 	bl	80062d4 <__exponent>
 80064a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064a8:	1813      	adds	r3, r2, r0
 80064aa:	2a01      	cmp	r2, #1
 80064ac:	4681      	mov	r9, r0
 80064ae:	6123      	str	r3, [r4, #16]
 80064b0:	dc02      	bgt.n	80064b8 <_printf_float+0x168>
 80064b2:	6822      	ldr	r2, [r4, #0]
 80064b4:	07d2      	lsls	r2, r2, #31
 80064b6:	d501      	bpl.n	80064bc <_printf_float+0x16c>
 80064b8:	3301      	adds	r3, #1
 80064ba:	6123      	str	r3, [r4, #16]
 80064bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d09c      	beq.n	80063fe <_printf_float+0xae>
 80064c4:	232d      	movs	r3, #45	; 0x2d
 80064c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064ca:	e798      	b.n	80063fe <_printf_float+0xae>
 80064cc:	9a06      	ldr	r2, [sp, #24]
 80064ce:	2a47      	cmp	r2, #71	; 0x47
 80064d0:	d1be      	bne.n	8006450 <_printf_float+0x100>
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d1bc      	bne.n	8006450 <_printf_float+0x100>
 80064d6:	2301      	movs	r3, #1
 80064d8:	e7b9      	b.n	800644e <_printf_float+0xfe>
 80064da:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80064de:	d118      	bne.n	8006512 <_printf_float+0x1c2>
 80064e0:	2900      	cmp	r1, #0
 80064e2:	6863      	ldr	r3, [r4, #4]
 80064e4:	dd0b      	ble.n	80064fe <_printf_float+0x1ae>
 80064e6:	6121      	str	r1, [r4, #16]
 80064e8:	b913      	cbnz	r3, 80064f0 <_printf_float+0x1a0>
 80064ea:	6822      	ldr	r2, [r4, #0]
 80064ec:	07d0      	lsls	r0, r2, #31
 80064ee:	d502      	bpl.n	80064f6 <_printf_float+0x1a6>
 80064f0:	3301      	adds	r3, #1
 80064f2:	440b      	add	r3, r1
 80064f4:	6123      	str	r3, [r4, #16]
 80064f6:	65a1      	str	r1, [r4, #88]	; 0x58
 80064f8:	f04f 0900 	mov.w	r9, #0
 80064fc:	e7de      	b.n	80064bc <_printf_float+0x16c>
 80064fe:	b913      	cbnz	r3, 8006506 <_printf_float+0x1b6>
 8006500:	6822      	ldr	r2, [r4, #0]
 8006502:	07d2      	lsls	r2, r2, #31
 8006504:	d501      	bpl.n	800650a <_printf_float+0x1ba>
 8006506:	3302      	adds	r3, #2
 8006508:	e7f4      	b.n	80064f4 <_printf_float+0x1a4>
 800650a:	2301      	movs	r3, #1
 800650c:	e7f2      	b.n	80064f4 <_printf_float+0x1a4>
 800650e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006512:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006514:	4299      	cmp	r1, r3
 8006516:	db05      	blt.n	8006524 <_printf_float+0x1d4>
 8006518:	6823      	ldr	r3, [r4, #0]
 800651a:	6121      	str	r1, [r4, #16]
 800651c:	07d8      	lsls	r0, r3, #31
 800651e:	d5ea      	bpl.n	80064f6 <_printf_float+0x1a6>
 8006520:	1c4b      	adds	r3, r1, #1
 8006522:	e7e7      	b.n	80064f4 <_printf_float+0x1a4>
 8006524:	2900      	cmp	r1, #0
 8006526:	bfd4      	ite	le
 8006528:	f1c1 0202 	rsble	r2, r1, #2
 800652c:	2201      	movgt	r2, #1
 800652e:	4413      	add	r3, r2
 8006530:	e7e0      	b.n	80064f4 <_printf_float+0x1a4>
 8006532:	6823      	ldr	r3, [r4, #0]
 8006534:	055a      	lsls	r2, r3, #21
 8006536:	d407      	bmi.n	8006548 <_printf_float+0x1f8>
 8006538:	6923      	ldr	r3, [r4, #16]
 800653a:	4642      	mov	r2, r8
 800653c:	4631      	mov	r1, r6
 800653e:	4628      	mov	r0, r5
 8006540:	47b8      	blx	r7
 8006542:	3001      	adds	r0, #1
 8006544:	d12c      	bne.n	80065a0 <_printf_float+0x250>
 8006546:	e764      	b.n	8006412 <_printf_float+0xc2>
 8006548:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800654c:	f240 80e0 	bls.w	8006710 <_printf_float+0x3c0>
 8006550:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006554:	2200      	movs	r2, #0
 8006556:	2300      	movs	r3, #0
 8006558:	f7fa fad6 	bl	8000b08 <__aeabi_dcmpeq>
 800655c:	2800      	cmp	r0, #0
 800655e:	d034      	beq.n	80065ca <_printf_float+0x27a>
 8006560:	4a37      	ldr	r2, [pc, #220]	; (8006640 <_printf_float+0x2f0>)
 8006562:	2301      	movs	r3, #1
 8006564:	4631      	mov	r1, r6
 8006566:	4628      	mov	r0, r5
 8006568:	47b8      	blx	r7
 800656a:	3001      	adds	r0, #1
 800656c:	f43f af51 	beq.w	8006412 <_printf_float+0xc2>
 8006570:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006574:	429a      	cmp	r2, r3
 8006576:	db02      	blt.n	800657e <_printf_float+0x22e>
 8006578:	6823      	ldr	r3, [r4, #0]
 800657a:	07d8      	lsls	r0, r3, #31
 800657c:	d510      	bpl.n	80065a0 <_printf_float+0x250>
 800657e:	ee18 3a10 	vmov	r3, s16
 8006582:	4652      	mov	r2, sl
 8006584:	4631      	mov	r1, r6
 8006586:	4628      	mov	r0, r5
 8006588:	47b8      	blx	r7
 800658a:	3001      	adds	r0, #1
 800658c:	f43f af41 	beq.w	8006412 <_printf_float+0xc2>
 8006590:	f04f 0800 	mov.w	r8, #0
 8006594:	f104 091a 	add.w	r9, r4, #26
 8006598:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800659a:	3b01      	subs	r3, #1
 800659c:	4543      	cmp	r3, r8
 800659e:	dc09      	bgt.n	80065b4 <_printf_float+0x264>
 80065a0:	6823      	ldr	r3, [r4, #0]
 80065a2:	079b      	lsls	r3, r3, #30
 80065a4:	f100 8105 	bmi.w	80067b2 <_printf_float+0x462>
 80065a8:	68e0      	ldr	r0, [r4, #12]
 80065aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065ac:	4298      	cmp	r0, r3
 80065ae:	bfb8      	it	lt
 80065b0:	4618      	movlt	r0, r3
 80065b2:	e730      	b.n	8006416 <_printf_float+0xc6>
 80065b4:	2301      	movs	r3, #1
 80065b6:	464a      	mov	r2, r9
 80065b8:	4631      	mov	r1, r6
 80065ba:	4628      	mov	r0, r5
 80065bc:	47b8      	blx	r7
 80065be:	3001      	adds	r0, #1
 80065c0:	f43f af27 	beq.w	8006412 <_printf_float+0xc2>
 80065c4:	f108 0801 	add.w	r8, r8, #1
 80065c8:	e7e6      	b.n	8006598 <_printf_float+0x248>
 80065ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	dc39      	bgt.n	8006644 <_printf_float+0x2f4>
 80065d0:	4a1b      	ldr	r2, [pc, #108]	; (8006640 <_printf_float+0x2f0>)
 80065d2:	2301      	movs	r3, #1
 80065d4:	4631      	mov	r1, r6
 80065d6:	4628      	mov	r0, r5
 80065d8:	47b8      	blx	r7
 80065da:	3001      	adds	r0, #1
 80065dc:	f43f af19 	beq.w	8006412 <_printf_float+0xc2>
 80065e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065e4:	4313      	orrs	r3, r2
 80065e6:	d102      	bne.n	80065ee <_printf_float+0x29e>
 80065e8:	6823      	ldr	r3, [r4, #0]
 80065ea:	07d9      	lsls	r1, r3, #31
 80065ec:	d5d8      	bpl.n	80065a0 <_printf_float+0x250>
 80065ee:	ee18 3a10 	vmov	r3, s16
 80065f2:	4652      	mov	r2, sl
 80065f4:	4631      	mov	r1, r6
 80065f6:	4628      	mov	r0, r5
 80065f8:	47b8      	blx	r7
 80065fa:	3001      	adds	r0, #1
 80065fc:	f43f af09 	beq.w	8006412 <_printf_float+0xc2>
 8006600:	f04f 0900 	mov.w	r9, #0
 8006604:	f104 0a1a 	add.w	sl, r4, #26
 8006608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800660a:	425b      	negs	r3, r3
 800660c:	454b      	cmp	r3, r9
 800660e:	dc01      	bgt.n	8006614 <_printf_float+0x2c4>
 8006610:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006612:	e792      	b.n	800653a <_printf_float+0x1ea>
 8006614:	2301      	movs	r3, #1
 8006616:	4652      	mov	r2, sl
 8006618:	4631      	mov	r1, r6
 800661a:	4628      	mov	r0, r5
 800661c:	47b8      	blx	r7
 800661e:	3001      	adds	r0, #1
 8006620:	f43f aef7 	beq.w	8006412 <_printf_float+0xc2>
 8006624:	f109 0901 	add.w	r9, r9, #1
 8006628:	e7ee      	b.n	8006608 <_printf_float+0x2b8>
 800662a:	bf00      	nop
 800662c:	7fefffff 	.word	0x7fefffff
 8006630:	0800a3c8 	.word	0x0800a3c8
 8006634:	0800a3cc 	.word	0x0800a3cc
 8006638:	0800a3d4 	.word	0x0800a3d4
 800663c:	0800a3d0 	.word	0x0800a3d0
 8006640:	0800a3d8 	.word	0x0800a3d8
 8006644:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006646:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006648:	429a      	cmp	r2, r3
 800664a:	bfa8      	it	ge
 800664c:	461a      	movge	r2, r3
 800664e:	2a00      	cmp	r2, #0
 8006650:	4691      	mov	r9, r2
 8006652:	dc37      	bgt.n	80066c4 <_printf_float+0x374>
 8006654:	f04f 0b00 	mov.w	fp, #0
 8006658:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800665c:	f104 021a 	add.w	r2, r4, #26
 8006660:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006662:	9305      	str	r3, [sp, #20]
 8006664:	eba3 0309 	sub.w	r3, r3, r9
 8006668:	455b      	cmp	r3, fp
 800666a:	dc33      	bgt.n	80066d4 <_printf_float+0x384>
 800666c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006670:	429a      	cmp	r2, r3
 8006672:	db3b      	blt.n	80066ec <_printf_float+0x39c>
 8006674:	6823      	ldr	r3, [r4, #0]
 8006676:	07da      	lsls	r2, r3, #31
 8006678:	d438      	bmi.n	80066ec <_printf_float+0x39c>
 800667a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800667c:	9b05      	ldr	r3, [sp, #20]
 800667e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006680:	1ad3      	subs	r3, r2, r3
 8006682:	eba2 0901 	sub.w	r9, r2, r1
 8006686:	4599      	cmp	r9, r3
 8006688:	bfa8      	it	ge
 800668a:	4699      	movge	r9, r3
 800668c:	f1b9 0f00 	cmp.w	r9, #0
 8006690:	dc35      	bgt.n	80066fe <_printf_float+0x3ae>
 8006692:	f04f 0800 	mov.w	r8, #0
 8006696:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800669a:	f104 0a1a 	add.w	sl, r4, #26
 800669e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80066a2:	1a9b      	subs	r3, r3, r2
 80066a4:	eba3 0309 	sub.w	r3, r3, r9
 80066a8:	4543      	cmp	r3, r8
 80066aa:	f77f af79 	ble.w	80065a0 <_printf_float+0x250>
 80066ae:	2301      	movs	r3, #1
 80066b0:	4652      	mov	r2, sl
 80066b2:	4631      	mov	r1, r6
 80066b4:	4628      	mov	r0, r5
 80066b6:	47b8      	blx	r7
 80066b8:	3001      	adds	r0, #1
 80066ba:	f43f aeaa 	beq.w	8006412 <_printf_float+0xc2>
 80066be:	f108 0801 	add.w	r8, r8, #1
 80066c2:	e7ec      	b.n	800669e <_printf_float+0x34e>
 80066c4:	4613      	mov	r3, r2
 80066c6:	4631      	mov	r1, r6
 80066c8:	4642      	mov	r2, r8
 80066ca:	4628      	mov	r0, r5
 80066cc:	47b8      	blx	r7
 80066ce:	3001      	adds	r0, #1
 80066d0:	d1c0      	bne.n	8006654 <_printf_float+0x304>
 80066d2:	e69e      	b.n	8006412 <_printf_float+0xc2>
 80066d4:	2301      	movs	r3, #1
 80066d6:	4631      	mov	r1, r6
 80066d8:	4628      	mov	r0, r5
 80066da:	9205      	str	r2, [sp, #20]
 80066dc:	47b8      	blx	r7
 80066de:	3001      	adds	r0, #1
 80066e0:	f43f ae97 	beq.w	8006412 <_printf_float+0xc2>
 80066e4:	9a05      	ldr	r2, [sp, #20]
 80066e6:	f10b 0b01 	add.w	fp, fp, #1
 80066ea:	e7b9      	b.n	8006660 <_printf_float+0x310>
 80066ec:	ee18 3a10 	vmov	r3, s16
 80066f0:	4652      	mov	r2, sl
 80066f2:	4631      	mov	r1, r6
 80066f4:	4628      	mov	r0, r5
 80066f6:	47b8      	blx	r7
 80066f8:	3001      	adds	r0, #1
 80066fa:	d1be      	bne.n	800667a <_printf_float+0x32a>
 80066fc:	e689      	b.n	8006412 <_printf_float+0xc2>
 80066fe:	9a05      	ldr	r2, [sp, #20]
 8006700:	464b      	mov	r3, r9
 8006702:	4442      	add	r2, r8
 8006704:	4631      	mov	r1, r6
 8006706:	4628      	mov	r0, r5
 8006708:	47b8      	blx	r7
 800670a:	3001      	adds	r0, #1
 800670c:	d1c1      	bne.n	8006692 <_printf_float+0x342>
 800670e:	e680      	b.n	8006412 <_printf_float+0xc2>
 8006710:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006712:	2a01      	cmp	r2, #1
 8006714:	dc01      	bgt.n	800671a <_printf_float+0x3ca>
 8006716:	07db      	lsls	r3, r3, #31
 8006718:	d538      	bpl.n	800678c <_printf_float+0x43c>
 800671a:	2301      	movs	r3, #1
 800671c:	4642      	mov	r2, r8
 800671e:	4631      	mov	r1, r6
 8006720:	4628      	mov	r0, r5
 8006722:	47b8      	blx	r7
 8006724:	3001      	adds	r0, #1
 8006726:	f43f ae74 	beq.w	8006412 <_printf_float+0xc2>
 800672a:	ee18 3a10 	vmov	r3, s16
 800672e:	4652      	mov	r2, sl
 8006730:	4631      	mov	r1, r6
 8006732:	4628      	mov	r0, r5
 8006734:	47b8      	blx	r7
 8006736:	3001      	adds	r0, #1
 8006738:	f43f ae6b 	beq.w	8006412 <_printf_float+0xc2>
 800673c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006740:	2200      	movs	r2, #0
 8006742:	2300      	movs	r3, #0
 8006744:	f7fa f9e0 	bl	8000b08 <__aeabi_dcmpeq>
 8006748:	b9d8      	cbnz	r0, 8006782 <_printf_float+0x432>
 800674a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800674c:	f108 0201 	add.w	r2, r8, #1
 8006750:	3b01      	subs	r3, #1
 8006752:	4631      	mov	r1, r6
 8006754:	4628      	mov	r0, r5
 8006756:	47b8      	blx	r7
 8006758:	3001      	adds	r0, #1
 800675a:	d10e      	bne.n	800677a <_printf_float+0x42a>
 800675c:	e659      	b.n	8006412 <_printf_float+0xc2>
 800675e:	2301      	movs	r3, #1
 8006760:	4652      	mov	r2, sl
 8006762:	4631      	mov	r1, r6
 8006764:	4628      	mov	r0, r5
 8006766:	47b8      	blx	r7
 8006768:	3001      	adds	r0, #1
 800676a:	f43f ae52 	beq.w	8006412 <_printf_float+0xc2>
 800676e:	f108 0801 	add.w	r8, r8, #1
 8006772:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006774:	3b01      	subs	r3, #1
 8006776:	4543      	cmp	r3, r8
 8006778:	dcf1      	bgt.n	800675e <_printf_float+0x40e>
 800677a:	464b      	mov	r3, r9
 800677c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006780:	e6dc      	b.n	800653c <_printf_float+0x1ec>
 8006782:	f04f 0800 	mov.w	r8, #0
 8006786:	f104 0a1a 	add.w	sl, r4, #26
 800678a:	e7f2      	b.n	8006772 <_printf_float+0x422>
 800678c:	2301      	movs	r3, #1
 800678e:	4642      	mov	r2, r8
 8006790:	e7df      	b.n	8006752 <_printf_float+0x402>
 8006792:	2301      	movs	r3, #1
 8006794:	464a      	mov	r2, r9
 8006796:	4631      	mov	r1, r6
 8006798:	4628      	mov	r0, r5
 800679a:	47b8      	blx	r7
 800679c:	3001      	adds	r0, #1
 800679e:	f43f ae38 	beq.w	8006412 <_printf_float+0xc2>
 80067a2:	f108 0801 	add.w	r8, r8, #1
 80067a6:	68e3      	ldr	r3, [r4, #12]
 80067a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80067aa:	1a5b      	subs	r3, r3, r1
 80067ac:	4543      	cmp	r3, r8
 80067ae:	dcf0      	bgt.n	8006792 <_printf_float+0x442>
 80067b0:	e6fa      	b.n	80065a8 <_printf_float+0x258>
 80067b2:	f04f 0800 	mov.w	r8, #0
 80067b6:	f104 0919 	add.w	r9, r4, #25
 80067ba:	e7f4      	b.n	80067a6 <_printf_float+0x456>

080067bc <_printf_common>:
 80067bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067c0:	4616      	mov	r6, r2
 80067c2:	4699      	mov	r9, r3
 80067c4:	688a      	ldr	r2, [r1, #8]
 80067c6:	690b      	ldr	r3, [r1, #16]
 80067c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80067cc:	4293      	cmp	r3, r2
 80067ce:	bfb8      	it	lt
 80067d0:	4613      	movlt	r3, r2
 80067d2:	6033      	str	r3, [r6, #0]
 80067d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80067d8:	4607      	mov	r7, r0
 80067da:	460c      	mov	r4, r1
 80067dc:	b10a      	cbz	r2, 80067e2 <_printf_common+0x26>
 80067de:	3301      	adds	r3, #1
 80067e0:	6033      	str	r3, [r6, #0]
 80067e2:	6823      	ldr	r3, [r4, #0]
 80067e4:	0699      	lsls	r1, r3, #26
 80067e6:	bf42      	ittt	mi
 80067e8:	6833      	ldrmi	r3, [r6, #0]
 80067ea:	3302      	addmi	r3, #2
 80067ec:	6033      	strmi	r3, [r6, #0]
 80067ee:	6825      	ldr	r5, [r4, #0]
 80067f0:	f015 0506 	ands.w	r5, r5, #6
 80067f4:	d106      	bne.n	8006804 <_printf_common+0x48>
 80067f6:	f104 0a19 	add.w	sl, r4, #25
 80067fa:	68e3      	ldr	r3, [r4, #12]
 80067fc:	6832      	ldr	r2, [r6, #0]
 80067fe:	1a9b      	subs	r3, r3, r2
 8006800:	42ab      	cmp	r3, r5
 8006802:	dc26      	bgt.n	8006852 <_printf_common+0x96>
 8006804:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006808:	1e13      	subs	r3, r2, #0
 800680a:	6822      	ldr	r2, [r4, #0]
 800680c:	bf18      	it	ne
 800680e:	2301      	movne	r3, #1
 8006810:	0692      	lsls	r2, r2, #26
 8006812:	d42b      	bmi.n	800686c <_printf_common+0xb0>
 8006814:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006818:	4649      	mov	r1, r9
 800681a:	4638      	mov	r0, r7
 800681c:	47c0      	blx	r8
 800681e:	3001      	adds	r0, #1
 8006820:	d01e      	beq.n	8006860 <_printf_common+0xa4>
 8006822:	6823      	ldr	r3, [r4, #0]
 8006824:	68e5      	ldr	r5, [r4, #12]
 8006826:	6832      	ldr	r2, [r6, #0]
 8006828:	f003 0306 	and.w	r3, r3, #6
 800682c:	2b04      	cmp	r3, #4
 800682e:	bf08      	it	eq
 8006830:	1aad      	subeq	r5, r5, r2
 8006832:	68a3      	ldr	r3, [r4, #8]
 8006834:	6922      	ldr	r2, [r4, #16]
 8006836:	bf0c      	ite	eq
 8006838:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800683c:	2500      	movne	r5, #0
 800683e:	4293      	cmp	r3, r2
 8006840:	bfc4      	itt	gt
 8006842:	1a9b      	subgt	r3, r3, r2
 8006844:	18ed      	addgt	r5, r5, r3
 8006846:	2600      	movs	r6, #0
 8006848:	341a      	adds	r4, #26
 800684a:	42b5      	cmp	r5, r6
 800684c:	d11a      	bne.n	8006884 <_printf_common+0xc8>
 800684e:	2000      	movs	r0, #0
 8006850:	e008      	b.n	8006864 <_printf_common+0xa8>
 8006852:	2301      	movs	r3, #1
 8006854:	4652      	mov	r2, sl
 8006856:	4649      	mov	r1, r9
 8006858:	4638      	mov	r0, r7
 800685a:	47c0      	blx	r8
 800685c:	3001      	adds	r0, #1
 800685e:	d103      	bne.n	8006868 <_printf_common+0xac>
 8006860:	f04f 30ff 	mov.w	r0, #4294967295
 8006864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006868:	3501      	adds	r5, #1
 800686a:	e7c6      	b.n	80067fa <_printf_common+0x3e>
 800686c:	18e1      	adds	r1, r4, r3
 800686e:	1c5a      	adds	r2, r3, #1
 8006870:	2030      	movs	r0, #48	; 0x30
 8006872:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006876:	4422      	add	r2, r4
 8006878:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800687c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006880:	3302      	adds	r3, #2
 8006882:	e7c7      	b.n	8006814 <_printf_common+0x58>
 8006884:	2301      	movs	r3, #1
 8006886:	4622      	mov	r2, r4
 8006888:	4649      	mov	r1, r9
 800688a:	4638      	mov	r0, r7
 800688c:	47c0      	blx	r8
 800688e:	3001      	adds	r0, #1
 8006890:	d0e6      	beq.n	8006860 <_printf_common+0xa4>
 8006892:	3601      	adds	r6, #1
 8006894:	e7d9      	b.n	800684a <_printf_common+0x8e>
	...

08006898 <_printf_i>:
 8006898:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800689c:	460c      	mov	r4, r1
 800689e:	4691      	mov	r9, r2
 80068a0:	7e27      	ldrb	r7, [r4, #24]
 80068a2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80068a4:	2f78      	cmp	r7, #120	; 0x78
 80068a6:	4680      	mov	r8, r0
 80068a8:	469a      	mov	sl, r3
 80068aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068ae:	d807      	bhi.n	80068c0 <_printf_i+0x28>
 80068b0:	2f62      	cmp	r7, #98	; 0x62
 80068b2:	d80a      	bhi.n	80068ca <_printf_i+0x32>
 80068b4:	2f00      	cmp	r7, #0
 80068b6:	f000 80d8 	beq.w	8006a6a <_printf_i+0x1d2>
 80068ba:	2f58      	cmp	r7, #88	; 0x58
 80068bc:	f000 80a3 	beq.w	8006a06 <_printf_i+0x16e>
 80068c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80068c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80068c8:	e03a      	b.n	8006940 <_printf_i+0xa8>
 80068ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80068ce:	2b15      	cmp	r3, #21
 80068d0:	d8f6      	bhi.n	80068c0 <_printf_i+0x28>
 80068d2:	a001      	add	r0, pc, #4	; (adr r0, 80068d8 <_printf_i+0x40>)
 80068d4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80068d8:	08006931 	.word	0x08006931
 80068dc:	08006945 	.word	0x08006945
 80068e0:	080068c1 	.word	0x080068c1
 80068e4:	080068c1 	.word	0x080068c1
 80068e8:	080068c1 	.word	0x080068c1
 80068ec:	080068c1 	.word	0x080068c1
 80068f0:	08006945 	.word	0x08006945
 80068f4:	080068c1 	.word	0x080068c1
 80068f8:	080068c1 	.word	0x080068c1
 80068fc:	080068c1 	.word	0x080068c1
 8006900:	080068c1 	.word	0x080068c1
 8006904:	08006a51 	.word	0x08006a51
 8006908:	08006975 	.word	0x08006975
 800690c:	08006a33 	.word	0x08006a33
 8006910:	080068c1 	.word	0x080068c1
 8006914:	080068c1 	.word	0x080068c1
 8006918:	08006a73 	.word	0x08006a73
 800691c:	080068c1 	.word	0x080068c1
 8006920:	08006975 	.word	0x08006975
 8006924:	080068c1 	.word	0x080068c1
 8006928:	080068c1 	.word	0x080068c1
 800692c:	08006a3b 	.word	0x08006a3b
 8006930:	680b      	ldr	r3, [r1, #0]
 8006932:	1d1a      	adds	r2, r3, #4
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	600a      	str	r2, [r1, #0]
 8006938:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800693c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006940:	2301      	movs	r3, #1
 8006942:	e0a3      	b.n	8006a8c <_printf_i+0x1f4>
 8006944:	6825      	ldr	r5, [r4, #0]
 8006946:	6808      	ldr	r0, [r1, #0]
 8006948:	062e      	lsls	r6, r5, #24
 800694a:	f100 0304 	add.w	r3, r0, #4
 800694e:	d50a      	bpl.n	8006966 <_printf_i+0xce>
 8006950:	6805      	ldr	r5, [r0, #0]
 8006952:	600b      	str	r3, [r1, #0]
 8006954:	2d00      	cmp	r5, #0
 8006956:	da03      	bge.n	8006960 <_printf_i+0xc8>
 8006958:	232d      	movs	r3, #45	; 0x2d
 800695a:	426d      	negs	r5, r5
 800695c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006960:	485e      	ldr	r0, [pc, #376]	; (8006adc <_printf_i+0x244>)
 8006962:	230a      	movs	r3, #10
 8006964:	e019      	b.n	800699a <_printf_i+0x102>
 8006966:	f015 0f40 	tst.w	r5, #64	; 0x40
 800696a:	6805      	ldr	r5, [r0, #0]
 800696c:	600b      	str	r3, [r1, #0]
 800696e:	bf18      	it	ne
 8006970:	b22d      	sxthne	r5, r5
 8006972:	e7ef      	b.n	8006954 <_printf_i+0xbc>
 8006974:	680b      	ldr	r3, [r1, #0]
 8006976:	6825      	ldr	r5, [r4, #0]
 8006978:	1d18      	adds	r0, r3, #4
 800697a:	6008      	str	r0, [r1, #0]
 800697c:	0628      	lsls	r0, r5, #24
 800697e:	d501      	bpl.n	8006984 <_printf_i+0xec>
 8006980:	681d      	ldr	r5, [r3, #0]
 8006982:	e002      	b.n	800698a <_printf_i+0xf2>
 8006984:	0669      	lsls	r1, r5, #25
 8006986:	d5fb      	bpl.n	8006980 <_printf_i+0xe8>
 8006988:	881d      	ldrh	r5, [r3, #0]
 800698a:	4854      	ldr	r0, [pc, #336]	; (8006adc <_printf_i+0x244>)
 800698c:	2f6f      	cmp	r7, #111	; 0x6f
 800698e:	bf0c      	ite	eq
 8006990:	2308      	moveq	r3, #8
 8006992:	230a      	movne	r3, #10
 8006994:	2100      	movs	r1, #0
 8006996:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800699a:	6866      	ldr	r6, [r4, #4]
 800699c:	60a6      	str	r6, [r4, #8]
 800699e:	2e00      	cmp	r6, #0
 80069a0:	bfa2      	ittt	ge
 80069a2:	6821      	ldrge	r1, [r4, #0]
 80069a4:	f021 0104 	bicge.w	r1, r1, #4
 80069a8:	6021      	strge	r1, [r4, #0]
 80069aa:	b90d      	cbnz	r5, 80069b0 <_printf_i+0x118>
 80069ac:	2e00      	cmp	r6, #0
 80069ae:	d04d      	beq.n	8006a4c <_printf_i+0x1b4>
 80069b0:	4616      	mov	r6, r2
 80069b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80069b6:	fb03 5711 	mls	r7, r3, r1, r5
 80069ba:	5dc7      	ldrb	r7, [r0, r7]
 80069bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80069c0:	462f      	mov	r7, r5
 80069c2:	42bb      	cmp	r3, r7
 80069c4:	460d      	mov	r5, r1
 80069c6:	d9f4      	bls.n	80069b2 <_printf_i+0x11a>
 80069c8:	2b08      	cmp	r3, #8
 80069ca:	d10b      	bne.n	80069e4 <_printf_i+0x14c>
 80069cc:	6823      	ldr	r3, [r4, #0]
 80069ce:	07df      	lsls	r7, r3, #31
 80069d0:	d508      	bpl.n	80069e4 <_printf_i+0x14c>
 80069d2:	6923      	ldr	r3, [r4, #16]
 80069d4:	6861      	ldr	r1, [r4, #4]
 80069d6:	4299      	cmp	r1, r3
 80069d8:	bfde      	ittt	le
 80069da:	2330      	movle	r3, #48	; 0x30
 80069dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80069e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80069e4:	1b92      	subs	r2, r2, r6
 80069e6:	6122      	str	r2, [r4, #16]
 80069e8:	f8cd a000 	str.w	sl, [sp]
 80069ec:	464b      	mov	r3, r9
 80069ee:	aa03      	add	r2, sp, #12
 80069f0:	4621      	mov	r1, r4
 80069f2:	4640      	mov	r0, r8
 80069f4:	f7ff fee2 	bl	80067bc <_printf_common>
 80069f8:	3001      	adds	r0, #1
 80069fa:	d14c      	bne.n	8006a96 <_printf_i+0x1fe>
 80069fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006a00:	b004      	add	sp, #16
 8006a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a06:	4835      	ldr	r0, [pc, #212]	; (8006adc <_printf_i+0x244>)
 8006a08:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006a0c:	6823      	ldr	r3, [r4, #0]
 8006a0e:	680e      	ldr	r6, [r1, #0]
 8006a10:	061f      	lsls	r7, r3, #24
 8006a12:	f856 5b04 	ldr.w	r5, [r6], #4
 8006a16:	600e      	str	r6, [r1, #0]
 8006a18:	d514      	bpl.n	8006a44 <_printf_i+0x1ac>
 8006a1a:	07d9      	lsls	r1, r3, #31
 8006a1c:	bf44      	itt	mi
 8006a1e:	f043 0320 	orrmi.w	r3, r3, #32
 8006a22:	6023      	strmi	r3, [r4, #0]
 8006a24:	b91d      	cbnz	r5, 8006a2e <_printf_i+0x196>
 8006a26:	6823      	ldr	r3, [r4, #0]
 8006a28:	f023 0320 	bic.w	r3, r3, #32
 8006a2c:	6023      	str	r3, [r4, #0]
 8006a2e:	2310      	movs	r3, #16
 8006a30:	e7b0      	b.n	8006994 <_printf_i+0xfc>
 8006a32:	6823      	ldr	r3, [r4, #0]
 8006a34:	f043 0320 	orr.w	r3, r3, #32
 8006a38:	6023      	str	r3, [r4, #0]
 8006a3a:	2378      	movs	r3, #120	; 0x78
 8006a3c:	4828      	ldr	r0, [pc, #160]	; (8006ae0 <_printf_i+0x248>)
 8006a3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006a42:	e7e3      	b.n	8006a0c <_printf_i+0x174>
 8006a44:	065e      	lsls	r6, r3, #25
 8006a46:	bf48      	it	mi
 8006a48:	b2ad      	uxthmi	r5, r5
 8006a4a:	e7e6      	b.n	8006a1a <_printf_i+0x182>
 8006a4c:	4616      	mov	r6, r2
 8006a4e:	e7bb      	b.n	80069c8 <_printf_i+0x130>
 8006a50:	680b      	ldr	r3, [r1, #0]
 8006a52:	6826      	ldr	r6, [r4, #0]
 8006a54:	6960      	ldr	r0, [r4, #20]
 8006a56:	1d1d      	adds	r5, r3, #4
 8006a58:	600d      	str	r5, [r1, #0]
 8006a5a:	0635      	lsls	r5, r6, #24
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	d501      	bpl.n	8006a64 <_printf_i+0x1cc>
 8006a60:	6018      	str	r0, [r3, #0]
 8006a62:	e002      	b.n	8006a6a <_printf_i+0x1d2>
 8006a64:	0671      	lsls	r1, r6, #25
 8006a66:	d5fb      	bpl.n	8006a60 <_printf_i+0x1c8>
 8006a68:	8018      	strh	r0, [r3, #0]
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	6123      	str	r3, [r4, #16]
 8006a6e:	4616      	mov	r6, r2
 8006a70:	e7ba      	b.n	80069e8 <_printf_i+0x150>
 8006a72:	680b      	ldr	r3, [r1, #0]
 8006a74:	1d1a      	adds	r2, r3, #4
 8006a76:	600a      	str	r2, [r1, #0]
 8006a78:	681e      	ldr	r6, [r3, #0]
 8006a7a:	6862      	ldr	r2, [r4, #4]
 8006a7c:	2100      	movs	r1, #0
 8006a7e:	4630      	mov	r0, r6
 8006a80:	f7f9 fbce 	bl	8000220 <memchr>
 8006a84:	b108      	cbz	r0, 8006a8a <_printf_i+0x1f2>
 8006a86:	1b80      	subs	r0, r0, r6
 8006a88:	6060      	str	r0, [r4, #4]
 8006a8a:	6863      	ldr	r3, [r4, #4]
 8006a8c:	6123      	str	r3, [r4, #16]
 8006a8e:	2300      	movs	r3, #0
 8006a90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a94:	e7a8      	b.n	80069e8 <_printf_i+0x150>
 8006a96:	6923      	ldr	r3, [r4, #16]
 8006a98:	4632      	mov	r2, r6
 8006a9a:	4649      	mov	r1, r9
 8006a9c:	4640      	mov	r0, r8
 8006a9e:	47d0      	blx	sl
 8006aa0:	3001      	adds	r0, #1
 8006aa2:	d0ab      	beq.n	80069fc <_printf_i+0x164>
 8006aa4:	6823      	ldr	r3, [r4, #0]
 8006aa6:	079b      	lsls	r3, r3, #30
 8006aa8:	d413      	bmi.n	8006ad2 <_printf_i+0x23a>
 8006aaa:	68e0      	ldr	r0, [r4, #12]
 8006aac:	9b03      	ldr	r3, [sp, #12]
 8006aae:	4298      	cmp	r0, r3
 8006ab0:	bfb8      	it	lt
 8006ab2:	4618      	movlt	r0, r3
 8006ab4:	e7a4      	b.n	8006a00 <_printf_i+0x168>
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	4632      	mov	r2, r6
 8006aba:	4649      	mov	r1, r9
 8006abc:	4640      	mov	r0, r8
 8006abe:	47d0      	blx	sl
 8006ac0:	3001      	adds	r0, #1
 8006ac2:	d09b      	beq.n	80069fc <_printf_i+0x164>
 8006ac4:	3501      	adds	r5, #1
 8006ac6:	68e3      	ldr	r3, [r4, #12]
 8006ac8:	9903      	ldr	r1, [sp, #12]
 8006aca:	1a5b      	subs	r3, r3, r1
 8006acc:	42ab      	cmp	r3, r5
 8006ace:	dcf2      	bgt.n	8006ab6 <_printf_i+0x21e>
 8006ad0:	e7eb      	b.n	8006aaa <_printf_i+0x212>
 8006ad2:	2500      	movs	r5, #0
 8006ad4:	f104 0619 	add.w	r6, r4, #25
 8006ad8:	e7f5      	b.n	8006ac6 <_printf_i+0x22e>
 8006ada:	bf00      	nop
 8006adc:	0800a3da 	.word	0x0800a3da
 8006ae0:	0800a3eb 	.word	0x0800a3eb

08006ae4 <iprintf>:
 8006ae4:	b40f      	push	{r0, r1, r2, r3}
 8006ae6:	4b0a      	ldr	r3, [pc, #40]	; (8006b10 <iprintf+0x2c>)
 8006ae8:	b513      	push	{r0, r1, r4, lr}
 8006aea:	681c      	ldr	r4, [r3, #0]
 8006aec:	b124      	cbz	r4, 8006af8 <iprintf+0x14>
 8006aee:	69a3      	ldr	r3, [r4, #24]
 8006af0:	b913      	cbnz	r3, 8006af8 <iprintf+0x14>
 8006af2:	4620      	mov	r0, r4
 8006af4:	f001 ff0a 	bl	800890c <__sinit>
 8006af8:	ab05      	add	r3, sp, #20
 8006afa:	9a04      	ldr	r2, [sp, #16]
 8006afc:	68a1      	ldr	r1, [r4, #8]
 8006afe:	9301      	str	r3, [sp, #4]
 8006b00:	4620      	mov	r0, r4
 8006b02:	f003 f941 	bl	8009d88 <_vfiprintf_r>
 8006b06:	b002      	add	sp, #8
 8006b08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b0c:	b004      	add	sp, #16
 8006b0e:	4770      	bx	lr
 8006b10:	20000028 	.word	0x20000028

08006b14 <_puts_r>:
 8006b14:	b570      	push	{r4, r5, r6, lr}
 8006b16:	460e      	mov	r6, r1
 8006b18:	4605      	mov	r5, r0
 8006b1a:	b118      	cbz	r0, 8006b24 <_puts_r+0x10>
 8006b1c:	6983      	ldr	r3, [r0, #24]
 8006b1e:	b90b      	cbnz	r3, 8006b24 <_puts_r+0x10>
 8006b20:	f001 fef4 	bl	800890c <__sinit>
 8006b24:	69ab      	ldr	r3, [r5, #24]
 8006b26:	68ac      	ldr	r4, [r5, #8]
 8006b28:	b913      	cbnz	r3, 8006b30 <_puts_r+0x1c>
 8006b2a:	4628      	mov	r0, r5
 8006b2c:	f001 feee 	bl	800890c <__sinit>
 8006b30:	4b2c      	ldr	r3, [pc, #176]	; (8006be4 <_puts_r+0xd0>)
 8006b32:	429c      	cmp	r4, r3
 8006b34:	d120      	bne.n	8006b78 <_puts_r+0x64>
 8006b36:	686c      	ldr	r4, [r5, #4]
 8006b38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b3a:	07db      	lsls	r3, r3, #31
 8006b3c:	d405      	bmi.n	8006b4a <_puts_r+0x36>
 8006b3e:	89a3      	ldrh	r3, [r4, #12]
 8006b40:	0598      	lsls	r0, r3, #22
 8006b42:	d402      	bmi.n	8006b4a <_puts_r+0x36>
 8006b44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b46:	f002 faf2 	bl	800912e <__retarget_lock_acquire_recursive>
 8006b4a:	89a3      	ldrh	r3, [r4, #12]
 8006b4c:	0719      	lsls	r1, r3, #28
 8006b4e:	d51d      	bpl.n	8006b8c <_puts_r+0x78>
 8006b50:	6923      	ldr	r3, [r4, #16]
 8006b52:	b1db      	cbz	r3, 8006b8c <_puts_r+0x78>
 8006b54:	3e01      	subs	r6, #1
 8006b56:	68a3      	ldr	r3, [r4, #8]
 8006b58:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006b5c:	3b01      	subs	r3, #1
 8006b5e:	60a3      	str	r3, [r4, #8]
 8006b60:	bb39      	cbnz	r1, 8006bb2 <_puts_r+0x9e>
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	da38      	bge.n	8006bd8 <_puts_r+0xc4>
 8006b66:	4622      	mov	r2, r4
 8006b68:	210a      	movs	r1, #10
 8006b6a:	4628      	mov	r0, r5
 8006b6c:	f000 fe7a 	bl	8007864 <__swbuf_r>
 8006b70:	3001      	adds	r0, #1
 8006b72:	d011      	beq.n	8006b98 <_puts_r+0x84>
 8006b74:	250a      	movs	r5, #10
 8006b76:	e011      	b.n	8006b9c <_puts_r+0x88>
 8006b78:	4b1b      	ldr	r3, [pc, #108]	; (8006be8 <_puts_r+0xd4>)
 8006b7a:	429c      	cmp	r4, r3
 8006b7c:	d101      	bne.n	8006b82 <_puts_r+0x6e>
 8006b7e:	68ac      	ldr	r4, [r5, #8]
 8006b80:	e7da      	b.n	8006b38 <_puts_r+0x24>
 8006b82:	4b1a      	ldr	r3, [pc, #104]	; (8006bec <_puts_r+0xd8>)
 8006b84:	429c      	cmp	r4, r3
 8006b86:	bf08      	it	eq
 8006b88:	68ec      	ldreq	r4, [r5, #12]
 8006b8a:	e7d5      	b.n	8006b38 <_puts_r+0x24>
 8006b8c:	4621      	mov	r1, r4
 8006b8e:	4628      	mov	r0, r5
 8006b90:	f000 feba 	bl	8007908 <__swsetup_r>
 8006b94:	2800      	cmp	r0, #0
 8006b96:	d0dd      	beq.n	8006b54 <_puts_r+0x40>
 8006b98:	f04f 35ff 	mov.w	r5, #4294967295
 8006b9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b9e:	07da      	lsls	r2, r3, #31
 8006ba0:	d405      	bmi.n	8006bae <_puts_r+0x9a>
 8006ba2:	89a3      	ldrh	r3, [r4, #12]
 8006ba4:	059b      	lsls	r3, r3, #22
 8006ba6:	d402      	bmi.n	8006bae <_puts_r+0x9a>
 8006ba8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006baa:	f002 fac1 	bl	8009130 <__retarget_lock_release_recursive>
 8006bae:	4628      	mov	r0, r5
 8006bb0:	bd70      	pop	{r4, r5, r6, pc}
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	da04      	bge.n	8006bc0 <_puts_r+0xac>
 8006bb6:	69a2      	ldr	r2, [r4, #24]
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	dc06      	bgt.n	8006bca <_puts_r+0xb6>
 8006bbc:	290a      	cmp	r1, #10
 8006bbe:	d004      	beq.n	8006bca <_puts_r+0xb6>
 8006bc0:	6823      	ldr	r3, [r4, #0]
 8006bc2:	1c5a      	adds	r2, r3, #1
 8006bc4:	6022      	str	r2, [r4, #0]
 8006bc6:	7019      	strb	r1, [r3, #0]
 8006bc8:	e7c5      	b.n	8006b56 <_puts_r+0x42>
 8006bca:	4622      	mov	r2, r4
 8006bcc:	4628      	mov	r0, r5
 8006bce:	f000 fe49 	bl	8007864 <__swbuf_r>
 8006bd2:	3001      	adds	r0, #1
 8006bd4:	d1bf      	bne.n	8006b56 <_puts_r+0x42>
 8006bd6:	e7df      	b.n	8006b98 <_puts_r+0x84>
 8006bd8:	6823      	ldr	r3, [r4, #0]
 8006bda:	250a      	movs	r5, #10
 8006bdc:	1c5a      	adds	r2, r3, #1
 8006bde:	6022      	str	r2, [r4, #0]
 8006be0:	701d      	strb	r5, [r3, #0]
 8006be2:	e7db      	b.n	8006b9c <_puts_r+0x88>
 8006be4:	0800a504 	.word	0x0800a504
 8006be8:	0800a524 	.word	0x0800a524
 8006bec:	0800a4e4 	.word	0x0800a4e4

08006bf0 <puts>:
 8006bf0:	4b02      	ldr	r3, [pc, #8]	; (8006bfc <puts+0xc>)
 8006bf2:	4601      	mov	r1, r0
 8006bf4:	6818      	ldr	r0, [r3, #0]
 8006bf6:	f7ff bf8d 	b.w	8006b14 <_puts_r>
 8006bfa:	bf00      	nop
 8006bfc:	20000028 	.word	0x20000028

08006c00 <sulp>:
 8006c00:	b570      	push	{r4, r5, r6, lr}
 8006c02:	4604      	mov	r4, r0
 8006c04:	460d      	mov	r5, r1
 8006c06:	ec45 4b10 	vmov	d0, r4, r5
 8006c0a:	4616      	mov	r6, r2
 8006c0c:	f002 fe8a 	bl	8009924 <__ulp>
 8006c10:	ec51 0b10 	vmov	r0, r1, d0
 8006c14:	b17e      	cbz	r6, 8006c36 <sulp+0x36>
 8006c16:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006c1a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	dd09      	ble.n	8006c36 <sulp+0x36>
 8006c22:	051b      	lsls	r3, r3, #20
 8006c24:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006c28:	2400      	movs	r4, #0
 8006c2a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006c2e:	4622      	mov	r2, r4
 8006c30:	462b      	mov	r3, r5
 8006c32:	f7f9 fd01 	bl	8000638 <__aeabi_dmul>
 8006c36:	bd70      	pop	{r4, r5, r6, pc}

08006c38 <_strtod_l>:
 8006c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c3c:	b0a3      	sub	sp, #140	; 0x8c
 8006c3e:	461f      	mov	r7, r3
 8006c40:	2300      	movs	r3, #0
 8006c42:	931e      	str	r3, [sp, #120]	; 0x78
 8006c44:	4ba4      	ldr	r3, [pc, #656]	; (8006ed8 <_strtod_l+0x2a0>)
 8006c46:	9219      	str	r2, [sp, #100]	; 0x64
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	9307      	str	r3, [sp, #28]
 8006c4c:	4604      	mov	r4, r0
 8006c4e:	4618      	mov	r0, r3
 8006c50:	4688      	mov	r8, r1
 8006c52:	f7f9 fadd 	bl	8000210 <strlen>
 8006c56:	f04f 0a00 	mov.w	sl, #0
 8006c5a:	4605      	mov	r5, r0
 8006c5c:	f04f 0b00 	mov.w	fp, #0
 8006c60:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006c64:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006c66:	781a      	ldrb	r2, [r3, #0]
 8006c68:	2a2b      	cmp	r2, #43	; 0x2b
 8006c6a:	d04c      	beq.n	8006d06 <_strtod_l+0xce>
 8006c6c:	d839      	bhi.n	8006ce2 <_strtod_l+0xaa>
 8006c6e:	2a0d      	cmp	r2, #13
 8006c70:	d832      	bhi.n	8006cd8 <_strtod_l+0xa0>
 8006c72:	2a08      	cmp	r2, #8
 8006c74:	d832      	bhi.n	8006cdc <_strtod_l+0xa4>
 8006c76:	2a00      	cmp	r2, #0
 8006c78:	d03c      	beq.n	8006cf4 <_strtod_l+0xbc>
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	930e      	str	r3, [sp, #56]	; 0x38
 8006c7e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8006c80:	7833      	ldrb	r3, [r6, #0]
 8006c82:	2b30      	cmp	r3, #48	; 0x30
 8006c84:	f040 80b4 	bne.w	8006df0 <_strtod_l+0x1b8>
 8006c88:	7873      	ldrb	r3, [r6, #1]
 8006c8a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006c8e:	2b58      	cmp	r3, #88	; 0x58
 8006c90:	d16c      	bne.n	8006d6c <_strtod_l+0x134>
 8006c92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c94:	9301      	str	r3, [sp, #4]
 8006c96:	ab1e      	add	r3, sp, #120	; 0x78
 8006c98:	9702      	str	r7, [sp, #8]
 8006c9a:	9300      	str	r3, [sp, #0]
 8006c9c:	4a8f      	ldr	r2, [pc, #572]	; (8006edc <_strtod_l+0x2a4>)
 8006c9e:	ab1f      	add	r3, sp, #124	; 0x7c
 8006ca0:	a91d      	add	r1, sp, #116	; 0x74
 8006ca2:	4620      	mov	r0, r4
 8006ca4:	f001 ff36 	bl	8008b14 <__gethex>
 8006ca8:	f010 0707 	ands.w	r7, r0, #7
 8006cac:	4605      	mov	r5, r0
 8006cae:	d005      	beq.n	8006cbc <_strtod_l+0x84>
 8006cb0:	2f06      	cmp	r7, #6
 8006cb2:	d12a      	bne.n	8006d0a <_strtod_l+0xd2>
 8006cb4:	3601      	adds	r6, #1
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	961d      	str	r6, [sp, #116]	; 0x74
 8006cba:	930e      	str	r3, [sp, #56]	; 0x38
 8006cbc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	f040 8596 	bne.w	80077f0 <_strtod_l+0xbb8>
 8006cc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006cc6:	b1db      	cbz	r3, 8006d00 <_strtod_l+0xc8>
 8006cc8:	4652      	mov	r2, sl
 8006cca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006cce:	ec43 2b10 	vmov	d0, r2, r3
 8006cd2:	b023      	add	sp, #140	; 0x8c
 8006cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cd8:	2a20      	cmp	r2, #32
 8006cda:	d1ce      	bne.n	8006c7a <_strtod_l+0x42>
 8006cdc:	3301      	adds	r3, #1
 8006cde:	931d      	str	r3, [sp, #116]	; 0x74
 8006ce0:	e7c0      	b.n	8006c64 <_strtod_l+0x2c>
 8006ce2:	2a2d      	cmp	r2, #45	; 0x2d
 8006ce4:	d1c9      	bne.n	8006c7a <_strtod_l+0x42>
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	920e      	str	r2, [sp, #56]	; 0x38
 8006cea:	1c5a      	adds	r2, r3, #1
 8006cec:	921d      	str	r2, [sp, #116]	; 0x74
 8006cee:	785b      	ldrb	r3, [r3, #1]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d1c4      	bne.n	8006c7e <_strtod_l+0x46>
 8006cf4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006cf6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	f040 8576 	bne.w	80077ec <_strtod_l+0xbb4>
 8006d00:	4652      	mov	r2, sl
 8006d02:	465b      	mov	r3, fp
 8006d04:	e7e3      	b.n	8006cce <_strtod_l+0x96>
 8006d06:	2200      	movs	r2, #0
 8006d08:	e7ee      	b.n	8006ce8 <_strtod_l+0xb0>
 8006d0a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006d0c:	b13a      	cbz	r2, 8006d1e <_strtod_l+0xe6>
 8006d0e:	2135      	movs	r1, #53	; 0x35
 8006d10:	a820      	add	r0, sp, #128	; 0x80
 8006d12:	f002 ff12 	bl	8009b3a <__copybits>
 8006d16:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006d18:	4620      	mov	r0, r4
 8006d1a:	f002 fad7 	bl	80092cc <_Bfree>
 8006d1e:	3f01      	subs	r7, #1
 8006d20:	2f05      	cmp	r7, #5
 8006d22:	d807      	bhi.n	8006d34 <_strtod_l+0xfc>
 8006d24:	e8df f007 	tbb	[pc, r7]
 8006d28:	1d180b0e 	.word	0x1d180b0e
 8006d2c:	030e      	.short	0x030e
 8006d2e:	f04f 0b00 	mov.w	fp, #0
 8006d32:	46da      	mov	sl, fp
 8006d34:	0728      	lsls	r0, r5, #28
 8006d36:	d5c1      	bpl.n	8006cbc <_strtod_l+0x84>
 8006d38:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006d3c:	e7be      	b.n	8006cbc <_strtod_l+0x84>
 8006d3e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8006d42:	e7f7      	b.n	8006d34 <_strtod_l+0xfc>
 8006d44:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8006d48:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006d4a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006d4e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006d52:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006d56:	e7ed      	b.n	8006d34 <_strtod_l+0xfc>
 8006d58:	f8df b184 	ldr.w	fp, [pc, #388]	; 8006ee0 <_strtod_l+0x2a8>
 8006d5c:	f04f 0a00 	mov.w	sl, #0
 8006d60:	e7e8      	b.n	8006d34 <_strtod_l+0xfc>
 8006d62:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006d66:	f04f 3aff 	mov.w	sl, #4294967295
 8006d6a:	e7e3      	b.n	8006d34 <_strtod_l+0xfc>
 8006d6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006d6e:	1c5a      	adds	r2, r3, #1
 8006d70:	921d      	str	r2, [sp, #116]	; 0x74
 8006d72:	785b      	ldrb	r3, [r3, #1]
 8006d74:	2b30      	cmp	r3, #48	; 0x30
 8006d76:	d0f9      	beq.n	8006d6c <_strtod_l+0x134>
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d09f      	beq.n	8006cbc <_strtod_l+0x84>
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	f04f 0900 	mov.w	r9, #0
 8006d82:	9304      	str	r3, [sp, #16]
 8006d84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006d86:	930a      	str	r3, [sp, #40]	; 0x28
 8006d88:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006d8c:	464f      	mov	r7, r9
 8006d8e:	220a      	movs	r2, #10
 8006d90:	981d      	ldr	r0, [sp, #116]	; 0x74
 8006d92:	7806      	ldrb	r6, [r0, #0]
 8006d94:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006d98:	b2d9      	uxtb	r1, r3
 8006d9a:	2909      	cmp	r1, #9
 8006d9c:	d92a      	bls.n	8006df4 <_strtod_l+0x1bc>
 8006d9e:	9907      	ldr	r1, [sp, #28]
 8006da0:	462a      	mov	r2, r5
 8006da2:	f003 f97c 	bl	800a09e <strncmp>
 8006da6:	b398      	cbz	r0, 8006e10 <_strtod_l+0x1d8>
 8006da8:	2000      	movs	r0, #0
 8006daa:	4633      	mov	r3, r6
 8006dac:	463d      	mov	r5, r7
 8006dae:	9007      	str	r0, [sp, #28]
 8006db0:	4602      	mov	r2, r0
 8006db2:	2b65      	cmp	r3, #101	; 0x65
 8006db4:	d001      	beq.n	8006dba <_strtod_l+0x182>
 8006db6:	2b45      	cmp	r3, #69	; 0x45
 8006db8:	d118      	bne.n	8006dec <_strtod_l+0x1b4>
 8006dba:	b91d      	cbnz	r5, 8006dc4 <_strtod_l+0x18c>
 8006dbc:	9b04      	ldr	r3, [sp, #16]
 8006dbe:	4303      	orrs	r3, r0
 8006dc0:	d098      	beq.n	8006cf4 <_strtod_l+0xbc>
 8006dc2:	2500      	movs	r5, #0
 8006dc4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8006dc8:	f108 0301 	add.w	r3, r8, #1
 8006dcc:	931d      	str	r3, [sp, #116]	; 0x74
 8006dce:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006dd2:	2b2b      	cmp	r3, #43	; 0x2b
 8006dd4:	d075      	beq.n	8006ec2 <_strtod_l+0x28a>
 8006dd6:	2b2d      	cmp	r3, #45	; 0x2d
 8006dd8:	d07b      	beq.n	8006ed2 <_strtod_l+0x29a>
 8006dda:	f04f 0c00 	mov.w	ip, #0
 8006dde:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006de2:	2909      	cmp	r1, #9
 8006de4:	f240 8082 	bls.w	8006eec <_strtod_l+0x2b4>
 8006de8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006dec:	2600      	movs	r6, #0
 8006dee:	e09d      	b.n	8006f2c <_strtod_l+0x2f4>
 8006df0:	2300      	movs	r3, #0
 8006df2:	e7c4      	b.n	8006d7e <_strtod_l+0x146>
 8006df4:	2f08      	cmp	r7, #8
 8006df6:	bfd8      	it	le
 8006df8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8006dfa:	f100 0001 	add.w	r0, r0, #1
 8006dfe:	bfda      	itte	le
 8006e00:	fb02 3301 	mlale	r3, r2, r1, r3
 8006e04:	9309      	strle	r3, [sp, #36]	; 0x24
 8006e06:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006e0a:	3701      	adds	r7, #1
 8006e0c:	901d      	str	r0, [sp, #116]	; 0x74
 8006e0e:	e7bf      	b.n	8006d90 <_strtod_l+0x158>
 8006e10:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006e12:	195a      	adds	r2, r3, r5
 8006e14:	921d      	str	r2, [sp, #116]	; 0x74
 8006e16:	5d5b      	ldrb	r3, [r3, r5]
 8006e18:	2f00      	cmp	r7, #0
 8006e1a:	d037      	beq.n	8006e8c <_strtod_l+0x254>
 8006e1c:	9007      	str	r0, [sp, #28]
 8006e1e:	463d      	mov	r5, r7
 8006e20:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006e24:	2a09      	cmp	r2, #9
 8006e26:	d912      	bls.n	8006e4e <_strtod_l+0x216>
 8006e28:	2201      	movs	r2, #1
 8006e2a:	e7c2      	b.n	8006db2 <_strtod_l+0x17a>
 8006e2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006e2e:	1c5a      	adds	r2, r3, #1
 8006e30:	921d      	str	r2, [sp, #116]	; 0x74
 8006e32:	785b      	ldrb	r3, [r3, #1]
 8006e34:	3001      	adds	r0, #1
 8006e36:	2b30      	cmp	r3, #48	; 0x30
 8006e38:	d0f8      	beq.n	8006e2c <_strtod_l+0x1f4>
 8006e3a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8006e3e:	2a08      	cmp	r2, #8
 8006e40:	f200 84db 	bhi.w	80077fa <_strtod_l+0xbc2>
 8006e44:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006e46:	9007      	str	r0, [sp, #28]
 8006e48:	2000      	movs	r0, #0
 8006e4a:	920a      	str	r2, [sp, #40]	; 0x28
 8006e4c:	4605      	mov	r5, r0
 8006e4e:	3b30      	subs	r3, #48	; 0x30
 8006e50:	f100 0201 	add.w	r2, r0, #1
 8006e54:	d014      	beq.n	8006e80 <_strtod_l+0x248>
 8006e56:	9907      	ldr	r1, [sp, #28]
 8006e58:	4411      	add	r1, r2
 8006e5a:	9107      	str	r1, [sp, #28]
 8006e5c:	462a      	mov	r2, r5
 8006e5e:	eb00 0e05 	add.w	lr, r0, r5
 8006e62:	210a      	movs	r1, #10
 8006e64:	4572      	cmp	r2, lr
 8006e66:	d113      	bne.n	8006e90 <_strtod_l+0x258>
 8006e68:	182a      	adds	r2, r5, r0
 8006e6a:	2a08      	cmp	r2, #8
 8006e6c:	f105 0501 	add.w	r5, r5, #1
 8006e70:	4405      	add	r5, r0
 8006e72:	dc1c      	bgt.n	8006eae <_strtod_l+0x276>
 8006e74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e76:	220a      	movs	r2, #10
 8006e78:	fb02 3301 	mla	r3, r2, r1, r3
 8006e7c:	9309      	str	r3, [sp, #36]	; 0x24
 8006e7e:	2200      	movs	r2, #0
 8006e80:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006e82:	1c59      	adds	r1, r3, #1
 8006e84:	911d      	str	r1, [sp, #116]	; 0x74
 8006e86:	785b      	ldrb	r3, [r3, #1]
 8006e88:	4610      	mov	r0, r2
 8006e8a:	e7c9      	b.n	8006e20 <_strtod_l+0x1e8>
 8006e8c:	4638      	mov	r0, r7
 8006e8e:	e7d2      	b.n	8006e36 <_strtod_l+0x1fe>
 8006e90:	2a08      	cmp	r2, #8
 8006e92:	dc04      	bgt.n	8006e9e <_strtod_l+0x266>
 8006e94:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006e96:	434e      	muls	r6, r1
 8006e98:	9609      	str	r6, [sp, #36]	; 0x24
 8006e9a:	3201      	adds	r2, #1
 8006e9c:	e7e2      	b.n	8006e64 <_strtod_l+0x22c>
 8006e9e:	f102 0c01 	add.w	ip, r2, #1
 8006ea2:	f1bc 0f10 	cmp.w	ip, #16
 8006ea6:	bfd8      	it	le
 8006ea8:	fb01 f909 	mulle.w	r9, r1, r9
 8006eac:	e7f5      	b.n	8006e9a <_strtod_l+0x262>
 8006eae:	2d10      	cmp	r5, #16
 8006eb0:	bfdc      	itt	le
 8006eb2:	220a      	movle	r2, #10
 8006eb4:	fb02 3909 	mlale	r9, r2, r9, r3
 8006eb8:	e7e1      	b.n	8006e7e <_strtod_l+0x246>
 8006eba:	2300      	movs	r3, #0
 8006ebc:	9307      	str	r3, [sp, #28]
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	e77c      	b.n	8006dbc <_strtod_l+0x184>
 8006ec2:	f04f 0c00 	mov.w	ip, #0
 8006ec6:	f108 0302 	add.w	r3, r8, #2
 8006eca:	931d      	str	r3, [sp, #116]	; 0x74
 8006ecc:	f898 3002 	ldrb.w	r3, [r8, #2]
 8006ed0:	e785      	b.n	8006dde <_strtod_l+0x1a6>
 8006ed2:	f04f 0c01 	mov.w	ip, #1
 8006ed6:	e7f6      	b.n	8006ec6 <_strtod_l+0x28e>
 8006ed8:	0800a5b0 	.word	0x0800a5b0
 8006edc:	0800a3fc 	.word	0x0800a3fc
 8006ee0:	7ff00000 	.word	0x7ff00000
 8006ee4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006ee6:	1c59      	adds	r1, r3, #1
 8006ee8:	911d      	str	r1, [sp, #116]	; 0x74
 8006eea:	785b      	ldrb	r3, [r3, #1]
 8006eec:	2b30      	cmp	r3, #48	; 0x30
 8006eee:	d0f9      	beq.n	8006ee4 <_strtod_l+0x2ac>
 8006ef0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8006ef4:	2908      	cmp	r1, #8
 8006ef6:	f63f af79 	bhi.w	8006dec <_strtod_l+0x1b4>
 8006efa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8006efe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006f00:	9308      	str	r3, [sp, #32]
 8006f02:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006f04:	1c59      	adds	r1, r3, #1
 8006f06:	911d      	str	r1, [sp, #116]	; 0x74
 8006f08:	785b      	ldrb	r3, [r3, #1]
 8006f0a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8006f0e:	2e09      	cmp	r6, #9
 8006f10:	d937      	bls.n	8006f82 <_strtod_l+0x34a>
 8006f12:	9e08      	ldr	r6, [sp, #32]
 8006f14:	1b89      	subs	r1, r1, r6
 8006f16:	2908      	cmp	r1, #8
 8006f18:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006f1c:	dc02      	bgt.n	8006f24 <_strtod_l+0x2ec>
 8006f1e:	4576      	cmp	r6, lr
 8006f20:	bfa8      	it	ge
 8006f22:	4676      	movge	r6, lr
 8006f24:	f1bc 0f00 	cmp.w	ip, #0
 8006f28:	d000      	beq.n	8006f2c <_strtod_l+0x2f4>
 8006f2a:	4276      	negs	r6, r6
 8006f2c:	2d00      	cmp	r5, #0
 8006f2e:	d14f      	bne.n	8006fd0 <_strtod_l+0x398>
 8006f30:	9904      	ldr	r1, [sp, #16]
 8006f32:	4301      	orrs	r1, r0
 8006f34:	f47f aec2 	bne.w	8006cbc <_strtod_l+0x84>
 8006f38:	2a00      	cmp	r2, #0
 8006f3a:	f47f aedb 	bne.w	8006cf4 <_strtod_l+0xbc>
 8006f3e:	2b69      	cmp	r3, #105	; 0x69
 8006f40:	d027      	beq.n	8006f92 <_strtod_l+0x35a>
 8006f42:	dc24      	bgt.n	8006f8e <_strtod_l+0x356>
 8006f44:	2b49      	cmp	r3, #73	; 0x49
 8006f46:	d024      	beq.n	8006f92 <_strtod_l+0x35a>
 8006f48:	2b4e      	cmp	r3, #78	; 0x4e
 8006f4a:	f47f aed3 	bne.w	8006cf4 <_strtod_l+0xbc>
 8006f4e:	499e      	ldr	r1, [pc, #632]	; (80071c8 <_strtod_l+0x590>)
 8006f50:	a81d      	add	r0, sp, #116	; 0x74
 8006f52:	f002 f837 	bl	8008fc4 <__match>
 8006f56:	2800      	cmp	r0, #0
 8006f58:	f43f aecc 	beq.w	8006cf4 <_strtod_l+0xbc>
 8006f5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	2b28      	cmp	r3, #40	; 0x28
 8006f62:	d12d      	bne.n	8006fc0 <_strtod_l+0x388>
 8006f64:	4999      	ldr	r1, [pc, #612]	; (80071cc <_strtod_l+0x594>)
 8006f66:	aa20      	add	r2, sp, #128	; 0x80
 8006f68:	a81d      	add	r0, sp, #116	; 0x74
 8006f6a:	f002 f83f 	bl	8008fec <__hexnan>
 8006f6e:	2805      	cmp	r0, #5
 8006f70:	d126      	bne.n	8006fc0 <_strtod_l+0x388>
 8006f72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f74:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8006f78:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006f7c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006f80:	e69c      	b.n	8006cbc <_strtod_l+0x84>
 8006f82:	210a      	movs	r1, #10
 8006f84:	fb01 3e0e 	mla	lr, r1, lr, r3
 8006f88:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006f8c:	e7b9      	b.n	8006f02 <_strtod_l+0x2ca>
 8006f8e:	2b6e      	cmp	r3, #110	; 0x6e
 8006f90:	e7db      	b.n	8006f4a <_strtod_l+0x312>
 8006f92:	498f      	ldr	r1, [pc, #572]	; (80071d0 <_strtod_l+0x598>)
 8006f94:	a81d      	add	r0, sp, #116	; 0x74
 8006f96:	f002 f815 	bl	8008fc4 <__match>
 8006f9a:	2800      	cmp	r0, #0
 8006f9c:	f43f aeaa 	beq.w	8006cf4 <_strtod_l+0xbc>
 8006fa0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006fa2:	498c      	ldr	r1, [pc, #560]	; (80071d4 <_strtod_l+0x59c>)
 8006fa4:	3b01      	subs	r3, #1
 8006fa6:	a81d      	add	r0, sp, #116	; 0x74
 8006fa8:	931d      	str	r3, [sp, #116]	; 0x74
 8006faa:	f002 f80b 	bl	8008fc4 <__match>
 8006fae:	b910      	cbnz	r0, 8006fb6 <_strtod_l+0x37e>
 8006fb0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	931d      	str	r3, [sp, #116]	; 0x74
 8006fb6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80071e4 <_strtod_l+0x5ac>
 8006fba:	f04f 0a00 	mov.w	sl, #0
 8006fbe:	e67d      	b.n	8006cbc <_strtod_l+0x84>
 8006fc0:	4885      	ldr	r0, [pc, #532]	; (80071d8 <_strtod_l+0x5a0>)
 8006fc2:	f003 f811 	bl	8009fe8 <nan>
 8006fc6:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006fca:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8006fce:	e675      	b.n	8006cbc <_strtod_l+0x84>
 8006fd0:	9b07      	ldr	r3, [sp, #28]
 8006fd2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006fd4:	1af3      	subs	r3, r6, r3
 8006fd6:	2f00      	cmp	r7, #0
 8006fd8:	bf08      	it	eq
 8006fda:	462f      	moveq	r7, r5
 8006fdc:	2d10      	cmp	r5, #16
 8006fde:	9308      	str	r3, [sp, #32]
 8006fe0:	46a8      	mov	r8, r5
 8006fe2:	bfa8      	it	ge
 8006fe4:	f04f 0810 	movge.w	r8, #16
 8006fe8:	f7f9 faac 	bl	8000544 <__aeabi_ui2d>
 8006fec:	2d09      	cmp	r5, #9
 8006fee:	4682      	mov	sl, r0
 8006ff0:	468b      	mov	fp, r1
 8006ff2:	dd13      	ble.n	800701c <_strtod_l+0x3e4>
 8006ff4:	4b79      	ldr	r3, [pc, #484]	; (80071dc <_strtod_l+0x5a4>)
 8006ff6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006ffa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006ffe:	f7f9 fb1b 	bl	8000638 <__aeabi_dmul>
 8007002:	4682      	mov	sl, r0
 8007004:	4648      	mov	r0, r9
 8007006:	468b      	mov	fp, r1
 8007008:	f7f9 fa9c 	bl	8000544 <__aeabi_ui2d>
 800700c:	4602      	mov	r2, r0
 800700e:	460b      	mov	r3, r1
 8007010:	4650      	mov	r0, sl
 8007012:	4659      	mov	r1, fp
 8007014:	f7f9 f95a 	bl	80002cc <__adddf3>
 8007018:	4682      	mov	sl, r0
 800701a:	468b      	mov	fp, r1
 800701c:	2d0f      	cmp	r5, #15
 800701e:	dc38      	bgt.n	8007092 <_strtod_l+0x45a>
 8007020:	9b08      	ldr	r3, [sp, #32]
 8007022:	2b00      	cmp	r3, #0
 8007024:	f43f ae4a 	beq.w	8006cbc <_strtod_l+0x84>
 8007028:	dd24      	ble.n	8007074 <_strtod_l+0x43c>
 800702a:	2b16      	cmp	r3, #22
 800702c:	dc0b      	bgt.n	8007046 <_strtod_l+0x40e>
 800702e:	4d6b      	ldr	r5, [pc, #428]	; (80071dc <_strtod_l+0x5a4>)
 8007030:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8007034:	e9d5 0100 	ldrd	r0, r1, [r5]
 8007038:	4652      	mov	r2, sl
 800703a:	465b      	mov	r3, fp
 800703c:	f7f9 fafc 	bl	8000638 <__aeabi_dmul>
 8007040:	4682      	mov	sl, r0
 8007042:	468b      	mov	fp, r1
 8007044:	e63a      	b.n	8006cbc <_strtod_l+0x84>
 8007046:	9a08      	ldr	r2, [sp, #32]
 8007048:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800704c:	4293      	cmp	r3, r2
 800704e:	db20      	blt.n	8007092 <_strtod_l+0x45a>
 8007050:	4c62      	ldr	r4, [pc, #392]	; (80071dc <_strtod_l+0x5a4>)
 8007052:	f1c5 050f 	rsb	r5, r5, #15
 8007056:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800705a:	4652      	mov	r2, sl
 800705c:	465b      	mov	r3, fp
 800705e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007062:	f7f9 fae9 	bl	8000638 <__aeabi_dmul>
 8007066:	9b08      	ldr	r3, [sp, #32]
 8007068:	1b5d      	subs	r5, r3, r5
 800706a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800706e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007072:	e7e3      	b.n	800703c <_strtod_l+0x404>
 8007074:	9b08      	ldr	r3, [sp, #32]
 8007076:	3316      	adds	r3, #22
 8007078:	db0b      	blt.n	8007092 <_strtod_l+0x45a>
 800707a:	9b07      	ldr	r3, [sp, #28]
 800707c:	4a57      	ldr	r2, [pc, #348]	; (80071dc <_strtod_l+0x5a4>)
 800707e:	1b9e      	subs	r6, r3, r6
 8007080:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8007084:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007088:	4650      	mov	r0, sl
 800708a:	4659      	mov	r1, fp
 800708c:	f7f9 fbfe 	bl	800088c <__aeabi_ddiv>
 8007090:	e7d6      	b.n	8007040 <_strtod_l+0x408>
 8007092:	9b08      	ldr	r3, [sp, #32]
 8007094:	eba5 0808 	sub.w	r8, r5, r8
 8007098:	4498      	add	r8, r3
 800709a:	f1b8 0f00 	cmp.w	r8, #0
 800709e:	dd71      	ble.n	8007184 <_strtod_l+0x54c>
 80070a0:	f018 030f 	ands.w	r3, r8, #15
 80070a4:	d00a      	beq.n	80070bc <_strtod_l+0x484>
 80070a6:	494d      	ldr	r1, [pc, #308]	; (80071dc <_strtod_l+0x5a4>)
 80070a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80070ac:	4652      	mov	r2, sl
 80070ae:	465b      	mov	r3, fp
 80070b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070b4:	f7f9 fac0 	bl	8000638 <__aeabi_dmul>
 80070b8:	4682      	mov	sl, r0
 80070ba:	468b      	mov	fp, r1
 80070bc:	f038 080f 	bics.w	r8, r8, #15
 80070c0:	d04d      	beq.n	800715e <_strtod_l+0x526>
 80070c2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80070c6:	dd22      	ble.n	800710e <_strtod_l+0x4d6>
 80070c8:	2500      	movs	r5, #0
 80070ca:	462e      	mov	r6, r5
 80070cc:	9509      	str	r5, [sp, #36]	; 0x24
 80070ce:	9507      	str	r5, [sp, #28]
 80070d0:	2322      	movs	r3, #34	; 0x22
 80070d2:	f8df b110 	ldr.w	fp, [pc, #272]	; 80071e4 <_strtod_l+0x5ac>
 80070d6:	6023      	str	r3, [r4, #0]
 80070d8:	f04f 0a00 	mov.w	sl, #0
 80070dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070de:	2b00      	cmp	r3, #0
 80070e0:	f43f adec 	beq.w	8006cbc <_strtod_l+0x84>
 80070e4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80070e6:	4620      	mov	r0, r4
 80070e8:	f002 f8f0 	bl	80092cc <_Bfree>
 80070ec:	9907      	ldr	r1, [sp, #28]
 80070ee:	4620      	mov	r0, r4
 80070f0:	f002 f8ec 	bl	80092cc <_Bfree>
 80070f4:	4631      	mov	r1, r6
 80070f6:	4620      	mov	r0, r4
 80070f8:	f002 f8e8 	bl	80092cc <_Bfree>
 80070fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80070fe:	4620      	mov	r0, r4
 8007100:	f002 f8e4 	bl	80092cc <_Bfree>
 8007104:	4629      	mov	r1, r5
 8007106:	4620      	mov	r0, r4
 8007108:	f002 f8e0 	bl	80092cc <_Bfree>
 800710c:	e5d6      	b.n	8006cbc <_strtod_l+0x84>
 800710e:	2300      	movs	r3, #0
 8007110:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007114:	4650      	mov	r0, sl
 8007116:	4659      	mov	r1, fp
 8007118:	4699      	mov	r9, r3
 800711a:	f1b8 0f01 	cmp.w	r8, #1
 800711e:	dc21      	bgt.n	8007164 <_strtod_l+0x52c>
 8007120:	b10b      	cbz	r3, 8007126 <_strtod_l+0x4ee>
 8007122:	4682      	mov	sl, r0
 8007124:	468b      	mov	fp, r1
 8007126:	4b2e      	ldr	r3, [pc, #184]	; (80071e0 <_strtod_l+0x5a8>)
 8007128:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800712c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007130:	4652      	mov	r2, sl
 8007132:	465b      	mov	r3, fp
 8007134:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007138:	f7f9 fa7e 	bl	8000638 <__aeabi_dmul>
 800713c:	4b29      	ldr	r3, [pc, #164]	; (80071e4 <_strtod_l+0x5ac>)
 800713e:	460a      	mov	r2, r1
 8007140:	400b      	ands	r3, r1
 8007142:	4929      	ldr	r1, [pc, #164]	; (80071e8 <_strtod_l+0x5b0>)
 8007144:	428b      	cmp	r3, r1
 8007146:	4682      	mov	sl, r0
 8007148:	d8be      	bhi.n	80070c8 <_strtod_l+0x490>
 800714a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800714e:	428b      	cmp	r3, r1
 8007150:	bf86      	itte	hi
 8007152:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80071ec <_strtod_l+0x5b4>
 8007156:	f04f 3aff 	movhi.w	sl, #4294967295
 800715a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800715e:	2300      	movs	r3, #0
 8007160:	9304      	str	r3, [sp, #16]
 8007162:	e081      	b.n	8007268 <_strtod_l+0x630>
 8007164:	f018 0f01 	tst.w	r8, #1
 8007168:	d007      	beq.n	800717a <_strtod_l+0x542>
 800716a:	4b1d      	ldr	r3, [pc, #116]	; (80071e0 <_strtod_l+0x5a8>)
 800716c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8007170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007174:	f7f9 fa60 	bl	8000638 <__aeabi_dmul>
 8007178:	2301      	movs	r3, #1
 800717a:	f109 0901 	add.w	r9, r9, #1
 800717e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007182:	e7ca      	b.n	800711a <_strtod_l+0x4e2>
 8007184:	d0eb      	beq.n	800715e <_strtod_l+0x526>
 8007186:	f1c8 0800 	rsb	r8, r8, #0
 800718a:	f018 020f 	ands.w	r2, r8, #15
 800718e:	d00a      	beq.n	80071a6 <_strtod_l+0x56e>
 8007190:	4b12      	ldr	r3, [pc, #72]	; (80071dc <_strtod_l+0x5a4>)
 8007192:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007196:	4650      	mov	r0, sl
 8007198:	4659      	mov	r1, fp
 800719a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800719e:	f7f9 fb75 	bl	800088c <__aeabi_ddiv>
 80071a2:	4682      	mov	sl, r0
 80071a4:	468b      	mov	fp, r1
 80071a6:	ea5f 1828 	movs.w	r8, r8, asr #4
 80071aa:	d0d8      	beq.n	800715e <_strtod_l+0x526>
 80071ac:	f1b8 0f1f 	cmp.w	r8, #31
 80071b0:	dd1e      	ble.n	80071f0 <_strtod_l+0x5b8>
 80071b2:	2500      	movs	r5, #0
 80071b4:	462e      	mov	r6, r5
 80071b6:	9509      	str	r5, [sp, #36]	; 0x24
 80071b8:	9507      	str	r5, [sp, #28]
 80071ba:	2322      	movs	r3, #34	; 0x22
 80071bc:	f04f 0a00 	mov.w	sl, #0
 80071c0:	f04f 0b00 	mov.w	fp, #0
 80071c4:	6023      	str	r3, [r4, #0]
 80071c6:	e789      	b.n	80070dc <_strtod_l+0x4a4>
 80071c8:	0800a3d5 	.word	0x0800a3d5
 80071cc:	0800a410 	.word	0x0800a410
 80071d0:	0800a3cd 	.word	0x0800a3cd
 80071d4:	0800a453 	.word	0x0800a453
 80071d8:	0800a770 	.word	0x0800a770
 80071dc:	0800a650 	.word	0x0800a650
 80071e0:	0800a628 	.word	0x0800a628
 80071e4:	7ff00000 	.word	0x7ff00000
 80071e8:	7ca00000 	.word	0x7ca00000
 80071ec:	7fefffff 	.word	0x7fefffff
 80071f0:	f018 0310 	ands.w	r3, r8, #16
 80071f4:	bf18      	it	ne
 80071f6:	236a      	movne	r3, #106	; 0x6a
 80071f8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80075b0 <_strtod_l+0x978>
 80071fc:	9304      	str	r3, [sp, #16]
 80071fe:	4650      	mov	r0, sl
 8007200:	4659      	mov	r1, fp
 8007202:	2300      	movs	r3, #0
 8007204:	f018 0f01 	tst.w	r8, #1
 8007208:	d004      	beq.n	8007214 <_strtod_l+0x5dc>
 800720a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800720e:	f7f9 fa13 	bl	8000638 <__aeabi_dmul>
 8007212:	2301      	movs	r3, #1
 8007214:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007218:	f109 0908 	add.w	r9, r9, #8
 800721c:	d1f2      	bne.n	8007204 <_strtod_l+0x5cc>
 800721e:	b10b      	cbz	r3, 8007224 <_strtod_l+0x5ec>
 8007220:	4682      	mov	sl, r0
 8007222:	468b      	mov	fp, r1
 8007224:	9b04      	ldr	r3, [sp, #16]
 8007226:	b1bb      	cbz	r3, 8007258 <_strtod_l+0x620>
 8007228:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800722c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007230:	2b00      	cmp	r3, #0
 8007232:	4659      	mov	r1, fp
 8007234:	dd10      	ble.n	8007258 <_strtod_l+0x620>
 8007236:	2b1f      	cmp	r3, #31
 8007238:	f340 8128 	ble.w	800748c <_strtod_l+0x854>
 800723c:	2b34      	cmp	r3, #52	; 0x34
 800723e:	bfde      	ittt	le
 8007240:	3b20      	suble	r3, #32
 8007242:	f04f 32ff 	movle.w	r2, #4294967295
 8007246:	fa02 f303 	lslle.w	r3, r2, r3
 800724a:	f04f 0a00 	mov.w	sl, #0
 800724e:	bfcc      	ite	gt
 8007250:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007254:	ea03 0b01 	andle.w	fp, r3, r1
 8007258:	2200      	movs	r2, #0
 800725a:	2300      	movs	r3, #0
 800725c:	4650      	mov	r0, sl
 800725e:	4659      	mov	r1, fp
 8007260:	f7f9 fc52 	bl	8000b08 <__aeabi_dcmpeq>
 8007264:	2800      	cmp	r0, #0
 8007266:	d1a4      	bne.n	80071b2 <_strtod_l+0x57a>
 8007268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800726a:	9300      	str	r3, [sp, #0]
 800726c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800726e:	462b      	mov	r3, r5
 8007270:	463a      	mov	r2, r7
 8007272:	4620      	mov	r0, r4
 8007274:	f002 f896 	bl	80093a4 <__s2b>
 8007278:	9009      	str	r0, [sp, #36]	; 0x24
 800727a:	2800      	cmp	r0, #0
 800727c:	f43f af24 	beq.w	80070c8 <_strtod_l+0x490>
 8007280:	9b07      	ldr	r3, [sp, #28]
 8007282:	1b9e      	subs	r6, r3, r6
 8007284:	9b08      	ldr	r3, [sp, #32]
 8007286:	2b00      	cmp	r3, #0
 8007288:	bfb4      	ite	lt
 800728a:	4633      	movlt	r3, r6
 800728c:	2300      	movge	r3, #0
 800728e:	9310      	str	r3, [sp, #64]	; 0x40
 8007290:	9b08      	ldr	r3, [sp, #32]
 8007292:	2500      	movs	r5, #0
 8007294:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007298:	9318      	str	r3, [sp, #96]	; 0x60
 800729a:	462e      	mov	r6, r5
 800729c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800729e:	4620      	mov	r0, r4
 80072a0:	6859      	ldr	r1, [r3, #4]
 80072a2:	f001 ffd3 	bl	800924c <_Balloc>
 80072a6:	9007      	str	r0, [sp, #28]
 80072a8:	2800      	cmp	r0, #0
 80072aa:	f43f af11 	beq.w	80070d0 <_strtod_l+0x498>
 80072ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072b0:	691a      	ldr	r2, [r3, #16]
 80072b2:	3202      	adds	r2, #2
 80072b4:	f103 010c 	add.w	r1, r3, #12
 80072b8:	0092      	lsls	r2, r2, #2
 80072ba:	300c      	adds	r0, #12
 80072bc:	f001 ffb8 	bl	8009230 <memcpy>
 80072c0:	ec4b ab10 	vmov	d0, sl, fp
 80072c4:	aa20      	add	r2, sp, #128	; 0x80
 80072c6:	a91f      	add	r1, sp, #124	; 0x7c
 80072c8:	4620      	mov	r0, r4
 80072ca:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80072ce:	f002 fba5 	bl	8009a1c <__d2b>
 80072d2:	901e      	str	r0, [sp, #120]	; 0x78
 80072d4:	2800      	cmp	r0, #0
 80072d6:	f43f aefb 	beq.w	80070d0 <_strtod_l+0x498>
 80072da:	2101      	movs	r1, #1
 80072dc:	4620      	mov	r0, r4
 80072de:	f002 f8fb 	bl	80094d8 <__i2b>
 80072e2:	4606      	mov	r6, r0
 80072e4:	2800      	cmp	r0, #0
 80072e6:	f43f aef3 	beq.w	80070d0 <_strtod_l+0x498>
 80072ea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80072ec:	9904      	ldr	r1, [sp, #16]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	bfab      	itete	ge
 80072f2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80072f4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80072f6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80072f8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80072fc:	bfac      	ite	ge
 80072fe:	eb03 0902 	addge.w	r9, r3, r2
 8007302:	1ad7      	sublt	r7, r2, r3
 8007304:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007306:	eba3 0801 	sub.w	r8, r3, r1
 800730a:	4490      	add	r8, r2
 800730c:	4ba3      	ldr	r3, [pc, #652]	; (800759c <_strtod_l+0x964>)
 800730e:	f108 38ff 	add.w	r8, r8, #4294967295
 8007312:	4598      	cmp	r8, r3
 8007314:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007318:	f280 80cc 	bge.w	80074b4 <_strtod_l+0x87c>
 800731c:	eba3 0308 	sub.w	r3, r3, r8
 8007320:	2b1f      	cmp	r3, #31
 8007322:	eba2 0203 	sub.w	r2, r2, r3
 8007326:	f04f 0101 	mov.w	r1, #1
 800732a:	f300 80b6 	bgt.w	800749a <_strtod_l+0x862>
 800732e:	fa01 f303 	lsl.w	r3, r1, r3
 8007332:	9311      	str	r3, [sp, #68]	; 0x44
 8007334:	2300      	movs	r3, #0
 8007336:	930c      	str	r3, [sp, #48]	; 0x30
 8007338:	eb09 0802 	add.w	r8, r9, r2
 800733c:	9b04      	ldr	r3, [sp, #16]
 800733e:	45c1      	cmp	r9, r8
 8007340:	4417      	add	r7, r2
 8007342:	441f      	add	r7, r3
 8007344:	464b      	mov	r3, r9
 8007346:	bfa8      	it	ge
 8007348:	4643      	movge	r3, r8
 800734a:	42bb      	cmp	r3, r7
 800734c:	bfa8      	it	ge
 800734e:	463b      	movge	r3, r7
 8007350:	2b00      	cmp	r3, #0
 8007352:	bfc2      	ittt	gt
 8007354:	eba8 0803 	subgt.w	r8, r8, r3
 8007358:	1aff      	subgt	r7, r7, r3
 800735a:	eba9 0903 	subgt.w	r9, r9, r3
 800735e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007360:	2b00      	cmp	r3, #0
 8007362:	dd17      	ble.n	8007394 <_strtod_l+0x75c>
 8007364:	4631      	mov	r1, r6
 8007366:	461a      	mov	r2, r3
 8007368:	4620      	mov	r0, r4
 800736a:	f002 f971 	bl	8009650 <__pow5mult>
 800736e:	4606      	mov	r6, r0
 8007370:	2800      	cmp	r0, #0
 8007372:	f43f aead 	beq.w	80070d0 <_strtod_l+0x498>
 8007376:	4601      	mov	r1, r0
 8007378:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800737a:	4620      	mov	r0, r4
 800737c:	f002 f8c2 	bl	8009504 <__multiply>
 8007380:	900f      	str	r0, [sp, #60]	; 0x3c
 8007382:	2800      	cmp	r0, #0
 8007384:	f43f aea4 	beq.w	80070d0 <_strtod_l+0x498>
 8007388:	991e      	ldr	r1, [sp, #120]	; 0x78
 800738a:	4620      	mov	r0, r4
 800738c:	f001 ff9e 	bl	80092cc <_Bfree>
 8007390:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007392:	931e      	str	r3, [sp, #120]	; 0x78
 8007394:	f1b8 0f00 	cmp.w	r8, #0
 8007398:	f300 8091 	bgt.w	80074be <_strtod_l+0x886>
 800739c:	9b08      	ldr	r3, [sp, #32]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	dd08      	ble.n	80073b4 <_strtod_l+0x77c>
 80073a2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80073a4:	9907      	ldr	r1, [sp, #28]
 80073a6:	4620      	mov	r0, r4
 80073a8:	f002 f952 	bl	8009650 <__pow5mult>
 80073ac:	9007      	str	r0, [sp, #28]
 80073ae:	2800      	cmp	r0, #0
 80073b0:	f43f ae8e 	beq.w	80070d0 <_strtod_l+0x498>
 80073b4:	2f00      	cmp	r7, #0
 80073b6:	dd08      	ble.n	80073ca <_strtod_l+0x792>
 80073b8:	9907      	ldr	r1, [sp, #28]
 80073ba:	463a      	mov	r2, r7
 80073bc:	4620      	mov	r0, r4
 80073be:	f002 f9a1 	bl	8009704 <__lshift>
 80073c2:	9007      	str	r0, [sp, #28]
 80073c4:	2800      	cmp	r0, #0
 80073c6:	f43f ae83 	beq.w	80070d0 <_strtod_l+0x498>
 80073ca:	f1b9 0f00 	cmp.w	r9, #0
 80073ce:	dd08      	ble.n	80073e2 <_strtod_l+0x7aa>
 80073d0:	4631      	mov	r1, r6
 80073d2:	464a      	mov	r2, r9
 80073d4:	4620      	mov	r0, r4
 80073d6:	f002 f995 	bl	8009704 <__lshift>
 80073da:	4606      	mov	r6, r0
 80073dc:	2800      	cmp	r0, #0
 80073de:	f43f ae77 	beq.w	80070d0 <_strtod_l+0x498>
 80073e2:	9a07      	ldr	r2, [sp, #28]
 80073e4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80073e6:	4620      	mov	r0, r4
 80073e8:	f002 fa14 	bl	8009814 <__mdiff>
 80073ec:	4605      	mov	r5, r0
 80073ee:	2800      	cmp	r0, #0
 80073f0:	f43f ae6e 	beq.w	80070d0 <_strtod_l+0x498>
 80073f4:	68c3      	ldr	r3, [r0, #12]
 80073f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80073f8:	2300      	movs	r3, #0
 80073fa:	60c3      	str	r3, [r0, #12]
 80073fc:	4631      	mov	r1, r6
 80073fe:	f002 f9ed 	bl	80097dc <__mcmp>
 8007402:	2800      	cmp	r0, #0
 8007404:	da65      	bge.n	80074d2 <_strtod_l+0x89a>
 8007406:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007408:	ea53 030a 	orrs.w	r3, r3, sl
 800740c:	f040 8087 	bne.w	800751e <_strtod_l+0x8e6>
 8007410:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007414:	2b00      	cmp	r3, #0
 8007416:	f040 8082 	bne.w	800751e <_strtod_l+0x8e6>
 800741a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800741e:	0d1b      	lsrs	r3, r3, #20
 8007420:	051b      	lsls	r3, r3, #20
 8007422:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007426:	d97a      	bls.n	800751e <_strtod_l+0x8e6>
 8007428:	696b      	ldr	r3, [r5, #20]
 800742a:	b913      	cbnz	r3, 8007432 <_strtod_l+0x7fa>
 800742c:	692b      	ldr	r3, [r5, #16]
 800742e:	2b01      	cmp	r3, #1
 8007430:	dd75      	ble.n	800751e <_strtod_l+0x8e6>
 8007432:	4629      	mov	r1, r5
 8007434:	2201      	movs	r2, #1
 8007436:	4620      	mov	r0, r4
 8007438:	f002 f964 	bl	8009704 <__lshift>
 800743c:	4631      	mov	r1, r6
 800743e:	4605      	mov	r5, r0
 8007440:	f002 f9cc 	bl	80097dc <__mcmp>
 8007444:	2800      	cmp	r0, #0
 8007446:	dd6a      	ble.n	800751e <_strtod_l+0x8e6>
 8007448:	9904      	ldr	r1, [sp, #16]
 800744a:	4a55      	ldr	r2, [pc, #340]	; (80075a0 <_strtod_l+0x968>)
 800744c:	465b      	mov	r3, fp
 800744e:	2900      	cmp	r1, #0
 8007450:	f000 8085 	beq.w	800755e <_strtod_l+0x926>
 8007454:	ea02 010b 	and.w	r1, r2, fp
 8007458:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800745c:	dc7f      	bgt.n	800755e <_strtod_l+0x926>
 800745e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007462:	f77f aeaa 	ble.w	80071ba <_strtod_l+0x582>
 8007466:	4a4f      	ldr	r2, [pc, #316]	; (80075a4 <_strtod_l+0x96c>)
 8007468:	2300      	movs	r3, #0
 800746a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800746e:	4650      	mov	r0, sl
 8007470:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8007474:	4659      	mov	r1, fp
 8007476:	f7f9 f8df 	bl	8000638 <__aeabi_dmul>
 800747a:	460b      	mov	r3, r1
 800747c:	4303      	orrs	r3, r0
 800747e:	bf08      	it	eq
 8007480:	2322      	moveq	r3, #34	; 0x22
 8007482:	4682      	mov	sl, r0
 8007484:	468b      	mov	fp, r1
 8007486:	bf08      	it	eq
 8007488:	6023      	streq	r3, [r4, #0]
 800748a:	e62b      	b.n	80070e4 <_strtod_l+0x4ac>
 800748c:	f04f 32ff 	mov.w	r2, #4294967295
 8007490:	fa02 f303 	lsl.w	r3, r2, r3
 8007494:	ea03 0a0a 	and.w	sl, r3, sl
 8007498:	e6de      	b.n	8007258 <_strtod_l+0x620>
 800749a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800749e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80074a2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80074a6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80074aa:	fa01 f308 	lsl.w	r3, r1, r8
 80074ae:	930c      	str	r3, [sp, #48]	; 0x30
 80074b0:	9111      	str	r1, [sp, #68]	; 0x44
 80074b2:	e741      	b.n	8007338 <_strtod_l+0x700>
 80074b4:	2300      	movs	r3, #0
 80074b6:	930c      	str	r3, [sp, #48]	; 0x30
 80074b8:	2301      	movs	r3, #1
 80074ba:	9311      	str	r3, [sp, #68]	; 0x44
 80074bc:	e73c      	b.n	8007338 <_strtod_l+0x700>
 80074be:	991e      	ldr	r1, [sp, #120]	; 0x78
 80074c0:	4642      	mov	r2, r8
 80074c2:	4620      	mov	r0, r4
 80074c4:	f002 f91e 	bl	8009704 <__lshift>
 80074c8:	901e      	str	r0, [sp, #120]	; 0x78
 80074ca:	2800      	cmp	r0, #0
 80074cc:	f47f af66 	bne.w	800739c <_strtod_l+0x764>
 80074d0:	e5fe      	b.n	80070d0 <_strtod_l+0x498>
 80074d2:	465f      	mov	r7, fp
 80074d4:	d16e      	bne.n	80075b4 <_strtod_l+0x97c>
 80074d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80074d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80074dc:	b342      	cbz	r2, 8007530 <_strtod_l+0x8f8>
 80074de:	4a32      	ldr	r2, [pc, #200]	; (80075a8 <_strtod_l+0x970>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d128      	bne.n	8007536 <_strtod_l+0x8fe>
 80074e4:	9b04      	ldr	r3, [sp, #16]
 80074e6:	4650      	mov	r0, sl
 80074e8:	b1eb      	cbz	r3, 8007526 <_strtod_l+0x8ee>
 80074ea:	4a2d      	ldr	r2, [pc, #180]	; (80075a0 <_strtod_l+0x968>)
 80074ec:	403a      	ands	r2, r7
 80074ee:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80074f2:	f04f 31ff 	mov.w	r1, #4294967295
 80074f6:	d819      	bhi.n	800752c <_strtod_l+0x8f4>
 80074f8:	0d12      	lsrs	r2, r2, #20
 80074fa:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80074fe:	fa01 f303 	lsl.w	r3, r1, r3
 8007502:	4298      	cmp	r0, r3
 8007504:	d117      	bne.n	8007536 <_strtod_l+0x8fe>
 8007506:	4b29      	ldr	r3, [pc, #164]	; (80075ac <_strtod_l+0x974>)
 8007508:	429f      	cmp	r7, r3
 800750a:	d102      	bne.n	8007512 <_strtod_l+0x8da>
 800750c:	3001      	adds	r0, #1
 800750e:	f43f addf 	beq.w	80070d0 <_strtod_l+0x498>
 8007512:	4b23      	ldr	r3, [pc, #140]	; (80075a0 <_strtod_l+0x968>)
 8007514:	403b      	ands	r3, r7
 8007516:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800751a:	f04f 0a00 	mov.w	sl, #0
 800751e:	9b04      	ldr	r3, [sp, #16]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d1a0      	bne.n	8007466 <_strtod_l+0x82e>
 8007524:	e5de      	b.n	80070e4 <_strtod_l+0x4ac>
 8007526:	f04f 33ff 	mov.w	r3, #4294967295
 800752a:	e7ea      	b.n	8007502 <_strtod_l+0x8ca>
 800752c:	460b      	mov	r3, r1
 800752e:	e7e8      	b.n	8007502 <_strtod_l+0x8ca>
 8007530:	ea53 030a 	orrs.w	r3, r3, sl
 8007534:	d088      	beq.n	8007448 <_strtod_l+0x810>
 8007536:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007538:	b1db      	cbz	r3, 8007572 <_strtod_l+0x93a>
 800753a:	423b      	tst	r3, r7
 800753c:	d0ef      	beq.n	800751e <_strtod_l+0x8e6>
 800753e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007540:	9a04      	ldr	r2, [sp, #16]
 8007542:	4650      	mov	r0, sl
 8007544:	4659      	mov	r1, fp
 8007546:	b1c3      	cbz	r3, 800757a <_strtod_l+0x942>
 8007548:	f7ff fb5a 	bl	8006c00 <sulp>
 800754c:	4602      	mov	r2, r0
 800754e:	460b      	mov	r3, r1
 8007550:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007554:	f7f8 feba 	bl	80002cc <__adddf3>
 8007558:	4682      	mov	sl, r0
 800755a:	468b      	mov	fp, r1
 800755c:	e7df      	b.n	800751e <_strtod_l+0x8e6>
 800755e:	4013      	ands	r3, r2
 8007560:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007564:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007568:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800756c:	f04f 3aff 	mov.w	sl, #4294967295
 8007570:	e7d5      	b.n	800751e <_strtod_l+0x8e6>
 8007572:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007574:	ea13 0f0a 	tst.w	r3, sl
 8007578:	e7e0      	b.n	800753c <_strtod_l+0x904>
 800757a:	f7ff fb41 	bl	8006c00 <sulp>
 800757e:	4602      	mov	r2, r0
 8007580:	460b      	mov	r3, r1
 8007582:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007586:	f7f8 fe9f 	bl	80002c8 <__aeabi_dsub>
 800758a:	2200      	movs	r2, #0
 800758c:	2300      	movs	r3, #0
 800758e:	4682      	mov	sl, r0
 8007590:	468b      	mov	fp, r1
 8007592:	f7f9 fab9 	bl	8000b08 <__aeabi_dcmpeq>
 8007596:	2800      	cmp	r0, #0
 8007598:	d0c1      	beq.n	800751e <_strtod_l+0x8e6>
 800759a:	e60e      	b.n	80071ba <_strtod_l+0x582>
 800759c:	fffffc02 	.word	0xfffffc02
 80075a0:	7ff00000 	.word	0x7ff00000
 80075a4:	39500000 	.word	0x39500000
 80075a8:	000fffff 	.word	0x000fffff
 80075ac:	7fefffff 	.word	0x7fefffff
 80075b0:	0800a428 	.word	0x0800a428
 80075b4:	4631      	mov	r1, r6
 80075b6:	4628      	mov	r0, r5
 80075b8:	f002 fa8c 	bl	8009ad4 <__ratio>
 80075bc:	ec59 8b10 	vmov	r8, r9, d0
 80075c0:	ee10 0a10 	vmov	r0, s0
 80075c4:	2200      	movs	r2, #0
 80075c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80075ca:	4649      	mov	r1, r9
 80075cc:	f7f9 fab0 	bl	8000b30 <__aeabi_dcmple>
 80075d0:	2800      	cmp	r0, #0
 80075d2:	d07c      	beq.n	80076ce <_strtod_l+0xa96>
 80075d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d04c      	beq.n	8007674 <_strtod_l+0xa3c>
 80075da:	4b95      	ldr	r3, [pc, #596]	; (8007830 <_strtod_l+0xbf8>)
 80075dc:	2200      	movs	r2, #0
 80075de:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80075e2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007830 <_strtod_l+0xbf8>
 80075e6:	f04f 0800 	mov.w	r8, #0
 80075ea:	4b92      	ldr	r3, [pc, #584]	; (8007834 <_strtod_l+0xbfc>)
 80075ec:	403b      	ands	r3, r7
 80075ee:	9311      	str	r3, [sp, #68]	; 0x44
 80075f0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80075f2:	4b91      	ldr	r3, [pc, #580]	; (8007838 <_strtod_l+0xc00>)
 80075f4:	429a      	cmp	r2, r3
 80075f6:	f040 80b2 	bne.w	800775e <_strtod_l+0xb26>
 80075fa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80075fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007602:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007606:	ec4b ab10 	vmov	d0, sl, fp
 800760a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800760e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007612:	f002 f987 	bl	8009924 <__ulp>
 8007616:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800761a:	ec53 2b10 	vmov	r2, r3, d0
 800761e:	f7f9 f80b 	bl	8000638 <__aeabi_dmul>
 8007622:	4652      	mov	r2, sl
 8007624:	465b      	mov	r3, fp
 8007626:	f7f8 fe51 	bl	80002cc <__adddf3>
 800762a:	460b      	mov	r3, r1
 800762c:	4981      	ldr	r1, [pc, #516]	; (8007834 <_strtod_l+0xbfc>)
 800762e:	4a83      	ldr	r2, [pc, #524]	; (800783c <_strtod_l+0xc04>)
 8007630:	4019      	ands	r1, r3
 8007632:	4291      	cmp	r1, r2
 8007634:	4682      	mov	sl, r0
 8007636:	d95e      	bls.n	80076f6 <_strtod_l+0xabe>
 8007638:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800763a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800763e:	4293      	cmp	r3, r2
 8007640:	d103      	bne.n	800764a <_strtod_l+0xa12>
 8007642:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007644:	3301      	adds	r3, #1
 8007646:	f43f ad43 	beq.w	80070d0 <_strtod_l+0x498>
 800764a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8007848 <_strtod_l+0xc10>
 800764e:	f04f 3aff 	mov.w	sl, #4294967295
 8007652:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007654:	4620      	mov	r0, r4
 8007656:	f001 fe39 	bl	80092cc <_Bfree>
 800765a:	9907      	ldr	r1, [sp, #28]
 800765c:	4620      	mov	r0, r4
 800765e:	f001 fe35 	bl	80092cc <_Bfree>
 8007662:	4631      	mov	r1, r6
 8007664:	4620      	mov	r0, r4
 8007666:	f001 fe31 	bl	80092cc <_Bfree>
 800766a:	4629      	mov	r1, r5
 800766c:	4620      	mov	r0, r4
 800766e:	f001 fe2d 	bl	80092cc <_Bfree>
 8007672:	e613      	b.n	800729c <_strtod_l+0x664>
 8007674:	f1ba 0f00 	cmp.w	sl, #0
 8007678:	d11b      	bne.n	80076b2 <_strtod_l+0xa7a>
 800767a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800767e:	b9f3      	cbnz	r3, 80076be <_strtod_l+0xa86>
 8007680:	4b6b      	ldr	r3, [pc, #428]	; (8007830 <_strtod_l+0xbf8>)
 8007682:	2200      	movs	r2, #0
 8007684:	4640      	mov	r0, r8
 8007686:	4649      	mov	r1, r9
 8007688:	f7f9 fa48 	bl	8000b1c <__aeabi_dcmplt>
 800768c:	b9d0      	cbnz	r0, 80076c4 <_strtod_l+0xa8c>
 800768e:	4640      	mov	r0, r8
 8007690:	4649      	mov	r1, r9
 8007692:	4b6b      	ldr	r3, [pc, #428]	; (8007840 <_strtod_l+0xc08>)
 8007694:	2200      	movs	r2, #0
 8007696:	f7f8 ffcf 	bl	8000638 <__aeabi_dmul>
 800769a:	4680      	mov	r8, r0
 800769c:	4689      	mov	r9, r1
 800769e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80076a2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80076a6:	931b      	str	r3, [sp, #108]	; 0x6c
 80076a8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80076ac:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80076b0:	e79b      	b.n	80075ea <_strtod_l+0x9b2>
 80076b2:	f1ba 0f01 	cmp.w	sl, #1
 80076b6:	d102      	bne.n	80076be <_strtod_l+0xa86>
 80076b8:	2f00      	cmp	r7, #0
 80076ba:	f43f ad7e 	beq.w	80071ba <_strtod_l+0x582>
 80076be:	4b61      	ldr	r3, [pc, #388]	; (8007844 <_strtod_l+0xc0c>)
 80076c0:	2200      	movs	r2, #0
 80076c2:	e78c      	b.n	80075de <_strtod_l+0x9a6>
 80076c4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007840 <_strtod_l+0xc08>
 80076c8:	f04f 0800 	mov.w	r8, #0
 80076cc:	e7e7      	b.n	800769e <_strtod_l+0xa66>
 80076ce:	4b5c      	ldr	r3, [pc, #368]	; (8007840 <_strtod_l+0xc08>)
 80076d0:	4640      	mov	r0, r8
 80076d2:	4649      	mov	r1, r9
 80076d4:	2200      	movs	r2, #0
 80076d6:	f7f8 ffaf 	bl	8000638 <__aeabi_dmul>
 80076da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80076dc:	4680      	mov	r8, r0
 80076de:	4689      	mov	r9, r1
 80076e0:	b933      	cbnz	r3, 80076f0 <_strtod_l+0xab8>
 80076e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80076e6:	9012      	str	r0, [sp, #72]	; 0x48
 80076e8:	9313      	str	r3, [sp, #76]	; 0x4c
 80076ea:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80076ee:	e7dd      	b.n	80076ac <_strtod_l+0xa74>
 80076f0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80076f4:	e7f9      	b.n	80076ea <_strtod_l+0xab2>
 80076f6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80076fa:	9b04      	ldr	r3, [sp, #16]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d1a8      	bne.n	8007652 <_strtod_l+0xa1a>
 8007700:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007704:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007706:	0d1b      	lsrs	r3, r3, #20
 8007708:	051b      	lsls	r3, r3, #20
 800770a:	429a      	cmp	r2, r3
 800770c:	d1a1      	bne.n	8007652 <_strtod_l+0xa1a>
 800770e:	4640      	mov	r0, r8
 8007710:	4649      	mov	r1, r9
 8007712:	f7f9 faf1 	bl	8000cf8 <__aeabi_d2lz>
 8007716:	f7f8 ff61 	bl	80005dc <__aeabi_l2d>
 800771a:	4602      	mov	r2, r0
 800771c:	460b      	mov	r3, r1
 800771e:	4640      	mov	r0, r8
 8007720:	4649      	mov	r1, r9
 8007722:	f7f8 fdd1 	bl	80002c8 <__aeabi_dsub>
 8007726:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007728:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800772c:	ea43 030a 	orr.w	r3, r3, sl
 8007730:	4313      	orrs	r3, r2
 8007732:	4680      	mov	r8, r0
 8007734:	4689      	mov	r9, r1
 8007736:	d053      	beq.n	80077e0 <_strtod_l+0xba8>
 8007738:	a335      	add	r3, pc, #212	; (adr r3, 8007810 <_strtod_l+0xbd8>)
 800773a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800773e:	f7f9 f9ed 	bl	8000b1c <__aeabi_dcmplt>
 8007742:	2800      	cmp	r0, #0
 8007744:	f47f acce 	bne.w	80070e4 <_strtod_l+0x4ac>
 8007748:	a333      	add	r3, pc, #204	; (adr r3, 8007818 <_strtod_l+0xbe0>)
 800774a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800774e:	4640      	mov	r0, r8
 8007750:	4649      	mov	r1, r9
 8007752:	f7f9 fa01 	bl	8000b58 <__aeabi_dcmpgt>
 8007756:	2800      	cmp	r0, #0
 8007758:	f43f af7b 	beq.w	8007652 <_strtod_l+0xa1a>
 800775c:	e4c2      	b.n	80070e4 <_strtod_l+0x4ac>
 800775e:	9b04      	ldr	r3, [sp, #16]
 8007760:	b333      	cbz	r3, 80077b0 <_strtod_l+0xb78>
 8007762:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007764:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007768:	d822      	bhi.n	80077b0 <_strtod_l+0xb78>
 800776a:	a32d      	add	r3, pc, #180	; (adr r3, 8007820 <_strtod_l+0xbe8>)
 800776c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007770:	4640      	mov	r0, r8
 8007772:	4649      	mov	r1, r9
 8007774:	f7f9 f9dc 	bl	8000b30 <__aeabi_dcmple>
 8007778:	b1a0      	cbz	r0, 80077a4 <_strtod_l+0xb6c>
 800777a:	4649      	mov	r1, r9
 800777c:	4640      	mov	r0, r8
 800777e:	f7f9 fa33 	bl	8000be8 <__aeabi_d2uiz>
 8007782:	2801      	cmp	r0, #1
 8007784:	bf38      	it	cc
 8007786:	2001      	movcc	r0, #1
 8007788:	f7f8 fedc 	bl	8000544 <__aeabi_ui2d>
 800778c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800778e:	4680      	mov	r8, r0
 8007790:	4689      	mov	r9, r1
 8007792:	bb13      	cbnz	r3, 80077da <_strtod_l+0xba2>
 8007794:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007798:	9014      	str	r0, [sp, #80]	; 0x50
 800779a:	9315      	str	r3, [sp, #84]	; 0x54
 800779c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80077a0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80077a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80077a8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80077ac:	1a9b      	subs	r3, r3, r2
 80077ae:	930d      	str	r3, [sp, #52]	; 0x34
 80077b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80077b4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80077b8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80077bc:	f002 f8b2 	bl	8009924 <__ulp>
 80077c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80077c4:	ec53 2b10 	vmov	r2, r3, d0
 80077c8:	f7f8 ff36 	bl	8000638 <__aeabi_dmul>
 80077cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80077d0:	f7f8 fd7c 	bl	80002cc <__adddf3>
 80077d4:	4682      	mov	sl, r0
 80077d6:	468b      	mov	fp, r1
 80077d8:	e78f      	b.n	80076fa <_strtod_l+0xac2>
 80077da:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80077de:	e7dd      	b.n	800779c <_strtod_l+0xb64>
 80077e0:	a311      	add	r3, pc, #68	; (adr r3, 8007828 <_strtod_l+0xbf0>)
 80077e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e6:	f7f9 f999 	bl	8000b1c <__aeabi_dcmplt>
 80077ea:	e7b4      	b.n	8007756 <_strtod_l+0xb1e>
 80077ec:	2300      	movs	r3, #0
 80077ee:	930e      	str	r3, [sp, #56]	; 0x38
 80077f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80077f2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80077f4:	6013      	str	r3, [r2, #0]
 80077f6:	f7ff ba65 	b.w	8006cc4 <_strtod_l+0x8c>
 80077fa:	2b65      	cmp	r3, #101	; 0x65
 80077fc:	f43f ab5d 	beq.w	8006eba <_strtod_l+0x282>
 8007800:	2b45      	cmp	r3, #69	; 0x45
 8007802:	f43f ab5a 	beq.w	8006eba <_strtod_l+0x282>
 8007806:	2201      	movs	r2, #1
 8007808:	f7ff bb92 	b.w	8006f30 <_strtod_l+0x2f8>
 800780c:	f3af 8000 	nop.w
 8007810:	94a03595 	.word	0x94a03595
 8007814:	3fdfffff 	.word	0x3fdfffff
 8007818:	35afe535 	.word	0x35afe535
 800781c:	3fe00000 	.word	0x3fe00000
 8007820:	ffc00000 	.word	0xffc00000
 8007824:	41dfffff 	.word	0x41dfffff
 8007828:	94a03595 	.word	0x94a03595
 800782c:	3fcfffff 	.word	0x3fcfffff
 8007830:	3ff00000 	.word	0x3ff00000
 8007834:	7ff00000 	.word	0x7ff00000
 8007838:	7fe00000 	.word	0x7fe00000
 800783c:	7c9fffff 	.word	0x7c9fffff
 8007840:	3fe00000 	.word	0x3fe00000
 8007844:	bff00000 	.word	0xbff00000
 8007848:	7fefffff 	.word	0x7fefffff

0800784c <strtod>:
 800784c:	460a      	mov	r2, r1
 800784e:	4601      	mov	r1, r0
 8007850:	4802      	ldr	r0, [pc, #8]	; (800785c <strtod+0x10>)
 8007852:	4b03      	ldr	r3, [pc, #12]	; (8007860 <strtod+0x14>)
 8007854:	6800      	ldr	r0, [r0, #0]
 8007856:	f7ff b9ef 	b.w	8006c38 <_strtod_l>
 800785a:	bf00      	nop
 800785c:	20000028 	.word	0x20000028
 8007860:	20000090 	.word	0x20000090

08007864 <__swbuf_r>:
 8007864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007866:	460e      	mov	r6, r1
 8007868:	4614      	mov	r4, r2
 800786a:	4605      	mov	r5, r0
 800786c:	b118      	cbz	r0, 8007876 <__swbuf_r+0x12>
 800786e:	6983      	ldr	r3, [r0, #24]
 8007870:	b90b      	cbnz	r3, 8007876 <__swbuf_r+0x12>
 8007872:	f001 f84b 	bl	800890c <__sinit>
 8007876:	4b21      	ldr	r3, [pc, #132]	; (80078fc <__swbuf_r+0x98>)
 8007878:	429c      	cmp	r4, r3
 800787a:	d12b      	bne.n	80078d4 <__swbuf_r+0x70>
 800787c:	686c      	ldr	r4, [r5, #4]
 800787e:	69a3      	ldr	r3, [r4, #24]
 8007880:	60a3      	str	r3, [r4, #8]
 8007882:	89a3      	ldrh	r3, [r4, #12]
 8007884:	071a      	lsls	r2, r3, #28
 8007886:	d52f      	bpl.n	80078e8 <__swbuf_r+0x84>
 8007888:	6923      	ldr	r3, [r4, #16]
 800788a:	b36b      	cbz	r3, 80078e8 <__swbuf_r+0x84>
 800788c:	6923      	ldr	r3, [r4, #16]
 800788e:	6820      	ldr	r0, [r4, #0]
 8007890:	1ac0      	subs	r0, r0, r3
 8007892:	6963      	ldr	r3, [r4, #20]
 8007894:	b2f6      	uxtb	r6, r6
 8007896:	4283      	cmp	r3, r0
 8007898:	4637      	mov	r7, r6
 800789a:	dc04      	bgt.n	80078a6 <__swbuf_r+0x42>
 800789c:	4621      	mov	r1, r4
 800789e:	4628      	mov	r0, r5
 80078a0:	f000 ffa0 	bl	80087e4 <_fflush_r>
 80078a4:	bb30      	cbnz	r0, 80078f4 <__swbuf_r+0x90>
 80078a6:	68a3      	ldr	r3, [r4, #8]
 80078a8:	3b01      	subs	r3, #1
 80078aa:	60a3      	str	r3, [r4, #8]
 80078ac:	6823      	ldr	r3, [r4, #0]
 80078ae:	1c5a      	adds	r2, r3, #1
 80078b0:	6022      	str	r2, [r4, #0]
 80078b2:	701e      	strb	r6, [r3, #0]
 80078b4:	6963      	ldr	r3, [r4, #20]
 80078b6:	3001      	adds	r0, #1
 80078b8:	4283      	cmp	r3, r0
 80078ba:	d004      	beq.n	80078c6 <__swbuf_r+0x62>
 80078bc:	89a3      	ldrh	r3, [r4, #12]
 80078be:	07db      	lsls	r3, r3, #31
 80078c0:	d506      	bpl.n	80078d0 <__swbuf_r+0x6c>
 80078c2:	2e0a      	cmp	r6, #10
 80078c4:	d104      	bne.n	80078d0 <__swbuf_r+0x6c>
 80078c6:	4621      	mov	r1, r4
 80078c8:	4628      	mov	r0, r5
 80078ca:	f000 ff8b 	bl	80087e4 <_fflush_r>
 80078ce:	b988      	cbnz	r0, 80078f4 <__swbuf_r+0x90>
 80078d0:	4638      	mov	r0, r7
 80078d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078d4:	4b0a      	ldr	r3, [pc, #40]	; (8007900 <__swbuf_r+0x9c>)
 80078d6:	429c      	cmp	r4, r3
 80078d8:	d101      	bne.n	80078de <__swbuf_r+0x7a>
 80078da:	68ac      	ldr	r4, [r5, #8]
 80078dc:	e7cf      	b.n	800787e <__swbuf_r+0x1a>
 80078de:	4b09      	ldr	r3, [pc, #36]	; (8007904 <__swbuf_r+0xa0>)
 80078e0:	429c      	cmp	r4, r3
 80078e2:	bf08      	it	eq
 80078e4:	68ec      	ldreq	r4, [r5, #12]
 80078e6:	e7ca      	b.n	800787e <__swbuf_r+0x1a>
 80078e8:	4621      	mov	r1, r4
 80078ea:	4628      	mov	r0, r5
 80078ec:	f000 f80c 	bl	8007908 <__swsetup_r>
 80078f0:	2800      	cmp	r0, #0
 80078f2:	d0cb      	beq.n	800788c <__swbuf_r+0x28>
 80078f4:	f04f 37ff 	mov.w	r7, #4294967295
 80078f8:	e7ea      	b.n	80078d0 <__swbuf_r+0x6c>
 80078fa:	bf00      	nop
 80078fc:	0800a504 	.word	0x0800a504
 8007900:	0800a524 	.word	0x0800a524
 8007904:	0800a4e4 	.word	0x0800a4e4

08007908 <__swsetup_r>:
 8007908:	4b32      	ldr	r3, [pc, #200]	; (80079d4 <__swsetup_r+0xcc>)
 800790a:	b570      	push	{r4, r5, r6, lr}
 800790c:	681d      	ldr	r5, [r3, #0]
 800790e:	4606      	mov	r6, r0
 8007910:	460c      	mov	r4, r1
 8007912:	b125      	cbz	r5, 800791e <__swsetup_r+0x16>
 8007914:	69ab      	ldr	r3, [r5, #24]
 8007916:	b913      	cbnz	r3, 800791e <__swsetup_r+0x16>
 8007918:	4628      	mov	r0, r5
 800791a:	f000 fff7 	bl	800890c <__sinit>
 800791e:	4b2e      	ldr	r3, [pc, #184]	; (80079d8 <__swsetup_r+0xd0>)
 8007920:	429c      	cmp	r4, r3
 8007922:	d10f      	bne.n	8007944 <__swsetup_r+0x3c>
 8007924:	686c      	ldr	r4, [r5, #4]
 8007926:	89a3      	ldrh	r3, [r4, #12]
 8007928:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800792c:	0719      	lsls	r1, r3, #28
 800792e:	d42c      	bmi.n	800798a <__swsetup_r+0x82>
 8007930:	06dd      	lsls	r5, r3, #27
 8007932:	d411      	bmi.n	8007958 <__swsetup_r+0x50>
 8007934:	2309      	movs	r3, #9
 8007936:	6033      	str	r3, [r6, #0]
 8007938:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800793c:	81a3      	strh	r3, [r4, #12]
 800793e:	f04f 30ff 	mov.w	r0, #4294967295
 8007942:	e03e      	b.n	80079c2 <__swsetup_r+0xba>
 8007944:	4b25      	ldr	r3, [pc, #148]	; (80079dc <__swsetup_r+0xd4>)
 8007946:	429c      	cmp	r4, r3
 8007948:	d101      	bne.n	800794e <__swsetup_r+0x46>
 800794a:	68ac      	ldr	r4, [r5, #8]
 800794c:	e7eb      	b.n	8007926 <__swsetup_r+0x1e>
 800794e:	4b24      	ldr	r3, [pc, #144]	; (80079e0 <__swsetup_r+0xd8>)
 8007950:	429c      	cmp	r4, r3
 8007952:	bf08      	it	eq
 8007954:	68ec      	ldreq	r4, [r5, #12]
 8007956:	e7e6      	b.n	8007926 <__swsetup_r+0x1e>
 8007958:	0758      	lsls	r0, r3, #29
 800795a:	d512      	bpl.n	8007982 <__swsetup_r+0x7a>
 800795c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800795e:	b141      	cbz	r1, 8007972 <__swsetup_r+0x6a>
 8007960:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007964:	4299      	cmp	r1, r3
 8007966:	d002      	beq.n	800796e <__swsetup_r+0x66>
 8007968:	4630      	mov	r0, r6
 800796a:	f002 f939 	bl	8009be0 <_free_r>
 800796e:	2300      	movs	r3, #0
 8007970:	6363      	str	r3, [r4, #52]	; 0x34
 8007972:	89a3      	ldrh	r3, [r4, #12]
 8007974:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007978:	81a3      	strh	r3, [r4, #12]
 800797a:	2300      	movs	r3, #0
 800797c:	6063      	str	r3, [r4, #4]
 800797e:	6923      	ldr	r3, [r4, #16]
 8007980:	6023      	str	r3, [r4, #0]
 8007982:	89a3      	ldrh	r3, [r4, #12]
 8007984:	f043 0308 	orr.w	r3, r3, #8
 8007988:	81a3      	strh	r3, [r4, #12]
 800798a:	6923      	ldr	r3, [r4, #16]
 800798c:	b94b      	cbnz	r3, 80079a2 <__swsetup_r+0x9a>
 800798e:	89a3      	ldrh	r3, [r4, #12]
 8007990:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007994:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007998:	d003      	beq.n	80079a2 <__swsetup_r+0x9a>
 800799a:	4621      	mov	r1, r4
 800799c:	4630      	mov	r0, r6
 800799e:	f001 fbed 	bl	800917c <__smakebuf_r>
 80079a2:	89a0      	ldrh	r0, [r4, #12]
 80079a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80079a8:	f010 0301 	ands.w	r3, r0, #1
 80079ac:	d00a      	beq.n	80079c4 <__swsetup_r+0xbc>
 80079ae:	2300      	movs	r3, #0
 80079b0:	60a3      	str	r3, [r4, #8]
 80079b2:	6963      	ldr	r3, [r4, #20]
 80079b4:	425b      	negs	r3, r3
 80079b6:	61a3      	str	r3, [r4, #24]
 80079b8:	6923      	ldr	r3, [r4, #16]
 80079ba:	b943      	cbnz	r3, 80079ce <__swsetup_r+0xc6>
 80079bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80079c0:	d1ba      	bne.n	8007938 <__swsetup_r+0x30>
 80079c2:	bd70      	pop	{r4, r5, r6, pc}
 80079c4:	0781      	lsls	r1, r0, #30
 80079c6:	bf58      	it	pl
 80079c8:	6963      	ldrpl	r3, [r4, #20]
 80079ca:	60a3      	str	r3, [r4, #8]
 80079cc:	e7f4      	b.n	80079b8 <__swsetup_r+0xb0>
 80079ce:	2000      	movs	r0, #0
 80079d0:	e7f7      	b.n	80079c2 <__swsetup_r+0xba>
 80079d2:	bf00      	nop
 80079d4:	20000028 	.word	0x20000028
 80079d8:	0800a504 	.word	0x0800a504
 80079dc:	0800a524 	.word	0x0800a524
 80079e0:	0800a4e4 	.word	0x0800a4e4

080079e4 <quorem>:
 80079e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079e8:	6903      	ldr	r3, [r0, #16]
 80079ea:	690c      	ldr	r4, [r1, #16]
 80079ec:	42a3      	cmp	r3, r4
 80079ee:	4607      	mov	r7, r0
 80079f0:	f2c0 8081 	blt.w	8007af6 <quorem+0x112>
 80079f4:	3c01      	subs	r4, #1
 80079f6:	f101 0814 	add.w	r8, r1, #20
 80079fa:	f100 0514 	add.w	r5, r0, #20
 80079fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a02:	9301      	str	r3, [sp, #4]
 8007a04:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007a08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a0c:	3301      	adds	r3, #1
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007a14:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007a18:	fbb2 f6f3 	udiv	r6, r2, r3
 8007a1c:	d331      	bcc.n	8007a82 <quorem+0x9e>
 8007a1e:	f04f 0e00 	mov.w	lr, #0
 8007a22:	4640      	mov	r0, r8
 8007a24:	46ac      	mov	ip, r5
 8007a26:	46f2      	mov	sl, lr
 8007a28:	f850 2b04 	ldr.w	r2, [r0], #4
 8007a2c:	b293      	uxth	r3, r2
 8007a2e:	fb06 e303 	mla	r3, r6, r3, lr
 8007a32:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007a36:	b29b      	uxth	r3, r3
 8007a38:	ebaa 0303 	sub.w	r3, sl, r3
 8007a3c:	0c12      	lsrs	r2, r2, #16
 8007a3e:	f8dc a000 	ldr.w	sl, [ip]
 8007a42:	fb06 e202 	mla	r2, r6, r2, lr
 8007a46:	fa13 f38a 	uxtah	r3, r3, sl
 8007a4a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007a4e:	fa1f fa82 	uxth.w	sl, r2
 8007a52:	f8dc 2000 	ldr.w	r2, [ip]
 8007a56:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007a5a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a64:	4581      	cmp	r9, r0
 8007a66:	f84c 3b04 	str.w	r3, [ip], #4
 8007a6a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007a6e:	d2db      	bcs.n	8007a28 <quorem+0x44>
 8007a70:	f855 300b 	ldr.w	r3, [r5, fp]
 8007a74:	b92b      	cbnz	r3, 8007a82 <quorem+0x9e>
 8007a76:	9b01      	ldr	r3, [sp, #4]
 8007a78:	3b04      	subs	r3, #4
 8007a7a:	429d      	cmp	r5, r3
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	d32e      	bcc.n	8007ade <quorem+0xfa>
 8007a80:	613c      	str	r4, [r7, #16]
 8007a82:	4638      	mov	r0, r7
 8007a84:	f001 feaa 	bl	80097dc <__mcmp>
 8007a88:	2800      	cmp	r0, #0
 8007a8a:	db24      	blt.n	8007ad6 <quorem+0xf2>
 8007a8c:	3601      	adds	r6, #1
 8007a8e:	4628      	mov	r0, r5
 8007a90:	f04f 0c00 	mov.w	ip, #0
 8007a94:	f858 2b04 	ldr.w	r2, [r8], #4
 8007a98:	f8d0 e000 	ldr.w	lr, [r0]
 8007a9c:	b293      	uxth	r3, r2
 8007a9e:	ebac 0303 	sub.w	r3, ip, r3
 8007aa2:	0c12      	lsrs	r2, r2, #16
 8007aa4:	fa13 f38e 	uxtah	r3, r3, lr
 8007aa8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007aac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ab6:	45c1      	cmp	r9, r8
 8007ab8:	f840 3b04 	str.w	r3, [r0], #4
 8007abc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007ac0:	d2e8      	bcs.n	8007a94 <quorem+0xb0>
 8007ac2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ac6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007aca:	b922      	cbnz	r2, 8007ad6 <quorem+0xf2>
 8007acc:	3b04      	subs	r3, #4
 8007ace:	429d      	cmp	r5, r3
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	d30a      	bcc.n	8007aea <quorem+0x106>
 8007ad4:	613c      	str	r4, [r7, #16]
 8007ad6:	4630      	mov	r0, r6
 8007ad8:	b003      	add	sp, #12
 8007ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ade:	6812      	ldr	r2, [r2, #0]
 8007ae0:	3b04      	subs	r3, #4
 8007ae2:	2a00      	cmp	r2, #0
 8007ae4:	d1cc      	bne.n	8007a80 <quorem+0x9c>
 8007ae6:	3c01      	subs	r4, #1
 8007ae8:	e7c7      	b.n	8007a7a <quorem+0x96>
 8007aea:	6812      	ldr	r2, [r2, #0]
 8007aec:	3b04      	subs	r3, #4
 8007aee:	2a00      	cmp	r2, #0
 8007af0:	d1f0      	bne.n	8007ad4 <quorem+0xf0>
 8007af2:	3c01      	subs	r4, #1
 8007af4:	e7eb      	b.n	8007ace <quorem+0xea>
 8007af6:	2000      	movs	r0, #0
 8007af8:	e7ee      	b.n	8007ad8 <quorem+0xf4>
 8007afa:	0000      	movs	r0, r0
 8007afc:	0000      	movs	r0, r0
	...

08007b00 <_dtoa_r>:
 8007b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b04:	ed2d 8b02 	vpush	{d8}
 8007b08:	ec57 6b10 	vmov	r6, r7, d0
 8007b0c:	b095      	sub	sp, #84	; 0x54
 8007b0e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007b10:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007b14:	9105      	str	r1, [sp, #20]
 8007b16:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007b1a:	4604      	mov	r4, r0
 8007b1c:	9209      	str	r2, [sp, #36]	; 0x24
 8007b1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b20:	b975      	cbnz	r5, 8007b40 <_dtoa_r+0x40>
 8007b22:	2010      	movs	r0, #16
 8007b24:	f001 fb6a 	bl	80091fc <malloc>
 8007b28:	4602      	mov	r2, r0
 8007b2a:	6260      	str	r0, [r4, #36]	; 0x24
 8007b2c:	b920      	cbnz	r0, 8007b38 <_dtoa_r+0x38>
 8007b2e:	4bb2      	ldr	r3, [pc, #712]	; (8007df8 <_dtoa_r+0x2f8>)
 8007b30:	21ea      	movs	r1, #234	; 0xea
 8007b32:	48b2      	ldr	r0, [pc, #712]	; (8007dfc <_dtoa_r+0x2fc>)
 8007b34:	f002 fae4 	bl	800a100 <__assert_func>
 8007b38:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007b3c:	6005      	str	r5, [r0, #0]
 8007b3e:	60c5      	str	r5, [r0, #12]
 8007b40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b42:	6819      	ldr	r1, [r3, #0]
 8007b44:	b151      	cbz	r1, 8007b5c <_dtoa_r+0x5c>
 8007b46:	685a      	ldr	r2, [r3, #4]
 8007b48:	604a      	str	r2, [r1, #4]
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	4093      	lsls	r3, r2
 8007b4e:	608b      	str	r3, [r1, #8]
 8007b50:	4620      	mov	r0, r4
 8007b52:	f001 fbbb 	bl	80092cc <_Bfree>
 8007b56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b58:	2200      	movs	r2, #0
 8007b5a:	601a      	str	r2, [r3, #0]
 8007b5c:	1e3b      	subs	r3, r7, #0
 8007b5e:	bfb9      	ittee	lt
 8007b60:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007b64:	9303      	strlt	r3, [sp, #12]
 8007b66:	2300      	movge	r3, #0
 8007b68:	f8c8 3000 	strge.w	r3, [r8]
 8007b6c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007b70:	4ba3      	ldr	r3, [pc, #652]	; (8007e00 <_dtoa_r+0x300>)
 8007b72:	bfbc      	itt	lt
 8007b74:	2201      	movlt	r2, #1
 8007b76:	f8c8 2000 	strlt.w	r2, [r8]
 8007b7a:	ea33 0309 	bics.w	r3, r3, r9
 8007b7e:	d11b      	bne.n	8007bb8 <_dtoa_r+0xb8>
 8007b80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007b82:	f242 730f 	movw	r3, #9999	; 0x270f
 8007b86:	6013      	str	r3, [r2, #0]
 8007b88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007b8c:	4333      	orrs	r3, r6
 8007b8e:	f000 857a 	beq.w	8008686 <_dtoa_r+0xb86>
 8007b92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b94:	b963      	cbnz	r3, 8007bb0 <_dtoa_r+0xb0>
 8007b96:	4b9b      	ldr	r3, [pc, #620]	; (8007e04 <_dtoa_r+0x304>)
 8007b98:	e024      	b.n	8007be4 <_dtoa_r+0xe4>
 8007b9a:	4b9b      	ldr	r3, [pc, #620]	; (8007e08 <_dtoa_r+0x308>)
 8007b9c:	9300      	str	r3, [sp, #0]
 8007b9e:	3308      	adds	r3, #8
 8007ba0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007ba2:	6013      	str	r3, [r2, #0]
 8007ba4:	9800      	ldr	r0, [sp, #0]
 8007ba6:	b015      	add	sp, #84	; 0x54
 8007ba8:	ecbd 8b02 	vpop	{d8}
 8007bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bb0:	4b94      	ldr	r3, [pc, #592]	; (8007e04 <_dtoa_r+0x304>)
 8007bb2:	9300      	str	r3, [sp, #0]
 8007bb4:	3303      	adds	r3, #3
 8007bb6:	e7f3      	b.n	8007ba0 <_dtoa_r+0xa0>
 8007bb8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	ec51 0b17 	vmov	r0, r1, d7
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007bc8:	f7f8 ff9e 	bl	8000b08 <__aeabi_dcmpeq>
 8007bcc:	4680      	mov	r8, r0
 8007bce:	b158      	cbz	r0, 8007be8 <_dtoa_r+0xe8>
 8007bd0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	6013      	str	r3, [r2, #0]
 8007bd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	f000 8551 	beq.w	8008680 <_dtoa_r+0xb80>
 8007bde:	488b      	ldr	r0, [pc, #556]	; (8007e0c <_dtoa_r+0x30c>)
 8007be0:	6018      	str	r0, [r3, #0]
 8007be2:	1e43      	subs	r3, r0, #1
 8007be4:	9300      	str	r3, [sp, #0]
 8007be6:	e7dd      	b.n	8007ba4 <_dtoa_r+0xa4>
 8007be8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007bec:	aa12      	add	r2, sp, #72	; 0x48
 8007bee:	a913      	add	r1, sp, #76	; 0x4c
 8007bf0:	4620      	mov	r0, r4
 8007bf2:	f001 ff13 	bl	8009a1c <__d2b>
 8007bf6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007bfa:	4683      	mov	fp, r0
 8007bfc:	2d00      	cmp	r5, #0
 8007bfe:	d07c      	beq.n	8007cfa <_dtoa_r+0x1fa>
 8007c00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c02:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007c06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c0a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007c0e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007c12:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007c16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007c1a:	4b7d      	ldr	r3, [pc, #500]	; (8007e10 <_dtoa_r+0x310>)
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	4630      	mov	r0, r6
 8007c20:	4639      	mov	r1, r7
 8007c22:	f7f8 fb51 	bl	80002c8 <__aeabi_dsub>
 8007c26:	a36e      	add	r3, pc, #440	; (adr r3, 8007de0 <_dtoa_r+0x2e0>)
 8007c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c2c:	f7f8 fd04 	bl	8000638 <__aeabi_dmul>
 8007c30:	a36d      	add	r3, pc, #436	; (adr r3, 8007de8 <_dtoa_r+0x2e8>)
 8007c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c36:	f7f8 fb49 	bl	80002cc <__adddf3>
 8007c3a:	4606      	mov	r6, r0
 8007c3c:	4628      	mov	r0, r5
 8007c3e:	460f      	mov	r7, r1
 8007c40:	f7f8 fc90 	bl	8000564 <__aeabi_i2d>
 8007c44:	a36a      	add	r3, pc, #424	; (adr r3, 8007df0 <_dtoa_r+0x2f0>)
 8007c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c4a:	f7f8 fcf5 	bl	8000638 <__aeabi_dmul>
 8007c4e:	4602      	mov	r2, r0
 8007c50:	460b      	mov	r3, r1
 8007c52:	4630      	mov	r0, r6
 8007c54:	4639      	mov	r1, r7
 8007c56:	f7f8 fb39 	bl	80002cc <__adddf3>
 8007c5a:	4606      	mov	r6, r0
 8007c5c:	460f      	mov	r7, r1
 8007c5e:	f7f8 ff9b 	bl	8000b98 <__aeabi_d2iz>
 8007c62:	2200      	movs	r2, #0
 8007c64:	4682      	mov	sl, r0
 8007c66:	2300      	movs	r3, #0
 8007c68:	4630      	mov	r0, r6
 8007c6a:	4639      	mov	r1, r7
 8007c6c:	f7f8 ff56 	bl	8000b1c <__aeabi_dcmplt>
 8007c70:	b148      	cbz	r0, 8007c86 <_dtoa_r+0x186>
 8007c72:	4650      	mov	r0, sl
 8007c74:	f7f8 fc76 	bl	8000564 <__aeabi_i2d>
 8007c78:	4632      	mov	r2, r6
 8007c7a:	463b      	mov	r3, r7
 8007c7c:	f7f8 ff44 	bl	8000b08 <__aeabi_dcmpeq>
 8007c80:	b908      	cbnz	r0, 8007c86 <_dtoa_r+0x186>
 8007c82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c86:	f1ba 0f16 	cmp.w	sl, #22
 8007c8a:	d854      	bhi.n	8007d36 <_dtoa_r+0x236>
 8007c8c:	4b61      	ldr	r3, [pc, #388]	; (8007e14 <_dtoa_r+0x314>)
 8007c8e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c96:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007c9a:	f7f8 ff3f 	bl	8000b1c <__aeabi_dcmplt>
 8007c9e:	2800      	cmp	r0, #0
 8007ca0:	d04b      	beq.n	8007d3a <_dtoa_r+0x23a>
 8007ca2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	930e      	str	r3, [sp, #56]	; 0x38
 8007caa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007cac:	1b5d      	subs	r5, r3, r5
 8007cae:	1e6b      	subs	r3, r5, #1
 8007cb0:	9304      	str	r3, [sp, #16]
 8007cb2:	bf43      	ittte	mi
 8007cb4:	2300      	movmi	r3, #0
 8007cb6:	f1c5 0801 	rsbmi	r8, r5, #1
 8007cba:	9304      	strmi	r3, [sp, #16]
 8007cbc:	f04f 0800 	movpl.w	r8, #0
 8007cc0:	f1ba 0f00 	cmp.w	sl, #0
 8007cc4:	db3b      	blt.n	8007d3e <_dtoa_r+0x23e>
 8007cc6:	9b04      	ldr	r3, [sp, #16]
 8007cc8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007ccc:	4453      	add	r3, sl
 8007cce:	9304      	str	r3, [sp, #16]
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	9306      	str	r3, [sp, #24]
 8007cd4:	9b05      	ldr	r3, [sp, #20]
 8007cd6:	2b09      	cmp	r3, #9
 8007cd8:	d869      	bhi.n	8007dae <_dtoa_r+0x2ae>
 8007cda:	2b05      	cmp	r3, #5
 8007cdc:	bfc4      	itt	gt
 8007cde:	3b04      	subgt	r3, #4
 8007ce0:	9305      	strgt	r3, [sp, #20]
 8007ce2:	9b05      	ldr	r3, [sp, #20]
 8007ce4:	f1a3 0302 	sub.w	r3, r3, #2
 8007ce8:	bfcc      	ite	gt
 8007cea:	2500      	movgt	r5, #0
 8007cec:	2501      	movle	r5, #1
 8007cee:	2b03      	cmp	r3, #3
 8007cf0:	d869      	bhi.n	8007dc6 <_dtoa_r+0x2c6>
 8007cf2:	e8df f003 	tbb	[pc, r3]
 8007cf6:	4e2c      	.short	0x4e2c
 8007cf8:	5a4c      	.short	0x5a4c
 8007cfa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007cfe:	441d      	add	r5, r3
 8007d00:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007d04:	2b20      	cmp	r3, #32
 8007d06:	bfc1      	itttt	gt
 8007d08:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007d0c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007d10:	fa09 f303 	lslgt.w	r3, r9, r3
 8007d14:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007d18:	bfda      	itte	le
 8007d1a:	f1c3 0320 	rsble	r3, r3, #32
 8007d1e:	fa06 f003 	lslle.w	r0, r6, r3
 8007d22:	4318      	orrgt	r0, r3
 8007d24:	f7f8 fc0e 	bl	8000544 <__aeabi_ui2d>
 8007d28:	2301      	movs	r3, #1
 8007d2a:	4606      	mov	r6, r0
 8007d2c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007d30:	3d01      	subs	r5, #1
 8007d32:	9310      	str	r3, [sp, #64]	; 0x40
 8007d34:	e771      	b.n	8007c1a <_dtoa_r+0x11a>
 8007d36:	2301      	movs	r3, #1
 8007d38:	e7b6      	b.n	8007ca8 <_dtoa_r+0x1a8>
 8007d3a:	900e      	str	r0, [sp, #56]	; 0x38
 8007d3c:	e7b5      	b.n	8007caa <_dtoa_r+0x1aa>
 8007d3e:	f1ca 0300 	rsb	r3, sl, #0
 8007d42:	9306      	str	r3, [sp, #24]
 8007d44:	2300      	movs	r3, #0
 8007d46:	eba8 080a 	sub.w	r8, r8, sl
 8007d4a:	930d      	str	r3, [sp, #52]	; 0x34
 8007d4c:	e7c2      	b.n	8007cd4 <_dtoa_r+0x1d4>
 8007d4e:	2300      	movs	r3, #0
 8007d50:	9308      	str	r3, [sp, #32]
 8007d52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	dc39      	bgt.n	8007dcc <_dtoa_r+0x2cc>
 8007d58:	f04f 0901 	mov.w	r9, #1
 8007d5c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007d60:	464b      	mov	r3, r9
 8007d62:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007d66:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007d68:	2200      	movs	r2, #0
 8007d6a:	6042      	str	r2, [r0, #4]
 8007d6c:	2204      	movs	r2, #4
 8007d6e:	f102 0614 	add.w	r6, r2, #20
 8007d72:	429e      	cmp	r6, r3
 8007d74:	6841      	ldr	r1, [r0, #4]
 8007d76:	d92f      	bls.n	8007dd8 <_dtoa_r+0x2d8>
 8007d78:	4620      	mov	r0, r4
 8007d7a:	f001 fa67 	bl	800924c <_Balloc>
 8007d7e:	9000      	str	r0, [sp, #0]
 8007d80:	2800      	cmp	r0, #0
 8007d82:	d14b      	bne.n	8007e1c <_dtoa_r+0x31c>
 8007d84:	4b24      	ldr	r3, [pc, #144]	; (8007e18 <_dtoa_r+0x318>)
 8007d86:	4602      	mov	r2, r0
 8007d88:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007d8c:	e6d1      	b.n	8007b32 <_dtoa_r+0x32>
 8007d8e:	2301      	movs	r3, #1
 8007d90:	e7de      	b.n	8007d50 <_dtoa_r+0x250>
 8007d92:	2300      	movs	r3, #0
 8007d94:	9308      	str	r3, [sp, #32]
 8007d96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d98:	eb0a 0903 	add.w	r9, sl, r3
 8007d9c:	f109 0301 	add.w	r3, r9, #1
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	9301      	str	r3, [sp, #4]
 8007da4:	bfb8      	it	lt
 8007da6:	2301      	movlt	r3, #1
 8007da8:	e7dd      	b.n	8007d66 <_dtoa_r+0x266>
 8007daa:	2301      	movs	r3, #1
 8007dac:	e7f2      	b.n	8007d94 <_dtoa_r+0x294>
 8007dae:	2501      	movs	r5, #1
 8007db0:	2300      	movs	r3, #0
 8007db2:	9305      	str	r3, [sp, #20]
 8007db4:	9508      	str	r5, [sp, #32]
 8007db6:	f04f 39ff 	mov.w	r9, #4294967295
 8007dba:	2200      	movs	r2, #0
 8007dbc:	f8cd 9004 	str.w	r9, [sp, #4]
 8007dc0:	2312      	movs	r3, #18
 8007dc2:	9209      	str	r2, [sp, #36]	; 0x24
 8007dc4:	e7cf      	b.n	8007d66 <_dtoa_r+0x266>
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	9308      	str	r3, [sp, #32]
 8007dca:	e7f4      	b.n	8007db6 <_dtoa_r+0x2b6>
 8007dcc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007dd0:	f8cd 9004 	str.w	r9, [sp, #4]
 8007dd4:	464b      	mov	r3, r9
 8007dd6:	e7c6      	b.n	8007d66 <_dtoa_r+0x266>
 8007dd8:	3101      	adds	r1, #1
 8007dda:	6041      	str	r1, [r0, #4]
 8007ddc:	0052      	lsls	r2, r2, #1
 8007dde:	e7c6      	b.n	8007d6e <_dtoa_r+0x26e>
 8007de0:	636f4361 	.word	0x636f4361
 8007de4:	3fd287a7 	.word	0x3fd287a7
 8007de8:	8b60c8b3 	.word	0x8b60c8b3
 8007dec:	3fc68a28 	.word	0x3fc68a28
 8007df0:	509f79fb 	.word	0x509f79fb
 8007df4:	3fd34413 	.word	0x3fd34413
 8007df8:	0800a45d 	.word	0x0800a45d
 8007dfc:	0800a474 	.word	0x0800a474
 8007e00:	7ff00000 	.word	0x7ff00000
 8007e04:	0800a459 	.word	0x0800a459
 8007e08:	0800a450 	.word	0x0800a450
 8007e0c:	0800a3d9 	.word	0x0800a3d9
 8007e10:	3ff80000 	.word	0x3ff80000
 8007e14:	0800a650 	.word	0x0800a650
 8007e18:	0800a4d3 	.word	0x0800a4d3
 8007e1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e1e:	9a00      	ldr	r2, [sp, #0]
 8007e20:	601a      	str	r2, [r3, #0]
 8007e22:	9b01      	ldr	r3, [sp, #4]
 8007e24:	2b0e      	cmp	r3, #14
 8007e26:	f200 80ad 	bhi.w	8007f84 <_dtoa_r+0x484>
 8007e2a:	2d00      	cmp	r5, #0
 8007e2c:	f000 80aa 	beq.w	8007f84 <_dtoa_r+0x484>
 8007e30:	f1ba 0f00 	cmp.w	sl, #0
 8007e34:	dd36      	ble.n	8007ea4 <_dtoa_r+0x3a4>
 8007e36:	4ac3      	ldr	r2, [pc, #780]	; (8008144 <_dtoa_r+0x644>)
 8007e38:	f00a 030f 	and.w	r3, sl, #15
 8007e3c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007e40:	ed93 7b00 	vldr	d7, [r3]
 8007e44:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007e48:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007e4c:	eeb0 8a47 	vmov.f32	s16, s14
 8007e50:	eef0 8a67 	vmov.f32	s17, s15
 8007e54:	d016      	beq.n	8007e84 <_dtoa_r+0x384>
 8007e56:	4bbc      	ldr	r3, [pc, #752]	; (8008148 <_dtoa_r+0x648>)
 8007e58:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007e5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007e60:	f7f8 fd14 	bl	800088c <__aeabi_ddiv>
 8007e64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e68:	f007 070f 	and.w	r7, r7, #15
 8007e6c:	2503      	movs	r5, #3
 8007e6e:	4eb6      	ldr	r6, [pc, #728]	; (8008148 <_dtoa_r+0x648>)
 8007e70:	b957      	cbnz	r7, 8007e88 <_dtoa_r+0x388>
 8007e72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e76:	ec53 2b18 	vmov	r2, r3, d8
 8007e7a:	f7f8 fd07 	bl	800088c <__aeabi_ddiv>
 8007e7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e82:	e029      	b.n	8007ed8 <_dtoa_r+0x3d8>
 8007e84:	2502      	movs	r5, #2
 8007e86:	e7f2      	b.n	8007e6e <_dtoa_r+0x36e>
 8007e88:	07f9      	lsls	r1, r7, #31
 8007e8a:	d508      	bpl.n	8007e9e <_dtoa_r+0x39e>
 8007e8c:	ec51 0b18 	vmov	r0, r1, d8
 8007e90:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007e94:	f7f8 fbd0 	bl	8000638 <__aeabi_dmul>
 8007e98:	ec41 0b18 	vmov	d8, r0, r1
 8007e9c:	3501      	adds	r5, #1
 8007e9e:	107f      	asrs	r7, r7, #1
 8007ea0:	3608      	adds	r6, #8
 8007ea2:	e7e5      	b.n	8007e70 <_dtoa_r+0x370>
 8007ea4:	f000 80a6 	beq.w	8007ff4 <_dtoa_r+0x4f4>
 8007ea8:	f1ca 0600 	rsb	r6, sl, #0
 8007eac:	4ba5      	ldr	r3, [pc, #660]	; (8008144 <_dtoa_r+0x644>)
 8007eae:	4fa6      	ldr	r7, [pc, #664]	; (8008148 <_dtoa_r+0x648>)
 8007eb0:	f006 020f 	and.w	r2, r6, #15
 8007eb4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ebc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007ec0:	f7f8 fbba 	bl	8000638 <__aeabi_dmul>
 8007ec4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ec8:	1136      	asrs	r6, r6, #4
 8007eca:	2300      	movs	r3, #0
 8007ecc:	2502      	movs	r5, #2
 8007ece:	2e00      	cmp	r6, #0
 8007ed0:	f040 8085 	bne.w	8007fde <_dtoa_r+0x4de>
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d1d2      	bne.n	8007e7e <_dtoa_r+0x37e>
 8007ed8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	f000 808c 	beq.w	8007ff8 <_dtoa_r+0x4f8>
 8007ee0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007ee4:	4b99      	ldr	r3, [pc, #612]	; (800814c <_dtoa_r+0x64c>)
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	4630      	mov	r0, r6
 8007eea:	4639      	mov	r1, r7
 8007eec:	f7f8 fe16 	bl	8000b1c <__aeabi_dcmplt>
 8007ef0:	2800      	cmp	r0, #0
 8007ef2:	f000 8081 	beq.w	8007ff8 <_dtoa_r+0x4f8>
 8007ef6:	9b01      	ldr	r3, [sp, #4]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d07d      	beq.n	8007ff8 <_dtoa_r+0x4f8>
 8007efc:	f1b9 0f00 	cmp.w	r9, #0
 8007f00:	dd3c      	ble.n	8007f7c <_dtoa_r+0x47c>
 8007f02:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007f06:	9307      	str	r3, [sp, #28]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	4b91      	ldr	r3, [pc, #580]	; (8008150 <_dtoa_r+0x650>)
 8007f0c:	4630      	mov	r0, r6
 8007f0e:	4639      	mov	r1, r7
 8007f10:	f7f8 fb92 	bl	8000638 <__aeabi_dmul>
 8007f14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f18:	3501      	adds	r5, #1
 8007f1a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007f1e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007f22:	4628      	mov	r0, r5
 8007f24:	f7f8 fb1e 	bl	8000564 <__aeabi_i2d>
 8007f28:	4632      	mov	r2, r6
 8007f2a:	463b      	mov	r3, r7
 8007f2c:	f7f8 fb84 	bl	8000638 <__aeabi_dmul>
 8007f30:	4b88      	ldr	r3, [pc, #544]	; (8008154 <_dtoa_r+0x654>)
 8007f32:	2200      	movs	r2, #0
 8007f34:	f7f8 f9ca 	bl	80002cc <__adddf3>
 8007f38:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007f3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f40:	9303      	str	r3, [sp, #12]
 8007f42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d15c      	bne.n	8008002 <_dtoa_r+0x502>
 8007f48:	4b83      	ldr	r3, [pc, #524]	; (8008158 <_dtoa_r+0x658>)
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	4630      	mov	r0, r6
 8007f4e:	4639      	mov	r1, r7
 8007f50:	f7f8 f9ba 	bl	80002c8 <__aeabi_dsub>
 8007f54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f58:	4606      	mov	r6, r0
 8007f5a:	460f      	mov	r7, r1
 8007f5c:	f7f8 fdfc 	bl	8000b58 <__aeabi_dcmpgt>
 8007f60:	2800      	cmp	r0, #0
 8007f62:	f040 8296 	bne.w	8008492 <_dtoa_r+0x992>
 8007f66:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007f6a:	4630      	mov	r0, r6
 8007f6c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007f70:	4639      	mov	r1, r7
 8007f72:	f7f8 fdd3 	bl	8000b1c <__aeabi_dcmplt>
 8007f76:	2800      	cmp	r0, #0
 8007f78:	f040 8288 	bne.w	800848c <_dtoa_r+0x98c>
 8007f7c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007f80:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007f84:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	f2c0 8158 	blt.w	800823c <_dtoa_r+0x73c>
 8007f8c:	f1ba 0f0e 	cmp.w	sl, #14
 8007f90:	f300 8154 	bgt.w	800823c <_dtoa_r+0x73c>
 8007f94:	4b6b      	ldr	r3, [pc, #428]	; (8008144 <_dtoa_r+0x644>)
 8007f96:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007f9a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007f9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	f280 80e3 	bge.w	800816c <_dtoa_r+0x66c>
 8007fa6:	9b01      	ldr	r3, [sp, #4]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	f300 80df 	bgt.w	800816c <_dtoa_r+0x66c>
 8007fae:	f040 826d 	bne.w	800848c <_dtoa_r+0x98c>
 8007fb2:	4b69      	ldr	r3, [pc, #420]	; (8008158 <_dtoa_r+0x658>)
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	4640      	mov	r0, r8
 8007fb8:	4649      	mov	r1, r9
 8007fba:	f7f8 fb3d 	bl	8000638 <__aeabi_dmul>
 8007fbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007fc2:	f7f8 fdbf 	bl	8000b44 <__aeabi_dcmpge>
 8007fc6:	9e01      	ldr	r6, [sp, #4]
 8007fc8:	4637      	mov	r7, r6
 8007fca:	2800      	cmp	r0, #0
 8007fcc:	f040 8243 	bne.w	8008456 <_dtoa_r+0x956>
 8007fd0:	9d00      	ldr	r5, [sp, #0]
 8007fd2:	2331      	movs	r3, #49	; 0x31
 8007fd4:	f805 3b01 	strb.w	r3, [r5], #1
 8007fd8:	f10a 0a01 	add.w	sl, sl, #1
 8007fdc:	e23f      	b.n	800845e <_dtoa_r+0x95e>
 8007fde:	07f2      	lsls	r2, r6, #31
 8007fe0:	d505      	bpl.n	8007fee <_dtoa_r+0x4ee>
 8007fe2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fe6:	f7f8 fb27 	bl	8000638 <__aeabi_dmul>
 8007fea:	3501      	adds	r5, #1
 8007fec:	2301      	movs	r3, #1
 8007fee:	1076      	asrs	r6, r6, #1
 8007ff0:	3708      	adds	r7, #8
 8007ff2:	e76c      	b.n	8007ece <_dtoa_r+0x3ce>
 8007ff4:	2502      	movs	r5, #2
 8007ff6:	e76f      	b.n	8007ed8 <_dtoa_r+0x3d8>
 8007ff8:	9b01      	ldr	r3, [sp, #4]
 8007ffa:	f8cd a01c 	str.w	sl, [sp, #28]
 8007ffe:	930c      	str	r3, [sp, #48]	; 0x30
 8008000:	e78d      	b.n	8007f1e <_dtoa_r+0x41e>
 8008002:	9900      	ldr	r1, [sp, #0]
 8008004:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008006:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008008:	4b4e      	ldr	r3, [pc, #312]	; (8008144 <_dtoa_r+0x644>)
 800800a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800800e:	4401      	add	r1, r0
 8008010:	9102      	str	r1, [sp, #8]
 8008012:	9908      	ldr	r1, [sp, #32]
 8008014:	eeb0 8a47 	vmov.f32	s16, s14
 8008018:	eef0 8a67 	vmov.f32	s17, s15
 800801c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008020:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008024:	2900      	cmp	r1, #0
 8008026:	d045      	beq.n	80080b4 <_dtoa_r+0x5b4>
 8008028:	494c      	ldr	r1, [pc, #304]	; (800815c <_dtoa_r+0x65c>)
 800802a:	2000      	movs	r0, #0
 800802c:	f7f8 fc2e 	bl	800088c <__aeabi_ddiv>
 8008030:	ec53 2b18 	vmov	r2, r3, d8
 8008034:	f7f8 f948 	bl	80002c8 <__aeabi_dsub>
 8008038:	9d00      	ldr	r5, [sp, #0]
 800803a:	ec41 0b18 	vmov	d8, r0, r1
 800803e:	4639      	mov	r1, r7
 8008040:	4630      	mov	r0, r6
 8008042:	f7f8 fda9 	bl	8000b98 <__aeabi_d2iz>
 8008046:	900c      	str	r0, [sp, #48]	; 0x30
 8008048:	f7f8 fa8c 	bl	8000564 <__aeabi_i2d>
 800804c:	4602      	mov	r2, r0
 800804e:	460b      	mov	r3, r1
 8008050:	4630      	mov	r0, r6
 8008052:	4639      	mov	r1, r7
 8008054:	f7f8 f938 	bl	80002c8 <__aeabi_dsub>
 8008058:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800805a:	3330      	adds	r3, #48	; 0x30
 800805c:	f805 3b01 	strb.w	r3, [r5], #1
 8008060:	ec53 2b18 	vmov	r2, r3, d8
 8008064:	4606      	mov	r6, r0
 8008066:	460f      	mov	r7, r1
 8008068:	f7f8 fd58 	bl	8000b1c <__aeabi_dcmplt>
 800806c:	2800      	cmp	r0, #0
 800806e:	d165      	bne.n	800813c <_dtoa_r+0x63c>
 8008070:	4632      	mov	r2, r6
 8008072:	463b      	mov	r3, r7
 8008074:	4935      	ldr	r1, [pc, #212]	; (800814c <_dtoa_r+0x64c>)
 8008076:	2000      	movs	r0, #0
 8008078:	f7f8 f926 	bl	80002c8 <__aeabi_dsub>
 800807c:	ec53 2b18 	vmov	r2, r3, d8
 8008080:	f7f8 fd4c 	bl	8000b1c <__aeabi_dcmplt>
 8008084:	2800      	cmp	r0, #0
 8008086:	f040 80b9 	bne.w	80081fc <_dtoa_r+0x6fc>
 800808a:	9b02      	ldr	r3, [sp, #8]
 800808c:	429d      	cmp	r5, r3
 800808e:	f43f af75 	beq.w	8007f7c <_dtoa_r+0x47c>
 8008092:	4b2f      	ldr	r3, [pc, #188]	; (8008150 <_dtoa_r+0x650>)
 8008094:	ec51 0b18 	vmov	r0, r1, d8
 8008098:	2200      	movs	r2, #0
 800809a:	f7f8 facd 	bl	8000638 <__aeabi_dmul>
 800809e:	4b2c      	ldr	r3, [pc, #176]	; (8008150 <_dtoa_r+0x650>)
 80080a0:	ec41 0b18 	vmov	d8, r0, r1
 80080a4:	2200      	movs	r2, #0
 80080a6:	4630      	mov	r0, r6
 80080a8:	4639      	mov	r1, r7
 80080aa:	f7f8 fac5 	bl	8000638 <__aeabi_dmul>
 80080ae:	4606      	mov	r6, r0
 80080b0:	460f      	mov	r7, r1
 80080b2:	e7c4      	b.n	800803e <_dtoa_r+0x53e>
 80080b4:	ec51 0b17 	vmov	r0, r1, d7
 80080b8:	f7f8 fabe 	bl	8000638 <__aeabi_dmul>
 80080bc:	9b02      	ldr	r3, [sp, #8]
 80080be:	9d00      	ldr	r5, [sp, #0]
 80080c0:	930c      	str	r3, [sp, #48]	; 0x30
 80080c2:	ec41 0b18 	vmov	d8, r0, r1
 80080c6:	4639      	mov	r1, r7
 80080c8:	4630      	mov	r0, r6
 80080ca:	f7f8 fd65 	bl	8000b98 <__aeabi_d2iz>
 80080ce:	9011      	str	r0, [sp, #68]	; 0x44
 80080d0:	f7f8 fa48 	bl	8000564 <__aeabi_i2d>
 80080d4:	4602      	mov	r2, r0
 80080d6:	460b      	mov	r3, r1
 80080d8:	4630      	mov	r0, r6
 80080da:	4639      	mov	r1, r7
 80080dc:	f7f8 f8f4 	bl	80002c8 <__aeabi_dsub>
 80080e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80080e2:	3330      	adds	r3, #48	; 0x30
 80080e4:	f805 3b01 	strb.w	r3, [r5], #1
 80080e8:	9b02      	ldr	r3, [sp, #8]
 80080ea:	429d      	cmp	r5, r3
 80080ec:	4606      	mov	r6, r0
 80080ee:	460f      	mov	r7, r1
 80080f0:	f04f 0200 	mov.w	r2, #0
 80080f4:	d134      	bne.n	8008160 <_dtoa_r+0x660>
 80080f6:	4b19      	ldr	r3, [pc, #100]	; (800815c <_dtoa_r+0x65c>)
 80080f8:	ec51 0b18 	vmov	r0, r1, d8
 80080fc:	f7f8 f8e6 	bl	80002cc <__adddf3>
 8008100:	4602      	mov	r2, r0
 8008102:	460b      	mov	r3, r1
 8008104:	4630      	mov	r0, r6
 8008106:	4639      	mov	r1, r7
 8008108:	f7f8 fd26 	bl	8000b58 <__aeabi_dcmpgt>
 800810c:	2800      	cmp	r0, #0
 800810e:	d175      	bne.n	80081fc <_dtoa_r+0x6fc>
 8008110:	ec53 2b18 	vmov	r2, r3, d8
 8008114:	4911      	ldr	r1, [pc, #68]	; (800815c <_dtoa_r+0x65c>)
 8008116:	2000      	movs	r0, #0
 8008118:	f7f8 f8d6 	bl	80002c8 <__aeabi_dsub>
 800811c:	4602      	mov	r2, r0
 800811e:	460b      	mov	r3, r1
 8008120:	4630      	mov	r0, r6
 8008122:	4639      	mov	r1, r7
 8008124:	f7f8 fcfa 	bl	8000b1c <__aeabi_dcmplt>
 8008128:	2800      	cmp	r0, #0
 800812a:	f43f af27 	beq.w	8007f7c <_dtoa_r+0x47c>
 800812e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008130:	1e6b      	subs	r3, r5, #1
 8008132:	930c      	str	r3, [sp, #48]	; 0x30
 8008134:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008138:	2b30      	cmp	r3, #48	; 0x30
 800813a:	d0f8      	beq.n	800812e <_dtoa_r+0x62e>
 800813c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008140:	e04a      	b.n	80081d8 <_dtoa_r+0x6d8>
 8008142:	bf00      	nop
 8008144:	0800a650 	.word	0x0800a650
 8008148:	0800a628 	.word	0x0800a628
 800814c:	3ff00000 	.word	0x3ff00000
 8008150:	40240000 	.word	0x40240000
 8008154:	401c0000 	.word	0x401c0000
 8008158:	40140000 	.word	0x40140000
 800815c:	3fe00000 	.word	0x3fe00000
 8008160:	4baf      	ldr	r3, [pc, #700]	; (8008420 <_dtoa_r+0x920>)
 8008162:	f7f8 fa69 	bl	8000638 <__aeabi_dmul>
 8008166:	4606      	mov	r6, r0
 8008168:	460f      	mov	r7, r1
 800816a:	e7ac      	b.n	80080c6 <_dtoa_r+0x5c6>
 800816c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008170:	9d00      	ldr	r5, [sp, #0]
 8008172:	4642      	mov	r2, r8
 8008174:	464b      	mov	r3, r9
 8008176:	4630      	mov	r0, r6
 8008178:	4639      	mov	r1, r7
 800817a:	f7f8 fb87 	bl	800088c <__aeabi_ddiv>
 800817e:	f7f8 fd0b 	bl	8000b98 <__aeabi_d2iz>
 8008182:	9002      	str	r0, [sp, #8]
 8008184:	f7f8 f9ee 	bl	8000564 <__aeabi_i2d>
 8008188:	4642      	mov	r2, r8
 800818a:	464b      	mov	r3, r9
 800818c:	f7f8 fa54 	bl	8000638 <__aeabi_dmul>
 8008190:	4602      	mov	r2, r0
 8008192:	460b      	mov	r3, r1
 8008194:	4630      	mov	r0, r6
 8008196:	4639      	mov	r1, r7
 8008198:	f7f8 f896 	bl	80002c8 <__aeabi_dsub>
 800819c:	9e02      	ldr	r6, [sp, #8]
 800819e:	9f01      	ldr	r7, [sp, #4]
 80081a0:	3630      	adds	r6, #48	; 0x30
 80081a2:	f805 6b01 	strb.w	r6, [r5], #1
 80081a6:	9e00      	ldr	r6, [sp, #0]
 80081a8:	1bae      	subs	r6, r5, r6
 80081aa:	42b7      	cmp	r7, r6
 80081ac:	4602      	mov	r2, r0
 80081ae:	460b      	mov	r3, r1
 80081b0:	d137      	bne.n	8008222 <_dtoa_r+0x722>
 80081b2:	f7f8 f88b 	bl	80002cc <__adddf3>
 80081b6:	4642      	mov	r2, r8
 80081b8:	464b      	mov	r3, r9
 80081ba:	4606      	mov	r6, r0
 80081bc:	460f      	mov	r7, r1
 80081be:	f7f8 fccb 	bl	8000b58 <__aeabi_dcmpgt>
 80081c2:	b9c8      	cbnz	r0, 80081f8 <_dtoa_r+0x6f8>
 80081c4:	4642      	mov	r2, r8
 80081c6:	464b      	mov	r3, r9
 80081c8:	4630      	mov	r0, r6
 80081ca:	4639      	mov	r1, r7
 80081cc:	f7f8 fc9c 	bl	8000b08 <__aeabi_dcmpeq>
 80081d0:	b110      	cbz	r0, 80081d8 <_dtoa_r+0x6d8>
 80081d2:	9b02      	ldr	r3, [sp, #8]
 80081d4:	07d9      	lsls	r1, r3, #31
 80081d6:	d40f      	bmi.n	80081f8 <_dtoa_r+0x6f8>
 80081d8:	4620      	mov	r0, r4
 80081da:	4659      	mov	r1, fp
 80081dc:	f001 f876 	bl	80092cc <_Bfree>
 80081e0:	2300      	movs	r3, #0
 80081e2:	702b      	strb	r3, [r5, #0]
 80081e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80081e6:	f10a 0001 	add.w	r0, sl, #1
 80081ea:	6018      	str	r0, [r3, #0]
 80081ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	f43f acd8 	beq.w	8007ba4 <_dtoa_r+0xa4>
 80081f4:	601d      	str	r5, [r3, #0]
 80081f6:	e4d5      	b.n	8007ba4 <_dtoa_r+0xa4>
 80081f8:	f8cd a01c 	str.w	sl, [sp, #28]
 80081fc:	462b      	mov	r3, r5
 80081fe:	461d      	mov	r5, r3
 8008200:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008204:	2a39      	cmp	r2, #57	; 0x39
 8008206:	d108      	bne.n	800821a <_dtoa_r+0x71a>
 8008208:	9a00      	ldr	r2, [sp, #0]
 800820a:	429a      	cmp	r2, r3
 800820c:	d1f7      	bne.n	80081fe <_dtoa_r+0x6fe>
 800820e:	9a07      	ldr	r2, [sp, #28]
 8008210:	9900      	ldr	r1, [sp, #0]
 8008212:	3201      	adds	r2, #1
 8008214:	9207      	str	r2, [sp, #28]
 8008216:	2230      	movs	r2, #48	; 0x30
 8008218:	700a      	strb	r2, [r1, #0]
 800821a:	781a      	ldrb	r2, [r3, #0]
 800821c:	3201      	adds	r2, #1
 800821e:	701a      	strb	r2, [r3, #0]
 8008220:	e78c      	b.n	800813c <_dtoa_r+0x63c>
 8008222:	4b7f      	ldr	r3, [pc, #508]	; (8008420 <_dtoa_r+0x920>)
 8008224:	2200      	movs	r2, #0
 8008226:	f7f8 fa07 	bl	8000638 <__aeabi_dmul>
 800822a:	2200      	movs	r2, #0
 800822c:	2300      	movs	r3, #0
 800822e:	4606      	mov	r6, r0
 8008230:	460f      	mov	r7, r1
 8008232:	f7f8 fc69 	bl	8000b08 <__aeabi_dcmpeq>
 8008236:	2800      	cmp	r0, #0
 8008238:	d09b      	beq.n	8008172 <_dtoa_r+0x672>
 800823a:	e7cd      	b.n	80081d8 <_dtoa_r+0x6d8>
 800823c:	9a08      	ldr	r2, [sp, #32]
 800823e:	2a00      	cmp	r2, #0
 8008240:	f000 80c4 	beq.w	80083cc <_dtoa_r+0x8cc>
 8008244:	9a05      	ldr	r2, [sp, #20]
 8008246:	2a01      	cmp	r2, #1
 8008248:	f300 80a8 	bgt.w	800839c <_dtoa_r+0x89c>
 800824c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800824e:	2a00      	cmp	r2, #0
 8008250:	f000 80a0 	beq.w	8008394 <_dtoa_r+0x894>
 8008254:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008258:	9e06      	ldr	r6, [sp, #24]
 800825a:	4645      	mov	r5, r8
 800825c:	9a04      	ldr	r2, [sp, #16]
 800825e:	2101      	movs	r1, #1
 8008260:	441a      	add	r2, r3
 8008262:	4620      	mov	r0, r4
 8008264:	4498      	add	r8, r3
 8008266:	9204      	str	r2, [sp, #16]
 8008268:	f001 f936 	bl	80094d8 <__i2b>
 800826c:	4607      	mov	r7, r0
 800826e:	2d00      	cmp	r5, #0
 8008270:	dd0b      	ble.n	800828a <_dtoa_r+0x78a>
 8008272:	9b04      	ldr	r3, [sp, #16]
 8008274:	2b00      	cmp	r3, #0
 8008276:	dd08      	ble.n	800828a <_dtoa_r+0x78a>
 8008278:	42ab      	cmp	r3, r5
 800827a:	9a04      	ldr	r2, [sp, #16]
 800827c:	bfa8      	it	ge
 800827e:	462b      	movge	r3, r5
 8008280:	eba8 0803 	sub.w	r8, r8, r3
 8008284:	1aed      	subs	r5, r5, r3
 8008286:	1ad3      	subs	r3, r2, r3
 8008288:	9304      	str	r3, [sp, #16]
 800828a:	9b06      	ldr	r3, [sp, #24]
 800828c:	b1fb      	cbz	r3, 80082ce <_dtoa_r+0x7ce>
 800828e:	9b08      	ldr	r3, [sp, #32]
 8008290:	2b00      	cmp	r3, #0
 8008292:	f000 809f 	beq.w	80083d4 <_dtoa_r+0x8d4>
 8008296:	2e00      	cmp	r6, #0
 8008298:	dd11      	ble.n	80082be <_dtoa_r+0x7be>
 800829a:	4639      	mov	r1, r7
 800829c:	4632      	mov	r2, r6
 800829e:	4620      	mov	r0, r4
 80082a0:	f001 f9d6 	bl	8009650 <__pow5mult>
 80082a4:	465a      	mov	r2, fp
 80082a6:	4601      	mov	r1, r0
 80082a8:	4607      	mov	r7, r0
 80082aa:	4620      	mov	r0, r4
 80082ac:	f001 f92a 	bl	8009504 <__multiply>
 80082b0:	4659      	mov	r1, fp
 80082b2:	9007      	str	r0, [sp, #28]
 80082b4:	4620      	mov	r0, r4
 80082b6:	f001 f809 	bl	80092cc <_Bfree>
 80082ba:	9b07      	ldr	r3, [sp, #28]
 80082bc:	469b      	mov	fp, r3
 80082be:	9b06      	ldr	r3, [sp, #24]
 80082c0:	1b9a      	subs	r2, r3, r6
 80082c2:	d004      	beq.n	80082ce <_dtoa_r+0x7ce>
 80082c4:	4659      	mov	r1, fp
 80082c6:	4620      	mov	r0, r4
 80082c8:	f001 f9c2 	bl	8009650 <__pow5mult>
 80082cc:	4683      	mov	fp, r0
 80082ce:	2101      	movs	r1, #1
 80082d0:	4620      	mov	r0, r4
 80082d2:	f001 f901 	bl	80094d8 <__i2b>
 80082d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082d8:	2b00      	cmp	r3, #0
 80082da:	4606      	mov	r6, r0
 80082dc:	dd7c      	ble.n	80083d8 <_dtoa_r+0x8d8>
 80082de:	461a      	mov	r2, r3
 80082e0:	4601      	mov	r1, r0
 80082e2:	4620      	mov	r0, r4
 80082e4:	f001 f9b4 	bl	8009650 <__pow5mult>
 80082e8:	9b05      	ldr	r3, [sp, #20]
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	4606      	mov	r6, r0
 80082ee:	dd76      	ble.n	80083de <_dtoa_r+0x8de>
 80082f0:	2300      	movs	r3, #0
 80082f2:	9306      	str	r3, [sp, #24]
 80082f4:	6933      	ldr	r3, [r6, #16]
 80082f6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80082fa:	6918      	ldr	r0, [r3, #16]
 80082fc:	f001 f89c 	bl	8009438 <__hi0bits>
 8008300:	f1c0 0020 	rsb	r0, r0, #32
 8008304:	9b04      	ldr	r3, [sp, #16]
 8008306:	4418      	add	r0, r3
 8008308:	f010 001f 	ands.w	r0, r0, #31
 800830c:	f000 8086 	beq.w	800841c <_dtoa_r+0x91c>
 8008310:	f1c0 0320 	rsb	r3, r0, #32
 8008314:	2b04      	cmp	r3, #4
 8008316:	dd7f      	ble.n	8008418 <_dtoa_r+0x918>
 8008318:	f1c0 001c 	rsb	r0, r0, #28
 800831c:	9b04      	ldr	r3, [sp, #16]
 800831e:	4403      	add	r3, r0
 8008320:	4480      	add	r8, r0
 8008322:	4405      	add	r5, r0
 8008324:	9304      	str	r3, [sp, #16]
 8008326:	f1b8 0f00 	cmp.w	r8, #0
 800832a:	dd05      	ble.n	8008338 <_dtoa_r+0x838>
 800832c:	4659      	mov	r1, fp
 800832e:	4642      	mov	r2, r8
 8008330:	4620      	mov	r0, r4
 8008332:	f001 f9e7 	bl	8009704 <__lshift>
 8008336:	4683      	mov	fp, r0
 8008338:	9b04      	ldr	r3, [sp, #16]
 800833a:	2b00      	cmp	r3, #0
 800833c:	dd05      	ble.n	800834a <_dtoa_r+0x84a>
 800833e:	4631      	mov	r1, r6
 8008340:	461a      	mov	r2, r3
 8008342:	4620      	mov	r0, r4
 8008344:	f001 f9de 	bl	8009704 <__lshift>
 8008348:	4606      	mov	r6, r0
 800834a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800834c:	2b00      	cmp	r3, #0
 800834e:	d069      	beq.n	8008424 <_dtoa_r+0x924>
 8008350:	4631      	mov	r1, r6
 8008352:	4658      	mov	r0, fp
 8008354:	f001 fa42 	bl	80097dc <__mcmp>
 8008358:	2800      	cmp	r0, #0
 800835a:	da63      	bge.n	8008424 <_dtoa_r+0x924>
 800835c:	2300      	movs	r3, #0
 800835e:	4659      	mov	r1, fp
 8008360:	220a      	movs	r2, #10
 8008362:	4620      	mov	r0, r4
 8008364:	f000 ffd4 	bl	8009310 <__multadd>
 8008368:	9b08      	ldr	r3, [sp, #32]
 800836a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800836e:	4683      	mov	fp, r0
 8008370:	2b00      	cmp	r3, #0
 8008372:	f000 818f 	beq.w	8008694 <_dtoa_r+0xb94>
 8008376:	4639      	mov	r1, r7
 8008378:	2300      	movs	r3, #0
 800837a:	220a      	movs	r2, #10
 800837c:	4620      	mov	r0, r4
 800837e:	f000 ffc7 	bl	8009310 <__multadd>
 8008382:	f1b9 0f00 	cmp.w	r9, #0
 8008386:	4607      	mov	r7, r0
 8008388:	f300 808e 	bgt.w	80084a8 <_dtoa_r+0x9a8>
 800838c:	9b05      	ldr	r3, [sp, #20]
 800838e:	2b02      	cmp	r3, #2
 8008390:	dc50      	bgt.n	8008434 <_dtoa_r+0x934>
 8008392:	e089      	b.n	80084a8 <_dtoa_r+0x9a8>
 8008394:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008396:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800839a:	e75d      	b.n	8008258 <_dtoa_r+0x758>
 800839c:	9b01      	ldr	r3, [sp, #4]
 800839e:	1e5e      	subs	r6, r3, #1
 80083a0:	9b06      	ldr	r3, [sp, #24]
 80083a2:	42b3      	cmp	r3, r6
 80083a4:	bfbf      	itttt	lt
 80083a6:	9b06      	ldrlt	r3, [sp, #24]
 80083a8:	9606      	strlt	r6, [sp, #24]
 80083aa:	1af2      	sublt	r2, r6, r3
 80083ac:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80083ae:	bfb6      	itet	lt
 80083b0:	189b      	addlt	r3, r3, r2
 80083b2:	1b9e      	subge	r6, r3, r6
 80083b4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80083b6:	9b01      	ldr	r3, [sp, #4]
 80083b8:	bfb8      	it	lt
 80083ba:	2600      	movlt	r6, #0
 80083bc:	2b00      	cmp	r3, #0
 80083be:	bfb5      	itete	lt
 80083c0:	eba8 0503 	sublt.w	r5, r8, r3
 80083c4:	9b01      	ldrge	r3, [sp, #4]
 80083c6:	2300      	movlt	r3, #0
 80083c8:	4645      	movge	r5, r8
 80083ca:	e747      	b.n	800825c <_dtoa_r+0x75c>
 80083cc:	9e06      	ldr	r6, [sp, #24]
 80083ce:	9f08      	ldr	r7, [sp, #32]
 80083d0:	4645      	mov	r5, r8
 80083d2:	e74c      	b.n	800826e <_dtoa_r+0x76e>
 80083d4:	9a06      	ldr	r2, [sp, #24]
 80083d6:	e775      	b.n	80082c4 <_dtoa_r+0x7c4>
 80083d8:	9b05      	ldr	r3, [sp, #20]
 80083da:	2b01      	cmp	r3, #1
 80083dc:	dc18      	bgt.n	8008410 <_dtoa_r+0x910>
 80083de:	9b02      	ldr	r3, [sp, #8]
 80083e0:	b9b3      	cbnz	r3, 8008410 <_dtoa_r+0x910>
 80083e2:	9b03      	ldr	r3, [sp, #12]
 80083e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083e8:	b9a3      	cbnz	r3, 8008414 <_dtoa_r+0x914>
 80083ea:	9b03      	ldr	r3, [sp, #12]
 80083ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80083f0:	0d1b      	lsrs	r3, r3, #20
 80083f2:	051b      	lsls	r3, r3, #20
 80083f4:	b12b      	cbz	r3, 8008402 <_dtoa_r+0x902>
 80083f6:	9b04      	ldr	r3, [sp, #16]
 80083f8:	3301      	adds	r3, #1
 80083fa:	9304      	str	r3, [sp, #16]
 80083fc:	f108 0801 	add.w	r8, r8, #1
 8008400:	2301      	movs	r3, #1
 8008402:	9306      	str	r3, [sp, #24]
 8008404:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008406:	2b00      	cmp	r3, #0
 8008408:	f47f af74 	bne.w	80082f4 <_dtoa_r+0x7f4>
 800840c:	2001      	movs	r0, #1
 800840e:	e779      	b.n	8008304 <_dtoa_r+0x804>
 8008410:	2300      	movs	r3, #0
 8008412:	e7f6      	b.n	8008402 <_dtoa_r+0x902>
 8008414:	9b02      	ldr	r3, [sp, #8]
 8008416:	e7f4      	b.n	8008402 <_dtoa_r+0x902>
 8008418:	d085      	beq.n	8008326 <_dtoa_r+0x826>
 800841a:	4618      	mov	r0, r3
 800841c:	301c      	adds	r0, #28
 800841e:	e77d      	b.n	800831c <_dtoa_r+0x81c>
 8008420:	40240000 	.word	0x40240000
 8008424:	9b01      	ldr	r3, [sp, #4]
 8008426:	2b00      	cmp	r3, #0
 8008428:	dc38      	bgt.n	800849c <_dtoa_r+0x99c>
 800842a:	9b05      	ldr	r3, [sp, #20]
 800842c:	2b02      	cmp	r3, #2
 800842e:	dd35      	ble.n	800849c <_dtoa_r+0x99c>
 8008430:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008434:	f1b9 0f00 	cmp.w	r9, #0
 8008438:	d10d      	bne.n	8008456 <_dtoa_r+0x956>
 800843a:	4631      	mov	r1, r6
 800843c:	464b      	mov	r3, r9
 800843e:	2205      	movs	r2, #5
 8008440:	4620      	mov	r0, r4
 8008442:	f000 ff65 	bl	8009310 <__multadd>
 8008446:	4601      	mov	r1, r0
 8008448:	4606      	mov	r6, r0
 800844a:	4658      	mov	r0, fp
 800844c:	f001 f9c6 	bl	80097dc <__mcmp>
 8008450:	2800      	cmp	r0, #0
 8008452:	f73f adbd 	bgt.w	8007fd0 <_dtoa_r+0x4d0>
 8008456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008458:	9d00      	ldr	r5, [sp, #0]
 800845a:	ea6f 0a03 	mvn.w	sl, r3
 800845e:	f04f 0800 	mov.w	r8, #0
 8008462:	4631      	mov	r1, r6
 8008464:	4620      	mov	r0, r4
 8008466:	f000 ff31 	bl	80092cc <_Bfree>
 800846a:	2f00      	cmp	r7, #0
 800846c:	f43f aeb4 	beq.w	80081d8 <_dtoa_r+0x6d8>
 8008470:	f1b8 0f00 	cmp.w	r8, #0
 8008474:	d005      	beq.n	8008482 <_dtoa_r+0x982>
 8008476:	45b8      	cmp	r8, r7
 8008478:	d003      	beq.n	8008482 <_dtoa_r+0x982>
 800847a:	4641      	mov	r1, r8
 800847c:	4620      	mov	r0, r4
 800847e:	f000 ff25 	bl	80092cc <_Bfree>
 8008482:	4639      	mov	r1, r7
 8008484:	4620      	mov	r0, r4
 8008486:	f000 ff21 	bl	80092cc <_Bfree>
 800848a:	e6a5      	b.n	80081d8 <_dtoa_r+0x6d8>
 800848c:	2600      	movs	r6, #0
 800848e:	4637      	mov	r7, r6
 8008490:	e7e1      	b.n	8008456 <_dtoa_r+0x956>
 8008492:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008494:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008498:	4637      	mov	r7, r6
 800849a:	e599      	b.n	8007fd0 <_dtoa_r+0x4d0>
 800849c:	9b08      	ldr	r3, [sp, #32]
 800849e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	f000 80fd 	beq.w	80086a2 <_dtoa_r+0xba2>
 80084a8:	2d00      	cmp	r5, #0
 80084aa:	dd05      	ble.n	80084b8 <_dtoa_r+0x9b8>
 80084ac:	4639      	mov	r1, r7
 80084ae:	462a      	mov	r2, r5
 80084b0:	4620      	mov	r0, r4
 80084b2:	f001 f927 	bl	8009704 <__lshift>
 80084b6:	4607      	mov	r7, r0
 80084b8:	9b06      	ldr	r3, [sp, #24]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d05c      	beq.n	8008578 <_dtoa_r+0xa78>
 80084be:	6879      	ldr	r1, [r7, #4]
 80084c0:	4620      	mov	r0, r4
 80084c2:	f000 fec3 	bl	800924c <_Balloc>
 80084c6:	4605      	mov	r5, r0
 80084c8:	b928      	cbnz	r0, 80084d6 <_dtoa_r+0x9d6>
 80084ca:	4b80      	ldr	r3, [pc, #512]	; (80086cc <_dtoa_r+0xbcc>)
 80084cc:	4602      	mov	r2, r0
 80084ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 80084d2:	f7ff bb2e 	b.w	8007b32 <_dtoa_r+0x32>
 80084d6:	693a      	ldr	r2, [r7, #16]
 80084d8:	3202      	adds	r2, #2
 80084da:	0092      	lsls	r2, r2, #2
 80084dc:	f107 010c 	add.w	r1, r7, #12
 80084e0:	300c      	adds	r0, #12
 80084e2:	f000 fea5 	bl	8009230 <memcpy>
 80084e6:	2201      	movs	r2, #1
 80084e8:	4629      	mov	r1, r5
 80084ea:	4620      	mov	r0, r4
 80084ec:	f001 f90a 	bl	8009704 <__lshift>
 80084f0:	9b00      	ldr	r3, [sp, #0]
 80084f2:	3301      	adds	r3, #1
 80084f4:	9301      	str	r3, [sp, #4]
 80084f6:	9b00      	ldr	r3, [sp, #0]
 80084f8:	444b      	add	r3, r9
 80084fa:	9307      	str	r3, [sp, #28]
 80084fc:	9b02      	ldr	r3, [sp, #8]
 80084fe:	f003 0301 	and.w	r3, r3, #1
 8008502:	46b8      	mov	r8, r7
 8008504:	9306      	str	r3, [sp, #24]
 8008506:	4607      	mov	r7, r0
 8008508:	9b01      	ldr	r3, [sp, #4]
 800850a:	4631      	mov	r1, r6
 800850c:	3b01      	subs	r3, #1
 800850e:	4658      	mov	r0, fp
 8008510:	9302      	str	r3, [sp, #8]
 8008512:	f7ff fa67 	bl	80079e4 <quorem>
 8008516:	4603      	mov	r3, r0
 8008518:	3330      	adds	r3, #48	; 0x30
 800851a:	9004      	str	r0, [sp, #16]
 800851c:	4641      	mov	r1, r8
 800851e:	4658      	mov	r0, fp
 8008520:	9308      	str	r3, [sp, #32]
 8008522:	f001 f95b 	bl	80097dc <__mcmp>
 8008526:	463a      	mov	r2, r7
 8008528:	4681      	mov	r9, r0
 800852a:	4631      	mov	r1, r6
 800852c:	4620      	mov	r0, r4
 800852e:	f001 f971 	bl	8009814 <__mdiff>
 8008532:	68c2      	ldr	r2, [r0, #12]
 8008534:	9b08      	ldr	r3, [sp, #32]
 8008536:	4605      	mov	r5, r0
 8008538:	bb02      	cbnz	r2, 800857c <_dtoa_r+0xa7c>
 800853a:	4601      	mov	r1, r0
 800853c:	4658      	mov	r0, fp
 800853e:	f001 f94d 	bl	80097dc <__mcmp>
 8008542:	9b08      	ldr	r3, [sp, #32]
 8008544:	4602      	mov	r2, r0
 8008546:	4629      	mov	r1, r5
 8008548:	4620      	mov	r0, r4
 800854a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800854e:	f000 febd 	bl	80092cc <_Bfree>
 8008552:	9b05      	ldr	r3, [sp, #20]
 8008554:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008556:	9d01      	ldr	r5, [sp, #4]
 8008558:	ea43 0102 	orr.w	r1, r3, r2
 800855c:	9b06      	ldr	r3, [sp, #24]
 800855e:	430b      	orrs	r3, r1
 8008560:	9b08      	ldr	r3, [sp, #32]
 8008562:	d10d      	bne.n	8008580 <_dtoa_r+0xa80>
 8008564:	2b39      	cmp	r3, #57	; 0x39
 8008566:	d029      	beq.n	80085bc <_dtoa_r+0xabc>
 8008568:	f1b9 0f00 	cmp.w	r9, #0
 800856c:	dd01      	ble.n	8008572 <_dtoa_r+0xa72>
 800856e:	9b04      	ldr	r3, [sp, #16]
 8008570:	3331      	adds	r3, #49	; 0x31
 8008572:	9a02      	ldr	r2, [sp, #8]
 8008574:	7013      	strb	r3, [r2, #0]
 8008576:	e774      	b.n	8008462 <_dtoa_r+0x962>
 8008578:	4638      	mov	r0, r7
 800857a:	e7b9      	b.n	80084f0 <_dtoa_r+0x9f0>
 800857c:	2201      	movs	r2, #1
 800857e:	e7e2      	b.n	8008546 <_dtoa_r+0xa46>
 8008580:	f1b9 0f00 	cmp.w	r9, #0
 8008584:	db06      	blt.n	8008594 <_dtoa_r+0xa94>
 8008586:	9905      	ldr	r1, [sp, #20]
 8008588:	ea41 0909 	orr.w	r9, r1, r9
 800858c:	9906      	ldr	r1, [sp, #24]
 800858e:	ea59 0101 	orrs.w	r1, r9, r1
 8008592:	d120      	bne.n	80085d6 <_dtoa_r+0xad6>
 8008594:	2a00      	cmp	r2, #0
 8008596:	ddec      	ble.n	8008572 <_dtoa_r+0xa72>
 8008598:	4659      	mov	r1, fp
 800859a:	2201      	movs	r2, #1
 800859c:	4620      	mov	r0, r4
 800859e:	9301      	str	r3, [sp, #4]
 80085a0:	f001 f8b0 	bl	8009704 <__lshift>
 80085a4:	4631      	mov	r1, r6
 80085a6:	4683      	mov	fp, r0
 80085a8:	f001 f918 	bl	80097dc <__mcmp>
 80085ac:	2800      	cmp	r0, #0
 80085ae:	9b01      	ldr	r3, [sp, #4]
 80085b0:	dc02      	bgt.n	80085b8 <_dtoa_r+0xab8>
 80085b2:	d1de      	bne.n	8008572 <_dtoa_r+0xa72>
 80085b4:	07da      	lsls	r2, r3, #31
 80085b6:	d5dc      	bpl.n	8008572 <_dtoa_r+0xa72>
 80085b8:	2b39      	cmp	r3, #57	; 0x39
 80085ba:	d1d8      	bne.n	800856e <_dtoa_r+0xa6e>
 80085bc:	9a02      	ldr	r2, [sp, #8]
 80085be:	2339      	movs	r3, #57	; 0x39
 80085c0:	7013      	strb	r3, [r2, #0]
 80085c2:	462b      	mov	r3, r5
 80085c4:	461d      	mov	r5, r3
 80085c6:	3b01      	subs	r3, #1
 80085c8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80085cc:	2a39      	cmp	r2, #57	; 0x39
 80085ce:	d050      	beq.n	8008672 <_dtoa_r+0xb72>
 80085d0:	3201      	adds	r2, #1
 80085d2:	701a      	strb	r2, [r3, #0]
 80085d4:	e745      	b.n	8008462 <_dtoa_r+0x962>
 80085d6:	2a00      	cmp	r2, #0
 80085d8:	dd03      	ble.n	80085e2 <_dtoa_r+0xae2>
 80085da:	2b39      	cmp	r3, #57	; 0x39
 80085dc:	d0ee      	beq.n	80085bc <_dtoa_r+0xabc>
 80085de:	3301      	adds	r3, #1
 80085e0:	e7c7      	b.n	8008572 <_dtoa_r+0xa72>
 80085e2:	9a01      	ldr	r2, [sp, #4]
 80085e4:	9907      	ldr	r1, [sp, #28]
 80085e6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80085ea:	428a      	cmp	r2, r1
 80085ec:	d02a      	beq.n	8008644 <_dtoa_r+0xb44>
 80085ee:	4659      	mov	r1, fp
 80085f0:	2300      	movs	r3, #0
 80085f2:	220a      	movs	r2, #10
 80085f4:	4620      	mov	r0, r4
 80085f6:	f000 fe8b 	bl	8009310 <__multadd>
 80085fa:	45b8      	cmp	r8, r7
 80085fc:	4683      	mov	fp, r0
 80085fe:	f04f 0300 	mov.w	r3, #0
 8008602:	f04f 020a 	mov.w	r2, #10
 8008606:	4641      	mov	r1, r8
 8008608:	4620      	mov	r0, r4
 800860a:	d107      	bne.n	800861c <_dtoa_r+0xb1c>
 800860c:	f000 fe80 	bl	8009310 <__multadd>
 8008610:	4680      	mov	r8, r0
 8008612:	4607      	mov	r7, r0
 8008614:	9b01      	ldr	r3, [sp, #4]
 8008616:	3301      	adds	r3, #1
 8008618:	9301      	str	r3, [sp, #4]
 800861a:	e775      	b.n	8008508 <_dtoa_r+0xa08>
 800861c:	f000 fe78 	bl	8009310 <__multadd>
 8008620:	4639      	mov	r1, r7
 8008622:	4680      	mov	r8, r0
 8008624:	2300      	movs	r3, #0
 8008626:	220a      	movs	r2, #10
 8008628:	4620      	mov	r0, r4
 800862a:	f000 fe71 	bl	8009310 <__multadd>
 800862e:	4607      	mov	r7, r0
 8008630:	e7f0      	b.n	8008614 <_dtoa_r+0xb14>
 8008632:	f1b9 0f00 	cmp.w	r9, #0
 8008636:	9a00      	ldr	r2, [sp, #0]
 8008638:	bfcc      	ite	gt
 800863a:	464d      	movgt	r5, r9
 800863c:	2501      	movle	r5, #1
 800863e:	4415      	add	r5, r2
 8008640:	f04f 0800 	mov.w	r8, #0
 8008644:	4659      	mov	r1, fp
 8008646:	2201      	movs	r2, #1
 8008648:	4620      	mov	r0, r4
 800864a:	9301      	str	r3, [sp, #4]
 800864c:	f001 f85a 	bl	8009704 <__lshift>
 8008650:	4631      	mov	r1, r6
 8008652:	4683      	mov	fp, r0
 8008654:	f001 f8c2 	bl	80097dc <__mcmp>
 8008658:	2800      	cmp	r0, #0
 800865a:	dcb2      	bgt.n	80085c2 <_dtoa_r+0xac2>
 800865c:	d102      	bne.n	8008664 <_dtoa_r+0xb64>
 800865e:	9b01      	ldr	r3, [sp, #4]
 8008660:	07db      	lsls	r3, r3, #31
 8008662:	d4ae      	bmi.n	80085c2 <_dtoa_r+0xac2>
 8008664:	462b      	mov	r3, r5
 8008666:	461d      	mov	r5, r3
 8008668:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800866c:	2a30      	cmp	r2, #48	; 0x30
 800866e:	d0fa      	beq.n	8008666 <_dtoa_r+0xb66>
 8008670:	e6f7      	b.n	8008462 <_dtoa_r+0x962>
 8008672:	9a00      	ldr	r2, [sp, #0]
 8008674:	429a      	cmp	r2, r3
 8008676:	d1a5      	bne.n	80085c4 <_dtoa_r+0xac4>
 8008678:	f10a 0a01 	add.w	sl, sl, #1
 800867c:	2331      	movs	r3, #49	; 0x31
 800867e:	e779      	b.n	8008574 <_dtoa_r+0xa74>
 8008680:	4b13      	ldr	r3, [pc, #76]	; (80086d0 <_dtoa_r+0xbd0>)
 8008682:	f7ff baaf 	b.w	8007be4 <_dtoa_r+0xe4>
 8008686:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008688:	2b00      	cmp	r3, #0
 800868a:	f47f aa86 	bne.w	8007b9a <_dtoa_r+0x9a>
 800868e:	4b11      	ldr	r3, [pc, #68]	; (80086d4 <_dtoa_r+0xbd4>)
 8008690:	f7ff baa8 	b.w	8007be4 <_dtoa_r+0xe4>
 8008694:	f1b9 0f00 	cmp.w	r9, #0
 8008698:	dc03      	bgt.n	80086a2 <_dtoa_r+0xba2>
 800869a:	9b05      	ldr	r3, [sp, #20]
 800869c:	2b02      	cmp	r3, #2
 800869e:	f73f aec9 	bgt.w	8008434 <_dtoa_r+0x934>
 80086a2:	9d00      	ldr	r5, [sp, #0]
 80086a4:	4631      	mov	r1, r6
 80086a6:	4658      	mov	r0, fp
 80086a8:	f7ff f99c 	bl	80079e4 <quorem>
 80086ac:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80086b0:	f805 3b01 	strb.w	r3, [r5], #1
 80086b4:	9a00      	ldr	r2, [sp, #0]
 80086b6:	1aaa      	subs	r2, r5, r2
 80086b8:	4591      	cmp	r9, r2
 80086ba:	ddba      	ble.n	8008632 <_dtoa_r+0xb32>
 80086bc:	4659      	mov	r1, fp
 80086be:	2300      	movs	r3, #0
 80086c0:	220a      	movs	r2, #10
 80086c2:	4620      	mov	r0, r4
 80086c4:	f000 fe24 	bl	8009310 <__multadd>
 80086c8:	4683      	mov	fp, r0
 80086ca:	e7eb      	b.n	80086a4 <_dtoa_r+0xba4>
 80086cc:	0800a4d3 	.word	0x0800a4d3
 80086d0:	0800a3d8 	.word	0x0800a3d8
 80086d4:	0800a450 	.word	0x0800a450

080086d8 <__sflush_r>:
 80086d8:	898a      	ldrh	r2, [r1, #12]
 80086da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086de:	4605      	mov	r5, r0
 80086e0:	0710      	lsls	r0, r2, #28
 80086e2:	460c      	mov	r4, r1
 80086e4:	d458      	bmi.n	8008798 <__sflush_r+0xc0>
 80086e6:	684b      	ldr	r3, [r1, #4]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	dc05      	bgt.n	80086f8 <__sflush_r+0x20>
 80086ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	dc02      	bgt.n	80086f8 <__sflush_r+0x20>
 80086f2:	2000      	movs	r0, #0
 80086f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80086fa:	2e00      	cmp	r6, #0
 80086fc:	d0f9      	beq.n	80086f2 <__sflush_r+0x1a>
 80086fe:	2300      	movs	r3, #0
 8008700:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008704:	682f      	ldr	r7, [r5, #0]
 8008706:	602b      	str	r3, [r5, #0]
 8008708:	d032      	beq.n	8008770 <__sflush_r+0x98>
 800870a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800870c:	89a3      	ldrh	r3, [r4, #12]
 800870e:	075a      	lsls	r2, r3, #29
 8008710:	d505      	bpl.n	800871e <__sflush_r+0x46>
 8008712:	6863      	ldr	r3, [r4, #4]
 8008714:	1ac0      	subs	r0, r0, r3
 8008716:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008718:	b10b      	cbz	r3, 800871e <__sflush_r+0x46>
 800871a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800871c:	1ac0      	subs	r0, r0, r3
 800871e:	2300      	movs	r3, #0
 8008720:	4602      	mov	r2, r0
 8008722:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008724:	6a21      	ldr	r1, [r4, #32]
 8008726:	4628      	mov	r0, r5
 8008728:	47b0      	blx	r6
 800872a:	1c43      	adds	r3, r0, #1
 800872c:	89a3      	ldrh	r3, [r4, #12]
 800872e:	d106      	bne.n	800873e <__sflush_r+0x66>
 8008730:	6829      	ldr	r1, [r5, #0]
 8008732:	291d      	cmp	r1, #29
 8008734:	d82c      	bhi.n	8008790 <__sflush_r+0xb8>
 8008736:	4a2a      	ldr	r2, [pc, #168]	; (80087e0 <__sflush_r+0x108>)
 8008738:	40ca      	lsrs	r2, r1
 800873a:	07d6      	lsls	r6, r2, #31
 800873c:	d528      	bpl.n	8008790 <__sflush_r+0xb8>
 800873e:	2200      	movs	r2, #0
 8008740:	6062      	str	r2, [r4, #4]
 8008742:	04d9      	lsls	r1, r3, #19
 8008744:	6922      	ldr	r2, [r4, #16]
 8008746:	6022      	str	r2, [r4, #0]
 8008748:	d504      	bpl.n	8008754 <__sflush_r+0x7c>
 800874a:	1c42      	adds	r2, r0, #1
 800874c:	d101      	bne.n	8008752 <__sflush_r+0x7a>
 800874e:	682b      	ldr	r3, [r5, #0]
 8008750:	b903      	cbnz	r3, 8008754 <__sflush_r+0x7c>
 8008752:	6560      	str	r0, [r4, #84]	; 0x54
 8008754:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008756:	602f      	str	r7, [r5, #0]
 8008758:	2900      	cmp	r1, #0
 800875a:	d0ca      	beq.n	80086f2 <__sflush_r+0x1a>
 800875c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008760:	4299      	cmp	r1, r3
 8008762:	d002      	beq.n	800876a <__sflush_r+0x92>
 8008764:	4628      	mov	r0, r5
 8008766:	f001 fa3b 	bl	8009be0 <_free_r>
 800876a:	2000      	movs	r0, #0
 800876c:	6360      	str	r0, [r4, #52]	; 0x34
 800876e:	e7c1      	b.n	80086f4 <__sflush_r+0x1c>
 8008770:	6a21      	ldr	r1, [r4, #32]
 8008772:	2301      	movs	r3, #1
 8008774:	4628      	mov	r0, r5
 8008776:	47b0      	blx	r6
 8008778:	1c41      	adds	r1, r0, #1
 800877a:	d1c7      	bne.n	800870c <__sflush_r+0x34>
 800877c:	682b      	ldr	r3, [r5, #0]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d0c4      	beq.n	800870c <__sflush_r+0x34>
 8008782:	2b1d      	cmp	r3, #29
 8008784:	d001      	beq.n	800878a <__sflush_r+0xb2>
 8008786:	2b16      	cmp	r3, #22
 8008788:	d101      	bne.n	800878e <__sflush_r+0xb6>
 800878a:	602f      	str	r7, [r5, #0]
 800878c:	e7b1      	b.n	80086f2 <__sflush_r+0x1a>
 800878e:	89a3      	ldrh	r3, [r4, #12]
 8008790:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008794:	81a3      	strh	r3, [r4, #12]
 8008796:	e7ad      	b.n	80086f4 <__sflush_r+0x1c>
 8008798:	690f      	ldr	r7, [r1, #16]
 800879a:	2f00      	cmp	r7, #0
 800879c:	d0a9      	beq.n	80086f2 <__sflush_r+0x1a>
 800879e:	0793      	lsls	r3, r2, #30
 80087a0:	680e      	ldr	r6, [r1, #0]
 80087a2:	bf08      	it	eq
 80087a4:	694b      	ldreq	r3, [r1, #20]
 80087a6:	600f      	str	r7, [r1, #0]
 80087a8:	bf18      	it	ne
 80087aa:	2300      	movne	r3, #0
 80087ac:	eba6 0807 	sub.w	r8, r6, r7
 80087b0:	608b      	str	r3, [r1, #8]
 80087b2:	f1b8 0f00 	cmp.w	r8, #0
 80087b6:	dd9c      	ble.n	80086f2 <__sflush_r+0x1a>
 80087b8:	6a21      	ldr	r1, [r4, #32]
 80087ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80087bc:	4643      	mov	r3, r8
 80087be:	463a      	mov	r2, r7
 80087c0:	4628      	mov	r0, r5
 80087c2:	47b0      	blx	r6
 80087c4:	2800      	cmp	r0, #0
 80087c6:	dc06      	bgt.n	80087d6 <__sflush_r+0xfe>
 80087c8:	89a3      	ldrh	r3, [r4, #12]
 80087ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087ce:	81a3      	strh	r3, [r4, #12]
 80087d0:	f04f 30ff 	mov.w	r0, #4294967295
 80087d4:	e78e      	b.n	80086f4 <__sflush_r+0x1c>
 80087d6:	4407      	add	r7, r0
 80087d8:	eba8 0800 	sub.w	r8, r8, r0
 80087dc:	e7e9      	b.n	80087b2 <__sflush_r+0xda>
 80087de:	bf00      	nop
 80087e0:	20400001 	.word	0x20400001

080087e4 <_fflush_r>:
 80087e4:	b538      	push	{r3, r4, r5, lr}
 80087e6:	690b      	ldr	r3, [r1, #16]
 80087e8:	4605      	mov	r5, r0
 80087ea:	460c      	mov	r4, r1
 80087ec:	b913      	cbnz	r3, 80087f4 <_fflush_r+0x10>
 80087ee:	2500      	movs	r5, #0
 80087f0:	4628      	mov	r0, r5
 80087f2:	bd38      	pop	{r3, r4, r5, pc}
 80087f4:	b118      	cbz	r0, 80087fe <_fflush_r+0x1a>
 80087f6:	6983      	ldr	r3, [r0, #24]
 80087f8:	b90b      	cbnz	r3, 80087fe <_fflush_r+0x1a>
 80087fa:	f000 f887 	bl	800890c <__sinit>
 80087fe:	4b14      	ldr	r3, [pc, #80]	; (8008850 <_fflush_r+0x6c>)
 8008800:	429c      	cmp	r4, r3
 8008802:	d11b      	bne.n	800883c <_fflush_r+0x58>
 8008804:	686c      	ldr	r4, [r5, #4]
 8008806:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d0ef      	beq.n	80087ee <_fflush_r+0xa>
 800880e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008810:	07d0      	lsls	r0, r2, #31
 8008812:	d404      	bmi.n	800881e <_fflush_r+0x3a>
 8008814:	0599      	lsls	r1, r3, #22
 8008816:	d402      	bmi.n	800881e <_fflush_r+0x3a>
 8008818:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800881a:	f000 fc88 	bl	800912e <__retarget_lock_acquire_recursive>
 800881e:	4628      	mov	r0, r5
 8008820:	4621      	mov	r1, r4
 8008822:	f7ff ff59 	bl	80086d8 <__sflush_r>
 8008826:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008828:	07da      	lsls	r2, r3, #31
 800882a:	4605      	mov	r5, r0
 800882c:	d4e0      	bmi.n	80087f0 <_fflush_r+0xc>
 800882e:	89a3      	ldrh	r3, [r4, #12]
 8008830:	059b      	lsls	r3, r3, #22
 8008832:	d4dd      	bmi.n	80087f0 <_fflush_r+0xc>
 8008834:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008836:	f000 fc7b 	bl	8009130 <__retarget_lock_release_recursive>
 800883a:	e7d9      	b.n	80087f0 <_fflush_r+0xc>
 800883c:	4b05      	ldr	r3, [pc, #20]	; (8008854 <_fflush_r+0x70>)
 800883e:	429c      	cmp	r4, r3
 8008840:	d101      	bne.n	8008846 <_fflush_r+0x62>
 8008842:	68ac      	ldr	r4, [r5, #8]
 8008844:	e7df      	b.n	8008806 <_fflush_r+0x22>
 8008846:	4b04      	ldr	r3, [pc, #16]	; (8008858 <_fflush_r+0x74>)
 8008848:	429c      	cmp	r4, r3
 800884a:	bf08      	it	eq
 800884c:	68ec      	ldreq	r4, [r5, #12]
 800884e:	e7da      	b.n	8008806 <_fflush_r+0x22>
 8008850:	0800a504 	.word	0x0800a504
 8008854:	0800a524 	.word	0x0800a524
 8008858:	0800a4e4 	.word	0x0800a4e4

0800885c <std>:
 800885c:	2300      	movs	r3, #0
 800885e:	b510      	push	{r4, lr}
 8008860:	4604      	mov	r4, r0
 8008862:	e9c0 3300 	strd	r3, r3, [r0]
 8008866:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800886a:	6083      	str	r3, [r0, #8]
 800886c:	8181      	strh	r1, [r0, #12]
 800886e:	6643      	str	r3, [r0, #100]	; 0x64
 8008870:	81c2      	strh	r2, [r0, #14]
 8008872:	6183      	str	r3, [r0, #24]
 8008874:	4619      	mov	r1, r3
 8008876:	2208      	movs	r2, #8
 8008878:	305c      	adds	r0, #92	; 0x5c
 800887a:	f7fd fcc1 	bl	8006200 <memset>
 800887e:	4b05      	ldr	r3, [pc, #20]	; (8008894 <std+0x38>)
 8008880:	6263      	str	r3, [r4, #36]	; 0x24
 8008882:	4b05      	ldr	r3, [pc, #20]	; (8008898 <std+0x3c>)
 8008884:	62a3      	str	r3, [r4, #40]	; 0x28
 8008886:	4b05      	ldr	r3, [pc, #20]	; (800889c <std+0x40>)
 8008888:	62e3      	str	r3, [r4, #44]	; 0x2c
 800888a:	4b05      	ldr	r3, [pc, #20]	; (80088a0 <std+0x44>)
 800888c:	6224      	str	r4, [r4, #32]
 800888e:	6323      	str	r3, [r4, #48]	; 0x30
 8008890:	bd10      	pop	{r4, pc}
 8008892:	bf00      	nop
 8008894:	0800a019 	.word	0x0800a019
 8008898:	0800a03b 	.word	0x0800a03b
 800889c:	0800a073 	.word	0x0800a073
 80088a0:	0800a097 	.word	0x0800a097

080088a4 <_cleanup_r>:
 80088a4:	4901      	ldr	r1, [pc, #4]	; (80088ac <_cleanup_r+0x8>)
 80088a6:	f000 b8af 	b.w	8008a08 <_fwalk_reent>
 80088aa:	bf00      	nop
 80088ac:	080087e5 	.word	0x080087e5

080088b0 <__sfmoreglue>:
 80088b0:	b570      	push	{r4, r5, r6, lr}
 80088b2:	1e4a      	subs	r2, r1, #1
 80088b4:	2568      	movs	r5, #104	; 0x68
 80088b6:	4355      	muls	r5, r2
 80088b8:	460e      	mov	r6, r1
 80088ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80088be:	f001 f9df 	bl	8009c80 <_malloc_r>
 80088c2:	4604      	mov	r4, r0
 80088c4:	b140      	cbz	r0, 80088d8 <__sfmoreglue+0x28>
 80088c6:	2100      	movs	r1, #0
 80088c8:	e9c0 1600 	strd	r1, r6, [r0]
 80088cc:	300c      	adds	r0, #12
 80088ce:	60a0      	str	r0, [r4, #8]
 80088d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80088d4:	f7fd fc94 	bl	8006200 <memset>
 80088d8:	4620      	mov	r0, r4
 80088da:	bd70      	pop	{r4, r5, r6, pc}

080088dc <__sfp_lock_acquire>:
 80088dc:	4801      	ldr	r0, [pc, #4]	; (80088e4 <__sfp_lock_acquire+0x8>)
 80088de:	f000 bc26 	b.w	800912e <__retarget_lock_acquire_recursive>
 80088e2:	bf00      	nop
 80088e4:	20000728 	.word	0x20000728

080088e8 <__sfp_lock_release>:
 80088e8:	4801      	ldr	r0, [pc, #4]	; (80088f0 <__sfp_lock_release+0x8>)
 80088ea:	f000 bc21 	b.w	8009130 <__retarget_lock_release_recursive>
 80088ee:	bf00      	nop
 80088f0:	20000728 	.word	0x20000728

080088f4 <__sinit_lock_acquire>:
 80088f4:	4801      	ldr	r0, [pc, #4]	; (80088fc <__sinit_lock_acquire+0x8>)
 80088f6:	f000 bc1a 	b.w	800912e <__retarget_lock_acquire_recursive>
 80088fa:	bf00      	nop
 80088fc:	20000723 	.word	0x20000723

08008900 <__sinit_lock_release>:
 8008900:	4801      	ldr	r0, [pc, #4]	; (8008908 <__sinit_lock_release+0x8>)
 8008902:	f000 bc15 	b.w	8009130 <__retarget_lock_release_recursive>
 8008906:	bf00      	nop
 8008908:	20000723 	.word	0x20000723

0800890c <__sinit>:
 800890c:	b510      	push	{r4, lr}
 800890e:	4604      	mov	r4, r0
 8008910:	f7ff fff0 	bl	80088f4 <__sinit_lock_acquire>
 8008914:	69a3      	ldr	r3, [r4, #24]
 8008916:	b11b      	cbz	r3, 8008920 <__sinit+0x14>
 8008918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800891c:	f7ff bff0 	b.w	8008900 <__sinit_lock_release>
 8008920:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008924:	6523      	str	r3, [r4, #80]	; 0x50
 8008926:	4b13      	ldr	r3, [pc, #76]	; (8008974 <__sinit+0x68>)
 8008928:	4a13      	ldr	r2, [pc, #76]	; (8008978 <__sinit+0x6c>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	62a2      	str	r2, [r4, #40]	; 0x28
 800892e:	42a3      	cmp	r3, r4
 8008930:	bf04      	itt	eq
 8008932:	2301      	moveq	r3, #1
 8008934:	61a3      	streq	r3, [r4, #24]
 8008936:	4620      	mov	r0, r4
 8008938:	f000 f820 	bl	800897c <__sfp>
 800893c:	6060      	str	r0, [r4, #4]
 800893e:	4620      	mov	r0, r4
 8008940:	f000 f81c 	bl	800897c <__sfp>
 8008944:	60a0      	str	r0, [r4, #8]
 8008946:	4620      	mov	r0, r4
 8008948:	f000 f818 	bl	800897c <__sfp>
 800894c:	2200      	movs	r2, #0
 800894e:	60e0      	str	r0, [r4, #12]
 8008950:	2104      	movs	r1, #4
 8008952:	6860      	ldr	r0, [r4, #4]
 8008954:	f7ff ff82 	bl	800885c <std>
 8008958:	68a0      	ldr	r0, [r4, #8]
 800895a:	2201      	movs	r2, #1
 800895c:	2109      	movs	r1, #9
 800895e:	f7ff ff7d 	bl	800885c <std>
 8008962:	68e0      	ldr	r0, [r4, #12]
 8008964:	2202      	movs	r2, #2
 8008966:	2112      	movs	r1, #18
 8008968:	f7ff ff78 	bl	800885c <std>
 800896c:	2301      	movs	r3, #1
 800896e:	61a3      	str	r3, [r4, #24]
 8008970:	e7d2      	b.n	8008918 <__sinit+0xc>
 8008972:	bf00      	nop
 8008974:	0800a3c4 	.word	0x0800a3c4
 8008978:	080088a5 	.word	0x080088a5

0800897c <__sfp>:
 800897c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800897e:	4607      	mov	r7, r0
 8008980:	f7ff ffac 	bl	80088dc <__sfp_lock_acquire>
 8008984:	4b1e      	ldr	r3, [pc, #120]	; (8008a00 <__sfp+0x84>)
 8008986:	681e      	ldr	r6, [r3, #0]
 8008988:	69b3      	ldr	r3, [r6, #24]
 800898a:	b913      	cbnz	r3, 8008992 <__sfp+0x16>
 800898c:	4630      	mov	r0, r6
 800898e:	f7ff ffbd 	bl	800890c <__sinit>
 8008992:	3648      	adds	r6, #72	; 0x48
 8008994:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008998:	3b01      	subs	r3, #1
 800899a:	d503      	bpl.n	80089a4 <__sfp+0x28>
 800899c:	6833      	ldr	r3, [r6, #0]
 800899e:	b30b      	cbz	r3, 80089e4 <__sfp+0x68>
 80089a0:	6836      	ldr	r6, [r6, #0]
 80089a2:	e7f7      	b.n	8008994 <__sfp+0x18>
 80089a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80089a8:	b9d5      	cbnz	r5, 80089e0 <__sfp+0x64>
 80089aa:	4b16      	ldr	r3, [pc, #88]	; (8008a04 <__sfp+0x88>)
 80089ac:	60e3      	str	r3, [r4, #12]
 80089ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80089b2:	6665      	str	r5, [r4, #100]	; 0x64
 80089b4:	f000 fbba 	bl	800912c <__retarget_lock_init_recursive>
 80089b8:	f7ff ff96 	bl	80088e8 <__sfp_lock_release>
 80089bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80089c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80089c4:	6025      	str	r5, [r4, #0]
 80089c6:	61a5      	str	r5, [r4, #24]
 80089c8:	2208      	movs	r2, #8
 80089ca:	4629      	mov	r1, r5
 80089cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80089d0:	f7fd fc16 	bl	8006200 <memset>
 80089d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80089d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80089dc:	4620      	mov	r0, r4
 80089de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089e0:	3468      	adds	r4, #104	; 0x68
 80089e2:	e7d9      	b.n	8008998 <__sfp+0x1c>
 80089e4:	2104      	movs	r1, #4
 80089e6:	4638      	mov	r0, r7
 80089e8:	f7ff ff62 	bl	80088b0 <__sfmoreglue>
 80089ec:	4604      	mov	r4, r0
 80089ee:	6030      	str	r0, [r6, #0]
 80089f0:	2800      	cmp	r0, #0
 80089f2:	d1d5      	bne.n	80089a0 <__sfp+0x24>
 80089f4:	f7ff ff78 	bl	80088e8 <__sfp_lock_release>
 80089f8:	230c      	movs	r3, #12
 80089fa:	603b      	str	r3, [r7, #0]
 80089fc:	e7ee      	b.n	80089dc <__sfp+0x60>
 80089fe:	bf00      	nop
 8008a00:	0800a3c4 	.word	0x0800a3c4
 8008a04:	ffff0001 	.word	0xffff0001

08008a08 <_fwalk_reent>:
 8008a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a0c:	4606      	mov	r6, r0
 8008a0e:	4688      	mov	r8, r1
 8008a10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008a14:	2700      	movs	r7, #0
 8008a16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008a1a:	f1b9 0901 	subs.w	r9, r9, #1
 8008a1e:	d505      	bpl.n	8008a2c <_fwalk_reent+0x24>
 8008a20:	6824      	ldr	r4, [r4, #0]
 8008a22:	2c00      	cmp	r4, #0
 8008a24:	d1f7      	bne.n	8008a16 <_fwalk_reent+0xe>
 8008a26:	4638      	mov	r0, r7
 8008a28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a2c:	89ab      	ldrh	r3, [r5, #12]
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	d907      	bls.n	8008a42 <_fwalk_reent+0x3a>
 8008a32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a36:	3301      	adds	r3, #1
 8008a38:	d003      	beq.n	8008a42 <_fwalk_reent+0x3a>
 8008a3a:	4629      	mov	r1, r5
 8008a3c:	4630      	mov	r0, r6
 8008a3e:	47c0      	blx	r8
 8008a40:	4307      	orrs	r7, r0
 8008a42:	3568      	adds	r5, #104	; 0x68
 8008a44:	e7e9      	b.n	8008a1a <_fwalk_reent+0x12>

08008a46 <rshift>:
 8008a46:	6903      	ldr	r3, [r0, #16]
 8008a48:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008a4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008a50:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008a54:	f100 0414 	add.w	r4, r0, #20
 8008a58:	dd45      	ble.n	8008ae6 <rshift+0xa0>
 8008a5a:	f011 011f 	ands.w	r1, r1, #31
 8008a5e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008a62:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008a66:	d10c      	bne.n	8008a82 <rshift+0x3c>
 8008a68:	f100 0710 	add.w	r7, r0, #16
 8008a6c:	4629      	mov	r1, r5
 8008a6e:	42b1      	cmp	r1, r6
 8008a70:	d334      	bcc.n	8008adc <rshift+0x96>
 8008a72:	1a9b      	subs	r3, r3, r2
 8008a74:	009b      	lsls	r3, r3, #2
 8008a76:	1eea      	subs	r2, r5, #3
 8008a78:	4296      	cmp	r6, r2
 8008a7a:	bf38      	it	cc
 8008a7c:	2300      	movcc	r3, #0
 8008a7e:	4423      	add	r3, r4
 8008a80:	e015      	b.n	8008aae <rshift+0x68>
 8008a82:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008a86:	f1c1 0820 	rsb	r8, r1, #32
 8008a8a:	40cf      	lsrs	r7, r1
 8008a8c:	f105 0e04 	add.w	lr, r5, #4
 8008a90:	46a1      	mov	r9, r4
 8008a92:	4576      	cmp	r6, lr
 8008a94:	46f4      	mov	ip, lr
 8008a96:	d815      	bhi.n	8008ac4 <rshift+0x7e>
 8008a98:	1a9b      	subs	r3, r3, r2
 8008a9a:	009a      	lsls	r2, r3, #2
 8008a9c:	3a04      	subs	r2, #4
 8008a9e:	3501      	adds	r5, #1
 8008aa0:	42ae      	cmp	r6, r5
 8008aa2:	bf38      	it	cc
 8008aa4:	2200      	movcc	r2, #0
 8008aa6:	18a3      	adds	r3, r4, r2
 8008aa8:	50a7      	str	r7, [r4, r2]
 8008aaa:	b107      	cbz	r7, 8008aae <rshift+0x68>
 8008aac:	3304      	adds	r3, #4
 8008aae:	1b1a      	subs	r2, r3, r4
 8008ab0:	42a3      	cmp	r3, r4
 8008ab2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008ab6:	bf08      	it	eq
 8008ab8:	2300      	moveq	r3, #0
 8008aba:	6102      	str	r2, [r0, #16]
 8008abc:	bf08      	it	eq
 8008abe:	6143      	streq	r3, [r0, #20]
 8008ac0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ac4:	f8dc c000 	ldr.w	ip, [ip]
 8008ac8:	fa0c fc08 	lsl.w	ip, ip, r8
 8008acc:	ea4c 0707 	orr.w	r7, ip, r7
 8008ad0:	f849 7b04 	str.w	r7, [r9], #4
 8008ad4:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008ad8:	40cf      	lsrs	r7, r1
 8008ada:	e7da      	b.n	8008a92 <rshift+0x4c>
 8008adc:	f851 cb04 	ldr.w	ip, [r1], #4
 8008ae0:	f847 cf04 	str.w	ip, [r7, #4]!
 8008ae4:	e7c3      	b.n	8008a6e <rshift+0x28>
 8008ae6:	4623      	mov	r3, r4
 8008ae8:	e7e1      	b.n	8008aae <rshift+0x68>

08008aea <__hexdig_fun>:
 8008aea:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008aee:	2b09      	cmp	r3, #9
 8008af0:	d802      	bhi.n	8008af8 <__hexdig_fun+0xe>
 8008af2:	3820      	subs	r0, #32
 8008af4:	b2c0      	uxtb	r0, r0
 8008af6:	4770      	bx	lr
 8008af8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008afc:	2b05      	cmp	r3, #5
 8008afe:	d801      	bhi.n	8008b04 <__hexdig_fun+0x1a>
 8008b00:	3847      	subs	r0, #71	; 0x47
 8008b02:	e7f7      	b.n	8008af4 <__hexdig_fun+0xa>
 8008b04:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008b08:	2b05      	cmp	r3, #5
 8008b0a:	d801      	bhi.n	8008b10 <__hexdig_fun+0x26>
 8008b0c:	3827      	subs	r0, #39	; 0x27
 8008b0e:	e7f1      	b.n	8008af4 <__hexdig_fun+0xa>
 8008b10:	2000      	movs	r0, #0
 8008b12:	4770      	bx	lr

08008b14 <__gethex>:
 8008b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b18:	ed2d 8b02 	vpush	{d8}
 8008b1c:	b089      	sub	sp, #36	; 0x24
 8008b1e:	ee08 0a10 	vmov	s16, r0
 8008b22:	9304      	str	r3, [sp, #16]
 8008b24:	4bbc      	ldr	r3, [pc, #752]	; (8008e18 <__gethex+0x304>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	9301      	str	r3, [sp, #4]
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	468b      	mov	fp, r1
 8008b2e:	4690      	mov	r8, r2
 8008b30:	f7f7 fb6e 	bl	8000210 <strlen>
 8008b34:	9b01      	ldr	r3, [sp, #4]
 8008b36:	f8db 2000 	ldr.w	r2, [fp]
 8008b3a:	4403      	add	r3, r0
 8008b3c:	4682      	mov	sl, r0
 8008b3e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008b42:	9305      	str	r3, [sp, #20]
 8008b44:	1c93      	adds	r3, r2, #2
 8008b46:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008b4a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008b4e:	32fe      	adds	r2, #254	; 0xfe
 8008b50:	18d1      	adds	r1, r2, r3
 8008b52:	461f      	mov	r7, r3
 8008b54:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008b58:	9100      	str	r1, [sp, #0]
 8008b5a:	2830      	cmp	r0, #48	; 0x30
 8008b5c:	d0f8      	beq.n	8008b50 <__gethex+0x3c>
 8008b5e:	f7ff ffc4 	bl	8008aea <__hexdig_fun>
 8008b62:	4604      	mov	r4, r0
 8008b64:	2800      	cmp	r0, #0
 8008b66:	d13a      	bne.n	8008bde <__gethex+0xca>
 8008b68:	9901      	ldr	r1, [sp, #4]
 8008b6a:	4652      	mov	r2, sl
 8008b6c:	4638      	mov	r0, r7
 8008b6e:	f001 fa96 	bl	800a09e <strncmp>
 8008b72:	4605      	mov	r5, r0
 8008b74:	2800      	cmp	r0, #0
 8008b76:	d168      	bne.n	8008c4a <__gethex+0x136>
 8008b78:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008b7c:	eb07 060a 	add.w	r6, r7, sl
 8008b80:	f7ff ffb3 	bl	8008aea <__hexdig_fun>
 8008b84:	2800      	cmp	r0, #0
 8008b86:	d062      	beq.n	8008c4e <__gethex+0x13a>
 8008b88:	4633      	mov	r3, r6
 8008b8a:	7818      	ldrb	r0, [r3, #0]
 8008b8c:	2830      	cmp	r0, #48	; 0x30
 8008b8e:	461f      	mov	r7, r3
 8008b90:	f103 0301 	add.w	r3, r3, #1
 8008b94:	d0f9      	beq.n	8008b8a <__gethex+0x76>
 8008b96:	f7ff ffa8 	bl	8008aea <__hexdig_fun>
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	fab0 f480 	clz	r4, r0
 8008ba0:	0964      	lsrs	r4, r4, #5
 8008ba2:	4635      	mov	r5, r6
 8008ba4:	9300      	str	r3, [sp, #0]
 8008ba6:	463a      	mov	r2, r7
 8008ba8:	4616      	mov	r6, r2
 8008baa:	3201      	adds	r2, #1
 8008bac:	7830      	ldrb	r0, [r6, #0]
 8008bae:	f7ff ff9c 	bl	8008aea <__hexdig_fun>
 8008bb2:	2800      	cmp	r0, #0
 8008bb4:	d1f8      	bne.n	8008ba8 <__gethex+0x94>
 8008bb6:	9901      	ldr	r1, [sp, #4]
 8008bb8:	4652      	mov	r2, sl
 8008bba:	4630      	mov	r0, r6
 8008bbc:	f001 fa6f 	bl	800a09e <strncmp>
 8008bc0:	b980      	cbnz	r0, 8008be4 <__gethex+0xd0>
 8008bc2:	b94d      	cbnz	r5, 8008bd8 <__gethex+0xc4>
 8008bc4:	eb06 050a 	add.w	r5, r6, sl
 8008bc8:	462a      	mov	r2, r5
 8008bca:	4616      	mov	r6, r2
 8008bcc:	3201      	adds	r2, #1
 8008bce:	7830      	ldrb	r0, [r6, #0]
 8008bd0:	f7ff ff8b 	bl	8008aea <__hexdig_fun>
 8008bd4:	2800      	cmp	r0, #0
 8008bd6:	d1f8      	bne.n	8008bca <__gethex+0xb6>
 8008bd8:	1bad      	subs	r5, r5, r6
 8008bda:	00ad      	lsls	r5, r5, #2
 8008bdc:	e004      	b.n	8008be8 <__gethex+0xd4>
 8008bde:	2400      	movs	r4, #0
 8008be0:	4625      	mov	r5, r4
 8008be2:	e7e0      	b.n	8008ba6 <__gethex+0x92>
 8008be4:	2d00      	cmp	r5, #0
 8008be6:	d1f7      	bne.n	8008bd8 <__gethex+0xc4>
 8008be8:	7833      	ldrb	r3, [r6, #0]
 8008bea:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008bee:	2b50      	cmp	r3, #80	; 0x50
 8008bf0:	d13b      	bne.n	8008c6a <__gethex+0x156>
 8008bf2:	7873      	ldrb	r3, [r6, #1]
 8008bf4:	2b2b      	cmp	r3, #43	; 0x2b
 8008bf6:	d02c      	beq.n	8008c52 <__gethex+0x13e>
 8008bf8:	2b2d      	cmp	r3, #45	; 0x2d
 8008bfa:	d02e      	beq.n	8008c5a <__gethex+0x146>
 8008bfc:	1c71      	adds	r1, r6, #1
 8008bfe:	f04f 0900 	mov.w	r9, #0
 8008c02:	7808      	ldrb	r0, [r1, #0]
 8008c04:	f7ff ff71 	bl	8008aea <__hexdig_fun>
 8008c08:	1e43      	subs	r3, r0, #1
 8008c0a:	b2db      	uxtb	r3, r3
 8008c0c:	2b18      	cmp	r3, #24
 8008c0e:	d82c      	bhi.n	8008c6a <__gethex+0x156>
 8008c10:	f1a0 0210 	sub.w	r2, r0, #16
 8008c14:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008c18:	f7ff ff67 	bl	8008aea <__hexdig_fun>
 8008c1c:	1e43      	subs	r3, r0, #1
 8008c1e:	b2db      	uxtb	r3, r3
 8008c20:	2b18      	cmp	r3, #24
 8008c22:	d91d      	bls.n	8008c60 <__gethex+0x14c>
 8008c24:	f1b9 0f00 	cmp.w	r9, #0
 8008c28:	d000      	beq.n	8008c2c <__gethex+0x118>
 8008c2a:	4252      	negs	r2, r2
 8008c2c:	4415      	add	r5, r2
 8008c2e:	f8cb 1000 	str.w	r1, [fp]
 8008c32:	b1e4      	cbz	r4, 8008c6e <__gethex+0x15a>
 8008c34:	9b00      	ldr	r3, [sp, #0]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	bf14      	ite	ne
 8008c3a:	2700      	movne	r7, #0
 8008c3c:	2706      	moveq	r7, #6
 8008c3e:	4638      	mov	r0, r7
 8008c40:	b009      	add	sp, #36	; 0x24
 8008c42:	ecbd 8b02 	vpop	{d8}
 8008c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c4a:	463e      	mov	r6, r7
 8008c4c:	4625      	mov	r5, r4
 8008c4e:	2401      	movs	r4, #1
 8008c50:	e7ca      	b.n	8008be8 <__gethex+0xd4>
 8008c52:	f04f 0900 	mov.w	r9, #0
 8008c56:	1cb1      	adds	r1, r6, #2
 8008c58:	e7d3      	b.n	8008c02 <__gethex+0xee>
 8008c5a:	f04f 0901 	mov.w	r9, #1
 8008c5e:	e7fa      	b.n	8008c56 <__gethex+0x142>
 8008c60:	230a      	movs	r3, #10
 8008c62:	fb03 0202 	mla	r2, r3, r2, r0
 8008c66:	3a10      	subs	r2, #16
 8008c68:	e7d4      	b.n	8008c14 <__gethex+0x100>
 8008c6a:	4631      	mov	r1, r6
 8008c6c:	e7df      	b.n	8008c2e <__gethex+0x11a>
 8008c6e:	1bf3      	subs	r3, r6, r7
 8008c70:	3b01      	subs	r3, #1
 8008c72:	4621      	mov	r1, r4
 8008c74:	2b07      	cmp	r3, #7
 8008c76:	dc0b      	bgt.n	8008c90 <__gethex+0x17c>
 8008c78:	ee18 0a10 	vmov	r0, s16
 8008c7c:	f000 fae6 	bl	800924c <_Balloc>
 8008c80:	4604      	mov	r4, r0
 8008c82:	b940      	cbnz	r0, 8008c96 <__gethex+0x182>
 8008c84:	4b65      	ldr	r3, [pc, #404]	; (8008e1c <__gethex+0x308>)
 8008c86:	4602      	mov	r2, r0
 8008c88:	21de      	movs	r1, #222	; 0xde
 8008c8a:	4865      	ldr	r0, [pc, #404]	; (8008e20 <__gethex+0x30c>)
 8008c8c:	f001 fa38 	bl	800a100 <__assert_func>
 8008c90:	3101      	adds	r1, #1
 8008c92:	105b      	asrs	r3, r3, #1
 8008c94:	e7ee      	b.n	8008c74 <__gethex+0x160>
 8008c96:	f100 0914 	add.w	r9, r0, #20
 8008c9a:	f04f 0b00 	mov.w	fp, #0
 8008c9e:	f1ca 0301 	rsb	r3, sl, #1
 8008ca2:	f8cd 9008 	str.w	r9, [sp, #8]
 8008ca6:	f8cd b000 	str.w	fp, [sp]
 8008caa:	9306      	str	r3, [sp, #24]
 8008cac:	42b7      	cmp	r7, r6
 8008cae:	d340      	bcc.n	8008d32 <__gethex+0x21e>
 8008cb0:	9802      	ldr	r0, [sp, #8]
 8008cb2:	9b00      	ldr	r3, [sp, #0]
 8008cb4:	f840 3b04 	str.w	r3, [r0], #4
 8008cb8:	eba0 0009 	sub.w	r0, r0, r9
 8008cbc:	1080      	asrs	r0, r0, #2
 8008cbe:	0146      	lsls	r6, r0, #5
 8008cc0:	6120      	str	r0, [r4, #16]
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f000 fbb8 	bl	8009438 <__hi0bits>
 8008cc8:	1a30      	subs	r0, r6, r0
 8008cca:	f8d8 6000 	ldr.w	r6, [r8]
 8008cce:	42b0      	cmp	r0, r6
 8008cd0:	dd63      	ble.n	8008d9a <__gethex+0x286>
 8008cd2:	1b87      	subs	r7, r0, r6
 8008cd4:	4639      	mov	r1, r7
 8008cd6:	4620      	mov	r0, r4
 8008cd8:	f000 ff52 	bl	8009b80 <__any_on>
 8008cdc:	4682      	mov	sl, r0
 8008cde:	b1a8      	cbz	r0, 8008d0c <__gethex+0x1f8>
 8008ce0:	1e7b      	subs	r3, r7, #1
 8008ce2:	1159      	asrs	r1, r3, #5
 8008ce4:	f003 021f 	and.w	r2, r3, #31
 8008ce8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008cec:	f04f 0a01 	mov.w	sl, #1
 8008cf0:	fa0a f202 	lsl.w	r2, sl, r2
 8008cf4:	420a      	tst	r2, r1
 8008cf6:	d009      	beq.n	8008d0c <__gethex+0x1f8>
 8008cf8:	4553      	cmp	r3, sl
 8008cfa:	dd05      	ble.n	8008d08 <__gethex+0x1f4>
 8008cfc:	1eb9      	subs	r1, r7, #2
 8008cfe:	4620      	mov	r0, r4
 8008d00:	f000 ff3e 	bl	8009b80 <__any_on>
 8008d04:	2800      	cmp	r0, #0
 8008d06:	d145      	bne.n	8008d94 <__gethex+0x280>
 8008d08:	f04f 0a02 	mov.w	sl, #2
 8008d0c:	4639      	mov	r1, r7
 8008d0e:	4620      	mov	r0, r4
 8008d10:	f7ff fe99 	bl	8008a46 <rshift>
 8008d14:	443d      	add	r5, r7
 8008d16:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008d1a:	42ab      	cmp	r3, r5
 8008d1c:	da4c      	bge.n	8008db8 <__gethex+0x2a4>
 8008d1e:	ee18 0a10 	vmov	r0, s16
 8008d22:	4621      	mov	r1, r4
 8008d24:	f000 fad2 	bl	80092cc <_Bfree>
 8008d28:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	6013      	str	r3, [r2, #0]
 8008d2e:	27a3      	movs	r7, #163	; 0xa3
 8008d30:	e785      	b.n	8008c3e <__gethex+0x12a>
 8008d32:	1e73      	subs	r3, r6, #1
 8008d34:	9a05      	ldr	r2, [sp, #20]
 8008d36:	9303      	str	r3, [sp, #12]
 8008d38:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d019      	beq.n	8008d74 <__gethex+0x260>
 8008d40:	f1bb 0f20 	cmp.w	fp, #32
 8008d44:	d107      	bne.n	8008d56 <__gethex+0x242>
 8008d46:	9b02      	ldr	r3, [sp, #8]
 8008d48:	9a00      	ldr	r2, [sp, #0]
 8008d4a:	f843 2b04 	str.w	r2, [r3], #4
 8008d4e:	9302      	str	r3, [sp, #8]
 8008d50:	2300      	movs	r3, #0
 8008d52:	9300      	str	r3, [sp, #0]
 8008d54:	469b      	mov	fp, r3
 8008d56:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008d5a:	f7ff fec6 	bl	8008aea <__hexdig_fun>
 8008d5e:	9b00      	ldr	r3, [sp, #0]
 8008d60:	f000 000f 	and.w	r0, r0, #15
 8008d64:	fa00 f00b 	lsl.w	r0, r0, fp
 8008d68:	4303      	orrs	r3, r0
 8008d6a:	9300      	str	r3, [sp, #0]
 8008d6c:	f10b 0b04 	add.w	fp, fp, #4
 8008d70:	9b03      	ldr	r3, [sp, #12]
 8008d72:	e00d      	b.n	8008d90 <__gethex+0x27c>
 8008d74:	9b03      	ldr	r3, [sp, #12]
 8008d76:	9a06      	ldr	r2, [sp, #24]
 8008d78:	4413      	add	r3, r2
 8008d7a:	42bb      	cmp	r3, r7
 8008d7c:	d3e0      	bcc.n	8008d40 <__gethex+0x22c>
 8008d7e:	4618      	mov	r0, r3
 8008d80:	9901      	ldr	r1, [sp, #4]
 8008d82:	9307      	str	r3, [sp, #28]
 8008d84:	4652      	mov	r2, sl
 8008d86:	f001 f98a 	bl	800a09e <strncmp>
 8008d8a:	9b07      	ldr	r3, [sp, #28]
 8008d8c:	2800      	cmp	r0, #0
 8008d8e:	d1d7      	bne.n	8008d40 <__gethex+0x22c>
 8008d90:	461e      	mov	r6, r3
 8008d92:	e78b      	b.n	8008cac <__gethex+0x198>
 8008d94:	f04f 0a03 	mov.w	sl, #3
 8008d98:	e7b8      	b.n	8008d0c <__gethex+0x1f8>
 8008d9a:	da0a      	bge.n	8008db2 <__gethex+0x29e>
 8008d9c:	1a37      	subs	r7, r6, r0
 8008d9e:	4621      	mov	r1, r4
 8008da0:	ee18 0a10 	vmov	r0, s16
 8008da4:	463a      	mov	r2, r7
 8008da6:	f000 fcad 	bl	8009704 <__lshift>
 8008daa:	1bed      	subs	r5, r5, r7
 8008dac:	4604      	mov	r4, r0
 8008dae:	f100 0914 	add.w	r9, r0, #20
 8008db2:	f04f 0a00 	mov.w	sl, #0
 8008db6:	e7ae      	b.n	8008d16 <__gethex+0x202>
 8008db8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008dbc:	42a8      	cmp	r0, r5
 8008dbe:	dd72      	ble.n	8008ea6 <__gethex+0x392>
 8008dc0:	1b45      	subs	r5, r0, r5
 8008dc2:	42ae      	cmp	r6, r5
 8008dc4:	dc36      	bgt.n	8008e34 <__gethex+0x320>
 8008dc6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008dca:	2b02      	cmp	r3, #2
 8008dcc:	d02a      	beq.n	8008e24 <__gethex+0x310>
 8008dce:	2b03      	cmp	r3, #3
 8008dd0:	d02c      	beq.n	8008e2c <__gethex+0x318>
 8008dd2:	2b01      	cmp	r3, #1
 8008dd4:	d115      	bne.n	8008e02 <__gethex+0x2ee>
 8008dd6:	42ae      	cmp	r6, r5
 8008dd8:	d113      	bne.n	8008e02 <__gethex+0x2ee>
 8008dda:	2e01      	cmp	r6, #1
 8008ddc:	d10b      	bne.n	8008df6 <__gethex+0x2e2>
 8008dde:	9a04      	ldr	r2, [sp, #16]
 8008de0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008de4:	6013      	str	r3, [r2, #0]
 8008de6:	2301      	movs	r3, #1
 8008de8:	6123      	str	r3, [r4, #16]
 8008dea:	f8c9 3000 	str.w	r3, [r9]
 8008dee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008df0:	2762      	movs	r7, #98	; 0x62
 8008df2:	601c      	str	r4, [r3, #0]
 8008df4:	e723      	b.n	8008c3e <__gethex+0x12a>
 8008df6:	1e71      	subs	r1, r6, #1
 8008df8:	4620      	mov	r0, r4
 8008dfa:	f000 fec1 	bl	8009b80 <__any_on>
 8008dfe:	2800      	cmp	r0, #0
 8008e00:	d1ed      	bne.n	8008dde <__gethex+0x2ca>
 8008e02:	ee18 0a10 	vmov	r0, s16
 8008e06:	4621      	mov	r1, r4
 8008e08:	f000 fa60 	bl	80092cc <_Bfree>
 8008e0c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008e0e:	2300      	movs	r3, #0
 8008e10:	6013      	str	r3, [r2, #0]
 8008e12:	2750      	movs	r7, #80	; 0x50
 8008e14:	e713      	b.n	8008c3e <__gethex+0x12a>
 8008e16:	bf00      	nop
 8008e18:	0800a5b0 	.word	0x0800a5b0
 8008e1c:	0800a4d3 	.word	0x0800a4d3
 8008e20:	0800a544 	.word	0x0800a544
 8008e24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d1eb      	bne.n	8008e02 <__gethex+0x2ee>
 8008e2a:	e7d8      	b.n	8008dde <__gethex+0x2ca>
 8008e2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d1d5      	bne.n	8008dde <__gethex+0x2ca>
 8008e32:	e7e6      	b.n	8008e02 <__gethex+0x2ee>
 8008e34:	1e6f      	subs	r7, r5, #1
 8008e36:	f1ba 0f00 	cmp.w	sl, #0
 8008e3a:	d131      	bne.n	8008ea0 <__gethex+0x38c>
 8008e3c:	b127      	cbz	r7, 8008e48 <__gethex+0x334>
 8008e3e:	4639      	mov	r1, r7
 8008e40:	4620      	mov	r0, r4
 8008e42:	f000 fe9d 	bl	8009b80 <__any_on>
 8008e46:	4682      	mov	sl, r0
 8008e48:	117b      	asrs	r3, r7, #5
 8008e4a:	2101      	movs	r1, #1
 8008e4c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008e50:	f007 071f 	and.w	r7, r7, #31
 8008e54:	fa01 f707 	lsl.w	r7, r1, r7
 8008e58:	421f      	tst	r7, r3
 8008e5a:	4629      	mov	r1, r5
 8008e5c:	4620      	mov	r0, r4
 8008e5e:	bf18      	it	ne
 8008e60:	f04a 0a02 	orrne.w	sl, sl, #2
 8008e64:	1b76      	subs	r6, r6, r5
 8008e66:	f7ff fdee 	bl	8008a46 <rshift>
 8008e6a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008e6e:	2702      	movs	r7, #2
 8008e70:	f1ba 0f00 	cmp.w	sl, #0
 8008e74:	d048      	beq.n	8008f08 <__gethex+0x3f4>
 8008e76:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008e7a:	2b02      	cmp	r3, #2
 8008e7c:	d015      	beq.n	8008eaa <__gethex+0x396>
 8008e7e:	2b03      	cmp	r3, #3
 8008e80:	d017      	beq.n	8008eb2 <__gethex+0x39e>
 8008e82:	2b01      	cmp	r3, #1
 8008e84:	d109      	bne.n	8008e9a <__gethex+0x386>
 8008e86:	f01a 0f02 	tst.w	sl, #2
 8008e8a:	d006      	beq.n	8008e9a <__gethex+0x386>
 8008e8c:	f8d9 0000 	ldr.w	r0, [r9]
 8008e90:	ea4a 0a00 	orr.w	sl, sl, r0
 8008e94:	f01a 0f01 	tst.w	sl, #1
 8008e98:	d10e      	bne.n	8008eb8 <__gethex+0x3a4>
 8008e9a:	f047 0710 	orr.w	r7, r7, #16
 8008e9e:	e033      	b.n	8008f08 <__gethex+0x3f4>
 8008ea0:	f04f 0a01 	mov.w	sl, #1
 8008ea4:	e7d0      	b.n	8008e48 <__gethex+0x334>
 8008ea6:	2701      	movs	r7, #1
 8008ea8:	e7e2      	b.n	8008e70 <__gethex+0x35c>
 8008eaa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008eac:	f1c3 0301 	rsb	r3, r3, #1
 8008eb0:	9315      	str	r3, [sp, #84]	; 0x54
 8008eb2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d0f0      	beq.n	8008e9a <__gethex+0x386>
 8008eb8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008ebc:	f104 0314 	add.w	r3, r4, #20
 8008ec0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008ec4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008ec8:	f04f 0c00 	mov.w	ip, #0
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ed2:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008ed6:	d01c      	beq.n	8008f12 <__gethex+0x3fe>
 8008ed8:	3201      	adds	r2, #1
 8008eda:	6002      	str	r2, [r0, #0]
 8008edc:	2f02      	cmp	r7, #2
 8008ede:	f104 0314 	add.w	r3, r4, #20
 8008ee2:	d13f      	bne.n	8008f64 <__gethex+0x450>
 8008ee4:	f8d8 2000 	ldr.w	r2, [r8]
 8008ee8:	3a01      	subs	r2, #1
 8008eea:	42b2      	cmp	r2, r6
 8008eec:	d10a      	bne.n	8008f04 <__gethex+0x3f0>
 8008eee:	1171      	asrs	r1, r6, #5
 8008ef0:	2201      	movs	r2, #1
 8008ef2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008ef6:	f006 061f 	and.w	r6, r6, #31
 8008efa:	fa02 f606 	lsl.w	r6, r2, r6
 8008efe:	421e      	tst	r6, r3
 8008f00:	bf18      	it	ne
 8008f02:	4617      	movne	r7, r2
 8008f04:	f047 0720 	orr.w	r7, r7, #32
 8008f08:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008f0a:	601c      	str	r4, [r3, #0]
 8008f0c:	9b04      	ldr	r3, [sp, #16]
 8008f0e:	601d      	str	r5, [r3, #0]
 8008f10:	e695      	b.n	8008c3e <__gethex+0x12a>
 8008f12:	4299      	cmp	r1, r3
 8008f14:	f843 cc04 	str.w	ip, [r3, #-4]
 8008f18:	d8d8      	bhi.n	8008ecc <__gethex+0x3b8>
 8008f1a:	68a3      	ldr	r3, [r4, #8]
 8008f1c:	459b      	cmp	fp, r3
 8008f1e:	db19      	blt.n	8008f54 <__gethex+0x440>
 8008f20:	6861      	ldr	r1, [r4, #4]
 8008f22:	ee18 0a10 	vmov	r0, s16
 8008f26:	3101      	adds	r1, #1
 8008f28:	f000 f990 	bl	800924c <_Balloc>
 8008f2c:	4681      	mov	r9, r0
 8008f2e:	b918      	cbnz	r0, 8008f38 <__gethex+0x424>
 8008f30:	4b1a      	ldr	r3, [pc, #104]	; (8008f9c <__gethex+0x488>)
 8008f32:	4602      	mov	r2, r0
 8008f34:	2184      	movs	r1, #132	; 0x84
 8008f36:	e6a8      	b.n	8008c8a <__gethex+0x176>
 8008f38:	6922      	ldr	r2, [r4, #16]
 8008f3a:	3202      	adds	r2, #2
 8008f3c:	f104 010c 	add.w	r1, r4, #12
 8008f40:	0092      	lsls	r2, r2, #2
 8008f42:	300c      	adds	r0, #12
 8008f44:	f000 f974 	bl	8009230 <memcpy>
 8008f48:	4621      	mov	r1, r4
 8008f4a:	ee18 0a10 	vmov	r0, s16
 8008f4e:	f000 f9bd 	bl	80092cc <_Bfree>
 8008f52:	464c      	mov	r4, r9
 8008f54:	6923      	ldr	r3, [r4, #16]
 8008f56:	1c5a      	adds	r2, r3, #1
 8008f58:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008f5c:	6122      	str	r2, [r4, #16]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	615a      	str	r2, [r3, #20]
 8008f62:	e7bb      	b.n	8008edc <__gethex+0x3c8>
 8008f64:	6922      	ldr	r2, [r4, #16]
 8008f66:	455a      	cmp	r2, fp
 8008f68:	dd0b      	ble.n	8008f82 <__gethex+0x46e>
 8008f6a:	2101      	movs	r1, #1
 8008f6c:	4620      	mov	r0, r4
 8008f6e:	f7ff fd6a 	bl	8008a46 <rshift>
 8008f72:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008f76:	3501      	adds	r5, #1
 8008f78:	42ab      	cmp	r3, r5
 8008f7a:	f6ff aed0 	blt.w	8008d1e <__gethex+0x20a>
 8008f7e:	2701      	movs	r7, #1
 8008f80:	e7c0      	b.n	8008f04 <__gethex+0x3f0>
 8008f82:	f016 061f 	ands.w	r6, r6, #31
 8008f86:	d0fa      	beq.n	8008f7e <__gethex+0x46a>
 8008f88:	449a      	add	sl, r3
 8008f8a:	f1c6 0620 	rsb	r6, r6, #32
 8008f8e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8008f92:	f000 fa51 	bl	8009438 <__hi0bits>
 8008f96:	42b0      	cmp	r0, r6
 8008f98:	dbe7      	blt.n	8008f6a <__gethex+0x456>
 8008f9a:	e7f0      	b.n	8008f7e <__gethex+0x46a>
 8008f9c:	0800a4d3 	.word	0x0800a4d3

08008fa0 <L_shift>:
 8008fa0:	f1c2 0208 	rsb	r2, r2, #8
 8008fa4:	0092      	lsls	r2, r2, #2
 8008fa6:	b570      	push	{r4, r5, r6, lr}
 8008fa8:	f1c2 0620 	rsb	r6, r2, #32
 8008fac:	6843      	ldr	r3, [r0, #4]
 8008fae:	6804      	ldr	r4, [r0, #0]
 8008fb0:	fa03 f506 	lsl.w	r5, r3, r6
 8008fb4:	432c      	orrs	r4, r5
 8008fb6:	40d3      	lsrs	r3, r2
 8008fb8:	6004      	str	r4, [r0, #0]
 8008fba:	f840 3f04 	str.w	r3, [r0, #4]!
 8008fbe:	4288      	cmp	r0, r1
 8008fc0:	d3f4      	bcc.n	8008fac <L_shift+0xc>
 8008fc2:	bd70      	pop	{r4, r5, r6, pc}

08008fc4 <__match>:
 8008fc4:	b530      	push	{r4, r5, lr}
 8008fc6:	6803      	ldr	r3, [r0, #0]
 8008fc8:	3301      	adds	r3, #1
 8008fca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fce:	b914      	cbnz	r4, 8008fd6 <__match+0x12>
 8008fd0:	6003      	str	r3, [r0, #0]
 8008fd2:	2001      	movs	r0, #1
 8008fd4:	bd30      	pop	{r4, r5, pc}
 8008fd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fda:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008fde:	2d19      	cmp	r5, #25
 8008fe0:	bf98      	it	ls
 8008fe2:	3220      	addls	r2, #32
 8008fe4:	42a2      	cmp	r2, r4
 8008fe6:	d0f0      	beq.n	8008fca <__match+0x6>
 8008fe8:	2000      	movs	r0, #0
 8008fea:	e7f3      	b.n	8008fd4 <__match+0x10>

08008fec <__hexnan>:
 8008fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ff0:	680b      	ldr	r3, [r1, #0]
 8008ff2:	6801      	ldr	r1, [r0, #0]
 8008ff4:	115e      	asrs	r6, r3, #5
 8008ff6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008ffa:	f013 031f 	ands.w	r3, r3, #31
 8008ffe:	b087      	sub	sp, #28
 8009000:	bf18      	it	ne
 8009002:	3604      	addne	r6, #4
 8009004:	2500      	movs	r5, #0
 8009006:	1f37      	subs	r7, r6, #4
 8009008:	4682      	mov	sl, r0
 800900a:	4690      	mov	r8, r2
 800900c:	9301      	str	r3, [sp, #4]
 800900e:	f846 5c04 	str.w	r5, [r6, #-4]
 8009012:	46b9      	mov	r9, r7
 8009014:	463c      	mov	r4, r7
 8009016:	9502      	str	r5, [sp, #8]
 8009018:	46ab      	mov	fp, r5
 800901a:	784a      	ldrb	r2, [r1, #1]
 800901c:	1c4b      	adds	r3, r1, #1
 800901e:	9303      	str	r3, [sp, #12]
 8009020:	b342      	cbz	r2, 8009074 <__hexnan+0x88>
 8009022:	4610      	mov	r0, r2
 8009024:	9105      	str	r1, [sp, #20]
 8009026:	9204      	str	r2, [sp, #16]
 8009028:	f7ff fd5f 	bl	8008aea <__hexdig_fun>
 800902c:	2800      	cmp	r0, #0
 800902e:	d14f      	bne.n	80090d0 <__hexnan+0xe4>
 8009030:	9a04      	ldr	r2, [sp, #16]
 8009032:	9905      	ldr	r1, [sp, #20]
 8009034:	2a20      	cmp	r2, #32
 8009036:	d818      	bhi.n	800906a <__hexnan+0x7e>
 8009038:	9b02      	ldr	r3, [sp, #8]
 800903a:	459b      	cmp	fp, r3
 800903c:	dd13      	ble.n	8009066 <__hexnan+0x7a>
 800903e:	454c      	cmp	r4, r9
 8009040:	d206      	bcs.n	8009050 <__hexnan+0x64>
 8009042:	2d07      	cmp	r5, #7
 8009044:	dc04      	bgt.n	8009050 <__hexnan+0x64>
 8009046:	462a      	mov	r2, r5
 8009048:	4649      	mov	r1, r9
 800904a:	4620      	mov	r0, r4
 800904c:	f7ff ffa8 	bl	8008fa0 <L_shift>
 8009050:	4544      	cmp	r4, r8
 8009052:	d950      	bls.n	80090f6 <__hexnan+0x10a>
 8009054:	2300      	movs	r3, #0
 8009056:	f1a4 0904 	sub.w	r9, r4, #4
 800905a:	f844 3c04 	str.w	r3, [r4, #-4]
 800905e:	f8cd b008 	str.w	fp, [sp, #8]
 8009062:	464c      	mov	r4, r9
 8009064:	461d      	mov	r5, r3
 8009066:	9903      	ldr	r1, [sp, #12]
 8009068:	e7d7      	b.n	800901a <__hexnan+0x2e>
 800906a:	2a29      	cmp	r2, #41	; 0x29
 800906c:	d156      	bne.n	800911c <__hexnan+0x130>
 800906e:	3102      	adds	r1, #2
 8009070:	f8ca 1000 	str.w	r1, [sl]
 8009074:	f1bb 0f00 	cmp.w	fp, #0
 8009078:	d050      	beq.n	800911c <__hexnan+0x130>
 800907a:	454c      	cmp	r4, r9
 800907c:	d206      	bcs.n	800908c <__hexnan+0xa0>
 800907e:	2d07      	cmp	r5, #7
 8009080:	dc04      	bgt.n	800908c <__hexnan+0xa0>
 8009082:	462a      	mov	r2, r5
 8009084:	4649      	mov	r1, r9
 8009086:	4620      	mov	r0, r4
 8009088:	f7ff ff8a 	bl	8008fa0 <L_shift>
 800908c:	4544      	cmp	r4, r8
 800908e:	d934      	bls.n	80090fa <__hexnan+0x10e>
 8009090:	f1a8 0204 	sub.w	r2, r8, #4
 8009094:	4623      	mov	r3, r4
 8009096:	f853 1b04 	ldr.w	r1, [r3], #4
 800909a:	f842 1f04 	str.w	r1, [r2, #4]!
 800909e:	429f      	cmp	r7, r3
 80090a0:	d2f9      	bcs.n	8009096 <__hexnan+0xaa>
 80090a2:	1b3b      	subs	r3, r7, r4
 80090a4:	f023 0303 	bic.w	r3, r3, #3
 80090a8:	3304      	adds	r3, #4
 80090aa:	3401      	adds	r4, #1
 80090ac:	3e03      	subs	r6, #3
 80090ae:	42b4      	cmp	r4, r6
 80090b0:	bf88      	it	hi
 80090b2:	2304      	movhi	r3, #4
 80090b4:	4443      	add	r3, r8
 80090b6:	2200      	movs	r2, #0
 80090b8:	f843 2b04 	str.w	r2, [r3], #4
 80090bc:	429f      	cmp	r7, r3
 80090be:	d2fb      	bcs.n	80090b8 <__hexnan+0xcc>
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	b91b      	cbnz	r3, 80090cc <__hexnan+0xe0>
 80090c4:	4547      	cmp	r7, r8
 80090c6:	d127      	bne.n	8009118 <__hexnan+0x12c>
 80090c8:	2301      	movs	r3, #1
 80090ca:	603b      	str	r3, [r7, #0]
 80090cc:	2005      	movs	r0, #5
 80090ce:	e026      	b.n	800911e <__hexnan+0x132>
 80090d0:	3501      	adds	r5, #1
 80090d2:	2d08      	cmp	r5, #8
 80090d4:	f10b 0b01 	add.w	fp, fp, #1
 80090d8:	dd06      	ble.n	80090e8 <__hexnan+0xfc>
 80090da:	4544      	cmp	r4, r8
 80090dc:	d9c3      	bls.n	8009066 <__hexnan+0x7a>
 80090de:	2300      	movs	r3, #0
 80090e0:	f844 3c04 	str.w	r3, [r4, #-4]
 80090e4:	2501      	movs	r5, #1
 80090e6:	3c04      	subs	r4, #4
 80090e8:	6822      	ldr	r2, [r4, #0]
 80090ea:	f000 000f 	and.w	r0, r0, #15
 80090ee:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80090f2:	6022      	str	r2, [r4, #0]
 80090f4:	e7b7      	b.n	8009066 <__hexnan+0x7a>
 80090f6:	2508      	movs	r5, #8
 80090f8:	e7b5      	b.n	8009066 <__hexnan+0x7a>
 80090fa:	9b01      	ldr	r3, [sp, #4]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d0df      	beq.n	80090c0 <__hexnan+0xd4>
 8009100:	f04f 32ff 	mov.w	r2, #4294967295
 8009104:	f1c3 0320 	rsb	r3, r3, #32
 8009108:	fa22 f303 	lsr.w	r3, r2, r3
 800910c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009110:	401a      	ands	r2, r3
 8009112:	f846 2c04 	str.w	r2, [r6, #-4]
 8009116:	e7d3      	b.n	80090c0 <__hexnan+0xd4>
 8009118:	3f04      	subs	r7, #4
 800911a:	e7d1      	b.n	80090c0 <__hexnan+0xd4>
 800911c:	2004      	movs	r0, #4
 800911e:	b007      	add	sp, #28
 8009120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009124 <_localeconv_r>:
 8009124:	4800      	ldr	r0, [pc, #0]	; (8009128 <_localeconv_r+0x4>)
 8009126:	4770      	bx	lr
 8009128:	20000180 	.word	0x20000180

0800912c <__retarget_lock_init_recursive>:
 800912c:	4770      	bx	lr

0800912e <__retarget_lock_acquire_recursive>:
 800912e:	4770      	bx	lr

08009130 <__retarget_lock_release_recursive>:
 8009130:	4770      	bx	lr

08009132 <__swhatbuf_r>:
 8009132:	b570      	push	{r4, r5, r6, lr}
 8009134:	460e      	mov	r6, r1
 8009136:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800913a:	2900      	cmp	r1, #0
 800913c:	b096      	sub	sp, #88	; 0x58
 800913e:	4614      	mov	r4, r2
 8009140:	461d      	mov	r5, r3
 8009142:	da07      	bge.n	8009154 <__swhatbuf_r+0x22>
 8009144:	2300      	movs	r3, #0
 8009146:	602b      	str	r3, [r5, #0]
 8009148:	89b3      	ldrh	r3, [r6, #12]
 800914a:	061a      	lsls	r2, r3, #24
 800914c:	d410      	bmi.n	8009170 <__swhatbuf_r+0x3e>
 800914e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009152:	e00e      	b.n	8009172 <__swhatbuf_r+0x40>
 8009154:	466a      	mov	r2, sp
 8009156:	f001 f813 	bl	800a180 <_fstat_r>
 800915a:	2800      	cmp	r0, #0
 800915c:	dbf2      	blt.n	8009144 <__swhatbuf_r+0x12>
 800915e:	9a01      	ldr	r2, [sp, #4]
 8009160:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009164:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009168:	425a      	negs	r2, r3
 800916a:	415a      	adcs	r2, r3
 800916c:	602a      	str	r2, [r5, #0]
 800916e:	e7ee      	b.n	800914e <__swhatbuf_r+0x1c>
 8009170:	2340      	movs	r3, #64	; 0x40
 8009172:	2000      	movs	r0, #0
 8009174:	6023      	str	r3, [r4, #0]
 8009176:	b016      	add	sp, #88	; 0x58
 8009178:	bd70      	pop	{r4, r5, r6, pc}
	...

0800917c <__smakebuf_r>:
 800917c:	898b      	ldrh	r3, [r1, #12]
 800917e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009180:	079d      	lsls	r5, r3, #30
 8009182:	4606      	mov	r6, r0
 8009184:	460c      	mov	r4, r1
 8009186:	d507      	bpl.n	8009198 <__smakebuf_r+0x1c>
 8009188:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800918c:	6023      	str	r3, [r4, #0]
 800918e:	6123      	str	r3, [r4, #16]
 8009190:	2301      	movs	r3, #1
 8009192:	6163      	str	r3, [r4, #20]
 8009194:	b002      	add	sp, #8
 8009196:	bd70      	pop	{r4, r5, r6, pc}
 8009198:	ab01      	add	r3, sp, #4
 800919a:	466a      	mov	r2, sp
 800919c:	f7ff ffc9 	bl	8009132 <__swhatbuf_r>
 80091a0:	9900      	ldr	r1, [sp, #0]
 80091a2:	4605      	mov	r5, r0
 80091a4:	4630      	mov	r0, r6
 80091a6:	f000 fd6b 	bl	8009c80 <_malloc_r>
 80091aa:	b948      	cbnz	r0, 80091c0 <__smakebuf_r+0x44>
 80091ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091b0:	059a      	lsls	r2, r3, #22
 80091b2:	d4ef      	bmi.n	8009194 <__smakebuf_r+0x18>
 80091b4:	f023 0303 	bic.w	r3, r3, #3
 80091b8:	f043 0302 	orr.w	r3, r3, #2
 80091bc:	81a3      	strh	r3, [r4, #12]
 80091be:	e7e3      	b.n	8009188 <__smakebuf_r+0xc>
 80091c0:	4b0d      	ldr	r3, [pc, #52]	; (80091f8 <__smakebuf_r+0x7c>)
 80091c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80091c4:	89a3      	ldrh	r3, [r4, #12]
 80091c6:	6020      	str	r0, [r4, #0]
 80091c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091cc:	81a3      	strh	r3, [r4, #12]
 80091ce:	9b00      	ldr	r3, [sp, #0]
 80091d0:	6163      	str	r3, [r4, #20]
 80091d2:	9b01      	ldr	r3, [sp, #4]
 80091d4:	6120      	str	r0, [r4, #16]
 80091d6:	b15b      	cbz	r3, 80091f0 <__smakebuf_r+0x74>
 80091d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091dc:	4630      	mov	r0, r6
 80091de:	f000 ffe1 	bl	800a1a4 <_isatty_r>
 80091e2:	b128      	cbz	r0, 80091f0 <__smakebuf_r+0x74>
 80091e4:	89a3      	ldrh	r3, [r4, #12]
 80091e6:	f023 0303 	bic.w	r3, r3, #3
 80091ea:	f043 0301 	orr.w	r3, r3, #1
 80091ee:	81a3      	strh	r3, [r4, #12]
 80091f0:	89a0      	ldrh	r0, [r4, #12]
 80091f2:	4305      	orrs	r5, r0
 80091f4:	81a5      	strh	r5, [r4, #12]
 80091f6:	e7cd      	b.n	8009194 <__smakebuf_r+0x18>
 80091f8:	080088a5 	.word	0x080088a5

080091fc <malloc>:
 80091fc:	4b02      	ldr	r3, [pc, #8]	; (8009208 <malloc+0xc>)
 80091fe:	4601      	mov	r1, r0
 8009200:	6818      	ldr	r0, [r3, #0]
 8009202:	f000 bd3d 	b.w	8009c80 <_malloc_r>
 8009206:	bf00      	nop
 8009208:	20000028 	.word	0x20000028

0800920c <__ascii_mbtowc>:
 800920c:	b082      	sub	sp, #8
 800920e:	b901      	cbnz	r1, 8009212 <__ascii_mbtowc+0x6>
 8009210:	a901      	add	r1, sp, #4
 8009212:	b142      	cbz	r2, 8009226 <__ascii_mbtowc+0x1a>
 8009214:	b14b      	cbz	r3, 800922a <__ascii_mbtowc+0x1e>
 8009216:	7813      	ldrb	r3, [r2, #0]
 8009218:	600b      	str	r3, [r1, #0]
 800921a:	7812      	ldrb	r2, [r2, #0]
 800921c:	1e10      	subs	r0, r2, #0
 800921e:	bf18      	it	ne
 8009220:	2001      	movne	r0, #1
 8009222:	b002      	add	sp, #8
 8009224:	4770      	bx	lr
 8009226:	4610      	mov	r0, r2
 8009228:	e7fb      	b.n	8009222 <__ascii_mbtowc+0x16>
 800922a:	f06f 0001 	mvn.w	r0, #1
 800922e:	e7f8      	b.n	8009222 <__ascii_mbtowc+0x16>

08009230 <memcpy>:
 8009230:	440a      	add	r2, r1
 8009232:	4291      	cmp	r1, r2
 8009234:	f100 33ff 	add.w	r3, r0, #4294967295
 8009238:	d100      	bne.n	800923c <memcpy+0xc>
 800923a:	4770      	bx	lr
 800923c:	b510      	push	{r4, lr}
 800923e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009242:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009246:	4291      	cmp	r1, r2
 8009248:	d1f9      	bne.n	800923e <memcpy+0xe>
 800924a:	bd10      	pop	{r4, pc}

0800924c <_Balloc>:
 800924c:	b570      	push	{r4, r5, r6, lr}
 800924e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009250:	4604      	mov	r4, r0
 8009252:	460d      	mov	r5, r1
 8009254:	b976      	cbnz	r6, 8009274 <_Balloc+0x28>
 8009256:	2010      	movs	r0, #16
 8009258:	f7ff ffd0 	bl	80091fc <malloc>
 800925c:	4602      	mov	r2, r0
 800925e:	6260      	str	r0, [r4, #36]	; 0x24
 8009260:	b920      	cbnz	r0, 800926c <_Balloc+0x20>
 8009262:	4b18      	ldr	r3, [pc, #96]	; (80092c4 <_Balloc+0x78>)
 8009264:	4818      	ldr	r0, [pc, #96]	; (80092c8 <_Balloc+0x7c>)
 8009266:	2166      	movs	r1, #102	; 0x66
 8009268:	f000 ff4a 	bl	800a100 <__assert_func>
 800926c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009270:	6006      	str	r6, [r0, #0]
 8009272:	60c6      	str	r6, [r0, #12]
 8009274:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009276:	68f3      	ldr	r3, [r6, #12]
 8009278:	b183      	cbz	r3, 800929c <_Balloc+0x50>
 800927a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800927c:	68db      	ldr	r3, [r3, #12]
 800927e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009282:	b9b8      	cbnz	r0, 80092b4 <_Balloc+0x68>
 8009284:	2101      	movs	r1, #1
 8009286:	fa01 f605 	lsl.w	r6, r1, r5
 800928a:	1d72      	adds	r2, r6, #5
 800928c:	0092      	lsls	r2, r2, #2
 800928e:	4620      	mov	r0, r4
 8009290:	f000 fc97 	bl	8009bc2 <_calloc_r>
 8009294:	b160      	cbz	r0, 80092b0 <_Balloc+0x64>
 8009296:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800929a:	e00e      	b.n	80092ba <_Balloc+0x6e>
 800929c:	2221      	movs	r2, #33	; 0x21
 800929e:	2104      	movs	r1, #4
 80092a0:	4620      	mov	r0, r4
 80092a2:	f000 fc8e 	bl	8009bc2 <_calloc_r>
 80092a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092a8:	60f0      	str	r0, [r6, #12]
 80092aa:	68db      	ldr	r3, [r3, #12]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d1e4      	bne.n	800927a <_Balloc+0x2e>
 80092b0:	2000      	movs	r0, #0
 80092b2:	bd70      	pop	{r4, r5, r6, pc}
 80092b4:	6802      	ldr	r2, [r0, #0]
 80092b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80092ba:	2300      	movs	r3, #0
 80092bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80092c0:	e7f7      	b.n	80092b2 <_Balloc+0x66>
 80092c2:	bf00      	nop
 80092c4:	0800a45d 	.word	0x0800a45d
 80092c8:	0800a5c4 	.word	0x0800a5c4

080092cc <_Bfree>:
 80092cc:	b570      	push	{r4, r5, r6, lr}
 80092ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80092d0:	4605      	mov	r5, r0
 80092d2:	460c      	mov	r4, r1
 80092d4:	b976      	cbnz	r6, 80092f4 <_Bfree+0x28>
 80092d6:	2010      	movs	r0, #16
 80092d8:	f7ff ff90 	bl	80091fc <malloc>
 80092dc:	4602      	mov	r2, r0
 80092de:	6268      	str	r0, [r5, #36]	; 0x24
 80092e0:	b920      	cbnz	r0, 80092ec <_Bfree+0x20>
 80092e2:	4b09      	ldr	r3, [pc, #36]	; (8009308 <_Bfree+0x3c>)
 80092e4:	4809      	ldr	r0, [pc, #36]	; (800930c <_Bfree+0x40>)
 80092e6:	218a      	movs	r1, #138	; 0x8a
 80092e8:	f000 ff0a 	bl	800a100 <__assert_func>
 80092ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80092f0:	6006      	str	r6, [r0, #0]
 80092f2:	60c6      	str	r6, [r0, #12]
 80092f4:	b13c      	cbz	r4, 8009306 <_Bfree+0x3a>
 80092f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80092f8:	6862      	ldr	r2, [r4, #4]
 80092fa:	68db      	ldr	r3, [r3, #12]
 80092fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009300:	6021      	str	r1, [r4, #0]
 8009302:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009306:	bd70      	pop	{r4, r5, r6, pc}
 8009308:	0800a45d 	.word	0x0800a45d
 800930c:	0800a5c4 	.word	0x0800a5c4

08009310 <__multadd>:
 8009310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009314:	690e      	ldr	r6, [r1, #16]
 8009316:	4607      	mov	r7, r0
 8009318:	4698      	mov	r8, r3
 800931a:	460c      	mov	r4, r1
 800931c:	f101 0014 	add.w	r0, r1, #20
 8009320:	2300      	movs	r3, #0
 8009322:	6805      	ldr	r5, [r0, #0]
 8009324:	b2a9      	uxth	r1, r5
 8009326:	fb02 8101 	mla	r1, r2, r1, r8
 800932a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800932e:	0c2d      	lsrs	r5, r5, #16
 8009330:	fb02 c505 	mla	r5, r2, r5, ip
 8009334:	b289      	uxth	r1, r1
 8009336:	3301      	adds	r3, #1
 8009338:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800933c:	429e      	cmp	r6, r3
 800933e:	f840 1b04 	str.w	r1, [r0], #4
 8009342:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009346:	dcec      	bgt.n	8009322 <__multadd+0x12>
 8009348:	f1b8 0f00 	cmp.w	r8, #0
 800934c:	d022      	beq.n	8009394 <__multadd+0x84>
 800934e:	68a3      	ldr	r3, [r4, #8]
 8009350:	42b3      	cmp	r3, r6
 8009352:	dc19      	bgt.n	8009388 <__multadd+0x78>
 8009354:	6861      	ldr	r1, [r4, #4]
 8009356:	4638      	mov	r0, r7
 8009358:	3101      	adds	r1, #1
 800935a:	f7ff ff77 	bl	800924c <_Balloc>
 800935e:	4605      	mov	r5, r0
 8009360:	b928      	cbnz	r0, 800936e <__multadd+0x5e>
 8009362:	4602      	mov	r2, r0
 8009364:	4b0d      	ldr	r3, [pc, #52]	; (800939c <__multadd+0x8c>)
 8009366:	480e      	ldr	r0, [pc, #56]	; (80093a0 <__multadd+0x90>)
 8009368:	21b5      	movs	r1, #181	; 0xb5
 800936a:	f000 fec9 	bl	800a100 <__assert_func>
 800936e:	6922      	ldr	r2, [r4, #16]
 8009370:	3202      	adds	r2, #2
 8009372:	f104 010c 	add.w	r1, r4, #12
 8009376:	0092      	lsls	r2, r2, #2
 8009378:	300c      	adds	r0, #12
 800937a:	f7ff ff59 	bl	8009230 <memcpy>
 800937e:	4621      	mov	r1, r4
 8009380:	4638      	mov	r0, r7
 8009382:	f7ff ffa3 	bl	80092cc <_Bfree>
 8009386:	462c      	mov	r4, r5
 8009388:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800938c:	3601      	adds	r6, #1
 800938e:	f8c3 8014 	str.w	r8, [r3, #20]
 8009392:	6126      	str	r6, [r4, #16]
 8009394:	4620      	mov	r0, r4
 8009396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800939a:	bf00      	nop
 800939c:	0800a4d3 	.word	0x0800a4d3
 80093a0:	0800a5c4 	.word	0x0800a5c4

080093a4 <__s2b>:
 80093a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093a8:	460c      	mov	r4, r1
 80093aa:	4615      	mov	r5, r2
 80093ac:	461f      	mov	r7, r3
 80093ae:	2209      	movs	r2, #9
 80093b0:	3308      	adds	r3, #8
 80093b2:	4606      	mov	r6, r0
 80093b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80093b8:	2100      	movs	r1, #0
 80093ba:	2201      	movs	r2, #1
 80093bc:	429a      	cmp	r2, r3
 80093be:	db09      	blt.n	80093d4 <__s2b+0x30>
 80093c0:	4630      	mov	r0, r6
 80093c2:	f7ff ff43 	bl	800924c <_Balloc>
 80093c6:	b940      	cbnz	r0, 80093da <__s2b+0x36>
 80093c8:	4602      	mov	r2, r0
 80093ca:	4b19      	ldr	r3, [pc, #100]	; (8009430 <__s2b+0x8c>)
 80093cc:	4819      	ldr	r0, [pc, #100]	; (8009434 <__s2b+0x90>)
 80093ce:	21ce      	movs	r1, #206	; 0xce
 80093d0:	f000 fe96 	bl	800a100 <__assert_func>
 80093d4:	0052      	lsls	r2, r2, #1
 80093d6:	3101      	adds	r1, #1
 80093d8:	e7f0      	b.n	80093bc <__s2b+0x18>
 80093da:	9b08      	ldr	r3, [sp, #32]
 80093dc:	6143      	str	r3, [r0, #20]
 80093de:	2d09      	cmp	r5, #9
 80093e0:	f04f 0301 	mov.w	r3, #1
 80093e4:	6103      	str	r3, [r0, #16]
 80093e6:	dd16      	ble.n	8009416 <__s2b+0x72>
 80093e8:	f104 0909 	add.w	r9, r4, #9
 80093ec:	46c8      	mov	r8, r9
 80093ee:	442c      	add	r4, r5
 80093f0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80093f4:	4601      	mov	r1, r0
 80093f6:	3b30      	subs	r3, #48	; 0x30
 80093f8:	220a      	movs	r2, #10
 80093fa:	4630      	mov	r0, r6
 80093fc:	f7ff ff88 	bl	8009310 <__multadd>
 8009400:	45a0      	cmp	r8, r4
 8009402:	d1f5      	bne.n	80093f0 <__s2b+0x4c>
 8009404:	f1a5 0408 	sub.w	r4, r5, #8
 8009408:	444c      	add	r4, r9
 800940a:	1b2d      	subs	r5, r5, r4
 800940c:	1963      	adds	r3, r4, r5
 800940e:	42bb      	cmp	r3, r7
 8009410:	db04      	blt.n	800941c <__s2b+0x78>
 8009412:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009416:	340a      	adds	r4, #10
 8009418:	2509      	movs	r5, #9
 800941a:	e7f6      	b.n	800940a <__s2b+0x66>
 800941c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009420:	4601      	mov	r1, r0
 8009422:	3b30      	subs	r3, #48	; 0x30
 8009424:	220a      	movs	r2, #10
 8009426:	4630      	mov	r0, r6
 8009428:	f7ff ff72 	bl	8009310 <__multadd>
 800942c:	e7ee      	b.n	800940c <__s2b+0x68>
 800942e:	bf00      	nop
 8009430:	0800a4d3 	.word	0x0800a4d3
 8009434:	0800a5c4 	.word	0x0800a5c4

08009438 <__hi0bits>:
 8009438:	0c03      	lsrs	r3, r0, #16
 800943a:	041b      	lsls	r3, r3, #16
 800943c:	b9d3      	cbnz	r3, 8009474 <__hi0bits+0x3c>
 800943e:	0400      	lsls	r0, r0, #16
 8009440:	2310      	movs	r3, #16
 8009442:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009446:	bf04      	itt	eq
 8009448:	0200      	lsleq	r0, r0, #8
 800944a:	3308      	addeq	r3, #8
 800944c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009450:	bf04      	itt	eq
 8009452:	0100      	lsleq	r0, r0, #4
 8009454:	3304      	addeq	r3, #4
 8009456:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800945a:	bf04      	itt	eq
 800945c:	0080      	lsleq	r0, r0, #2
 800945e:	3302      	addeq	r3, #2
 8009460:	2800      	cmp	r0, #0
 8009462:	db05      	blt.n	8009470 <__hi0bits+0x38>
 8009464:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009468:	f103 0301 	add.w	r3, r3, #1
 800946c:	bf08      	it	eq
 800946e:	2320      	moveq	r3, #32
 8009470:	4618      	mov	r0, r3
 8009472:	4770      	bx	lr
 8009474:	2300      	movs	r3, #0
 8009476:	e7e4      	b.n	8009442 <__hi0bits+0xa>

08009478 <__lo0bits>:
 8009478:	6803      	ldr	r3, [r0, #0]
 800947a:	f013 0207 	ands.w	r2, r3, #7
 800947e:	4601      	mov	r1, r0
 8009480:	d00b      	beq.n	800949a <__lo0bits+0x22>
 8009482:	07da      	lsls	r2, r3, #31
 8009484:	d424      	bmi.n	80094d0 <__lo0bits+0x58>
 8009486:	0798      	lsls	r0, r3, #30
 8009488:	bf49      	itett	mi
 800948a:	085b      	lsrmi	r3, r3, #1
 800948c:	089b      	lsrpl	r3, r3, #2
 800948e:	2001      	movmi	r0, #1
 8009490:	600b      	strmi	r3, [r1, #0]
 8009492:	bf5c      	itt	pl
 8009494:	600b      	strpl	r3, [r1, #0]
 8009496:	2002      	movpl	r0, #2
 8009498:	4770      	bx	lr
 800949a:	b298      	uxth	r0, r3
 800949c:	b9b0      	cbnz	r0, 80094cc <__lo0bits+0x54>
 800949e:	0c1b      	lsrs	r3, r3, #16
 80094a0:	2010      	movs	r0, #16
 80094a2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80094a6:	bf04      	itt	eq
 80094a8:	0a1b      	lsreq	r3, r3, #8
 80094aa:	3008      	addeq	r0, #8
 80094ac:	071a      	lsls	r2, r3, #28
 80094ae:	bf04      	itt	eq
 80094b0:	091b      	lsreq	r3, r3, #4
 80094b2:	3004      	addeq	r0, #4
 80094b4:	079a      	lsls	r2, r3, #30
 80094b6:	bf04      	itt	eq
 80094b8:	089b      	lsreq	r3, r3, #2
 80094ba:	3002      	addeq	r0, #2
 80094bc:	07da      	lsls	r2, r3, #31
 80094be:	d403      	bmi.n	80094c8 <__lo0bits+0x50>
 80094c0:	085b      	lsrs	r3, r3, #1
 80094c2:	f100 0001 	add.w	r0, r0, #1
 80094c6:	d005      	beq.n	80094d4 <__lo0bits+0x5c>
 80094c8:	600b      	str	r3, [r1, #0]
 80094ca:	4770      	bx	lr
 80094cc:	4610      	mov	r0, r2
 80094ce:	e7e8      	b.n	80094a2 <__lo0bits+0x2a>
 80094d0:	2000      	movs	r0, #0
 80094d2:	4770      	bx	lr
 80094d4:	2020      	movs	r0, #32
 80094d6:	4770      	bx	lr

080094d8 <__i2b>:
 80094d8:	b510      	push	{r4, lr}
 80094da:	460c      	mov	r4, r1
 80094dc:	2101      	movs	r1, #1
 80094de:	f7ff feb5 	bl	800924c <_Balloc>
 80094e2:	4602      	mov	r2, r0
 80094e4:	b928      	cbnz	r0, 80094f2 <__i2b+0x1a>
 80094e6:	4b05      	ldr	r3, [pc, #20]	; (80094fc <__i2b+0x24>)
 80094e8:	4805      	ldr	r0, [pc, #20]	; (8009500 <__i2b+0x28>)
 80094ea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80094ee:	f000 fe07 	bl	800a100 <__assert_func>
 80094f2:	2301      	movs	r3, #1
 80094f4:	6144      	str	r4, [r0, #20]
 80094f6:	6103      	str	r3, [r0, #16]
 80094f8:	bd10      	pop	{r4, pc}
 80094fa:	bf00      	nop
 80094fc:	0800a4d3 	.word	0x0800a4d3
 8009500:	0800a5c4 	.word	0x0800a5c4

08009504 <__multiply>:
 8009504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009508:	4614      	mov	r4, r2
 800950a:	690a      	ldr	r2, [r1, #16]
 800950c:	6923      	ldr	r3, [r4, #16]
 800950e:	429a      	cmp	r2, r3
 8009510:	bfb8      	it	lt
 8009512:	460b      	movlt	r3, r1
 8009514:	460d      	mov	r5, r1
 8009516:	bfbc      	itt	lt
 8009518:	4625      	movlt	r5, r4
 800951a:	461c      	movlt	r4, r3
 800951c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009520:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009524:	68ab      	ldr	r3, [r5, #8]
 8009526:	6869      	ldr	r1, [r5, #4]
 8009528:	eb0a 0709 	add.w	r7, sl, r9
 800952c:	42bb      	cmp	r3, r7
 800952e:	b085      	sub	sp, #20
 8009530:	bfb8      	it	lt
 8009532:	3101      	addlt	r1, #1
 8009534:	f7ff fe8a 	bl	800924c <_Balloc>
 8009538:	b930      	cbnz	r0, 8009548 <__multiply+0x44>
 800953a:	4602      	mov	r2, r0
 800953c:	4b42      	ldr	r3, [pc, #264]	; (8009648 <__multiply+0x144>)
 800953e:	4843      	ldr	r0, [pc, #268]	; (800964c <__multiply+0x148>)
 8009540:	f240 115d 	movw	r1, #349	; 0x15d
 8009544:	f000 fddc 	bl	800a100 <__assert_func>
 8009548:	f100 0614 	add.w	r6, r0, #20
 800954c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009550:	4633      	mov	r3, r6
 8009552:	2200      	movs	r2, #0
 8009554:	4543      	cmp	r3, r8
 8009556:	d31e      	bcc.n	8009596 <__multiply+0x92>
 8009558:	f105 0c14 	add.w	ip, r5, #20
 800955c:	f104 0314 	add.w	r3, r4, #20
 8009560:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009564:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009568:	9202      	str	r2, [sp, #8]
 800956a:	ebac 0205 	sub.w	r2, ip, r5
 800956e:	3a15      	subs	r2, #21
 8009570:	f022 0203 	bic.w	r2, r2, #3
 8009574:	3204      	adds	r2, #4
 8009576:	f105 0115 	add.w	r1, r5, #21
 800957a:	458c      	cmp	ip, r1
 800957c:	bf38      	it	cc
 800957e:	2204      	movcc	r2, #4
 8009580:	9201      	str	r2, [sp, #4]
 8009582:	9a02      	ldr	r2, [sp, #8]
 8009584:	9303      	str	r3, [sp, #12]
 8009586:	429a      	cmp	r2, r3
 8009588:	d808      	bhi.n	800959c <__multiply+0x98>
 800958a:	2f00      	cmp	r7, #0
 800958c:	dc55      	bgt.n	800963a <__multiply+0x136>
 800958e:	6107      	str	r7, [r0, #16]
 8009590:	b005      	add	sp, #20
 8009592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009596:	f843 2b04 	str.w	r2, [r3], #4
 800959a:	e7db      	b.n	8009554 <__multiply+0x50>
 800959c:	f8b3 a000 	ldrh.w	sl, [r3]
 80095a0:	f1ba 0f00 	cmp.w	sl, #0
 80095a4:	d020      	beq.n	80095e8 <__multiply+0xe4>
 80095a6:	f105 0e14 	add.w	lr, r5, #20
 80095aa:	46b1      	mov	r9, r6
 80095ac:	2200      	movs	r2, #0
 80095ae:	f85e 4b04 	ldr.w	r4, [lr], #4
 80095b2:	f8d9 b000 	ldr.w	fp, [r9]
 80095b6:	b2a1      	uxth	r1, r4
 80095b8:	fa1f fb8b 	uxth.w	fp, fp
 80095bc:	fb0a b101 	mla	r1, sl, r1, fp
 80095c0:	4411      	add	r1, r2
 80095c2:	f8d9 2000 	ldr.w	r2, [r9]
 80095c6:	0c24      	lsrs	r4, r4, #16
 80095c8:	0c12      	lsrs	r2, r2, #16
 80095ca:	fb0a 2404 	mla	r4, sl, r4, r2
 80095ce:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80095d2:	b289      	uxth	r1, r1
 80095d4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80095d8:	45f4      	cmp	ip, lr
 80095da:	f849 1b04 	str.w	r1, [r9], #4
 80095de:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80095e2:	d8e4      	bhi.n	80095ae <__multiply+0xaa>
 80095e4:	9901      	ldr	r1, [sp, #4]
 80095e6:	5072      	str	r2, [r6, r1]
 80095e8:	9a03      	ldr	r2, [sp, #12]
 80095ea:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80095ee:	3304      	adds	r3, #4
 80095f0:	f1b9 0f00 	cmp.w	r9, #0
 80095f4:	d01f      	beq.n	8009636 <__multiply+0x132>
 80095f6:	6834      	ldr	r4, [r6, #0]
 80095f8:	f105 0114 	add.w	r1, r5, #20
 80095fc:	46b6      	mov	lr, r6
 80095fe:	f04f 0a00 	mov.w	sl, #0
 8009602:	880a      	ldrh	r2, [r1, #0]
 8009604:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009608:	fb09 b202 	mla	r2, r9, r2, fp
 800960c:	4492      	add	sl, r2
 800960e:	b2a4      	uxth	r4, r4
 8009610:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009614:	f84e 4b04 	str.w	r4, [lr], #4
 8009618:	f851 4b04 	ldr.w	r4, [r1], #4
 800961c:	f8be 2000 	ldrh.w	r2, [lr]
 8009620:	0c24      	lsrs	r4, r4, #16
 8009622:	fb09 2404 	mla	r4, r9, r4, r2
 8009626:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800962a:	458c      	cmp	ip, r1
 800962c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009630:	d8e7      	bhi.n	8009602 <__multiply+0xfe>
 8009632:	9a01      	ldr	r2, [sp, #4]
 8009634:	50b4      	str	r4, [r6, r2]
 8009636:	3604      	adds	r6, #4
 8009638:	e7a3      	b.n	8009582 <__multiply+0x7e>
 800963a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800963e:	2b00      	cmp	r3, #0
 8009640:	d1a5      	bne.n	800958e <__multiply+0x8a>
 8009642:	3f01      	subs	r7, #1
 8009644:	e7a1      	b.n	800958a <__multiply+0x86>
 8009646:	bf00      	nop
 8009648:	0800a4d3 	.word	0x0800a4d3
 800964c:	0800a5c4 	.word	0x0800a5c4

08009650 <__pow5mult>:
 8009650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009654:	4615      	mov	r5, r2
 8009656:	f012 0203 	ands.w	r2, r2, #3
 800965a:	4606      	mov	r6, r0
 800965c:	460f      	mov	r7, r1
 800965e:	d007      	beq.n	8009670 <__pow5mult+0x20>
 8009660:	4c25      	ldr	r4, [pc, #148]	; (80096f8 <__pow5mult+0xa8>)
 8009662:	3a01      	subs	r2, #1
 8009664:	2300      	movs	r3, #0
 8009666:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800966a:	f7ff fe51 	bl	8009310 <__multadd>
 800966e:	4607      	mov	r7, r0
 8009670:	10ad      	asrs	r5, r5, #2
 8009672:	d03d      	beq.n	80096f0 <__pow5mult+0xa0>
 8009674:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009676:	b97c      	cbnz	r4, 8009698 <__pow5mult+0x48>
 8009678:	2010      	movs	r0, #16
 800967a:	f7ff fdbf 	bl	80091fc <malloc>
 800967e:	4602      	mov	r2, r0
 8009680:	6270      	str	r0, [r6, #36]	; 0x24
 8009682:	b928      	cbnz	r0, 8009690 <__pow5mult+0x40>
 8009684:	4b1d      	ldr	r3, [pc, #116]	; (80096fc <__pow5mult+0xac>)
 8009686:	481e      	ldr	r0, [pc, #120]	; (8009700 <__pow5mult+0xb0>)
 8009688:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800968c:	f000 fd38 	bl	800a100 <__assert_func>
 8009690:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009694:	6004      	str	r4, [r0, #0]
 8009696:	60c4      	str	r4, [r0, #12]
 8009698:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800969c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80096a0:	b94c      	cbnz	r4, 80096b6 <__pow5mult+0x66>
 80096a2:	f240 2171 	movw	r1, #625	; 0x271
 80096a6:	4630      	mov	r0, r6
 80096a8:	f7ff ff16 	bl	80094d8 <__i2b>
 80096ac:	2300      	movs	r3, #0
 80096ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80096b2:	4604      	mov	r4, r0
 80096b4:	6003      	str	r3, [r0, #0]
 80096b6:	f04f 0900 	mov.w	r9, #0
 80096ba:	07eb      	lsls	r3, r5, #31
 80096bc:	d50a      	bpl.n	80096d4 <__pow5mult+0x84>
 80096be:	4639      	mov	r1, r7
 80096c0:	4622      	mov	r2, r4
 80096c2:	4630      	mov	r0, r6
 80096c4:	f7ff ff1e 	bl	8009504 <__multiply>
 80096c8:	4639      	mov	r1, r7
 80096ca:	4680      	mov	r8, r0
 80096cc:	4630      	mov	r0, r6
 80096ce:	f7ff fdfd 	bl	80092cc <_Bfree>
 80096d2:	4647      	mov	r7, r8
 80096d4:	106d      	asrs	r5, r5, #1
 80096d6:	d00b      	beq.n	80096f0 <__pow5mult+0xa0>
 80096d8:	6820      	ldr	r0, [r4, #0]
 80096da:	b938      	cbnz	r0, 80096ec <__pow5mult+0x9c>
 80096dc:	4622      	mov	r2, r4
 80096de:	4621      	mov	r1, r4
 80096e0:	4630      	mov	r0, r6
 80096e2:	f7ff ff0f 	bl	8009504 <__multiply>
 80096e6:	6020      	str	r0, [r4, #0]
 80096e8:	f8c0 9000 	str.w	r9, [r0]
 80096ec:	4604      	mov	r4, r0
 80096ee:	e7e4      	b.n	80096ba <__pow5mult+0x6a>
 80096f0:	4638      	mov	r0, r7
 80096f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096f6:	bf00      	nop
 80096f8:	0800a718 	.word	0x0800a718
 80096fc:	0800a45d 	.word	0x0800a45d
 8009700:	0800a5c4 	.word	0x0800a5c4

08009704 <__lshift>:
 8009704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009708:	460c      	mov	r4, r1
 800970a:	6849      	ldr	r1, [r1, #4]
 800970c:	6923      	ldr	r3, [r4, #16]
 800970e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009712:	68a3      	ldr	r3, [r4, #8]
 8009714:	4607      	mov	r7, r0
 8009716:	4691      	mov	r9, r2
 8009718:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800971c:	f108 0601 	add.w	r6, r8, #1
 8009720:	42b3      	cmp	r3, r6
 8009722:	db0b      	blt.n	800973c <__lshift+0x38>
 8009724:	4638      	mov	r0, r7
 8009726:	f7ff fd91 	bl	800924c <_Balloc>
 800972a:	4605      	mov	r5, r0
 800972c:	b948      	cbnz	r0, 8009742 <__lshift+0x3e>
 800972e:	4602      	mov	r2, r0
 8009730:	4b28      	ldr	r3, [pc, #160]	; (80097d4 <__lshift+0xd0>)
 8009732:	4829      	ldr	r0, [pc, #164]	; (80097d8 <__lshift+0xd4>)
 8009734:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009738:	f000 fce2 	bl	800a100 <__assert_func>
 800973c:	3101      	adds	r1, #1
 800973e:	005b      	lsls	r3, r3, #1
 8009740:	e7ee      	b.n	8009720 <__lshift+0x1c>
 8009742:	2300      	movs	r3, #0
 8009744:	f100 0114 	add.w	r1, r0, #20
 8009748:	f100 0210 	add.w	r2, r0, #16
 800974c:	4618      	mov	r0, r3
 800974e:	4553      	cmp	r3, sl
 8009750:	db33      	blt.n	80097ba <__lshift+0xb6>
 8009752:	6920      	ldr	r0, [r4, #16]
 8009754:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009758:	f104 0314 	add.w	r3, r4, #20
 800975c:	f019 091f 	ands.w	r9, r9, #31
 8009760:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009764:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009768:	d02b      	beq.n	80097c2 <__lshift+0xbe>
 800976a:	f1c9 0e20 	rsb	lr, r9, #32
 800976e:	468a      	mov	sl, r1
 8009770:	2200      	movs	r2, #0
 8009772:	6818      	ldr	r0, [r3, #0]
 8009774:	fa00 f009 	lsl.w	r0, r0, r9
 8009778:	4302      	orrs	r2, r0
 800977a:	f84a 2b04 	str.w	r2, [sl], #4
 800977e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009782:	459c      	cmp	ip, r3
 8009784:	fa22 f20e 	lsr.w	r2, r2, lr
 8009788:	d8f3      	bhi.n	8009772 <__lshift+0x6e>
 800978a:	ebac 0304 	sub.w	r3, ip, r4
 800978e:	3b15      	subs	r3, #21
 8009790:	f023 0303 	bic.w	r3, r3, #3
 8009794:	3304      	adds	r3, #4
 8009796:	f104 0015 	add.w	r0, r4, #21
 800979a:	4584      	cmp	ip, r0
 800979c:	bf38      	it	cc
 800979e:	2304      	movcc	r3, #4
 80097a0:	50ca      	str	r2, [r1, r3]
 80097a2:	b10a      	cbz	r2, 80097a8 <__lshift+0xa4>
 80097a4:	f108 0602 	add.w	r6, r8, #2
 80097a8:	3e01      	subs	r6, #1
 80097aa:	4638      	mov	r0, r7
 80097ac:	612e      	str	r6, [r5, #16]
 80097ae:	4621      	mov	r1, r4
 80097b0:	f7ff fd8c 	bl	80092cc <_Bfree>
 80097b4:	4628      	mov	r0, r5
 80097b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097ba:	f842 0f04 	str.w	r0, [r2, #4]!
 80097be:	3301      	adds	r3, #1
 80097c0:	e7c5      	b.n	800974e <__lshift+0x4a>
 80097c2:	3904      	subs	r1, #4
 80097c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80097c8:	f841 2f04 	str.w	r2, [r1, #4]!
 80097cc:	459c      	cmp	ip, r3
 80097ce:	d8f9      	bhi.n	80097c4 <__lshift+0xc0>
 80097d0:	e7ea      	b.n	80097a8 <__lshift+0xa4>
 80097d2:	bf00      	nop
 80097d4:	0800a4d3 	.word	0x0800a4d3
 80097d8:	0800a5c4 	.word	0x0800a5c4

080097dc <__mcmp>:
 80097dc:	b530      	push	{r4, r5, lr}
 80097de:	6902      	ldr	r2, [r0, #16]
 80097e0:	690c      	ldr	r4, [r1, #16]
 80097e2:	1b12      	subs	r2, r2, r4
 80097e4:	d10e      	bne.n	8009804 <__mcmp+0x28>
 80097e6:	f100 0314 	add.w	r3, r0, #20
 80097ea:	3114      	adds	r1, #20
 80097ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80097f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80097f4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80097f8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80097fc:	42a5      	cmp	r5, r4
 80097fe:	d003      	beq.n	8009808 <__mcmp+0x2c>
 8009800:	d305      	bcc.n	800980e <__mcmp+0x32>
 8009802:	2201      	movs	r2, #1
 8009804:	4610      	mov	r0, r2
 8009806:	bd30      	pop	{r4, r5, pc}
 8009808:	4283      	cmp	r3, r0
 800980a:	d3f3      	bcc.n	80097f4 <__mcmp+0x18>
 800980c:	e7fa      	b.n	8009804 <__mcmp+0x28>
 800980e:	f04f 32ff 	mov.w	r2, #4294967295
 8009812:	e7f7      	b.n	8009804 <__mcmp+0x28>

08009814 <__mdiff>:
 8009814:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009818:	460c      	mov	r4, r1
 800981a:	4606      	mov	r6, r0
 800981c:	4611      	mov	r1, r2
 800981e:	4620      	mov	r0, r4
 8009820:	4617      	mov	r7, r2
 8009822:	f7ff ffdb 	bl	80097dc <__mcmp>
 8009826:	1e05      	subs	r5, r0, #0
 8009828:	d110      	bne.n	800984c <__mdiff+0x38>
 800982a:	4629      	mov	r1, r5
 800982c:	4630      	mov	r0, r6
 800982e:	f7ff fd0d 	bl	800924c <_Balloc>
 8009832:	b930      	cbnz	r0, 8009842 <__mdiff+0x2e>
 8009834:	4b39      	ldr	r3, [pc, #228]	; (800991c <__mdiff+0x108>)
 8009836:	4602      	mov	r2, r0
 8009838:	f240 2132 	movw	r1, #562	; 0x232
 800983c:	4838      	ldr	r0, [pc, #224]	; (8009920 <__mdiff+0x10c>)
 800983e:	f000 fc5f 	bl	800a100 <__assert_func>
 8009842:	2301      	movs	r3, #1
 8009844:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009848:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800984c:	bfa4      	itt	ge
 800984e:	463b      	movge	r3, r7
 8009850:	4627      	movge	r7, r4
 8009852:	4630      	mov	r0, r6
 8009854:	6879      	ldr	r1, [r7, #4]
 8009856:	bfa6      	itte	ge
 8009858:	461c      	movge	r4, r3
 800985a:	2500      	movge	r5, #0
 800985c:	2501      	movlt	r5, #1
 800985e:	f7ff fcf5 	bl	800924c <_Balloc>
 8009862:	b920      	cbnz	r0, 800986e <__mdiff+0x5a>
 8009864:	4b2d      	ldr	r3, [pc, #180]	; (800991c <__mdiff+0x108>)
 8009866:	4602      	mov	r2, r0
 8009868:	f44f 7110 	mov.w	r1, #576	; 0x240
 800986c:	e7e6      	b.n	800983c <__mdiff+0x28>
 800986e:	693e      	ldr	r6, [r7, #16]
 8009870:	60c5      	str	r5, [r0, #12]
 8009872:	6925      	ldr	r5, [r4, #16]
 8009874:	f107 0114 	add.w	r1, r7, #20
 8009878:	f104 0914 	add.w	r9, r4, #20
 800987c:	f100 0e14 	add.w	lr, r0, #20
 8009880:	f107 0210 	add.w	r2, r7, #16
 8009884:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009888:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800988c:	46f2      	mov	sl, lr
 800988e:	2700      	movs	r7, #0
 8009890:	f859 3b04 	ldr.w	r3, [r9], #4
 8009894:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009898:	fa1f f883 	uxth.w	r8, r3
 800989c:	fa17 f78b 	uxtah	r7, r7, fp
 80098a0:	0c1b      	lsrs	r3, r3, #16
 80098a2:	eba7 0808 	sub.w	r8, r7, r8
 80098a6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80098aa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80098ae:	fa1f f888 	uxth.w	r8, r8
 80098b2:	141f      	asrs	r7, r3, #16
 80098b4:	454d      	cmp	r5, r9
 80098b6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80098ba:	f84a 3b04 	str.w	r3, [sl], #4
 80098be:	d8e7      	bhi.n	8009890 <__mdiff+0x7c>
 80098c0:	1b2b      	subs	r3, r5, r4
 80098c2:	3b15      	subs	r3, #21
 80098c4:	f023 0303 	bic.w	r3, r3, #3
 80098c8:	3304      	adds	r3, #4
 80098ca:	3415      	adds	r4, #21
 80098cc:	42a5      	cmp	r5, r4
 80098ce:	bf38      	it	cc
 80098d0:	2304      	movcc	r3, #4
 80098d2:	4419      	add	r1, r3
 80098d4:	4473      	add	r3, lr
 80098d6:	469e      	mov	lr, r3
 80098d8:	460d      	mov	r5, r1
 80098da:	4565      	cmp	r5, ip
 80098dc:	d30e      	bcc.n	80098fc <__mdiff+0xe8>
 80098de:	f10c 0203 	add.w	r2, ip, #3
 80098e2:	1a52      	subs	r2, r2, r1
 80098e4:	f022 0203 	bic.w	r2, r2, #3
 80098e8:	3903      	subs	r1, #3
 80098ea:	458c      	cmp	ip, r1
 80098ec:	bf38      	it	cc
 80098ee:	2200      	movcc	r2, #0
 80098f0:	441a      	add	r2, r3
 80098f2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80098f6:	b17b      	cbz	r3, 8009918 <__mdiff+0x104>
 80098f8:	6106      	str	r6, [r0, #16]
 80098fa:	e7a5      	b.n	8009848 <__mdiff+0x34>
 80098fc:	f855 8b04 	ldr.w	r8, [r5], #4
 8009900:	fa17 f488 	uxtah	r4, r7, r8
 8009904:	1422      	asrs	r2, r4, #16
 8009906:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800990a:	b2a4      	uxth	r4, r4
 800990c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009910:	f84e 4b04 	str.w	r4, [lr], #4
 8009914:	1417      	asrs	r7, r2, #16
 8009916:	e7e0      	b.n	80098da <__mdiff+0xc6>
 8009918:	3e01      	subs	r6, #1
 800991a:	e7ea      	b.n	80098f2 <__mdiff+0xde>
 800991c:	0800a4d3 	.word	0x0800a4d3
 8009920:	0800a5c4 	.word	0x0800a5c4

08009924 <__ulp>:
 8009924:	b082      	sub	sp, #8
 8009926:	ed8d 0b00 	vstr	d0, [sp]
 800992a:	9b01      	ldr	r3, [sp, #4]
 800992c:	4912      	ldr	r1, [pc, #72]	; (8009978 <__ulp+0x54>)
 800992e:	4019      	ands	r1, r3
 8009930:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009934:	2900      	cmp	r1, #0
 8009936:	dd05      	ble.n	8009944 <__ulp+0x20>
 8009938:	2200      	movs	r2, #0
 800993a:	460b      	mov	r3, r1
 800993c:	ec43 2b10 	vmov	d0, r2, r3
 8009940:	b002      	add	sp, #8
 8009942:	4770      	bx	lr
 8009944:	4249      	negs	r1, r1
 8009946:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800994a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800994e:	f04f 0200 	mov.w	r2, #0
 8009952:	f04f 0300 	mov.w	r3, #0
 8009956:	da04      	bge.n	8009962 <__ulp+0x3e>
 8009958:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800995c:	fa41 f300 	asr.w	r3, r1, r0
 8009960:	e7ec      	b.n	800993c <__ulp+0x18>
 8009962:	f1a0 0114 	sub.w	r1, r0, #20
 8009966:	291e      	cmp	r1, #30
 8009968:	bfda      	itte	le
 800996a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800996e:	fa20 f101 	lsrle.w	r1, r0, r1
 8009972:	2101      	movgt	r1, #1
 8009974:	460a      	mov	r2, r1
 8009976:	e7e1      	b.n	800993c <__ulp+0x18>
 8009978:	7ff00000 	.word	0x7ff00000

0800997c <__b2d>:
 800997c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800997e:	6905      	ldr	r5, [r0, #16]
 8009980:	f100 0714 	add.w	r7, r0, #20
 8009984:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009988:	1f2e      	subs	r6, r5, #4
 800998a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800998e:	4620      	mov	r0, r4
 8009990:	f7ff fd52 	bl	8009438 <__hi0bits>
 8009994:	f1c0 0320 	rsb	r3, r0, #32
 8009998:	280a      	cmp	r0, #10
 800999a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009a18 <__b2d+0x9c>
 800999e:	600b      	str	r3, [r1, #0]
 80099a0:	dc14      	bgt.n	80099cc <__b2d+0x50>
 80099a2:	f1c0 0e0b 	rsb	lr, r0, #11
 80099a6:	fa24 f10e 	lsr.w	r1, r4, lr
 80099aa:	42b7      	cmp	r7, r6
 80099ac:	ea41 030c 	orr.w	r3, r1, ip
 80099b0:	bf34      	ite	cc
 80099b2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80099b6:	2100      	movcs	r1, #0
 80099b8:	3015      	adds	r0, #21
 80099ba:	fa04 f000 	lsl.w	r0, r4, r0
 80099be:	fa21 f10e 	lsr.w	r1, r1, lr
 80099c2:	ea40 0201 	orr.w	r2, r0, r1
 80099c6:	ec43 2b10 	vmov	d0, r2, r3
 80099ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099cc:	42b7      	cmp	r7, r6
 80099ce:	bf3a      	itte	cc
 80099d0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80099d4:	f1a5 0608 	subcc.w	r6, r5, #8
 80099d8:	2100      	movcs	r1, #0
 80099da:	380b      	subs	r0, #11
 80099dc:	d017      	beq.n	8009a0e <__b2d+0x92>
 80099de:	f1c0 0c20 	rsb	ip, r0, #32
 80099e2:	fa04 f500 	lsl.w	r5, r4, r0
 80099e6:	42be      	cmp	r6, r7
 80099e8:	fa21 f40c 	lsr.w	r4, r1, ip
 80099ec:	ea45 0504 	orr.w	r5, r5, r4
 80099f0:	bf8c      	ite	hi
 80099f2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80099f6:	2400      	movls	r4, #0
 80099f8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80099fc:	fa01 f000 	lsl.w	r0, r1, r0
 8009a00:	fa24 f40c 	lsr.w	r4, r4, ip
 8009a04:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009a08:	ea40 0204 	orr.w	r2, r0, r4
 8009a0c:	e7db      	b.n	80099c6 <__b2d+0x4a>
 8009a0e:	ea44 030c 	orr.w	r3, r4, ip
 8009a12:	460a      	mov	r2, r1
 8009a14:	e7d7      	b.n	80099c6 <__b2d+0x4a>
 8009a16:	bf00      	nop
 8009a18:	3ff00000 	.word	0x3ff00000

08009a1c <__d2b>:
 8009a1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009a20:	4689      	mov	r9, r1
 8009a22:	2101      	movs	r1, #1
 8009a24:	ec57 6b10 	vmov	r6, r7, d0
 8009a28:	4690      	mov	r8, r2
 8009a2a:	f7ff fc0f 	bl	800924c <_Balloc>
 8009a2e:	4604      	mov	r4, r0
 8009a30:	b930      	cbnz	r0, 8009a40 <__d2b+0x24>
 8009a32:	4602      	mov	r2, r0
 8009a34:	4b25      	ldr	r3, [pc, #148]	; (8009acc <__d2b+0xb0>)
 8009a36:	4826      	ldr	r0, [pc, #152]	; (8009ad0 <__d2b+0xb4>)
 8009a38:	f240 310a 	movw	r1, #778	; 0x30a
 8009a3c:	f000 fb60 	bl	800a100 <__assert_func>
 8009a40:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009a44:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009a48:	bb35      	cbnz	r5, 8009a98 <__d2b+0x7c>
 8009a4a:	2e00      	cmp	r6, #0
 8009a4c:	9301      	str	r3, [sp, #4]
 8009a4e:	d028      	beq.n	8009aa2 <__d2b+0x86>
 8009a50:	4668      	mov	r0, sp
 8009a52:	9600      	str	r6, [sp, #0]
 8009a54:	f7ff fd10 	bl	8009478 <__lo0bits>
 8009a58:	9900      	ldr	r1, [sp, #0]
 8009a5a:	b300      	cbz	r0, 8009a9e <__d2b+0x82>
 8009a5c:	9a01      	ldr	r2, [sp, #4]
 8009a5e:	f1c0 0320 	rsb	r3, r0, #32
 8009a62:	fa02 f303 	lsl.w	r3, r2, r3
 8009a66:	430b      	orrs	r3, r1
 8009a68:	40c2      	lsrs	r2, r0
 8009a6a:	6163      	str	r3, [r4, #20]
 8009a6c:	9201      	str	r2, [sp, #4]
 8009a6e:	9b01      	ldr	r3, [sp, #4]
 8009a70:	61a3      	str	r3, [r4, #24]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	bf14      	ite	ne
 8009a76:	2202      	movne	r2, #2
 8009a78:	2201      	moveq	r2, #1
 8009a7a:	6122      	str	r2, [r4, #16]
 8009a7c:	b1d5      	cbz	r5, 8009ab4 <__d2b+0x98>
 8009a7e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009a82:	4405      	add	r5, r0
 8009a84:	f8c9 5000 	str.w	r5, [r9]
 8009a88:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009a8c:	f8c8 0000 	str.w	r0, [r8]
 8009a90:	4620      	mov	r0, r4
 8009a92:	b003      	add	sp, #12
 8009a94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a9c:	e7d5      	b.n	8009a4a <__d2b+0x2e>
 8009a9e:	6161      	str	r1, [r4, #20]
 8009aa0:	e7e5      	b.n	8009a6e <__d2b+0x52>
 8009aa2:	a801      	add	r0, sp, #4
 8009aa4:	f7ff fce8 	bl	8009478 <__lo0bits>
 8009aa8:	9b01      	ldr	r3, [sp, #4]
 8009aaa:	6163      	str	r3, [r4, #20]
 8009aac:	2201      	movs	r2, #1
 8009aae:	6122      	str	r2, [r4, #16]
 8009ab0:	3020      	adds	r0, #32
 8009ab2:	e7e3      	b.n	8009a7c <__d2b+0x60>
 8009ab4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009ab8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009abc:	f8c9 0000 	str.w	r0, [r9]
 8009ac0:	6918      	ldr	r0, [r3, #16]
 8009ac2:	f7ff fcb9 	bl	8009438 <__hi0bits>
 8009ac6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009aca:	e7df      	b.n	8009a8c <__d2b+0x70>
 8009acc:	0800a4d3 	.word	0x0800a4d3
 8009ad0:	0800a5c4 	.word	0x0800a5c4

08009ad4 <__ratio>:
 8009ad4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ad8:	4688      	mov	r8, r1
 8009ada:	4669      	mov	r1, sp
 8009adc:	4681      	mov	r9, r0
 8009ade:	f7ff ff4d 	bl	800997c <__b2d>
 8009ae2:	a901      	add	r1, sp, #4
 8009ae4:	4640      	mov	r0, r8
 8009ae6:	ec55 4b10 	vmov	r4, r5, d0
 8009aea:	f7ff ff47 	bl	800997c <__b2d>
 8009aee:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009af2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009af6:	eba3 0c02 	sub.w	ip, r3, r2
 8009afa:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009afe:	1a9b      	subs	r3, r3, r2
 8009b00:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009b04:	ec51 0b10 	vmov	r0, r1, d0
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	bfd6      	itet	le
 8009b0c:	460a      	movle	r2, r1
 8009b0e:	462a      	movgt	r2, r5
 8009b10:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009b14:	468b      	mov	fp, r1
 8009b16:	462f      	mov	r7, r5
 8009b18:	bfd4      	ite	le
 8009b1a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009b1e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009b22:	4620      	mov	r0, r4
 8009b24:	ee10 2a10 	vmov	r2, s0
 8009b28:	465b      	mov	r3, fp
 8009b2a:	4639      	mov	r1, r7
 8009b2c:	f7f6 feae 	bl	800088c <__aeabi_ddiv>
 8009b30:	ec41 0b10 	vmov	d0, r0, r1
 8009b34:	b003      	add	sp, #12
 8009b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009b3a <__copybits>:
 8009b3a:	3901      	subs	r1, #1
 8009b3c:	b570      	push	{r4, r5, r6, lr}
 8009b3e:	1149      	asrs	r1, r1, #5
 8009b40:	6914      	ldr	r4, [r2, #16]
 8009b42:	3101      	adds	r1, #1
 8009b44:	f102 0314 	add.w	r3, r2, #20
 8009b48:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009b4c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009b50:	1f05      	subs	r5, r0, #4
 8009b52:	42a3      	cmp	r3, r4
 8009b54:	d30c      	bcc.n	8009b70 <__copybits+0x36>
 8009b56:	1aa3      	subs	r3, r4, r2
 8009b58:	3b11      	subs	r3, #17
 8009b5a:	f023 0303 	bic.w	r3, r3, #3
 8009b5e:	3211      	adds	r2, #17
 8009b60:	42a2      	cmp	r2, r4
 8009b62:	bf88      	it	hi
 8009b64:	2300      	movhi	r3, #0
 8009b66:	4418      	add	r0, r3
 8009b68:	2300      	movs	r3, #0
 8009b6a:	4288      	cmp	r0, r1
 8009b6c:	d305      	bcc.n	8009b7a <__copybits+0x40>
 8009b6e:	bd70      	pop	{r4, r5, r6, pc}
 8009b70:	f853 6b04 	ldr.w	r6, [r3], #4
 8009b74:	f845 6f04 	str.w	r6, [r5, #4]!
 8009b78:	e7eb      	b.n	8009b52 <__copybits+0x18>
 8009b7a:	f840 3b04 	str.w	r3, [r0], #4
 8009b7e:	e7f4      	b.n	8009b6a <__copybits+0x30>

08009b80 <__any_on>:
 8009b80:	f100 0214 	add.w	r2, r0, #20
 8009b84:	6900      	ldr	r0, [r0, #16]
 8009b86:	114b      	asrs	r3, r1, #5
 8009b88:	4298      	cmp	r0, r3
 8009b8a:	b510      	push	{r4, lr}
 8009b8c:	db11      	blt.n	8009bb2 <__any_on+0x32>
 8009b8e:	dd0a      	ble.n	8009ba6 <__any_on+0x26>
 8009b90:	f011 011f 	ands.w	r1, r1, #31
 8009b94:	d007      	beq.n	8009ba6 <__any_on+0x26>
 8009b96:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009b9a:	fa24 f001 	lsr.w	r0, r4, r1
 8009b9e:	fa00 f101 	lsl.w	r1, r0, r1
 8009ba2:	428c      	cmp	r4, r1
 8009ba4:	d10b      	bne.n	8009bbe <__any_on+0x3e>
 8009ba6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d803      	bhi.n	8009bb6 <__any_on+0x36>
 8009bae:	2000      	movs	r0, #0
 8009bb0:	bd10      	pop	{r4, pc}
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	e7f7      	b.n	8009ba6 <__any_on+0x26>
 8009bb6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009bba:	2900      	cmp	r1, #0
 8009bbc:	d0f5      	beq.n	8009baa <__any_on+0x2a>
 8009bbe:	2001      	movs	r0, #1
 8009bc0:	e7f6      	b.n	8009bb0 <__any_on+0x30>

08009bc2 <_calloc_r>:
 8009bc2:	b513      	push	{r0, r1, r4, lr}
 8009bc4:	434a      	muls	r2, r1
 8009bc6:	4611      	mov	r1, r2
 8009bc8:	9201      	str	r2, [sp, #4]
 8009bca:	f000 f859 	bl	8009c80 <_malloc_r>
 8009bce:	4604      	mov	r4, r0
 8009bd0:	b118      	cbz	r0, 8009bda <_calloc_r+0x18>
 8009bd2:	9a01      	ldr	r2, [sp, #4]
 8009bd4:	2100      	movs	r1, #0
 8009bd6:	f7fc fb13 	bl	8006200 <memset>
 8009bda:	4620      	mov	r0, r4
 8009bdc:	b002      	add	sp, #8
 8009bde:	bd10      	pop	{r4, pc}

08009be0 <_free_r>:
 8009be0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009be2:	2900      	cmp	r1, #0
 8009be4:	d048      	beq.n	8009c78 <_free_r+0x98>
 8009be6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bea:	9001      	str	r0, [sp, #4]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	f1a1 0404 	sub.w	r4, r1, #4
 8009bf2:	bfb8      	it	lt
 8009bf4:	18e4      	addlt	r4, r4, r3
 8009bf6:	f000 faf7 	bl	800a1e8 <__malloc_lock>
 8009bfa:	4a20      	ldr	r2, [pc, #128]	; (8009c7c <_free_r+0x9c>)
 8009bfc:	9801      	ldr	r0, [sp, #4]
 8009bfe:	6813      	ldr	r3, [r2, #0]
 8009c00:	4615      	mov	r5, r2
 8009c02:	b933      	cbnz	r3, 8009c12 <_free_r+0x32>
 8009c04:	6063      	str	r3, [r4, #4]
 8009c06:	6014      	str	r4, [r2, #0]
 8009c08:	b003      	add	sp, #12
 8009c0a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c0e:	f000 baf1 	b.w	800a1f4 <__malloc_unlock>
 8009c12:	42a3      	cmp	r3, r4
 8009c14:	d90b      	bls.n	8009c2e <_free_r+0x4e>
 8009c16:	6821      	ldr	r1, [r4, #0]
 8009c18:	1862      	adds	r2, r4, r1
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	bf04      	itt	eq
 8009c1e:	681a      	ldreq	r2, [r3, #0]
 8009c20:	685b      	ldreq	r3, [r3, #4]
 8009c22:	6063      	str	r3, [r4, #4]
 8009c24:	bf04      	itt	eq
 8009c26:	1852      	addeq	r2, r2, r1
 8009c28:	6022      	streq	r2, [r4, #0]
 8009c2a:	602c      	str	r4, [r5, #0]
 8009c2c:	e7ec      	b.n	8009c08 <_free_r+0x28>
 8009c2e:	461a      	mov	r2, r3
 8009c30:	685b      	ldr	r3, [r3, #4]
 8009c32:	b10b      	cbz	r3, 8009c38 <_free_r+0x58>
 8009c34:	42a3      	cmp	r3, r4
 8009c36:	d9fa      	bls.n	8009c2e <_free_r+0x4e>
 8009c38:	6811      	ldr	r1, [r2, #0]
 8009c3a:	1855      	adds	r5, r2, r1
 8009c3c:	42a5      	cmp	r5, r4
 8009c3e:	d10b      	bne.n	8009c58 <_free_r+0x78>
 8009c40:	6824      	ldr	r4, [r4, #0]
 8009c42:	4421      	add	r1, r4
 8009c44:	1854      	adds	r4, r2, r1
 8009c46:	42a3      	cmp	r3, r4
 8009c48:	6011      	str	r1, [r2, #0]
 8009c4a:	d1dd      	bne.n	8009c08 <_free_r+0x28>
 8009c4c:	681c      	ldr	r4, [r3, #0]
 8009c4e:	685b      	ldr	r3, [r3, #4]
 8009c50:	6053      	str	r3, [r2, #4]
 8009c52:	4421      	add	r1, r4
 8009c54:	6011      	str	r1, [r2, #0]
 8009c56:	e7d7      	b.n	8009c08 <_free_r+0x28>
 8009c58:	d902      	bls.n	8009c60 <_free_r+0x80>
 8009c5a:	230c      	movs	r3, #12
 8009c5c:	6003      	str	r3, [r0, #0]
 8009c5e:	e7d3      	b.n	8009c08 <_free_r+0x28>
 8009c60:	6825      	ldr	r5, [r4, #0]
 8009c62:	1961      	adds	r1, r4, r5
 8009c64:	428b      	cmp	r3, r1
 8009c66:	bf04      	itt	eq
 8009c68:	6819      	ldreq	r1, [r3, #0]
 8009c6a:	685b      	ldreq	r3, [r3, #4]
 8009c6c:	6063      	str	r3, [r4, #4]
 8009c6e:	bf04      	itt	eq
 8009c70:	1949      	addeq	r1, r1, r5
 8009c72:	6021      	streq	r1, [r4, #0]
 8009c74:	6054      	str	r4, [r2, #4]
 8009c76:	e7c7      	b.n	8009c08 <_free_r+0x28>
 8009c78:	b003      	add	sp, #12
 8009c7a:	bd30      	pop	{r4, r5, pc}
 8009c7c:	20000560 	.word	0x20000560

08009c80 <_malloc_r>:
 8009c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c82:	1ccd      	adds	r5, r1, #3
 8009c84:	f025 0503 	bic.w	r5, r5, #3
 8009c88:	3508      	adds	r5, #8
 8009c8a:	2d0c      	cmp	r5, #12
 8009c8c:	bf38      	it	cc
 8009c8e:	250c      	movcc	r5, #12
 8009c90:	2d00      	cmp	r5, #0
 8009c92:	4606      	mov	r6, r0
 8009c94:	db01      	blt.n	8009c9a <_malloc_r+0x1a>
 8009c96:	42a9      	cmp	r1, r5
 8009c98:	d903      	bls.n	8009ca2 <_malloc_r+0x22>
 8009c9a:	230c      	movs	r3, #12
 8009c9c:	6033      	str	r3, [r6, #0]
 8009c9e:	2000      	movs	r0, #0
 8009ca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ca2:	f000 faa1 	bl	800a1e8 <__malloc_lock>
 8009ca6:	4921      	ldr	r1, [pc, #132]	; (8009d2c <_malloc_r+0xac>)
 8009ca8:	680a      	ldr	r2, [r1, #0]
 8009caa:	4614      	mov	r4, r2
 8009cac:	b99c      	cbnz	r4, 8009cd6 <_malloc_r+0x56>
 8009cae:	4f20      	ldr	r7, [pc, #128]	; (8009d30 <_malloc_r+0xb0>)
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	b923      	cbnz	r3, 8009cbe <_malloc_r+0x3e>
 8009cb4:	4621      	mov	r1, r4
 8009cb6:	4630      	mov	r0, r6
 8009cb8:	f000 f99e 	bl	8009ff8 <_sbrk_r>
 8009cbc:	6038      	str	r0, [r7, #0]
 8009cbe:	4629      	mov	r1, r5
 8009cc0:	4630      	mov	r0, r6
 8009cc2:	f000 f999 	bl	8009ff8 <_sbrk_r>
 8009cc6:	1c43      	adds	r3, r0, #1
 8009cc8:	d123      	bne.n	8009d12 <_malloc_r+0x92>
 8009cca:	230c      	movs	r3, #12
 8009ccc:	6033      	str	r3, [r6, #0]
 8009cce:	4630      	mov	r0, r6
 8009cd0:	f000 fa90 	bl	800a1f4 <__malloc_unlock>
 8009cd4:	e7e3      	b.n	8009c9e <_malloc_r+0x1e>
 8009cd6:	6823      	ldr	r3, [r4, #0]
 8009cd8:	1b5b      	subs	r3, r3, r5
 8009cda:	d417      	bmi.n	8009d0c <_malloc_r+0x8c>
 8009cdc:	2b0b      	cmp	r3, #11
 8009cde:	d903      	bls.n	8009ce8 <_malloc_r+0x68>
 8009ce0:	6023      	str	r3, [r4, #0]
 8009ce2:	441c      	add	r4, r3
 8009ce4:	6025      	str	r5, [r4, #0]
 8009ce6:	e004      	b.n	8009cf2 <_malloc_r+0x72>
 8009ce8:	6863      	ldr	r3, [r4, #4]
 8009cea:	42a2      	cmp	r2, r4
 8009cec:	bf0c      	ite	eq
 8009cee:	600b      	streq	r3, [r1, #0]
 8009cf0:	6053      	strne	r3, [r2, #4]
 8009cf2:	4630      	mov	r0, r6
 8009cf4:	f000 fa7e 	bl	800a1f4 <__malloc_unlock>
 8009cf8:	f104 000b 	add.w	r0, r4, #11
 8009cfc:	1d23      	adds	r3, r4, #4
 8009cfe:	f020 0007 	bic.w	r0, r0, #7
 8009d02:	1ac2      	subs	r2, r0, r3
 8009d04:	d0cc      	beq.n	8009ca0 <_malloc_r+0x20>
 8009d06:	1a1b      	subs	r3, r3, r0
 8009d08:	50a3      	str	r3, [r4, r2]
 8009d0a:	e7c9      	b.n	8009ca0 <_malloc_r+0x20>
 8009d0c:	4622      	mov	r2, r4
 8009d0e:	6864      	ldr	r4, [r4, #4]
 8009d10:	e7cc      	b.n	8009cac <_malloc_r+0x2c>
 8009d12:	1cc4      	adds	r4, r0, #3
 8009d14:	f024 0403 	bic.w	r4, r4, #3
 8009d18:	42a0      	cmp	r0, r4
 8009d1a:	d0e3      	beq.n	8009ce4 <_malloc_r+0x64>
 8009d1c:	1a21      	subs	r1, r4, r0
 8009d1e:	4630      	mov	r0, r6
 8009d20:	f000 f96a 	bl	8009ff8 <_sbrk_r>
 8009d24:	3001      	adds	r0, #1
 8009d26:	d1dd      	bne.n	8009ce4 <_malloc_r+0x64>
 8009d28:	e7cf      	b.n	8009cca <_malloc_r+0x4a>
 8009d2a:	bf00      	nop
 8009d2c:	20000560 	.word	0x20000560
 8009d30:	20000564 	.word	0x20000564

08009d34 <__sfputc_r>:
 8009d34:	6893      	ldr	r3, [r2, #8]
 8009d36:	3b01      	subs	r3, #1
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	b410      	push	{r4}
 8009d3c:	6093      	str	r3, [r2, #8]
 8009d3e:	da08      	bge.n	8009d52 <__sfputc_r+0x1e>
 8009d40:	6994      	ldr	r4, [r2, #24]
 8009d42:	42a3      	cmp	r3, r4
 8009d44:	db01      	blt.n	8009d4a <__sfputc_r+0x16>
 8009d46:	290a      	cmp	r1, #10
 8009d48:	d103      	bne.n	8009d52 <__sfputc_r+0x1e>
 8009d4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d4e:	f7fd bd89 	b.w	8007864 <__swbuf_r>
 8009d52:	6813      	ldr	r3, [r2, #0]
 8009d54:	1c58      	adds	r0, r3, #1
 8009d56:	6010      	str	r0, [r2, #0]
 8009d58:	7019      	strb	r1, [r3, #0]
 8009d5a:	4608      	mov	r0, r1
 8009d5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d60:	4770      	bx	lr

08009d62 <__sfputs_r>:
 8009d62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d64:	4606      	mov	r6, r0
 8009d66:	460f      	mov	r7, r1
 8009d68:	4614      	mov	r4, r2
 8009d6a:	18d5      	adds	r5, r2, r3
 8009d6c:	42ac      	cmp	r4, r5
 8009d6e:	d101      	bne.n	8009d74 <__sfputs_r+0x12>
 8009d70:	2000      	movs	r0, #0
 8009d72:	e007      	b.n	8009d84 <__sfputs_r+0x22>
 8009d74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d78:	463a      	mov	r2, r7
 8009d7a:	4630      	mov	r0, r6
 8009d7c:	f7ff ffda 	bl	8009d34 <__sfputc_r>
 8009d80:	1c43      	adds	r3, r0, #1
 8009d82:	d1f3      	bne.n	8009d6c <__sfputs_r+0xa>
 8009d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009d88 <_vfiprintf_r>:
 8009d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d8c:	460d      	mov	r5, r1
 8009d8e:	b09d      	sub	sp, #116	; 0x74
 8009d90:	4614      	mov	r4, r2
 8009d92:	4698      	mov	r8, r3
 8009d94:	4606      	mov	r6, r0
 8009d96:	b118      	cbz	r0, 8009da0 <_vfiprintf_r+0x18>
 8009d98:	6983      	ldr	r3, [r0, #24]
 8009d9a:	b90b      	cbnz	r3, 8009da0 <_vfiprintf_r+0x18>
 8009d9c:	f7fe fdb6 	bl	800890c <__sinit>
 8009da0:	4b89      	ldr	r3, [pc, #548]	; (8009fc8 <_vfiprintf_r+0x240>)
 8009da2:	429d      	cmp	r5, r3
 8009da4:	d11b      	bne.n	8009dde <_vfiprintf_r+0x56>
 8009da6:	6875      	ldr	r5, [r6, #4]
 8009da8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009daa:	07d9      	lsls	r1, r3, #31
 8009dac:	d405      	bmi.n	8009dba <_vfiprintf_r+0x32>
 8009dae:	89ab      	ldrh	r3, [r5, #12]
 8009db0:	059a      	lsls	r2, r3, #22
 8009db2:	d402      	bmi.n	8009dba <_vfiprintf_r+0x32>
 8009db4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009db6:	f7ff f9ba 	bl	800912e <__retarget_lock_acquire_recursive>
 8009dba:	89ab      	ldrh	r3, [r5, #12]
 8009dbc:	071b      	lsls	r3, r3, #28
 8009dbe:	d501      	bpl.n	8009dc4 <_vfiprintf_r+0x3c>
 8009dc0:	692b      	ldr	r3, [r5, #16]
 8009dc2:	b9eb      	cbnz	r3, 8009e00 <_vfiprintf_r+0x78>
 8009dc4:	4629      	mov	r1, r5
 8009dc6:	4630      	mov	r0, r6
 8009dc8:	f7fd fd9e 	bl	8007908 <__swsetup_r>
 8009dcc:	b1c0      	cbz	r0, 8009e00 <_vfiprintf_r+0x78>
 8009dce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009dd0:	07dc      	lsls	r4, r3, #31
 8009dd2:	d50e      	bpl.n	8009df2 <_vfiprintf_r+0x6a>
 8009dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8009dd8:	b01d      	add	sp, #116	; 0x74
 8009dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dde:	4b7b      	ldr	r3, [pc, #492]	; (8009fcc <_vfiprintf_r+0x244>)
 8009de0:	429d      	cmp	r5, r3
 8009de2:	d101      	bne.n	8009de8 <_vfiprintf_r+0x60>
 8009de4:	68b5      	ldr	r5, [r6, #8]
 8009de6:	e7df      	b.n	8009da8 <_vfiprintf_r+0x20>
 8009de8:	4b79      	ldr	r3, [pc, #484]	; (8009fd0 <_vfiprintf_r+0x248>)
 8009dea:	429d      	cmp	r5, r3
 8009dec:	bf08      	it	eq
 8009dee:	68f5      	ldreq	r5, [r6, #12]
 8009df0:	e7da      	b.n	8009da8 <_vfiprintf_r+0x20>
 8009df2:	89ab      	ldrh	r3, [r5, #12]
 8009df4:	0598      	lsls	r0, r3, #22
 8009df6:	d4ed      	bmi.n	8009dd4 <_vfiprintf_r+0x4c>
 8009df8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009dfa:	f7ff f999 	bl	8009130 <__retarget_lock_release_recursive>
 8009dfe:	e7e9      	b.n	8009dd4 <_vfiprintf_r+0x4c>
 8009e00:	2300      	movs	r3, #0
 8009e02:	9309      	str	r3, [sp, #36]	; 0x24
 8009e04:	2320      	movs	r3, #32
 8009e06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e0e:	2330      	movs	r3, #48	; 0x30
 8009e10:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009fd4 <_vfiprintf_r+0x24c>
 8009e14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e18:	f04f 0901 	mov.w	r9, #1
 8009e1c:	4623      	mov	r3, r4
 8009e1e:	469a      	mov	sl, r3
 8009e20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e24:	b10a      	cbz	r2, 8009e2a <_vfiprintf_r+0xa2>
 8009e26:	2a25      	cmp	r2, #37	; 0x25
 8009e28:	d1f9      	bne.n	8009e1e <_vfiprintf_r+0x96>
 8009e2a:	ebba 0b04 	subs.w	fp, sl, r4
 8009e2e:	d00b      	beq.n	8009e48 <_vfiprintf_r+0xc0>
 8009e30:	465b      	mov	r3, fp
 8009e32:	4622      	mov	r2, r4
 8009e34:	4629      	mov	r1, r5
 8009e36:	4630      	mov	r0, r6
 8009e38:	f7ff ff93 	bl	8009d62 <__sfputs_r>
 8009e3c:	3001      	adds	r0, #1
 8009e3e:	f000 80aa 	beq.w	8009f96 <_vfiprintf_r+0x20e>
 8009e42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e44:	445a      	add	r2, fp
 8009e46:	9209      	str	r2, [sp, #36]	; 0x24
 8009e48:	f89a 3000 	ldrb.w	r3, [sl]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	f000 80a2 	beq.w	8009f96 <_vfiprintf_r+0x20e>
 8009e52:	2300      	movs	r3, #0
 8009e54:	f04f 32ff 	mov.w	r2, #4294967295
 8009e58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e5c:	f10a 0a01 	add.w	sl, sl, #1
 8009e60:	9304      	str	r3, [sp, #16]
 8009e62:	9307      	str	r3, [sp, #28]
 8009e64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e68:	931a      	str	r3, [sp, #104]	; 0x68
 8009e6a:	4654      	mov	r4, sl
 8009e6c:	2205      	movs	r2, #5
 8009e6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e72:	4858      	ldr	r0, [pc, #352]	; (8009fd4 <_vfiprintf_r+0x24c>)
 8009e74:	f7f6 f9d4 	bl	8000220 <memchr>
 8009e78:	9a04      	ldr	r2, [sp, #16]
 8009e7a:	b9d8      	cbnz	r0, 8009eb4 <_vfiprintf_r+0x12c>
 8009e7c:	06d1      	lsls	r1, r2, #27
 8009e7e:	bf44      	itt	mi
 8009e80:	2320      	movmi	r3, #32
 8009e82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e86:	0713      	lsls	r3, r2, #28
 8009e88:	bf44      	itt	mi
 8009e8a:	232b      	movmi	r3, #43	; 0x2b
 8009e8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e90:	f89a 3000 	ldrb.w	r3, [sl]
 8009e94:	2b2a      	cmp	r3, #42	; 0x2a
 8009e96:	d015      	beq.n	8009ec4 <_vfiprintf_r+0x13c>
 8009e98:	9a07      	ldr	r2, [sp, #28]
 8009e9a:	4654      	mov	r4, sl
 8009e9c:	2000      	movs	r0, #0
 8009e9e:	f04f 0c0a 	mov.w	ip, #10
 8009ea2:	4621      	mov	r1, r4
 8009ea4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ea8:	3b30      	subs	r3, #48	; 0x30
 8009eaa:	2b09      	cmp	r3, #9
 8009eac:	d94e      	bls.n	8009f4c <_vfiprintf_r+0x1c4>
 8009eae:	b1b0      	cbz	r0, 8009ede <_vfiprintf_r+0x156>
 8009eb0:	9207      	str	r2, [sp, #28]
 8009eb2:	e014      	b.n	8009ede <_vfiprintf_r+0x156>
 8009eb4:	eba0 0308 	sub.w	r3, r0, r8
 8009eb8:	fa09 f303 	lsl.w	r3, r9, r3
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	9304      	str	r3, [sp, #16]
 8009ec0:	46a2      	mov	sl, r4
 8009ec2:	e7d2      	b.n	8009e6a <_vfiprintf_r+0xe2>
 8009ec4:	9b03      	ldr	r3, [sp, #12]
 8009ec6:	1d19      	adds	r1, r3, #4
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	9103      	str	r1, [sp, #12]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	bfbb      	ittet	lt
 8009ed0:	425b      	neglt	r3, r3
 8009ed2:	f042 0202 	orrlt.w	r2, r2, #2
 8009ed6:	9307      	strge	r3, [sp, #28]
 8009ed8:	9307      	strlt	r3, [sp, #28]
 8009eda:	bfb8      	it	lt
 8009edc:	9204      	strlt	r2, [sp, #16]
 8009ede:	7823      	ldrb	r3, [r4, #0]
 8009ee0:	2b2e      	cmp	r3, #46	; 0x2e
 8009ee2:	d10c      	bne.n	8009efe <_vfiprintf_r+0x176>
 8009ee4:	7863      	ldrb	r3, [r4, #1]
 8009ee6:	2b2a      	cmp	r3, #42	; 0x2a
 8009ee8:	d135      	bne.n	8009f56 <_vfiprintf_r+0x1ce>
 8009eea:	9b03      	ldr	r3, [sp, #12]
 8009eec:	1d1a      	adds	r2, r3, #4
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	9203      	str	r2, [sp, #12]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	bfb8      	it	lt
 8009ef6:	f04f 33ff 	movlt.w	r3, #4294967295
 8009efa:	3402      	adds	r4, #2
 8009efc:	9305      	str	r3, [sp, #20]
 8009efe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009fe4 <_vfiprintf_r+0x25c>
 8009f02:	7821      	ldrb	r1, [r4, #0]
 8009f04:	2203      	movs	r2, #3
 8009f06:	4650      	mov	r0, sl
 8009f08:	f7f6 f98a 	bl	8000220 <memchr>
 8009f0c:	b140      	cbz	r0, 8009f20 <_vfiprintf_r+0x198>
 8009f0e:	2340      	movs	r3, #64	; 0x40
 8009f10:	eba0 000a 	sub.w	r0, r0, sl
 8009f14:	fa03 f000 	lsl.w	r0, r3, r0
 8009f18:	9b04      	ldr	r3, [sp, #16]
 8009f1a:	4303      	orrs	r3, r0
 8009f1c:	3401      	adds	r4, #1
 8009f1e:	9304      	str	r3, [sp, #16]
 8009f20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f24:	482c      	ldr	r0, [pc, #176]	; (8009fd8 <_vfiprintf_r+0x250>)
 8009f26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f2a:	2206      	movs	r2, #6
 8009f2c:	f7f6 f978 	bl	8000220 <memchr>
 8009f30:	2800      	cmp	r0, #0
 8009f32:	d03f      	beq.n	8009fb4 <_vfiprintf_r+0x22c>
 8009f34:	4b29      	ldr	r3, [pc, #164]	; (8009fdc <_vfiprintf_r+0x254>)
 8009f36:	bb1b      	cbnz	r3, 8009f80 <_vfiprintf_r+0x1f8>
 8009f38:	9b03      	ldr	r3, [sp, #12]
 8009f3a:	3307      	adds	r3, #7
 8009f3c:	f023 0307 	bic.w	r3, r3, #7
 8009f40:	3308      	adds	r3, #8
 8009f42:	9303      	str	r3, [sp, #12]
 8009f44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f46:	443b      	add	r3, r7
 8009f48:	9309      	str	r3, [sp, #36]	; 0x24
 8009f4a:	e767      	b.n	8009e1c <_vfiprintf_r+0x94>
 8009f4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f50:	460c      	mov	r4, r1
 8009f52:	2001      	movs	r0, #1
 8009f54:	e7a5      	b.n	8009ea2 <_vfiprintf_r+0x11a>
 8009f56:	2300      	movs	r3, #0
 8009f58:	3401      	adds	r4, #1
 8009f5a:	9305      	str	r3, [sp, #20]
 8009f5c:	4619      	mov	r1, r3
 8009f5e:	f04f 0c0a 	mov.w	ip, #10
 8009f62:	4620      	mov	r0, r4
 8009f64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f68:	3a30      	subs	r2, #48	; 0x30
 8009f6a:	2a09      	cmp	r2, #9
 8009f6c:	d903      	bls.n	8009f76 <_vfiprintf_r+0x1ee>
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d0c5      	beq.n	8009efe <_vfiprintf_r+0x176>
 8009f72:	9105      	str	r1, [sp, #20]
 8009f74:	e7c3      	b.n	8009efe <_vfiprintf_r+0x176>
 8009f76:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f7a:	4604      	mov	r4, r0
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	e7f0      	b.n	8009f62 <_vfiprintf_r+0x1da>
 8009f80:	ab03      	add	r3, sp, #12
 8009f82:	9300      	str	r3, [sp, #0]
 8009f84:	462a      	mov	r2, r5
 8009f86:	4b16      	ldr	r3, [pc, #88]	; (8009fe0 <_vfiprintf_r+0x258>)
 8009f88:	a904      	add	r1, sp, #16
 8009f8a:	4630      	mov	r0, r6
 8009f8c:	f7fc f9e0 	bl	8006350 <_printf_float>
 8009f90:	4607      	mov	r7, r0
 8009f92:	1c78      	adds	r0, r7, #1
 8009f94:	d1d6      	bne.n	8009f44 <_vfiprintf_r+0x1bc>
 8009f96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f98:	07d9      	lsls	r1, r3, #31
 8009f9a:	d405      	bmi.n	8009fa8 <_vfiprintf_r+0x220>
 8009f9c:	89ab      	ldrh	r3, [r5, #12]
 8009f9e:	059a      	lsls	r2, r3, #22
 8009fa0:	d402      	bmi.n	8009fa8 <_vfiprintf_r+0x220>
 8009fa2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009fa4:	f7ff f8c4 	bl	8009130 <__retarget_lock_release_recursive>
 8009fa8:	89ab      	ldrh	r3, [r5, #12]
 8009faa:	065b      	lsls	r3, r3, #25
 8009fac:	f53f af12 	bmi.w	8009dd4 <_vfiprintf_r+0x4c>
 8009fb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009fb2:	e711      	b.n	8009dd8 <_vfiprintf_r+0x50>
 8009fb4:	ab03      	add	r3, sp, #12
 8009fb6:	9300      	str	r3, [sp, #0]
 8009fb8:	462a      	mov	r2, r5
 8009fba:	4b09      	ldr	r3, [pc, #36]	; (8009fe0 <_vfiprintf_r+0x258>)
 8009fbc:	a904      	add	r1, sp, #16
 8009fbe:	4630      	mov	r0, r6
 8009fc0:	f7fc fc6a 	bl	8006898 <_printf_i>
 8009fc4:	e7e4      	b.n	8009f90 <_vfiprintf_r+0x208>
 8009fc6:	bf00      	nop
 8009fc8:	0800a504 	.word	0x0800a504
 8009fcc:	0800a524 	.word	0x0800a524
 8009fd0:	0800a4e4 	.word	0x0800a4e4
 8009fd4:	0800a724 	.word	0x0800a724
 8009fd8:	0800a72e 	.word	0x0800a72e
 8009fdc:	08006351 	.word	0x08006351
 8009fe0:	08009d63 	.word	0x08009d63
 8009fe4:	0800a72a 	.word	0x0800a72a

08009fe8 <nan>:
 8009fe8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009ff0 <nan+0x8>
 8009fec:	4770      	bx	lr
 8009fee:	bf00      	nop
 8009ff0:	00000000 	.word	0x00000000
 8009ff4:	7ff80000 	.word	0x7ff80000

08009ff8 <_sbrk_r>:
 8009ff8:	b538      	push	{r3, r4, r5, lr}
 8009ffa:	4d06      	ldr	r5, [pc, #24]	; (800a014 <_sbrk_r+0x1c>)
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	4604      	mov	r4, r0
 800a000:	4608      	mov	r0, r1
 800a002:	602b      	str	r3, [r5, #0]
 800a004:	f7f7 ff4e 	bl	8001ea4 <_sbrk>
 800a008:	1c43      	adds	r3, r0, #1
 800a00a:	d102      	bne.n	800a012 <_sbrk_r+0x1a>
 800a00c:	682b      	ldr	r3, [r5, #0]
 800a00e:	b103      	cbz	r3, 800a012 <_sbrk_r+0x1a>
 800a010:	6023      	str	r3, [r4, #0]
 800a012:	bd38      	pop	{r3, r4, r5, pc}
 800a014:	2000072c 	.word	0x2000072c

0800a018 <__sread>:
 800a018:	b510      	push	{r4, lr}
 800a01a:	460c      	mov	r4, r1
 800a01c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a020:	f000 f8ee 	bl	800a200 <_read_r>
 800a024:	2800      	cmp	r0, #0
 800a026:	bfab      	itete	ge
 800a028:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a02a:	89a3      	ldrhlt	r3, [r4, #12]
 800a02c:	181b      	addge	r3, r3, r0
 800a02e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a032:	bfac      	ite	ge
 800a034:	6563      	strge	r3, [r4, #84]	; 0x54
 800a036:	81a3      	strhlt	r3, [r4, #12]
 800a038:	bd10      	pop	{r4, pc}

0800a03a <__swrite>:
 800a03a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a03e:	461f      	mov	r7, r3
 800a040:	898b      	ldrh	r3, [r1, #12]
 800a042:	05db      	lsls	r3, r3, #23
 800a044:	4605      	mov	r5, r0
 800a046:	460c      	mov	r4, r1
 800a048:	4616      	mov	r6, r2
 800a04a:	d505      	bpl.n	800a058 <__swrite+0x1e>
 800a04c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a050:	2302      	movs	r3, #2
 800a052:	2200      	movs	r2, #0
 800a054:	f000 f8b6 	bl	800a1c4 <_lseek_r>
 800a058:	89a3      	ldrh	r3, [r4, #12]
 800a05a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a05e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a062:	81a3      	strh	r3, [r4, #12]
 800a064:	4632      	mov	r2, r6
 800a066:	463b      	mov	r3, r7
 800a068:	4628      	mov	r0, r5
 800a06a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a06e:	f000 b835 	b.w	800a0dc <_write_r>

0800a072 <__sseek>:
 800a072:	b510      	push	{r4, lr}
 800a074:	460c      	mov	r4, r1
 800a076:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a07a:	f000 f8a3 	bl	800a1c4 <_lseek_r>
 800a07e:	1c43      	adds	r3, r0, #1
 800a080:	89a3      	ldrh	r3, [r4, #12]
 800a082:	bf15      	itete	ne
 800a084:	6560      	strne	r0, [r4, #84]	; 0x54
 800a086:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a08a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a08e:	81a3      	strheq	r3, [r4, #12]
 800a090:	bf18      	it	ne
 800a092:	81a3      	strhne	r3, [r4, #12]
 800a094:	bd10      	pop	{r4, pc}

0800a096 <__sclose>:
 800a096:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a09a:	f000 b84f 	b.w	800a13c <_close_r>

0800a09e <strncmp>:
 800a09e:	b510      	push	{r4, lr}
 800a0a0:	b16a      	cbz	r2, 800a0be <strncmp+0x20>
 800a0a2:	3901      	subs	r1, #1
 800a0a4:	1884      	adds	r4, r0, r2
 800a0a6:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a0aa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d103      	bne.n	800a0ba <strncmp+0x1c>
 800a0b2:	42a0      	cmp	r0, r4
 800a0b4:	d001      	beq.n	800a0ba <strncmp+0x1c>
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d1f5      	bne.n	800a0a6 <strncmp+0x8>
 800a0ba:	1a98      	subs	r0, r3, r2
 800a0bc:	bd10      	pop	{r4, pc}
 800a0be:	4610      	mov	r0, r2
 800a0c0:	e7fc      	b.n	800a0bc <strncmp+0x1e>

0800a0c2 <__ascii_wctomb>:
 800a0c2:	b149      	cbz	r1, 800a0d8 <__ascii_wctomb+0x16>
 800a0c4:	2aff      	cmp	r2, #255	; 0xff
 800a0c6:	bf85      	ittet	hi
 800a0c8:	238a      	movhi	r3, #138	; 0x8a
 800a0ca:	6003      	strhi	r3, [r0, #0]
 800a0cc:	700a      	strbls	r2, [r1, #0]
 800a0ce:	f04f 30ff 	movhi.w	r0, #4294967295
 800a0d2:	bf98      	it	ls
 800a0d4:	2001      	movls	r0, #1
 800a0d6:	4770      	bx	lr
 800a0d8:	4608      	mov	r0, r1
 800a0da:	4770      	bx	lr

0800a0dc <_write_r>:
 800a0dc:	b538      	push	{r3, r4, r5, lr}
 800a0de:	4d07      	ldr	r5, [pc, #28]	; (800a0fc <_write_r+0x20>)
 800a0e0:	4604      	mov	r4, r0
 800a0e2:	4608      	mov	r0, r1
 800a0e4:	4611      	mov	r1, r2
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	602a      	str	r2, [r5, #0]
 800a0ea:	461a      	mov	r2, r3
 800a0ec:	f7f7 fe89 	bl	8001e02 <_write>
 800a0f0:	1c43      	adds	r3, r0, #1
 800a0f2:	d102      	bne.n	800a0fa <_write_r+0x1e>
 800a0f4:	682b      	ldr	r3, [r5, #0]
 800a0f6:	b103      	cbz	r3, 800a0fa <_write_r+0x1e>
 800a0f8:	6023      	str	r3, [r4, #0]
 800a0fa:	bd38      	pop	{r3, r4, r5, pc}
 800a0fc:	2000072c 	.word	0x2000072c

0800a100 <__assert_func>:
 800a100:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a102:	4614      	mov	r4, r2
 800a104:	461a      	mov	r2, r3
 800a106:	4b09      	ldr	r3, [pc, #36]	; (800a12c <__assert_func+0x2c>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	4605      	mov	r5, r0
 800a10c:	68d8      	ldr	r0, [r3, #12]
 800a10e:	b14c      	cbz	r4, 800a124 <__assert_func+0x24>
 800a110:	4b07      	ldr	r3, [pc, #28]	; (800a130 <__assert_func+0x30>)
 800a112:	9100      	str	r1, [sp, #0]
 800a114:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a118:	4906      	ldr	r1, [pc, #24]	; (800a134 <__assert_func+0x34>)
 800a11a:	462b      	mov	r3, r5
 800a11c:	f000 f81e 	bl	800a15c <fiprintf>
 800a120:	f000 f880 	bl	800a224 <abort>
 800a124:	4b04      	ldr	r3, [pc, #16]	; (800a138 <__assert_func+0x38>)
 800a126:	461c      	mov	r4, r3
 800a128:	e7f3      	b.n	800a112 <__assert_func+0x12>
 800a12a:	bf00      	nop
 800a12c:	20000028 	.word	0x20000028
 800a130:	0800a735 	.word	0x0800a735
 800a134:	0800a742 	.word	0x0800a742
 800a138:	0800a770 	.word	0x0800a770

0800a13c <_close_r>:
 800a13c:	b538      	push	{r3, r4, r5, lr}
 800a13e:	4d06      	ldr	r5, [pc, #24]	; (800a158 <_close_r+0x1c>)
 800a140:	2300      	movs	r3, #0
 800a142:	4604      	mov	r4, r0
 800a144:	4608      	mov	r0, r1
 800a146:	602b      	str	r3, [r5, #0]
 800a148:	f7f7 fe77 	bl	8001e3a <_close>
 800a14c:	1c43      	adds	r3, r0, #1
 800a14e:	d102      	bne.n	800a156 <_close_r+0x1a>
 800a150:	682b      	ldr	r3, [r5, #0]
 800a152:	b103      	cbz	r3, 800a156 <_close_r+0x1a>
 800a154:	6023      	str	r3, [r4, #0]
 800a156:	bd38      	pop	{r3, r4, r5, pc}
 800a158:	2000072c 	.word	0x2000072c

0800a15c <fiprintf>:
 800a15c:	b40e      	push	{r1, r2, r3}
 800a15e:	b503      	push	{r0, r1, lr}
 800a160:	4601      	mov	r1, r0
 800a162:	ab03      	add	r3, sp, #12
 800a164:	4805      	ldr	r0, [pc, #20]	; (800a17c <fiprintf+0x20>)
 800a166:	f853 2b04 	ldr.w	r2, [r3], #4
 800a16a:	6800      	ldr	r0, [r0, #0]
 800a16c:	9301      	str	r3, [sp, #4]
 800a16e:	f7ff fe0b 	bl	8009d88 <_vfiprintf_r>
 800a172:	b002      	add	sp, #8
 800a174:	f85d eb04 	ldr.w	lr, [sp], #4
 800a178:	b003      	add	sp, #12
 800a17a:	4770      	bx	lr
 800a17c:	20000028 	.word	0x20000028

0800a180 <_fstat_r>:
 800a180:	b538      	push	{r3, r4, r5, lr}
 800a182:	4d07      	ldr	r5, [pc, #28]	; (800a1a0 <_fstat_r+0x20>)
 800a184:	2300      	movs	r3, #0
 800a186:	4604      	mov	r4, r0
 800a188:	4608      	mov	r0, r1
 800a18a:	4611      	mov	r1, r2
 800a18c:	602b      	str	r3, [r5, #0]
 800a18e:	f7f7 fe60 	bl	8001e52 <_fstat>
 800a192:	1c43      	adds	r3, r0, #1
 800a194:	d102      	bne.n	800a19c <_fstat_r+0x1c>
 800a196:	682b      	ldr	r3, [r5, #0]
 800a198:	b103      	cbz	r3, 800a19c <_fstat_r+0x1c>
 800a19a:	6023      	str	r3, [r4, #0]
 800a19c:	bd38      	pop	{r3, r4, r5, pc}
 800a19e:	bf00      	nop
 800a1a0:	2000072c 	.word	0x2000072c

0800a1a4 <_isatty_r>:
 800a1a4:	b538      	push	{r3, r4, r5, lr}
 800a1a6:	4d06      	ldr	r5, [pc, #24]	; (800a1c0 <_isatty_r+0x1c>)
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	4604      	mov	r4, r0
 800a1ac:	4608      	mov	r0, r1
 800a1ae:	602b      	str	r3, [r5, #0]
 800a1b0:	f7f7 fe5f 	bl	8001e72 <_isatty>
 800a1b4:	1c43      	adds	r3, r0, #1
 800a1b6:	d102      	bne.n	800a1be <_isatty_r+0x1a>
 800a1b8:	682b      	ldr	r3, [r5, #0]
 800a1ba:	b103      	cbz	r3, 800a1be <_isatty_r+0x1a>
 800a1bc:	6023      	str	r3, [r4, #0]
 800a1be:	bd38      	pop	{r3, r4, r5, pc}
 800a1c0:	2000072c 	.word	0x2000072c

0800a1c4 <_lseek_r>:
 800a1c4:	b538      	push	{r3, r4, r5, lr}
 800a1c6:	4d07      	ldr	r5, [pc, #28]	; (800a1e4 <_lseek_r+0x20>)
 800a1c8:	4604      	mov	r4, r0
 800a1ca:	4608      	mov	r0, r1
 800a1cc:	4611      	mov	r1, r2
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	602a      	str	r2, [r5, #0]
 800a1d2:	461a      	mov	r2, r3
 800a1d4:	f7f7 fe58 	bl	8001e88 <_lseek>
 800a1d8:	1c43      	adds	r3, r0, #1
 800a1da:	d102      	bne.n	800a1e2 <_lseek_r+0x1e>
 800a1dc:	682b      	ldr	r3, [r5, #0]
 800a1de:	b103      	cbz	r3, 800a1e2 <_lseek_r+0x1e>
 800a1e0:	6023      	str	r3, [r4, #0]
 800a1e2:	bd38      	pop	{r3, r4, r5, pc}
 800a1e4:	2000072c 	.word	0x2000072c

0800a1e8 <__malloc_lock>:
 800a1e8:	4801      	ldr	r0, [pc, #4]	; (800a1f0 <__malloc_lock+0x8>)
 800a1ea:	f7fe bfa0 	b.w	800912e <__retarget_lock_acquire_recursive>
 800a1ee:	bf00      	nop
 800a1f0:	20000724 	.word	0x20000724

0800a1f4 <__malloc_unlock>:
 800a1f4:	4801      	ldr	r0, [pc, #4]	; (800a1fc <__malloc_unlock+0x8>)
 800a1f6:	f7fe bf9b 	b.w	8009130 <__retarget_lock_release_recursive>
 800a1fa:	bf00      	nop
 800a1fc:	20000724 	.word	0x20000724

0800a200 <_read_r>:
 800a200:	b538      	push	{r3, r4, r5, lr}
 800a202:	4d07      	ldr	r5, [pc, #28]	; (800a220 <_read_r+0x20>)
 800a204:	4604      	mov	r4, r0
 800a206:	4608      	mov	r0, r1
 800a208:	4611      	mov	r1, r2
 800a20a:	2200      	movs	r2, #0
 800a20c:	602a      	str	r2, [r5, #0]
 800a20e:	461a      	mov	r2, r3
 800a210:	f7f7 fdda 	bl	8001dc8 <_read>
 800a214:	1c43      	adds	r3, r0, #1
 800a216:	d102      	bne.n	800a21e <_read_r+0x1e>
 800a218:	682b      	ldr	r3, [r5, #0]
 800a21a:	b103      	cbz	r3, 800a21e <_read_r+0x1e>
 800a21c:	6023      	str	r3, [r4, #0]
 800a21e:	bd38      	pop	{r3, r4, r5, pc}
 800a220:	2000072c 	.word	0x2000072c

0800a224 <abort>:
 800a224:	b508      	push	{r3, lr}
 800a226:	2006      	movs	r0, #6
 800a228:	f000 f82c 	bl	800a284 <raise>
 800a22c:	2001      	movs	r0, #1
 800a22e:	f7f7 fdc1 	bl	8001db4 <_exit>

0800a232 <_raise_r>:
 800a232:	291f      	cmp	r1, #31
 800a234:	b538      	push	{r3, r4, r5, lr}
 800a236:	4604      	mov	r4, r0
 800a238:	460d      	mov	r5, r1
 800a23a:	d904      	bls.n	800a246 <_raise_r+0x14>
 800a23c:	2316      	movs	r3, #22
 800a23e:	6003      	str	r3, [r0, #0]
 800a240:	f04f 30ff 	mov.w	r0, #4294967295
 800a244:	bd38      	pop	{r3, r4, r5, pc}
 800a246:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a248:	b112      	cbz	r2, 800a250 <_raise_r+0x1e>
 800a24a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a24e:	b94b      	cbnz	r3, 800a264 <_raise_r+0x32>
 800a250:	4620      	mov	r0, r4
 800a252:	f000 f831 	bl	800a2b8 <_getpid_r>
 800a256:	462a      	mov	r2, r5
 800a258:	4601      	mov	r1, r0
 800a25a:	4620      	mov	r0, r4
 800a25c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a260:	f000 b818 	b.w	800a294 <_kill_r>
 800a264:	2b01      	cmp	r3, #1
 800a266:	d00a      	beq.n	800a27e <_raise_r+0x4c>
 800a268:	1c59      	adds	r1, r3, #1
 800a26a:	d103      	bne.n	800a274 <_raise_r+0x42>
 800a26c:	2316      	movs	r3, #22
 800a26e:	6003      	str	r3, [r0, #0]
 800a270:	2001      	movs	r0, #1
 800a272:	e7e7      	b.n	800a244 <_raise_r+0x12>
 800a274:	2400      	movs	r4, #0
 800a276:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a27a:	4628      	mov	r0, r5
 800a27c:	4798      	blx	r3
 800a27e:	2000      	movs	r0, #0
 800a280:	e7e0      	b.n	800a244 <_raise_r+0x12>
	...

0800a284 <raise>:
 800a284:	4b02      	ldr	r3, [pc, #8]	; (800a290 <raise+0xc>)
 800a286:	4601      	mov	r1, r0
 800a288:	6818      	ldr	r0, [r3, #0]
 800a28a:	f7ff bfd2 	b.w	800a232 <_raise_r>
 800a28e:	bf00      	nop
 800a290:	20000028 	.word	0x20000028

0800a294 <_kill_r>:
 800a294:	b538      	push	{r3, r4, r5, lr}
 800a296:	4d07      	ldr	r5, [pc, #28]	; (800a2b4 <_kill_r+0x20>)
 800a298:	2300      	movs	r3, #0
 800a29a:	4604      	mov	r4, r0
 800a29c:	4608      	mov	r0, r1
 800a29e:	4611      	mov	r1, r2
 800a2a0:	602b      	str	r3, [r5, #0]
 800a2a2:	f7f7 fd77 	bl	8001d94 <_kill>
 800a2a6:	1c43      	adds	r3, r0, #1
 800a2a8:	d102      	bne.n	800a2b0 <_kill_r+0x1c>
 800a2aa:	682b      	ldr	r3, [r5, #0]
 800a2ac:	b103      	cbz	r3, 800a2b0 <_kill_r+0x1c>
 800a2ae:	6023      	str	r3, [r4, #0]
 800a2b0:	bd38      	pop	{r3, r4, r5, pc}
 800a2b2:	bf00      	nop
 800a2b4:	2000072c 	.word	0x2000072c

0800a2b8 <_getpid_r>:
 800a2b8:	f7f7 bd64 	b.w	8001d84 <_getpid>

0800a2bc <_init>:
 800a2bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2be:	bf00      	nop
 800a2c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2c2:	bc08      	pop	{r3}
 800a2c4:	469e      	mov	lr, r3
 800a2c6:	4770      	bx	lr

0800a2c8 <_fini>:
 800a2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ca:	bf00      	nop
 800a2cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2ce:	bc08      	pop	{r3}
 800a2d0:	469e      	mov	lr, r3
 800a2d2:	4770      	bx	lr
