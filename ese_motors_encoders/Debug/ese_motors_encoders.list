
ese_motors_encoders.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e70  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003034  08003034  00013034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800304c  0800304c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800304c  0800304c  0001304c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003054  08003054  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003054  08003054  00013054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003058  08003058  00013058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800305c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000000c  08003068  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08003068  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b64  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000206a  00000000  00000000  00030ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c58  00000000  00000000  00032c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b80  00000000  00000000  00033868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021803  00000000  00000000  000343e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f839  00000000  00000000  00055beb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ccae8  00000000  00000000  00065424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00131f0c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032f8  00000000  00000000  00131f60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800301c 	.word	0x0800301c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	0800301c 	.word	0x0800301c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96e 	b.w	80004f8 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468c      	mov	ip, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 8083 	bne.w	800034a <__udivmoddi4+0x116>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d947      	bls.n	80002da <__udivmoddi4+0xa6>
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	b142      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 8000250:	f1c2 0020 	rsb	r0, r2, #32
 8000254:	fa24 f000 	lsr.w	r0, r4, r0
 8000258:	4091      	lsls	r1, r2
 800025a:	4097      	lsls	r7, r2
 800025c:	ea40 0c01 	orr.w	ip, r0, r1
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbbc f6f8 	udiv	r6, ip, r8
 800026c:	fa1f fe87 	uxth.w	lr, r7
 8000270:	fb08 c116 	mls	r1, r8, r6, ip
 8000274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000278:	fb06 f10e 	mul.w	r1, r6, lr
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 8119 	bcs.w	80004bc <__udivmoddi4+0x288>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8116 	bls.w	80004bc <__udivmoddi4+0x288>
 8000290:	3e02      	subs	r6, #2
 8000292:	443b      	add	r3, r7
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8105 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f240 8102 	bls.w	80004c0 <__udivmoddi4+0x28c>
 80002bc:	3802      	subs	r0, #2
 80002be:	443c      	add	r4, r7
 80002c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c4:	eba4 040e 	sub.w	r4, r4, lr
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xaa>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d150      	bne.n	8000388 <__udivmoddi4+0x154>
 80002e6:	1bcb      	subs	r3, r1, r7
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f f887 	uxth.w	r8, r7
 80002f0:	2601      	movs	r6, #1
 80002f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f6:	0c21      	lsrs	r1, r4, #16
 80002f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000300:	fb08 f30c 	mul.w	r3, r8, ip
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000308:	1879      	adds	r1, r7, r1
 800030a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0xe2>
 8000310:	428b      	cmp	r3, r1
 8000312:	f200 80e9 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 8000316:	4684      	mov	ip, r0
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	b2a3      	uxth	r3, r4
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fb0e 1110 	mls	r1, lr, r0, r1
 8000324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000328:	fb08 f800 	mul.w	r8, r8, r0
 800032c:	45a0      	cmp	r8, r4
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x10c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x10a>
 8000338:	45a0      	cmp	r8, r4
 800033a:	f200 80d9 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 800033e:	4618      	mov	r0, r3
 8000340:	eba4 0408 	sub.w	r4, r4, r8
 8000344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000348:	e7bf      	b.n	80002ca <__udivmoddi4+0x96>
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x12e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80b1 	beq.w	80004b6 <__udivmoddi4+0x282>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x1cc>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0x140>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80b8 	bhi.w	80004e4 <__udivmoddi4+0x2b0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0103 	sbc.w	r1, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	468c      	mov	ip, r1
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0a8      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000382:	e9c5 4c00 	strd	r4, ip, [r5]
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000388:	f1c2 0320 	rsb	r3, r2, #32
 800038c:	fa20 f603 	lsr.w	r6, r0, r3
 8000390:	4097      	lsls	r7, r2
 8000392:	fa01 f002 	lsl.w	r0, r1, r2
 8000396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039a:	40d9      	lsrs	r1, r3
 800039c:	4330      	orrs	r0, r6
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a4:	fa1f f887 	uxth.w	r8, r7
 80003a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb06 f108 	mul.w	r1, r6, r8
 80003b4:	4299      	cmp	r1, r3
 80003b6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x19c>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c2:	f080 808d 	bcs.w	80004e0 <__udivmoddi4+0x2ac>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 808a 	bls.w	80004e0 <__udivmoddi4+0x2ac>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b281      	uxth	r1, r0
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e0:	fb00 f308 	mul.w	r3, r0, r8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x1c4>
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ee:	d273      	bcs.n	80004d8 <__udivmoddi4+0x2a4>
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d971      	bls.n	80004d8 <__udivmoddi4+0x2a4>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4439      	add	r1, r7
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fe:	e778      	b.n	80002f2 <__udivmoddi4+0xbe>
 8000400:	f1c6 0c20 	rsb	ip, r6, #32
 8000404:	fa03 f406 	lsl.w	r4, r3, r6
 8000408:	fa22 f30c 	lsr.w	r3, r2, ip
 800040c:	431c      	orrs	r4, r3
 800040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041a:	fa21 f10c 	lsr.w	r1, r1, ip
 800041e:	431f      	orrs	r7, r3
 8000420:	0c3b      	lsrs	r3, r7, #16
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fa1f f884 	uxth.w	r8, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000432:	fb09 fa08 	mul.w	sl, r9, r8
 8000436:	458a      	cmp	sl, r1
 8000438:	fa02 f206 	lsl.w	r2, r2, r6
 800043c:	fa00 f306 	lsl.w	r3, r0, r6
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x220>
 8000442:	1861      	adds	r1, r4, r1
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295
 8000448:	d248      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 800044a:	458a      	cmp	sl, r1
 800044c:	d946      	bls.n	80004dc <__udivmoddi4+0x2a8>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4421      	add	r1, r4
 8000454:	eba1 010a 	sub.w	r1, r1, sl
 8000458:	b2bf      	uxth	r7, r7
 800045a:	fbb1 f0fe 	udiv	r0, r1, lr
 800045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45b8      	cmp	r8, r7
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x24a>
 800046e:	19e7      	adds	r7, r4, r7
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295
 8000474:	d22e      	bcs.n	80004d4 <__udivmoddi4+0x2a0>
 8000476:	45b8      	cmp	r8, r7
 8000478:	d92c      	bls.n	80004d4 <__udivmoddi4+0x2a0>
 800047a:	3802      	subs	r0, #2
 800047c:	4427      	add	r7, r4
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba7 0708 	sub.w	r7, r7, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454f      	cmp	r7, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	4649      	mov	r1, r9
 8000490:	d31a      	bcc.n	80004c8 <__udivmoddi4+0x294>
 8000492:	d017      	beq.n	80004c4 <__udivmoddi4+0x290>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x27a>
 8000496:	ebb3 020e 	subs.w	r2, r3, lr
 800049a:	eb67 0701 	sbc.w	r7, r7, r1
 800049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a2:	40f2      	lsrs	r2, r6
 80004a4:	ea4c 0202 	orr.w	r2, ip, r2
 80004a8:	40f7      	lsrs	r7, r6
 80004aa:	e9c5 2700 	strd	r2, r7, [r5]
 80004ae:	2600      	movs	r6, #0
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e70b      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fd      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c4:	4543      	cmp	r3, r8
 80004c6:	d2e5      	bcs.n	8000494 <__udivmoddi4+0x260>
 80004c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004cc:	eb69 0104 	sbc.w	r1, r9, r4
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7df      	b.n	8000494 <__udivmoddi4+0x260>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e7d2      	b.n	800047e <__udivmoddi4+0x24a>
 80004d8:	4660      	mov	r0, ip
 80004da:	e78d      	b.n	80003f8 <__udivmoddi4+0x1c4>
 80004dc:	4681      	mov	r9, r0
 80004de:	e7b9      	b.n	8000454 <__udivmoddi4+0x220>
 80004e0:	4666      	mov	r6, ip
 80004e2:	e775      	b.n	80003d0 <__udivmoddi4+0x19c>
 80004e4:	4630      	mov	r0, r6
 80004e6:	e74a      	b.n	800037e <__udivmoddi4+0x14a>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	4439      	add	r1, r7
 80004ee:	e713      	b.n	8000318 <__udivmoddi4+0xe4>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	e724      	b.n	8000340 <__udivmoddi4+0x10c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <Mot_Init_SetTimer>:
 *	@param	Motor is a Mot_Struct structure
 *	@param 	htim is the TIM handle
 *  @param  Channel is the TIM Channels
 *	@retval 0
 */
uint8_t Mot_Init_SetTimer(Mot_Struct* Motor, TIM_HandleTypeDef *htim, uint32_t Channel){
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af00      	add	r7, sp, #0
 8000502:	60f8      	str	r0, [r7, #12]
 8000504:	60b9      	str	r1, [r7, #8]
 8000506:	607a      	str	r2, [r7, #4]
	Motor->Timer = htim;
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	68ba      	ldr	r2, [r7, #8]
 800050c:	601a      	str	r2, [r3, #0]
	Motor->Timer_Channel = Channel;
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	687a      	ldr	r2, [r7, #4]
 8000512:	605a      	str	r2, [r3, #4]

	HAL_TIM_PWM_Start(Motor->Timer, Motor->Timer_Channel);
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	685b      	ldr	r3, [r3, #4]
 800051c:	4619      	mov	r1, r3
 800051e:	4610      	mov	r0, r2
 8000520:	f001 fd0a 	bl	8001f38 <HAL_TIM_PWM_Start>
	return 0;
 8000524:	2300      	movs	r3, #0
}
 8000526:	4618      	mov	r0, r3
 8000528:	3710      	adds	r7, #16
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}

0800052e <Mot_Init_SetGPIOs>:
 *	@param 	IN2_GPIOx is a GPIOx where x can be (A..K) to select the GPIO peripheral for STM32
 *  @param  IN2_GPIO_Pin specifies the port bit
 *	@retval 0
 */
uint8_t Mot_Init_SetGPIOs(Mot_Struct* Motor, GPIO_TypeDef* IN1_GPIOx, uint16_t IN1_GPIO_Pin,
		GPIO_TypeDef* IN2_GPIOx, uint16_t IN2_GPIO_Pin){
 800052e:	b480      	push	{r7}
 8000530:	b085      	sub	sp, #20
 8000532:	af00      	add	r7, sp, #0
 8000534:	60f8      	str	r0, [r7, #12]
 8000536:	60b9      	str	r1, [r7, #8]
 8000538:	603b      	str	r3, [r7, #0]
 800053a:	4613      	mov	r3, r2
 800053c:	80fb      	strh	r3, [r7, #6]
	Motor->IN1_GPIOx = IN1_GPIOx;
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	68ba      	ldr	r2, [r7, #8]
 8000542:	609a      	str	r2, [r3, #8]
	Motor->IN1_GPIO_Pin = IN1_GPIO_Pin;
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	88fa      	ldrh	r2, [r7, #6]
 8000548:	819a      	strh	r2, [r3, #12]
	Motor->IN2_GPIOx = IN2_GPIOx;
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	683a      	ldr	r2, [r7, #0]
 800054e:	611a      	str	r2, [r3, #16]
	Motor->IN2_GPIO_Pin = IN2_GPIO_Pin;
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	8b3a      	ldrh	r2, [r7, #24]
 8000554:	829a      	strh	r2, [r3, #20]
	return 0;
 8000556:	2300      	movs	r3, #0
}
 8000558:	4618      	mov	r0, r3
 800055a:	3714      	adds	r7, #20
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr

08000564 <Mot_SetDirection>:
 *		@arg 	MOTOR_FORWARD
 *		@arg 	MOTOR_REVERSE
 *	@retval 0
 */

uint8_t Mot_SetDirection(Mot_Struct* Motor, uint8_t direction){
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
 800056c:	460b      	mov	r3, r1
 800056e:	70fb      	strb	r3, [r7, #3]
	switch(direction){
 8000570:	78fb      	ldrb	r3, [r7, #3]
 8000572:	2b02      	cmp	r3, #2
 8000574:	d028      	beq.n	80005c8 <Mot_SetDirection+0x64>
 8000576:	2b02      	cmp	r3, #2
 8000578:	dc37      	bgt.n	80005ea <Mot_SetDirection+0x86>
 800057a:	2b00      	cmp	r3, #0
 800057c:	d002      	beq.n	8000584 <Mot_SetDirection+0x20>
 800057e:	2b01      	cmp	r3, #1
 8000580:	d011      	beq.n	80005a6 <Mot_SetDirection+0x42>
 8000582:	e032      	b.n	80005ea <Mot_SetDirection+0x86>

	case MOTOR_STOP:
		HAL_GPIO_WritePin(Motor->IN1_GPIOx, Motor->IN1_GPIO_Pin, GPIO_PIN_RESET);
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	6898      	ldr	r0, [r3, #8]
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	899b      	ldrh	r3, [r3, #12]
 800058c:	2200      	movs	r2, #0
 800058e:	4619      	mov	r1, r3
 8000590:	f000 fea6 	bl	80012e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor->IN2_GPIOx, Motor->IN2_GPIO_Pin, GPIO_PIN_RESET);
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	6918      	ldr	r0, [r3, #16]
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	8a9b      	ldrh	r3, [r3, #20]
 800059c:	2200      	movs	r2, #0
 800059e:	4619      	mov	r1, r3
 80005a0:	f000 fe9e 	bl	80012e0 <HAL_GPIO_WritePin>
		break;
 80005a4:	e031      	b.n	800060a <Mot_SetDirection+0xa6>

	case MOTOR_FORWARD:
		HAL_GPIO_WritePin(Motor->IN1_GPIOx, Motor->IN1_GPIO_Pin, GPIO_PIN_SET);
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	6898      	ldr	r0, [r3, #8]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	899b      	ldrh	r3, [r3, #12]
 80005ae:	2201      	movs	r2, #1
 80005b0:	4619      	mov	r1, r3
 80005b2:	f000 fe95 	bl	80012e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor->IN2_GPIOx, Motor->IN2_GPIO_Pin, GPIO_PIN_RESET);
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	6918      	ldr	r0, [r3, #16]
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	8a9b      	ldrh	r3, [r3, #20]
 80005be:	2200      	movs	r2, #0
 80005c0:	4619      	mov	r1, r3
 80005c2:	f000 fe8d 	bl	80012e0 <HAL_GPIO_WritePin>
		break;
 80005c6:	e020      	b.n	800060a <Mot_SetDirection+0xa6>

	case MOTOR_REVERSE:
		HAL_GPIO_WritePin(Motor->IN1_GPIOx, Motor->IN1_GPIO_Pin, GPIO_PIN_RESET);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	6898      	ldr	r0, [r3, #8]
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	899b      	ldrh	r3, [r3, #12]
 80005d0:	2200      	movs	r2, #0
 80005d2:	4619      	mov	r1, r3
 80005d4:	f000 fe84 	bl	80012e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor->IN2_GPIOx, Motor->IN2_GPIO_Pin, GPIO_PIN_SET);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	6918      	ldr	r0, [r3, #16]
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	8a9b      	ldrh	r3, [r3, #20]
 80005e0:	2201      	movs	r2, #1
 80005e2:	4619      	mov	r1, r3
 80005e4:	f000 fe7c 	bl	80012e0 <HAL_GPIO_WritePin>
		break;
 80005e8:	e00f      	b.n	800060a <Mot_SetDirection+0xa6>

	default:
		HAL_GPIO_WritePin(Motor->IN1_GPIOx, Motor->IN1_GPIO_Pin, GPIO_PIN_RESET);
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	6898      	ldr	r0, [r3, #8]
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	899b      	ldrh	r3, [r3, #12]
 80005f2:	2200      	movs	r2, #0
 80005f4:	4619      	mov	r1, r3
 80005f6:	f000 fe73 	bl	80012e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor->IN2_GPIOx, Motor->IN2_GPIO_Pin, GPIO_PIN_RESET);
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	6918      	ldr	r0, [r3, #16]
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	8a9b      	ldrh	r3, [r3, #20]
 8000602:	2200      	movs	r2, #0
 8000604:	4619      	mov	r1, r3
 8000606:	f000 fe6b 	bl	80012e0 <HAL_GPIO_WritePin>
	}
}
 800060a:	bf00      	nop
 800060c:	4618      	mov	r0, r3
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <Mot_SetDutyCycle>:
/*	@brief	Set the PWM Duty Cycle
 *	@param	Motor is a Mot_Struct structure
 *	@param	duty_cycle is value between 0 and 100
 *	@retval 0
 */
uint8_t Mot_SetDutyCycle(Mot_Struct* Motor, uint8_t duty_cycle){
 8000614:	b480      	push	{r7}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	460b      	mov	r3, r1
 800061e:	70fb      	strb	r3, [r7, #3]
	if(duty_cycle > 100) duty_cycle = 100;
 8000620:	78fb      	ldrb	r3, [r7, #3]
 8000622:	2b64      	cmp	r3, #100	; 0x64
 8000624:	d901      	bls.n	800062a <Mot_SetDutyCycle+0x16>
 8000626:	2364      	movs	r3, #100	; 0x64
 8000628:	70fb      	strb	r3, [r7, #3]

	float pulse = ((float)duty_cycle / 100) * (float)COUNTER_PERIOD;
 800062a:	78fb      	ldrb	r3, [r7, #3]
 800062c:	ee07 3a90 	vmov	s15, r3
 8000630:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000634:	eddf 6a23 	vldr	s13, [pc, #140]	; 80006c4 <Mot_SetDutyCycle+0xb0>
 8000638:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800063c:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80006c8 <Mot_SetDutyCycle+0xb4>
 8000640:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000644:	edc7 7a03 	vstr	s15, [r7, #12]

	__HAL_TIM_SET_COMPARE(Motor->Timer, Motor->Timer_Channel, (uint32_t)pulse);
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	685b      	ldr	r3, [r3, #4]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d10a      	bne.n	8000666 <Mot_SetDutyCycle+0x52>
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	edd7 7a03 	vldr	s15, [r7, #12]
 800065a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800065e:	ee17 2a90 	vmov	r2, s15
 8000662:	635a      	str	r2, [r3, #52]	; 0x34
 8000664:	e027      	b.n	80006b6 <Mot_SetDutyCycle+0xa2>
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	685b      	ldr	r3, [r3, #4]
 800066a:	2b04      	cmp	r3, #4
 800066c:	d10a      	bne.n	8000684 <Mot_SetDutyCycle+0x70>
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	681a      	ldr	r2, [r3, #0]
 8000674:	edd7 7a03 	vldr	s15, [r7, #12]
 8000678:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800067c:	ee17 3a90 	vmov	r3, s15
 8000680:	6393      	str	r3, [r2, #56]	; 0x38
 8000682:	e018      	b.n	80006b6 <Mot_SetDutyCycle+0xa2>
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	685b      	ldr	r3, [r3, #4]
 8000688:	2b08      	cmp	r3, #8
 800068a:	d10a      	bne.n	80006a2 <Mot_SetDutyCycle+0x8e>
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	681a      	ldr	r2, [r3, #0]
 8000692:	edd7 7a03 	vldr	s15, [r7, #12]
 8000696:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800069a:	ee17 3a90 	vmov	r3, s15
 800069e:	63d3      	str	r3, [r2, #60]	; 0x3c
 80006a0:	e009      	b.n	80006b6 <Mot_SetDutyCycle+0xa2>
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	681a      	ldr	r2, [r3, #0]
 80006a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80006ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006b0:	ee17 3a90 	vmov	r3, s15
 80006b4:	6413      	str	r3, [r2, #64]	; 0x40
	return 0;
 80006b6:	2300      	movs	r3, #0
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3714      	adds	r7, #20
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	42c80000 	.word	0x42c80000
 80006c8:	42200000 	.word	0x42200000

080006cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08a      	sub	sp, #40	; 0x28
 80006d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d2:	f107 0314 	add.w	r3, r7, #20
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	613b      	str	r3, [r7, #16]
 80006e6:	4b37      	ldr	r3, [pc, #220]	; (80007c4 <MX_GPIO_Init+0xf8>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a36      	ldr	r2, [pc, #216]	; (80007c4 <MX_GPIO_Init+0xf8>)
 80006ec:	f043 0304 	orr.w	r3, r3, #4
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b34      	ldr	r3, [pc, #208]	; (80007c4 <MX_GPIO_Init+0xf8>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0304 	and.w	r3, r3, #4
 80006fa:	613b      	str	r3, [r7, #16]
 80006fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	4b30      	ldr	r3, [pc, #192]	; (80007c4 <MX_GPIO_Init+0xf8>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a2f      	ldr	r2, [pc, #188]	; (80007c4 <MX_GPIO_Init+0xf8>)
 8000708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b2d      	ldr	r3, [pc, #180]	; (80007c4 <MX_GPIO_Init+0xf8>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	4b29      	ldr	r3, [pc, #164]	; (80007c4 <MX_GPIO_Init+0xf8>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a28      	ldr	r2, [pc, #160]	; (80007c4 <MX_GPIO_Init+0xf8>)
 8000724:	f043 0301 	orr.w	r3, r3, #1
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b26      	ldr	r3, [pc, #152]	; (80007c4 <MX_GPIO_Init+0xf8>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	4b22      	ldr	r3, [pc, #136]	; (80007c4 <MX_GPIO_Init+0xf8>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a21      	ldr	r2, [pc, #132]	; (80007c4 <MX_GPIO_Init+0xf8>)
 8000740:	f043 0302 	orr.w	r3, r3, #2
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b1f      	ldr	r3, [pc, #124]	; (80007c4 <MX_GPIO_Init+0xf8>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0302 	and.w	r3, r3, #2
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IN1_Pin|IN2_Pin, GPIO_PIN_RESET);
 8000752:	2200      	movs	r2, #0
 8000754:	2103      	movs	r1, #3
 8000756:	481c      	ldr	r0, [pc, #112]	; (80007c8 <MX_GPIO_Init+0xfc>)
 8000758:	f000 fdc2 	bl	80012e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800075c:	2200      	movs	r2, #0
 800075e:	2120      	movs	r1, #32
 8000760:	481a      	ldr	r0, [pc, #104]	; (80007cc <MX_GPIO_Init+0x100>)
 8000762:	f000 fdbd 	bl	80012e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000766:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800076a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800076c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000770:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000776:	f107 0314 	add.w	r3, r7, #20
 800077a:	4619      	mov	r1, r3
 800077c:	4812      	ldr	r0, [pc, #72]	; (80007c8 <MX_GPIO_Init+0xfc>)
 800077e:	f000 fc1b 	bl	8000fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin;
 8000782:	2303      	movs	r3, #3
 8000784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000786:	2301      	movs	r3, #1
 8000788:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078e:	2300      	movs	r3, #0
 8000790:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000792:	f107 0314 	add.w	r3, r7, #20
 8000796:	4619      	mov	r1, r3
 8000798:	480b      	ldr	r0, [pc, #44]	; (80007c8 <MX_GPIO_Init+0xfc>)
 800079a:	f000 fc0d 	bl	8000fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800079e:	2320      	movs	r3, #32
 80007a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a2:	2301      	movs	r3, #1
 80007a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007aa:	2300      	movs	r3, #0
 80007ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007ae:	f107 0314 	add.w	r3, r7, #20
 80007b2:	4619      	mov	r1, r3
 80007b4:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_GPIO_Init+0x100>)
 80007b6:	f000 fbff 	bl	8000fb8 <HAL_GPIO_Init>

}
 80007ba:	bf00      	nop
 80007bc:	3728      	adds	r7, #40	; 0x28
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40023800 	.word	0x40023800
 80007c8:	40020800 	.word	0x40020800
 80007cc:	40020000 	.word	0x40020000

080007d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08a      	sub	sp, #40	; 0x28
 80007d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d6:	f000 fa97 	bl	8000d08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007da:	f000 f825 	bl	8000828 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007de:	f7ff ff75 	bl	80006cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007e2:	f000 f9f5 	bl	8000bd0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80007e6:	f000 f8f7 	bl	80009d8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  // Initilisation du Moteur A
  Mot_Struct MoteurA;
  Mot_Init_SetTimer(&MoteurA, &htim1, TIM_CHANNEL_1);
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	2200      	movs	r2, #0
 80007ee:	490c      	ldr	r1, [pc, #48]	; (8000820 <main+0x50>)
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff fe83 	bl	80004fc <Mot_Init_SetTimer>
  Mot_Init_SetGPIOs(&MoteurA, GPIOC, GPIO_PIN_0, GPIOC, GPIO_PIN_1); // IN1:PC0 et IN2:PC1
 80007f6:	1d38      	adds	r0, r7, #4
 80007f8:	2302      	movs	r3, #2
 80007fa:	9300      	str	r3, [sp, #0]
 80007fc:	4b09      	ldr	r3, [pc, #36]	; (8000824 <main+0x54>)
 80007fe:	2201      	movs	r2, #1
 8000800:	4908      	ldr	r1, [pc, #32]	; (8000824 <main+0x54>)
 8000802:	f7ff fe94 	bl	800052e <Mot_Init_SetGPIOs>
  Mot_SetDirection(&MoteurA, MOTOR_FORWARD);
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	2101      	movs	r1, #1
 800080a:	4618      	mov	r0, r3
 800080c:	f7ff feaa 	bl	8000564 <Mot_SetDirection>
  Mot_SetDutyCycle(&MoteurA, 50);
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	2132      	movs	r1, #50	; 0x32
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff fefd 	bl	8000614 <Mot_SetDutyCycle>

  int i=0;
 800081a:	2300      	movs	r3, #0
 800081c:	61fb      	str	r3, [r7, #28]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800081e:	e7fe      	b.n	800081e <main+0x4e>
 8000820:	20000028 	.word	0x20000028
 8000824:	40020800 	.word	0x40020800

08000828 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b094      	sub	sp, #80	; 0x50
 800082c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	2234      	movs	r2, #52	; 0x34
 8000834:	2100      	movs	r1, #0
 8000836:	4618      	mov	r0, r3
 8000838:	f002 fbe8 	bl	800300c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800083c:	f107 0308 	add.w	r3, r7, #8
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800084c:	2300      	movs	r3, #0
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	4b2a      	ldr	r3, [pc, #168]	; (80008fc <SystemClock_Config+0xd4>)
 8000852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000854:	4a29      	ldr	r2, [pc, #164]	; (80008fc <SystemClock_Config+0xd4>)
 8000856:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800085a:	6413      	str	r3, [r2, #64]	; 0x40
 800085c:	4b27      	ldr	r3, [pc, #156]	; (80008fc <SystemClock_Config+0xd4>)
 800085e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000868:	2300      	movs	r3, #0
 800086a:	603b      	str	r3, [r7, #0]
 800086c:	4b24      	ldr	r3, [pc, #144]	; (8000900 <SystemClock_Config+0xd8>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000874:	4a22      	ldr	r2, [pc, #136]	; (8000900 <SystemClock_Config+0xd8>)
 8000876:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800087a:	6013      	str	r3, [r2, #0]
 800087c:	4b20      	ldr	r3, [pc, #128]	; (8000900 <SystemClock_Config+0xd8>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000884:	603b      	str	r3, [r7, #0]
 8000886:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000888:	2302      	movs	r3, #2
 800088a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800088c:	2301      	movs	r3, #1
 800088e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000890:	2310      	movs	r3, #16
 8000892:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000894:	2302      	movs	r3, #2
 8000896:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000898:	2300      	movs	r3, #0
 800089a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800089c:	2310      	movs	r3, #16
 800089e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008a0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80008a4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008a6:	2304      	movs	r3, #4
 80008a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008aa:	2302      	movs	r3, #2
 80008ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008ae:	2302      	movs	r3, #2
 80008b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	4618      	mov	r0, r3
 80008b8:	f000 fff8 	bl	80018ac <HAL_RCC_OscConfig>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80008c2:	f000 f81f 	bl	8000904 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c6:	230f      	movs	r3, #15
 80008c8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ca:	2302      	movs	r3, #2
 80008cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ce:	2300      	movs	r3, #0
 80008d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008d8:	2300      	movs	r3, #0
 80008da:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008dc:	f107 0308 	add.w	r3, r7, #8
 80008e0:	2102      	movs	r1, #2
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 fd16 	bl	8001314 <HAL_RCC_ClockConfig>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80008ee:	f000 f809 	bl	8000904 <Error_Handler>
  }
}
 80008f2:	bf00      	nop
 80008f4:	3750      	adds	r7, #80	; 0x50
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40023800 	.word	0x40023800
 8000900:	40007000 	.word	0x40007000

08000904 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000908:	b672      	cpsid	i
}
 800090a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800090c:	e7fe      	b.n	800090c <Error_Handler+0x8>
	...

08000910 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	607b      	str	r3, [r7, #4]
 800091a:	4b10      	ldr	r3, [pc, #64]	; (800095c <HAL_MspInit+0x4c>)
 800091c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091e:	4a0f      	ldr	r2, [pc, #60]	; (800095c <HAL_MspInit+0x4c>)
 8000920:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000924:	6453      	str	r3, [r2, #68]	; 0x44
 8000926:	4b0d      	ldr	r3, [pc, #52]	; (800095c <HAL_MspInit+0x4c>)
 8000928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	603b      	str	r3, [r7, #0]
 8000936:	4b09      	ldr	r3, [pc, #36]	; (800095c <HAL_MspInit+0x4c>)
 8000938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093a:	4a08      	ldr	r2, [pc, #32]	; (800095c <HAL_MspInit+0x4c>)
 800093c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000940:	6413      	str	r3, [r2, #64]	; 0x40
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <HAL_MspInit+0x4c>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800094a:	603b      	str	r3, [r7, #0]
 800094c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800094e:	2007      	movs	r0, #7
 8000950:	f000 fafe 	bl	8000f50 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000954:	bf00      	nop
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40023800 	.word	0x40023800

08000960 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000964:	e7fe      	b.n	8000964 <NMI_Handler+0x4>

08000966 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800096a:	e7fe      	b.n	800096a <HardFault_Handler+0x4>

0800096c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000970:	e7fe      	b.n	8000970 <MemManage_Handler+0x4>

08000972 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000976:	e7fe      	b.n	8000976 <BusFault_Handler+0x4>

08000978 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800097c:	e7fe      	b.n	800097c <UsageFault_Handler+0x4>

0800097e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr

0800099a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ac:	f000 f9fe 	bl	8000dac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b0:	bf00      	nop
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <SystemInit+0x20>)
 80009ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009be:	4a05      	ldr	r2, [pc, #20]	; (80009d4 <SystemInit+0x20>)
 80009c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	e000ed00 	.word	0xe000ed00

080009d8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b096      	sub	sp, #88	; 0x58
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
 80009ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
 8000a02:	60da      	str	r2, [r3, #12]
 8000a04:	611a      	str	r2, [r3, #16]
 8000a06:	615a      	str	r2, [r3, #20]
 8000a08:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a0a:	1d3b      	adds	r3, r7, #4
 8000a0c:	2220      	movs	r2, #32
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4618      	mov	r0, r3
 8000a12:	f002 fafb 	bl	800300c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a16:	4b3e      	ldr	r3, [pc, #248]	; (8000b10 <MX_TIM1_Init+0x138>)
 8000a18:	4a3e      	ldr	r2, [pc, #248]	; (8000b14 <MX_TIM1_Init+0x13c>)
 8000a1a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8000a1c:	4b3c      	ldr	r3, [pc, #240]	; (8000b10 <MX_TIM1_Init+0x138>)
 8000a1e:	2253      	movs	r2, #83	; 0x53
 8000a20:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a22:	4b3b      	ldr	r3, [pc, #236]	; (8000b10 <MX_TIM1_Init+0x138>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 40-1;
 8000a28:	4b39      	ldr	r3, [pc, #228]	; (8000b10 <MX_TIM1_Init+0x138>)
 8000a2a:	2227      	movs	r2, #39	; 0x27
 8000a2c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a2e:	4b38      	ldr	r3, [pc, #224]	; (8000b10 <MX_TIM1_Init+0x138>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a34:	4b36      	ldr	r3, [pc, #216]	; (8000b10 <MX_TIM1_Init+0x138>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a3a:	4b35      	ldr	r3, [pc, #212]	; (8000b10 <MX_TIM1_Init+0x138>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a40:	4833      	ldr	r0, [pc, #204]	; (8000b10 <MX_TIM1_Init+0x138>)
 8000a42:	f001 f9d1 	bl	8001de8 <HAL_TIM_Base_Init>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000a4c:	f7ff ff5a 	bl	8000904 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a54:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a56:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	482c      	ldr	r0, [pc, #176]	; (8000b10 <MX_TIM1_Init+0x138>)
 8000a5e:	f001 fbf5 	bl	800224c <HAL_TIM_ConfigClockSource>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000a68:	f7ff ff4c 	bl	8000904 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a6c:	4828      	ldr	r0, [pc, #160]	; (8000b10 <MX_TIM1_Init+0x138>)
 8000a6e:	f001 fa0a 	bl	8001e86 <HAL_TIM_PWM_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000a78:	f7ff ff44 	bl	8000904 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a80:	2300      	movs	r3, #0
 8000a82:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a84:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4821      	ldr	r0, [pc, #132]	; (8000b10 <MX_TIM1_Init+0x138>)
 8000a8c:	f001 ffb6 	bl	80029fc <HAL_TIMEx_MasterConfigSynchronization>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000a96:	f7ff ff35 	bl	8000904 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a9a:	2360      	movs	r3, #96	; 0x60
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000aaa:	2304      	movs	r3, #4
 8000aac:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ab6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aba:	2200      	movs	r2, #0
 8000abc:	4619      	mov	r1, r3
 8000abe:	4814      	ldr	r0, [pc, #80]	; (8000b10 <MX_TIM1_Init+0x138>)
 8000ac0:	f001 fb02 	bl	80020c8 <HAL_TIM_PWM_ConfigChannel>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000aca:	f7ff ff1b 	bl	8000904 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ada:	2300      	movs	r3, #0
 8000adc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ae2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ae6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000aec:	1d3b      	adds	r3, r7, #4
 8000aee:	4619      	mov	r1, r3
 8000af0:	4807      	ldr	r0, [pc, #28]	; (8000b10 <MX_TIM1_Init+0x138>)
 8000af2:	f001 ffff 	bl	8002af4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000afc:	f7ff ff02 	bl	8000904 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b00:	4803      	ldr	r0, [pc, #12]	; (8000b10 <MX_TIM1_Init+0x138>)
 8000b02:	f000 f82b 	bl	8000b5c <HAL_TIM_MspPostInit>

}
 8000b06:	bf00      	nop
 8000b08:	3758      	adds	r7, #88	; 0x58
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000028 	.word	0x20000028
 8000b14:	40010000 	.word	0x40010000

08000b18 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b085      	sub	sp, #20
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a0b      	ldr	r2, [pc, #44]	; (8000b54 <HAL_TIM_Base_MspInit+0x3c>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d10d      	bne.n	8000b46 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	4b0a      	ldr	r3, [pc, #40]	; (8000b58 <HAL_TIM_Base_MspInit+0x40>)
 8000b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b32:	4a09      	ldr	r2, [pc, #36]	; (8000b58 <HAL_TIM_Base_MspInit+0x40>)
 8000b34:	f043 0301 	orr.w	r3, r3, #1
 8000b38:	6453      	str	r3, [r2, #68]	; 0x44
 8000b3a:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <HAL_TIM_Base_MspInit+0x40>)
 8000b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000b46:	bf00      	nop
 8000b48:	3714      	adds	r7, #20
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	40010000 	.word	0x40010000
 8000b58:	40023800 	.word	0x40023800

08000b5c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b088      	sub	sp, #32
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b64:	f107 030c 	add.w	r3, r7, #12
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a12      	ldr	r2, [pc, #72]	; (8000bc4 <HAL_TIM_MspPostInit+0x68>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d11e      	bne.n	8000bbc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60bb      	str	r3, [r7, #8]
 8000b82:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <HAL_TIM_MspPostInit+0x6c>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a10      	ldr	r2, [pc, #64]	; (8000bc8 <HAL_TIM_MspPostInit+0x6c>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <HAL_TIM_MspPostInit+0x6c>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	60bb      	str	r3, [r7, #8]
 8000b98:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM1_Pin;
 8000b9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b9e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000bac:	2301      	movs	r3, #1
 8000bae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM1_GPIO_Port, &GPIO_InitStruct);
 8000bb0:	f107 030c 	add.w	r3, r7, #12
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4805      	ldr	r0, [pc, #20]	; (8000bcc <HAL_TIM_MspPostInit+0x70>)
 8000bb8:	f000 f9fe 	bl	8000fb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000bbc:	bf00      	nop
 8000bbe:	3720      	adds	r7, #32
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40010000 	.word	0x40010000
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40020000 	.word	0x40020000

08000bd0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bd4:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <MX_USART2_UART_Init+0x4c>)
 8000bd6:	4a12      	ldr	r2, [pc, #72]	; (8000c20 <MX_USART2_UART_Init+0x50>)
 8000bd8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bda:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <MX_USART2_UART_Init+0x4c>)
 8000bdc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000be0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000be2:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <MX_USART2_UART_Init+0x4c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000be8:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <MX_USART2_UART_Init+0x4c>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bee:	4b0b      	ldr	r3, [pc, #44]	; (8000c1c <MX_USART2_UART_Init+0x4c>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bf4:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <MX_USART2_UART_Init+0x4c>)
 8000bf6:	220c      	movs	r2, #12
 8000bf8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bfa:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <MX_USART2_UART_Init+0x4c>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <MX_USART2_UART_Init+0x4c>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c06:	4805      	ldr	r0, [pc, #20]	; (8000c1c <MX_USART2_UART_Init+0x4c>)
 8000c08:	f001 ffc6 	bl	8002b98 <HAL_UART_Init>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c12:	f7ff fe77 	bl	8000904 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000070 	.word	0x20000070
 8000c20:	40004400 	.word	0x40004400

08000c24 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08a      	sub	sp, #40	; 0x28
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a19      	ldr	r2, [pc, #100]	; (8000ca8 <HAL_UART_MspInit+0x84>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d12b      	bne.n	8000c9e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	613b      	str	r3, [r7, #16]
 8000c4a:	4b18      	ldr	r3, [pc, #96]	; (8000cac <HAL_UART_MspInit+0x88>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4e:	4a17      	ldr	r2, [pc, #92]	; (8000cac <HAL_UART_MspInit+0x88>)
 8000c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c54:	6413      	str	r3, [r2, #64]	; 0x40
 8000c56:	4b15      	ldr	r3, [pc, #84]	; (8000cac <HAL_UART_MspInit+0x88>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c5e:	613b      	str	r3, [r7, #16]
 8000c60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	4b11      	ldr	r3, [pc, #68]	; (8000cac <HAL_UART_MspInit+0x88>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a10      	ldr	r2, [pc, #64]	; (8000cac <HAL_UART_MspInit+0x88>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <HAL_UART_MspInit+0x88>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c7e:	230c      	movs	r3, #12
 8000c80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c8e:	2307      	movs	r3, #7
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	4619      	mov	r1, r3
 8000c98:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <HAL_UART_MspInit+0x8c>)
 8000c9a:	f000 f98d 	bl	8000fb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c9e:	bf00      	nop
 8000ca0:	3728      	adds	r7, #40	; 0x28
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40004400 	.word	0x40004400
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	40020000 	.word	0x40020000

08000cb4 <Reset_Handler>:
 8000cb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cec <LoopFillZerobss+0x12>
 8000cb8:	480d      	ldr	r0, [pc, #52]	; (8000cf0 <LoopFillZerobss+0x16>)
 8000cba:	490e      	ldr	r1, [pc, #56]	; (8000cf4 <LoopFillZerobss+0x1a>)
 8000cbc:	4a0e      	ldr	r2, [pc, #56]	; (8000cf8 <LoopFillZerobss+0x1e>)
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	e002      	b.n	8000cc8 <LoopCopyDataInit>

08000cc2 <CopyDataInit>:
 8000cc2:	58d4      	ldr	r4, [r2, r3]
 8000cc4:	50c4      	str	r4, [r0, r3]
 8000cc6:	3304      	adds	r3, #4

08000cc8 <LoopCopyDataInit>:
 8000cc8:	18c4      	adds	r4, r0, r3
 8000cca:	428c      	cmp	r4, r1
 8000ccc:	d3f9      	bcc.n	8000cc2 <CopyDataInit>
 8000cce:	4a0b      	ldr	r2, [pc, #44]	; (8000cfc <LoopFillZerobss+0x22>)
 8000cd0:	4c0b      	ldr	r4, [pc, #44]	; (8000d00 <LoopFillZerobss+0x26>)
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	e001      	b.n	8000cda <LoopFillZerobss>

08000cd6 <FillZerobss>:
 8000cd6:	6013      	str	r3, [r2, #0]
 8000cd8:	3204      	adds	r2, #4

08000cda <LoopFillZerobss>:
 8000cda:	42a2      	cmp	r2, r4
 8000cdc:	d3fb      	bcc.n	8000cd6 <FillZerobss>
 8000cde:	f7ff fe69 	bl	80009b4 <SystemInit>
 8000ce2:	f002 f96f 	bl	8002fc4 <__libc_init_array>
 8000ce6:	f7ff fd73 	bl	80007d0 <main>
 8000cea:	4770      	bx	lr
 8000cec:	20020000 	.word	0x20020000
 8000cf0:	20000000 	.word	0x20000000
 8000cf4:	2000000c 	.word	0x2000000c
 8000cf8:	0800305c 	.word	0x0800305c
 8000cfc:	2000000c 	.word	0x2000000c
 8000d00:	200000b8 	.word	0x200000b8

08000d04 <ADC_IRQHandler>:
 8000d04:	e7fe      	b.n	8000d04 <ADC_IRQHandler>
	...

08000d08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d0c:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <HAL_Init+0x40>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a0d      	ldr	r2, [pc, #52]	; (8000d48 <HAL_Init+0x40>)
 8000d12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d18:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <HAL_Init+0x40>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a0a      	ldr	r2, [pc, #40]	; (8000d48 <HAL_Init+0x40>)
 8000d1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d24:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <HAL_Init+0x40>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a07      	ldr	r2, [pc, #28]	; (8000d48 <HAL_Init+0x40>)
 8000d2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d30:	2003      	movs	r0, #3
 8000d32:	f000 f90d 	bl	8000f50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d36:	2000      	movs	r0, #0
 8000d38:	f000 f808 	bl	8000d4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d3c:	f7ff fde8 	bl	8000910 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d40:	2300      	movs	r3, #0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40023c00 	.word	0x40023c00

08000d4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d54:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <HAL_InitTick+0x54>)
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <HAL_InitTick+0x58>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f000 f917 	bl	8000f9e <HAL_SYSTICK_Config>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
 8000d78:	e00e      	b.n	8000d98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2b0f      	cmp	r3, #15
 8000d7e:	d80a      	bhi.n	8000d96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d80:	2200      	movs	r2, #0
 8000d82:	6879      	ldr	r1, [r7, #4]
 8000d84:	f04f 30ff 	mov.w	r0, #4294967295
 8000d88:	f000 f8ed 	bl	8000f66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d8c:	4a06      	ldr	r2, [pc, #24]	; (8000da8 <HAL_InitTick+0x5c>)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d92:	2300      	movs	r3, #0
 8000d94:	e000      	b.n	8000d98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000000 	.word	0x20000000
 8000da4:	20000008 	.word	0x20000008
 8000da8:	20000004 	.word	0x20000004

08000dac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <HAL_IncTick+0x20>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	461a      	mov	r2, r3
 8000db6:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <HAL_IncTick+0x24>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4413      	add	r3, r2
 8000dbc:	4a04      	ldr	r2, [pc, #16]	; (8000dd0 <HAL_IncTick+0x24>)
 8000dbe:	6013      	str	r3, [r2, #0]
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	20000008 	.word	0x20000008
 8000dd0:	200000b4 	.word	0x200000b4

08000dd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd8:	4b03      	ldr	r3, [pc, #12]	; (8000de8 <HAL_GetTick+0x14>)
 8000dda:	681b      	ldr	r3, [r3, #0]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	200000b4 	.word	0x200000b4

08000dec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	f003 0307 	and.w	r3, r3, #7
 8000dfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <__NVIC_SetPriorityGrouping+0x44>)
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e02:	68ba      	ldr	r2, [r7, #8]
 8000e04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e08:	4013      	ands	r3, r2
 8000e0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e1e:	4a04      	ldr	r2, [pc, #16]	; (8000e30 <__NVIC_SetPriorityGrouping+0x44>)
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	60d3      	str	r3, [r2, #12]
}
 8000e24:	bf00      	nop
 8000e26:	3714      	adds	r7, #20
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e38:	4b04      	ldr	r3, [pc, #16]	; (8000e4c <__NVIC_GetPriorityGrouping+0x18>)
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	0a1b      	lsrs	r3, r3, #8
 8000e3e:	f003 0307 	and.w	r3, r3, #7
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	6039      	str	r1, [r7, #0]
 8000e5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	db0a      	blt.n	8000e7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	b2da      	uxtb	r2, r3
 8000e68:	490c      	ldr	r1, [pc, #48]	; (8000e9c <__NVIC_SetPriority+0x4c>)
 8000e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6e:	0112      	lsls	r2, r2, #4
 8000e70:	b2d2      	uxtb	r2, r2
 8000e72:	440b      	add	r3, r1
 8000e74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e78:	e00a      	b.n	8000e90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	b2da      	uxtb	r2, r3
 8000e7e:	4908      	ldr	r1, [pc, #32]	; (8000ea0 <__NVIC_SetPriority+0x50>)
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	f003 030f 	and.w	r3, r3, #15
 8000e86:	3b04      	subs	r3, #4
 8000e88:	0112      	lsls	r2, r2, #4
 8000e8a:	b2d2      	uxtb	r2, r2
 8000e8c:	440b      	add	r3, r1
 8000e8e:	761a      	strb	r2, [r3, #24]
}
 8000e90:	bf00      	nop
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	e000e100 	.word	0xe000e100
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b089      	sub	sp, #36	; 0x24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	f003 0307 	and.w	r3, r3, #7
 8000eb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	f1c3 0307 	rsb	r3, r3, #7
 8000ebe:	2b04      	cmp	r3, #4
 8000ec0:	bf28      	it	cs
 8000ec2:	2304      	movcs	r3, #4
 8000ec4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	3304      	adds	r3, #4
 8000eca:	2b06      	cmp	r3, #6
 8000ecc:	d902      	bls.n	8000ed4 <NVIC_EncodePriority+0x30>
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	3b03      	subs	r3, #3
 8000ed2:	e000      	b.n	8000ed6 <NVIC_EncodePriority+0x32>
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	43da      	mvns	r2, r3
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	401a      	ands	r2, r3
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eec:	f04f 31ff 	mov.w	r1, #4294967295
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef6:	43d9      	mvns	r1, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000efc:	4313      	orrs	r3, r2
         );
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3724      	adds	r7, #36	; 0x24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
	...

08000f0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3b01      	subs	r3, #1
 8000f18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f1c:	d301      	bcc.n	8000f22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e00f      	b.n	8000f42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f22:	4a0a      	ldr	r2, [pc, #40]	; (8000f4c <SysTick_Config+0x40>)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3b01      	subs	r3, #1
 8000f28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f2a:	210f      	movs	r1, #15
 8000f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f30:	f7ff ff8e 	bl	8000e50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f34:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <SysTick_Config+0x40>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f3a:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <SysTick_Config+0x40>)
 8000f3c:	2207      	movs	r2, #7
 8000f3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	e000e010 	.word	0xe000e010

08000f50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f7ff ff47 	bl	8000dec <__NVIC_SetPriorityGrouping>
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b086      	sub	sp, #24
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	60b9      	str	r1, [r7, #8]
 8000f70:	607a      	str	r2, [r7, #4]
 8000f72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f78:	f7ff ff5c 	bl	8000e34 <__NVIC_GetPriorityGrouping>
 8000f7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	68b9      	ldr	r1, [r7, #8]
 8000f82:	6978      	ldr	r0, [r7, #20]
 8000f84:	f7ff ff8e 	bl	8000ea4 <NVIC_EncodePriority>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f8e:	4611      	mov	r1, r2
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff ff5d 	bl	8000e50 <__NVIC_SetPriority>
}
 8000f96:	bf00      	nop
 8000f98:	3718      	adds	r7, #24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f7ff ffb0 	bl	8000f0c <SysTick_Config>
 8000fac:	4603      	mov	r3, r0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
	...

08000fb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b089      	sub	sp, #36	; 0x24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61fb      	str	r3, [r7, #28]
 8000fd2:	e165      	b.n	80012a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	697a      	ldr	r2, [r7, #20]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	f040 8154 	bne.w	800129a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f003 0303 	and.w	r3, r3, #3
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d005      	beq.n	800100a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001006:	2b02      	cmp	r3, #2
 8001008:	d130      	bne.n	800106c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	2203      	movs	r2, #3
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	43db      	mvns	r3, r3
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	4013      	ands	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	68da      	ldr	r2, [r3, #12]
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4313      	orrs	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001040:	2201      	movs	r2, #1
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	43db      	mvns	r3, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4013      	ands	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	091b      	lsrs	r3, r3, #4
 8001056:	f003 0201 	and.w	r2, r3, #1
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4313      	orrs	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f003 0303 	and.w	r3, r3, #3
 8001074:	2b03      	cmp	r3, #3
 8001076:	d017      	beq.n	80010a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	2203      	movs	r2, #3
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	43db      	mvns	r3, r3
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4013      	ands	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	689a      	ldr	r2, [r3, #8]
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4313      	orrs	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f003 0303 	and.w	r3, r3, #3
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d123      	bne.n	80010fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	08da      	lsrs	r2, r3, #3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3208      	adds	r2, #8
 80010bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	f003 0307 	and.w	r3, r3, #7
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	220f      	movs	r2, #15
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	43db      	mvns	r3, r3
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4013      	ands	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	691a      	ldr	r2, [r3, #16]
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	08da      	lsrs	r2, r3, #3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	3208      	adds	r2, #8
 80010f6:	69b9      	ldr	r1, [r7, #24]
 80010f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	2203      	movs	r2, #3
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4013      	ands	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f003 0203 	and.w	r2, r3, #3
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4313      	orrs	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001138:	2b00      	cmp	r3, #0
 800113a:	f000 80ae 	beq.w	800129a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	4b5d      	ldr	r3, [pc, #372]	; (80012b8 <HAL_GPIO_Init+0x300>)
 8001144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001146:	4a5c      	ldr	r2, [pc, #368]	; (80012b8 <HAL_GPIO_Init+0x300>)
 8001148:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800114c:	6453      	str	r3, [r2, #68]	; 0x44
 800114e:	4b5a      	ldr	r3, [pc, #360]	; (80012b8 <HAL_GPIO_Init+0x300>)
 8001150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001152:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800115a:	4a58      	ldr	r2, [pc, #352]	; (80012bc <HAL_GPIO_Init+0x304>)
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	089b      	lsrs	r3, r3, #2
 8001160:	3302      	adds	r3, #2
 8001162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001166:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	f003 0303 	and.w	r3, r3, #3
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	220f      	movs	r2, #15
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	43db      	mvns	r3, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4013      	ands	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a4f      	ldr	r2, [pc, #316]	; (80012c0 <HAL_GPIO_Init+0x308>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d025      	beq.n	80011d2 <HAL_GPIO_Init+0x21a>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a4e      	ldr	r2, [pc, #312]	; (80012c4 <HAL_GPIO_Init+0x30c>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d01f      	beq.n	80011ce <HAL_GPIO_Init+0x216>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a4d      	ldr	r2, [pc, #308]	; (80012c8 <HAL_GPIO_Init+0x310>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d019      	beq.n	80011ca <HAL_GPIO_Init+0x212>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a4c      	ldr	r2, [pc, #304]	; (80012cc <HAL_GPIO_Init+0x314>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d013      	beq.n	80011c6 <HAL_GPIO_Init+0x20e>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a4b      	ldr	r2, [pc, #300]	; (80012d0 <HAL_GPIO_Init+0x318>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d00d      	beq.n	80011c2 <HAL_GPIO_Init+0x20a>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a4a      	ldr	r2, [pc, #296]	; (80012d4 <HAL_GPIO_Init+0x31c>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d007      	beq.n	80011be <HAL_GPIO_Init+0x206>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a49      	ldr	r2, [pc, #292]	; (80012d8 <HAL_GPIO_Init+0x320>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d101      	bne.n	80011ba <HAL_GPIO_Init+0x202>
 80011b6:	2306      	movs	r3, #6
 80011b8:	e00c      	b.n	80011d4 <HAL_GPIO_Init+0x21c>
 80011ba:	2307      	movs	r3, #7
 80011bc:	e00a      	b.n	80011d4 <HAL_GPIO_Init+0x21c>
 80011be:	2305      	movs	r3, #5
 80011c0:	e008      	b.n	80011d4 <HAL_GPIO_Init+0x21c>
 80011c2:	2304      	movs	r3, #4
 80011c4:	e006      	b.n	80011d4 <HAL_GPIO_Init+0x21c>
 80011c6:	2303      	movs	r3, #3
 80011c8:	e004      	b.n	80011d4 <HAL_GPIO_Init+0x21c>
 80011ca:	2302      	movs	r3, #2
 80011cc:	e002      	b.n	80011d4 <HAL_GPIO_Init+0x21c>
 80011ce:	2301      	movs	r3, #1
 80011d0:	e000      	b.n	80011d4 <HAL_GPIO_Init+0x21c>
 80011d2:	2300      	movs	r3, #0
 80011d4:	69fa      	ldr	r2, [r7, #28]
 80011d6:	f002 0203 	and.w	r2, r2, #3
 80011da:	0092      	lsls	r2, r2, #2
 80011dc:	4093      	lsls	r3, r2
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011e4:	4935      	ldr	r1, [pc, #212]	; (80012bc <HAL_GPIO_Init+0x304>)
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	089b      	lsrs	r3, r3, #2
 80011ea:	3302      	adds	r3, #2
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011f2:	4b3a      	ldr	r3, [pc, #232]	; (80012dc <HAL_GPIO_Init+0x324>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	43db      	mvns	r3, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4013      	ands	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d003      	beq.n	8001216 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	4313      	orrs	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001216:	4a31      	ldr	r2, [pc, #196]	; (80012dc <HAL_GPIO_Init+0x324>)
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800121c:	4b2f      	ldr	r3, [pc, #188]	; (80012dc <HAL_GPIO_Init+0x324>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	43db      	mvns	r3, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d003      	beq.n	8001240 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	4313      	orrs	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001240:	4a26      	ldr	r2, [pc, #152]	; (80012dc <HAL_GPIO_Init+0x324>)
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001246:	4b25      	ldr	r3, [pc, #148]	; (80012dc <HAL_GPIO_Init+0x324>)
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	43db      	mvns	r3, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4013      	ands	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d003      	beq.n	800126a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800126a:	4a1c      	ldr	r2, [pc, #112]	; (80012dc <HAL_GPIO_Init+0x324>)
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001270:	4b1a      	ldr	r3, [pc, #104]	; (80012dc <HAL_GPIO_Init+0x324>)
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	43db      	mvns	r3, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4013      	ands	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d003      	beq.n	8001294 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	4313      	orrs	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001294:	4a11      	ldr	r2, [pc, #68]	; (80012dc <HAL_GPIO_Init+0x324>)
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3301      	adds	r3, #1
 800129e:	61fb      	str	r3, [r7, #28]
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	2b0f      	cmp	r3, #15
 80012a4:	f67f ae96 	bls.w	8000fd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012a8:	bf00      	nop
 80012aa:	bf00      	nop
 80012ac:	3724      	adds	r7, #36	; 0x24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40013800 	.word	0x40013800
 80012c0:	40020000 	.word	0x40020000
 80012c4:	40020400 	.word	0x40020400
 80012c8:	40020800 	.word	0x40020800
 80012cc:	40020c00 	.word	0x40020c00
 80012d0:	40021000 	.word	0x40021000
 80012d4:	40021400 	.word	0x40021400
 80012d8:	40021800 	.word	0x40021800
 80012dc:	40013c00 	.word	0x40013c00

080012e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	460b      	mov	r3, r1
 80012ea:	807b      	strh	r3, [r7, #2]
 80012ec:	4613      	mov	r3, r2
 80012ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012f0:	787b      	ldrb	r3, [r7, #1]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d003      	beq.n	80012fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012f6:	887a      	ldrh	r2, [r7, #2]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012fc:	e003      	b.n	8001306 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012fe:	887b      	ldrh	r3, [r7, #2]
 8001300:	041a      	lsls	r2, r3, #16
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	619a      	str	r2, [r3, #24]
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
	...

08001314 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d101      	bne.n	8001328 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e0cc      	b.n	80014c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001328:	4b68      	ldr	r3, [pc, #416]	; (80014cc <HAL_RCC_ClockConfig+0x1b8>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 030f 	and.w	r3, r3, #15
 8001330:	683a      	ldr	r2, [r7, #0]
 8001332:	429a      	cmp	r2, r3
 8001334:	d90c      	bls.n	8001350 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001336:	4b65      	ldr	r3, [pc, #404]	; (80014cc <HAL_RCC_ClockConfig+0x1b8>)
 8001338:	683a      	ldr	r2, [r7, #0]
 800133a:	b2d2      	uxtb	r2, r2
 800133c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800133e:	4b63      	ldr	r3, [pc, #396]	; (80014cc <HAL_RCC_ClockConfig+0x1b8>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 030f 	and.w	r3, r3, #15
 8001346:	683a      	ldr	r2, [r7, #0]
 8001348:	429a      	cmp	r2, r3
 800134a:	d001      	beq.n	8001350 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e0b8      	b.n	80014c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	2b00      	cmp	r3, #0
 800135a:	d020      	beq.n	800139e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 0304 	and.w	r3, r3, #4
 8001364:	2b00      	cmp	r3, #0
 8001366:	d005      	beq.n	8001374 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001368:	4b59      	ldr	r3, [pc, #356]	; (80014d0 <HAL_RCC_ClockConfig+0x1bc>)
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	4a58      	ldr	r2, [pc, #352]	; (80014d0 <HAL_RCC_ClockConfig+0x1bc>)
 800136e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001372:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 0308 	and.w	r3, r3, #8
 800137c:	2b00      	cmp	r3, #0
 800137e:	d005      	beq.n	800138c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001380:	4b53      	ldr	r3, [pc, #332]	; (80014d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	4a52      	ldr	r2, [pc, #328]	; (80014d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001386:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800138a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800138c:	4b50      	ldr	r3, [pc, #320]	; (80014d0 <HAL_RCC_ClockConfig+0x1bc>)
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	494d      	ldr	r1, [pc, #308]	; (80014d0 <HAL_RCC_ClockConfig+0x1bc>)
 800139a:	4313      	orrs	r3, r2
 800139c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d044      	beq.n	8001434 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d107      	bne.n	80013c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013b2:	4b47      	ldr	r3, [pc, #284]	; (80014d0 <HAL_RCC_ClockConfig+0x1bc>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d119      	bne.n	80013f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e07f      	b.n	80014c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d003      	beq.n	80013d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013ce:	2b03      	cmp	r3, #3
 80013d0:	d107      	bne.n	80013e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013d2:	4b3f      	ldr	r3, [pc, #252]	; (80014d0 <HAL_RCC_ClockConfig+0x1bc>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d109      	bne.n	80013f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e06f      	b.n	80014c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013e2:	4b3b      	ldr	r3, [pc, #236]	; (80014d0 <HAL_RCC_ClockConfig+0x1bc>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d101      	bne.n	80013f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e067      	b.n	80014c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013f2:	4b37      	ldr	r3, [pc, #220]	; (80014d0 <HAL_RCC_ClockConfig+0x1bc>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	f023 0203 	bic.w	r2, r3, #3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	4934      	ldr	r1, [pc, #208]	; (80014d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001400:	4313      	orrs	r3, r2
 8001402:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001404:	f7ff fce6 	bl	8000dd4 <HAL_GetTick>
 8001408:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800140a:	e00a      	b.n	8001422 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800140c:	f7ff fce2 	bl	8000dd4 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	f241 3288 	movw	r2, #5000	; 0x1388
 800141a:	4293      	cmp	r3, r2
 800141c:	d901      	bls.n	8001422 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e04f      	b.n	80014c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001422:	4b2b      	ldr	r3, [pc, #172]	; (80014d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	f003 020c 	and.w	r2, r3, #12
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	429a      	cmp	r2, r3
 8001432:	d1eb      	bne.n	800140c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001434:	4b25      	ldr	r3, [pc, #148]	; (80014cc <HAL_RCC_ClockConfig+0x1b8>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 030f 	and.w	r3, r3, #15
 800143c:	683a      	ldr	r2, [r7, #0]
 800143e:	429a      	cmp	r2, r3
 8001440:	d20c      	bcs.n	800145c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001442:	4b22      	ldr	r3, [pc, #136]	; (80014cc <HAL_RCC_ClockConfig+0x1b8>)
 8001444:	683a      	ldr	r2, [r7, #0]
 8001446:	b2d2      	uxtb	r2, r2
 8001448:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800144a:	4b20      	ldr	r3, [pc, #128]	; (80014cc <HAL_RCC_ClockConfig+0x1b8>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 030f 	and.w	r3, r3, #15
 8001452:	683a      	ldr	r2, [r7, #0]
 8001454:	429a      	cmp	r2, r3
 8001456:	d001      	beq.n	800145c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e032      	b.n	80014c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0304 	and.w	r3, r3, #4
 8001464:	2b00      	cmp	r3, #0
 8001466:	d008      	beq.n	800147a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001468:	4b19      	ldr	r3, [pc, #100]	; (80014d0 <HAL_RCC_ClockConfig+0x1bc>)
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	4916      	ldr	r1, [pc, #88]	; (80014d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001476:	4313      	orrs	r3, r2
 8001478:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0308 	and.w	r3, r3, #8
 8001482:	2b00      	cmp	r3, #0
 8001484:	d009      	beq.n	800149a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001486:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	691b      	ldr	r3, [r3, #16]
 8001492:	00db      	lsls	r3, r3, #3
 8001494:	490e      	ldr	r1, [pc, #56]	; (80014d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001496:	4313      	orrs	r3, r2
 8001498:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800149a:	f000 f855 	bl	8001548 <HAL_RCC_GetSysClockFreq>
 800149e:	4602      	mov	r2, r0
 80014a0:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <HAL_RCC_ClockConfig+0x1bc>)
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	091b      	lsrs	r3, r3, #4
 80014a6:	f003 030f 	and.w	r3, r3, #15
 80014aa:	490a      	ldr	r1, [pc, #40]	; (80014d4 <HAL_RCC_ClockConfig+0x1c0>)
 80014ac:	5ccb      	ldrb	r3, [r1, r3]
 80014ae:	fa22 f303 	lsr.w	r3, r2, r3
 80014b2:	4a09      	ldr	r2, [pc, #36]	; (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 80014b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80014b6:	4b09      	ldr	r3, [pc, #36]	; (80014dc <HAL_RCC_ClockConfig+0x1c8>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff fc46 	bl	8000d4c <HAL_InitTick>

  return HAL_OK;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40023c00 	.word	0x40023c00
 80014d0:	40023800 	.word	0x40023800
 80014d4:	08003034 	.word	0x08003034
 80014d8:	20000000 	.word	0x20000000
 80014dc:	20000004 	.word	0x20000004

080014e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014e4:	4b03      	ldr	r3, [pc, #12]	; (80014f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80014e6:	681b      	ldr	r3, [r3, #0]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	20000000 	.word	0x20000000

080014f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80014fc:	f7ff fff0 	bl	80014e0 <HAL_RCC_GetHCLKFreq>
 8001500:	4602      	mov	r2, r0
 8001502:	4b05      	ldr	r3, [pc, #20]	; (8001518 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	0a9b      	lsrs	r3, r3, #10
 8001508:	f003 0307 	and.w	r3, r3, #7
 800150c:	4903      	ldr	r1, [pc, #12]	; (800151c <HAL_RCC_GetPCLK1Freq+0x24>)
 800150e:	5ccb      	ldrb	r3, [r1, r3]
 8001510:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001514:	4618      	mov	r0, r3
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40023800 	.word	0x40023800
 800151c:	08003044 	.word	0x08003044

08001520 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001524:	f7ff ffdc 	bl	80014e0 <HAL_RCC_GetHCLKFreq>
 8001528:	4602      	mov	r2, r0
 800152a:	4b05      	ldr	r3, [pc, #20]	; (8001540 <HAL_RCC_GetPCLK2Freq+0x20>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	0b5b      	lsrs	r3, r3, #13
 8001530:	f003 0307 	and.w	r3, r3, #7
 8001534:	4903      	ldr	r1, [pc, #12]	; (8001544 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001536:	5ccb      	ldrb	r3, [r1, r3]
 8001538:	fa22 f303 	lsr.w	r3, r2, r3
}
 800153c:	4618      	mov	r0, r3
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40023800 	.word	0x40023800
 8001544:	08003044 	.word	0x08003044

08001548 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001548:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800154c:	b088      	sub	sp, #32
 800154e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001554:	2300      	movs	r3, #0
 8001556:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8001558:	2300      	movs	r3, #0
 800155a:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 800155c:	2300      	movs	r3, #0
 800155e:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8001560:	2300      	movs	r3, #0
 8001562:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001564:	4bce      	ldr	r3, [pc, #824]	; (80018a0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	f003 030c 	and.w	r3, r3, #12
 800156c:	2b0c      	cmp	r3, #12
 800156e:	f200 818d 	bhi.w	800188c <HAL_RCC_GetSysClockFreq+0x344>
 8001572:	a201      	add	r2, pc, #4	; (adr r2, 8001578 <HAL_RCC_GetSysClockFreq+0x30>)
 8001574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001578:	080015ad 	.word	0x080015ad
 800157c:	0800188d 	.word	0x0800188d
 8001580:	0800188d 	.word	0x0800188d
 8001584:	0800188d 	.word	0x0800188d
 8001588:	080015b3 	.word	0x080015b3
 800158c:	0800188d 	.word	0x0800188d
 8001590:	0800188d 	.word	0x0800188d
 8001594:	0800188d 	.word	0x0800188d
 8001598:	080015b9 	.word	0x080015b9
 800159c:	0800188d 	.word	0x0800188d
 80015a0:	0800188d 	.word	0x0800188d
 80015a4:	0800188d 	.word	0x0800188d
 80015a8:	0800172d 	.word	0x0800172d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015ac:	4bbd      	ldr	r3, [pc, #756]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80015ae:	61bb      	str	r3, [r7, #24]
       break;
 80015b0:	e16f      	b.n	8001892 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015b2:	4bbd      	ldr	r3, [pc, #756]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x360>)
 80015b4:	61bb      	str	r3, [r7, #24]
      break;
 80015b6:	e16c      	b.n	8001892 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015b8:	4bb9      	ldr	r3, [pc, #740]	; (80018a0 <HAL_RCC_GetSysClockFreq+0x358>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015c0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015c2:	4bb7      	ldr	r3, [pc, #732]	; (80018a0 <HAL_RCC_GetSysClockFreq+0x358>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d053      	beq.n	8001676 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015ce:	4bb4      	ldr	r3, [pc, #720]	; (80018a0 <HAL_RCC_GetSysClockFreq+0x358>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	099b      	lsrs	r3, r3, #6
 80015d4:	461a      	mov	r2, r3
 80015d6:	f04f 0300 	mov.w	r3, #0
 80015da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80015de:	f04f 0100 	mov.w	r1, #0
 80015e2:	ea02 0400 	and.w	r4, r2, r0
 80015e6:	603c      	str	r4, [r7, #0]
 80015e8:	400b      	ands	r3, r1
 80015ea:	607b      	str	r3, [r7, #4]
 80015ec:	e9d7 4500 	ldrd	r4, r5, [r7]
 80015f0:	4620      	mov	r0, r4
 80015f2:	4629      	mov	r1, r5
 80015f4:	f04f 0200 	mov.w	r2, #0
 80015f8:	f04f 0300 	mov.w	r3, #0
 80015fc:	014b      	lsls	r3, r1, #5
 80015fe:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001602:	0142      	lsls	r2, r0, #5
 8001604:	4610      	mov	r0, r2
 8001606:	4619      	mov	r1, r3
 8001608:	4623      	mov	r3, r4
 800160a:	1ac0      	subs	r0, r0, r3
 800160c:	462b      	mov	r3, r5
 800160e:	eb61 0103 	sbc.w	r1, r1, r3
 8001612:	f04f 0200 	mov.w	r2, #0
 8001616:	f04f 0300 	mov.w	r3, #0
 800161a:	018b      	lsls	r3, r1, #6
 800161c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001620:	0182      	lsls	r2, r0, #6
 8001622:	1a12      	subs	r2, r2, r0
 8001624:	eb63 0301 	sbc.w	r3, r3, r1
 8001628:	f04f 0000 	mov.w	r0, #0
 800162c:	f04f 0100 	mov.w	r1, #0
 8001630:	00d9      	lsls	r1, r3, #3
 8001632:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001636:	00d0      	lsls	r0, r2, #3
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	4621      	mov	r1, r4
 800163e:	1852      	adds	r2, r2, r1
 8001640:	4629      	mov	r1, r5
 8001642:	eb43 0101 	adc.w	r1, r3, r1
 8001646:	460b      	mov	r3, r1
 8001648:	f04f 0000 	mov.w	r0, #0
 800164c:	f04f 0100 	mov.w	r1, #0
 8001650:	0259      	lsls	r1, r3, #9
 8001652:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001656:	0250      	lsls	r0, r2, #9
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	4610      	mov	r0, r2
 800165e:	4619      	mov	r1, r3
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	461a      	mov	r2, r3
 8001664:	f04f 0300 	mov.w	r3, #0
 8001668:	f7fe fdcc 	bl	8000204 <__aeabi_uldivmod>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	4613      	mov	r3, r2
 8001672:	61fb      	str	r3, [r7, #28]
 8001674:	e04c      	b.n	8001710 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001676:	4b8a      	ldr	r3, [pc, #552]	; (80018a0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	099b      	lsrs	r3, r3, #6
 800167c:	461a      	mov	r2, r3
 800167e:	f04f 0300 	mov.w	r3, #0
 8001682:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001686:	f04f 0100 	mov.w	r1, #0
 800168a:	ea02 0a00 	and.w	sl, r2, r0
 800168e:	ea03 0b01 	and.w	fp, r3, r1
 8001692:	4650      	mov	r0, sl
 8001694:	4659      	mov	r1, fp
 8001696:	f04f 0200 	mov.w	r2, #0
 800169a:	f04f 0300 	mov.w	r3, #0
 800169e:	014b      	lsls	r3, r1, #5
 80016a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80016a4:	0142      	lsls	r2, r0, #5
 80016a6:	4610      	mov	r0, r2
 80016a8:	4619      	mov	r1, r3
 80016aa:	ebb0 000a 	subs.w	r0, r0, sl
 80016ae:	eb61 010b 	sbc.w	r1, r1, fp
 80016b2:	f04f 0200 	mov.w	r2, #0
 80016b6:	f04f 0300 	mov.w	r3, #0
 80016ba:	018b      	lsls	r3, r1, #6
 80016bc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80016c0:	0182      	lsls	r2, r0, #6
 80016c2:	1a12      	subs	r2, r2, r0
 80016c4:	eb63 0301 	sbc.w	r3, r3, r1
 80016c8:	f04f 0000 	mov.w	r0, #0
 80016cc:	f04f 0100 	mov.w	r1, #0
 80016d0:	00d9      	lsls	r1, r3, #3
 80016d2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80016d6:	00d0      	lsls	r0, r2, #3
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	eb12 020a 	adds.w	r2, r2, sl
 80016e0:	eb43 030b 	adc.w	r3, r3, fp
 80016e4:	f04f 0000 	mov.w	r0, #0
 80016e8:	f04f 0100 	mov.w	r1, #0
 80016ec:	0299      	lsls	r1, r3, #10
 80016ee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80016f2:	0290      	lsls	r0, r2, #10
 80016f4:	4602      	mov	r2, r0
 80016f6:	460b      	mov	r3, r1
 80016f8:	4610      	mov	r0, r2
 80016fa:	4619      	mov	r1, r3
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	461a      	mov	r2, r3
 8001700:	f04f 0300 	mov.w	r3, #0
 8001704:	f7fe fd7e 	bl	8000204 <__aeabi_uldivmod>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	4613      	mov	r3, r2
 800170e:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001710:	4b63      	ldr	r3, [pc, #396]	; (80018a0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	0c1b      	lsrs	r3, r3, #16
 8001716:	f003 0303 	and.w	r3, r3, #3
 800171a:	3301      	adds	r3, #1
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8001720:	69fa      	ldr	r2, [r7, #28]
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	fbb2 f3f3 	udiv	r3, r2, r3
 8001728:	61bb      	str	r3, [r7, #24]
      break;
 800172a:	e0b2      	b.n	8001892 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800172c:	4b5c      	ldr	r3, [pc, #368]	; (80018a0 <HAL_RCC_GetSysClockFreq+0x358>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001734:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001736:	4b5a      	ldr	r3, [pc, #360]	; (80018a0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d04d      	beq.n	80017de <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001742:	4b57      	ldr	r3, [pc, #348]	; (80018a0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	099b      	lsrs	r3, r3, #6
 8001748:	461a      	mov	r2, r3
 800174a:	f04f 0300 	mov.w	r3, #0
 800174e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001752:	f04f 0100 	mov.w	r1, #0
 8001756:	ea02 0800 	and.w	r8, r2, r0
 800175a:	ea03 0901 	and.w	r9, r3, r1
 800175e:	4640      	mov	r0, r8
 8001760:	4649      	mov	r1, r9
 8001762:	f04f 0200 	mov.w	r2, #0
 8001766:	f04f 0300 	mov.w	r3, #0
 800176a:	014b      	lsls	r3, r1, #5
 800176c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001770:	0142      	lsls	r2, r0, #5
 8001772:	4610      	mov	r0, r2
 8001774:	4619      	mov	r1, r3
 8001776:	ebb0 0008 	subs.w	r0, r0, r8
 800177a:	eb61 0109 	sbc.w	r1, r1, r9
 800177e:	f04f 0200 	mov.w	r2, #0
 8001782:	f04f 0300 	mov.w	r3, #0
 8001786:	018b      	lsls	r3, r1, #6
 8001788:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800178c:	0182      	lsls	r2, r0, #6
 800178e:	1a12      	subs	r2, r2, r0
 8001790:	eb63 0301 	sbc.w	r3, r3, r1
 8001794:	f04f 0000 	mov.w	r0, #0
 8001798:	f04f 0100 	mov.w	r1, #0
 800179c:	00d9      	lsls	r1, r3, #3
 800179e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80017a2:	00d0      	lsls	r0, r2, #3
 80017a4:	4602      	mov	r2, r0
 80017a6:	460b      	mov	r3, r1
 80017a8:	eb12 0208 	adds.w	r2, r2, r8
 80017ac:	eb43 0309 	adc.w	r3, r3, r9
 80017b0:	f04f 0000 	mov.w	r0, #0
 80017b4:	f04f 0100 	mov.w	r1, #0
 80017b8:	0259      	lsls	r1, r3, #9
 80017ba:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80017be:	0250      	lsls	r0, r2, #9
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	4610      	mov	r0, r2
 80017c6:	4619      	mov	r1, r3
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	461a      	mov	r2, r3
 80017cc:	f04f 0300 	mov.w	r3, #0
 80017d0:	f7fe fd18 	bl	8000204 <__aeabi_uldivmod>
 80017d4:	4602      	mov	r2, r0
 80017d6:	460b      	mov	r3, r1
 80017d8:	4613      	mov	r3, r2
 80017da:	61fb      	str	r3, [r7, #28]
 80017dc:	e04a      	b.n	8001874 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017de:	4b30      	ldr	r3, [pc, #192]	; (80018a0 <HAL_RCC_GetSysClockFreq+0x358>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	099b      	lsrs	r3, r3, #6
 80017e4:	461a      	mov	r2, r3
 80017e6:	f04f 0300 	mov.w	r3, #0
 80017ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80017ee:	f04f 0100 	mov.w	r1, #0
 80017f2:	ea02 0400 	and.w	r4, r2, r0
 80017f6:	ea03 0501 	and.w	r5, r3, r1
 80017fa:	4620      	mov	r0, r4
 80017fc:	4629      	mov	r1, r5
 80017fe:	f04f 0200 	mov.w	r2, #0
 8001802:	f04f 0300 	mov.w	r3, #0
 8001806:	014b      	lsls	r3, r1, #5
 8001808:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800180c:	0142      	lsls	r2, r0, #5
 800180e:	4610      	mov	r0, r2
 8001810:	4619      	mov	r1, r3
 8001812:	1b00      	subs	r0, r0, r4
 8001814:	eb61 0105 	sbc.w	r1, r1, r5
 8001818:	f04f 0200 	mov.w	r2, #0
 800181c:	f04f 0300 	mov.w	r3, #0
 8001820:	018b      	lsls	r3, r1, #6
 8001822:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001826:	0182      	lsls	r2, r0, #6
 8001828:	1a12      	subs	r2, r2, r0
 800182a:	eb63 0301 	sbc.w	r3, r3, r1
 800182e:	f04f 0000 	mov.w	r0, #0
 8001832:	f04f 0100 	mov.w	r1, #0
 8001836:	00d9      	lsls	r1, r3, #3
 8001838:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800183c:	00d0      	lsls	r0, r2, #3
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	1912      	adds	r2, r2, r4
 8001844:	eb45 0303 	adc.w	r3, r5, r3
 8001848:	f04f 0000 	mov.w	r0, #0
 800184c:	f04f 0100 	mov.w	r1, #0
 8001850:	0299      	lsls	r1, r3, #10
 8001852:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001856:	0290      	lsls	r0, r2, #10
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	4610      	mov	r0, r2
 800185e:	4619      	mov	r1, r3
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	461a      	mov	r2, r3
 8001864:	f04f 0300 	mov.w	r3, #0
 8001868:	f7fe fccc 	bl	8000204 <__aeabi_uldivmod>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	4613      	mov	r3, r2
 8001872:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001874:	4b0a      	ldr	r3, [pc, #40]	; (80018a0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	0f1b      	lsrs	r3, r3, #28
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8001880:	69fa      	ldr	r2, [r7, #28]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	fbb2 f3f3 	udiv	r3, r2, r3
 8001888:	61bb      	str	r3, [r7, #24]
      break;
 800188a:	e002      	b.n	8001892 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800188c:	4b05      	ldr	r3, [pc, #20]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x35c>)
 800188e:	61bb      	str	r3, [r7, #24]
      break;
 8001890:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001892:	69bb      	ldr	r3, [r7, #24]
}
 8001894:	4618      	mov	r0, r3
 8001896:	3720      	adds	r7, #32
 8001898:	46bd      	mov	sp, r7
 800189a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800189e:	bf00      	nop
 80018a0:	40023800 	.word	0x40023800
 80018a4:	00f42400 	.word	0x00f42400
 80018a8:	007a1200 	.word	0x007a1200

080018ac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d101      	bne.n	80018be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e28d      	b.n	8001dda <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	f000 8083 	beq.w	80019d2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80018cc:	4b94      	ldr	r3, [pc, #592]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f003 030c 	and.w	r3, r3, #12
 80018d4:	2b04      	cmp	r3, #4
 80018d6:	d019      	beq.n	800190c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80018d8:	4b91      	ldr	r3, [pc, #580]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80018e0:	2b08      	cmp	r3, #8
 80018e2:	d106      	bne.n	80018f2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80018e4:	4b8e      	ldr	r3, [pc, #568]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018f0:	d00c      	beq.n	800190c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018f2:	4b8b      	ldr	r3, [pc, #556]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80018fa:	2b0c      	cmp	r3, #12
 80018fc:	d112      	bne.n	8001924 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018fe:	4b88      	ldr	r3, [pc, #544]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001906:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800190a:	d10b      	bne.n	8001924 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800190c:	4b84      	ldr	r3, [pc, #528]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d05b      	beq.n	80019d0 <HAL_RCC_OscConfig+0x124>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d157      	bne.n	80019d0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e25a      	b.n	8001dda <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800192c:	d106      	bne.n	800193c <HAL_RCC_OscConfig+0x90>
 800192e:	4b7c      	ldr	r3, [pc, #496]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a7b      	ldr	r2, [pc, #492]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 8001934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001938:	6013      	str	r3, [r2, #0]
 800193a:	e01d      	b.n	8001978 <HAL_RCC_OscConfig+0xcc>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001944:	d10c      	bne.n	8001960 <HAL_RCC_OscConfig+0xb4>
 8001946:	4b76      	ldr	r3, [pc, #472]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a75      	ldr	r2, [pc, #468]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 800194c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001950:	6013      	str	r3, [r2, #0]
 8001952:	4b73      	ldr	r3, [pc, #460]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a72      	ldr	r2, [pc, #456]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 8001958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800195c:	6013      	str	r3, [r2, #0]
 800195e:	e00b      	b.n	8001978 <HAL_RCC_OscConfig+0xcc>
 8001960:	4b6f      	ldr	r3, [pc, #444]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a6e      	ldr	r2, [pc, #440]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 8001966:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800196a:	6013      	str	r3, [r2, #0]
 800196c:	4b6c      	ldr	r3, [pc, #432]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a6b      	ldr	r2, [pc, #428]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 8001972:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001976:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d013      	beq.n	80019a8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001980:	f7ff fa28 	bl	8000dd4 <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001988:	f7ff fa24 	bl	8000dd4 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b64      	cmp	r3, #100	; 0x64
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e21f      	b.n	8001dda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800199a:	4b61      	ldr	r3, [pc, #388]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d0f0      	beq.n	8001988 <HAL_RCC_OscConfig+0xdc>
 80019a6:	e014      	b.n	80019d2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a8:	f7ff fa14 	bl	8000dd4 <HAL_GetTick>
 80019ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019b0:	f7ff fa10 	bl	8000dd4 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b64      	cmp	r3, #100	; 0x64
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e20b      	b.n	8001dda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019c2:	4b57      	ldr	r3, [pc, #348]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d1f0      	bne.n	80019b0 <HAL_RCC_OscConfig+0x104>
 80019ce:	e000      	b.n	80019d2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d06f      	beq.n	8001abe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80019de:	4b50      	ldr	r3, [pc, #320]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f003 030c 	and.w	r3, r3, #12
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d017      	beq.n	8001a1a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80019ea:	4b4d      	ldr	r3, [pc, #308]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80019f2:	2b08      	cmp	r3, #8
 80019f4:	d105      	bne.n	8001a02 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80019f6:	4b4a      	ldr	r3, [pc, #296]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d00b      	beq.n	8001a1a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a02:	4b47      	ldr	r3, [pc, #284]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a0a:	2b0c      	cmp	r3, #12
 8001a0c:	d11c      	bne.n	8001a48 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a0e:	4b44      	ldr	r3, [pc, #272]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d116      	bne.n	8001a48 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a1a:	4b41      	ldr	r3, [pc, #260]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d005      	beq.n	8001a32 <HAL_RCC_OscConfig+0x186>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d001      	beq.n	8001a32 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e1d3      	b.n	8001dda <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a32:	4b3b      	ldr	r3, [pc, #236]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	4937      	ldr	r1, [pc, #220]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a46:	e03a      	b.n	8001abe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d020      	beq.n	8001a92 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a50:	4b34      	ldr	r3, [pc, #208]	; (8001b24 <HAL_RCC_OscConfig+0x278>)
 8001a52:	2201      	movs	r2, #1
 8001a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a56:	f7ff f9bd 	bl	8000dd4 <HAL_GetTick>
 8001a5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a5c:	e008      	b.n	8001a70 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a5e:	f7ff f9b9 	bl	8000dd4 <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d901      	bls.n	8001a70 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e1b4      	b.n	8001dda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a70:	4b2b      	ldr	r3, [pc, #172]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d0f0      	beq.n	8001a5e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a7c:	4b28      	ldr	r3, [pc, #160]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	00db      	lsls	r3, r3, #3
 8001a8a:	4925      	ldr	r1, [pc, #148]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	600b      	str	r3, [r1, #0]
 8001a90:	e015      	b.n	8001abe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a92:	4b24      	ldr	r3, [pc, #144]	; (8001b24 <HAL_RCC_OscConfig+0x278>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a98:	f7ff f99c 	bl	8000dd4 <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001aa0:	f7ff f998 	bl	8000dd4 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e193      	b.n	8001dda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ab2:	4b1b      	ldr	r3, [pc, #108]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1f0      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0308 	and.w	r3, r3, #8
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d036      	beq.n	8001b38 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	695b      	ldr	r3, [r3, #20]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d016      	beq.n	8001b00 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ad2:	4b15      	ldr	r3, [pc, #84]	; (8001b28 <HAL_RCC_OscConfig+0x27c>)
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad8:	f7ff f97c 	bl	8000dd4 <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ae0:	f7ff f978 	bl	8000dd4 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e173      	b.n	8001dda <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001af2:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 8001af4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d0f0      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x234>
 8001afe:	e01b      	b.n	8001b38 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b00:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <HAL_RCC_OscConfig+0x27c>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b06:	f7ff f965 	bl	8000dd4 <HAL_GetTick>
 8001b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b0c:	e00e      	b.n	8001b2c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b0e:	f7ff f961 	bl	8000dd4 <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d907      	bls.n	8001b2c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e15c      	b.n	8001dda <HAL_RCC_OscConfig+0x52e>
 8001b20:	40023800 	.word	0x40023800
 8001b24:	42470000 	.word	0x42470000
 8001b28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b2c:	4b8a      	ldr	r3, [pc, #552]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001b2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1ea      	bne.n	8001b0e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0304 	and.w	r3, r3, #4
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f000 8097 	beq.w	8001c74 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b46:	2300      	movs	r3, #0
 8001b48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b4a:	4b83      	ldr	r3, [pc, #524]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10f      	bne.n	8001b76 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	60bb      	str	r3, [r7, #8]
 8001b5a:	4b7f      	ldr	r3, [pc, #508]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	4a7e      	ldr	r2, [pc, #504]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b64:	6413      	str	r3, [r2, #64]	; 0x40
 8001b66:	4b7c      	ldr	r3, [pc, #496]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6e:	60bb      	str	r3, [r7, #8]
 8001b70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b72:	2301      	movs	r3, #1
 8001b74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b76:	4b79      	ldr	r3, [pc, #484]	; (8001d5c <HAL_RCC_OscConfig+0x4b0>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d118      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b82:	4b76      	ldr	r3, [pc, #472]	; (8001d5c <HAL_RCC_OscConfig+0x4b0>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a75      	ldr	r2, [pc, #468]	; (8001d5c <HAL_RCC_OscConfig+0x4b0>)
 8001b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b8e:	f7ff f921 	bl	8000dd4 <HAL_GetTick>
 8001b92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b94:	e008      	b.n	8001ba8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b96:	f7ff f91d 	bl	8000dd4 <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d901      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e118      	b.n	8001dda <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba8:	4b6c      	ldr	r3, [pc, #432]	; (8001d5c <HAL_RCC_OscConfig+0x4b0>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d0f0      	beq.n	8001b96 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d106      	bne.n	8001bca <HAL_RCC_OscConfig+0x31e>
 8001bbc:	4b66      	ldr	r3, [pc, #408]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc0:	4a65      	ldr	r2, [pc, #404]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001bc2:	f043 0301 	orr.w	r3, r3, #1
 8001bc6:	6713      	str	r3, [r2, #112]	; 0x70
 8001bc8:	e01c      	b.n	8001c04 <HAL_RCC_OscConfig+0x358>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	2b05      	cmp	r3, #5
 8001bd0:	d10c      	bne.n	8001bec <HAL_RCC_OscConfig+0x340>
 8001bd2:	4b61      	ldr	r3, [pc, #388]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd6:	4a60      	ldr	r2, [pc, #384]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001bd8:	f043 0304 	orr.w	r3, r3, #4
 8001bdc:	6713      	str	r3, [r2, #112]	; 0x70
 8001bde:	4b5e      	ldr	r3, [pc, #376]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be2:	4a5d      	ldr	r2, [pc, #372]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001be4:	f043 0301 	orr.w	r3, r3, #1
 8001be8:	6713      	str	r3, [r2, #112]	; 0x70
 8001bea:	e00b      	b.n	8001c04 <HAL_RCC_OscConfig+0x358>
 8001bec:	4b5a      	ldr	r3, [pc, #360]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf0:	4a59      	ldr	r2, [pc, #356]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001bf2:	f023 0301 	bic.w	r3, r3, #1
 8001bf6:	6713      	str	r3, [r2, #112]	; 0x70
 8001bf8:	4b57      	ldr	r3, [pc, #348]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bfc:	4a56      	ldr	r2, [pc, #344]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001bfe:	f023 0304 	bic.w	r3, r3, #4
 8001c02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d015      	beq.n	8001c38 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c0c:	f7ff f8e2 	bl	8000dd4 <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c12:	e00a      	b.n	8001c2a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c14:	f7ff f8de 	bl	8000dd4 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e0d7      	b.n	8001dda <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c2a:	4b4b      	ldr	r3, [pc, #300]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d0ee      	beq.n	8001c14 <HAL_RCC_OscConfig+0x368>
 8001c36:	e014      	b.n	8001c62 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c38:	f7ff f8cc 	bl	8000dd4 <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c3e:	e00a      	b.n	8001c56 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c40:	f7ff f8c8 	bl	8000dd4 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e0c1      	b.n	8001dda <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c56:	4b40      	ldr	r3, [pc, #256]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1ee      	bne.n	8001c40 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c62:	7dfb      	ldrb	r3, [r7, #23]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d105      	bne.n	8001c74 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c68:	4b3b      	ldr	r3, [pc, #236]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6c:	4a3a      	ldr	r2, [pc, #232]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001c6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	f000 80ad 	beq.w	8001dd8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c7e:	4b36      	ldr	r3, [pc, #216]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 030c 	and.w	r3, r3, #12
 8001c86:	2b08      	cmp	r3, #8
 8001c88:	d060      	beq.n	8001d4c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d145      	bne.n	8001d1e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c92:	4b33      	ldr	r3, [pc, #204]	; (8001d60 <HAL_RCC_OscConfig+0x4b4>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c98:	f7ff f89c 	bl	8000dd4 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ca0:	f7ff f898 	bl	8000dd4 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e093      	b.n	8001dda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cb2:	4b29      	ldr	r3, [pc, #164]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1f0      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	69da      	ldr	r2, [r3, #28]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a1b      	ldr	r3, [r3, #32]
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ccc:	019b      	lsls	r3, r3, #6
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd4:	085b      	lsrs	r3, r3, #1
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	041b      	lsls	r3, r3, #16
 8001cda:	431a      	orrs	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce0:	061b      	lsls	r3, r3, #24
 8001ce2:	431a      	orrs	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce8:	071b      	lsls	r3, r3, #28
 8001cea:	491b      	ldr	r1, [pc, #108]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001cec:	4313      	orrs	r3, r2
 8001cee:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cf0:	4b1b      	ldr	r3, [pc, #108]	; (8001d60 <HAL_RCC_OscConfig+0x4b4>)
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf6:	f7ff f86d 	bl	8000dd4 <HAL_GetTick>
 8001cfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cfc:	e008      	b.n	8001d10 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cfe:	f7ff f869 	bl	8000dd4 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e064      	b.n	8001dda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d10:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d0f0      	beq.n	8001cfe <HAL_RCC_OscConfig+0x452>
 8001d1c:	e05c      	b.n	8001dd8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d1e:	4b10      	ldr	r3, [pc, #64]	; (8001d60 <HAL_RCC_OscConfig+0x4b4>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d24:	f7ff f856 	bl	8000dd4 <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d2c:	f7ff f852 	bl	8000dd4 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e04d      	b.n	8001dda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d3e:	4b06      	ldr	r3, [pc, #24]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1f0      	bne.n	8001d2c <HAL_RCC_OscConfig+0x480>
 8001d4a:	e045      	b.n	8001dd8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d107      	bne.n	8001d64 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e040      	b.n	8001dda <HAL_RCC_OscConfig+0x52e>
 8001d58:	40023800 	.word	0x40023800
 8001d5c:	40007000 	.word	0x40007000
 8001d60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d64:	4b1f      	ldr	r3, [pc, #124]	; (8001de4 <HAL_RCC_OscConfig+0x538>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d030      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d129      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d122      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d94:	4013      	ands	r3, r2
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d119      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001daa:	085b      	lsrs	r3, r3, #1
 8001dac:	3b01      	subs	r3, #1
 8001dae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d10f      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dbe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d107      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d001      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e000      	b.n	8001dda <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3718      	adds	r7, #24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40023800 	.word	0x40023800

08001de8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d101      	bne.n	8001dfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e041      	b.n	8001e7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d106      	bne.n	8001e14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7fe fe82 	bl	8000b18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2202      	movs	r2, #2
 8001e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	3304      	adds	r3, #4
 8001e24:	4619      	mov	r1, r3
 8001e26:	4610      	mov	r0, r2
 8001e28:	f000 fad8 	bl	80023dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b082      	sub	sp, #8
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d101      	bne.n	8001e98 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e041      	b.n	8001f1c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d106      	bne.n	8001eb2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 f839 	bl	8001f24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2202      	movs	r2, #2
 8001eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	3304      	adds	r3, #4
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4610      	mov	r0, r2
 8001ec6:	f000 fa89 	bl	80023dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2201      	movs	r2, #1
 8001ede:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2201      	movs	r2, #1
 8001eee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2201      	movs	r2, #1
 8001efe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2201      	movs	r2, #1
 8001f06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d109      	bne.n	8001f5c <HAL_TIM_PWM_Start+0x24>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	bf14      	ite	ne
 8001f54:	2301      	movne	r3, #1
 8001f56:	2300      	moveq	r3, #0
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	e022      	b.n	8001fa2 <HAL_TIM_PWM_Start+0x6a>
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	2b04      	cmp	r3, #4
 8001f60:	d109      	bne.n	8001f76 <HAL_TIM_PWM_Start+0x3e>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	bf14      	ite	ne
 8001f6e:	2301      	movne	r3, #1
 8001f70:	2300      	moveq	r3, #0
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	e015      	b.n	8001fa2 <HAL_TIM_PWM_Start+0x6a>
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	2b08      	cmp	r3, #8
 8001f7a:	d109      	bne.n	8001f90 <HAL_TIM_PWM_Start+0x58>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	bf14      	ite	ne
 8001f88:	2301      	movne	r3, #1
 8001f8a:	2300      	moveq	r3, #0
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	e008      	b.n	8001fa2 <HAL_TIM_PWM_Start+0x6a>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	bf14      	ite	ne
 8001f9c:	2301      	movne	r3, #1
 8001f9e:	2300      	moveq	r3, #0
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e07c      	b.n	80020a4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d104      	bne.n	8001fba <HAL_TIM_PWM_Start+0x82>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2202      	movs	r2, #2
 8001fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fb8:	e013      	b.n	8001fe2 <HAL_TIM_PWM_Start+0xaa>
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	2b04      	cmp	r3, #4
 8001fbe:	d104      	bne.n	8001fca <HAL_TIM_PWM_Start+0x92>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fc8:	e00b      	b.n	8001fe2 <HAL_TIM_PWM_Start+0xaa>
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	2b08      	cmp	r3, #8
 8001fce:	d104      	bne.n	8001fda <HAL_TIM_PWM_Start+0xa2>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fd8:	e003      	b.n	8001fe2 <HAL_TIM_PWM_Start+0xaa>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2202      	movs	r2, #2
 8001fde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	6839      	ldr	r1, [r7, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f000 fce0 	bl	80029b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a2d      	ldr	r2, [pc, #180]	; (80020ac <HAL_TIM_PWM_Start+0x174>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d004      	beq.n	8002004 <HAL_TIM_PWM_Start+0xcc>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a2c      	ldr	r2, [pc, #176]	; (80020b0 <HAL_TIM_PWM_Start+0x178>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d101      	bne.n	8002008 <HAL_TIM_PWM_Start+0xd0>
 8002004:	2301      	movs	r3, #1
 8002006:	e000      	b.n	800200a <HAL_TIM_PWM_Start+0xd2>
 8002008:	2300      	movs	r3, #0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d007      	beq.n	800201e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800201c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a22      	ldr	r2, [pc, #136]	; (80020ac <HAL_TIM_PWM_Start+0x174>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d022      	beq.n	800206e <HAL_TIM_PWM_Start+0x136>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002030:	d01d      	beq.n	800206e <HAL_TIM_PWM_Start+0x136>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a1f      	ldr	r2, [pc, #124]	; (80020b4 <HAL_TIM_PWM_Start+0x17c>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d018      	beq.n	800206e <HAL_TIM_PWM_Start+0x136>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a1d      	ldr	r2, [pc, #116]	; (80020b8 <HAL_TIM_PWM_Start+0x180>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d013      	beq.n	800206e <HAL_TIM_PWM_Start+0x136>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a1c      	ldr	r2, [pc, #112]	; (80020bc <HAL_TIM_PWM_Start+0x184>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d00e      	beq.n	800206e <HAL_TIM_PWM_Start+0x136>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a16      	ldr	r2, [pc, #88]	; (80020b0 <HAL_TIM_PWM_Start+0x178>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d009      	beq.n	800206e <HAL_TIM_PWM_Start+0x136>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a18      	ldr	r2, [pc, #96]	; (80020c0 <HAL_TIM_PWM_Start+0x188>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d004      	beq.n	800206e <HAL_TIM_PWM_Start+0x136>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a16      	ldr	r2, [pc, #88]	; (80020c4 <HAL_TIM_PWM_Start+0x18c>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d111      	bne.n	8002092 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f003 0307 	and.w	r3, r3, #7
 8002078:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2b06      	cmp	r3, #6
 800207e:	d010      	beq.n	80020a2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f042 0201 	orr.w	r2, r2, #1
 800208e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002090:	e007      	b.n	80020a2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f042 0201 	orr.w	r2, r2, #1
 80020a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40010000 	.word	0x40010000
 80020b0:	40010400 	.word	0x40010400
 80020b4:	40000400 	.word	0x40000400
 80020b8:	40000800 	.word	0x40000800
 80020bc:	40000c00 	.word	0x40000c00
 80020c0:	40014000 	.word	0x40014000
 80020c4:	40001800 	.word	0x40001800

080020c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020d4:	2300      	movs	r3, #0
 80020d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d101      	bne.n	80020e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80020e2:	2302      	movs	r3, #2
 80020e4:	e0ae      	b.n	8002244 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2201      	movs	r2, #1
 80020ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2b0c      	cmp	r3, #12
 80020f2:	f200 809f 	bhi.w	8002234 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80020f6:	a201      	add	r2, pc, #4	; (adr r2, 80020fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80020f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020fc:	08002131 	.word	0x08002131
 8002100:	08002235 	.word	0x08002235
 8002104:	08002235 	.word	0x08002235
 8002108:	08002235 	.word	0x08002235
 800210c:	08002171 	.word	0x08002171
 8002110:	08002235 	.word	0x08002235
 8002114:	08002235 	.word	0x08002235
 8002118:	08002235 	.word	0x08002235
 800211c:	080021b3 	.word	0x080021b3
 8002120:	08002235 	.word	0x08002235
 8002124:	08002235 	.word	0x08002235
 8002128:	08002235 	.word	0x08002235
 800212c:	080021f3 	.word	0x080021f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	68b9      	ldr	r1, [r7, #8]
 8002136:	4618      	mov	r0, r3
 8002138:	f000 f9f0 	bl	800251c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	699a      	ldr	r2, [r3, #24]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f042 0208 	orr.w	r2, r2, #8
 800214a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	699a      	ldr	r2, [r3, #24]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f022 0204 	bic.w	r2, r2, #4
 800215a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6999      	ldr	r1, [r3, #24]
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	691a      	ldr	r2, [r3, #16]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	430a      	orrs	r2, r1
 800216c:	619a      	str	r2, [r3, #24]
      break;
 800216e:	e064      	b.n	800223a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68b9      	ldr	r1, [r7, #8]
 8002176:	4618      	mov	r0, r3
 8002178:	f000 fa40 	bl	80025fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	699a      	ldr	r2, [r3, #24]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800218a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	699a      	ldr	r2, [r3, #24]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800219a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6999      	ldr	r1, [r3, #24]
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	021a      	lsls	r2, r3, #8
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	430a      	orrs	r2, r1
 80021ae:	619a      	str	r2, [r3, #24]
      break;
 80021b0:	e043      	b.n	800223a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	68b9      	ldr	r1, [r7, #8]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f000 fa95 	bl	80026e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	69da      	ldr	r2, [r3, #28]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f042 0208 	orr.w	r2, r2, #8
 80021cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	69da      	ldr	r2, [r3, #28]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f022 0204 	bic.w	r2, r2, #4
 80021dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	69d9      	ldr	r1, [r3, #28]
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	691a      	ldr	r2, [r3, #16]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	430a      	orrs	r2, r1
 80021ee:	61da      	str	r2, [r3, #28]
      break;
 80021f0:	e023      	b.n	800223a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68b9      	ldr	r1, [r7, #8]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f000 fae9 	bl	80027d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	69da      	ldr	r2, [r3, #28]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800220c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	69da      	ldr	r2, [r3, #28]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800221c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	69d9      	ldr	r1, [r3, #28]
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	021a      	lsls	r2, r3, #8
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	430a      	orrs	r2, r1
 8002230:	61da      	str	r2, [r3, #28]
      break;
 8002232:	e002      	b.n	800223a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	75fb      	strb	r3, [r7, #23]
      break;
 8002238:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002242:	7dfb      	ldrb	r3, [r7, #23]
}
 8002244:	4618      	mov	r0, r3
 8002246:	3718      	adds	r7, #24
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002256:	2300      	movs	r3, #0
 8002258:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002260:	2b01      	cmp	r3, #1
 8002262:	d101      	bne.n	8002268 <HAL_TIM_ConfigClockSource+0x1c>
 8002264:	2302      	movs	r3, #2
 8002266:	e0b4      	b.n	80023d2 <HAL_TIM_ConfigClockSource+0x186>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2202      	movs	r2, #2
 8002274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002286:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800228e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68ba      	ldr	r2, [r7, #8]
 8002296:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022a0:	d03e      	beq.n	8002320 <HAL_TIM_ConfigClockSource+0xd4>
 80022a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022a6:	f200 8087 	bhi.w	80023b8 <HAL_TIM_ConfigClockSource+0x16c>
 80022aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022ae:	f000 8086 	beq.w	80023be <HAL_TIM_ConfigClockSource+0x172>
 80022b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022b6:	d87f      	bhi.n	80023b8 <HAL_TIM_ConfigClockSource+0x16c>
 80022b8:	2b70      	cmp	r3, #112	; 0x70
 80022ba:	d01a      	beq.n	80022f2 <HAL_TIM_ConfigClockSource+0xa6>
 80022bc:	2b70      	cmp	r3, #112	; 0x70
 80022be:	d87b      	bhi.n	80023b8 <HAL_TIM_ConfigClockSource+0x16c>
 80022c0:	2b60      	cmp	r3, #96	; 0x60
 80022c2:	d050      	beq.n	8002366 <HAL_TIM_ConfigClockSource+0x11a>
 80022c4:	2b60      	cmp	r3, #96	; 0x60
 80022c6:	d877      	bhi.n	80023b8 <HAL_TIM_ConfigClockSource+0x16c>
 80022c8:	2b50      	cmp	r3, #80	; 0x50
 80022ca:	d03c      	beq.n	8002346 <HAL_TIM_ConfigClockSource+0xfa>
 80022cc:	2b50      	cmp	r3, #80	; 0x50
 80022ce:	d873      	bhi.n	80023b8 <HAL_TIM_ConfigClockSource+0x16c>
 80022d0:	2b40      	cmp	r3, #64	; 0x40
 80022d2:	d058      	beq.n	8002386 <HAL_TIM_ConfigClockSource+0x13a>
 80022d4:	2b40      	cmp	r3, #64	; 0x40
 80022d6:	d86f      	bhi.n	80023b8 <HAL_TIM_ConfigClockSource+0x16c>
 80022d8:	2b30      	cmp	r3, #48	; 0x30
 80022da:	d064      	beq.n	80023a6 <HAL_TIM_ConfigClockSource+0x15a>
 80022dc:	2b30      	cmp	r3, #48	; 0x30
 80022de:	d86b      	bhi.n	80023b8 <HAL_TIM_ConfigClockSource+0x16c>
 80022e0:	2b20      	cmp	r3, #32
 80022e2:	d060      	beq.n	80023a6 <HAL_TIM_ConfigClockSource+0x15a>
 80022e4:	2b20      	cmp	r3, #32
 80022e6:	d867      	bhi.n	80023b8 <HAL_TIM_ConfigClockSource+0x16c>
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d05c      	beq.n	80023a6 <HAL_TIM_ConfigClockSource+0x15a>
 80022ec:	2b10      	cmp	r3, #16
 80022ee:	d05a      	beq.n	80023a6 <HAL_TIM_ConfigClockSource+0x15a>
 80022f0:	e062      	b.n	80023b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6818      	ldr	r0, [r3, #0]
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	6899      	ldr	r1, [r3, #8]
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685a      	ldr	r2, [r3, #4]
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	f000 fb35 	bl	8002970 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002314:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68ba      	ldr	r2, [r7, #8]
 800231c:	609a      	str	r2, [r3, #8]
      break;
 800231e:	e04f      	b.n	80023c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6818      	ldr	r0, [r3, #0]
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	6899      	ldr	r1, [r3, #8]
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685a      	ldr	r2, [r3, #4]
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	f000 fb1e 	bl	8002970 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	689a      	ldr	r2, [r3, #8]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002342:	609a      	str	r2, [r3, #8]
      break;
 8002344:	e03c      	b.n	80023c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6818      	ldr	r0, [r3, #0]
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	6859      	ldr	r1, [r3, #4]
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	461a      	mov	r2, r3
 8002354:	f000 fa92 	bl	800287c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2150      	movs	r1, #80	; 0x50
 800235e:	4618      	mov	r0, r3
 8002360:	f000 faeb 	bl	800293a <TIM_ITRx_SetConfig>
      break;
 8002364:	e02c      	b.n	80023c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6818      	ldr	r0, [r3, #0]
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	6859      	ldr	r1, [r3, #4]
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	461a      	mov	r2, r3
 8002374:	f000 fab1 	bl	80028da <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2160      	movs	r1, #96	; 0x60
 800237e:	4618      	mov	r0, r3
 8002380:	f000 fadb 	bl	800293a <TIM_ITRx_SetConfig>
      break;
 8002384:	e01c      	b.n	80023c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6818      	ldr	r0, [r3, #0]
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	6859      	ldr	r1, [r3, #4]
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	461a      	mov	r2, r3
 8002394:	f000 fa72 	bl	800287c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2140      	movs	r1, #64	; 0x40
 800239e:	4618      	mov	r0, r3
 80023a0:	f000 facb 	bl	800293a <TIM_ITRx_SetConfig>
      break;
 80023a4:	e00c      	b.n	80023c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4619      	mov	r1, r3
 80023b0:	4610      	mov	r0, r2
 80023b2:	f000 fac2 	bl	800293a <TIM_ITRx_SetConfig>
      break;
 80023b6:	e003      	b.n	80023c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	73fb      	strb	r3, [r7, #15]
      break;
 80023bc:	e000      	b.n	80023c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80023be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80023d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
	...

080023dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a40      	ldr	r2, [pc, #256]	; (80024f0 <TIM_Base_SetConfig+0x114>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d013      	beq.n	800241c <TIM_Base_SetConfig+0x40>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023fa:	d00f      	beq.n	800241c <TIM_Base_SetConfig+0x40>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a3d      	ldr	r2, [pc, #244]	; (80024f4 <TIM_Base_SetConfig+0x118>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d00b      	beq.n	800241c <TIM_Base_SetConfig+0x40>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a3c      	ldr	r2, [pc, #240]	; (80024f8 <TIM_Base_SetConfig+0x11c>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d007      	beq.n	800241c <TIM_Base_SetConfig+0x40>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a3b      	ldr	r2, [pc, #236]	; (80024fc <TIM_Base_SetConfig+0x120>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d003      	beq.n	800241c <TIM_Base_SetConfig+0x40>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a3a      	ldr	r2, [pc, #232]	; (8002500 <TIM_Base_SetConfig+0x124>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d108      	bne.n	800242e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002422:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	68fa      	ldr	r2, [r7, #12]
 800242a:	4313      	orrs	r3, r2
 800242c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a2f      	ldr	r2, [pc, #188]	; (80024f0 <TIM_Base_SetConfig+0x114>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d02b      	beq.n	800248e <TIM_Base_SetConfig+0xb2>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800243c:	d027      	beq.n	800248e <TIM_Base_SetConfig+0xb2>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a2c      	ldr	r2, [pc, #176]	; (80024f4 <TIM_Base_SetConfig+0x118>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d023      	beq.n	800248e <TIM_Base_SetConfig+0xb2>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a2b      	ldr	r2, [pc, #172]	; (80024f8 <TIM_Base_SetConfig+0x11c>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d01f      	beq.n	800248e <TIM_Base_SetConfig+0xb2>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a2a      	ldr	r2, [pc, #168]	; (80024fc <TIM_Base_SetConfig+0x120>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d01b      	beq.n	800248e <TIM_Base_SetConfig+0xb2>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a29      	ldr	r2, [pc, #164]	; (8002500 <TIM_Base_SetConfig+0x124>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d017      	beq.n	800248e <TIM_Base_SetConfig+0xb2>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a28      	ldr	r2, [pc, #160]	; (8002504 <TIM_Base_SetConfig+0x128>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d013      	beq.n	800248e <TIM_Base_SetConfig+0xb2>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a27      	ldr	r2, [pc, #156]	; (8002508 <TIM_Base_SetConfig+0x12c>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d00f      	beq.n	800248e <TIM_Base_SetConfig+0xb2>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a26      	ldr	r2, [pc, #152]	; (800250c <TIM_Base_SetConfig+0x130>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d00b      	beq.n	800248e <TIM_Base_SetConfig+0xb2>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a25      	ldr	r2, [pc, #148]	; (8002510 <TIM_Base_SetConfig+0x134>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d007      	beq.n	800248e <TIM_Base_SetConfig+0xb2>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a24      	ldr	r2, [pc, #144]	; (8002514 <TIM_Base_SetConfig+0x138>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d003      	beq.n	800248e <TIM_Base_SetConfig+0xb2>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a23      	ldr	r2, [pc, #140]	; (8002518 <TIM_Base_SetConfig+0x13c>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d108      	bne.n	80024a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002494:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	4313      	orrs	r3, r2
 800249e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a0a      	ldr	r2, [pc, #40]	; (80024f0 <TIM_Base_SetConfig+0x114>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d003      	beq.n	80024d4 <TIM_Base_SetConfig+0xf8>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a0c      	ldr	r2, [pc, #48]	; (8002500 <TIM_Base_SetConfig+0x124>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d103      	bne.n	80024dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	691a      	ldr	r2, [r3, #16]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	615a      	str	r2, [r3, #20]
}
 80024e2:	bf00      	nop
 80024e4:	3714      	adds	r7, #20
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	40010000 	.word	0x40010000
 80024f4:	40000400 	.word	0x40000400
 80024f8:	40000800 	.word	0x40000800
 80024fc:	40000c00 	.word	0x40000c00
 8002500:	40010400 	.word	0x40010400
 8002504:	40014000 	.word	0x40014000
 8002508:	40014400 	.word	0x40014400
 800250c:	40014800 	.word	0x40014800
 8002510:	40001800 	.word	0x40001800
 8002514:	40001c00 	.word	0x40001c00
 8002518:	40002000 	.word	0x40002000

0800251c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800251c:	b480      	push	{r7}
 800251e:	b087      	sub	sp, #28
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a1b      	ldr	r3, [r3, #32]
 800252a:	f023 0201 	bic.w	r2, r3, #1
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a1b      	ldr	r3, [r3, #32]
 8002536:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800254a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f023 0303 	bic.w	r3, r3, #3
 8002552:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	4313      	orrs	r3, r2
 800255c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	f023 0302 	bic.w	r3, r3, #2
 8002564:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	697a      	ldr	r2, [r7, #20]
 800256c:	4313      	orrs	r3, r2
 800256e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a20      	ldr	r2, [pc, #128]	; (80025f4 <TIM_OC1_SetConfig+0xd8>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d003      	beq.n	8002580 <TIM_OC1_SetConfig+0x64>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a1f      	ldr	r2, [pc, #124]	; (80025f8 <TIM_OC1_SetConfig+0xdc>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d10c      	bne.n	800259a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	f023 0308 	bic.w	r3, r3, #8
 8002586:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	697a      	ldr	r2, [r7, #20]
 800258e:	4313      	orrs	r3, r2
 8002590:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	f023 0304 	bic.w	r3, r3, #4
 8002598:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a15      	ldr	r2, [pc, #84]	; (80025f4 <TIM_OC1_SetConfig+0xd8>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d003      	beq.n	80025aa <TIM_OC1_SetConfig+0x8e>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a14      	ldr	r2, [pc, #80]	; (80025f8 <TIM_OC1_SetConfig+0xdc>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d111      	bne.n	80025ce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80025b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685a      	ldr	r2, [r3, #4]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	697a      	ldr	r2, [r7, #20]
 80025e6:	621a      	str	r2, [r3, #32]
}
 80025e8:	bf00      	nop
 80025ea:	371c      	adds	r7, #28
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	40010000 	.word	0x40010000
 80025f8:	40010400 	.word	0x40010400

080025fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b087      	sub	sp, #28
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	f023 0210 	bic.w	r2, r3, #16
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a1b      	ldr	r3, [r3, #32]
 8002616:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800262a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002632:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	021b      	lsls	r3, r3, #8
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	4313      	orrs	r3, r2
 800263e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	f023 0320 	bic.w	r3, r3, #32
 8002646:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	011b      	lsls	r3, r3, #4
 800264e:	697a      	ldr	r2, [r7, #20]
 8002650:	4313      	orrs	r3, r2
 8002652:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4a22      	ldr	r2, [pc, #136]	; (80026e0 <TIM_OC2_SetConfig+0xe4>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d003      	beq.n	8002664 <TIM_OC2_SetConfig+0x68>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a21      	ldr	r2, [pc, #132]	; (80026e4 <TIM_OC2_SetConfig+0xe8>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d10d      	bne.n	8002680 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800266a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	011b      	lsls	r3, r3, #4
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	4313      	orrs	r3, r2
 8002676:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800267e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4a17      	ldr	r2, [pc, #92]	; (80026e0 <TIM_OC2_SetConfig+0xe4>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d003      	beq.n	8002690 <TIM_OC2_SetConfig+0x94>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a16      	ldr	r2, [pc, #88]	; (80026e4 <TIM_OC2_SetConfig+0xe8>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d113      	bne.n	80026b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002696:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800269e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	695b      	ldr	r3, [r3, #20]
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	693a      	ldr	r2, [r7, #16]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685a      	ldr	r2, [r3, #4]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	621a      	str	r2, [r3, #32]
}
 80026d2:	bf00      	nop
 80026d4:	371c      	adds	r7, #28
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	40010000 	.word	0x40010000
 80026e4:	40010400 	.word	0x40010400

080026e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b087      	sub	sp, #28
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a1b      	ldr	r3, [r3, #32]
 80026f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f023 0303 	bic.w	r3, r3, #3
 800271e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	4313      	orrs	r3, r2
 8002728:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002730:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	021b      	lsls	r3, r3, #8
 8002738:	697a      	ldr	r2, [r7, #20]
 800273a:	4313      	orrs	r3, r2
 800273c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a21      	ldr	r2, [pc, #132]	; (80027c8 <TIM_OC3_SetConfig+0xe0>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d003      	beq.n	800274e <TIM_OC3_SetConfig+0x66>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a20      	ldr	r2, [pc, #128]	; (80027cc <TIM_OC3_SetConfig+0xe4>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d10d      	bne.n	800276a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002754:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	021b      	lsls	r3, r3, #8
 800275c:	697a      	ldr	r2, [r7, #20]
 800275e:	4313      	orrs	r3, r2
 8002760:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002768:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a16      	ldr	r2, [pc, #88]	; (80027c8 <TIM_OC3_SetConfig+0xe0>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d003      	beq.n	800277a <TIM_OC3_SetConfig+0x92>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a15      	ldr	r2, [pc, #84]	; (80027cc <TIM_OC3_SetConfig+0xe4>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d113      	bne.n	80027a2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002780:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002788:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	011b      	lsls	r3, r3, #4
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	4313      	orrs	r3, r2
 8002794:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	011b      	lsls	r3, r3, #4
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	4313      	orrs	r3, r2
 80027a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685a      	ldr	r2, [r3, #4]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	697a      	ldr	r2, [r7, #20]
 80027ba:	621a      	str	r2, [r3, #32]
}
 80027bc:	bf00      	nop
 80027be:	371c      	adds	r7, #28
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	40010000 	.word	0x40010000
 80027cc:	40010400 	.word	0x40010400

080027d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b087      	sub	sp, #28
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a1b      	ldr	r3, [r3, #32]
 80027ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	69db      	ldr	r3, [r3, #28]
 80027f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002806:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	021b      	lsls	r3, r3, #8
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	4313      	orrs	r3, r2
 8002812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800281a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	031b      	lsls	r3, r3, #12
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	4313      	orrs	r3, r2
 8002826:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a12      	ldr	r2, [pc, #72]	; (8002874 <TIM_OC4_SetConfig+0xa4>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d003      	beq.n	8002838 <TIM_OC4_SetConfig+0x68>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a11      	ldr	r2, [pc, #68]	; (8002878 <TIM_OC4_SetConfig+0xa8>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d109      	bne.n	800284c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800283e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	019b      	lsls	r3, r3, #6
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	4313      	orrs	r3, r2
 800284a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685a      	ldr	r2, [r3, #4]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	621a      	str	r2, [r3, #32]
}
 8002866:	bf00      	nop
 8002868:	371c      	adds	r7, #28
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	40010000 	.word	0x40010000
 8002878:	40010400 	.word	0x40010400

0800287c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800287c:	b480      	push	{r7}
 800287e:	b087      	sub	sp, #28
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6a1b      	ldr	r3, [r3, #32]
 800288c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6a1b      	ldr	r3, [r3, #32]
 8002892:	f023 0201 	bic.w	r2, r3, #1
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	011b      	lsls	r3, r3, #4
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	f023 030a 	bic.w	r3, r3, #10
 80028b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	4313      	orrs	r3, r2
 80028c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	621a      	str	r2, [r3, #32]
}
 80028ce:	bf00      	nop
 80028d0:	371c      	adds	r7, #28
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028da:	b480      	push	{r7}
 80028dc:	b087      	sub	sp, #28
 80028de:	af00      	add	r7, sp, #0
 80028e0:	60f8      	str	r0, [r7, #12]
 80028e2:	60b9      	str	r1, [r7, #8]
 80028e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	f023 0210 	bic.w	r2, r3, #16
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6a1b      	ldr	r3, [r3, #32]
 80028fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002904:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	031b      	lsls	r3, r3, #12
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	4313      	orrs	r3, r2
 800290e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002916:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	011b      	lsls	r3, r3, #4
 800291c:	693a      	ldr	r2, [r7, #16]
 800291e:	4313      	orrs	r3, r2
 8002920:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	697a      	ldr	r2, [r7, #20]
 8002926:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	621a      	str	r2, [r3, #32]
}
 800292e:	bf00      	nop
 8002930:	371c      	adds	r7, #28
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr

0800293a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800293a:	b480      	push	{r7}
 800293c:	b085      	sub	sp, #20
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
 8002942:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002950:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	4313      	orrs	r3, r2
 8002958:	f043 0307 	orr.w	r3, r3, #7
 800295c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	68fa      	ldr	r2, [r7, #12]
 8002962:	609a      	str	r2, [r3, #8]
}
 8002964:	bf00      	nop
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002970:	b480      	push	{r7}
 8002972:	b087      	sub	sp, #28
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
 800297c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800298a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	021a      	lsls	r2, r3, #8
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	431a      	orrs	r2, r3
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	4313      	orrs	r3, r2
 8002998:	697a      	ldr	r2, [r7, #20]
 800299a:	4313      	orrs	r3, r2
 800299c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	697a      	ldr	r2, [r7, #20]
 80029a2:	609a      	str	r2, [r3, #8]
}
 80029a4:	bf00      	nop
 80029a6:	371c      	adds	r7, #28
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b087      	sub	sp, #28
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	f003 031f 	and.w	r3, r3, #31
 80029c2:	2201      	movs	r2, #1
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6a1a      	ldr	r2, [r3, #32]
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	43db      	mvns	r3, r3
 80029d2:	401a      	ands	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6a1a      	ldr	r2, [r3, #32]
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	f003 031f 	and.w	r3, r3, #31
 80029e2:	6879      	ldr	r1, [r7, #4]
 80029e4:	fa01 f303 	lsl.w	r3, r1, r3
 80029e8:	431a      	orrs	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	621a      	str	r2, [r3, #32]
}
 80029ee:	bf00      	nop
 80029f0:	371c      	adds	r7, #28
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
	...

080029fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d101      	bne.n	8002a14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a10:	2302      	movs	r3, #2
 8002a12:	e05a      	b.n	8002aca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2202      	movs	r2, #2
 8002a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a21      	ldr	r2, [pc, #132]	; (8002ad8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d022      	beq.n	8002a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a60:	d01d      	beq.n	8002a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a1d      	ldr	r2, [pc, #116]	; (8002adc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d018      	beq.n	8002a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a1b      	ldr	r2, [pc, #108]	; (8002ae0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d013      	beq.n	8002a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a1a      	ldr	r2, [pc, #104]	; (8002ae4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d00e      	beq.n	8002a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a18      	ldr	r2, [pc, #96]	; (8002ae8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d009      	beq.n	8002a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a17      	ldr	r2, [pc, #92]	; (8002aec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d004      	beq.n	8002a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a15      	ldr	r2, [pc, #84]	; (8002af0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d10c      	bne.n	8002ab8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002aa4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	68ba      	ldr	r2, [r7, #8]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68ba      	ldr	r2, [r7, #8]
 8002ab6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3714      	adds	r7, #20
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	40010000 	.word	0x40010000
 8002adc:	40000400 	.word	0x40000400
 8002ae0:	40000800 	.word	0x40000800
 8002ae4:	40000c00 	.word	0x40000c00
 8002ae8:	40010400 	.word	0x40010400
 8002aec:	40014000 	.word	0x40014000
 8002af0:	40001800 	.word	0x40001800

08002af4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b085      	sub	sp, #20
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002afe:	2300      	movs	r3, #0
 8002b00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d101      	bne.n	8002b10 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	e03d      	b.n	8002b8c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3714      	adds	r7, #20
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e03f      	b.n	8002c2a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d106      	bne.n	8002bc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f7fe f830 	bl	8000c24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2224      	movs	r2, #36	; 0x24
 8002bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68da      	ldr	r2, [r3, #12]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 f829 	bl	8002c34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	691a      	ldr	r2, [r3, #16]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bf0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	695a      	ldr	r2, [r3, #20]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68da      	ldr	r2, [r3, #12]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2220      	movs	r2, #32
 8002c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2220      	movs	r2, #32
 8002c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
	...

08002c34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c38:	b09f      	sub	sp, #124	; 0x7c
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002c48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c4a:	68d9      	ldr	r1, [r3, #12]
 8002c4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	ea40 0301 	orr.w	r3, r0, r1
 8002c54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c58:	689a      	ldr	r2, [r3, #8]
 8002c5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c62:	695b      	ldr	r3, [r3, #20]
 8002c64:	431a      	orrs	r2, r3
 8002c66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c68:	69db      	ldr	r3, [r3, #28]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002c6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002c78:	f021 010c 	bic.w	r1, r1, #12
 8002c7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c82:	430b      	orrs	r3, r1
 8002c84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	695b      	ldr	r3, [r3, #20]
 8002c8c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002c90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c92:	6999      	ldr	r1, [r3, #24]
 8002c94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	ea40 0301 	orr.w	r3, r0, r1
 8002c9c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	4bc5      	ldr	r3, [pc, #788]	; (8002fb8 <UART_SetConfig+0x384>)
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d004      	beq.n	8002cb2 <UART_SetConfig+0x7e>
 8002ca8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	4bc3      	ldr	r3, [pc, #780]	; (8002fbc <UART_SetConfig+0x388>)
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d103      	bne.n	8002cba <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002cb2:	f7fe fc35 	bl	8001520 <HAL_RCC_GetPCLK2Freq>
 8002cb6:	6778      	str	r0, [r7, #116]	; 0x74
 8002cb8:	e002      	b.n	8002cc0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002cba:	f7fe fc1d 	bl	80014f8 <HAL_RCC_GetPCLK1Freq>
 8002cbe:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cc2:	69db      	ldr	r3, [r3, #28]
 8002cc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cc8:	f040 80b6 	bne.w	8002e38 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ccc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cce:	461c      	mov	r4, r3
 8002cd0:	f04f 0500 	mov.w	r5, #0
 8002cd4:	4622      	mov	r2, r4
 8002cd6:	462b      	mov	r3, r5
 8002cd8:	1891      	adds	r1, r2, r2
 8002cda:	6439      	str	r1, [r7, #64]	; 0x40
 8002cdc:	415b      	adcs	r3, r3
 8002cde:	647b      	str	r3, [r7, #68]	; 0x44
 8002ce0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002ce4:	1912      	adds	r2, r2, r4
 8002ce6:	eb45 0303 	adc.w	r3, r5, r3
 8002cea:	f04f 0000 	mov.w	r0, #0
 8002cee:	f04f 0100 	mov.w	r1, #0
 8002cf2:	00d9      	lsls	r1, r3, #3
 8002cf4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002cf8:	00d0      	lsls	r0, r2, #3
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	1911      	adds	r1, r2, r4
 8002d00:	6639      	str	r1, [r7, #96]	; 0x60
 8002d02:	416b      	adcs	r3, r5
 8002d04:	667b      	str	r3, [r7, #100]	; 0x64
 8002d06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	f04f 0300 	mov.w	r3, #0
 8002d10:	1891      	adds	r1, r2, r2
 8002d12:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d14:	415b      	adcs	r3, r3
 8002d16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002d1c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002d20:	f7fd fa70 	bl	8000204 <__aeabi_uldivmod>
 8002d24:	4602      	mov	r2, r0
 8002d26:	460b      	mov	r3, r1
 8002d28:	4ba5      	ldr	r3, [pc, #660]	; (8002fc0 <UART_SetConfig+0x38c>)
 8002d2a:	fba3 2302 	umull	r2, r3, r3, r2
 8002d2e:	095b      	lsrs	r3, r3, #5
 8002d30:	011e      	lsls	r6, r3, #4
 8002d32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d34:	461c      	mov	r4, r3
 8002d36:	f04f 0500 	mov.w	r5, #0
 8002d3a:	4622      	mov	r2, r4
 8002d3c:	462b      	mov	r3, r5
 8002d3e:	1891      	adds	r1, r2, r2
 8002d40:	6339      	str	r1, [r7, #48]	; 0x30
 8002d42:	415b      	adcs	r3, r3
 8002d44:	637b      	str	r3, [r7, #52]	; 0x34
 8002d46:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002d4a:	1912      	adds	r2, r2, r4
 8002d4c:	eb45 0303 	adc.w	r3, r5, r3
 8002d50:	f04f 0000 	mov.w	r0, #0
 8002d54:	f04f 0100 	mov.w	r1, #0
 8002d58:	00d9      	lsls	r1, r3, #3
 8002d5a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d5e:	00d0      	lsls	r0, r2, #3
 8002d60:	4602      	mov	r2, r0
 8002d62:	460b      	mov	r3, r1
 8002d64:	1911      	adds	r1, r2, r4
 8002d66:	65b9      	str	r1, [r7, #88]	; 0x58
 8002d68:	416b      	adcs	r3, r5
 8002d6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	461a      	mov	r2, r3
 8002d72:	f04f 0300 	mov.w	r3, #0
 8002d76:	1891      	adds	r1, r2, r2
 8002d78:	62b9      	str	r1, [r7, #40]	; 0x28
 8002d7a:	415b      	adcs	r3, r3
 8002d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d82:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002d86:	f7fd fa3d 	bl	8000204 <__aeabi_uldivmod>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	4b8c      	ldr	r3, [pc, #560]	; (8002fc0 <UART_SetConfig+0x38c>)
 8002d90:	fba3 1302 	umull	r1, r3, r3, r2
 8002d94:	095b      	lsrs	r3, r3, #5
 8002d96:	2164      	movs	r1, #100	; 0x64
 8002d98:	fb01 f303 	mul.w	r3, r1, r3
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	3332      	adds	r3, #50	; 0x32
 8002da2:	4a87      	ldr	r2, [pc, #540]	; (8002fc0 <UART_SetConfig+0x38c>)
 8002da4:	fba2 2303 	umull	r2, r3, r2, r3
 8002da8:	095b      	lsrs	r3, r3, #5
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002db0:	441e      	add	r6, r3
 8002db2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002db4:	4618      	mov	r0, r3
 8002db6:	f04f 0100 	mov.w	r1, #0
 8002dba:	4602      	mov	r2, r0
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	1894      	adds	r4, r2, r2
 8002dc0:	623c      	str	r4, [r7, #32]
 8002dc2:	415b      	adcs	r3, r3
 8002dc4:	627b      	str	r3, [r7, #36]	; 0x24
 8002dc6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002dca:	1812      	adds	r2, r2, r0
 8002dcc:	eb41 0303 	adc.w	r3, r1, r3
 8002dd0:	f04f 0400 	mov.w	r4, #0
 8002dd4:	f04f 0500 	mov.w	r5, #0
 8002dd8:	00dd      	lsls	r5, r3, #3
 8002dda:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002dde:	00d4      	lsls	r4, r2, #3
 8002de0:	4622      	mov	r2, r4
 8002de2:	462b      	mov	r3, r5
 8002de4:	1814      	adds	r4, r2, r0
 8002de6:	653c      	str	r4, [r7, #80]	; 0x50
 8002de8:	414b      	adcs	r3, r1
 8002dea:	657b      	str	r3, [r7, #84]	; 0x54
 8002dec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	461a      	mov	r2, r3
 8002df2:	f04f 0300 	mov.w	r3, #0
 8002df6:	1891      	adds	r1, r2, r2
 8002df8:	61b9      	str	r1, [r7, #24]
 8002dfa:	415b      	adcs	r3, r3
 8002dfc:	61fb      	str	r3, [r7, #28]
 8002dfe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e02:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002e06:	f7fd f9fd 	bl	8000204 <__aeabi_uldivmod>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	4b6c      	ldr	r3, [pc, #432]	; (8002fc0 <UART_SetConfig+0x38c>)
 8002e10:	fba3 1302 	umull	r1, r3, r3, r2
 8002e14:	095b      	lsrs	r3, r3, #5
 8002e16:	2164      	movs	r1, #100	; 0x64
 8002e18:	fb01 f303 	mul.w	r3, r1, r3
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	3332      	adds	r3, #50	; 0x32
 8002e22:	4a67      	ldr	r2, [pc, #412]	; (8002fc0 <UART_SetConfig+0x38c>)
 8002e24:	fba2 2303 	umull	r2, r3, r2, r3
 8002e28:	095b      	lsrs	r3, r3, #5
 8002e2a:	f003 0207 	and.w	r2, r3, #7
 8002e2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4432      	add	r2, r6
 8002e34:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e36:	e0b9      	b.n	8002fac <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e3a:	461c      	mov	r4, r3
 8002e3c:	f04f 0500 	mov.w	r5, #0
 8002e40:	4622      	mov	r2, r4
 8002e42:	462b      	mov	r3, r5
 8002e44:	1891      	adds	r1, r2, r2
 8002e46:	6139      	str	r1, [r7, #16]
 8002e48:	415b      	adcs	r3, r3
 8002e4a:	617b      	str	r3, [r7, #20]
 8002e4c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e50:	1912      	adds	r2, r2, r4
 8002e52:	eb45 0303 	adc.w	r3, r5, r3
 8002e56:	f04f 0000 	mov.w	r0, #0
 8002e5a:	f04f 0100 	mov.w	r1, #0
 8002e5e:	00d9      	lsls	r1, r3, #3
 8002e60:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e64:	00d0      	lsls	r0, r2, #3
 8002e66:	4602      	mov	r2, r0
 8002e68:	460b      	mov	r3, r1
 8002e6a:	eb12 0804 	adds.w	r8, r2, r4
 8002e6e:	eb43 0905 	adc.w	r9, r3, r5
 8002e72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f04f 0100 	mov.w	r1, #0
 8002e7c:	f04f 0200 	mov.w	r2, #0
 8002e80:	f04f 0300 	mov.w	r3, #0
 8002e84:	008b      	lsls	r3, r1, #2
 8002e86:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002e8a:	0082      	lsls	r2, r0, #2
 8002e8c:	4640      	mov	r0, r8
 8002e8e:	4649      	mov	r1, r9
 8002e90:	f7fd f9b8 	bl	8000204 <__aeabi_uldivmod>
 8002e94:	4602      	mov	r2, r0
 8002e96:	460b      	mov	r3, r1
 8002e98:	4b49      	ldr	r3, [pc, #292]	; (8002fc0 <UART_SetConfig+0x38c>)
 8002e9a:	fba3 2302 	umull	r2, r3, r3, r2
 8002e9e:	095b      	lsrs	r3, r3, #5
 8002ea0:	011e      	lsls	r6, r3, #4
 8002ea2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f04f 0100 	mov.w	r1, #0
 8002eaa:	4602      	mov	r2, r0
 8002eac:	460b      	mov	r3, r1
 8002eae:	1894      	adds	r4, r2, r2
 8002eb0:	60bc      	str	r4, [r7, #8]
 8002eb2:	415b      	adcs	r3, r3
 8002eb4:	60fb      	str	r3, [r7, #12]
 8002eb6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002eba:	1812      	adds	r2, r2, r0
 8002ebc:	eb41 0303 	adc.w	r3, r1, r3
 8002ec0:	f04f 0400 	mov.w	r4, #0
 8002ec4:	f04f 0500 	mov.w	r5, #0
 8002ec8:	00dd      	lsls	r5, r3, #3
 8002eca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002ece:	00d4      	lsls	r4, r2, #3
 8002ed0:	4622      	mov	r2, r4
 8002ed2:	462b      	mov	r3, r5
 8002ed4:	1814      	adds	r4, r2, r0
 8002ed6:	64bc      	str	r4, [r7, #72]	; 0x48
 8002ed8:	414b      	adcs	r3, r1
 8002eda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002edc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f04f 0100 	mov.w	r1, #0
 8002ee6:	f04f 0200 	mov.w	r2, #0
 8002eea:	f04f 0300 	mov.w	r3, #0
 8002eee:	008b      	lsls	r3, r1, #2
 8002ef0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002ef4:	0082      	lsls	r2, r0, #2
 8002ef6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002efa:	f7fd f983 	bl	8000204 <__aeabi_uldivmod>
 8002efe:	4602      	mov	r2, r0
 8002f00:	460b      	mov	r3, r1
 8002f02:	4b2f      	ldr	r3, [pc, #188]	; (8002fc0 <UART_SetConfig+0x38c>)
 8002f04:	fba3 1302 	umull	r1, r3, r3, r2
 8002f08:	095b      	lsrs	r3, r3, #5
 8002f0a:	2164      	movs	r1, #100	; 0x64
 8002f0c:	fb01 f303 	mul.w	r3, r1, r3
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	011b      	lsls	r3, r3, #4
 8002f14:	3332      	adds	r3, #50	; 0x32
 8002f16:	4a2a      	ldr	r2, [pc, #168]	; (8002fc0 <UART_SetConfig+0x38c>)
 8002f18:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1c:	095b      	lsrs	r3, r3, #5
 8002f1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f22:	441e      	add	r6, r3
 8002f24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f26:	4618      	mov	r0, r3
 8002f28:	f04f 0100 	mov.w	r1, #0
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	460b      	mov	r3, r1
 8002f30:	1894      	adds	r4, r2, r2
 8002f32:	603c      	str	r4, [r7, #0]
 8002f34:	415b      	adcs	r3, r3
 8002f36:	607b      	str	r3, [r7, #4]
 8002f38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f3c:	1812      	adds	r2, r2, r0
 8002f3e:	eb41 0303 	adc.w	r3, r1, r3
 8002f42:	f04f 0400 	mov.w	r4, #0
 8002f46:	f04f 0500 	mov.w	r5, #0
 8002f4a:	00dd      	lsls	r5, r3, #3
 8002f4c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002f50:	00d4      	lsls	r4, r2, #3
 8002f52:	4622      	mov	r2, r4
 8002f54:	462b      	mov	r3, r5
 8002f56:	eb12 0a00 	adds.w	sl, r2, r0
 8002f5a:	eb43 0b01 	adc.w	fp, r3, r1
 8002f5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f04f 0100 	mov.w	r1, #0
 8002f68:	f04f 0200 	mov.w	r2, #0
 8002f6c:	f04f 0300 	mov.w	r3, #0
 8002f70:	008b      	lsls	r3, r1, #2
 8002f72:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002f76:	0082      	lsls	r2, r0, #2
 8002f78:	4650      	mov	r0, sl
 8002f7a:	4659      	mov	r1, fp
 8002f7c:	f7fd f942 	bl	8000204 <__aeabi_uldivmod>
 8002f80:	4602      	mov	r2, r0
 8002f82:	460b      	mov	r3, r1
 8002f84:	4b0e      	ldr	r3, [pc, #56]	; (8002fc0 <UART_SetConfig+0x38c>)
 8002f86:	fba3 1302 	umull	r1, r3, r3, r2
 8002f8a:	095b      	lsrs	r3, r3, #5
 8002f8c:	2164      	movs	r1, #100	; 0x64
 8002f8e:	fb01 f303 	mul.w	r3, r1, r3
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	011b      	lsls	r3, r3, #4
 8002f96:	3332      	adds	r3, #50	; 0x32
 8002f98:	4a09      	ldr	r2, [pc, #36]	; (8002fc0 <UART_SetConfig+0x38c>)
 8002f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9e:	095b      	lsrs	r3, r3, #5
 8002fa0:	f003 020f 	and.w	r2, r3, #15
 8002fa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4432      	add	r2, r6
 8002faa:	609a      	str	r2, [r3, #8]
}
 8002fac:	bf00      	nop
 8002fae:	377c      	adds	r7, #124	; 0x7c
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fb6:	bf00      	nop
 8002fb8:	40011000 	.word	0x40011000
 8002fbc:	40011400 	.word	0x40011400
 8002fc0:	51eb851f 	.word	0x51eb851f

08002fc4 <__libc_init_array>:
 8002fc4:	b570      	push	{r4, r5, r6, lr}
 8002fc6:	4d0d      	ldr	r5, [pc, #52]	; (8002ffc <__libc_init_array+0x38>)
 8002fc8:	4c0d      	ldr	r4, [pc, #52]	; (8003000 <__libc_init_array+0x3c>)
 8002fca:	1b64      	subs	r4, r4, r5
 8002fcc:	10a4      	asrs	r4, r4, #2
 8002fce:	2600      	movs	r6, #0
 8002fd0:	42a6      	cmp	r6, r4
 8002fd2:	d109      	bne.n	8002fe8 <__libc_init_array+0x24>
 8002fd4:	4d0b      	ldr	r5, [pc, #44]	; (8003004 <__libc_init_array+0x40>)
 8002fd6:	4c0c      	ldr	r4, [pc, #48]	; (8003008 <__libc_init_array+0x44>)
 8002fd8:	f000 f820 	bl	800301c <_init>
 8002fdc:	1b64      	subs	r4, r4, r5
 8002fde:	10a4      	asrs	r4, r4, #2
 8002fe0:	2600      	movs	r6, #0
 8002fe2:	42a6      	cmp	r6, r4
 8002fe4:	d105      	bne.n	8002ff2 <__libc_init_array+0x2e>
 8002fe6:	bd70      	pop	{r4, r5, r6, pc}
 8002fe8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fec:	4798      	blx	r3
 8002fee:	3601      	adds	r6, #1
 8002ff0:	e7ee      	b.n	8002fd0 <__libc_init_array+0xc>
 8002ff2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ff6:	4798      	blx	r3
 8002ff8:	3601      	adds	r6, #1
 8002ffa:	e7f2      	b.n	8002fe2 <__libc_init_array+0x1e>
 8002ffc:	08003054 	.word	0x08003054
 8003000:	08003054 	.word	0x08003054
 8003004:	08003054 	.word	0x08003054
 8003008:	08003058 	.word	0x08003058

0800300c <memset>:
 800300c:	4402      	add	r2, r0
 800300e:	4603      	mov	r3, r0
 8003010:	4293      	cmp	r3, r2
 8003012:	d100      	bne.n	8003016 <memset+0xa>
 8003014:	4770      	bx	lr
 8003016:	f803 1b01 	strb.w	r1, [r3], #1
 800301a:	e7f9      	b.n	8003010 <memset+0x4>

0800301c <_init>:
 800301c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800301e:	bf00      	nop
 8003020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003022:	bc08      	pop	{r3}
 8003024:	469e      	mov	lr, r3
 8003026:	4770      	bx	lr

08003028 <_fini>:
 8003028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800302a:	bf00      	nop
 800302c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800302e:	bc08      	pop	{r3}
 8003030:	469e      	mov	lr, r3
 8003032:	4770      	bx	lr
