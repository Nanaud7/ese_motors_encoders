
ese_motors_encoders.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d3c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  08008f10  08008f10  00018f10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009404  08009404  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  08009404  08009404  00019404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800940c  0800940c  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800940c  0800940c  0001940c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009410  08009410  00019410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08009414  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b0  200001f0  08009604  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200007a0  08009604  000207a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018cb4  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003579  00000000  00000000  00038ed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a0  00000000  00000000  0003c450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f38  00000000  00000000  0003d4f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025df0  00000000  00000000  0003e428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001629b  00000000  00000000  00064218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e00fe  00000000  00000000  0007a4b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015a5b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000548c  00000000  00000000  0015a604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008ef4 	.word	0x08008ef4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f4 	.word	0x200001f4
 800020c:	08008ef4 	.word	0x08008ef4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96e 	b.w	8000f7c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468c      	mov	ip, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8083 	bne.w	8000dce <__udivmoddi4+0x116>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d947      	bls.n	8000d5e <__udivmoddi4+0xa6>
 8000cce:	fab2 f282 	clz	r2, r2
 8000cd2:	b142      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	f1c2 0020 	rsb	r0, r2, #32
 8000cd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	4097      	lsls	r7, r2
 8000ce0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbbc f6f8 	udiv	r6, ip, r8
 8000cf0:	fa1f fe87 	uxth.w	lr, r7
 8000cf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0a:	f080 8119 	bcs.w	8000f40 <__udivmoddi4+0x288>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8116 	bls.w	8000f40 <__udivmoddi4+0x288>
 8000d14:	3e02      	subs	r6, #2
 8000d16:	443b      	add	r3, r7
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d20:	fb08 3310 	mls	r3, r8, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d2c:	45a6      	cmp	lr, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	193c      	adds	r4, r7, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8105 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d3a:	45a6      	cmp	lr, r4
 8000d3c:	f240 8102 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d40:	3802      	subs	r0, #2
 8000d42:	443c      	add	r4, r7
 8000d44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d48:	eba4 040e 	sub.w	r4, r4, lr
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	b11d      	cbz	r5, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c5 4300 	strd	r4, r3, [r5]
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	b902      	cbnz	r2, 8000d62 <__udivmoddi4+0xaa>
 8000d60:	deff      	udf	#255	; 0xff
 8000d62:	fab2 f282 	clz	r2, r2
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	d150      	bne.n	8000e0c <__udivmoddi4+0x154>
 8000d6a:	1bcb      	subs	r3, r1, r7
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa1f f887 	uxth.w	r8, r7
 8000d74:	2601      	movs	r6, #1
 8000d76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d7a:	0c21      	lsrs	r1, r4, #16
 8000d7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb08 f30c 	mul.w	r3, r8, ip
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0xe2>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	f200 80e9 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1ac9      	subs	r1, r1, r3
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x10c>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x10a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80d9 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e7bf      	b.n	8000d4e <__udivmoddi4+0x96>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x12e>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80b1 	beq.w	8000f3a <__udivmoddi4+0x282>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x1cc>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0x140>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80b8 	bhi.w	8000f68 <__udivmoddi4+0x2b0>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	468c      	mov	ip, r1
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0a8      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000e06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e0a:	e7a5      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f603 	lsr.w	r6, r0, r3
 8000e14:	4097      	lsls	r7, r2
 8000e16:	fa01 f002 	lsl.w	r0, r1, r2
 8000e1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1e:	40d9      	lsrs	r1, r3
 8000e20:	4330      	orrs	r0, r6
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e28:	fa1f f887 	uxth.w	r8, r7
 8000e2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e34:	fb06 f108 	mul.w	r1, r6, r8
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3e:	d909      	bls.n	8000e54 <__udivmoddi4+0x19c>
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e46:	f080 808d 	bcs.w	8000f64 <__udivmoddi4+0x2ac>
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	f240 808a 	bls.w	8000f64 <__udivmoddi4+0x2ac>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	443b      	add	r3, r7
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b281      	uxth	r1, r0
 8000e58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e64:	fb00 f308 	mul.w	r3, r0, r8
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x1c4>
 8000e6c:	1879      	adds	r1, r7, r1
 8000e6e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e72:	d273      	bcs.n	8000f5c <__udivmoddi4+0x2a4>
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d971      	bls.n	8000f5c <__udivmoddi4+0x2a4>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4439      	add	r1, r7
 8000e7c:	1acb      	subs	r3, r1, r3
 8000e7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e82:	e778      	b.n	8000d76 <__udivmoddi4+0xbe>
 8000e84:	f1c6 0c20 	rsb	ip, r6, #32
 8000e88:	fa03 f406 	lsl.w	r4, r3, r6
 8000e8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e90:	431c      	orrs	r4, r3
 8000e92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ea2:	431f      	orrs	r7, r3
 8000ea4:	0c3b      	lsrs	r3, r7, #16
 8000ea6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eaa:	fa1f f884 	uxth.w	r8, r4
 8000eae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eb2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000eb6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eba:	458a      	cmp	sl, r1
 8000ebc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x220>
 8000ec6:	1861      	adds	r1, r4, r1
 8000ec8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ecc:	d248      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000ece:	458a      	cmp	sl, r1
 8000ed0:	d946      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000ed2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ed6:	4421      	add	r1, r4
 8000ed8:	eba1 010a 	sub.w	r1, r1, sl
 8000edc:	b2bf      	uxth	r7, r7
 8000ede:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ee2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ee6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eea:	fb00 f808 	mul.w	r8, r0, r8
 8000eee:	45b8      	cmp	r8, r7
 8000ef0:	d907      	bls.n	8000f02 <__udivmoddi4+0x24a>
 8000ef2:	19e7      	adds	r7, r4, r7
 8000ef4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ef8:	d22e      	bcs.n	8000f58 <__udivmoddi4+0x2a0>
 8000efa:	45b8      	cmp	r8, r7
 8000efc:	d92c      	bls.n	8000f58 <__udivmoddi4+0x2a0>
 8000efe:	3802      	subs	r0, #2
 8000f00:	4427      	add	r7, r4
 8000f02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f06:	eba7 0708 	sub.w	r7, r7, r8
 8000f0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f0e:	454f      	cmp	r7, r9
 8000f10:	46c6      	mov	lr, r8
 8000f12:	4649      	mov	r1, r9
 8000f14:	d31a      	bcc.n	8000f4c <__udivmoddi4+0x294>
 8000f16:	d017      	beq.n	8000f48 <__udivmoddi4+0x290>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x27a>
 8000f1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f26:	40f2      	lsrs	r2, r6
 8000f28:	ea4c 0202 	orr.w	r2, ip, r2
 8000f2c:	40f7      	lsrs	r7, r6
 8000f2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f32:	2600      	movs	r6, #0
 8000f34:	4631      	mov	r1, r6
 8000f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e70b      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6fd      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f48:	4543      	cmp	r3, r8
 8000f4a:	d2e5      	bcs.n	8000f18 <__udivmoddi4+0x260>
 8000f4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f50:	eb69 0104 	sbc.w	r1, r9, r4
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7df      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e7d2      	b.n	8000f02 <__udivmoddi4+0x24a>
 8000f5c:	4660      	mov	r0, ip
 8000f5e:	e78d      	b.n	8000e7c <__udivmoddi4+0x1c4>
 8000f60:	4681      	mov	r9, r0
 8000f62:	e7b9      	b.n	8000ed8 <__udivmoddi4+0x220>
 8000f64:	4666      	mov	r6, ip
 8000f66:	e775      	b.n	8000e54 <__udivmoddi4+0x19c>
 8000f68:	4630      	mov	r0, r6
 8000f6a:	e74a      	b.n	8000e02 <__udivmoddi4+0x14a>
 8000f6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f70:	4439      	add	r1, r7
 8000f72:	e713      	b.n	8000d9c <__udivmoddi4+0xe4>
 8000f74:	3802      	subs	r0, #2
 8000f76:	443c      	add	r4, r7
 8000f78:	e724      	b.n	8000dc4 <__udivmoddi4+0x10c>
 8000f7a:	bf00      	nop

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <Ctrl_Init_SetTimer>:
/*	@brief	Initialization of the motor control configuration structure with timer settings
 *	@param	Motor is a Ctrl_Struct structure
 *	@param 	htim is the TIM handle
 *	@retval 0
 */
uint8_t Ctrl_Init_SetTimer(ASSERV_HandleTypeDef* Control, TIM_HandleTypeDef *htim){
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
	Control->Timer = htim;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	683a      	ldr	r2, [r7, #0]
 8000f8e:	601a      	str	r2, [r3, #0]

	HAL_TIM_Base_Start_IT(Control->Timer);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f003 f8e3 	bl	8004160 <HAL_TIM_Base_Start_IT>
	return 0;
 8000f9a:	2300      	movs	r3, #0
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <Ctrl_Set_Consigne>:

uint8_t Ctrl_Set_Consigne(double new_Consigne){
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	ed87 0b00 	vstr	d0, [r7]
	consigne = new_Consigne;
 8000fae:	4908      	ldr	r1, [pc, #32]	; (8000fd0 <Ctrl_Set_Consigne+0x2c>)
 8000fb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fb4:	e9c1 2300 	strd	r2, r3, [r1]
	printf("New consigne = %f\r\n",consigne);
 8000fb8:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <Ctrl_Set_Consigne+0x2c>)
 8000fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fbe:	4805      	ldr	r0, [pc, #20]	; (8000fd4 <Ctrl_Set_Consigne+0x30>)
 8000fc0:	f005 fea4 	bl	8006d0c <iprintf>
	return 0;
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000000 	.word	0x20000000
 8000fd4:	08008f10 	.word	0x08008f10

08000fd8 <Ctrl_SpeedControl>:

/*	@brief	Speed control function called with a 50Hz frequency
 *	@param	None
 *	@retval 0
 */
float Ctrl_SpeedControl(MOT_HandleTypeDef* Motor, ENC_HandleTypeDef* Encoder){
 8000fd8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000fdc:	b088      	sub	sp, #32
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
 8000fe2:	6039      	str	r1, [r7, #0]
	//static double sommeErreur = 0;

	// Réception du nombre de ticks du codeur
	int16_t ticks = ENC_GetCnt(Encoder);
 8000fe4:	6838      	ldr	r0, [r7, #0]
 8000fe6:	f000 f8e0 	bl	80011aa <ENC_GetCnt>
 8000fea:	4603      	mov	r3, r0
 8000fec:	83fb      	strh	r3, [r7, #30]
	if(ticks < 0) ticks = abs(ticks);
 8000fee:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	da06      	bge.n	8001004 <Ctrl_SpeedControl+0x2c>
 8000ff6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	bfb8      	it	lt
 8000ffe:	425b      	neglt	r3, r3
 8001000:	b29b      	uxth	r3, r3
 8001002:	83fb      	strh	r3, [r7, #30]

	// Calcul de la vitesse à part
	int freq_codeuse = SPEED_CONTROL_FREQUENCY * ticks;
 8001004:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001008:	2232      	movs	r2, #50	; 0x32
 800100a:	fb02 f303 	mul.w	r3, r2, r3
 800100e:	617b      	str	r3, [r7, #20]
	//float speed = (float)freq_codeuse/(float)ENCODER_PPR; 				// Vitesse en tour/min
	//float speed = (float)freq_codeuse * (float)DISTANCE_PER_TICK;			// Vitesse en mm/sec
	float speed = ((float)freq_codeuse * ((float)WHEEL_PERIMETER/Encoder->TicksPerRev)) / 1000;	// Vitesse en m/sec
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	ee07 3a90 	vmov	s15, r3
 8001016:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	899b      	ldrh	r3, [r3, #12]
 800101e:	ee07 3a90 	vmov	s15, r3
 8001022:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001026:	ed9f 6a41 	vldr	s12, [pc, #260]	; 800112c <Ctrl_SpeedControl+0x154>
 800102a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800102e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001032:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8001130 <Ctrl_SpeedControl+0x158>
 8001036:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800103a:	edc7 7a04 	vstr	s15, [r7, #16]

	// Erreur entre la consigne et la vitesse calculée
	//double erreur = consigne - speed;
	float erreur = consigne - speed;
 800103e:	4b3d      	ldr	r3, [pc, #244]	; (8001134 <Ctrl_SpeedControl+0x15c>)
 8001040:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001044:	6938      	ldr	r0, [r7, #16]
 8001046:	f7ff fa9f 	bl	8000588 <__aeabi_f2d>
 800104a:	4602      	mov	r2, r0
 800104c:	460b      	mov	r3, r1
 800104e:	4620      	mov	r0, r4
 8001050:	4629      	mov	r1, r5
 8001052:	f7ff f939 	bl	80002c8 <__aeabi_dsub>
 8001056:	4602      	mov	r2, r0
 8001058:	460b      	mov	r3, r1
 800105a:	4610      	mov	r0, r2
 800105c:	4619      	mov	r1, r3
 800105e:	f7ff fdc3 	bl	8000be8 <__aeabi_d2f>
 8001062:	4603      	mov	r3, r0
 8001064:	60fb      	str	r3, [r7, #12]
	Motor->sommeErreur += erreur;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 800106c:	68f8      	ldr	r0, [r7, #12]
 800106e:	f7ff fa8b 	bl	8000588 <__aeabi_f2d>
 8001072:	4602      	mov	r2, r0
 8001074:	460b      	mov	r3, r1
 8001076:	4620      	mov	r0, r4
 8001078:	4629      	mov	r1, r5
 800107a:	f7ff f927 	bl	80002cc <__adddf3>
 800107e:	4602      	mov	r2, r0
 8001080:	460b      	mov	r3, r1
 8001082:	6879      	ldr	r1, [r7, #4]
 8001084:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	// Correcteur PI
	float cmd = 60 + erreur * Motor->Kp + Motor->sommeErreur * Motor->Ki;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	ed93 7a07 	vldr	s14, [r3, #28]
 800108e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001096:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001138 <Ctrl_SpeedControl+0x160>
 800109a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800109e:	ee17 0a90 	vmov	r0, s15
 80010a2:	f7ff fa71 	bl	8000588 <__aeabi_f2d>
 80010a6:	4680      	mov	r8, r0
 80010a8:	4689      	mov	r9, r1
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6a1b      	ldr	r3, [r3, #32]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff fa67 	bl	8000588 <__aeabi_f2d>
 80010ba:	4602      	mov	r2, r0
 80010bc:	460b      	mov	r3, r1
 80010be:	4620      	mov	r0, r4
 80010c0:	4629      	mov	r1, r5
 80010c2:	f7ff fab9 	bl	8000638 <__aeabi_dmul>
 80010c6:	4602      	mov	r2, r0
 80010c8:	460b      	mov	r3, r1
 80010ca:	4640      	mov	r0, r8
 80010cc:	4649      	mov	r1, r9
 80010ce:	f7ff f8fd 	bl	80002cc <__adddf3>
 80010d2:	4602      	mov	r2, r0
 80010d4:	460b      	mov	r3, r1
 80010d6:	4610      	mov	r0, r2
 80010d8:	4619      	mov	r1, r3
 80010da:	f7ff fd85 	bl	8000be8 <__aeabi_d2f>
 80010de:	4603      	mov	r3, r0
 80010e0:	61bb      	str	r3, [r7, #24]
	if(cmd >= 80) 		cmd = 80;
 80010e2:	edd7 7a06 	vldr	s15, [r7, #24]
 80010e6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800113c <Ctrl_SpeedControl+0x164>
 80010ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f2:	db02      	blt.n	80010fa <Ctrl_SpeedControl+0x122>
 80010f4:	4b12      	ldr	r3, [pc, #72]	; (8001140 <Ctrl_SpeedControl+0x168>)
 80010f6:	61bb      	str	r3, [r7, #24]
 80010f8:	e009      	b.n	800110e <Ctrl_SpeedControl+0x136>
	else if(cmd < 0) 	cmd = 0;
 80010fa:	edd7 7a06 	vldr	s15, [r7, #24]
 80010fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001106:	d502      	bpl.n	800110e <Ctrl_SpeedControl+0x136>
 8001108:	f04f 0300 	mov.w	r3, #0
 800110c:	61bb      	str	r3, [r7, #24]

	MOT_SetDutyCycle(Motor,cmd);
 800110e:	ed97 0a06 	vldr	s0, [r7, #24]
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f000 f910 	bl	8001338 <MOT_SetDutyCycle>

	return speed;
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	ee07 3a90 	vmov	s15, r3
}
 800111e:	eeb0 0a67 	vmov.f32	s0, s15
 8001122:	3720      	adds	r7, #32
 8001124:	46bd      	mov	sp, r7
 8001126:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800112a:	bf00      	nop
 800112c:	42f82db2 	.word	0x42f82db2
 8001130:	447a0000 	.word	0x447a0000
 8001134:	20000000 	.word	0x20000000
 8001138:	42700000 	.word	0x42700000
 800113c:	42a00000 	.word	0x42a00000
 8001140:	42a00000 	.word	0x42a00000

08001144 <ENC_InitTimer>:
 *	@param 	htim is a TIM handle
 *  @param  Channel_A is the TIM Channels
 *  @param  Channel_B is the TIM Channels
 *	@retval HAL_Status
 */
uint8_t ENC_InitTimer(ENC_HandleTypeDef* Encoder, TIM_HandleTypeDef *htim, uint32_t Channel_A, uint32_t Channel_B){
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
 8001150:	603b      	str	r3, [r7, #0]
	Encoder->Timer = htim;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	68ba      	ldr	r2, [r7, #8]
 8001156:	601a      	str	r2, [r3, #0]
	Encoder->Timer_Channel_A = Channel_A;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	605a      	str	r2, [r3, #4]
	Encoder->Timer_Channel_B = Channel_B;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	683a      	ldr	r2, [r7, #0]
 8001162:	609a      	str	r2, [r3, #8]

	if(HAL_OK != HAL_TIM_Encoder_Start(Encoder->Timer, Encoder->Timer_Channel_A & Encoder->Timer_Channel_B))
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	6818      	ldr	r0, [r3, #0]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	685a      	ldr	r2, [r3, #4]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	4013      	ands	r3, r2
 8001172:	4619      	mov	r1, r3
 8001174:	f003 fa2c 	bl	80045d0 <HAL_TIM_Encoder_Start>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <ENC_InitTimer+0x3e>
		return 1;
 800117e:	2301      	movs	r3, #1
 8001180:	e000      	b.n	8001184 <ENC_InitTimer+0x40>

	return 0;
 8001182:	2300      	movs	r3, #0
}
 8001184:	4618      	mov	r0, r3
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <ENC_SetTicksPerRev>:

/*	@brief	Set the TicksPerRev value of the encoder
 *	@param	Encoder is a ENC_HandleTypeDef
 *	@param 	ticksPerRev value
 */
void ENC_SetTicksPerRev(ENC_HandleTypeDef* Encoder, uint16_t ticksPerRev){
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	460b      	mov	r3, r1
 8001196:	807b      	strh	r3, [r7, #2]
	Encoder->TicksPerRev = ticksPerRev;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	887a      	ldrh	r2, [r7, #2]
 800119c:	819a      	strh	r2, [r3, #12]
}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr

080011aa <ENC_GetCnt>:

/*	@brief	Get the counter value of the timer
 *	@param	Encoder is a Enc_Struct structure
 *	@retval CNT value of the timer
 */
int16_t ENC_GetCnt(ENC_HandleTypeDef* Encoder){
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b084      	sub	sp, #16
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
	//uint16_t ticks = __HAL_TIM_GET_COUNTER(Encoder->Timer);
	int16_t ticks = Encoder->Timer->Instance->CNT;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ba:	81fb      	strh	r3, [r7, #14]
	ENC_ResetCnt(Encoder);
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f000 f806 	bl	80011ce <ENC_ResetCnt>

	return ticks;
 80011c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <ENC_ResetCnt>:

/*	@brief	Reset the counter value of the timer
 *	@param	Encoder is a Enc_Struct structure
 *	@retval 0
 */
uint8_t ENC_ResetCnt(ENC_HandleTypeDef* Encoder){
 80011ce:	b480      	push	{r7}
 80011d0:	b083      	sub	sp, #12
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
	Encoder->Timer->Instance->CNT = 0;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2200      	movs	r2, #0
 80011de:	625a      	str	r2, [r3, #36]	; 0x24

	return 0;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <MOT_InitTimer>:
 *	@param	Motor is a MOT_HandleTypeDef
 *	@param 	htim is a TIM handle
 *  @param  Channel is the TIM Channel used
 *	@retval HAL status
 */
uint8_t MOT_InitTimer(MOT_HandleTypeDef* Motor, TIM_HandleTypeDef *htim, uint32_t Channel){
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b084      	sub	sp, #16
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	60f8      	str	r0, [r7, #12]
 80011f6:	60b9      	str	r1, [r7, #8]
 80011f8:	607a      	str	r2, [r7, #4]
	Motor->Timer_Handle = htim;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	68ba      	ldr	r2, [r7, #8]
 80011fe:	601a      	str	r2, [r3, #0]
	Motor->Timer_Channel = Channel;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	605a      	str	r2, [r3, #4]

	if(HAL_OK != HAL_TIM_PWM_Start(Motor->Timer_Handle, Motor->Timer_Channel))
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	4619      	mov	r1, r3
 8001210:	4610      	mov	r0, r2
 8001212:	f003 f86f 	bl	80042f4 <HAL_TIM_PWM_Start>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MOT_InitTimer+0x32>
		return 1;
 800121c:	2301      	movs	r3, #1
 800121e:	e000      	b.n	8001222 <MOT_InitTimer+0x34>

	return 0;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <MOT_InitGPIOs>:
 *  @param  IN1_GPIO_Pin specifies the port bit
 *	@param 	IN2_GPIOx is a GPIOx where x can be (A..K) to select the GPIO peripheral
 *  @param  IN2_GPIO_Pin specifies the port bit
 */
void MOT_InitGPIOs(MOT_HandleTypeDef* Motor, GPIO_TypeDef* IN1_GPIOx, uint16_t IN1_GPIO_Pin,
		GPIO_TypeDef* IN2_GPIOx, uint16_t IN2_GPIO_Pin){
 800122a:	b480      	push	{r7}
 800122c:	b085      	sub	sp, #20
 800122e:	af00      	add	r7, sp, #0
 8001230:	60f8      	str	r0, [r7, #12]
 8001232:	60b9      	str	r1, [r7, #8]
 8001234:	603b      	str	r3, [r7, #0]
 8001236:	4613      	mov	r3, r2
 8001238:	80fb      	strh	r3, [r7, #6]
	Motor->IN1_GPIOx = IN1_GPIOx;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	68ba      	ldr	r2, [r7, #8]
 800123e:	609a      	str	r2, [r3, #8]
	Motor->IN1_GPIO_Pin = IN1_GPIO_Pin;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	88fa      	ldrh	r2, [r7, #6]
 8001244:	819a      	strh	r2, [r3, #12]
	Motor->IN2_GPIOx = IN2_GPIOx;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	683a      	ldr	r2, [r7, #0]
 800124a:	611a      	str	r2, [r3, #16]
	Motor->IN2_GPIO_Pin = IN2_GPIO_Pin;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	8b3a      	ldrh	r2, [r7, #24]
 8001250:	829a      	strh	r2, [r3, #20]
}
 8001252:	bf00      	nop
 8001254:	3714      	adds	r7, #20
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <MOT_SetCoeff>:
/**	@brief	Set coefficient for the error correction of the motor
 *	@param	Motor is a MOT_HandleTypeDef
 *	@param 	Kp coefficient
 *	@param 	Ki coefficient
 */
void MOT_SetCoeff(MOT_HandleTypeDef* Motor, float Kp, float Ki){
 800125e:	b480      	push	{r7}
 8001260:	b085      	sub	sp, #20
 8001262:	af00      	add	r7, sp, #0
 8001264:	60f8      	str	r0, [r7, #12]
 8001266:	ed87 0a02 	vstr	s0, [r7, #8]
 800126a:	edc7 0a01 	vstr	s1, [r7, #4]
	Motor->Kp = Kp;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	68ba      	ldr	r2, [r7, #8]
 8001272:	61da      	str	r2, [r3, #28]
	Motor->Ki = Ki;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	621a      	str	r2, [r3, #32]
}
 800127a:	bf00      	nop
 800127c:	3714      	adds	r7, #20
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <MOT_SetDirection>:
 *		@arg	MOT_FUNCTIONS_STOP
 *		@arg 	MOT_FUNCTIONS_FORWARD
 *		@arg 	MOT_FUNCTIONS_REVERSE
 */

void MOT_SetDirection(MOT_HandleTypeDef* Motor, uint8_t direction){
 8001286:	b580      	push	{r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
 800128e:	460b      	mov	r3, r1
 8001290:	70fb      	strb	r3, [r7, #3]
	switch(direction){
 8001292:	78fb      	ldrb	r3, [r7, #3]
 8001294:	2b02      	cmp	r3, #2
 8001296:	d028      	beq.n	80012ea <MOT_SetDirection+0x64>
 8001298:	2b02      	cmp	r3, #2
 800129a:	dc37      	bgt.n	800130c <MOT_SetDirection+0x86>
 800129c:	2b00      	cmp	r3, #0
 800129e:	d002      	beq.n	80012a6 <MOT_SetDirection+0x20>
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d011      	beq.n	80012c8 <MOT_SetDirection+0x42>
 80012a4:	e032      	b.n	800130c <MOT_SetDirection+0x86>

	case MOT_FUNCTIONS_STOP:
		HAL_GPIO_WritePin(Motor->IN1_GPIOx, Motor->IN1_GPIO_Pin, GPIO_PIN_RESET);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6898      	ldr	r0, [r3, #8]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	899b      	ldrh	r3, [r3, #12]
 80012ae:	2200      	movs	r2, #0
 80012b0:	4619      	mov	r1, r3
 80012b2:	f002 f969 	bl	8003588 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor->IN2_GPIOx, Motor->IN2_GPIO_Pin, GPIO_PIN_RESET);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6918      	ldr	r0, [r3, #16]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	8a9b      	ldrh	r3, [r3, #20]
 80012be:	2200      	movs	r2, #0
 80012c0:	4619      	mov	r1, r3
 80012c2:	f002 f961 	bl	8003588 <HAL_GPIO_WritePin>
		break;
 80012c6:	e032      	b.n	800132e <MOT_SetDirection+0xa8>

	case MOT_FUNCTIONS_FORWARD:
		HAL_GPIO_WritePin(Motor->IN1_GPIOx, Motor->IN1_GPIO_Pin, GPIO_PIN_SET);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6898      	ldr	r0, [r3, #8]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	899b      	ldrh	r3, [r3, #12]
 80012d0:	2201      	movs	r2, #1
 80012d2:	4619      	mov	r1, r3
 80012d4:	f002 f958 	bl	8003588 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor->IN2_GPIOx, Motor->IN2_GPIO_Pin, GPIO_PIN_RESET);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6918      	ldr	r0, [r3, #16]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	8a9b      	ldrh	r3, [r3, #20]
 80012e0:	2200      	movs	r2, #0
 80012e2:	4619      	mov	r1, r3
 80012e4:	f002 f950 	bl	8003588 <HAL_GPIO_WritePin>
		break;
 80012e8:	e021      	b.n	800132e <MOT_SetDirection+0xa8>

	case MOT_FUNCTIONS_REVERSE:
		HAL_GPIO_WritePin(Motor->IN1_GPIOx, Motor->IN1_GPIO_Pin, GPIO_PIN_RESET);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6898      	ldr	r0, [r3, #8]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	899b      	ldrh	r3, [r3, #12]
 80012f2:	2200      	movs	r2, #0
 80012f4:	4619      	mov	r1, r3
 80012f6:	f002 f947 	bl	8003588 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor->IN2_GPIOx, Motor->IN2_GPIO_Pin, GPIO_PIN_SET);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6918      	ldr	r0, [r3, #16]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	8a9b      	ldrh	r3, [r3, #20]
 8001302:	2201      	movs	r2, #1
 8001304:	4619      	mov	r1, r3
 8001306:	f002 f93f 	bl	8003588 <HAL_GPIO_WritePin>
		break;
 800130a:	e010      	b.n	800132e <MOT_SetDirection+0xa8>

	default:
		HAL_GPIO_WritePin(Motor->IN1_GPIOx, Motor->IN1_GPIO_Pin, GPIO_PIN_RESET);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6898      	ldr	r0, [r3, #8]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	899b      	ldrh	r3, [r3, #12]
 8001314:	2200      	movs	r2, #0
 8001316:	4619      	mov	r1, r3
 8001318:	f002 f936 	bl	8003588 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor->IN2_GPIOx, Motor->IN2_GPIO_Pin, GPIO_PIN_RESET);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6918      	ldr	r0, [r3, #16]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	8a9b      	ldrh	r3, [r3, #20]
 8001324:	2200      	movs	r2, #0
 8001326:	4619      	mov	r1, r3
 8001328:	f002 f92e 	bl	8003588 <HAL_GPIO_WritePin>
	}
}
 800132c:	bf00      	nop
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
	...

08001338 <MOT_SetDutyCycle>:

/*	@brief	Set the duty cycle of the PWM signal
 *	@param	Motor is a MOT_HandleTypeDef
 *	@param	duty_cycle is value between 0 and 100
 */
void MOT_SetDutyCycle(MOT_HandleTypeDef* Motor, float duty_cycle){
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	ed87 0a00 	vstr	s0, [r7]
	if(duty_cycle > 80) duty_cycle = 80;
 8001344:	edd7 7a00 	vldr	s15, [r7]
 8001348:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001404 <MOT_SetDutyCycle+0xcc>
 800134c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001354:	dd02      	ble.n	800135c <MOT_SetDutyCycle+0x24>
 8001356:	4b2c      	ldr	r3, [pc, #176]	; (8001408 <MOT_SetDutyCycle+0xd0>)
 8001358:	603b      	str	r3, [r7, #0]
 800135a:	e009      	b.n	8001370 <MOT_SetDutyCycle+0x38>
	else if(duty_cycle < 0) duty_cycle = 0;
 800135c:	edd7 7a00 	vldr	s15, [r7]
 8001360:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001368:	d502      	bpl.n	8001370 <MOT_SetDutyCycle+0x38>
 800136a:	f04f 0300 	mov.w	r3, #0
 800136e:	603b      	str	r3, [r7, #0]

	float pulse = (duty_cycle / 100) * (float)MOT_TIM_PERIOD;
 8001370:	ed97 7a00 	vldr	s14, [r7]
 8001374:	eddf 6a25 	vldr	s13, [pc, #148]	; 800140c <MOT_SetDutyCycle+0xd4>
 8001378:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800137c:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001410 <MOT_SetDutyCycle+0xd8>
 8001380:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001384:	edc7 7a03 	vstr	s15, [r7, #12]

	__HAL_TIM_SET_COMPARE(Motor->Timer_Handle, Motor->Timer_Channel, (uint32_t)pulse);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d10a      	bne.n	80013a6 <MOT_SetDutyCycle+0x6e>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	edd7 7a03 	vldr	s15, [r7, #12]
 800139a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800139e:	ee17 2a90 	vmov	r2, s15
 80013a2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80013a4:	e027      	b.n	80013f6 <MOT_SetDutyCycle+0xbe>
	__HAL_TIM_SET_COMPARE(Motor->Timer_Handle, Motor->Timer_Channel, (uint32_t)pulse);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	2b04      	cmp	r3, #4
 80013ac:	d10a      	bne.n	80013c4 <MOT_SetDutyCycle+0x8c>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80013b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013bc:	ee17 3a90 	vmov	r3, s15
 80013c0:	6393      	str	r3, [r2, #56]	; 0x38
}
 80013c2:	e018      	b.n	80013f6 <MOT_SetDutyCycle+0xbe>
	__HAL_TIM_SET_COMPARE(Motor->Timer_Handle, Motor->Timer_Channel, (uint32_t)pulse);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	2b08      	cmp	r3, #8
 80013ca:	d10a      	bne.n	80013e2 <MOT_SetDutyCycle+0xaa>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80013d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013da:	ee17 3a90 	vmov	r3, s15
 80013de:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80013e0:	e009      	b.n	80013f6 <MOT_SetDutyCycle+0xbe>
	__HAL_TIM_SET_COMPARE(Motor->Timer_Handle, Motor->Timer_Channel, (uint32_t)pulse);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80013ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013f0:	ee17 3a90 	vmov	r3, s15
 80013f4:	6413      	str	r3, [r2, #64]	; 0x40
}
 80013f6:	bf00      	nop
 80013f8:	3714      	adds	r7, #20
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	42a00000 	.word	0x42a00000
 8001408:	42a00000 	.word	0x42a00000
 800140c:	42c80000 	.word	0x42c80000
 8001410:	45520000 	.word	0x45520000

08001414 <__io_putchar>:
static int shell_func_list_size = 0;
static shell_func_t shell_func_list[_SHELL_FUNC_LIST_MAX_SIZE];

static int dataReady = 0;

int __io_putchar(int ch) {
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&UART_DEVICE, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800141c:	1d39      	adds	r1, r7, #4
 800141e:	f04f 33ff 	mov.w	r3, #4294967295
 8001422:	2201      	movs	r2, #1
 8001424:	4803      	ldr	r0, [pc, #12]	; (8001434 <__io_putchar+0x20>)
 8001426:	f004 f85a 	bl	80054de <HAL_UART_Transmit>
	return ch;
 800142a:	687b      	ldr	r3, [r7, #4]
}
 800142c:	4618      	mov	r0, r3
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20000748 	.word	0x20000748

08001438 <uart_write>:
	HAL_UART_Receive(&UART_DEVICE, (uint8_t*)(&c), 1, 0xFFFFFFFF);

	return c;
}

int uart_write(char * s, uint16_t size) {
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	460b      	mov	r3, r1
 8001442:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&UART_DEVICE, (uint8_t*)s, size, 0xFFFF);
 8001444:	887a      	ldrh	r2, [r7, #2]
 8001446:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800144a:	6879      	ldr	r1, [r7, #4]
 800144c:	4803      	ldr	r0, [pc, #12]	; (800145c <uart_write+0x24>)
 800144e:	f004 f846 	bl	80054de <HAL_UART_Transmit>
	return size;
 8001452:	887b      	ldrh	r3, [r7, #2]
}
 8001454:	4618      	mov	r0, r3
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20000748 	.word	0x20000748

08001460 <sh_help>:

void uart_data_ready() {
	dataReady = 1;
}

int sh_help(int argc, char ** argv) {
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
	int i;
	for(i = 0 ; i < shell_func_list_size ; i++) {
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	e019      	b.n	80014a4 <sh_help+0x44>
		printf("%c %s\r\n", shell_func_list[i].c, shell_func_list[i].description);
 8001470:	4911      	ldr	r1, [pc, #68]	; (80014b8 <sh_help+0x58>)
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	4613      	mov	r3, r2
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	4413      	add	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	440b      	add	r3, r1
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	4618      	mov	r0, r3
 8001482:	490d      	ldr	r1, [pc, #52]	; (80014b8 <sh_help+0x58>)
 8001484:	68fa      	ldr	r2, [r7, #12]
 8001486:	4613      	mov	r3, r2
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	4413      	add	r3, r2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	440b      	add	r3, r1
 8001490:	3308      	adds	r3, #8
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	461a      	mov	r2, r3
 8001496:	4601      	mov	r1, r0
 8001498:	4808      	ldr	r0, [pc, #32]	; (80014bc <sh_help+0x5c>)
 800149a:	f005 fc37 	bl	8006d0c <iprintf>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	3301      	adds	r3, #1
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <sh_help+0x60>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	68fa      	ldr	r2, [r7, #12]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	dbe0      	blt.n	8001470 <sh_help+0x10>
	}

	return 0;
 80014ae:	2300      	movs	r3, #0
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3710      	adds	r7, #16
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	2000023c 	.word	0x2000023c
 80014bc:	08008f24 	.word	0x08008f24
 80014c0:	20000238 	.word	0x20000238

080014c4 <shell_init>:

void shell_init() {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
	printf("\r\n\r\n===== Shell =====\r\n");
 80014ca:	480f      	ldr	r0, [pc, #60]	; (8001508 <shell_init+0x44>)
 80014cc:	f005 fca4 	bl	8006e18 <puts>
	HAL_UART_Receive_IT(&UART_DEVICE, (uint8_t*)&c, 1);
 80014d0:	2201      	movs	r2, #1
 80014d2:	490e      	ldr	r1, [pc, #56]	; (800150c <shell_init+0x48>)
 80014d4:	480e      	ldr	r0, [pc, #56]	; (8001510 <shell_init+0x4c>)
 80014d6:	f004 f894 	bl	8005602 <HAL_UART_Receive_IT>
	//uart_write(prompt,sizeof(prompt));

	shell_add('h', sh_help, help);
 80014da:	4a0e      	ldr	r2, [pc, #56]	; (8001514 <shell_init+0x50>)
 80014dc:	490e      	ldr	r1, [pc, #56]	; (8001518 <shell_init+0x54>)
 80014de:	2068      	movs	r0, #104	; 0x68
 80014e0:	f000 f81c 	bl	800151c <shell_add>

	for (int i = 0 ; i < 3 ; i++) {
 80014e4:	2300      	movs	r3, #0
 80014e6:	607b      	str	r3, [r7, #4]
 80014e8:	e005      	b.n	80014f6 <shell_init+0x32>

		HAL_Delay(200);
 80014ea:	20c8      	movs	r0, #200	; 0xc8
 80014ec:	f001 f920 	bl	8002730 <HAL_Delay>
	for (int i = 0 ; i < 3 ; i++) {
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3301      	adds	r3, #1
 80014f4:	607b      	str	r3, [r7, #4]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	ddf6      	ble.n	80014ea <shell_init+0x26>
	}
}
 80014fc:	bf00      	nop
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	08008f2c 	.word	0x08008f2c
 800150c:	2000020c 	.word	0x2000020c
 8001510:	20000748 	.word	0x20000748
 8001514:	20000008 	.word	0x20000008
 8001518:	08001461 	.word	0x08001461

0800151c <shell_add>:

int shell_add(char c, int (* pfunc)(int argc, char ** argv), char * description) {
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
 8001528:	73fb      	strb	r3, [r7, #15]
	if (shell_func_list_size < _SHELL_FUNC_LIST_MAX_SIZE) {
 800152a:	4b19      	ldr	r3, [pc, #100]	; (8001590 <shell_add+0x74>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2b3f      	cmp	r3, #63	; 0x3f
 8001530:	dc26      	bgt.n	8001580 <shell_add+0x64>
		shell_func_list[shell_func_list_size].c = c;
 8001532:	4b17      	ldr	r3, [pc, #92]	; (8001590 <shell_add+0x74>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	4917      	ldr	r1, [pc, #92]	; (8001594 <shell_add+0x78>)
 8001538:	4613      	mov	r3, r2
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	4413      	add	r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	440b      	add	r3, r1
 8001542:	7bfa      	ldrb	r2, [r7, #15]
 8001544:	701a      	strb	r2, [r3, #0]
		shell_func_list[shell_func_list_size].func = pfunc;
 8001546:	4b12      	ldr	r3, [pc, #72]	; (8001590 <shell_add+0x74>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	4912      	ldr	r1, [pc, #72]	; (8001594 <shell_add+0x78>)
 800154c:	4613      	mov	r3, r2
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	4413      	add	r3, r2
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	440b      	add	r3, r1
 8001556:	3304      	adds	r3, #4
 8001558:	68ba      	ldr	r2, [r7, #8]
 800155a:	601a      	str	r2, [r3, #0]
		shell_func_list[shell_func_list_size].description = description;
 800155c:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <shell_add+0x74>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	490c      	ldr	r1, [pc, #48]	; (8001594 <shell_add+0x78>)
 8001562:	4613      	mov	r3, r2
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	4413      	add	r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	440b      	add	r3, r1
 800156c:	3308      	adds	r3, #8
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	601a      	str	r2, [r3, #0]
		shell_func_list_size++;
 8001572:	4b07      	ldr	r3, [pc, #28]	; (8001590 <shell_add+0x74>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	3301      	adds	r3, #1
 8001578:	4a05      	ldr	r2, [pc, #20]	; (8001590 <shell_add+0x74>)
 800157a:	6013      	str	r3, [r2, #0]
		return 0;
 800157c:	2300      	movs	r3, #0
 800157e:	e001      	b.n	8001584 <shell_add+0x68>
	}

	return -1;
 8001580:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001584:	4618      	mov	r0, r3
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	20000238 	.word	0x20000238
 8001594:	2000023c 	.word	0x2000023c

08001598 <shell_char_received>:

void shell_char_received() {
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0

	switch (c) {
 800159c:	4b23      	ldr	r3, [pc, #140]	; (800162c <shell_char_received+0x94>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b08      	cmp	r3, #8
 80015a2:	d01c      	beq.n	80015de <shell_char_received+0x46>
 80015a4:	2b0d      	cmp	r3, #13
 80015a6:	d129      	bne.n	80015fc <shell_char_received+0x64>

	case '\r':
		// Enter
		printf("\r\n");
 80015a8:	4821      	ldr	r0, [pc, #132]	; (8001630 <shell_char_received+0x98>)
 80015aa:	f005 fc35 	bl	8006e18 <puts>
		buf[pos++] = 0;
 80015ae:	4b21      	ldr	r3, [pc, #132]	; (8001634 <shell_char_received+0x9c>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	1c5a      	adds	r2, r3, #1
 80015b4:	b2d1      	uxtb	r1, r2
 80015b6:	4a1f      	ldr	r2, [pc, #124]	; (8001634 <shell_char_received+0x9c>)
 80015b8:	7011      	strb	r1, [r2, #0]
 80015ba:	461a      	mov	r2, r3
 80015bc:	4b1e      	ldr	r3, [pc, #120]	; (8001638 <shell_char_received+0xa0>)
 80015be:	2100      	movs	r1, #0
 80015c0:	5499      	strb	r1, [r3, r2]
		printf(":%s\r\n", buf);
 80015c2:	491d      	ldr	r1, [pc, #116]	; (8001638 <shell_char_received+0xa0>)
 80015c4:	481d      	ldr	r0, [pc, #116]	; (800163c <shell_char_received+0xa4>)
 80015c6:	f005 fba1 	bl	8006d0c <iprintf>
		pos = 0;
 80015ca:	4b1a      	ldr	r3, [pc, #104]	; (8001634 <shell_char_received+0x9c>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	701a      	strb	r2, [r3, #0]
		shell_exec(buf[0], buf);
 80015d0:	4b19      	ldr	r3, [pc, #100]	; (8001638 <shell_char_received+0xa0>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	4918      	ldr	r1, [pc, #96]	; (8001638 <shell_char_received+0xa0>)
 80015d6:	4618      	mov	r0, r3
 80015d8:	f000 f834 	bl	8001644 <shell_exec>
		break;
 80015dc:	e023      	b.n	8001626 <shell_char_received+0x8e>

		// Delete
	case '\b':
		if (pos > 0) {
 80015de:	4b15      	ldr	r3, [pc, #84]	; (8001634 <shell_char_received+0x9c>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d01e      	beq.n	8001624 <shell_char_received+0x8c>
			pos--;
 80015e6:	4b13      	ldr	r3, [pc, #76]	; (8001634 <shell_char_received+0x9c>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	3b01      	subs	r3, #1
 80015ec:	b2da      	uxtb	r2, r3
 80015ee:	4b11      	ldr	r3, [pc, #68]	; (8001634 <shell_char_received+0x9c>)
 80015f0:	701a      	strb	r2, [r3, #0]
			uart_write(backspace, 3);
 80015f2:	2103      	movs	r1, #3
 80015f4:	4812      	ldr	r0, [pc, #72]	; (8001640 <shell_char_received+0xa8>)
 80015f6:	f7ff ff1f 	bl	8001438 <uart_write>
		}
		break;
 80015fa:	e013      	b.n	8001624 <shell_char_received+0x8c>

	default:
		if (pos < BUFFER_SIZE) {
 80015fc:	4b0d      	ldr	r3, [pc, #52]	; (8001634 <shell_char_received+0x9c>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	2b27      	cmp	r3, #39	; 0x27
 8001602:	d810      	bhi.n	8001626 <shell_char_received+0x8e>
			uart_write(&c, 1);
 8001604:	2101      	movs	r1, #1
 8001606:	4809      	ldr	r0, [pc, #36]	; (800162c <shell_char_received+0x94>)
 8001608:	f7ff ff16 	bl	8001438 <uart_write>
			buf[pos++] = c;
 800160c:	4b09      	ldr	r3, [pc, #36]	; (8001634 <shell_char_received+0x9c>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	1c5a      	adds	r2, r3, #1
 8001612:	b2d1      	uxtb	r1, r2
 8001614:	4a07      	ldr	r2, [pc, #28]	; (8001634 <shell_char_received+0x9c>)
 8001616:	7011      	strb	r1, [r2, #0]
 8001618:	461a      	mov	r2, r3
 800161a:	4b04      	ldr	r3, [pc, #16]	; (800162c <shell_char_received+0x94>)
 800161c:	7819      	ldrb	r1, [r3, #0]
 800161e:	4b06      	ldr	r3, [pc, #24]	; (8001638 <shell_char_received+0xa0>)
 8001620:	5499      	strb	r1, [r3, r2]
		}
	}
}
 8001622:	e000      	b.n	8001626 <shell_char_received+0x8e>
		break;
 8001624:	bf00      	nop
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	2000020c 	.word	0x2000020c
 8001630:	08008f44 	.word	0x08008f44
 8001634:	2000020d 	.word	0x2000020d
 8001638:	20000210 	.word	0x20000210
 800163c:	08008f48 	.word	0x08008f48
 8001640:	20000010 	.word	0x20000010

08001644 <shell_exec>:

int shell_exec(char c, char * buf) {
 8001644:	b580      	push	{r7, lr}
 8001646:	b08e      	sub	sp, #56	; 0x38
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	6039      	str	r1, [r7, #0]
 800164e:	71fb      	strb	r3, [r7, #7]

	int argc;
	char * argv[ARGC_MAX];
	char *p;

	for(i = 0 ; i < shell_func_list_size ; i++) {
 8001650:	2300      	movs	r3, #0
 8001652:	637b      	str	r3, [r7, #52]	; 0x34
 8001654:	e040      	b.n	80016d8 <shell_exec+0x94>
		if (shell_func_list[i].c == c) {
 8001656:	4928      	ldr	r1, [pc, #160]	; (80016f8 <shell_exec+0xb4>)
 8001658:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800165a:	4613      	mov	r3, r2
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	4413      	add	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	440b      	add	r3, r1
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	79fa      	ldrb	r2, [r7, #7]
 8001668:	429a      	cmp	r2, r3
 800166a:	d132      	bne.n	80016d2 <shell_exec+0x8e>
			argc = 1;
 800166c:	2301      	movs	r3, #1
 800166e:	633b      	str	r3, [r7, #48]	; 0x30
			argv[0] = buf;
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	60fb      	str	r3, [r7, #12]

			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001678:	e014      	b.n	80016a4 <shell_exec+0x60>
				if(*p == ' ') {
 800167a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	2b20      	cmp	r3, #32
 8001680:	d10d      	bne.n	800169e <shell_exec+0x5a>
					*p = '\0';
 8001682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001684:	2200      	movs	r2, #0
 8001686:	701a      	strb	r2, [r3, #0]
					argv[argc++] = p+1;
 8001688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800168a:	1c5a      	adds	r2, r3, #1
 800168c:	633a      	str	r2, [r7, #48]	; 0x30
 800168e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001690:	3201      	adds	r2, #1
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001698:	440b      	add	r3, r1
 800169a:	f843 2c2c 	str.w	r2, [r3, #-44]
			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 800169e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016a0:	3301      	adds	r3, #1
 80016a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d002      	beq.n	80016b2 <shell_exec+0x6e>
 80016ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016ae:	2b07      	cmp	r3, #7
 80016b0:	dde3      	ble.n	800167a <shell_exec+0x36>
				}
			}

			return shell_func_list[i].func(argc, argv);
 80016b2:	4911      	ldr	r1, [pc, #68]	; (80016f8 <shell_exec+0xb4>)
 80016b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80016b6:	4613      	mov	r3, r2
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	4413      	add	r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	440b      	add	r3, r1
 80016c0:	3304      	adds	r3, #4
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f107 020c 	add.w	r2, r7, #12
 80016c8:	4611      	mov	r1, r2
 80016ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80016cc:	4798      	blx	r3
 80016ce:	4603      	mov	r3, r0
 80016d0:	e00e      	b.n	80016f0 <shell_exec+0xac>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 80016d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016d4:	3301      	adds	r3, #1
 80016d6:	637b      	str	r3, [r7, #52]	; 0x34
 80016d8:	4b08      	ldr	r3, [pc, #32]	; (80016fc <shell_exec+0xb8>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80016de:	429a      	cmp	r2, r3
 80016e0:	dbb9      	blt.n	8001656 <shell_exec+0x12>
		}
	}
	printf("%c: no such command\r\n", c);
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	4619      	mov	r1, r3
 80016e6:	4806      	ldr	r0, [pc, #24]	; (8001700 <shell_exec+0xbc>)
 80016e8:	f005 fb10 	bl	8006d0c <iprintf>
	return -1;
 80016ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3738      	adds	r7, #56	; 0x38
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	2000023c 	.word	0x2000023c
 80016fc:	20000238 	.word	0x20000238
 8001700:	08008f50 	.word	0x08008f50

08001704 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800170a:	463b      	mov	r3, r7
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001716:	4b21      	ldr	r3, [pc, #132]	; (800179c <MX_ADC1_Init+0x98>)
 8001718:	4a21      	ldr	r2, [pc, #132]	; (80017a0 <MX_ADC1_Init+0x9c>)
 800171a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800171c:	4b1f      	ldr	r3, [pc, #124]	; (800179c <MX_ADC1_Init+0x98>)
 800171e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001722:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001724:	4b1d      	ldr	r3, [pc, #116]	; (800179c <MX_ADC1_Init+0x98>)
 8001726:	2200      	movs	r2, #0
 8001728:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800172a:	4b1c      	ldr	r3, [pc, #112]	; (800179c <MX_ADC1_Init+0x98>)
 800172c:	2200      	movs	r2, #0
 800172e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001730:	4b1a      	ldr	r3, [pc, #104]	; (800179c <MX_ADC1_Init+0x98>)
 8001732:	2201      	movs	r2, #1
 8001734:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001736:	4b19      	ldr	r3, [pc, #100]	; (800179c <MX_ADC1_Init+0x98>)
 8001738:	2200      	movs	r2, #0
 800173a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800173e:	4b17      	ldr	r3, [pc, #92]	; (800179c <MX_ADC1_Init+0x98>)
 8001740:	2200      	movs	r2, #0
 8001742:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001744:	4b15      	ldr	r3, [pc, #84]	; (800179c <MX_ADC1_Init+0x98>)
 8001746:	4a17      	ldr	r2, [pc, #92]	; (80017a4 <MX_ADC1_Init+0xa0>)
 8001748:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800174a:	4b14      	ldr	r3, [pc, #80]	; (800179c <MX_ADC1_Init+0x98>)
 800174c:	2200      	movs	r2, #0
 800174e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001750:	4b12      	ldr	r3, [pc, #72]	; (800179c <MX_ADC1_Init+0x98>)
 8001752:	2201      	movs	r2, #1
 8001754:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001756:	4b11      	ldr	r3, [pc, #68]	; (800179c <MX_ADC1_Init+0x98>)
 8001758:	2200      	movs	r2, #0
 800175a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800175e:	4b0f      	ldr	r3, [pc, #60]	; (800179c <MX_ADC1_Init+0x98>)
 8001760:	2200      	movs	r2, #0
 8001762:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001764:	480d      	ldr	r0, [pc, #52]	; (800179c <MX_ADC1_Init+0x98>)
 8001766:	f001 f807 	bl	8002778 <HAL_ADC_Init>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001770:	f000 faf6 	bl	8001d60 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001774:	2308      	movs	r3, #8
 8001776:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001778:	2301      	movs	r3, #1
 800177a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800177c:	2300      	movs	r3, #0
 800177e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001780:	463b      	mov	r3, r7
 8001782:	4619      	mov	r1, r3
 8001784:	4805      	ldr	r0, [pc, #20]	; (800179c <MX_ADC1_Init+0x98>)
 8001786:	f001 f98f 	bl	8002aa8 <HAL_ADC_ConfigChannel>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001790:	f000 fae6 	bl	8001d60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001794:	bf00      	nop
 8001796:	3710      	adds	r7, #16
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	200005e0 	.word	0x200005e0
 80017a0:	40012000 	.word	0x40012000
 80017a4:	0f000001 	.word	0x0f000001

080017a8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08a      	sub	sp, #40	; 0x28
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b0:	f107 0314 	add.w	r3, r7, #20
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	60da      	str	r2, [r3, #12]
 80017be:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a1b      	ldr	r2, [pc, #108]	; (8001834 <HAL_ADC_MspInit+0x8c>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d12f      	bne.n	800182a <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	613b      	str	r3, [r7, #16]
 80017ce:	4b1a      	ldr	r3, [pc, #104]	; (8001838 <HAL_ADC_MspInit+0x90>)
 80017d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d2:	4a19      	ldr	r2, [pc, #100]	; (8001838 <HAL_ADC_MspInit+0x90>)
 80017d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017d8:	6453      	str	r3, [r2, #68]	; 0x44
 80017da:	4b17      	ldr	r3, [pc, #92]	; (8001838 <HAL_ADC_MspInit+0x90>)
 80017dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e2:	613b      	str	r3, [r7, #16]
 80017e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	4b13      	ldr	r3, [pc, #76]	; (8001838 <HAL_ADC_MspInit+0x90>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	4a12      	ldr	r2, [pc, #72]	; (8001838 <HAL_ADC_MspInit+0x90>)
 80017f0:	f043 0302 	orr.w	r3, r3, #2
 80017f4:	6313      	str	r3, [r2, #48]	; 0x30
 80017f6:	4b10      	ldr	r3, [pc, #64]	; (8001838 <HAL_ADC_MspInit+0x90>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001802:	2301      	movs	r3, #1
 8001804:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001806:	2303      	movs	r3, #3
 8001808:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180e:	f107 0314 	add.w	r3, r7, #20
 8001812:	4619      	mov	r1, r3
 8001814:	4809      	ldr	r0, [pc, #36]	; (800183c <HAL_ADC_MspInit+0x94>)
 8001816:	f001 fd23 	bl	8003260 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800181a:	2200      	movs	r2, #0
 800181c:	2100      	movs	r1, #0
 800181e:	2012      	movs	r0, #18
 8001820:	f001 fc55 	bl	80030ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001824:	2012      	movs	r0, #18
 8001826:	f001 fc6e 	bl	8003106 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800182a:	bf00      	nop
 800182c:	3728      	adds	r7, #40	; 0x28
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40012000 	.word	0x40012000
 8001838:	40023800 	.word	0x40023800
 800183c:	40020400 	.word	0x40020400

08001840 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08a      	sub	sp, #40	; 0x28
 8001844:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001846:	f107 0314 	add.w	r3, r7, #20
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	605a      	str	r2, [r3, #4]
 8001850:	609a      	str	r2, [r3, #8]
 8001852:	60da      	str	r2, [r3, #12]
 8001854:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	613b      	str	r3, [r7, #16]
 800185a:	4b45      	ldr	r3, [pc, #276]	; (8001970 <MX_GPIO_Init+0x130>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	4a44      	ldr	r2, [pc, #272]	; (8001970 <MX_GPIO_Init+0x130>)
 8001860:	f043 0304 	orr.w	r3, r3, #4
 8001864:	6313      	str	r3, [r2, #48]	; 0x30
 8001866:	4b42      	ldr	r3, [pc, #264]	; (8001970 <MX_GPIO_Init+0x130>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	f003 0304 	and.w	r3, r3, #4
 800186e:	613b      	str	r3, [r7, #16]
 8001870:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	4b3e      	ldr	r3, [pc, #248]	; (8001970 <MX_GPIO_Init+0x130>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	4a3d      	ldr	r2, [pc, #244]	; (8001970 <MX_GPIO_Init+0x130>)
 800187c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001880:	6313      	str	r3, [r2, #48]	; 0x30
 8001882:	4b3b      	ldr	r3, [pc, #236]	; (8001970 <MX_GPIO_Init+0x130>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	60bb      	str	r3, [r7, #8]
 8001892:	4b37      	ldr	r3, [pc, #220]	; (8001970 <MX_GPIO_Init+0x130>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	4a36      	ldr	r2, [pc, #216]	; (8001970 <MX_GPIO_Init+0x130>)
 8001898:	f043 0301 	orr.w	r3, r3, #1
 800189c:	6313      	str	r3, [r2, #48]	; 0x30
 800189e:	4b34      	ldr	r3, [pc, #208]	; (8001970 <MX_GPIO_Init+0x130>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	60bb      	str	r3, [r7, #8]
 80018a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	607b      	str	r3, [r7, #4]
 80018ae:	4b30      	ldr	r3, [pc, #192]	; (8001970 <MX_GPIO_Init+0x130>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	4a2f      	ldr	r2, [pc, #188]	; (8001970 <MX_GPIO_Init+0x130>)
 80018b4:	f043 0302 	orr.w	r3, r3, #2
 80018b8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ba:	4b2d      	ldr	r3, [pc, #180]	; (8001970 <MX_GPIO_Init+0x130>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	607b      	str	r3, [r7, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTG_IN2_Pin|MOTG_IN1_Pin, GPIO_PIN_RESET);
 80018c6:	2200      	movs	r2, #0
 80018c8:	2103      	movs	r1, #3
 80018ca:	482a      	ldr	r0, [pc, #168]	; (8001974 <MX_GPIO_Init+0x134>)
 80018cc:	f001 fe5c 	bl	8003588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80018d0:	2200      	movs	r2, #0
 80018d2:	2120      	movs	r1, #32
 80018d4:	4828      	ldr	r0, [pc, #160]	; (8001978 <MX_GPIO_Init+0x138>)
 80018d6:	f001 fe57 	bl	8003588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTD_IN3_Pin|MOTD_IN4_Pin, GPIO_PIN_RESET);
 80018da:	2200      	movs	r2, #0
 80018dc:	f44f 7140 	mov.w	r1, #768	; 0x300
 80018e0:	4826      	ldr	r0, [pc, #152]	; (800197c <MX_GPIO_Init+0x13c>)
 80018e2:	f001 fe51 	bl	8003588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018ec:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80018f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018f6:	f107 0314 	add.w	r3, r7, #20
 80018fa:	4619      	mov	r1, r3
 80018fc:	481d      	ldr	r0, [pc, #116]	; (8001974 <MX_GPIO_Init+0x134>)
 80018fe:	f001 fcaf 	bl	8003260 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MOTG_IN2_Pin|MOTG_IN1_Pin;
 8001902:	2303      	movs	r3, #3
 8001904:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001906:	2301      	movs	r3, #1
 8001908:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190a:	2300      	movs	r3, #0
 800190c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190e:	2300      	movs	r3, #0
 8001910:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001912:	f107 0314 	add.w	r3, r7, #20
 8001916:	4619      	mov	r1, r3
 8001918:	4816      	ldr	r0, [pc, #88]	; (8001974 <MX_GPIO_Init+0x134>)
 800191a:	f001 fca1 	bl	8003260 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800191e:	2320      	movs	r3, #32
 8001920:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001922:	2301      	movs	r3, #1
 8001924:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192a:	2300      	movs	r3, #0
 800192c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800192e:	f107 0314 	add.w	r3, r7, #20
 8001932:	4619      	mov	r1, r3
 8001934:	4810      	ldr	r0, [pc, #64]	; (8001978 <MX_GPIO_Init+0x138>)
 8001936:	f001 fc93 	bl	8003260 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = MOTD_IN3_Pin|MOTD_IN4_Pin;
 800193a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800193e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001940:	2301      	movs	r3, #1
 8001942:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001944:	2300      	movs	r3, #0
 8001946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001948:	2300      	movs	r3, #0
 800194a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800194c:	f107 0314 	add.w	r3, r7, #20
 8001950:	4619      	mov	r1, r3
 8001952:	480a      	ldr	r0, [pc, #40]	; (800197c <MX_GPIO_Init+0x13c>)
 8001954:	f001 fc84 	bl	8003260 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001958:	2200      	movs	r2, #0
 800195a:	2100      	movs	r1, #0
 800195c:	2028      	movs	r0, #40	; 0x28
 800195e:	f001 fbb6 	bl	80030ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001962:	2028      	movs	r0, #40	; 0x28
 8001964:	f001 fbcf 	bl	8003106 <HAL_NVIC_EnableIRQ>

}
 8001968:	bf00      	nop
 800196a:	3728      	adds	r7, #40	; 0x28
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40023800 	.word	0x40023800
 8001974:	40020800 	.word	0x40020800
 8001978:	40020000 	.word	0x40020000
 800197c:	40020400 	.word	0x40020400

08001980 <fonction>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int fonction(int argc, char ** argv) {
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
	printf("Fonction Test\r\n");
 800198a:	4810      	ldr	r0, [pc, #64]	; (80019cc <fonction+0x4c>)
 800198c:	f005 fa44 	bl	8006e18 <puts>

	printf("argc = %d\r\n", argc);
 8001990:	6879      	ldr	r1, [r7, #4]
 8001992:	480f      	ldr	r0, [pc, #60]	; (80019d0 <fonction+0x50>)
 8001994:	f005 f9ba 	bl	8006d0c <iprintf>

	for (int i = 0 ; i < argc ; i++) {
 8001998:	2300      	movs	r3, #0
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	e00c      	b.n	80019b8 <fonction+0x38>
		printf("arg numero %d = %s\r\n", i, argv[i]);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	4413      	add	r3, r2
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	461a      	mov	r2, r3
 80019aa:	68f9      	ldr	r1, [r7, #12]
 80019ac:	4809      	ldr	r0, [pc, #36]	; (80019d4 <fonction+0x54>)
 80019ae:	f005 f9ad 	bl	8006d0c <iprintf>
	for (int i = 0 ; i < argc ; i++) {
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	3301      	adds	r3, #1
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	68fa      	ldr	r2, [r7, #12]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	429a      	cmp	r2, r3
 80019be:	dbee      	blt.n	800199e <fonction+0x1e>
	}

	return 0;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	08008f68 	.word	0x08008f68
 80019d0:	08008f78 	.word	0x08008f78
 80019d4:	08008f84 	.word	0x08008f84

080019d8 <asserv>:

int asserv(int argc, char ** argv) {
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
	printf("Reglage asserv\r\n");
 80019e2:	480b      	ldr	r0, [pc, #44]	; (8001a10 <asserv+0x38>)
 80019e4:	f005 fa18 	bl	8006e18 <puts>

	if(argc == 3){
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2b03      	cmp	r3, #3
 80019ec:	d106      	bne.n	80019fc <asserv+0x24>
		//Ctrl_Set_Kp(atof(argv[1]));
		//Ctrl_Set_Ki(atof(argv[2]));
		reglage = 1;
 80019ee:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <asserv+0x3c>)
 80019f0:	2201      	movs	r2, #1
 80019f2:	701a      	strb	r2, [r3, #0]
		Ctrl_Set_Consigne(20);
 80019f4:	ed9f 0b04 	vldr	d0, [pc, #16]	; 8001a08 <asserv+0x30>
 80019f8:	f7ff fad4 	bl	8000fa4 <Ctrl_Set_Consigne>
	}

	return 0;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	00000000 	.word	0x00000000
 8001a0c:	40340000 	.word	0x40340000
 8001a10:	08008f9c 	.word	0x08008f9c
 8001a14:	2000053d 	.word	0x2000053d

08001a18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a1e:	f000 fe15 	bl	800264c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a22:	f000 f89d 	bl	8001b60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a26:	f7ff ff0b 	bl	8001840 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001a2a:	f000 fd6b 	bl	8002504 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001a2e:	f000 faed 	bl	800200c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001a32:	f000 fb97 	bl	8002164 <MX_TIM2_Init>
  MX_TIM6_Init();
 8001a36:	f000 fc3d 	bl	80022b4 <MX_TIM6_Init>
  MX_ADC1_Init();
 8001a3a:	f7ff fe63 	bl	8001704 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001a3e:	f000 fbe5 	bl	800220c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	shell_init();
 8001a42:	f7ff fd3f 	bl	80014c4 <shell_init>
	shell_add('f', fonction, "Une fonction inutile");
 8001a46:	4a32      	ldr	r2, [pc, #200]	; (8001b10 <main+0xf8>)
 8001a48:	4932      	ldr	r1, [pc, #200]	; (8001b14 <main+0xfc>)
 8001a4a:	2066      	movs	r0, #102	; 0x66
 8001a4c:	f7ff fd66 	bl	800151c <shell_add>
	shell_add('a', asserv, "Reglage asservissement");
 8001a50:	4a31      	ldr	r2, [pc, #196]	; (8001b18 <main+0x100>)
 8001a52:	4932      	ldr	r1, [pc, #200]	; (8001b1c <main+0x104>)
 8001a54:	2061      	movs	r0, #97	; 0x61
 8001a56:	f7ff fd61 	bl	800151c <shell_add>

	/* Initialisation des moteurs ------------------------------------------------*/

	/* Moteur Gauche */
	MOT_InitTimer(&MoteurGauche, &htim1, TIM_CHANNEL_1); // PA8 / D7
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	4930      	ldr	r1, [pc, #192]	; (8001b20 <main+0x108>)
 8001a5e:	4831      	ldr	r0, [pc, #196]	; (8001b24 <main+0x10c>)
 8001a60:	f7ff fbc5 	bl	80011ee <MOT_InitTimer>
	MOT_InitGPIOs(&MoteurGauche, GPIOC, GPIO_PIN_1, GPIOC, GPIO_PIN_0); // IN1:PC0 et IN2:PC1
 8001a64:	2301      	movs	r3, #1
 8001a66:	9300      	str	r3, [sp, #0]
 8001a68:	4b2f      	ldr	r3, [pc, #188]	; (8001b28 <main+0x110>)
 8001a6a:	2202      	movs	r2, #2
 8001a6c:	492e      	ldr	r1, [pc, #184]	; (8001b28 <main+0x110>)
 8001a6e:	482d      	ldr	r0, [pc, #180]	; (8001b24 <main+0x10c>)
 8001a70:	f7ff fbdb 	bl	800122a <MOT_InitGPIOs>
	MOT_SetCoeff(&MoteurGauche, 850, 0.05);
 8001a74:	eddf 0a2d 	vldr	s1, [pc, #180]	; 8001b2c <main+0x114>
 8001a78:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8001b30 <main+0x118>
 8001a7c:	4829      	ldr	r0, [pc, #164]	; (8001b24 <main+0x10c>)
 8001a7e:	f7ff fbee 	bl	800125e <MOT_SetCoeff>
	MOT_SetDirection(&MoteurGauche, MOT_FUNCTIONS_REVERSE);
 8001a82:	2102      	movs	r1, #2
 8001a84:	4827      	ldr	r0, [pc, #156]	; (8001b24 <main+0x10c>)
 8001a86:	f7ff fbfe 	bl	8001286 <MOT_SetDirection>
	MOT_SetDutyCycle(&MoteurGauche, 65); // 66
 8001a8a:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8001b34 <main+0x11c>
 8001a8e:	4825      	ldr	r0, [pc, #148]	; (8001b24 <main+0x10c>)
 8001a90:	f7ff fc52 	bl	8001338 <MOT_SetDutyCycle>
	//HAL_ADC_Start_IT(&hadc1);

	/* Moteur Droite */
	MOT_InitTimer(&MoteurDroite, &htim1, TIM_CHANNEL_2); // PA9 / D8
 8001a94:	2204      	movs	r2, #4
 8001a96:	4922      	ldr	r1, [pc, #136]	; (8001b20 <main+0x108>)
 8001a98:	4827      	ldr	r0, [pc, #156]	; (8001b38 <main+0x120>)
 8001a9a:	f7ff fba8 	bl	80011ee <MOT_InitTimer>
	MOT_InitGPIOs(&MoteurDroite, GPIOB, GPIO_PIN_8, GPIOB, GPIO_PIN_9); // IN1:PB8 et IN2:PB9
 8001a9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001aa2:	9300      	str	r3, [sp, #0]
 8001aa4:	4b25      	ldr	r3, [pc, #148]	; (8001b3c <main+0x124>)
 8001aa6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001aaa:	4924      	ldr	r1, [pc, #144]	; (8001b3c <main+0x124>)
 8001aac:	4822      	ldr	r0, [pc, #136]	; (8001b38 <main+0x120>)
 8001aae:	f7ff fbbc 	bl	800122a <MOT_InitGPIOs>
	MOT_SetCoeff(&MoteurDroite, 550, 0.05);
 8001ab2:	eddf 0a1e 	vldr	s1, [pc, #120]	; 8001b2c <main+0x114>
 8001ab6:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8001b40 <main+0x128>
 8001aba:	481f      	ldr	r0, [pc, #124]	; (8001b38 <main+0x120>)
 8001abc:	f7ff fbcf 	bl	800125e <MOT_SetCoeff>
	MOT_SetDirection(&MoteurDroite, MOT_FUNCTIONS_REVERSE);
 8001ac0:	2102      	movs	r1, #2
 8001ac2:	481d      	ldr	r0, [pc, #116]	; (8001b38 <main+0x120>)
 8001ac4:	f7ff fbdf 	bl	8001286 <MOT_SetDirection>
	MOT_SetDutyCycle(&MoteurDroite, 65);
 8001ac8:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8001b34 <main+0x11c>
 8001acc:	481a      	ldr	r0, [pc, #104]	; (8001b38 <main+0x120>)
 8001ace:	f7ff fc33 	bl	8001338 <MOT_SetDutyCycle>
	/* Fin initialisation des moteurs --------------------------------------------*/

	/* Initialisation des encodeurs ----------------------------------------------*/

	/* Encodeur Gauche */
	ENC_InitTimer(&CodeurGauche, &htim2, TIM_CHANNEL_1, TIM_CHANNEL_2); // PhA:PA0 et PhB:PA1
 8001ad2:	2304      	movs	r3, #4
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	491b      	ldr	r1, [pc, #108]	; (8001b44 <main+0x12c>)
 8001ad8:	481b      	ldr	r0, [pc, #108]	; (8001b48 <main+0x130>)
 8001ada:	f7ff fb33 	bl	8001144 <ENC_InitTimer>
	ENC_SetTicksPerRev(&CodeurGauche, 1488);
 8001ade:	f44f 61ba 	mov.w	r1, #1488	; 0x5d0
 8001ae2:	4819      	ldr	r0, [pc, #100]	; (8001b48 <main+0x130>)
 8001ae4:	f7ff fb52 	bl	800118c <ENC_SetTicksPerRev>

	/* Encodeur Droite */
	ENC_InitTimer(&CodeurDroite, &htim3, TIM_CHANNEL_1, TIM_CHANNEL_2); // PhA:PA6 et PhB:PA7
 8001ae8:	2304      	movs	r3, #4
 8001aea:	2200      	movs	r2, #0
 8001aec:	4917      	ldr	r1, [pc, #92]	; (8001b4c <main+0x134>)
 8001aee:	4818      	ldr	r0, [pc, #96]	; (8001b50 <main+0x138>)
 8001af0:	f7ff fb28 	bl	8001144 <ENC_InitTimer>
	ENC_SetTicksPerRev(&CodeurDroite, 780);
 8001af4:	f44f 7143 	mov.w	r1, #780	; 0x30c
 8001af8:	4815      	ldr	r0, [pc, #84]	; (8001b50 <main+0x138>)
 8001afa:	f7ff fb47 	bl	800118c <ENC_SetTicksPerRev>

	/* Fin initialisation des encodeurs ------------------------------------------*/

	// Initialisation de l'asservissement
	Ctrl_Init_SetTimer(&Asserv, &htim6);
 8001afe:	4915      	ldr	r1, [pc, #84]	; (8001b54 <main+0x13c>)
 8001b00:	4815      	ldr	r0, [pc, #84]	; (8001b58 <main+0x140>)
 8001b02:	f7ff fa3d 	bl	8000f80 <Ctrl_Init_SetTimer>

	reglage = 0;
 8001b06:	4b15      	ldr	r3, [pc, #84]	; (8001b5c <main+0x144>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	701a      	strb	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8001b0c:	e7fe      	b.n	8001b0c <main+0xf4>
 8001b0e:	bf00      	nop
 8001b10:	08008fac 	.word	0x08008fac
 8001b14:	08001981 	.word	0x08001981
 8001b18:	08008fc4 	.word	0x08008fc4
 8001b1c:	080019d9 	.word	0x080019d9
 8001b20:	200006b8 	.word	0x200006b8
 8001b24:	20000550 	.word	0x20000550
 8001b28:	40020800 	.word	0x40020800
 8001b2c:	3d4ccccd 	.word	0x3d4ccccd
 8001b30:	44548000 	.word	0x44548000
 8001b34:	42820000 	.word	0x42820000
 8001b38:	20000580 	.word	0x20000580
 8001b3c:	40020400 	.word	0x40020400
 8001b40:	44098000 	.word	0x44098000
 8001b44:	20000700 	.word	0x20000700
 8001b48:	200005d0 	.word	0x200005d0
 8001b4c:	20000628 	.word	0x20000628
 8001b50:	200005c0 	.word	0x200005c0
 8001b54:	20000670 	.word	0x20000670
 8001b58:	200005b0 	.word	0x200005b0
 8001b5c:	2000053d 	.word	0x2000053d

08001b60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b094      	sub	sp, #80	; 0x50
 8001b64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b66:	f107 031c 	add.w	r3, r7, #28
 8001b6a:	2234      	movs	r2, #52	; 0x34
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f004 fc5a 	bl	8006428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b74:	f107 0308 	add.w	r3, r7, #8
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
 8001b80:	60da      	str	r2, [r3, #12]
 8001b82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b84:	2300      	movs	r3, #0
 8001b86:	607b      	str	r3, [r7, #4]
 8001b88:	4b2a      	ldr	r3, [pc, #168]	; (8001c34 <SystemClock_Config+0xd4>)
 8001b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8c:	4a29      	ldr	r2, [pc, #164]	; (8001c34 <SystemClock_Config+0xd4>)
 8001b8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b92:	6413      	str	r3, [r2, #64]	; 0x40
 8001b94:	4b27      	ldr	r3, [pc, #156]	; (8001c34 <SystemClock_Config+0xd4>)
 8001b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b9c:	607b      	str	r3, [r7, #4]
 8001b9e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	603b      	str	r3, [r7, #0]
 8001ba4:	4b24      	ldr	r3, [pc, #144]	; (8001c38 <SystemClock_Config+0xd8>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001bac:	4a22      	ldr	r2, [pc, #136]	; (8001c38 <SystemClock_Config+0xd8>)
 8001bae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bb2:	6013      	str	r3, [r2, #0]
 8001bb4:	4b20      	ldr	r3, [pc, #128]	; (8001c38 <SystemClock_Config+0xd8>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bbc:	603b      	str	r3, [r7, #0]
 8001bbe:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bc8:	2310      	movs	r3, #16
 8001bca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bcc:	2302      	movs	r3, #2
 8001bce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001bd4:	2310      	movs	r3, #16
 8001bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001bd8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001bdc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001bde:	2304      	movs	r3, #4
 8001be0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001be2:	2302      	movs	r3, #2
 8001be4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001be6:	2302      	movs	r3, #2
 8001be8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bea:	f107 031c 	add.w	r3, r7, #28
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f001 ffc8 	bl	8003b84 <HAL_RCC_OscConfig>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001bfa:	f000 f8b1 	bl	8001d60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bfe:	230f      	movs	r3, #15
 8001c00:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c02:	2302      	movs	r3, #2
 8001c04:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c06:	2300      	movs	r3, #0
 8001c08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c10:	2300      	movs	r3, #0
 8001c12:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c14:	f107 0308 	add.w	r3, r7, #8
 8001c18:	2102      	movs	r1, #2
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f001 fce6 	bl	80035ec <HAL_RCC_ClockConfig>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001c26:	f000 f89b 	bl	8001d60 <Error_Handler>
  }
}
 8001c2a:	bf00      	nop
 8001c2c:	3750      	adds	r7, #80	; 0x50
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40023800 	.word	0x40023800
 8001c38:	40007000 	.word	0x40007000

08001c3c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 8001c46:	88fb      	ldrh	r3, [r7, #6]
 8001c48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c4c:	d110      	bne.n	8001c70 <HAL_GPIO_EXTI_Callback+0x34>
		if(testStart == 0) {
 8001c4e:	4b0a      	ldr	r3, [pc, #40]	; (8001c78 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d106      	bne.n	8001c64 <HAL_GPIO_EXTI_Callback+0x28>
			testStart = 1;
 8001c56:	4b08      	ldr	r3, [pc, #32]	; (8001c78 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001c58:	2201      	movs	r2, #1
 8001c5a:	701a      	strb	r2, [r3, #0]
			printf("Debut du test\r\n");
 8001c5c:	4807      	ldr	r0, [pc, #28]	; (8001c7c <HAL_GPIO_EXTI_Callback+0x40>)
 8001c5e:	f005 f8db 	bl	8006e18 <puts>
		else {
			testStart = 0;
			printf("Fin du test\r\n");
		}
	}
}
 8001c62:	e005      	b.n	8001c70 <HAL_GPIO_EXTI_Callback+0x34>
			testStart = 0;
 8001c64:	4b04      	ldr	r3, [pc, #16]	; (8001c78 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	701a      	strb	r2, [r3, #0]
			printf("Fin du test\r\n");
 8001c6a:	4805      	ldr	r0, [pc, #20]	; (8001c80 <HAL_GPIO_EXTI_Callback+0x44>)
 8001c6c:	f005 f8d4 	bl	8006e18 <puts>
}
 8001c70:	bf00      	nop
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	2000053c 	.word	0x2000053c
 8001c7c:	08008fdc 	.word	0x08008fdc
 8001c80:	08008fec 	.word	0x08008fec

08001c84 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart){
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a06      	ldr	r2, [pc, #24]	; (8001cac <HAL_UART_RxCpltCallback+0x28>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d106      	bne.n	8001ca4 <HAL_UART_RxCpltCallback+0x20>
		shell_char_received();
 8001c96:	f7ff fc7f 	bl	8001598 <shell_char_received>
		HAL_UART_Receive_IT(&huart2, (uint8_t*)&c, 1);
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	4904      	ldr	r1, [pc, #16]	; (8001cb0 <HAL_UART_RxCpltCallback+0x2c>)
 8001c9e:	4805      	ldr	r0, [pc, #20]	; (8001cb4 <HAL_UART_RxCpltCallback+0x30>)
 8001ca0:	f003 fcaf 	bl	8005602 <HAL_UART_Receive_IT>
	}
}
 8001ca4:	bf00      	nop
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40004400 	.word	0x40004400
 8001cb0:	2000020c 	.word	0x2000020c
 8001cb4:	20000748 	.word	0x20000748

08001cb8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001cb8:	b5b0      	push	{r4, r5, r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af02      	add	r7, sp, #8
 8001cbe:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a19      	ldr	r2, [pc, #100]	; (8001d2c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d12b      	bne.n	8001d22 <HAL_TIM_PeriodElapsedCallback+0x6a>
		if(testStart == 1){
 8001cca:	4b19      	ldr	r3, [pc, #100]	; (8001d30 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d11d      	bne.n	8001d0e <HAL_TIM_PeriodElapsedCallback+0x56>
			float ret_gauche = Ctrl_SpeedControl(&MoteurGauche, &CodeurGauche);
 8001cd2:	4918      	ldr	r1, [pc, #96]	; (8001d34 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001cd4:	4818      	ldr	r0, [pc, #96]	; (8001d38 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001cd6:	f7ff f97f 	bl	8000fd8 <Ctrl_SpeedControl>
 8001cda:	ed87 0a03 	vstr	s0, [r7, #12]
			float ret_droite = Ctrl_SpeedControl(&MoteurDroite, &CodeurDroite);
 8001cde:	4917      	ldr	r1, [pc, #92]	; (8001d3c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001ce0:	4817      	ldr	r0, [pc, #92]	; (8001d40 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001ce2:	f7ff f979 	bl	8000fd8 <Ctrl_SpeedControl>
 8001ce6:	ed87 0a02 	vstr	s0, [r7, #8]
			printf("G: %f\t D: %f\r\n",ret_gauche,ret_droite);
 8001cea:	68f8      	ldr	r0, [r7, #12]
 8001cec:	f7fe fc4c 	bl	8000588 <__aeabi_f2d>
 8001cf0:	4604      	mov	r4, r0
 8001cf2:	460d      	mov	r5, r1
 8001cf4:	68b8      	ldr	r0, [r7, #8]
 8001cf6:	f7fe fc47 	bl	8000588 <__aeabi_f2d>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	e9cd 2300 	strd	r2, r3, [sp]
 8001d02:	4622      	mov	r2, r4
 8001d04:	462b      	mov	r3, r5
 8001d06:	480f      	ldr	r0, [pc, #60]	; (8001d44 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001d08:	f005 f800 	bl	8006d0c <iprintf>
		else{
			MOT_SetDutyCycle(&MoteurGauche, 0);
			MOT_SetDutyCycle(&MoteurDroite, 0);
		}
	}
}
 8001d0c:	e009      	b.n	8001d22 <HAL_TIM_PeriodElapsedCallback+0x6a>
			MOT_SetDutyCycle(&MoteurGauche, 0);
 8001d0e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8001d48 <HAL_TIM_PeriodElapsedCallback+0x90>
 8001d12:	4809      	ldr	r0, [pc, #36]	; (8001d38 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001d14:	f7ff fb10 	bl	8001338 <MOT_SetDutyCycle>
			MOT_SetDutyCycle(&MoteurDroite, 0);
 8001d18:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8001d48 <HAL_TIM_PeriodElapsedCallback+0x90>
 8001d1c:	4808      	ldr	r0, [pc, #32]	; (8001d40 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001d1e:	f7ff fb0b 	bl	8001338 <MOT_SetDutyCycle>
}
 8001d22:	bf00      	nop
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bdb0      	pop	{r4, r5, r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40001000 	.word	0x40001000
 8001d30:	2000053c 	.word	0x2000053c
 8001d34:	200005d0 	.word	0x200005d0
 8001d38:	20000550 	.word	0x20000550
 8001d3c:	200005c0 	.word	0x200005c0
 8001d40:	20000580 	.word	0x20000580
 8001d44:	08008ffc 	.word	0x08008ffc
 8001d48:	00000000 	.word	0x00000000

08001d4c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1){
		//uint32_t val = HAL_ADC_GetValue(&hadc1);
		//printf("val = %ld\r\n", val);
		//HAL_ADC_Start_IT(&hadc1);
	}
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d64:	b672      	cpsid	i
}
 8001d66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001d68:	e7fe      	b.n	8001d68 <Error_Handler+0x8>
	...

08001d6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	607b      	str	r3, [r7, #4]
 8001d76:	4b10      	ldr	r3, [pc, #64]	; (8001db8 <HAL_MspInit+0x4c>)
 8001d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7a:	4a0f      	ldr	r2, [pc, #60]	; (8001db8 <HAL_MspInit+0x4c>)
 8001d7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d80:	6453      	str	r3, [r2, #68]	; 0x44
 8001d82:	4b0d      	ldr	r3, [pc, #52]	; (8001db8 <HAL_MspInit+0x4c>)
 8001d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d8a:	607b      	str	r3, [r7, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	603b      	str	r3, [r7, #0]
 8001d92:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <HAL_MspInit+0x4c>)
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	4a08      	ldr	r2, [pc, #32]	; (8001db8 <HAL_MspInit+0x4c>)
 8001d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d9e:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <HAL_MspInit+0x4c>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da6:	603b      	str	r3, [r7, #0]
 8001da8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001daa:	2007      	movs	r0, #7
 8001dac:	f001 f984 	bl	80030b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001db0:	bf00      	nop
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40023800 	.word	0x40023800

08001dbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dc0:	e7fe      	b.n	8001dc0 <NMI_Handler+0x4>

08001dc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dc6:	e7fe      	b.n	8001dc6 <HardFault_Handler+0x4>

08001dc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dcc:	e7fe      	b.n	8001dcc <MemManage_Handler+0x4>

08001dce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dd2:	e7fe      	b.n	8001dd2 <BusFault_Handler+0x4>

08001dd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dd8:	e7fe      	b.n	8001dd8 <UsageFault_Handler+0x4>

08001dda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dec:	bf00      	nop
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001df6:	b480      	push	{r7}
 8001df8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dfa:	bf00      	nop
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e08:	f000 fc72 	bl	80026f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e0c:	bf00      	nop
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001e14:	4802      	ldr	r0, [pc, #8]	; (8001e20 <ADC_IRQHandler+0x10>)
 8001e16:	f000 fcf2 	bl	80027fe <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	200005e0 	.word	0x200005e0

08001e24 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e28:	4802      	ldr	r0, [pc, #8]	; (8001e34 <USART2_IRQHandler+0x10>)
 8001e2a:	f003 fc1b 	bl	8005664 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20000748 	.word	0x20000748

08001e38 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001e3c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001e40:	f001 fbbc 	bl	80035bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e44:	bf00      	nop
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001e4c:	4802      	ldr	r0, [pc, #8]	; (8001e58 <TIM6_DAC_IRQHandler+0x10>)
 8001e4e:	f002 fc4d 	bl	80046ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20000670 	.word	0x20000670

08001e5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
	return 1;
 8001e60:	2301      	movs	r3, #1
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <_kill>:

int _kill(int pid, int sig)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e76:	f004 faad 	bl	80063d4 <__errno>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2216      	movs	r2, #22
 8001e7e:	601a      	str	r2, [r3, #0]
	return -1;
 8001e80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <_exit>:

void _exit (int status)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e94:	f04f 31ff 	mov.w	r1, #4294967295
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f7ff ffe7 	bl	8001e6c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e9e:	e7fe      	b.n	8001e9e <_exit+0x12>

08001ea0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eac:	2300      	movs	r3, #0
 8001eae:	617b      	str	r3, [r7, #20]
 8001eb0:	e00a      	b.n	8001ec8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001eb2:	f3af 8000 	nop.w
 8001eb6:	4601      	mov	r1, r0
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	1c5a      	adds	r2, r3, #1
 8001ebc:	60ba      	str	r2, [r7, #8]
 8001ebe:	b2ca      	uxtb	r2, r1
 8001ec0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	617b      	str	r3, [r7, #20]
 8001ec8:	697a      	ldr	r2, [r7, #20]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	dbf0      	blt.n	8001eb2 <_read+0x12>
	}

return len;
 8001ed0:	687b      	ldr	r3, [r7, #4]
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3718      	adds	r7, #24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b086      	sub	sp, #24
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	60f8      	str	r0, [r7, #12]
 8001ee2:	60b9      	str	r1, [r7, #8]
 8001ee4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	617b      	str	r3, [r7, #20]
 8001eea:	e009      	b.n	8001f00 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	1c5a      	adds	r2, r3, #1
 8001ef0:	60ba      	str	r2, [r7, #8]
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff fa8d 	bl	8001414 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	3301      	adds	r3, #1
 8001efe:	617b      	str	r3, [r7, #20]
 8001f00:	697a      	ldr	r2, [r7, #20]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	dbf1      	blt.n	8001eec <_write+0x12>
	}
	return len;
 8001f08:	687b      	ldr	r3, [r7, #4]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3718      	adds	r7, #24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <_close>:

int _close(int file)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b083      	sub	sp, #12
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
	return -1;
 8001f1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	b083      	sub	sp, #12
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
 8001f32:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f3a:	605a      	str	r2, [r3, #4]
	return 0;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr

08001f4a <_isatty>:

int _isatty(int file)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	b083      	sub	sp, #12
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
	return 1;
 8001f52:	2301      	movs	r3, #1
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]
	return 0;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3714      	adds	r7, #20
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
	...

08001f7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f84:	4a14      	ldr	r2, [pc, #80]	; (8001fd8 <_sbrk+0x5c>)
 8001f86:	4b15      	ldr	r3, [pc, #84]	; (8001fdc <_sbrk+0x60>)
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f90:	4b13      	ldr	r3, [pc, #76]	; (8001fe0 <_sbrk+0x64>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d102      	bne.n	8001f9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f98:	4b11      	ldr	r3, [pc, #68]	; (8001fe0 <_sbrk+0x64>)
 8001f9a:	4a12      	ldr	r2, [pc, #72]	; (8001fe4 <_sbrk+0x68>)
 8001f9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f9e:	4b10      	ldr	r3, [pc, #64]	; (8001fe0 <_sbrk+0x64>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d207      	bcs.n	8001fbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fac:	f004 fa12 	bl	80063d4 <__errno>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	220c      	movs	r2, #12
 8001fb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fba:	e009      	b.n	8001fd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fbc:	4b08      	ldr	r3, [pc, #32]	; (8001fe0 <_sbrk+0x64>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fc2:	4b07      	ldr	r3, [pc, #28]	; (8001fe0 <_sbrk+0x64>)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4413      	add	r3, r2
 8001fca:	4a05      	ldr	r2, [pc, #20]	; (8001fe0 <_sbrk+0x64>)
 8001fcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fce:	68fb      	ldr	r3, [r7, #12]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3718      	adds	r7, #24
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	20020000 	.word	0x20020000
 8001fdc:	00000400 	.word	0x00000400
 8001fe0:	20000540 	.word	0x20000540
 8001fe4:	200007a0 	.word	0x200007a0

08001fe8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fec:	4b06      	ldr	r3, [pc, #24]	; (8002008 <SystemInit+0x20>)
 8001fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ff2:	4a05      	ldr	r2, [pc, #20]	; (8002008 <SystemInit+0x20>)
 8001ff4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ff8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ffc:	bf00      	nop
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	e000ed00 	.word	0xe000ed00

0800200c <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b096      	sub	sp, #88	; 0x58
 8002010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002012:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002016:	2200      	movs	r2, #0
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	605a      	str	r2, [r3, #4]
 800201c:	609a      	str	r2, [r3, #8]
 800201e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002020:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800202a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800202e:	2200      	movs	r2, #0
 8002030:	601a      	str	r2, [r3, #0]
 8002032:	605a      	str	r2, [r3, #4]
 8002034:	609a      	str	r2, [r3, #8]
 8002036:	60da      	str	r2, [r3, #12]
 8002038:	611a      	str	r2, [r3, #16]
 800203a:	615a      	str	r2, [r3, #20]
 800203c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800203e:	1d3b      	adds	r3, r7, #4
 8002040:	2220      	movs	r2, #32
 8002042:	2100      	movs	r1, #0
 8002044:	4618      	mov	r0, r3
 8002046:	f004 f9ef 	bl	8006428 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800204a:	4b44      	ldr	r3, [pc, #272]	; (800215c <MX_TIM1_Init+0x150>)
 800204c:	4a44      	ldr	r2, [pc, #272]	; (8002160 <MX_TIM1_Init+0x154>)
 800204e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002050:	4b42      	ldr	r3, [pc, #264]	; (800215c <MX_TIM1_Init+0x150>)
 8002052:	2200      	movs	r2, #0
 8002054:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002056:	4b41      	ldr	r3, [pc, #260]	; (800215c <MX_TIM1_Init+0x150>)
 8002058:	2200      	movs	r2, #0
 800205a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3360-1;
 800205c:	4b3f      	ldr	r3, [pc, #252]	; (800215c <MX_TIM1_Init+0x150>)
 800205e:	f640 521f 	movw	r2, #3359	; 0xd1f
 8002062:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002064:	4b3d      	ldr	r3, [pc, #244]	; (800215c <MX_TIM1_Init+0x150>)
 8002066:	2200      	movs	r2, #0
 8002068:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800206a:	4b3c      	ldr	r3, [pc, #240]	; (800215c <MX_TIM1_Init+0x150>)
 800206c:	2200      	movs	r2, #0
 800206e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002070:	4b3a      	ldr	r3, [pc, #232]	; (800215c <MX_TIM1_Init+0x150>)
 8002072:	2200      	movs	r2, #0
 8002074:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002076:	4839      	ldr	r0, [pc, #228]	; (800215c <MX_TIM1_Init+0x150>)
 8002078:	f002 f822 	bl	80040c0 <HAL_TIM_Base_Init>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002082:	f7ff fe6d 	bl	8001d60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002086:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800208a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800208c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002090:	4619      	mov	r1, r3
 8002092:	4832      	ldr	r0, [pc, #200]	; (800215c <MX_TIM1_Init+0x150>)
 8002094:	f002 fcf4 	bl	8004a80 <HAL_TIM_ConfigClockSource>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800209e:	f7ff fe5f 	bl	8001d60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80020a2:	482e      	ldr	r0, [pc, #184]	; (800215c <MX_TIM1_Init+0x150>)
 80020a4:	f002 f8cc 	bl	8004240 <HAL_TIM_PWM_Init>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80020ae:	f7ff fe57 	bl	8001d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020b2:	2300      	movs	r3, #0
 80020b4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020b6:	2300      	movs	r3, #0
 80020b8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80020be:	4619      	mov	r1, r3
 80020c0:	4826      	ldr	r0, [pc, #152]	; (800215c <MX_TIM1_Init+0x150>)
 80020c2:	f003 f8dd 	bl	8005280 <HAL_TIMEx_MasterConfigSynchronization>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80020cc:	f7ff fe48 	bl	8001d60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020d0:	2360      	movs	r3, #96	; 0x60
 80020d2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80020d4:	2300      	movs	r3, #0
 80020d6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020d8:	2300      	movs	r3, #0
 80020da:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80020dc:	2300      	movs	r3, #0
 80020de:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020e0:	2300      	movs	r3, #0
 80020e2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80020e4:	2300      	movs	r3, #0
 80020e6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80020e8:	2300      	movs	r3, #0
 80020ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020f0:	2200      	movs	r2, #0
 80020f2:	4619      	mov	r1, r3
 80020f4:	4819      	ldr	r0, [pc, #100]	; (800215c <MX_TIM1_Init+0x150>)
 80020f6:	f002 fc01 	bl	80048fc <HAL_TIM_PWM_ConfigChannel>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002100:	f7ff fe2e 	bl	8001d60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002104:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002108:	2204      	movs	r2, #4
 800210a:	4619      	mov	r1, r3
 800210c:	4813      	ldr	r0, [pc, #76]	; (800215c <MX_TIM1_Init+0x150>)
 800210e:	f002 fbf5 	bl	80048fc <HAL_TIM_PWM_ConfigChannel>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002118:	f7ff fe22 	bl	8001d60 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800211c:	2300      	movs	r3, #0
 800211e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002120:	2300      	movs	r3, #0
 8002122:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002124:	2300      	movs	r3, #0
 8002126:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002128:	2300      	movs	r3, #0
 800212a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800212c:	2300      	movs	r3, #0
 800212e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002130:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002134:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002136:	2300      	movs	r3, #0
 8002138:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800213a:	1d3b      	adds	r3, r7, #4
 800213c:	4619      	mov	r1, r3
 800213e:	4807      	ldr	r0, [pc, #28]	; (800215c <MX_TIM1_Init+0x150>)
 8002140:	f003 f91a 	bl	8005378 <HAL_TIMEx_ConfigBreakDeadTime>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800214a:	f7ff fe09 	bl	8001d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800214e:	4803      	ldr	r0, [pc, #12]	; (800215c <MX_TIM1_Init+0x150>)
 8002150:	f000 f99e 	bl	8002490 <HAL_TIM_MspPostInit>

}
 8002154:	bf00      	nop
 8002156:	3758      	adds	r7, #88	; 0x58
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	200006b8 	.word	0x200006b8
 8002160:	40010000 	.word	0x40010000

08002164 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b08c      	sub	sp, #48	; 0x30
 8002168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800216a:	f107 030c 	add.w	r3, r7, #12
 800216e:	2224      	movs	r2, #36	; 0x24
 8002170:	2100      	movs	r1, #0
 8002172:	4618      	mov	r0, r3
 8002174:	f004 f958 	bl	8006428 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002178:	1d3b      	adds	r3, r7, #4
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]
 800217e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002180:	4b21      	ldr	r3, [pc, #132]	; (8002208 <MX_TIM2_Init+0xa4>)
 8002182:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002186:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002188:	4b1f      	ldr	r3, [pc, #124]	; (8002208 <MX_TIM2_Init+0xa4>)
 800218a:	2200      	movs	r2, #0
 800218c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800218e:	4b1e      	ldr	r3, [pc, #120]	; (8002208 <MX_TIM2_Init+0xa4>)
 8002190:	2200      	movs	r2, #0
 8002192:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002194:	4b1c      	ldr	r3, [pc, #112]	; (8002208 <MX_TIM2_Init+0xa4>)
 8002196:	f04f 32ff 	mov.w	r2, #4294967295
 800219a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800219c:	4b1a      	ldr	r3, [pc, #104]	; (8002208 <MX_TIM2_Init+0xa4>)
 800219e:	2200      	movs	r2, #0
 80021a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80021a2:	4b19      	ldr	r3, [pc, #100]	; (8002208 <MX_TIM2_Init+0xa4>)
 80021a4:	2280      	movs	r2, #128	; 0x80
 80021a6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80021a8:	2303      	movs	r3, #3
 80021aa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80021ac:	2300      	movs	r3, #0
 80021ae:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80021b0:	2301      	movs	r3, #1
 80021b2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80021b4:	2300      	movs	r3, #0
 80021b6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80021b8:	230a      	movs	r3, #10
 80021ba:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80021bc:	2300      	movs	r3, #0
 80021be:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80021c0:	2301      	movs	r3, #1
 80021c2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80021c4:	2300      	movs	r3, #0
 80021c6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80021c8:	230a      	movs	r3, #10
 80021ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80021cc:	f107 030c 	add.w	r3, r7, #12
 80021d0:	4619      	mov	r1, r3
 80021d2:	480d      	ldr	r0, [pc, #52]	; (8002208 <MX_TIM2_Init+0xa4>)
 80021d4:	f002 f956 	bl	8004484 <HAL_TIM_Encoder_Init>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80021de:	f7ff fdbf 	bl	8001d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021e2:	2300      	movs	r3, #0
 80021e4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021e6:	2300      	movs	r3, #0
 80021e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021ea:	1d3b      	adds	r3, r7, #4
 80021ec:	4619      	mov	r1, r3
 80021ee:	4806      	ldr	r0, [pc, #24]	; (8002208 <MX_TIM2_Init+0xa4>)
 80021f0:	f003 f846 	bl	8005280 <HAL_TIMEx_MasterConfigSynchronization>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80021fa:	f7ff fdb1 	bl	8001d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80021fe:	bf00      	nop
 8002200:	3730      	adds	r7, #48	; 0x30
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	20000700 	.word	0x20000700

0800220c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b08c      	sub	sp, #48	; 0x30
 8002210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002212:	f107 030c 	add.w	r3, r7, #12
 8002216:	2224      	movs	r2, #36	; 0x24
 8002218:	2100      	movs	r1, #0
 800221a:	4618      	mov	r0, r3
 800221c:	f004 f904 	bl	8006428 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002220:	1d3b      	adds	r3, r7, #4
 8002222:	2200      	movs	r2, #0
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002228:	4b20      	ldr	r3, [pc, #128]	; (80022ac <MX_TIM3_Init+0xa0>)
 800222a:	4a21      	ldr	r2, [pc, #132]	; (80022b0 <MX_TIM3_Init+0xa4>)
 800222c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800222e:	4b1f      	ldr	r3, [pc, #124]	; (80022ac <MX_TIM3_Init+0xa0>)
 8002230:	2200      	movs	r2, #0
 8002232:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002234:	4b1d      	ldr	r3, [pc, #116]	; (80022ac <MX_TIM3_Init+0xa0>)
 8002236:	2200      	movs	r2, #0
 8002238:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800223a:	4b1c      	ldr	r3, [pc, #112]	; (80022ac <MX_TIM3_Init+0xa0>)
 800223c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002240:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002242:	4b1a      	ldr	r3, [pc, #104]	; (80022ac <MX_TIM3_Init+0xa0>)
 8002244:	2200      	movs	r2, #0
 8002246:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002248:	4b18      	ldr	r3, [pc, #96]	; (80022ac <MX_TIM3_Init+0xa0>)
 800224a:	2200      	movs	r2, #0
 800224c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800224e:	2301      	movs	r3, #1
 8002250:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002252:	2300      	movs	r3, #0
 8002254:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002256:	2301      	movs	r3, #1
 8002258:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800225a:	2300      	movs	r3, #0
 800225c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800225e:	230a      	movs	r3, #10
 8002260:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002262:	2300      	movs	r3, #0
 8002264:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002266:	2301      	movs	r3, #1
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800226a:	2300      	movs	r3, #0
 800226c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 800226e:	230a      	movs	r3, #10
 8002270:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002272:	f107 030c 	add.w	r3, r7, #12
 8002276:	4619      	mov	r1, r3
 8002278:	480c      	ldr	r0, [pc, #48]	; (80022ac <MX_TIM3_Init+0xa0>)
 800227a:	f002 f903 	bl	8004484 <HAL_TIM_Encoder_Init>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002284:	f7ff fd6c 	bl	8001d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002288:	2300      	movs	r3, #0
 800228a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800228c:	2300      	movs	r3, #0
 800228e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002290:	1d3b      	adds	r3, r7, #4
 8002292:	4619      	mov	r1, r3
 8002294:	4805      	ldr	r0, [pc, #20]	; (80022ac <MX_TIM3_Init+0xa0>)
 8002296:	f002 fff3 	bl	8005280 <HAL_TIMEx_MasterConfigSynchronization>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80022a0:	f7ff fd5e 	bl	8001d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80022a4:	bf00      	nop
 80022a6:	3730      	adds	r7, #48	; 0x30
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	20000628 	.word	0x20000628
 80022b0:	40000400 	.word	0x40000400

080022b4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022ba:	463b      	mov	r3, r7
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80022c2:	4b15      	ldr	r3, [pc, #84]	; (8002318 <MX_TIM6_Init+0x64>)
 80022c4:	4a15      	ldr	r2, [pc, #84]	; (800231c <MX_TIM6_Init+0x68>)
 80022c6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8400-1;
 80022c8:	4b13      	ldr	r3, [pc, #76]	; (8002318 <MX_TIM6_Init+0x64>)
 80022ca:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80022ce:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022d0:	4b11      	ldr	r3, [pc, #68]	; (8002318 <MX_TIM6_Init+0x64>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 200;
 80022d6:	4b10      	ldr	r3, [pc, #64]	; (8002318 <MX_TIM6_Init+0x64>)
 80022d8:	22c8      	movs	r2, #200	; 0xc8
 80022da:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022dc:	4b0e      	ldr	r3, [pc, #56]	; (8002318 <MX_TIM6_Init+0x64>)
 80022de:	2200      	movs	r2, #0
 80022e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80022e2:	480d      	ldr	r0, [pc, #52]	; (8002318 <MX_TIM6_Init+0x64>)
 80022e4:	f001 feec 	bl	80040c0 <HAL_TIM_Base_Init>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80022ee:	f7ff fd37 	bl	8001d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022f2:	2300      	movs	r3, #0
 80022f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022f6:	2300      	movs	r3, #0
 80022f8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80022fa:	463b      	mov	r3, r7
 80022fc:	4619      	mov	r1, r3
 80022fe:	4806      	ldr	r0, [pc, #24]	; (8002318 <MX_TIM6_Init+0x64>)
 8002300:	f002 ffbe 	bl	8005280 <HAL_TIMEx_MasterConfigSynchronization>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800230a:	f7ff fd29 	bl	8001d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800230e:	bf00      	nop
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	20000670 	.word	0x20000670
 800231c:	40001000 	.word	0x40001000

08002320 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a18      	ldr	r2, [pc, #96]	; (8002390 <HAL_TIM_Base_MspInit+0x70>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d10e      	bne.n	8002350 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	60fb      	str	r3, [r7, #12]
 8002336:	4b17      	ldr	r3, [pc, #92]	; (8002394 <HAL_TIM_Base_MspInit+0x74>)
 8002338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233a:	4a16      	ldr	r2, [pc, #88]	; (8002394 <HAL_TIM_Base_MspInit+0x74>)
 800233c:	f043 0301 	orr.w	r3, r3, #1
 8002340:	6453      	str	r3, [r2, #68]	; 0x44
 8002342:	4b14      	ldr	r3, [pc, #80]	; (8002394 <HAL_TIM_Base_MspInit+0x74>)
 8002344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	60fb      	str	r3, [r7, #12]
 800234c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800234e:	e01a      	b.n	8002386 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM6)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a10      	ldr	r2, [pc, #64]	; (8002398 <HAL_TIM_Base_MspInit+0x78>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d115      	bne.n	8002386 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	60bb      	str	r3, [r7, #8]
 800235e:	4b0d      	ldr	r3, [pc, #52]	; (8002394 <HAL_TIM_Base_MspInit+0x74>)
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	4a0c      	ldr	r2, [pc, #48]	; (8002394 <HAL_TIM_Base_MspInit+0x74>)
 8002364:	f043 0310 	orr.w	r3, r3, #16
 8002368:	6413      	str	r3, [r2, #64]	; 0x40
 800236a:	4b0a      	ldr	r3, [pc, #40]	; (8002394 <HAL_TIM_Base_MspInit+0x74>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	f003 0310 	and.w	r3, r3, #16
 8002372:	60bb      	str	r3, [r7, #8]
 8002374:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002376:	2200      	movs	r2, #0
 8002378:	2100      	movs	r1, #0
 800237a:	2036      	movs	r0, #54	; 0x36
 800237c:	f000 fea7 	bl	80030ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002380:	2036      	movs	r0, #54	; 0x36
 8002382:	f000 fec0 	bl	8003106 <HAL_NVIC_EnableIRQ>
}
 8002386:	bf00      	nop
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40010000 	.word	0x40010000
 8002394:	40023800 	.word	0x40023800
 8002398:	40001000 	.word	0x40001000

0800239c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b08c      	sub	sp, #48	; 0x30
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a4:	f107 031c 	add.w	r3, r7, #28
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	605a      	str	r2, [r3, #4]
 80023ae:	609a      	str	r2, [r3, #8]
 80023b0:	60da      	str	r2, [r3, #12]
 80023b2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023bc:	d12c      	bne.n	8002418 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023be:	2300      	movs	r3, #0
 80023c0:	61bb      	str	r3, [r7, #24]
 80023c2:	4b30      	ldr	r3, [pc, #192]	; (8002484 <HAL_TIM_Encoder_MspInit+0xe8>)
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	4a2f      	ldr	r2, [pc, #188]	; (8002484 <HAL_TIM_Encoder_MspInit+0xe8>)
 80023c8:	f043 0301 	orr.w	r3, r3, #1
 80023cc:	6413      	str	r3, [r2, #64]	; 0x40
 80023ce:	4b2d      	ldr	r3, [pc, #180]	; (8002484 <HAL_TIM_Encoder_MspInit+0xe8>)
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	61bb      	str	r3, [r7, #24]
 80023d8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023da:	2300      	movs	r3, #0
 80023dc:	617b      	str	r3, [r7, #20]
 80023de:	4b29      	ldr	r3, [pc, #164]	; (8002484 <HAL_TIM_Encoder_MspInit+0xe8>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	4a28      	ldr	r2, [pc, #160]	; (8002484 <HAL_TIM_Encoder_MspInit+0xe8>)
 80023e4:	f043 0301 	orr.w	r3, r3, #1
 80023e8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ea:	4b26      	ldr	r3, [pc, #152]	; (8002484 <HAL_TIM_Encoder_MspInit+0xe8>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	617b      	str	r3, [r7, #20]
 80023f4:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCG_A_Pin|ENCG_B_Pin;
 80023f6:	2303      	movs	r3, #3
 80023f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fa:	2302      	movs	r3, #2
 80023fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fe:	2300      	movs	r3, #0
 8002400:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002402:	2300      	movs	r3, #0
 8002404:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002406:	2301      	movs	r3, #1
 8002408:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800240a:	f107 031c 	add.w	r3, r7, #28
 800240e:	4619      	mov	r1, r3
 8002410:	481d      	ldr	r0, [pc, #116]	; (8002488 <HAL_TIM_Encoder_MspInit+0xec>)
 8002412:	f000 ff25 	bl	8003260 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002416:	e030      	b.n	800247a <HAL_TIM_Encoder_MspInit+0xde>
  else if(tim_encoderHandle->Instance==TIM3)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a1b      	ldr	r2, [pc, #108]	; (800248c <HAL_TIM_Encoder_MspInit+0xf0>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d12b      	bne.n	800247a <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002422:	2300      	movs	r3, #0
 8002424:	613b      	str	r3, [r7, #16]
 8002426:	4b17      	ldr	r3, [pc, #92]	; (8002484 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	4a16      	ldr	r2, [pc, #88]	; (8002484 <HAL_TIM_Encoder_MspInit+0xe8>)
 800242c:	f043 0302 	orr.w	r3, r3, #2
 8002430:	6413      	str	r3, [r2, #64]	; 0x40
 8002432:	4b14      	ldr	r3, [pc, #80]	; (8002484 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	613b      	str	r3, [r7, #16]
 800243c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800243e:	2300      	movs	r3, #0
 8002440:	60fb      	str	r3, [r7, #12]
 8002442:	4b10      	ldr	r3, [pc, #64]	; (8002484 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	4a0f      	ldr	r2, [pc, #60]	; (8002484 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002448:	f043 0301 	orr.w	r3, r3, #1
 800244c:	6313      	str	r3, [r2, #48]	; 0x30
 800244e:	4b0d      	ldr	r3, [pc, #52]	; (8002484 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCD_A_Pin|ENCD_B_Pin;
 800245a:	23c0      	movs	r3, #192	; 0xc0
 800245c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245e:	2302      	movs	r3, #2
 8002460:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002462:	2300      	movs	r3, #0
 8002464:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002466:	2300      	movs	r3, #0
 8002468:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800246a:	2302      	movs	r3, #2
 800246c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800246e:	f107 031c 	add.w	r3, r7, #28
 8002472:	4619      	mov	r1, r3
 8002474:	4804      	ldr	r0, [pc, #16]	; (8002488 <HAL_TIM_Encoder_MspInit+0xec>)
 8002476:	f000 fef3 	bl	8003260 <HAL_GPIO_Init>
}
 800247a:	bf00      	nop
 800247c:	3730      	adds	r7, #48	; 0x30
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	40023800 	.word	0x40023800
 8002488:	40020000 	.word	0x40020000
 800248c:	40000400 	.word	0x40000400

08002490 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b088      	sub	sp, #32
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002498:	f107 030c 	add.w	r3, r7, #12
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	605a      	str	r2, [r3, #4]
 80024a2:	609a      	str	r2, [r3, #8]
 80024a4:	60da      	str	r2, [r3, #12]
 80024a6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a12      	ldr	r2, [pc, #72]	; (80024f8 <HAL_TIM_MspPostInit+0x68>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d11e      	bne.n	80024f0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	60bb      	str	r3, [r7, #8]
 80024b6:	4b11      	ldr	r3, [pc, #68]	; (80024fc <HAL_TIM_MspPostInit+0x6c>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ba:	4a10      	ldr	r2, [pc, #64]	; (80024fc <HAL_TIM_MspPostInit+0x6c>)
 80024bc:	f043 0301 	orr.w	r3, r3, #1
 80024c0:	6313      	str	r3, [r2, #48]	; 0x30
 80024c2:	4b0e      	ldr	r3, [pc, #56]	; (80024fc <HAL_TIM_MspPostInit+0x6c>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	60bb      	str	r3, [r7, #8]
 80024cc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = MOTG_PWM_Pin|MOTD_PWM_Pin;
 80024ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80024d2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d4:	2302      	movs	r3, #2
 80024d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d8:	2300      	movs	r3, #0
 80024da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024dc:	2300      	movs	r3, #0
 80024de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80024e0:	2301      	movs	r3, #1
 80024e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e4:	f107 030c 	add.w	r3, r7, #12
 80024e8:	4619      	mov	r1, r3
 80024ea:	4805      	ldr	r0, [pc, #20]	; (8002500 <HAL_TIM_MspPostInit+0x70>)
 80024ec:	f000 feb8 	bl	8003260 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80024f0:	bf00      	nop
 80024f2:	3720      	adds	r7, #32
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	40010000 	.word	0x40010000
 80024fc:	40023800 	.word	0x40023800
 8002500:	40020000 	.word	0x40020000

08002504 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002508:	4b11      	ldr	r3, [pc, #68]	; (8002550 <MX_USART2_UART_Init+0x4c>)
 800250a:	4a12      	ldr	r2, [pc, #72]	; (8002554 <MX_USART2_UART_Init+0x50>)
 800250c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800250e:	4b10      	ldr	r3, [pc, #64]	; (8002550 <MX_USART2_UART_Init+0x4c>)
 8002510:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002514:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002516:	4b0e      	ldr	r3, [pc, #56]	; (8002550 <MX_USART2_UART_Init+0x4c>)
 8002518:	2200      	movs	r2, #0
 800251a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800251c:	4b0c      	ldr	r3, [pc, #48]	; (8002550 <MX_USART2_UART_Init+0x4c>)
 800251e:	2200      	movs	r2, #0
 8002520:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002522:	4b0b      	ldr	r3, [pc, #44]	; (8002550 <MX_USART2_UART_Init+0x4c>)
 8002524:	2200      	movs	r2, #0
 8002526:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002528:	4b09      	ldr	r3, [pc, #36]	; (8002550 <MX_USART2_UART_Init+0x4c>)
 800252a:	220c      	movs	r2, #12
 800252c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800252e:	4b08      	ldr	r3, [pc, #32]	; (8002550 <MX_USART2_UART_Init+0x4c>)
 8002530:	2200      	movs	r2, #0
 8002532:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002534:	4b06      	ldr	r3, [pc, #24]	; (8002550 <MX_USART2_UART_Init+0x4c>)
 8002536:	2200      	movs	r2, #0
 8002538:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800253a:	4805      	ldr	r0, [pc, #20]	; (8002550 <MX_USART2_UART_Init+0x4c>)
 800253c:	f002 ff82 	bl	8005444 <HAL_UART_Init>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002546:	f7ff fc0b 	bl	8001d60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800254a:	bf00      	nop
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	20000748 	.word	0x20000748
 8002554:	40004400 	.word	0x40004400

08002558 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b08a      	sub	sp, #40	; 0x28
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002560:	f107 0314 	add.w	r3, r7, #20
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	605a      	str	r2, [r3, #4]
 800256a:	609a      	str	r2, [r3, #8]
 800256c:	60da      	str	r2, [r3, #12]
 800256e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a1d      	ldr	r2, [pc, #116]	; (80025ec <HAL_UART_MspInit+0x94>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d133      	bne.n	80025e2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	613b      	str	r3, [r7, #16]
 800257e:	4b1c      	ldr	r3, [pc, #112]	; (80025f0 <HAL_UART_MspInit+0x98>)
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	4a1b      	ldr	r2, [pc, #108]	; (80025f0 <HAL_UART_MspInit+0x98>)
 8002584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002588:	6413      	str	r3, [r2, #64]	; 0x40
 800258a:	4b19      	ldr	r3, [pc, #100]	; (80025f0 <HAL_UART_MspInit+0x98>)
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002592:	613b      	str	r3, [r7, #16]
 8002594:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002596:	2300      	movs	r3, #0
 8002598:	60fb      	str	r3, [r7, #12]
 800259a:	4b15      	ldr	r3, [pc, #84]	; (80025f0 <HAL_UART_MspInit+0x98>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	4a14      	ldr	r2, [pc, #80]	; (80025f0 <HAL_UART_MspInit+0x98>)
 80025a0:	f043 0301 	orr.w	r3, r3, #1
 80025a4:	6313      	str	r3, [r2, #48]	; 0x30
 80025a6:	4b12      	ldr	r3, [pc, #72]	; (80025f0 <HAL_UART_MspInit+0x98>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80025b2:	230c      	movs	r3, #12
 80025b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b6:	2302      	movs	r3, #2
 80025b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ba:	2300      	movs	r3, #0
 80025bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025be:	2303      	movs	r3, #3
 80025c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025c2:	2307      	movs	r3, #7
 80025c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025c6:	f107 0314 	add.w	r3, r7, #20
 80025ca:	4619      	mov	r1, r3
 80025cc:	4809      	ldr	r0, [pc, #36]	; (80025f4 <HAL_UART_MspInit+0x9c>)
 80025ce:	f000 fe47 	bl	8003260 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80025d2:	2200      	movs	r2, #0
 80025d4:	2100      	movs	r1, #0
 80025d6:	2026      	movs	r0, #38	; 0x26
 80025d8:	f000 fd79 	bl	80030ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80025dc:	2026      	movs	r0, #38	; 0x26
 80025de:	f000 fd92 	bl	8003106 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80025e2:	bf00      	nop
 80025e4:	3728      	adds	r7, #40	; 0x28
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40004400 	.word	0x40004400
 80025f0:	40023800 	.word	0x40023800
 80025f4:	40020000 	.word	0x40020000

080025f8 <Reset_Handler>:
 80025f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002630 <LoopFillZerobss+0x12>
 80025fc:	480d      	ldr	r0, [pc, #52]	; (8002634 <LoopFillZerobss+0x16>)
 80025fe:	490e      	ldr	r1, [pc, #56]	; (8002638 <LoopFillZerobss+0x1a>)
 8002600:	4a0e      	ldr	r2, [pc, #56]	; (800263c <LoopFillZerobss+0x1e>)
 8002602:	2300      	movs	r3, #0
 8002604:	e002      	b.n	800260c <LoopCopyDataInit>

08002606 <CopyDataInit>:
 8002606:	58d4      	ldr	r4, [r2, r3]
 8002608:	50c4      	str	r4, [r0, r3]
 800260a:	3304      	adds	r3, #4

0800260c <LoopCopyDataInit>:
 800260c:	18c4      	adds	r4, r0, r3
 800260e:	428c      	cmp	r4, r1
 8002610:	d3f9      	bcc.n	8002606 <CopyDataInit>
 8002612:	4a0b      	ldr	r2, [pc, #44]	; (8002640 <LoopFillZerobss+0x22>)
 8002614:	4c0b      	ldr	r4, [pc, #44]	; (8002644 <LoopFillZerobss+0x26>)
 8002616:	2300      	movs	r3, #0
 8002618:	e001      	b.n	800261e <LoopFillZerobss>

0800261a <FillZerobss>:
 800261a:	6013      	str	r3, [r2, #0]
 800261c:	3204      	adds	r2, #4

0800261e <LoopFillZerobss>:
 800261e:	42a2      	cmp	r2, r4
 8002620:	d3fb      	bcc.n	800261a <FillZerobss>
 8002622:	f7ff fce1 	bl	8001fe8 <SystemInit>
 8002626:	f003 fedb 	bl	80063e0 <__libc_init_array>
 800262a:	f7ff f9f5 	bl	8001a18 <main>
 800262e:	4770      	bx	lr
 8002630:	20020000 	.word	0x20020000
 8002634:	20000000 	.word	0x20000000
 8002638:	200001f0 	.word	0x200001f0
 800263c:	08009414 	.word	0x08009414
 8002640:	200001f0 	.word	0x200001f0
 8002644:	200007a0 	.word	0x200007a0

08002648 <CAN1_RX0_IRQHandler>:
 8002648:	e7fe      	b.n	8002648 <CAN1_RX0_IRQHandler>
	...

0800264c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002650:	4b0e      	ldr	r3, [pc, #56]	; (800268c <HAL_Init+0x40>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a0d      	ldr	r2, [pc, #52]	; (800268c <HAL_Init+0x40>)
 8002656:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800265a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800265c:	4b0b      	ldr	r3, [pc, #44]	; (800268c <HAL_Init+0x40>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a0a      	ldr	r2, [pc, #40]	; (800268c <HAL_Init+0x40>)
 8002662:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002666:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002668:	4b08      	ldr	r3, [pc, #32]	; (800268c <HAL_Init+0x40>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a07      	ldr	r2, [pc, #28]	; (800268c <HAL_Init+0x40>)
 800266e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002672:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002674:	2003      	movs	r0, #3
 8002676:	f000 fd1f 	bl	80030b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800267a:	2000      	movs	r0, #0
 800267c:	f000 f808 	bl	8002690 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002680:	f7ff fb74 	bl	8001d6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	40023c00 	.word	0x40023c00

08002690 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002698:	4b12      	ldr	r3, [pc, #72]	; (80026e4 <HAL_InitTick+0x54>)
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	4b12      	ldr	r3, [pc, #72]	; (80026e8 <HAL_InitTick+0x58>)
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	4619      	mov	r1, r3
 80026a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80026aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ae:	4618      	mov	r0, r3
 80026b0:	f000 fd37 	bl	8003122 <HAL_SYSTICK_Config>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e00e      	b.n	80026dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2b0f      	cmp	r3, #15
 80026c2:	d80a      	bhi.n	80026da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026c4:	2200      	movs	r2, #0
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	f04f 30ff 	mov.w	r0, #4294967295
 80026cc:	f000 fcff 	bl	80030ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026d0:	4a06      	ldr	r2, [pc, #24]	; (80026ec <HAL_InitTick+0x5c>)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
 80026d8:	e000      	b.n	80026dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3708      	adds	r7, #8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	20000014 	.word	0x20000014
 80026e8:	2000001c 	.word	0x2000001c
 80026ec:	20000018 	.word	0x20000018

080026f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026f4:	4b06      	ldr	r3, [pc, #24]	; (8002710 <HAL_IncTick+0x20>)
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	461a      	mov	r2, r3
 80026fa:	4b06      	ldr	r3, [pc, #24]	; (8002714 <HAL_IncTick+0x24>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4413      	add	r3, r2
 8002700:	4a04      	ldr	r2, [pc, #16]	; (8002714 <HAL_IncTick+0x24>)
 8002702:	6013      	str	r3, [r2, #0]
}
 8002704:	bf00      	nop
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	2000001c 	.word	0x2000001c
 8002714:	2000078c 	.word	0x2000078c

08002718 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  return uwTick;
 800271c:	4b03      	ldr	r3, [pc, #12]	; (800272c <HAL_GetTick+0x14>)
 800271e:	681b      	ldr	r3, [r3, #0]
}
 8002720:	4618      	mov	r0, r3
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	2000078c 	.word	0x2000078c

08002730 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002738:	f7ff ffee 	bl	8002718 <HAL_GetTick>
 800273c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002748:	d005      	beq.n	8002756 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800274a:	4b0a      	ldr	r3, [pc, #40]	; (8002774 <HAL_Delay+0x44>)
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	461a      	mov	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	4413      	add	r3, r2
 8002754:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002756:	bf00      	nop
 8002758:	f7ff ffde 	bl	8002718 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	429a      	cmp	r2, r3
 8002766:	d8f7      	bhi.n	8002758 <HAL_Delay+0x28>
  {
  }
}
 8002768:	bf00      	nop
 800276a:	bf00      	nop
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	2000001c 	.word	0x2000001c

08002778 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002780:	2300      	movs	r3, #0
 8002782:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e033      	b.n	80027f6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	2b00      	cmp	r3, #0
 8002794:	d109      	bne.n	80027aa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f7ff f806 	bl	80017a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	f003 0310 	and.w	r3, r3, #16
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d118      	bne.n	80027e8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80027be:	f023 0302 	bic.w	r3, r3, #2
 80027c2:	f043 0202 	orr.w	r2, r3, #2
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 fa9e 	bl	8002d0c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	f023 0303 	bic.w	r3, r3, #3
 80027de:	f043 0201 	orr.w	r2, r3, #1
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	641a      	str	r2, [r3, #64]	; 0x40
 80027e6:	e001      	b.n	80027ec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80027f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b084      	sub	sp, #16
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002806:	2300      	movs	r3, #0
 8002808:	60fb      	str	r3, [r7, #12]
 800280a:	2300      	movs	r3, #0
 800280c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0302 	and.w	r3, r3, #2
 8002818:	2b02      	cmp	r3, #2
 800281a:	bf0c      	ite	eq
 800281c:	2301      	moveq	r3, #1
 800281e:	2300      	movne	r3, #0
 8002820:	b2db      	uxtb	r3, r3
 8002822:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f003 0320 	and.w	r3, r3, #32
 800282e:	2b20      	cmp	r3, #32
 8002830:	bf0c      	ite	eq
 8002832:	2301      	moveq	r3, #1
 8002834:	2300      	movne	r3, #0
 8002836:	b2db      	uxtb	r3, r3
 8002838:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d049      	beq.n	80028d4 <HAL_ADC_IRQHandler+0xd6>
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d046      	beq.n	80028d4 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	f003 0310 	and.w	r3, r3, #16
 800284e:	2b00      	cmp	r3, #0
 8002850:	d105      	bne.n	800285e <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d12b      	bne.n	80028c4 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002870:	2b00      	cmp	r3, #0
 8002872:	d127      	bne.n	80028c4 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800287e:	2b00      	cmp	r3, #0
 8002880:	d006      	beq.n	8002890 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800288c:	2b00      	cmp	r3, #0
 800288e:	d119      	bne.n	80028c4 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	685a      	ldr	r2, [r3, #4]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f022 0220 	bic.w	r2, r2, #32
 800289e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d105      	bne.n	80028c4 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028bc:	f043 0201 	orr.w	r2, r3, #1
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f7ff fa41 	bl	8001d4c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f06f 0212 	mvn.w	r2, #18
 80028d2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0304 	and.w	r3, r3, #4
 80028de:	2b04      	cmp	r3, #4
 80028e0:	bf0c      	ite	eq
 80028e2:	2301      	moveq	r3, #1
 80028e4:	2300      	movne	r3, #0
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028f4:	2b80      	cmp	r3, #128	; 0x80
 80028f6:	bf0c      	ite	eq
 80028f8:	2301      	moveq	r3, #1
 80028fa:	2300      	movne	r3, #0
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d057      	beq.n	80029b6 <HAL_ADC_IRQHandler+0x1b8>
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d054      	beq.n	80029b6 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002910:	f003 0310 	and.w	r3, r3, #16
 8002914:	2b00      	cmp	r3, #0
 8002916:	d105      	bne.n	8002924 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d139      	bne.n	80029a6 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002938:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800293c:	2b00      	cmp	r3, #0
 800293e:	d006      	beq.n	800294e <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800294a:	2b00      	cmp	r3, #0
 800294c:	d12b      	bne.n	80029a6 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002958:	2b00      	cmp	r3, #0
 800295a:	d124      	bne.n	80029a6 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002966:	2b00      	cmp	r3, #0
 8002968:	d11d      	bne.n	80029a6 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800296e:	2b00      	cmp	r3, #0
 8002970:	d119      	bne.n	80029a6 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	685a      	ldr	r2, [r3, #4]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002980:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002996:	2b00      	cmp	r3, #0
 8002998:	d105      	bne.n	80029a6 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	f043 0201 	orr.w	r2, r3, #1
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 faac 	bl	8002f04 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f06f 020c 	mvn.w	r2, #12
 80029b4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	bf0c      	ite	eq
 80029c4:	2301      	moveq	r3, #1
 80029c6:	2300      	movne	r3, #0
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d6:	2b40      	cmp	r3, #64	; 0x40
 80029d8:	bf0c      	ite	eq
 80029da:	2301      	moveq	r3, #1
 80029dc:	2300      	movne	r3, #0
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d017      	beq.n	8002a18 <HAL_ADC_IRQHandler+0x21a>
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d014      	beq.n	8002a18 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0301 	and.w	r3, r3, #1
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d10d      	bne.n	8002a18 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a00:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f000 f839 	bl	8002a80 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f06f 0201 	mvn.w	r2, #1
 8002a16:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0320 	and.w	r3, r3, #32
 8002a22:	2b20      	cmp	r3, #32
 8002a24:	bf0c      	ite	eq
 8002a26:	2301      	moveq	r3, #1
 8002a28:	2300      	movne	r3, #0
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a3c:	bf0c      	ite	eq
 8002a3e:	2301      	moveq	r3, #1
 8002a40:	2300      	movne	r3, #0
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d015      	beq.n	8002a78 <HAL_ADC_IRQHandler+0x27a>
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d012      	beq.n	8002a78 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a56:	f043 0202 	orr.w	r2, r3, #2
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f06f 0220 	mvn.w	r2, #32
 8002a66:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f000 f813 	bl	8002a94 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f06f 0220 	mvn.w	r2, #32
 8002a76:	601a      	str	r2, [r3, #0]
  }
}
 8002a78:	bf00      	nop
 8002a7a:	3710      	adds	r7, #16
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d101      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x1c>
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	e113      	b.n	8002cec <HAL_ADC_ConfigChannel+0x244>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2b09      	cmp	r3, #9
 8002ad2:	d925      	bls.n	8002b20 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68d9      	ldr	r1, [r3, #12]
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	4413      	add	r3, r2
 8002ae8:	3b1e      	subs	r3, #30
 8002aea:	2207      	movs	r2, #7
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	43da      	mvns	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	400a      	ands	r2, r1
 8002af8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68d9      	ldr	r1, [r3, #12]
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	4403      	add	r3, r0
 8002b12:	3b1e      	subs	r3, #30
 8002b14:	409a      	lsls	r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	60da      	str	r2, [r3, #12]
 8002b1e:	e022      	b.n	8002b66 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6919      	ldr	r1, [r3, #16]
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	4613      	mov	r3, r2
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	4413      	add	r3, r2
 8002b34:	2207      	movs	r2, #7
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	43da      	mvns	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	400a      	ands	r2, r1
 8002b42:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6919      	ldr	r1, [r3, #16]
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	689a      	ldr	r2, [r3, #8]
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	4618      	mov	r0, r3
 8002b56:	4603      	mov	r3, r0
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	4403      	add	r3, r0
 8002b5c:	409a      	lsls	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	430a      	orrs	r2, r1
 8002b64:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	2b06      	cmp	r3, #6
 8002b6c:	d824      	bhi.n	8002bb8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685a      	ldr	r2, [r3, #4]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	4413      	add	r3, r2
 8002b7e:	3b05      	subs	r3, #5
 8002b80:	221f      	movs	r2, #31
 8002b82:	fa02 f303 	lsl.w	r3, r2, r3
 8002b86:	43da      	mvns	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	400a      	ands	r2, r1
 8002b8e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685a      	ldr	r2, [r3, #4]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	4413      	add	r3, r2
 8002ba8:	3b05      	subs	r3, #5
 8002baa:	fa00 f203 	lsl.w	r2, r0, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	635a      	str	r2, [r3, #52]	; 0x34
 8002bb6:	e04c      	b.n	8002c52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	2b0c      	cmp	r3, #12
 8002bbe:	d824      	bhi.n	8002c0a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	4413      	add	r3, r2
 8002bd0:	3b23      	subs	r3, #35	; 0x23
 8002bd2:	221f      	movs	r2, #31
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	43da      	mvns	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	400a      	ands	r2, r1
 8002be0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	4618      	mov	r0, r3
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685a      	ldr	r2, [r3, #4]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	4413      	add	r3, r2
 8002bfa:	3b23      	subs	r3, #35	; 0x23
 8002bfc:	fa00 f203 	lsl.w	r2, r0, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	430a      	orrs	r2, r1
 8002c06:	631a      	str	r2, [r3, #48]	; 0x30
 8002c08:	e023      	b.n	8002c52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	4613      	mov	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	4413      	add	r3, r2
 8002c1a:	3b41      	subs	r3, #65	; 0x41
 8002c1c:	221f      	movs	r2, #31
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	43da      	mvns	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	400a      	ands	r2, r1
 8002c2a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	4618      	mov	r0, r3
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685a      	ldr	r2, [r3, #4]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	4413      	add	r3, r2
 8002c44:	3b41      	subs	r3, #65	; 0x41
 8002c46:	fa00 f203 	lsl.w	r2, r0, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c52:	4b29      	ldr	r3, [pc, #164]	; (8002cf8 <HAL_ADC_ConfigChannel+0x250>)
 8002c54:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a28      	ldr	r2, [pc, #160]	; (8002cfc <HAL_ADC_ConfigChannel+0x254>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d10f      	bne.n	8002c80 <HAL_ADC_ConfigChannel+0x1d8>
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2b12      	cmp	r3, #18
 8002c66:	d10b      	bne.n	8002c80 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a1d      	ldr	r2, [pc, #116]	; (8002cfc <HAL_ADC_ConfigChannel+0x254>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d12b      	bne.n	8002ce2 <HAL_ADC_ConfigChannel+0x23a>
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a1c      	ldr	r2, [pc, #112]	; (8002d00 <HAL_ADC_ConfigChannel+0x258>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d003      	beq.n	8002c9c <HAL_ADC_ConfigChannel+0x1f4>
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2b11      	cmp	r3, #17
 8002c9a:	d122      	bne.n	8002ce2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a11      	ldr	r2, [pc, #68]	; (8002d00 <HAL_ADC_ConfigChannel+0x258>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d111      	bne.n	8002ce2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002cbe:	4b11      	ldr	r3, [pc, #68]	; (8002d04 <HAL_ADC_ConfigChannel+0x25c>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a11      	ldr	r2, [pc, #68]	; (8002d08 <HAL_ADC_ConfigChannel+0x260>)
 8002cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc8:	0c9a      	lsrs	r2, r3, #18
 8002cca:	4613      	mov	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	4413      	add	r3, r2
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002cd4:	e002      	b.n	8002cdc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1f9      	bne.n	8002cd6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002cea:	2300      	movs	r3, #0
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3714      	adds	r7, #20
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr
 8002cf8:	40012300 	.word	0x40012300
 8002cfc:	40012000 	.word	0x40012000
 8002d00:	10000012 	.word	0x10000012
 8002d04:	20000014 	.word	0x20000014
 8002d08:	431bde83 	.word	0x431bde83

08002d0c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d14:	4b79      	ldr	r3, [pc, #484]	; (8002efc <ADC_Init+0x1f0>)
 8002d16:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	685a      	ldr	r2, [r3, #4]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	431a      	orrs	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	685a      	ldr	r2, [r3, #4]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	6859      	ldr	r1, [r3, #4]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	021a      	lsls	r2, r3, #8
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	430a      	orrs	r2, r1
 8002d54:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002d64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	6859      	ldr	r1, [r3, #4]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	689a      	ldr	r2, [r3, #8]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	430a      	orrs	r2, r1
 8002d76:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	689a      	ldr	r2, [r3, #8]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	6899      	ldr	r1, [r3, #8]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68da      	ldr	r2, [r3, #12]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9e:	4a58      	ldr	r2, [pc, #352]	; (8002f00 <ADC_Init+0x1f4>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d022      	beq.n	8002dea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	689a      	ldr	r2, [r3, #8]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002db2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6899      	ldr	r1, [r3, #8]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	689a      	ldr	r2, [r3, #8]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002dd4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6899      	ldr	r1, [r3, #8]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	430a      	orrs	r2, r1
 8002de6:	609a      	str	r2, [r3, #8]
 8002de8:	e00f      	b.n	8002e0a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002df8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	689a      	ldr	r2, [r3, #8]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e08:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	689a      	ldr	r2, [r3, #8]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 0202 	bic.w	r2, r2, #2
 8002e18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	6899      	ldr	r1, [r3, #8]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	7e1b      	ldrb	r3, [r3, #24]
 8002e24:	005a      	lsls	r2, r3, #1
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d01b      	beq.n	8002e70 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	685a      	ldr	r2, [r3, #4]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e46:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002e56:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6859      	ldr	r1, [r3, #4]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e62:	3b01      	subs	r3, #1
 8002e64:	035a      	lsls	r2, r3, #13
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	605a      	str	r2, [r3, #4]
 8002e6e:	e007      	b.n	8002e80 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	685a      	ldr	r2, [r3, #4]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e7e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002e8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	69db      	ldr	r3, [r3, #28]
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	051a      	lsls	r2, r3, #20
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002eb4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6899      	ldr	r1, [r3, #8]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ec2:	025a      	lsls	r2, r3, #9
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689a      	ldr	r2, [r3, #8]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eda:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6899      	ldr	r1, [r3, #8]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	029a      	lsls	r2, r3, #10
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	609a      	str	r2, [r3, #8]
}
 8002ef0:	bf00      	nop
 8002ef2:	3714      	adds	r7, #20
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr
 8002efc:	40012300 	.word	0x40012300
 8002f00:	0f000001 	.word	0x0f000001

08002f04 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f003 0307 	and.w	r3, r3, #7
 8002f26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f28:	4b0c      	ldr	r3, [pc, #48]	; (8002f5c <__NVIC_SetPriorityGrouping+0x44>)
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f2e:	68ba      	ldr	r2, [r7, #8]
 8002f30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f34:	4013      	ands	r3, r2
 8002f36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f4a:	4a04      	ldr	r2, [pc, #16]	; (8002f5c <__NVIC_SetPriorityGrouping+0x44>)
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	60d3      	str	r3, [r2, #12]
}
 8002f50:	bf00      	nop
 8002f52:	3714      	adds	r7, #20
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr
 8002f5c:	e000ed00 	.word	0xe000ed00

08002f60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f64:	4b04      	ldr	r3, [pc, #16]	; (8002f78 <__NVIC_GetPriorityGrouping+0x18>)
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	0a1b      	lsrs	r3, r3, #8
 8002f6a:	f003 0307 	and.w	r3, r3, #7
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr
 8002f78:	e000ed00 	.word	0xe000ed00

08002f7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	4603      	mov	r3, r0
 8002f84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	db0b      	blt.n	8002fa6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f8e:	79fb      	ldrb	r3, [r7, #7]
 8002f90:	f003 021f 	and.w	r2, r3, #31
 8002f94:	4907      	ldr	r1, [pc, #28]	; (8002fb4 <__NVIC_EnableIRQ+0x38>)
 8002f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9a:	095b      	lsrs	r3, r3, #5
 8002f9c:	2001      	movs	r0, #1
 8002f9e:	fa00 f202 	lsl.w	r2, r0, r2
 8002fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fa6:	bf00      	nop
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	e000e100 	.word	0xe000e100

08002fb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	6039      	str	r1, [r7, #0]
 8002fc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	db0a      	blt.n	8002fe2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	b2da      	uxtb	r2, r3
 8002fd0:	490c      	ldr	r1, [pc, #48]	; (8003004 <__NVIC_SetPriority+0x4c>)
 8002fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd6:	0112      	lsls	r2, r2, #4
 8002fd8:	b2d2      	uxtb	r2, r2
 8002fda:	440b      	add	r3, r1
 8002fdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fe0:	e00a      	b.n	8002ff8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	b2da      	uxtb	r2, r3
 8002fe6:	4908      	ldr	r1, [pc, #32]	; (8003008 <__NVIC_SetPriority+0x50>)
 8002fe8:	79fb      	ldrb	r3, [r7, #7]
 8002fea:	f003 030f 	and.w	r3, r3, #15
 8002fee:	3b04      	subs	r3, #4
 8002ff0:	0112      	lsls	r2, r2, #4
 8002ff2:	b2d2      	uxtb	r2, r2
 8002ff4:	440b      	add	r3, r1
 8002ff6:	761a      	strb	r2, [r3, #24]
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr
 8003004:	e000e100 	.word	0xe000e100
 8003008:	e000ed00 	.word	0xe000ed00

0800300c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800300c:	b480      	push	{r7}
 800300e:	b089      	sub	sp, #36	; 0x24
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f003 0307 	and.w	r3, r3, #7
 800301e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	f1c3 0307 	rsb	r3, r3, #7
 8003026:	2b04      	cmp	r3, #4
 8003028:	bf28      	it	cs
 800302a:	2304      	movcs	r3, #4
 800302c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	3304      	adds	r3, #4
 8003032:	2b06      	cmp	r3, #6
 8003034:	d902      	bls.n	800303c <NVIC_EncodePriority+0x30>
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	3b03      	subs	r3, #3
 800303a:	e000      	b.n	800303e <NVIC_EncodePriority+0x32>
 800303c:	2300      	movs	r3, #0
 800303e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003040:	f04f 32ff 	mov.w	r2, #4294967295
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	fa02 f303 	lsl.w	r3, r2, r3
 800304a:	43da      	mvns	r2, r3
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	401a      	ands	r2, r3
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003054:	f04f 31ff 	mov.w	r1, #4294967295
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	fa01 f303 	lsl.w	r3, r1, r3
 800305e:	43d9      	mvns	r1, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003064:	4313      	orrs	r3, r2
         );
}
 8003066:	4618      	mov	r0, r3
 8003068:	3724      	adds	r7, #36	; 0x24
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
	...

08003074 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	3b01      	subs	r3, #1
 8003080:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003084:	d301      	bcc.n	800308a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003086:	2301      	movs	r3, #1
 8003088:	e00f      	b.n	80030aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800308a:	4a0a      	ldr	r2, [pc, #40]	; (80030b4 <SysTick_Config+0x40>)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	3b01      	subs	r3, #1
 8003090:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003092:	210f      	movs	r1, #15
 8003094:	f04f 30ff 	mov.w	r0, #4294967295
 8003098:	f7ff ff8e 	bl	8002fb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800309c:	4b05      	ldr	r3, [pc, #20]	; (80030b4 <SysTick_Config+0x40>)
 800309e:	2200      	movs	r2, #0
 80030a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030a2:	4b04      	ldr	r3, [pc, #16]	; (80030b4 <SysTick_Config+0x40>)
 80030a4:	2207      	movs	r2, #7
 80030a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	e000e010 	.word	0xe000e010

080030b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f7ff ff29 	bl	8002f18 <__NVIC_SetPriorityGrouping>
}
 80030c6:	bf00      	nop
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b086      	sub	sp, #24
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	4603      	mov	r3, r0
 80030d6:	60b9      	str	r1, [r7, #8]
 80030d8:	607a      	str	r2, [r7, #4]
 80030da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030dc:	2300      	movs	r3, #0
 80030de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030e0:	f7ff ff3e 	bl	8002f60 <__NVIC_GetPriorityGrouping>
 80030e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	68b9      	ldr	r1, [r7, #8]
 80030ea:	6978      	ldr	r0, [r7, #20]
 80030ec:	f7ff ff8e 	bl	800300c <NVIC_EncodePriority>
 80030f0:	4602      	mov	r2, r0
 80030f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030f6:	4611      	mov	r1, r2
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7ff ff5d 	bl	8002fb8 <__NVIC_SetPriority>
}
 80030fe:	bf00      	nop
 8003100:	3718      	adds	r7, #24
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b082      	sub	sp, #8
 800310a:	af00      	add	r7, sp, #0
 800310c:	4603      	mov	r3, r0
 800310e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003114:	4618      	mov	r0, r3
 8003116:	f7ff ff31 	bl	8002f7c <__NVIC_EnableIRQ>
}
 800311a:	bf00      	nop
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003122:	b580      	push	{r7, lr}
 8003124:	b082      	sub	sp, #8
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f7ff ffa2 	bl	8003074 <SysTick_Config>
 8003130:	4603      	mov	r3, r0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3708      	adds	r7, #8
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}

0800313a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800313a:	b580      	push	{r7, lr}
 800313c:	b084      	sub	sp, #16
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003146:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003148:	f7ff fae6 	bl	8002718 <HAL_GetTick>
 800314c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d008      	beq.n	800316c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2280      	movs	r2, #128	; 0x80
 800315e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e052      	b.n	8003212 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 0216 	bic.w	r2, r2, #22
 800317a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	695a      	ldr	r2, [r3, #20]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800318a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003190:	2b00      	cmp	r3, #0
 8003192:	d103      	bne.n	800319c <HAL_DMA_Abort+0x62>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003198:	2b00      	cmp	r3, #0
 800319a:	d007      	beq.n	80031ac <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f022 0208 	bic.w	r2, r2, #8
 80031aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 0201 	bic.w	r2, r2, #1
 80031ba:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031bc:	e013      	b.n	80031e6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031be:	f7ff faab 	bl	8002718 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	2b05      	cmp	r3, #5
 80031ca:	d90c      	bls.n	80031e6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2220      	movs	r2, #32
 80031d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2203      	movs	r2, #3
 80031d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e015      	b.n	8003212 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0301 	and.w	r3, r3, #1
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1e4      	bne.n	80031be <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f8:	223f      	movs	r2, #63	; 0x3f
 80031fa:	409a      	lsls	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800321a:	b480      	push	{r7}
 800321c:	b083      	sub	sp, #12
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d004      	beq.n	8003238 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2280      	movs	r2, #128	; 0x80
 8003232:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e00c      	b.n	8003252 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2205      	movs	r2, #5
 800323c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f022 0201 	bic.w	r2, r2, #1
 800324e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
	...

08003260 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003260:	b480      	push	{r7}
 8003262:	b089      	sub	sp, #36	; 0x24
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800326a:	2300      	movs	r3, #0
 800326c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800326e:	2300      	movs	r3, #0
 8003270:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003272:	2300      	movs	r3, #0
 8003274:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003276:	2300      	movs	r3, #0
 8003278:	61fb      	str	r3, [r7, #28]
 800327a:	e165      	b.n	8003548 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800327c:	2201      	movs	r2, #1
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	697a      	ldr	r2, [r7, #20]
 800328c:	4013      	ands	r3, r2
 800328e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	429a      	cmp	r2, r3
 8003296:	f040 8154 	bne.w	8003542 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f003 0303 	and.w	r3, r3, #3
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d005      	beq.n	80032b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d130      	bne.n	8003314 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	2203      	movs	r2, #3
 80032be:	fa02 f303 	lsl.w	r3, r2, r3
 80032c2:	43db      	mvns	r3, r3
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	4013      	ands	r3, r2
 80032c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	68da      	ldr	r2, [r3, #12]
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	fa02 f303 	lsl.w	r3, r2, r3
 80032d6:	69ba      	ldr	r2, [r7, #24]
 80032d8:	4313      	orrs	r3, r2
 80032da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032e8:	2201      	movs	r2, #1
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	fa02 f303 	lsl.w	r3, r2, r3
 80032f0:	43db      	mvns	r3, r3
 80032f2:	69ba      	ldr	r2, [r7, #24]
 80032f4:	4013      	ands	r3, r2
 80032f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	091b      	lsrs	r3, r3, #4
 80032fe:	f003 0201 	and.w	r2, r3, #1
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	4313      	orrs	r3, r2
 800330c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f003 0303 	and.w	r3, r3, #3
 800331c:	2b03      	cmp	r3, #3
 800331e:	d017      	beq.n	8003350 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	2203      	movs	r2, #3
 800332c:	fa02 f303 	lsl.w	r3, r2, r3
 8003330:	43db      	mvns	r3, r3
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	4013      	ands	r3, r2
 8003336:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	689a      	ldr	r2, [r3, #8]
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	005b      	lsls	r3, r3, #1
 8003340:	fa02 f303 	lsl.w	r3, r2, r3
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	4313      	orrs	r3, r2
 8003348:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f003 0303 	and.w	r3, r3, #3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d123      	bne.n	80033a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	08da      	lsrs	r2, r3, #3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	3208      	adds	r2, #8
 8003364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003368:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	f003 0307 	and.w	r3, r3, #7
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	220f      	movs	r2, #15
 8003374:	fa02 f303 	lsl.w	r3, r2, r3
 8003378:	43db      	mvns	r3, r3
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	4013      	ands	r3, r2
 800337e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	691a      	ldr	r2, [r3, #16]
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	f003 0307 	and.w	r3, r3, #7
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	4313      	orrs	r3, r2
 8003394:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	08da      	lsrs	r2, r3, #3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	3208      	adds	r2, #8
 800339e:	69b9      	ldr	r1, [r7, #24]
 80033a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	2203      	movs	r2, #3
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	43db      	mvns	r3, r3
 80033b6:	69ba      	ldr	r2, [r7, #24]
 80033b8:	4013      	ands	r3, r2
 80033ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f003 0203 	and.w	r2, r3, #3
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	fa02 f303 	lsl.w	r3, r2, r3
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f000 80ae 	beq.w	8003542 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033e6:	2300      	movs	r3, #0
 80033e8:	60fb      	str	r3, [r7, #12]
 80033ea:	4b5d      	ldr	r3, [pc, #372]	; (8003560 <HAL_GPIO_Init+0x300>)
 80033ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ee:	4a5c      	ldr	r2, [pc, #368]	; (8003560 <HAL_GPIO_Init+0x300>)
 80033f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033f4:	6453      	str	r3, [r2, #68]	; 0x44
 80033f6:	4b5a      	ldr	r3, [pc, #360]	; (8003560 <HAL_GPIO_Init+0x300>)
 80033f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033fe:	60fb      	str	r3, [r7, #12]
 8003400:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003402:	4a58      	ldr	r2, [pc, #352]	; (8003564 <HAL_GPIO_Init+0x304>)
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	089b      	lsrs	r3, r3, #2
 8003408:	3302      	adds	r3, #2
 800340a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800340e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	f003 0303 	and.w	r3, r3, #3
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	220f      	movs	r2, #15
 800341a:	fa02 f303 	lsl.w	r3, r2, r3
 800341e:	43db      	mvns	r3, r3
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	4013      	ands	r3, r2
 8003424:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a4f      	ldr	r2, [pc, #316]	; (8003568 <HAL_GPIO_Init+0x308>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d025      	beq.n	800347a <HAL_GPIO_Init+0x21a>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a4e      	ldr	r2, [pc, #312]	; (800356c <HAL_GPIO_Init+0x30c>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d01f      	beq.n	8003476 <HAL_GPIO_Init+0x216>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a4d      	ldr	r2, [pc, #308]	; (8003570 <HAL_GPIO_Init+0x310>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d019      	beq.n	8003472 <HAL_GPIO_Init+0x212>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a4c      	ldr	r2, [pc, #304]	; (8003574 <HAL_GPIO_Init+0x314>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d013      	beq.n	800346e <HAL_GPIO_Init+0x20e>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a4b      	ldr	r2, [pc, #300]	; (8003578 <HAL_GPIO_Init+0x318>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d00d      	beq.n	800346a <HAL_GPIO_Init+0x20a>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a4a      	ldr	r2, [pc, #296]	; (800357c <HAL_GPIO_Init+0x31c>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d007      	beq.n	8003466 <HAL_GPIO_Init+0x206>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a49      	ldr	r2, [pc, #292]	; (8003580 <HAL_GPIO_Init+0x320>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d101      	bne.n	8003462 <HAL_GPIO_Init+0x202>
 800345e:	2306      	movs	r3, #6
 8003460:	e00c      	b.n	800347c <HAL_GPIO_Init+0x21c>
 8003462:	2307      	movs	r3, #7
 8003464:	e00a      	b.n	800347c <HAL_GPIO_Init+0x21c>
 8003466:	2305      	movs	r3, #5
 8003468:	e008      	b.n	800347c <HAL_GPIO_Init+0x21c>
 800346a:	2304      	movs	r3, #4
 800346c:	e006      	b.n	800347c <HAL_GPIO_Init+0x21c>
 800346e:	2303      	movs	r3, #3
 8003470:	e004      	b.n	800347c <HAL_GPIO_Init+0x21c>
 8003472:	2302      	movs	r3, #2
 8003474:	e002      	b.n	800347c <HAL_GPIO_Init+0x21c>
 8003476:	2301      	movs	r3, #1
 8003478:	e000      	b.n	800347c <HAL_GPIO_Init+0x21c>
 800347a:	2300      	movs	r3, #0
 800347c:	69fa      	ldr	r2, [r7, #28]
 800347e:	f002 0203 	and.w	r2, r2, #3
 8003482:	0092      	lsls	r2, r2, #2
 8003484:	4093      	lsls	r3, r2
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	4313      	orrs	r3, r2
 800348a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800348c:	4935      	ldr	r1, [pc, #212]	; (8003564 <HAL_GPIO_Init+0x304>)
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	089b      	lsrs	r3, r3, #2
 8003492:	3302      	adds	r3, #2
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800349a:	4b3a      	ldr	r3, [pc, #232]	; (8003584 <HAL_GPIO_Init+0x324>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	43db      	mvns	r3, r3
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	4013      	ands	r3, r2
 80034a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d003      	beq.n	80034be <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80034b6:	69ba      	ldr	r2, [r7, #24]
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034be:	4a31      	ldr	r2, [pc, #196]	; (8003584 <HAL_GPIO_Init+0x324>)
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80034c4:	4b2f      	ldr	r3, [pc, #188]	; (8003584 <HAL_GPIO_Init+0x324>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	43db      	mvns	r3, r3
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	4013      	ands	r3, r2
 80034d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d003      	beq.n	80034e8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034e8:	4a26      	ldr	r2, [pc, #152]	; (8003584 <HAL_GPIO_Init+0x324>)
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034ee:	4b25      	ldr	r3, [pc, #148]	; (8003584 <HAL_GPIO_Init+0x324>)
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	43db      	mvns	r3, r3
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	4013      	ands	r3, r2
 80034fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d003      	beq.n	8003512 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800350a:	69ba      	ldr	r2, [r7, #24]
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	4313      	orrs	r3, r2
 8003510:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003512:	4a1c      	ldr	r2, [pc, #112]	; (8003584 <HAL_GPIO_Init+0x324>)
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003518:	4b1a      	ldr	r3, [pc, #104]	; (8003584 <HAL_GPIO_Init+0x324>)
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	43db      	mvns	r3, r3
 8003522:	69ba      	ldr	r2, [r7, #24]
 8003524:	4013      	ands	r3, r2
 8003526:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d003      	beq.n	800353c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	4313      	orrs	r3, r2
 800353a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800353c:	4a11      	ldr	r2, [pc, #68]	; (8003584 <HAL_GPIO_Init+0x324>)
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	3301      	adds	r3, #1
 8003546:	61fb      	str	r3, [r7, #28]
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	2b0f      	cmp	r3, #15
 800354c:	f67f ae96 	bls.w	800327c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003550:	bf00      	nop
 8003552:	bf00      	nop
 8003554:	3724      	adds	r7, #36	; 0x24
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	40023800 	.word	0x40023800
 8003564:	40013800 	.word	0x40013800
 8003568:	40020000 	.word	0x40020000
 800356c:	40020400 	.word	0x40020400
 8003570:	40020800 	.word	0x40020800
 8003574:	40020c00 	.word	0x40020c00
 8003578:	40021000 	.word	0x40021000
 800357c:	40021400 	.word	0x40021400
 8003580:	40021800 	.word	0x40021800
 8003584:	40013c00 	.word	0x40013c00

08003588 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	460b      	mov	r3, r1
 8003592:	807b      	strh	r3, [r7, #2]
 8003594:	4613      	mov	r3, r2
 8003596:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003598:	787b      	ldrb	r3, [r7, #1]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d003      	beq.n	80035a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800359e:	887a      	ldrh	r2, [r7, #2]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035a4:	e003      	b.n	80035ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035a6:	887b      	ldrh	r3, [r7, #2]
 80035a8:	041a      	lsls	r2, r3, #16
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	619a      	str	r2, [r3, #24]
}
 80035ae:	bf00      	nop
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
	...

080035bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	4603      	mov	r3, r0
 80035c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80035c6:	4b08      	ldr	r3, [pc, #32]	; (80035e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035c8:	695a      	ldr	r2, [r3, #20]
 80035ca:	88fb      	ldrh	r3, [r7, #6]
 80035cc:	4013      	ands	r3, r2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d006      	beq.n	80035e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80035d2:	4a05      	ldr	r2, [pc, #20]	; (80035e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035d4:	88fb      	ldrh	r3, [r7, #6]
 80035d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035d8:	88fb      	ldrh	r3, [r7, #6]
 80035da:	4618      	mov	r0, r3
 80035dc:	f7fe fb2e 	bl	8001c3c <HAL_GPIO_EXTI_Callback>
  }
}
 80035e0:	bf00      	nop
 80035e2:	3708      	adds	r7, #8
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	40013c00 	.word	0x40013c00

080035ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d101      	bne.n	8003600 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e0cc      	b.n	800379a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003600:	4b68      	ldr	r3, [pc, #416]	; (80037a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 030f 	and.w	r3, r3, #15
 8003608:	683a      	ldr	r2, [r7, #0]
 800360a:	429a      	cmp	r2, r3
 800360c:	d90c      	bls.n	8003628 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800360e:	4b65      	ldr	r3, [pc, #404]	; (80037a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003610:	683a      	ldr	r2, [r7, #0]
 8003612:	b2d2      	uxtb	r2, r2
 8003614:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003616:	4b63      	ldr	r3, [pc, #396]	; (80037a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 030f 	and.w	r3, r3, #15
 800361e:	683a      	ldr	r2, [r7, #0]
 8003620:	429a      	cmp	r2, r3
 8003622:	d001      	beq.n	8003628 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e0b8      	b.n	800379a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d020      	beq.n	8003676 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0304 	and.w	r3, r3, #4
 800363c:	2b00      	cmp	r3, #0
 800363e:	d005      	beq.n	800364c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003640:	4b59      	ldr	r3, [pc, #356]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	4a58      	ldr	r2, [pc, #352]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003646:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800364a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0308 	and.w	r3, r3, #8
 8003654:	2b00      	cmp	r3, #0
 8003656:	d005      	beq.n	8003664 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003658:	4b53      	ldr	r3, [pc, #332]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	4a52      	ldr	r2, [pc, #328]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 800365e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003662:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003664:	4b50      	ldr	r3, [pc, #320]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	494d      	ldr	r1, [pc, #308]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003672:	4313      	orrs	r3, r2
 8003674:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	2b00      	cmp	r3, #0
 8003680:	d044      	beq.n	800370c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d107      	bne.n	800369a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800368a:	4b47      	ldr	r3, [pc, #284]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d119      	bne.n	80036ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e07f      	b.n	800379a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d003      	beq.n	80036aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036a6:	2b03      	cmp	r3, #3
 80036a8:	d107      	bne.n	80036ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036aa:	4b3f      	ldr	r3, [pc, #252]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d109      	bne.n	80036ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e06f      	b.n	800379a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ba:	4b3b      	ldr	r3, [pc, #236]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e067      	b.n	800379a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036ca:	4b37      	ldr	r3, [pc, #220]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f023 0203 	bic.w	r2, r3, #3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	4934      	ldr	r1, [pc, #208]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036dc:	f7ff f81c 	bl	8002718 <HAL_GetTick>
 80036e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036e2:	e00a      	b.n	80036fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036e4:	f7ff f818 	bl	8002718 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e04f      	b.n	800379a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036fa:	4b2b      	ldr	r3, [pc, #172]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f003 020c 	and.w	r2, r3, #12
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	429a      	cmp	r2, r3
 800370a:	d1eb      	bne.n	80036e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800370c:	4b25      	ldr	r3, [pc, #148]	; (80037a4 <HAL_RCC_ClockConfig+0x1b8>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 030f 	and.w	r3, r3, #15
 8003714:	683a      	ldr	r2, [r7, #0]
 8003716:	429a      	cmp	r2, r3
 8003718:	d20c      	bcs.n	8003734 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800371a:	4b22      	ldr	r3, [pc, #136]	; (80037a4 <HAL_RCC_ClockConfig+0x1b8>)
 800371c:	683a      	ldr	r2, [r7, #0]
 800371e:	b2d2      	uxtb	r2, r2
 8003720:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003722:	4b20      	ldr	r3, [pc, #128]	; (80037a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 030f 	and.w	r3, r3, #15
 800372a:	683a      	ldr	r2, [r7, #0]
 800372c:	429a      	cmp	r2, r3
 800372e:	d001      	beq.n	8003734 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e032      	b.n	800379a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0304 	and.w	r3, r3, #4
 800373c:	2b00      	cmp	r3, #0
 800373e:	d008      	beq.n	8003752 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003740:	4b19      	ldr	r3, [pc, #100]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	4916      	ldr	r1, [pc, #88]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 800374e:	4313      	orrs	r3, r2
 8003750:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0308 	and.w	r3, r3, #8
 800375a:	2b00      	cmp	r3, #0
 800375c:	d009      	beq.n	8003772 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800375e:	4b12      	ldr	r3, [pc, #72]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	00db      	lsls	r3, r3, #3
 800376c:	490e      	ldr	r1, [pc, #56]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 800376e:	4313      	orrs	r3, r2
 8003770:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003772:	f000 f855 	bl	8003820 <HAL_RCC_GetSysClockFreq>
 8003776:	4602      	mov	r2, r0
 8003778:	4b0b      	ldr	r3, [pc, #44]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	091b      	lsrs	r3, r3, #4
 800377e:	f003 030f 	and.w	r3, r3, #15
 8003782:	490a      	ldr	r1, [pc, #40]	; (80037ac <HAL_RCC_ClockConfig+0x1c0>)
 8003784:	5ccb      	ldrb	r3, [r1, r3]
 8003786:	fa22 f303 	lsr.w	r3, r2, r3
 800378a:	4a09      	ldr	r2, [pc, #36]	; (80037b0 <HAL_RCC_ClockConfig+0x1c4>)
 800378c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800378e:	4b09      	ldr	r3, [pc, #36]	; (80037b4 <HAL_RCC_ClockConfig+0x1c8>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4618      	mov	r0, r3
 8003794:	f7fe ff7c 	bl	8002690 <HAL_InitTick>

  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3710      	adds	r7, #16
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	40023c00 	.word	0x40023c00
 80037a8:	40023800 	.word	0x40023800
 80037ac:	0800900c 	.word	0x0800900c
 80037b0:	20000014 	.word	0x20000014
 80037b4:	20000018 	.word	0x20000018

080037b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037b8:	b480      	push	{r7}
 80037ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037bc:	4b03      	ldr	r3, [pc, #12]	; (80037cc <HAL_RCC_GetHCLKFreq+0x14>)
 80037be:	681b      	ldr	r3, [r3, #0]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	20000014 	.word	0x20000014

080037d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037d4:	f7ff fff0 	bl	80037b8 <HAL_RCC_GetHCLKFreq>
 80037d8:	4602      	mov	r2, r0
 80037da:	4b05      	ldr	r3, [pc, #20]	; (80037f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	0a9b      	lsrs	r3, r3, #10
 80037e0:	f003 0307 	and.w	r3, r3, #7
 80037e4:	4903      	ldr	r1, [pc, #12]	; (80037f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037e6:	5ccb      	ldrb	r3, [r1, r3]
 80037e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	40023800 	.word	0x40023800
 80037f4:	0800901c 	.word	0x0800901c

080037f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037fc:	f7ff ffdc 	bl	80037b8 <HAL_RCC_GetHCLKFreq>
 8003800:	4602      	mov	r2, r0
 8003802:	4b05      	ldr	r3, [pc, #20]	; (8003818 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	0b5b      	lsrs	r3, r3, #13
 8003808:	f003 0307 	and.w	r3, r3, #7
 800380c:	4903      	ldr	r1, [pc, #12]	; (800381c <HAL_RCC_GetPCLK2Freq+0x24>)
 800380e:	5ccb      	ldrb	r3, [r1, r3]
 8003810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003814:	4618      	mov	r0, r3
 8003816:	bd80      	pop	{r7, pc}
 8003818:	40023800 	.word	0x40023800
 800381c:	0800901c 	.word	0x0800901c

08003820 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003820:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003824:	b088      	sub	sp, #32
 8003826:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003828:	2300      	movs	r3, #0
 800382a:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 800382c:	2300      	movs	r3, #0
 800382e:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8003830:	2300      	movs	r3, #0
 8003832:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8003834:	2300      	movs	r3, #0
 8003836:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8003838:	2300      	movs	r3, #0
 800383a:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800383c:	4bce      	ldr	r3, [pc, #824]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x358>)
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f003 030c 	and.w	r3, r3, #12
 8003844:	2b0c      	cmp	r3, #12
 8003846:	f200 818d 	bhi.w	8003b64 <HAL_RCC_GetSysClockFreq+0x344>
 800384a:	a201      	add	r2, pc, #4	; (adr r2, 8003850 <HAL_RCC_GetSysClockFreq+0x30>)
 800384c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003850:	08003885 	.word	0x08003885
 8003854:	08003b65 	.word	0x08003b65
 8003858:	08003b65 	.word	0x08003b65
 800385c:	08003b65 	.word	0x08003b65
 8003860:	0800388b 	.word	0x0800388b
 8003864:	08003b65 	.word	0x08003b65
 8003868:	08003b65 	.word	0x08003b65
 800386c:	08003b65 	.word	0x08003b65
 8003870:	08003891 	.word	0x08003891
 8003874:	08003b65 	.word	0x08003b65
 8003878:	08003b65 	.word	0x08003b65
 800387c:	08003b65 	.word	0x08003b65
 8003880:	08003a05 	.word	0x08003a05
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003884:	4bbd      	ldr	r3, [pc, #756]	; (8003b7c <HAL_RCC_GetSysClockFreq+0x35c>)
 8003886:	61bb      	str	r3, [r7, #24]
       break;
 8003888:	e16f      	b.n	8003b6a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800388a:	4bbd      	ldr	r3, [pc, #756]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x360>)
 800388c:	61bb      	str	r3, [r7, #24]
      break;
 800388e:	e16c      	b.n	8003b6a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003890:	4bb9      	ldr	r3, [pc, #740]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x358>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003898:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800389a:	4bb7      	ldr	r3, [pc, #732]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x358>)
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d053      	beq.n	800394e <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038a6:	4bb4      	ldr	r3, [pc, #720]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x358>)
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	099b      	lsrs	r3, r3, #6
 80038ac:	461a      	mov	r2, r3
 80038ae:	f04f 0300 	mov.w	r3, #0
 80038b2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80038b6:	f04f 0100 	mov.w	r1, #0
 80038ba:	ea02 0400 	and.w	r4, r2, r0
 80038be:	603c      	str	r4, [r7, #0]
 80038c0:	400b      	ands	r3, r1
 80038c2:	607b      	str	r3, [r7, #4]
 80038c4:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038c8:	4620      	mov	r0, r4
 80038ca:	4629      	mov	r1, r5
 80038cc:	f04f 0200 	mov.w	r2, #0
 80038d0:	f04f 0300 	mov.w	r3, #0
 80038d4:	014b      	lsls	r3, r1, #5
 80038d6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80038da:	0142      	lsls	r2, r0, #5
 80038dc:	4610      	mov	r0, r2
 80038de:	4619      	mov	r1, r3
 80038e0:	4623      	mov	r3, r4
 80038e2:	1ac0      	subs	r0, r0, r3
 80038e4:	462b      	mov	r3, r5
 80038e6:	eb61 0103 	sbc.w	r1, r1, r3
 80038ea:	f04f 0200 	mov.w	r2, #0
 80038ee:	f04f 0300 	mov.w	r3, #0
 80038f2:	018b      	lsls	r3, r1, #6
 80038f4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80038f8:	0182      	lsls	r2, r0, #6
 80038fa:	1a12      	subs	r2, r2, r0
 80038fc:	eb63 0301 	sbc.w	r3, r3, r1
 8003900:	f04f 0000 	mov.w	r0, #0
 8003904:	f04f 0100 	mov.w	r1, #0
 8003908:	00d9      	lsls	r1, r3, #3
 800390a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800390e:	00d0      	lsls	r0, r2, #3
 8003910:	4602      	mov	r2, r0
 8003912:	460b      	mov	r3, r1
 8003914:	4621      	mov	r1, r4
 8003916:	1852      	adds	r2, r2, r1
 8003918:	4629      	mov	r1, r5
 800391a:	eb43 0101 	adc.w	r1, r3, r1
 800391e:	460b      	mov	r3, r1
 8003920:	f04f 0000 	mov.w	r0, #0
 8003924:	f04f 0100 	mov.w	r1, #0
 8003928:	0259      	lsls	r1, r3, #9
 800392a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800392e:	0250      	lsls	r0, r2, #9
 8003930:	4602      	mov	r2, r0
 8003932:	460b      	mov	r3, r1
 8003934:	4610      	mov	r0, r2
 8003936:	4619      	mov	r1, r3
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	461a      	mov	r2, r3
 800393c:	f04f 0300 	mov.w	r3, #0
 8003940:	f7fd f9a2 	bl	8000c88 <__aeabi_uldivmod>
 8003944:	4602      	mov	r2, r0
 8003946:	460b      	mov	r3, r1
 8003948:	4613      	mov	r3, r2
 800394a:	61fb      	str	r3, [r7, #28]
 800394c:	e04c      	b.n	80039e8 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800394e:	4b8a      	ldr	r3, [pc, #552]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x358>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	099b      	lsrs	r3, r3, #6
 8003954:	461a      	mov	r2, r3
 8003956:	f04f 0300 	mov.w	r3, #0
 800395a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800395e:	f04f 0100 	mov.w	r1, #0
 8003962:	ea02 0a00 	and.w	sl, r2, r0
 8003966:	ea03 0b01 	and.w	fp, r3, r1
 800396a:	4650      	mov	r0, sl
 800396c:	4659      	mov	r1, fp
 800396e:	f04f 0200 	mov.w	r2, #0
 8003972:	f04f 0300 	mov.w	r3, #0
 8003976:	014b      	lsls	r3, r1, #5
 8003978:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800397c:	0142      	lsls	r2, r0, #5
 800397e:	4610      	mov	r0, r2
 8003980:	4619      	mov	r1, r3
 8003982:	ebb0 000a 	subs.w	r0, r0, sl
 8003986:	eb61 010b 	sbc.w	r1, r1, fp
 800398a:	f04f 0200 	mov.w	r2, #0
 800398e:	f04f 0300 	mov.w	r3, #0
 8003992:	018b      	lsls	r3, r1, #6
 8003994:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003998:	0182      	lsls	r2, r0, #6
 800399a:	1a12      	subs	r2, r2, r0
 800399c:	eb63 0301 	sbc.w	r3, r3, r1
 80039a0:	f04f 0000 	mov.w	r0, #0
 80039a4:	f04f 0100 	mov.w	r1, #0
 80039a8:	00d9      	lsls	r1, r3, #3
 80039aa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80039ae:	00d0      	lsls	r0, r2, #3
 80039b0:	4602      	mov	r2, r0
 80039b2:	460b      	mov	r3, r1
 80039b4:	eb12 020a 	adds.w	r2, r2, sl
 80039b8:	eb43 030b 	adc.w	r3, r3, fp
 80039bc:	f04f 0000 	mov.w	r0, #0
 80039c0:	f04f 0100 	mov.w	r1, #0
 80039c4:	0299      	lsls	r1, r3, #10
 80039c6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80039ca:	0290      	lsls	r0, r2, #10
 80039cc:	4602      	mov	r2, r0
 80039ce:	460b      	mov	r3, r1
 80039d0:	4610      	mov	r0, r2
 80039d2:	4619      	mov	r1, r3
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	461a      	mov	r2, r3
 80039d8:	f04f 0300 	mov.w	r3, #0
 80039dc:	f7fd f954 	bl	8000c88 <__aeabi_uldivmod>
 80039e0:	4602      	mov	r2, r0
 80039e2:	460b      	mov	r3, r1
 80039e4:	4613      	mov	r3, r2
 80039e6:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039e8:	4b63      	ldr	r3, [pc, #396]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x358>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	0c1b      	lsrs	r3, r3, #16
 80039ee:	f003 0303 	and.w	r3, r3, #3
 80039f2:	3301      	adds	r3, #1
 80039f4:	005b      	lsls	r3, r3, #1
 80039f6:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80039f8:	69fa      	ldr	r2, [r7, #28]
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a00:	61bb      	str	r3, [r7, #24]
      break;
 8003a02:	e0b2      	b.n	8003b6a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a04:	4b5c      	ldr	r3, [pc, #368]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x358>)
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a0c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a0e:	4b5a      	ldr	r3, [pc, #360]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x358>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d04d      	beq.n	8003ab6 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a1a:	4b57      	ldr	r3, [pc, #348]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x358>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	099b      	lsrs	r3, r3, #6
 8003a20:	461a      	mov	r2, r3
 8003a22:	f04f 0300 	mov.w	r3, #0
 8003a26:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003a2a:	f04f 0100 	mov.w	r1, #0
 8003a2e:	ea02 0800 	and.w	r8, r2, r0
 8003a32:	ea03 0901 	and.w	r9, r3, r1
 8003a36:	4640      	mov	r0, r8
 8003a38:	4649      	mov	r1, r9
 8003a3a:	f04f 0200 	mov.w	r2, #0
 8003a3e:	f04f 0300 	mov.w	r3, #0
 8003a42:	014b      	lsls	r3, r1, #5
 8003a44:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003a48:	0142      	lsls	r2, r0, #5
 8003a4a:	4610      	mov	r0, r2
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	ebb0 0008 	subs.w	r0, r0, r8
 8003a52:	eb61 0109 	sbc.w	r1, r1, r9
 8003a56:	f04f 0200 	mov.w	r2, #0
 8003a5a:	f04f 0300 	mov.w	r3, #0
 8003a5e:	018b      	lsls	r3, r1, #6
 8003a60:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003a64:	0182      	lsls	r2, r0, #6
 8003a66:	1a12      	subs	r2, r2, r0
 8003a68:	eb63 0301 	sbc.w	r3, r3, r1
 8003a6c:	f04f 0000 	mov.w	r0, #0
 8003a70:	f04f 0100 	mov.w	r1, #0
 8003a74:	00d9      	lsls	r1, r3, #3
 8003a76:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a7a:	00d0      	lsls	r0, r2, #3
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	460b      	mov	r3, r1
 8003a80:	eb12 0208 	adds.w	r2, r2, r8
 8003a84:	eb43 0309 	adc.w	r3, r3, r9
 8003a88:	f04f 0000 	mov.w	r0, #0
 8003a8c:	f04f 0100 	mov.w	r1, #0
 8003a90:	0259      	lsls	r1, r3, #9
 8003a92:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003a96:	0250      	lsls	r0, r2, #9
 8003a98:	4602      	mov	r2, r0
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	4610      	mov	r0, r2
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	f04f 0300 	mov.w	r3, #0
 8003aa8:	f7fd f8ee 	bl	8000c88 <__aeabi_uldivmod>
 8003aac:	4602      	mov	r2, r0
 8003aae:	460b      	mov	r3, r1
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	61fb      	str	r3, [r7, #28]
 8003ab4:	e04a      	b.n	8003b4c <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ab6:	4b30      	ldr	r3, [pc, #192]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x358>)
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	099b      	lsrs	r3, r3, #6
 8003abc:	461a      	mov	r2, r3
 8003abe:	f04f 0300 	mov.w	r3, #0
 8003ac2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003ac6:	f04f 0100 	mov.w	r1, #0
 8003aca:	ea02 0400 	and.w	r4, r2, r0
 8003ace:	ea03 0501 	and.w	r5, r3, r1
 8003ad2:	4620      	mov	r0, r4
 8003ad4:	4629      	mov	r1, r5
 8003ad6:	f04f 0200 	mov.w	r2, #0
 8003ada:	f04f 0300 	mov.w	r3, #0
 8003ade:	014b      	lsls	r3, r1, #5
 8003ae0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003ae4:	0142      	lsls	r2, r0, #5
 8003ae6:	4610      	mov	r0, r2
 8003ae8:	4619      	mov	r1, r3
 8003aea:	1b00      	subs	r0, r0, r4
 8003aec:	eb61 0105 	sbc.w	r1, r1, r5
 8003af0:	f04f 0200 	mov.w	r2, #0
 8003af4:	f04f 0300 	mov.w	r3, #0
 8003af8:	018b      	lsls	r3, r1, #6
 8003afa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003afe:	0182      	lsls	r2, r0, #6
 8003b00:	1a12      	subs	r2, r2, r0
 8003b02:	eb63 0301 	sbc.w	r3, r3, r1
 8003b06:	f04f 0000 	mov.w	r0, #0
 8003b0a:	f04f 0100 	mov.w	r1, #0
 8003b0e:	00d9      	lsls	r1, r3, #3
 8003b10:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b14:	00d0      	lsls	r0, r2, #3
 8003b16:	4602      	mov	r2, r0
 8003b18:	460b      	mov	r3, r1
 8003b1a:	1912      	adds	r2, r2, r4
 8003b1c:	eb45 0303 	adc.w	r3, r5, r3
 8003b20:	f04f 0000 	mov.w	r0, #0
 8003b24:	f04f 0100 	mov.w	r1, #0
 8003b28:	0299      	lsls	r1, r3, #10
 8003b2a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003b2e:	0290      	lsls	r0, r2, #10
 8003b30:	4602      	mov	r2, r0
 8003b32:	460b      	mov	r3, r1
 8003b34:	4610      	mov	r0, r2
 8003b36:	4619      	mov	r1, r3
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	f04f 0300 	mov.w	r3, #0
 8003b40:	f7fd f8a2 	bl	8000c88 <__aeabi_uldivmod>
 8003b44:	4602      	mov	r2, r0
 8003b46:	460b      	mov	r3, r1
 8003b48:	4613      	mov	r3, r2
 8003b4a:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003b4c:	4b0a      	ldr	r3, [pc, #40]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x358>)
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	0f1b      	lsrs	r3, r3, #28
 8003b52:	f003 0307 	and.w	r3, r3, #7
 8003b56:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8003b58:	69fa      	ldr	r2, [r7, #28]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b60:	61bb      	str	r3, [r7, #24]
      break;
 8003b62:	e002      	b.n	8003b6a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b64:	4b05      	ldr	r3, [pc, #20]	; (8003b7c <HAL_RCC_GetSysClockFreq+0x35c>)
 8003b66:	61bb      	str	r3, [r7, #24]
      break;
 8003b68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b6a:	69bb      	ldr	r3, [r7, #24]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3720      	adds	r7, #32
 8003b70:	46bd      	mov	sp, r7
 8003b72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b76:	bf00      	nop
 8003b78:	40023800 	.word	0x40023800
 8003b7c:	00f42400 	.word	0x00f42400
 8003b80:	007a1200 	.word	0x007a1200

08003b84 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b086      	sub	sp, #24
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d101      	bne.n	8003b96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e28d      	b.n	80040b2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f000 8083 	beq.w	8003caa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003ba4:	4b94      	ldr	r3, [pc, #592]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f003 030c 	and.w	r3, r3, #12
 8003bac:	2b04      	cmp	r3, #4
 8003bae:	d019      	beq.n	8003be4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003bb0:	4b91      	ldr	r3, [pc, #580]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003bb8:	2b08      	cmp	r3, #8
 8003bba:	d106      	bne.n	8003bca <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003bbc:	4b8e      	ldr	r3, [pc, #568]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bc8:	d00c      	beq.n	8003be4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bca:	4b8b      	ldr	r3, [pc, #556]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003bd2:	2b0c      	cmp	r3, #12
 8003bd4:	d112      	bne.n	8003bfc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bd6:	4b88      	ldr	r3, [pc, #544]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003be2:	d10b      	bne.n	8003bfc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003be4:	4b84      	ldr	r3, [pc, #528]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d05b      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x124>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d157      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e25a      	b.n	80040b2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c04:	d106      	bne.n	8003c14 <HAL_RCC_OscConfig+0x90>
 8003c06:	4b7c      	ldr	r3, [pc, #496]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a7b      	ldr	r2, [pc, #492]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c10:	6013      	str	r3, [r2, #0]
 8003c12:	e01d      	b.n	8003c50 <HAL_RCC_OscConfig+0xcc>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c1c:	d10c      	bne.n	8003c38 <HAL_RCC_OscConfig+0xb4>
 8003c1e:	4b76      	ldr	r3, [pc, #472]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a75      	ldr	r2, [pc, #468]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003c24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c28:	6013      	str	r3, [r2, #0]
 8003c2a:	4b73      	ldr	r3, [pc, #460]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a72      	ldr	r2, [pc, #456]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c34:	6013      	str	r3, [r2, #0]
 8003c36:	e00b      	b.n	8003c50 <HAL_RCC_OscConfig+0xcc>
 8003c38:	4b6f      	ldr	r3, [pc, #444]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a6e      	ldr	r2, [pc, #440]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003c3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c42:	6013      	str	r3, [r2, #0]
 8003c44:	4b6c      	ldr	r3, [pc, #432]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a6b      	ldr	r2, [pc, #428]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003c4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d013      	beq.n	8003c80 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c58:	f7fe fd5e 	bl	8002718 <HAL_GetTick>
 8003c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c5e:	e008      	b.n	8003c72 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c60:	f7fe fd5a 	bl	8002718 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	2b64      	cmp	r3, #100	; 0x64
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e21f      	b.n	80040b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c72:	4b61      	ldr	r3, [pc, #388]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d0f0      	beq.n	8003c60 <HAL_RCC_OscConfig+0xdc>
 8003c7e:	e014      	b.n	8003caa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c80:	f7fe fd4a 	bl	8002718 <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c86:	e008      	b.n	8003c9a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c88:	f7fe fd46 	bl	8002718 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b64      	cmp	r3, #100	; 0x64
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e20b      	b.n	80040b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c9a:	4b57      	ldr	r3, [pc, #348]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1f0      	bne.n	8003c88 <HAL_RCC_OscConfig+0x104>
 8003ca6:	e000      	b.n	8003caa <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ca8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d06f      	beq.n	8003d96 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003cb6:	4b50      	ldr	r3, [pc, #320]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f003 030c 	and.w	r3, r3, #12
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d017      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003cc2:	4b4d      	ldr	r3, [pc, #308]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003cca:	2b08      	cmp	r3, #8
 8003ccc:	d105      	bne.n	8003cda <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003cce:	4b4a      	ldr	r3, [pc, #296]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00b      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cda:	4b47      	ldr	r3, [pc, #284]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003ce2:	2b0c      	cmp	r3, #12
 8003ce4:	d11c      	bne.n	8003d20 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ce6:	4b44      	ldr	r3, [pc, #272]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d116      	bne.n	8003d20 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cf2:	4b41      	ldr	r3, [pc, #260]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d005      	beq.n	8003d0a <HAL_RCC_OscConfig+0x186>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d001      	beq.n	8003d0a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e1d3      	b.n	80040b2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d0a:	4b3b      	ldr	r3, [pc, #236]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	4937      	ldr	r1, [pc, #220]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d1e:	e03a      	b.n	8003d96 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d020      	beq.n	8003d6a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d28:	4b34      	ldr	r3, [pc, #208]	; (8003dfc <HAL_RCC_OscConfig+0x278>)
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2e:	f7fe fcf3 	bl	8002718 <HAL_GetTick>
 8003d32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d34:	e008      	b.n	8003d48 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d36:	f7fe fcef 	bl	8002718 <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d901      	bls.n	8003d48 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e1b4      	b.n	80040b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d48:	4b2b      	ldr	r3, [pc, #172]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d0f0      	beq.n	8003d36 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d54:	4b28      	ldr	r3, [pc, #160]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	00db      	lsls	r3, r3, #3
 8003d62:	4925      	ldr	r1, [pc, #148]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	600b      	str	r3, [r1, #0]
 8003d68:	e015      	b.n	8003d96 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d6a:	4b24      	ldr	r3, [pc, #144]	; (8003dfc <HAL_RCC_OscConfig+0x278>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d70:	f7fe fcd2 	bl	8002718 <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d78:	f7fe fcce 	bl	8002718 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e193      	b.n	80040b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d8a:	4b1b      	ldr	r3, [pc, #108]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1f0      	bne.n	8003d78 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0308 	and.w	r3, r3, #8
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d036      	beq.n	8003e10 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d016      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003daa:	4b15      	ldr	r3, [pc, #84]	; (8003e00 <HAL_RCC_OscConfig+0x27c>)
 8003dac:	2201      	movs	r2, #1
 8003dae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003db0:	f7fe fcb2 	bl	8002718 <HAL_GetTick>
 8003db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003db6:	e008      	b.n	8003dca <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003db8:	f7fe fcae 	bl	8002718 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d901      	bls.n	8003dca <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e173      	b.n	80040b2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dca:	4b0b      	ldr	r3, [pc, #44]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003dcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d0f0      	beq.n	8003db8 <HAL_RCC_OscConfig+0x234>
 8003dd6:	e01b      	b.n	8003e10 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dd8:	4b09      	ldr	r3, [pc, #36]	; (8003e00 <HAL_RCC_OscConfig+0x27c>)
 8003dda:	2200      	movs	r2, #0
 8003ddc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dde:	f7fe fc9b 	bl	8002718 <HAL_GetTick>
 8003de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003de4:	e00e      	b.n	8003e04 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003de6:	f7fe fc97 	bl	8002718 <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d907      	bls.n	8003e04 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e15c      	b.n	80040b2 <HAL_RCC_OscConfig+0x52e>
 8003df8:	40023800 	.word	0x40023800
 8003dfc:	42470000 	.word	0x42470000
 8003e00:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e04:	4b8a      	ldr	r3, [pc, #552]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003e06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1ea      	bne.n	8003de6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0304 	and.w	r3, r3, #4
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	f000 8097 	beq.w	8003f4c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e22:	4b83      	ldr	r3, [pc, #524]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10f      	bne.n	8003e4e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e2e:	2300      	movs	r3, #0
 8003e30:	60bb      	str	r3, [r7, #8]
 8003e32:	4b7f      	ldr	r3, [pc, #508]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e36:	4a7e      	ldr	r2, [pc, #504]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003e38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e3e:	4b7c      	ldr	r3, [pc, #496]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e46:	60bb      	str	r3, [r7, #8]
 8003e48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e4e:	4b79      	ldr	r3, [pc, #484]	; (8004034 <HAL_RCC_OscConfig+0x4b0>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d118      	bne.n	8003e8c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e5a:	4b76      	ldr	r3, [pc, #472]	; (8004034 <HAL_RCC_OscConfig+0x4b0>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a75      	ldr	r2, [pc, #468]	; (8004034 <HAL_RCC_OscConfig+0x4b0>)
 8003e60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e66:	f7fe fc57 	bl	8002718 <HAL_GetTick>
 8003e6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e6c:	e008      	b.n	8003e80 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e6e:	f7fe fc53 	bl	8002718 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d901      	bls.n	8003e80 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e118      	b.n	80040b2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e80:	4b6c      	ldr	r3, [pc, #432]	; (8004034 <HAL_RCC_OscConfig+0x4b0>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d0f0      	beq.n	8003e6e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d106      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x31e>
 8003e94:	4b66      	ldr	r3, [pc, #408]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e98:	4a65      	ldr	r2, [pc, #404]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003e9a:	f043 0301 	orr.w	r3, r3, #1
 8003e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8003ea0:	e01c      	b.n	8003edc <HAL_RCC_OscConfig+0x358>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	2b05      	cmp	r3, #5
 8003ea8:	d10c      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x340>
 8003eaa:	4b61      	ldr	r3, [pc, #388]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eae:	4a60      	ldr	r2, [pc, #384]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003eb0:	f043 0304 	orr.w	r3, r3, #4
 8003eb4:	6713      	str	r3, [r2, #112]	; 0x70
 8003eb6:	4b5e      	ldr	r3, [pc, #376]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eba:	4a5d      	ldr	r2, [pc, #372]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003ebc:	f043 0301 	orr.w	r3, r3, #1
 8003ec0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ec2:	e00b      	b.n	8003edc <HAL_RCC_OscConfig+0x358>
 8003ec4:	4b5a      	ldr	r3, [pc, #360]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec8:	4a59      	ldr	r2, [pc, #356]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003eca:	f023 0301 	bic.w	r3, r3, #1
 8003ece:	6713      	str	r3, [r2, #112]	; 0x70
 8003ed0:	4b57      	ldr	r3, [pc, #348]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed4:	4a56      	ldr	r2, [pc, #344]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003ed6:	f023 0304 	bic.w	r3, r3, #4
 8003eda:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d015      	beq.n	8003f10 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee4:	f7fe fc18 	bl	8002718 <HAL_GetTick>
 8003ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eea:	e00a      	b.n	8003f02 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eec:	f7fe fc14 	bl	8002718 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e0d7      	b.n	80040b2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f02:	4b4b      	ldr	r3, [pc, #300]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d0ee      	beq.n	8003eec <HAL_RCC_OscConfig+0x368>
 8003f0e:	e014      	b.n	8003f3a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f10:	f7fe fc02 	bl	8002718 <HAL_GetTick>
 8003f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f16:	e00a      	b.n	8003f2e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f18:	f7fe fbfe 	bl	8002718 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d901      	bls.n	8003f2e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e0c1      	b.n	80040b2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f2e:	4b40      	ldr	r3, [pc, #256]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1ee      	bne.n	8003f18 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f3a:	7dfb      	ldrb	r3, [r7, #23]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d105      	bne.n	8003f4c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f40:	4b3b      	ldr	r3, [pc, #236]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f44:	4a3a      	ldr	r2, [pc, #232]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003f46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f4a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f000 80ad 	beq.w	80040b0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f56:	4b36      	ldr	r3, [pc, #216]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f003 030c 	and.w	r3, r3, #12
 8003f5e:	2b08      	cmp	r3, #8
 8003f60:	d060      	beq.n	8004024 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d145      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f6a:	4b33      	ldr	r3, [pc, #204]	; (8004038 <HAL_RCC_OscConfig+0x4b4>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f70:	f7fe fbd2 	bl	8002718 <HAL_GetTick>
 8003f74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f76:	e008      	b.n	8003f8a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f78:	f7fe fbce 	bl	8002718 <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d901      	bls.n	8003f8a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e093      	b.n	80040b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f8a:	4b29      	ldr	r3, [pc, #164]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1f0      	bne.n	8003f78 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	69da      	ldr	r2, [r3, #28]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa4:	019b      	lsls	r3, r3, #6
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fac:	085b      	lsrs	r3, r3, #1
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	041b      	lsls	r3, r3, #16
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb8:	061b      	lsls	r3, r3, #24
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc0:	071b      	lsls	r3, r3, #28
 8003fc2:	491b      	ldr	r1, [pc, #108]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fc8:	4b1b      	ldr	r3, [pc, #108]	; (8004038 <HAL_RCC_OscConfig+0x4b4>)
 8003fca:	2201      	movs	r2, #1
 8003fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fce:	f7fe fba3 	bl	8002718 <HAL_GetTick>
 8003fd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fd4:	e008      	b.n	8003fe8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fd6:	f7fe fb9f 	bl	8002718 <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d901      	bls.n	8003fe8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	e064      	b.n	80040b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fe8:	4b11      	ldr	r3, [pc, #68]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d0f0      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x452>
 8003ff4:	e05c      	b.n	80040b0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ff6:	4b10      	ldr	r3, [pc, #64]	; (8004038 <HAL_RCC_OscConfig+0x4b4>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ffc:	f7fe fb8c 	bl	8002718 <HAL_GetTick>
 8004000:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004002:	e008      	b.n	8004016 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004004:	f7fe fb88 	bl	8002718 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	2b02      	cmp	r3, #2
 8004010:	d901      	bls.n	8004016 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e04d      	b.n	80040b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004016:	4b06      	ldr	r3, [pc, #24]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1f0      	bne.n	8004004 <HAL_RCC_OscConfig+0x480>
 8004022:	e045      	b.n	80040b0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d107      	bne.n	800403c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e040      	b.n	80040b2 <HAL_RCC_OscConfig+0x52e>
 8004030:	40023800 	.word	0x40023800
 8004034:	40007000 	.word	0x40007000
 8004038:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800403c:	4b1f      	ldr	r3, [pc, #124]	; (80040bc <HAL_RCC_OscConfig+0x538>)
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d030      	beq.n	80040ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004054:	429a      	cmp	r2, r3
 8004056:	d129      	bne.n	80040ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004062:	429a      	cmp	r2, r3
 8004064:	d122      	bne.n	80040ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800406c:	4013      	ands	r3, r2
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004072:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004074:	4293      	cmp	r3, r2
 8004076:	d119      	bne.n	80040ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004082:	085b      	lsrs	r3, r3, #1
 8004084:	3b01      	subs	r3, #1
 8004086:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004088:	429a      	cmp	r2, r3
 800408a:	d10f      	bne.n	80040ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004096:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004098:	429a      	cmp	r2, r3
 800409a:	d107      	bne.n	80040ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d001      	beq.n	80040b0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e000      	b.n	80040b2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3718      	adds	r7, #24
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	40023800 	.word	0x40023800

080040c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e041      	b.n	8004156 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d106      	bne.n	80040ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f7fe f91a 	bl	8002320 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2202      	movs	r2, #2
 80040f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	3304      	adds	r3, #4
 80040fc:	4619      	mov	r1, r3
 80040fe:	4610      	mov	r0, r2
 8004100:	f000 fdae 	bl	8004c60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3708      	adds	r7, #8
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
	...

08004160 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800416e:	b2db      	uxtb	r3, r3
 8004170:	2b01      	cmp	r3, #1
 8004172:	d001      	beq.n	8004178 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e04e      	b.n	8004216 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2202      	movs	r2, #2
 800417c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68da      	ldr	r2, [r3, #12]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f042 0201 	orr.w	r2, r2, #1
 800418e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a23      	ldr	r2, [pc, #140]	; (8004224 <HAL_TIM_Base_Start_IT+0xc4>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d022      	beq.n	80041e0 <HAL_TIM_Base_Start_IT+0x80>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041a2:	d01d      	beq.n	80041e0 <HAL_TIM_Base_Start_IT+0x80>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a1f      	ldr	r2, [pc, #124]	; (8004228 <HAL_TIM_Base_Start_IT+0xc8>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d018      	beq.n	80041e0 <HAL_TIM_Base_Start_IT+0x80>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a1e      	ldr	r2, [pc, #120]	; (800422c <HAL_TIM_Base_Start_IT+0xcc>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d013      	beq.n	80041e0 <HAL_TIM_Base_Start_IT+0x80>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a1c      	ldr	r2, [pc, #112]	; (8004230 <HAL_TIM_Base_Start_IT+0xd0>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d00e      	beq.n	80041e0 <HAL_TIM_Base_Start_IT+0x80>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a1b      	ldr	r2, [pc, #108]	; (8004234 <HAL_TIM_Base_Start_IT+0xd4>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d009      	beq.n	80041e0 <HAL_TIM_Base_Start_IT+0x80>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a19      	ldr	r2, [pc, #100]	; (8004238 <HAL_TIM_Base_Start_IT+0xd8>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d004      	beq.n	80041e0 <HAL_TIM_Base_Start_IT+0x80>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a18      	ldr	r2, [pc, #96]	; (800423c <HAL_TIM_Base_Start_IT+0xdc>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d111      	bne.n	8004204 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f003 0307 	and.w	r3, r3, #7
 80041ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2b06      	cmp	r3, #6
 80041f0:	d010      	beq.n	8004214 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f042 0201 	orr.w	r2, r2, #1
 8004200:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004202:	e007      	b.n	8004214 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f042 0201 	orr.w	r2, r2, #1
 8004212:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	3714      	adds	r7, #20
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	40010000 	.word	0x40010000
 8004228:	40000400 	.word	0x40000400
 800422c:	40000800 	.word	0x40000800
 8004230:	40000c00 	.word	0x40000c00
 8004234:	40010400 	.word	0x40010400
 8004238:	40014000 	.word	0x40014000
 800423c:	40001800 	.word	0x40001800

08004240 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d101      	bne.n	8004252 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e041      	b.n	80042d6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b00      	cmp	r3, #0
 800425c:	d106      	bne.n	800426c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 f839 	bl	80042de <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2202      	movs	r2, #2
 8004270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	3304      	adds	r3, #4
 800427c:	4619      	mov	r1, r3
 800427e:	4610      	mov	r0, r2
 8004280:	f000 fcee 	bl	8004c60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3708      	adds	r7, #8
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80042de:	b480      	push	{r7}
 80042e0:	b083      	sub	sp, #12
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80042e6:	bf00      	nop
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
	...

080042f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d109      	bne.n	8004318 <HAL_TIM_PWM_Start+0x24>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800430a:	b2db      	uxtb	r3, r3
 800430c:	2b01      	cmp	r3, #1
 800430e:	bf14      	ite	ne
 8004310:	2301      	movne	r3, #1
 8004312:	2300      	moveq	r3, #0
 8004314:	b2db      	uxtb	r3, r3
 8004316:	e022      	b.n	800435e <HAL_TIM_PWM_Start+0x6a>
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	2b04      	cmp	r3, #4
 800431c:	d109      	bne.n	8004332 <HAL_TIM_PWM_Start+0x3e>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004324:	b2db      	uxtb	r3, r3
 8004326:	2b01      	cmp	r3, #1
 8004328:	bf14      	ite	ne
 800432a:	2301      	movne	r3, #1
 800432c:	2300      	moveq	r3, #0
 800432e:	b2db      	uxtb	r3, r3
 8004330:	e015      	b.n	800435e <HAL_TIM_PWM_Start+0x6a>
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	2b08      	cmp	r3, #8
 8004336:	d109      	bne.n	800434c <HAL_TIM_PWM_Start+0x58>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800433e:	b2db      	uxtb	r3, r3
 8004340:	2b01      	cmp	r3, #1
 8004342:	bf14      	ite	ne
 8004344:	2301      	movne	r3, #1
 8004346:	2300      	moveq	r3, #0
 8004348:	b2db      	uxtb	r3, r3
 800434a:	e008      	b.n	800435e <HAL_TIM_PWM_Start+0x6a>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004352:	b2db      	uxtb	r3, r3
 8004354:	2b01      	cmp	r3, #1
 8004356:	bf14      	ite	ne
 8004358:	2301      	movne	r3, #1
 800435a:	2300      	moveq	r3, #0
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e07c      	b.n	8004460 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d104      	bne.n	8004376 <HAL_TIM_PWM_Start+0x82>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2202      	movs	r2, #2
 8004370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004374:	e013      	b.n	800439e <HAL_TIM_PWM_Start+0xaa>
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	2b04      	cmp	r3, #4
 800437a:	d104      	bne.n	8004386 <HAL_TIM_PWM_Start+0x92>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2202      	movs	r2, #2
 8004380:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004384:	e00b      	b.n	800439e <HAL_TIM_PWM_Start+0xaa>
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	2b08      	cmp	r3, #8
 800438a:	d104      	bne.n	8004396 <HAL_TIM_PWM_Start+0xa2>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2202      	movs	r2, #2
 8004390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004394:	e003      	b.n	800439e <HAL_TIM_PWM_Start+0xaa>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2202      	movs	r2, #2
 800439a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2201      	movs	r2, #1
 80043a4:	6839      	ldr	r1, [r7, #0]
 80043a6:	4618      	mov	r0, r3
 80043a8:	f000 ff44 	bl	8005234 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a2d      	ldr	r2, [pc, #180]	; (8004468 <HAL_TIM_PWM_Start+0x174>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d004      	beq.n	80043c0 <HAL_TIM_PWM_Start+0xcc>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a2c      	ldr	r2, [pc, #176]	; (800446c <HAL_TIM_PWM_Start+0x178>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d101      	bne.n	80043c4 <HAL_TIM_PWM_Start+0xd0>
 80043c0:	2301      	movs	r3, #1
 80043c2:	e000      	b.n	80043c6 <HAL_TIM_PWM_Start+0xd2>
 80043c4:	2300      	movs	r3, #0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d007      	beq.n	80043da <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a22      	ldr	r2, [pc, #136]	; (8004468 <HAL_TIM_PWM_Start+0x174>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d022      	beq.n	800442a <HAL_TIM_PWM_Start+0x136>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ec:	d01d      	beq.n	800442a <HAL_TIM_PWM_Start+0x136>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a1f      	ldr	r2, [pc, #124]	; (8004470 <HAL_TIM_PWM_Start+0x17c>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d018      	beq.n	800442a <HAL_TIM_PWM_Start+0x136>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a1d      	ldr	r2, [pc, #116]	; (8004474 <HAL_TIM_PWM_Start+0x180>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d013      	beq.n	800442a <HAL_TIM_PWM_Start+0x136>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a1c      	ldr	r2, [pc, #112]	; (8004478 <HAL_TIM_PWM_Start+0x184>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d00e      	beq.n	800442a <HAL_TIM_PWM_Start+0x136>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a16      	ldr	r2, [pc, #88]	; (800446c <HAL_TIM_PWM_Start+0x178>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d009      	beq.n	800442a <HAL_TIM_PWM_Start+0x136>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a18      	ldr	r2, [pc, #96]	; (800447c <HAL_TIM_PWM_Start+0x188>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d004      	beq.n	800442a <HAL_TIM_PWM_Start+0x136>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a16      	ldr	r2, [pc, #88]	; (8004480 <HAL_TIM_PWM_Start+0x18c>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d111      	bne.n	800444e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	f003 0307 	and.w	r3, r3, #7
 8004434:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2b06      	cmp	r3, #6
 800443a:	d010      	beq.n	800445e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f042 0201 	orr.w	r2, r2, #1
 800444a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800444c:	e007      	b.n	800445e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f042 0201 	orr.w	r2, r2, #1
 800445c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	3710      	adds	r7, #16
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	40010000 	.word	0x40010000
 800446c:	40010400 	.word	0x40010400
 8004470:	40000400 	.word	0x40000400
 8004474:	40000800 	.word	0x40000800
 8004478:	40000c00 	.word	0x40000c00
 800447c:	40014000 	.word	0x40014000
 8004480:	40001800 	.word	0x40001800

08004484 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b086      	sub	sp, #24
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d101      	bne.n	8004498 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e097      	b.n	80045c8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d106      	bne.n	80044b2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f7fd ff75 	bl	800239c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2202      	movs	r2, #2
 80044b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	6812      	ldr	r2, [r2, #0]
 80044c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044c8:	f023 0307 	bic.w	r3, r3, #7
 80044cc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	3304      	adds	r3, #4
 80044d6:	4619      	mov	r1, r3
 80044d8:	4610      	mov	r0, r2
 80044da:	f000 fbc1 	bl	8004c60 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	6a1b      	ldr	r3, [r3, #32]
 80044f4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	697a      	ldr	r2, [r7, #20]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004506:	f023 0303 	bic.w	r3, r3, #3
 800450a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	689a      	ldr	r2, [r3, #8]
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	021b      	lsls	r3, r3, #8
 8004516:	4313      	orrs	r3, r2
 8004518:	693a      	ldr	r2, [r7, #16]
 800451a:	4313      	orrs	r3, r2
 800451c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004524:	f023 030c 	bic.w	r3, r3, #12
 8004528:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004530:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004534:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	68da      	ldr	r2, [r3, #12]
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	69db      	ldr	r3, [r3, #28]
 800453e:	021b      	lsls	r3, r3, #8
 8004540:	4313      	orrs	r3, r2
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	4313      	orrs	r3, r2
 8004546:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	011a      	lsls	r2, r3, #4
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	6a1b      	ldr	r3, [r3, #32]
 8004552:	031b      	lsls	r3, r3, #12
 8004554:	4313      	orrs	r3, r2
 8004556:	693a      	ldr	r2, [r7, #16]
 8004558:	4313      	orrs	r3, r2
 800455a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004562:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800456a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	685a      	ldr	r2, [r3, #4]
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	695b      	ldr	r3, [r3, #20]
 8004574:	011b      	lsls	r3, r3, #4
 8004576:	4313      	orrs	r3, r2
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	4313      	orrs	r3, r2
 800457c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	693a      	ldr	r2, [r7, #16]
 800458c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68fa      	ldr	r2, [r7, #12]
 8004594:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2201      	movs	r2, #1
 800459a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2201      	movs	r2, #1
 80045a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2201      	movs	r2, #1
 80045aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2201      	movs	r2, #1
 80045b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2201      	movs	r2, #1
 80045ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2201      	movs	r2, #1
 80045c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3718      	adds	r7, #24
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045e0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80045e8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80045f0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80045f8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d110      	bne.n	8004622 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004600:	7bfb      	ldrb	r3, [r7, #15]
 8004602:	2b01      	cmp	r3, #1
 8004604:	d102      	bne.n	800460c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004606:	7b7b      	ldrb	r3, [r7, #13]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d001      	beq.n	8004610 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e069      	b.n	80046e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2202      	movs	r2, #2
 8004614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2202      	movs	r2, #2
 800461c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004620:	e031      	b.n	8004686 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	2b04      	cmp	r3, #4
 8004626:	d110      	bne.n	800464a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004628:	7bbb      	ldrb	r3, [r7, #14]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d102      	bne.n	8004634 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800462e:	7b3b      	ldrb	r3, [r7, #12]
 8004630:	2b01      	cmp	r3, #1
 8004632:	d001      	beq.n	8004638 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e055      	b.n	80046e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2202      	movs	r2, #2
 800463c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2202      	movs	r2, #2
 8004644:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004648:	e01d      	b.n	8004686 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800464a:	7bfb      	ldrb	r3, [r7, #15]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d108      	bne.n	8004662 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004650:	7bbb      	ldrb	r3, [r7, #14]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d105      	bne.n	8004662 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004656:	7b7b      	ldrb	r3, [r7, #13]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d102      	bne.n	8004662 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800465c:	7b3b      	ldrb	r3, [r7, #12]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d001      	beq.n	8004666 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e03e      	b.n	80046e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2202      	movs	r2, #2
 800466a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2202      	movs	r2, #2
 8004672:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2202      	movs	r2, #2
 800467a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2202      	movs	r2, #2
 8004682:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d003      	beq.n	8004694 <HAL_TIM_Encoder_Start+0xc4>
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	2b04      	cmp	r3, #4
 8004690:	d008      	beq.n	80046a4 <HAL_TIM_Encoder_Start+0xd4>
 8004692:	e00f      	b.n	80046b4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2201      	movs	r2, #1
 800469a:	2100      	movs	r1, #0
 800469c:	4618      	mov	r0, r3
 800469e:	f000 fdc9 	bl	8005234 <TIM_CCxChannelCmd>
      break;
 80046a2:	e016      	b.n	80046d2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2201      	movs	r2, #1
 80046aa:	2104      	movs	r1, #4
 80046ac:	4618      	mov	r0, r3
 80046ae:	f000 fdc1 	bl	8005234 <TIM_CCxChannelCmd>
      break;
 80046b2:	e00e      	b.n	80046d2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2201      	movs	r2, #1
 80046ba:	2100      	movs	r1, #0
 80046bc:	4618      	mov	r0, r3
 80046be:	f000 fdb9 	bl	8005234 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2201      	movs	r2, #1
 80046c8:	2104      	movs	r1, #4
 80046ca:	4618      	mov	r0, r3
 80046cc:	f000 fdb2 	bl	8005234 <TIM_CCxChannelCmd>
      break;
 80046d0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f042 0201 	orr.w	r2, r2, #1
 80046e0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3710      	adds	r7, #16
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	f003 0302 	and.w	r3, r3, #2
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d122      	bne.n	8004748 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	f003 0302 	and.w	r3, r3, #2
 800470c:	2b02      	cmp	r3, #2
 800470e:	d11b      	bne.n	8004748 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f06f 0202 	mvn.w	r2, #2
 8004718:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2201      	movs	r2, #1
 800471e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	f003 0303 	and.w	r3, r3, #3
 800472a:	2b00      	cmp	r3, #0
 800472c:	d003      	beq.n	8004736 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 fa77 	bl	8004c22 <HAL_TIM_IC_CaptureCallback>
 8004734:	e005      	b.n	8004742 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 fa69 	bl	8004c0e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 fa7a 	bl	8004c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	f003 0304 	and.w	r3, r3, #4
 8004752:	2b04      	cmp	r3, #4
 8004754:	d122      	bne.n	800479c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	f003 0304 	and.w	r3, r3, #4
 8004760:	2b04      	cmp	r3, #4
 8004762:	d11b      	bne.n	800479c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f06f 0204 	mvn.w	r2, #4
 800476c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2202      	movs	r2, #2
 8004772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800477e:	2b00      	cmp	r3, #0
 8004780:	d003      	beq.n	800478a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 fa4d 	bl	8004c22 <HAL_TIM_IC_CaptureCallback>
 8004788:	e005      	b.n	8004796 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 fa3f 	bl	8004c0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 fa50 	bl	8004c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	f003 0308 	and.w	r3, r3, #8
 80047a6:	2b08      	cmp	r3, #8
 80047a8:	d122      	bne.n	80047f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	f003 0308 	and.w	r3, r3, #8
 80047b4:	2b08      	cmp	r3, #8
 80047b6:	d11b      	bne.n	80047f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f06f 0208 	mvn.w	r2, #8
 80047c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2204      	movs	r2, #4
 80047c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	69db      	ldr	r3, [r3, #28]
 80047ce:	f003 0303 	and.w	r3, r3, #3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d003      	beq.n	80047de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 fa23 	bl	8004c22 <HAL_TIM_IC_CaptureCallback>
 80047dc:	e005      	b.n	80047ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 fa15 	bl	8004c0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f000 fa26 	bl	8004c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	f003 0310 	and.w	r3, r3, #16
 80047fa:	2b10      	cmp	r3, #16
 80047fc:	d122      	bne.n	8004844 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	f003 0310 	and.w	r3, r3, #16
 8004808:	2b10      	cmp	r3, #16
 800480a:	d11b      	bne.n	8004844 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f06f 0210 	mvn.w	r2, #16
 8004814:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2208      	movs	r2, #8
 800481a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	69db      	ldr	r3, [r3, #28]
 8004822:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004826:	2b00      	cmp	r3, #0
 8004828:	d003      	beq.n	8004832 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 f9f9 	bl	8004c22 <HAL_TIM_IC_CaptureCallback>
 8004830:	e005      	b.n	800483e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 f9eb 	bl	8004c0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f000 f9fc 	bl	8004c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	2b01      	cmp	r3, #1
 8004850:	d10e      	bne.n	8004870 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	f003 0301 	and.w	r3, r3, #1
 800485c:	2b01      	cmp	r3, #1
 800485e:	d107      	bne.n	8004870 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f06f 0201 	mvn.w	r2, #1
 8004868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f7fd fa24 	bl	8001cb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800487a:	2b80      	cmp	r3, #128	; 0x80
 800487c:	d10e      	bne.n	800489c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004888:	2b80      	cmp	r3, #128	; 0x80
 800488a:	d107      	bne.n	800489c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 fdca 	bl	8005430 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048a6:	2b40      	cmp	r3, #64	; 0x40
 80048a8:	d10e      	bne.n	80048c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b4:	2b40      	cmp	r3, #64	; 0x40
 80048b6:	d107      	bne.n	80048c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f9c1 	bl	8004c4a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	f003 0320 	and.w	r3, r3, #32
 80048d2:	2b20      	cmp	r3, #32
 80048d4:	d10e      	bne.n	80048f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	f003 0320 	and.w	r3, r3, #32
 80048e0:	2b20      	cmp	r3, #32
 80048e2:	d107      	bne.n	80048f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f06f 0220 	mvn.w	r2, #32
 80048ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 fd94 	bl	800541c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048f4:	bf00      	nop
 80048f6:	3708      	adds	r7, #8
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004908:	2300      	movs	r3, #0
 800490a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004912:	2b01      	cmp	r3, #1
 8004914:	d101      	bne.n	800491a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004916:	2302      	movs	r3, #2
 8004918:	e0ae      	b.n	8004a78 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2201      	movs	r2, #1
 800491e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2b0c      	cmp	r3, #12
 8004926:	f200 809f 	bhi.w	8004a68 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800492a:	a201      	add	r2, pc, #4	; (adr r2, 8004930 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800492c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004930:	08004965 	.word	0x08004965
 8004934:	08004a69 	.word	0x08004a69
 8004938:	08004a69 	.word	0x08004a69
 800493c:	08004a69 	.word	0x08004a69
 8004940:	080049a5 	.word	0x080049a5
 8004944:	08004a69 	.word	0x08004a69
 8004948:	08004a69 	.word	0x08004a69
 800494c:	08004a69 	.word	0x08004a69
 8004950:	080049e7 	.word	0x080049e7
 8004954:	08004a69 	.word	0x08004a69
 8004958:	08004a69 	.word	0x08004a69
 800495c:	08004a69 	.word	0x08004a69
 8004960:	08004a27 	.word	0x08004a27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68b9      	ldr	r1, [r7, #8]
 800496a:	4618      	mov	r0, r3
 800496c:	f000 fa18 	bl	8004da0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	699a      	ldr	r2, [r3, #24]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f042 0208 	orr.w	r2, r2, #8
 800497e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	699a      	ldr	r2, [r3, #24]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f022 0204 	bic.w	r2, r2, #4
 800498e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	6999      	ldr	r1, [r3, #24]
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	691a      	ldr	r2, [r3, #16]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	430a      	orrs	r2, r1
 80049a0:	619a      	str	r2, [r3, #24]
      break;
 80049a2:	e064      	b.n	8004a6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	68b9      	ldr	r1, [r7, #8]
 80049aa:	4618      	mov	r0, r3
 80049ac:	f000 fa68 	bl	8004e80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	699a      	ldr	r2, [r3, #24]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	699a      	ldr	r2, [r3, #24]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	6999      	ldr	r1, [r3, #24]
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	021a      	lsls	r2, r3, #8
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	430a      	orrs	r2, r1
 80049e2:	619a      	str	r2, [r3, #24]
      break;
 80049e4:	e043      	b.n	8004a6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68b9      	ldr	r1, [r7, #8]
 80049ec:	4618      	mov	r0, r3
 80049ee:	f000 fabd 	bl	8004f6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	69da      	ldr	r2, [r3, #28]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f042 0208 	orr.w	r2, r2, #8
 8004a00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	69da      	ldr	r2, [r3, #28]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f022 0204 	bic.w	r2, r2, #4
 8004a10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	69d9      	ldr	r1, [r3, #28]
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	691a      	ldr	r2, [r3, #16]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	430a      	orrs	r2, r1
 8004a22:	61da      	str	r2, [r3, #28]
      break;
 8004a24:	e023      	b.n	8004a6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68b9      	ldr	r1, [r7, #8]
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f000 fb11 	bl	8005054 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	69da      	ldr	r2, [r3, #28]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	69da      	ldr	r2, [r3, #28]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	69d9      	ldr	r1, [r3, #28]
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	021a      	lsls	r2, r3, #8
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	430a      	orrs	r2, r1
 8004a64:	61da      	str	r2, [r3, #28]
      break;
 8004a66:	e002      	b.n	8004a6e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	75fb      	strb	r3, [r7, #23]
      break;
 8004a6c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a76:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3718      	adds	r7, #24
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d101      	bne.n	8004a9c <HAL_TIM_ConfigClockSource+0x1c>
 8004a98:	2302      	movs	r3, #2
 8004a9a:	e0b4      	b.n	8004c06 <HAL_TIM_ConfigClockSource+0x186>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2202      	movs	r2, #2
 8004aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004aba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ac2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68ba      	ldr	r2, [r7, #8]
 8004aca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ad4:	d03e      	beq.n	8004b54 <HAL_TIM_ConfigClockSource+0xd4>
 8004ad6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ada:	f200 8087 	bhi.w	8004bec <HAL_TIM_ConfigClockSource+0x16c>
 8004ade:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ae2:	f000 8086 	beq.w	8004bf2 <HAL_TIM_ConfigClockSource+0x172>
 8004ae6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aea:	d87f      	bhi.n	8004bec <HAL_TIM_ConfigClockSource+0x16c>
 8004aec:	2b70      	cmp	r3, #112	; 0x70
 8004aee:	d01a      	beq.n	8004b26 <HAL_TIM_ConfigClockSource+0xa6>
 8004af0:	2b70      	cmp	r3, #112	; 0x70
 8004af2:	d87b      	bhi.n	8004bec <HAL_TIM_ConfigClockSource+0x16c>
 8004af4:	2b60      	cmp	r3, #96	; 0x60
 8004af6:	d050      	beq.n	8004b9a <HAL_TIM_ConfigClockSource+0x11a>
 8004af8:	2b60      	cmp	r3, #96	; 0x60
 8004afa:	d877      	bhi.n	8004bec <HAL_TIM_ConfigClockSource+0x16c>
 8004afc:	2b50      	cmp	r3, #80	; 0x50
 8004afe:	d03c      	beq.n	8004b7a <HAL_TIM_ConfigClockSource+0xfa>
 8004b00:	2b50      	cmp	r3, #80	; 0x50
 8004b02:	d873      	bhi.n	8004bec <HAL_TIM_ConfigClockSource+0x16c>
 8004b04:	2b40      	cmp	r3, #64	; 0x40
 8004b06:	d058      	beq.n	8004bba <HAL_TIM_ConfigClockSource+0x13a>
 8004b08:	2b40      	cmp	r3, #64	; 0x40
 8004b0a:	d86f      	bhi.n	8004bec <HAL_TIM_ConfigClockSource+0x16c>
 8004b0c:	2b30      	cmp	r3, #48	; 0x30
 8004b0e:	d064      	beq.n	8004bda <HAL_TIM_ConfigClockSource+0x15a>
 8004b10:	2b30      	cmp	r3, #48	; 0x30
 8004b12:	d86b      	bhi.n	8004bec <HAL_TIM_ConfigClockSource+0x16c>
 8004b14:	2b20      	cmp	r3, #32
 8004b16:	d060      	beq.n	8004bda <HAL_TIM_ConfigClockSource+0x15a>
 8004b18:	2b20      	cmp	r3, #32
 8004b1a:	d867      	bhi.n	8004bec <HAL_TIM_ConfigClockSource+0x16c>
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d05c      	beq.n	8004bda <HAL_TIM_ConfigClockSource+0x15a>
 8004b20:	2b10      	cmp	r3, #16
 8004b22:	d05a      	beq.n	8004bda <HAL_TIM_ConfigClockSource+0x15a>
 8004b24:	e062      	b.n	8004bec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6818      	ldr	r0, [r3, #0]
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	6899      	ldr	r1, [r3, #8]
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	685a      	ldr	r2, [r3, #4]
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	f000 fb5d 	bl	80051f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68ba      	ldr	r2, [r7, #8]
 8004b50:	609a      	str	r2, [r3, #8]
      break;
 8004b52:	e04f      	b.n	8004bf4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6818      	ldr	r0, [r3, #0]
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	6899      	ldr	r1, [r3, #8]
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	685a      	ldr	r2, [r3, #4]
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	f000 fb46 	bl	80051f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	689a      	ldr	r2, [r3, #8]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b76:	609a      	str	r2, [r3, #8]
      break;
 8004b78:	e03c      	b.n	8004bf4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6818      	ldr	r0, [r3, #0]
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	6859      	ldr	r1, [r3, #4]
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	461a      	mov	r2, r3
 8004b88:	f000 faba 	bl	8005100 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2150      	movs	r1, #80	; 0x50
 8004b92:	4618      	mov	r0, r3
 8004b94:	f000 fb13 	bl	80051be <TIM_ITRx_SetConfig>
      break;
 8004b98:	e02c      	b.n	8004bf4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6818      	ldr	r0, [r3, #0]
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	6859      	ldr	r1, [r3, #4]
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	f000 fad9 	bl	800515e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2160      	movs	r1, #96	; 0x60
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f000 fb03 	bl	80051be <TIM_ITRx_SetConfig>
      break;
 8004bb8:	e01c      	b.n	8004bf4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6818      	ldr	r0, [r3, #0]
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	6859      	ldr	r1, [r3, #4]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	f000 fa9a 	bl	8005100 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2140      	movs	r1, #64	; 0x40
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f000 faf3 	bl	80051be <TIM_ITRx_SetConfig>
      break;
 8004bd8:	e00c      	b.n	8004bf4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4619      	mov	r1, r3
 8004be4:	4610      	mov	r0, r2
 8004be6:	f000 faea 	bl	80051be <TIM_ITRx_SetConfig>
      break;
 8004bea:	e003      	b.n	8004bf4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	73fb      	strb	r3, [r7, #15]
      break;
 8004bf0:	e000      	b.n	8004bf4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004bf2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3710      	adds	r7, #16
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c0e:	b480      	push	{r7}
 8004c10:	b083      	sub	sp, #12
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c16:	bf00      	nop
 8004c18:	370c      	adds	r7, #12
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr

08004c22 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c22:	b480      	push	{r7}
 8004c24:	b083      	sub	sp, #12
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c2a:	bf00      	nop
 8004c2c:	370c      	adds	r7, #12
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr

08004c36 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c36:	b480      	push	{r7}
 8004c38:	b083      	sub	sp, #12
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c3e:	bf00      	nop
 8004c40:	370c      	adds	r7, #12
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr

08004c4a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c4a:	b480      	push	{r7}
 8004c4c:	b083      	sub	sp, #12
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c52:	bf00      	nop
 8004c54:	370c      	adds	r7, #12
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
	...

08004c60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b085      	sub	sp, #20
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a40      	ldr	r2, [pc, #256]	; (8004d74 <TIM_Base_SetConfig+0x114>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d013      	beq.n	8004ca0 <TIM_Base_SetConfig+0x40>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c7e:	d00f      	beq.n	8004ca0 <TIM_Base_SetConfig+0x40>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a3d      	ldr	r2, [pc, #244]	; (8004d78 <TIM_Base_SetConfig+0x118>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d00b      	beq.n	8004ca0 <TIM_Base_SetConfig+0x40>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a3c      	ldr	r2, [pc, #240]	; (8004d7c <TIM_Base_SetConfig+0x11c>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d007      	beq.n	8004ca0 <TIM_Base_SetConfig+0x40>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a3b      	ldr	r2, [pc, #236]	; (8004d80 <TIM_Base_SetConfig+0x120>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d003      	beq.n	8004ca0 <TIM_Base_SetConfig+0x40>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a3a      	ldr	r2, [pc, #232]	; (8004d84 <TIM_Base_SetConfig+0x124>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d108      	bne.n	8004cb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a2f      	ldr	r2, [pc, #188]	; (8004d74 <TIM_Base_SetConfig+0x114>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d02b      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cc0:	d027      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a2c      	ldr	r2, [pc, #176]	; (8004d78 <TIM_Base_SetConfig+0x118>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d023      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a2b      	ldr	r2, [pc, #172]	; (8004d7c <TIM_Base_SetConfig+0x11c>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d01f      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a2a      	ldr	r2, [pc, #168]	; (8004d80 <TIM_Base_SetConfig+0x120>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d01b      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a29      	ldr	r2, [pc, #164]	; (8004d84 <TIM_Base_SetConfig+0x124>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d017      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a28      	ldr	r2, [pc, #160]	; (8004d88 <TIM_Base_SetConfig+0x128>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d013      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a27      	ldr	r2, [pc, #156]	; (8004d8c <TIM_Base_SetConfig+0x12c>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d00f      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a26      	ldr	r2, [pc, #152]	; (8004d90 <TIM_Base_SetConfig+0x130>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d00b      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a25      	ldr	r2, [pc, #148]	; (8004d94 <TIM_Base_SetConfig+0x134>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d007      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a24      	ldr	r2, [pc, #144]	; (8004d98 <TIM_Base_SetConfig+0x138>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d003      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a23      	ldr	r2, [pc, #140]	; (8004d9c <TIM_Base_SetConfig+0x13c>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d108      	bne.n	8004d24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	695b      	ldr	r3, [r3, #20]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	689a      	ldr	r2, [r3, #8]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a0a      	ldr	r2, [pc, #40]	; (8004d74 <TIM_Base_SetConfig+0x114>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d003      	beq.n	8004d58 <TIM_Base_SetConfig+0xf8>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a0c      	ldr	r2, [pc, #48]	; (8004d84 <TIM_Base_SetConfig+0x124>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d103      	bne.n	8004d60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	691a      	ldr	r2, [r3, #16]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	615a      	str	r2, [r3, #20]
}
 8004d66:	bf00      	nop
 8004d68:	3714      	adds	r7, #20
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	40010000 	.word	0x40010000
 8004d78:	40000400 	.word	0x40000400
 8004d7c:	40000800 	.word	0x40000800
 8004d80:	40000c00 	.word	0x40000c00
 8004d84:	40010400 	.word	0x40010400
 8004d88:	40014000 	.word	0x40014000
 8004d8c:	40014400 	.word	0x40014400
 8004d90:	40014800 	.word	0x40014800
 8004d94:	40001800 	.word	0x40001800
 8004d98:	40001c00 	.word	0x40001c00
 8004d9c:	40002000 	.word	0x40002000

08004da0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b087      	sub	sp, #28
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a1b      	ldr	r3, [r3, #32]
 8004dae:	f023 0201 	bic.w	r2, r3, #1
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f023 0303 	bic.w	r3, r3, #3
 8004dd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68fa      	ldr	r2, [r7, #12]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	f023 0302 	bic.w	r3, r3, #2
 8004de8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	697a      	ldr	r2, [r7, #20]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a20      	ldr	r2, [pc, #128]	; (8004e78 <TIM_OC1_SetConfig+0xd8>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d003      	beq.n	8004e04 <TIM_OC1_SetConfig+0x64>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a1f      	ldr	r2, [pc, #124]	; (8004e7c <TIM_OC1_SetConfig+0xdc>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d10c      	bne.n	8004e1e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	f023 0308 	bic.w	r3, r3, #8
 8004e0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	697a      	ldr	r2, [r7, #20]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	f023 0304 	bic.w	r3, r3, #4
 8004e1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a15      	ldr	r2, [pc, #84]	; (8004e78 <TIM_OC1_SetConfig+0xd8>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d003      	beq.n	8004e2e <TIM_OC1_SetConfig+0x8e>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a14      	ldr	r2, [pc, #80]	; (8004e7c <TIM_OC1_SetConfig+0xdc>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d111      	bne.n	8004e52 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	693a      	ldr	r2, [r7, #16]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	693a      	ldr	r2, [r7, #16]
 8004e56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	685a      	ldr	r2, [r3, #4]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	697a      	ldr	r2, [r7, #20]
 8004e6a:	621a      	str	r2, [r3, #32]
}
 8004e6c:	bf00      	nop
 8004e6e:	371c      	adds	r7, #28
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr
 8004e78:	40010000 	.word	0x40010000
 8004e7c:	40010400 	.word	0x40010400

08004e80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b087      	sub	sp, #28
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	f023 0210 	bic.w	r2, r3, #16
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a1b      	ldr	r3, [r3, #32]
 8004e9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	699b      	ldr	r3, [r3, #24]
 8004ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	021b      	lsls	r3, r3, #8
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	f023 0320 	bic.w	r3, r3, #32
 8004eca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	011b      	lsls	r3, r3, #4
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a22      	ldr	r2, [pc, #136]	; (8004f64 <TIM_OC2_SetConfig+0xe4>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d003      	beq.n	8004ee8 <TIM_OC2_SetConfig+0x68>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a21      	ldr	r2, [pc, #132]	; (8004f68 <TIM_OC2_SetConfig+0xe8>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d10d      	bne.n	8004f04 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004eee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	011b      	lsls	r3, r3, #4
 8004ef6:	697a      	ldr	r2, [r7, #20]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a17      	ldr	r2, [pc, #92]	; (8004f64 <TIM_OC2_SetConfig+0xe4>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d003      	beq.n	8004f14 <TIM_OC2_SetConfig+0x94>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a16      	ldr	r2, [pc, #88]	; (8004f68 <TIM_OC2_SetConfig+0xe8>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d113      	bne.n	8004f3c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	695b      	ldr	r3, [r3, #20]
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	693a      	ldr	r2, [r7, #16]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	693a      	ldr	r2, [r7, #16]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	693a      	ldr	r2, [r7, #16]
 8004f40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	685a      	ldr	r2, [r3, #4]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	697a      	ldr	r2, [r7, #20]
 8004f54:	621a      	str	r2, [r3, #32]
}
 8004f56:	bf00      	nop
 8004f58:	371c      	adds	r7, #28
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	40010000 	.word	0x40010000
 8004f68:	40010400 	.word	0x40010400

08004f6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b087      	sub	sp, #28
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a1b      	ldr	r3, [r3, #32]
 8004f86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	69db      	ldr	r3, [r3, #28]
 8004f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f023 0303 	bic.w	r3, r3, #3
 8004fa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	021b      	lsls	r3, r3, #8
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a21      	ldr	r2, [pc, #132]	; (800504c <TIM_OC3_SetConfig+0xe0>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d003      	beq.n	8004fd2 <TIM_OC3_SetConfig+0x66>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a20      	ldr	r2, [pc, #128]	; (8005050 <TIM_OC3_SetConfig+0xe4>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d10d      	bne.n	8004fee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004fd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	021b      	lsls	r3, r3, #8
 8004fe0:	697a      	ldr	r2, [r7, #20]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004fec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a16      	ldr	r2, [pc, #88]	; (800504c <TIM_OC3_SetConfig+0xe0>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d003      	beq.n	8004ffe <TIM_OC3_SetConfig+0x92>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a15      	ldr	r2, [pc, #84]	; (8005050 <TIM_OC3_SetConfig+0xe4>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d113      	bne.n	8005026 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005004:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800500c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	695b      	ldr	r3, [r3, #20]
 8005012:	011b      	lsls	r3, r3, #4
 8005014:	693a      	ldr	r2, [r7, #16]
 8005016:	4313      	orrs	r3, r2
 8005018:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	011b      	lsls	r3, r3, #4
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	4313      	orrs	r3, r2
 8005024:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	693a      	ldr	r2, [r7, #16]
 800502a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	685a      	ldr	r2, [r3, #4]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	697a      	ldr	r2, [r7, #20]
 800503e:	621a      	str	r2, [r3, #32]
}
 8005040:	bf00      	nop
 8005042:	371c      	adds	r7, #28
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr
 800504c:	40010000 	.word	0x40010000
 8005050:	40010400 	.word	0x40010400

08005054 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005054:	b480      	push	{r7}
 8005056:	b087      	sub	sp, #28
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a1b      	ldr	r3, [r3, #32]
 8005062:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	69db      	ldr	r3, [r3, #28]
 800507a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800508a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	021b      	lsls	r3, r3, #8
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	4313      	orrs	r3, r2
 8005096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800509e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	031b      	lsls	r3, r3, #12
 80050a6:	693a      	ldr	r2, [r7, #16]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a12      	ldr	r2, [pc, #72]	; (80050f8 <TIM_OC4_SetConfig+0xa4>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d003      	beq.n	80050bc <TIM_OC4_SetConfig+0x68>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a11      	ldr	r2, [pc, #68]	; (80050fc <TIM_OC4_SetConfig+0xa8>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d109      	bne.n	80050d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	695b      	ldr	r3, [r3, #20]
 80050c8:	019b      	lsls	r3, r3, #6
 80050ca:	697a      	ldr	r2, [r7, #20]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	697a      	ldr	r2, [r7, #20]
 80050d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	68fa      	ldr	r2, [r7, #12]
 80050da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	685a      	ldr	r2, [r3, #4]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	693a      	ldr	r2, [r7, #16]
 80050e8:	621a      	str	r2, [r3, #32]
}
 80050ea:	bf00      	nop
 80050ec:	371c      	adds	r7, #28
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop
 80050f8:	40010000 	.word	0x40010000
 80050fc:	40010400 	.word	0x40010400

08005100 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005100:	b480      	push	{r7}
 8005102:	b087      	sub	sp, #28
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6a1b      	ldr	r3, [r3, #32]
 8005110:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6a1b      	ldr	r3, [r3, #32]
 8005116:	f023 0201 	bic.w	r2, r3, #1
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800512a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	011b      	lsls	r3, r3, #4
 8005130:	693a      	ldr	r2, [r7, #16]
 8005132:	4313      	orrs	r3, r2
 8005134:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	f023 030a 	bic.w	r3, r3, #10
 800513c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800513e:	697a      	ldr	r2, [r7, #20]
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	4313      	orrs	r3, r2
 8005144:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	693a      	ldr	r2, [r7, #16]
 800514a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	621a      	str	r2, [r3, #32]
}
 8005152:	bf00      	nop
 8005154:	371c      	adds	r7, #28
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr

0800515e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800515e:	b480      	push	{r7}
 8005160:	b087      	sub	sp, #28
 8005162:	af00      	add	r7, sp, #0
 8005164:	60f8      	str	r0, [r7, #12]
 8005166:	60b9      	str	r1, [r7, #8]
 8005168:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6a1b      	ldr	r3, [r3, #32]
 800516e:	f023 0210 	bic.w	r2, r3, #16
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6a1b      	ldr	r3, [r3, #32]
 8005180:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005188:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	031b      	lsls	r3, r3, #12
 800518e:	697a      	ldr	r2, [r7, #20]
 8005190:	4313      	orrs	r3, r2
 8005192:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800519a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	011b      	lsls	r3, r3, #4
 80051a0:	693a      	ldr	r2, [r7, #16]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	697a      	ldr	r2, [r7, #20]
 80051aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	693a      	ldr	r2, [r7, #16]
 80051b0:	621a      	str	r2, [r3, #32]
}
 80051b2:	bf00      	nop
 80051b4:	371c      	adds	r7, #28
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr

080051be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051be:	b480      	push	{r7}
 80051c0:	b085      	sub	sp, #20
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
 80051c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051d6:	683a      	ldr	r2, [r7, #0]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	4313      	orrs	r3, r2
 80051dc:	f043 0307 	orr.w	r3, r3, #7
 80051e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	609a      	str	r2, [r3, #8]
}
 80051e8:	bf00      	nop
 80051ea:	3714      	adds	r7, #20
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b087      	sub	sp, #28
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
 8005200:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800520e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	021a      	lsls	r2, r3, #8
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	431a      	orrs	r2, r3
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	4313      	orrs	r3, r2
 800521c:	697a      	ldr	r2, [r7, #20]
 800521e:	4313      	orrs	r3, r2
 8005220:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	697a      	ldr	r2, [r7, #20]
 8005226:	609a      	str	r2, [r3, #8]
}
 8005228:	bf00      	nop
 800522a:	371c      	adds	r7, #28
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005234:	b480      	push	{r7}
 8005236:	b087      	sub	sp, #28
 8005238:	af00      	add	r7, sp, #0
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	f003 031f 	and.w	r3, r3, #31
 8005246:	2201      	movs	r2, #1
 8005248:	fa02 f303 	lsl.w	r3, r2, r3
 800524c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6a1a      	ldr	r2, [r3, #32]
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	43db      	mvns	r3, r3
 8005256:	401a      	ands	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6a1a      	ldr	r2, [r3, #32]
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	f003 031f 	and.w	r3, r3, #31
 8005266:	6879      	ldr	r1, [r7, #4]
 8005268:	fa01 f303 	lsl.w	r3, r1, r3
 800526c:	431a      	orrs	r2, r3
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	621a      	str	r2, [r3, #32]
}
 8005272:	bf00      	nop
 8005274:	371c      	adds	r7, #28
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr
	...

08005280 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005280:	b480      	push	{r7}
 8005282:	b085      	sub	sp, #20
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005290:	2b01      	cmp	r3, #1
 8005292:	d101      	bne.n	8005298 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005294:	2302      	movs	r3, #2
 8005296:	e05a      	b.n	800534e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2202      	movs	r2, #2
 80052a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a21      	ldr	r2, [pc, #132]	; (800535c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d022      	beq.n	8005322 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052e4:	d01d      	beq.n	8005322 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a1d      	ldr	r2, [pc, #116]	; (8005360 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d018      	beq.n	8005322 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a1b      	ldr	r2, [pc, #108]	; (8005364 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d013      	beq.n	8005322 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a1a      	ldr	r2, [pc, #104]	; (8005368 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d00e      	beq.n	8005322 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a18      	ldr	r2, [pc, #96]	; (800536c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d009      	beq.n	8005322 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a17      	ldr	r2, [pc, #92]	; (8005370 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d004      	beq.n	8005322 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a15      	ldr	r2, [pc, #84]	; (8005374 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d10c      	bne.n	800533c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005328:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	68ba      	ldr	r2, [r7, #8]
 8005330:	4313      	orrs	r3, r2
 8005332:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68ba      	ldr	r2, [r7, #8]
 800533a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3714      	adds	r7, #20
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	40010000 	.word	0x40010000
 8005360:	40000400 	.word	0x40000400
 8005364:	40000800 	.word	0x40000800
 8005368:	40000c00 	.word	0x40000c00
 800536c:	40010400 	.word	0x40010400
 8005370:	40014000 	.word	0x40014000
 8005374:	40001800 	.word	0x40001800

08005378 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005382:	2300      	movs	r3, #0
 8005384:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800538c:	2b01      	cmp	r3, #1
 800538e:	d101      	bne.n	8005394 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005390:	2302      	movs	r3, #2
 8005392:	e03d      	b.n	8005410 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	4313      	orrs	r3, r2
 80053e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	695b      	ldr	r3, [r3, #20]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	69db      	ldr	r3, [r3, #28]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	3714      	adds	r7, #20
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005424:	bf00      	nop
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005438:	bf00      	nop
 800543a:	370c      	adds	r7, #12
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b082      	sub	sp, #8
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d101      	bne.n	8005456 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e03f      	b.n	80054d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800545c:	b2db      	uxtb	r3, r3
 800545e:	2b00      	cmp	r3, #0
 8005460:	d106      	bne.n	8005470 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f7fd f874 	bl	8002558 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2224      	movs	r2, #36	; 0x24
 8005474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68da      	ldr	r2, [r3, #12]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005486:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 fddb 	bl	8006044 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	691a      	ldr	r2, [r3, #16]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800549c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	695a      	ldr	r2, [r3, #20]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68da      	ldr	r2, [r3, #12]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2220      	movs	r2, #32
 80054c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2220      	movs	r2, #32
 80054d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3708      	adds	r7, #8
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}

080054de <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054de:	b580      	push	{r7, lr}
 80054e0:	b08a      	sub	sp, #40	; 0x28
 80054e2:	af02      	add	r7, sp, #8
 80054e4:	60f8      	str	r0, [r7, #12]
 80054e6:	60b9      	str	r1, [r7, #8]
 80054e8:	603b      	str	r3, [r7, #0]
 80054ea:	4613      	mov	r3, r2
 80054ec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80054ee:	2300      	movs	r3, #0
 80054f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	2b20      	cmp	r3, #32
 80054fc:	d17c      	bne.n	80055f8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d002      	beq.n	800550a <HAL_UART_Transmit+0x2c>
 8005504:	88fb      	ldrh	r3, [r7, #6]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d101      	bne.n	800550e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e075      	b.n	80055fa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005514:	2b01      	cmp	r3, #1
 8005516:	d101      	bne.n	800551c <HAL_UART_Transmit+0x3e>
 8005518:	2302      	movs	r3, #2
 800551a:	e06e      	b.n	80055fa <HAL_UART_Transmit+0x11c>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2200      	movs	r2, #0
 8005528:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2221      	movs	r2, #33	; 0x21
 800552e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005532:	f7fd f8f1 	bl	8002718 <HAL_GetTick>
 8005536:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	88fa      	ldrh	r2, [r7, #6]
 800553c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	88fa      	ldrh	r2, [r7, #6]
 8005542:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800554c:	d108      	bne.n	8005560 <HAL_UART_Transmit+0x82>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d104      	bne.n	8005560 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005556:	2300      	movs	r3, #0
 8005558:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	61bb      	str	r3, [r7, #24]
 800555e:	e003      	b.n	8005568 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005564:	2300      	movs	r3, #0
 8005566:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2200      	movs	r2, #0
 800556c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005570:	e02a      	b.n	80055c8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	9300      	str	r3, [sp, #0]
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	2200      	movs	r2, #0
 800557a:	2180      	movs	r1, #128	; 0x80
 800557c:	68f8      	ldr	r0, [r7, #12]
 800557e:	f000 fb1f 	bl	8005bc0 <UART_WaitOnFlagUntilTimeout>
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	d001      	beq.n	800558c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005588:	2303      	movs	r3, #3
 800558a:	e036      	b.n	80055fa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d10b      	bne.n	80055aa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	881b      	ldrh	r3, [r3, #0]
 8005596:	461a      	mov	r2, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	3302      	adds	r3, #2
 80055a6:	61bb      	str	r3, [r7, #24]
 80055a8:	e007      	b.n	80055ba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	781a      	ldrb	r2, [r3, #0]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	3301      	adds	r3, #1
 80055b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055be:	b29b      	uxth	r3, r3
 80055c0:	3b01      	subs	r3, #1
 80055c2:	b29a      	uxth	r2, r3
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d1cf      	bne.n	8005572 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	9300      	str	r3, [sp, #0]
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	2200      	movs	r2, #0
 80055da:	2140      	movs	r1, #64	; 0x40
 80055dc:	68f8      	ldr	r0, [r7, #12]
 80055de:	f000 faef 	bl	8005bc0 <UART_WaitOnFlagUntilTimeout>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d001      	beq.n	80055ec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80055e8:	2303      	movs	r3, #3
 80055ea:	e006      	b.n	80055fa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2220      	movs	r2, #32
 80055f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80055f4:	2300      	movs	r3, #0
 80055f6:	e000      	b.n	80055fa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80055f8:	2302      	movs	r3, #2
  }
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3720      	adds	r7, #32
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}

08005602 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005602:	b580      	push	{r7, lr}
 8005604:	b084      	sub	sp, #16
 8005606:	af00      	add	r7, sp, #0
 8005608:	60f8      	str	r0, [r7, #12]
 800560a:	60b9      	str	r1, [r7, #8]
 800560c:	4613      	mov	r3, r2
 800560e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005616:	b2db      	uxtb	r3, r3
 8005618:	2b20      	cmp	r3, #32
 800561a:	d11d      	bne.n	8005658 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d002      	beq.n	8005628 <HAL_UART_Receive_IT+0x26>
 8005622:	88fb      	ldrh	r3, [r7, #6]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d101      	bne.n	800562c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e016      	b.n	800565a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005632:	2b01      	cmp	r3, #1
 8005634:	d101      	bne.n	800563a <HAL_UART_Receive_IT+0x38>
 8005636:	2302      	movs	r3, #2
 8005638:	e00f      	b.n	800565a <HAL_UART_Receive_IT+0x58>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2201      	movs	r2, #1
 800563e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2200      	movs	r2, #0
 8005646:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005648:	88fb      	ldrh	r3, [r7, #6]
 800564a:	461a      	mov	r2, r3
 800564c:	68b9      	ldr	r1, [r7, #8]
 800564e:	68f8      	ldr	r0, [r7, #12]
 8005650:	f000 fb24 	bl	8005c9c <UART_Start_Receive_IT>
 8005654:	4603      	mov	r3, r0
 8005656:	e000      	b.n	800565a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005658:	2302      	movs	r3, #2
  }
}
 800565a:	4618      	mov	r0, r3
 800565c:	3710      	adds	r7, #16
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
	...

08005664 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b0ba      	sub	sp, #232	; 0xe8
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800568a:	2300      	movs	r3, #0
 800568c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005690:	2300      	movs	r3, #0
 8005692:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800569a:	f003 030f 	and.w	r3, r3, #15
 800569e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80056a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d10f      	bne.n	80056ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80056aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056ae:	f003 0320 	and.w	r3, r3, #32
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d009      	beq.n	80056ca <HAL_UART_IRQHandler+0x66>
 80056b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056ba:	f003 0320 	and.w	r3, r3, #32
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d003      	beq.n	80056ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 fc03 	bl	8005ece <UART_Receive_IT>
      return;
 80056c8:	e256      	b.n	8005b78 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80056ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	f000 80de 	beq.w	8005890 <HAL_UART_IRQHandler+0x22c>
 80056d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056d8:	f003 0301 	and.w	r3, r3, #1
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d106      	bne.n	80056ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80056e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056e4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	f000 80d1 	beq.w	8005890 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80056ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056f2:	f003 0301 	and.w	r3, r3, #1
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00b      	beq.n	8005712 <HAL_UART_IRQHandler+0xae>
 80056fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005702:	2b00      	cmp	r3, #0
 8005704:	d005      	beq.n	8005712 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570a:	f043 0201 	orr.w	r2, r3, #1
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005716:	f003 0304 	and.w	r3, r3, #4
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00b      	beq.n	8005736 <HAL_UART_IRQHandler+0xd2>
 800571e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005722:	f003 0301 	and.w	r3, r3, #1
 8005726:	2b00      	cmp	r3, #0
 8005728:	d005      	beq.n	8005736 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572e:	f043 0202 	orr.w	r2, r3, #2
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800573a:	f003 0302 	and.w	r3, r3, #2
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00b      	beq.n	800575a <HAL_UART_IRQHandler+0xf6>
 8005742:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005746:	f003 0301 	and.w	r3, r3, #1
 800574a:	2b00      	cmp	r3, #0
 800574c:	d005      	beq.n	800575a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005752:	f043 0204 	orr.w	r2, r3, #4
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800575a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800575e:	f003 0308 	and.w	r3, r3, #8
 8005762:	2b00      	cmp	r3, #0
 8005764:	d011      	beq.n	800578a <HAL_UART_IRQHandler+0x126>
 8005766:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800576a:	f003 0320 	and.w	r3, r3, #32
 800576e:	2b00      	cmp	r3, #0
 8005770:	d105      	bne.n	800577e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005772:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005776:	f003 0301 	and.w	r3, r3, #1
 800577a:	2b00      	cmp	r3, #0
 800577c:	d005      	beq.n	800578a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005782:	f043 0208 	orr.w	r2, r3, #8
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578e:	2b00      	cmp	r3, #0
 8005790:	f000 81ed 	beq.w	8005b6e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005798:	f003 0320 	and.w	r3, r3, #32
 800579c:	2b00      	cmp	r3, #0
 800579e:	d008      	beq.n	80057b2 <HAL_UART_IRQHandler+0x14e>
 80057a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057a4:	f003 0320 	and.w	r3, r3, #32
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d002      	beq.n	80057b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 fb8e 	bl	8005ece <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	695b      	ldr	r3, [r3, #20]
 80057b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057bc:	2b40      	cmp	r3, #64	; 0x40
 80057be:	bf0c      	ite	eq
 80057c0:	2301      	moveq	r3, #1
 80057c2:	2300      	movne	r3, #0
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ce:	f003 0308 	and.w	r3, r3, #8
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d103      	bne.n	80057de <HAL_UART_IRQHandler+0x17a>
 80057d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d04f      	beq.n	800587e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 fa96 	bl	8005d10 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	695b      	ldr	r3, [r3, #20]
 80057ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ee:	2b40      	cmp	r3, #64	; 0x40
 80057f0:	d141      	bne.n	8005876 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	3314      	adds	r3, #20
 80057f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005800:	e853 3f00 	ldrex	r3, [r3]
 8005804:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005808:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800580c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005810:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	3314      	adds	r3, #20
 800581a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800581e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005822:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005826:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800582a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800582e:	e841 2300 	strex	r3, r2, [r1]
 8005832:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005836:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d1d9      	bne.n	80057f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005842:	2b00      	cmp	r3, #0
 8005844:	d013      	beq.n	800586e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800584a:	4a7d      	ldr	r2, [pc, #500]	; (8005a40 <HAL_UART_IRQHandler+0x3dc>)
 800584c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005852:	4618      	mov	r0, r3
 8005854:	f7fd fce1 	bl	800321a <HAL_DMA_Abort_IT>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d016      	beq.n	800588c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005868:	4610      	mov	r0, r2
 800586a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800586c:	e00e      	b.n	800588c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 f990 	bl	8005b94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005874:	e00a      	b.n	800588c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 f98c 	bl	8005b94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800587c:	e006      	b.n	800588c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 f988 	bl	8005b94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800588a:	e170      	b.n	8005b6e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800588c:	bf00      	nop
    return;
 800588e:	e16e      	b.n	8005b6e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005894:	2b01      	cmp	r3, #1
 8005896:	f040 814a 	bne.w	8005b2e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800589a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800589e:	f003 0310 	and.w	r3, r3, #16
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	f000 8143 	beq.w	8005b2e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80058a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058ac:	f003 0310 	and.w	r3, r3, #16
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	f000 813c 	beq.w	8005b2e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80058b6:	2300      	movs	r3, #0
 80058b8:	60bb      	str	r3, [r7, #8]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	60bb      	str	r3, [r7, #8]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	60bb      	str	r3, [r7, #8]
 80058ca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	695b      	ldr	r3, [r3, #20]
 80058d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058d6:	2b40      	cmp	r3, #64	; 0x40
 80058d8:	f040 80b4 	bne.w	8005a44 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80058e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	f000 8140 	beq.w	8005b72 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80058f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80058fa:	429a      	cmp	r2, r3
 80058fc:	f080 8139 	bcs.w	8005b72 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005906:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800590c:	69db      	ldr	r3, [r3, #28]
 800590e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005912:	f000 8088 	beq.w	8005a26 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	330c      	adds	r3, #12
 800591c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005920:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005924:	e853 3f00 	ldrex	r3, [r3]
 8005928:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800592c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005930:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005934:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	330c      	adds	r3, #12
 800593e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005942:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005946:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800594e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005952:	e841 2300 	strex	r3, r2, [r1]
 8005956:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800595a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1d9      	bne.n	8005916 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	3314      	adds	r3, #20
 8005968:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800596a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800596c:	e853 3f00 	ldrex	r3, [r3]
 8005970:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005972:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005974:	f023 0301 	bic.w	r3, r3, #1
 8005978:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	3314      	adds	r3, #20
 8005982:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005986:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800598a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800598c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800598e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005992:	e841 2300 	strex	r3, r2, [r1]
 8005996:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005998:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800599a:	2b00      	cmp	r3, #0
 800599c:	d1e1      	bne.n	8005962 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	3314      	adds	r3, #20
 80059a4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059a8:	e853 3f00 	ldrex	r3, [r3]
 80059ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80059ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	3314      	adds	r3, #20
 80059be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80059c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80059c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80059c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80059ca:	e841 2300 	strex	r3, r2, [r1]
 80059ce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80059d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d1e3      	bne.n	800599e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2220      	movs	r2, #32
 80059da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	330c      	adds	r3, #12
 80059ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059ee:	e853 3f00 	ldrex	r3, [r3]
 80059f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80059f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059f6:	f023 0310 	bic.w	r3, r3, #16
 80059fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	330c      	adds	r3, #12
 8005a04:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005a08:	65ba      	str	r2, [r7, #88]	; 0x58
 8005a0a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a0c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005a0e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a10:	e841 2300 	strex	r3, r2, [r1]
 8005a14:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005a16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d1e3      	bne.n	80059e4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a20:	4618      	mov	r0, r3
 8005a22:	f7fd fb8a 	bl	800313a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	4619      	mov	r1, r3
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 f8b6 	bl	8005ba8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a3c:	e099      	b.n	8005b72 <HAL_UART_IRQHandler+0x50e>
 8005a3e:	bf00      	nop
 8005a40:	08005dd7 	.word	0x08005dd7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	f000 808b 	beq.w	8005b76 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005a60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	f000 8086 	beq.w	8005b76 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	330c      	adds	r3, #12
 8005a70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a74:	e853 3f00 	ldrex	r3, [r3]
 8005a78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	330c      	adds	r3, #12
 8005a8a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005a8e:	647a      	str	r2, [r7, #68]	; 0x44
 8005a90:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a96:	e841 2300 	strex	r3, r2, [r1]
 8005a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d1e3      	bne.n	8005a6a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	3314      	adds	r3, #20
 8005aa8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aac:	e853 3f00 	ldrex	r3, [r3]
 8005ab0:	623b      	str	r3, [r7, #32]
   return(result);
 8005ab2:	6a3b      	ldr	r3, [r7, #32]
 8005ab4:	f023 0301 	bic.w	r3, r3, #1
 8005ab8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	3314      	adds	r3, #20
 8005ac2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005ac6:	633a      	str	r2, [r7, #48]	; 0x30
 8005ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005acc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ace:	e841 2300 	strex	r3, r2, [r1]
 8005ad2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d1e3      	bne.n	8005aa2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2220      	movs	r2, #32
 8005ade:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	330c      	adds	r3, #12
 8005aee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	e853 3f00 	ldrex	r3, [r3]
 8005af6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f023 0310 	bic.w	r3, r3, #16
 8005afe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	330c      	adds	r3, #12
 8005b08:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005b0c:	61fa      	str	r2, [r7, #28]
 8005b0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b10:	69b9      	ldr	r1, [r7, #24]
 8005b12:	69fa      	ldr	r2, [r7, #28]
 8005b14:	e841 2300 	strex	r3, r2, [r1]
 8005b18:	617b      	str	r3, [r7, #20]
   return(result);
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d1e3      	bne.n	8005ae8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b24:	4619      	mov	r1, r3
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 f83e 	bl	8005ba8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b2c:	e023      	b.n	8005b76 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d009      	beq.n	8005b4e <HAL_UART_IRQHandler+0x4ea>
 8005b3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d003      	beq.n	8005b4e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 f959 	bl	8005dfe <UART_Transmit_IT>
    return;
 8005b4c:	e014      	b.n	8005b78 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005b4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d00e      	beq.n	8005b78 <HAL_UART_IRQHandler+0x514>
 8005b5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d008      	beq.n	8005b78 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 f999 	bl	8005e9e <UART_EndTransmit_IT>
    return;
 8005b6c:	e004      	b.n	8005b78 <HAL_UART_IRQHandler+0x514>
    return;
 8005b6e:	bf00      	nop
 8005b70:	e002      	b.n	8005b78 <HAL_UART_IRQHandler+0x514>
      return;
 8005b72:	bf00      	nop
 8005b74:	e000      	b.n	8005b78 <HAL_UART_IRQHandler+0x514>
      return;
 8005b76:	bf00      	nop
  }
}
 8005b78:	37e8      	adds	r7, #232	; 0xe8
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop

08005b80 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005b88:	bf00      	nop
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005b9c:	bf00      	nop
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005bb4:	bf00      	nop
 8005bb6:	370c      	adds	r7, #12
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b090      	sub	sp, #64	; 0x40
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	603b      	str	r3, [r7, #0]
 8005bcc:	4613      	mov	r3, r2
 8005bce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bd0:	e050      	b.n	8005c74 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd8:	d04c      	beq.n	8005c74 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005bda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d007      	beq.n	8005bf0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005be0:	f7fc fd9a 	bl	8002718 <HAL_GetTick>
 8005be4:	4602      	mov	r2, r0
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	1ad3      	subs	r3, r2, r3
 8005bea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d241      	bcs.n	8005c74 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	330c      	adds	r3, #12
 8005bf6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bfa:	e853 3f00 	ldrex	r3, [r3]
 8005bfe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c02:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	330c      	adds	r3, #12
 8005c0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005c10:	637a      	str	r2, [r7, #52]	; 0x34
 8005c12:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c18:	e841 2300 	strex	r3, r2, [r1]
 8005c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d1e5      	bne.n	8005bf0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	3314      	adds	r3, #20
 8005c2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	e853 3f00 	ldrex	r3, [r3]
 8005c32:	613b      	str	r3, [r7, #16]
   return(result);
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	f023 0301 	bic.w	r3, r3, #1
 8005c3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	3314      	adds	r3, #20
 8005c42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c44:	623a      	str	r2, [r7, #32]
 8005c46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c48:	69f9      	ldr	r1, [r7, #28]
 8005c4a:	6a3a      	ldr	r2, [r7, #32]
 8005c4c:	e841 2300 	strex	r3, r2, [r1]
 8005c50:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1e5      	bne.n	8005c24 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2220      	movs	r2, #32
 8005c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2220      	movs	r2, #32
 8005c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005c70:	2303      	movs	r3, #3
 8005c72:	e00f      	b.n	8005c94 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	68ba      	ldr	r2, [r7, #8]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	bf0c      	ite	eq
 8005c84:	2301      	moveq	r3, #1
 8005c86:	2300      	movne	r3, #0
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	79fb      	ldrb	r3, [r7, #7]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d09f      	beq.n	8005bd2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c92:	2300      	movs	r3, #0
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3740      	adds	r7, #64	; 0x40
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b085      	sub	sp, #20
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	68ba      	ldr	r2, [r7, #8]
 8005cae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	88fa      	ldrh	r2, [r7, #6]
 8005cb4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	88fa      	ldrh	r2, [r7, #6]
 8005cba:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2222      	movs	r2, #34	; 0x22
 8005cc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68da      	ldr	r2, [r3, #12]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ce0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	695a      	ldr	r2, [r3, #20]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f042 0201 	orr.w	r2, r2, #1
 8005cf0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	68da      	ldr	r2, [r3, #12]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f042 0220 	orr.w	r2, r2, #32
 8005d00:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005d02:	2300      	movs	r3, #0
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3714      	adds	r7, #20
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b095      	sub	sp, #84	; 0x54
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	330c      	adds	r3, #12
 8005d1e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d22:	e853 3f00 	ldrex	r3, [r3]
 8005d26:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	330c      	adds	r3, #12
 8005d36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d38:	643a      	str	r2, [r7, #64]	; 0x40
 8005d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d40:	e841 2300 	strex	r3, r2, [r1]
 8005d44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d1e5      	bne.n	8005d18 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	3314      	adds	r3, #20
 8005d52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d54:	6a3b      	ldr	r3, [r7, #32]
 8005d56:	e853 3f00 	ldrex	r3, [r3]
 8005d5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	f023 0301 	bic.w	r3, r3, #1
 8005d62:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	3314      	adds	r3, #20
 8005d6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d74:	e841 2300 	strex	r3, r2, [r1]
 8005d78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d1e5      	bne.n	8005d4c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d119      	bne.n	8005dbc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	330c      	adds	r3, #12
 8005d8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	e853 3f00 	ldrex	r3, [r3]
 8005d96:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	f023 0310 	bic.w	r3, r3, #16
 8005d9e:	647b      	str	r3, [r7, #68]	; 0x44
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	330c      	adds	r3, #12
 8005da6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005da8:	61ba      	str	r2, [r7, #24]
 8005daa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dac:	6979      	ldr	r1, [r7, #20]
 8005dae:	69ba      	ldr	r2, [r7, #24]
 8005db0:	e841 2300 	strex	r3, r2, [r1]
 8005db4:	613b      	str	r3, [r7, #16]
   return(result);
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d1e5      	bne.n	8005d88 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2220      	movs	r2, #32
 8005dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005dca:	bf00      	nop
 8005dcc:	3754      	adds	r7, #84	; 0x54
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr

08005dd6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005dd6:	b580      	push	{r7, lr}
 8005dd8:	b084      	sub	sp, #16
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2200      	movs	r2, #0
 8005de8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2200      	movs	r2, #0
 8005dee:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005df0:	68f8      	ldr	r0, [r7, #12]
 8005df2:	f7ff fecf 	bl	8005b94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005df6:	bf00      	nop
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}

08005dfe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005dfe:	b480      	push	{r7}
 8005e00:	b085      	sub	sp, #20
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	2b21      	cmp	r3, #33	; 0x21
 8005e10:	d13e      	bne.n	8005e90 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e1a:	d114      	bne.n	8005e46 <UART_Transmit_IT+0x48>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d110      	bne.n	8005e46 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6a1b      	ldr	r3, [r3, #32]
 8005e28:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	881b      	ldrh	r3, [r3, #0]
 8005e2e:	461a      	mov	r2, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e38:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a1b      	ldr	r3, [r3, #32]
 8005e3e:	1c9a      	adds	r2, r3, #2
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	621a      	str	r2, [r3, #32]
 8005e44:	e008      	b.n	8005e58 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a1b      	ldr	r3, [r3, #32]
 8005e4a:	1c59      	adds	r1, r3, #1
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	6211      	str	r1, [r2, #32]
 8005e50:	781a      	ldrb	r2, [r3, #0]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	4619      	mov	r1, r3
 8005e66:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d10f      	bne.n	8005e8c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	68da      	ldr	r2, [r3, #12]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e7a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	68da      	ldr	r2, [r3, #12]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e8a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	e000      	b.n	8005e92 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005e90:	2302      	movs	r3, #2
  }
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3714      	adds	r7, #20
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr

08005e9e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e9e:	b580      	push	{r7, lr}
 8005ea0:	b082      	sub	sp, #8
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68da      	ldr	r2, [r3, #12]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005eb4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2220      	movs	r2, #32
 8005eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f7ff fe5e 	bl	8005b80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3708      	adds	r7, #8
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}

08005ece <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005ece:	b580      	push	{r7, lr}
 8005ed0:	b08c      	sub	sp, #48	; 0x30
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	2b22      	cmp	r3, #34	; 0x22
 8005ee0:	f040 80ab 	bne.w	800603a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eec:	d117      	bne.n	8005f1e <UART_Receive_IT+0x50>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d113      	bne.n	8005f1e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005efe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f0c:	b29a      	uxth	r2, r3
 8005f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f10:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f16:	1c9a      	adds	r2, r3, #2
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	629a      	str	r2, [r3, #40]	; 0x28
 8005f1c:	e026      	b.n	8005f6c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f22:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005f24:	2300      	movs	r3, #0
 8005f26:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f30:	d007      	beq.n	8005f42 <UART_Receive_IT+0x74>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d10a      	bne.n	8005f50 <UART_Receive_IT+0x82>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d106      	bne.n	8005f50 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	b2da      	uxtb	r2, r3
 8005f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f4c:	701a      	strb	r2, [r3, #0]
 8005f4e:	e008      	b.n	8005f62 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f5c:	b2da      	uxtb	r2, r3
 8005f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f60:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f66:	1c5a      	adds	r2, r3, #1
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	3b01      	subs	r3, #1
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	4619      	mov	r1, r3
 8005f7a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d15a      	bne.n	8006036 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	68da      	ldr	r2, [r3, #12]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f022 0220 	bic.w	r2, r2, #32
 8005f8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68da      	ldr	r2, [r3, #12]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	695a      	ldr	r2, [r3, #20]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f022 0201 	bic.w	r2, r2, #1
 8005fae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2220      	movs	r2, #32
 8005fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d135      	bne.n	800602c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	330c      	adds	r3, #12
 8005fcc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	e853 3f00 	ldrex	r3, [r3]
 8005fd4:	613b      	str	r3, [r7, #16]
   return(result);
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	f023 0310 	bic.w	r3, r3, #16
 8005fdc:	627b      	str	r3, [r7, #36]	; 0x24
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	330c      	adds	r3, #12
 8005fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fe6:	623a      	str	r2, [r7, #32]
 8005fe8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fea:	69f9      	ldr	r1, [r7, #28]
 8005fec:	6a3a      	ldr	r2, [r7, #32]
 8005fee:	e841 2300 	strex	r3, r2, [r1]
 8005ff2:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d1e5      	bne.n	8005fc6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 0310 	and.w	r3, r3, #16
 8006004:	2b10      	cmp	r3, #16
 8006006:	d10a      	bne.n	800601e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006008:	2300      	movs	r3, #0
 800600a:	60fb      	str	r3, [r7, #12]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	60fb      	str	r3, [r7, #12]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	60fb      	str	r3, [r7, #12]
 800601c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006022:	4619      	mov	r1, r3
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f7ff fdbf 	bl	8005ba8 <HAL_UARTEx_RxEventCallback>
 800602a:	e002      	b.n	8006032 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f7fb fe29 	bl	8001c84 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006032:	2300      	movs	r3, #0
 8006034:	e002      	b.n	800603c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006036:	2300      	movs	r3, #0
 8006038:	e000      	b.n	800603c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800603a:	2302      	movs	r3, #2
  }
}
 800603c:	4618      	mov	r0, r3
 800603e:	3730      	adds	r7, #48	; 0x30
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006048:	b09f      	sub	sp, #124	; 0x7c
 800604a:	af00      	add	r7, sp, #0
 800604c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800604e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	691b      	ldr	r3, [r3, #16]
 8006054:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006058:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800605a:	68d9      	ldr	r1, [r3, #12]
 800605c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	ea40 0301 	orr.w	r3, r0, r1
 8006064:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006066:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006068:	689a      	ldr	r2, [r3, #8]
 800606a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	431a      	orrs	r2, r3
 8006070:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006072:	695b      	ldr	r3, [r3, #20]
 8006074:	431a      	orrs	r2, r3
 8006076:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006078:	69db      	ldr	r3, [r3, #28]
 800607a:	4313      	orrs	r3, r2
 800607c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800607e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006088:	f021 010c 	bic.w	r1, r1, #12
 800608c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006092:	430b      	orrs	r3, r1
 8006094:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006096:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	695b      	ldr	r3, [r3, #20]
 800609c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80060a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060a2:	6999      	ldr	r1, [r3, #24]
 80060a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	ea40 0301 	orr.w	r3, r0, r1
 80060ac:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80060ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	4bc5      	ldr	r3, [pc, #788]	; (80063c8 <UART_SetConfig+0x384>)
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d004      	beq.n	80060c2 <UART_SetConfig+0x7e>
 80060b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	4bc3      	ldr	r3, [pc, #780]	; (80063cc <UART_SetConfig+0x388>)
 80060be:	429a      	cmp	r2, r3
 80060c0:	d103      	bne.n	80060ca <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80060c2:	f7fd fb99 	bl	80037f8 <HAL_RCC_GetPCLK2Freq>
 80060c6:	6778      	str	r0, [r7, #116]	; 0x74
 80060c8:	e002      	b.n	80060d0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80060ca:	f7fd fb81 	bl	80037d0 <HAL_RCC_GetPCLK1Freq>
 80060ce:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060d2:	69db      	ldr	r3, [r3, #28]
 80060d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060d8:	f040 80b6 	bne.w	8006248 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80060dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060de:	461c      	mov	r4, r3
 80060e0:	f04f 0500 	mov.w	r5, #0
 80060e4:	4622      	mov	r2, r4
 80060e6:	462b      	mov	r3, r5
 80060e8:	1891      	adds	r1, r2, r2
 80060ea:	6439      	str	r1, [r7, #64]	; 0x40
 80060ec:	415b      	adcs	r3, r3
 80060ee:	647b      	str	r3, [r7, #68]	; 0x44
 80060f0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80060f4:	1912      	adds	r2, r2, r4
 80060f6:	eb45 0303 	adc.w	r3, r5, r3
 80060fa:	f04f 0000 	mov.w	r0, #0
 80060fe:	f04f 0100 	mov.w	r1, #0
 8006102:	00d9      	lsls	r1, r3, #3
 8006104:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006108:	00d0      	lsls	r0, r2, #3
 800610a:	4602      	mov	r2, r0
 800610c:	460b      	mov	r3, r1
 800610e:	1911      	adds	r1, r2, r4
 8006110:	6639      	str	r1, [r7, #96]	; 0x60
 8006112:	416b      	adcs	r3, r5
 8006114:	667b      	str	r3, [r7, #100]	; 0x64
 8006116:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	461a      	mov	r2, r3
 800611c:	f04f 0300 	mov.w	r3, #0
 8006120:	1891      	adds	r1, r2, r2
 8006122:	63b9      	str	r1, [r7, #56]	; 0x38
 8006124:	415b      	adcs	r3, r3
 8006126:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006128:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800612c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006130:	f7fa fdaa 	bl	8000c88 <__aeabi_uldivmod>
 8006134:	4602      	mov	r2, r0
 8006136:	460b      	mov	r3, r1
 8006138:	4ba5      	ldr	r3, [pc, #660]	; (80063d0 <UART_SetConfig+0x38c>)
 800613a:	fba3 2302 	umull	r2, r3, r3, r2
 800613e:	095b      	lsrs	r3, r3, #5
 8006140:	011e      	lsls	r6, r3, #4
 8006142:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006144:	461c      	mov	r4, r3
 8006146:	f04f 0500 	mov.w	r5, #0
 800614a:	4622      	mov	r2, r4
 800614c:	462b      	mov	r3, r5
 800614e:	1891      	adds	r1, r2, r2
 8006150:	6339      	str	r1, [r7, #48]	; 0x30
 8006152:	415b      	adcs	r3, r3
 8006154:	637b      	str	r3, [r7, #52]	; 0x34
 8006156:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800615a:	1912      	adds	r2, r2, r4
 800615c:	eb45 0303 	adc.w	r3, r5, r3
 8006160:	f04f 0000 	mov.w	r0, #0
 8006164:	f04f 0100 	mov.w	r1, #0
 8006168:	00d9      	lsls	r1, r3, #3
 800616a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800616e:	00d0      	lsls	r0, r2, #3
 8006170:	4602      	mov	r2, r0
 8006172:	460b      	mov	r3, r1
 8006174:	1911      	adds	r1, r2, r4
 8006176:	65b9      	str	r1, [r7, #88]	; 0x58
 8006178:	416b      	adcs	r3, r5
 800617a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800617c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	461a      	mov	r2, r3
 8006182:	f04f 0300 	mov.w	r3, #0
 8006186:	1891      	adds	r1, r2, r2
 8006188:	62b9      	str	r1, [r7, #40]	; 0x28
 800618a:	415b      	adcs	r3, r3
 800618c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800618e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006192:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006196:	f7fa fd77 	bl	8000c88 <__aeabi_uldivmod>
 800619a:	4602      	mov	r2, r0
 800619c:	460b      	mov	r3, r1
 800619e:	4b8c      	ldr	r3, [pc, #560]	; (80063d0 <UART_SetConfig+0x38c>)
 80061a0:	fba3 1302 	umull	r1, r3, r3, r2
 80061a4:	095b      	lsrs	r3, r3, #5
 80061a6:	2164      	movs	r1, #100	; 0x64
 80061a8:	fb01 f303 	mul.w	r3, r1, r3
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	00db      	lsls	r3, r3, #3
 80061b0:	3332      	adds	r3, #50	; 0x32
 80061b2:	4a87      	ldr	r2, [pc, #540]	; (80063d0 <UART_SetConfig+0x38c>)
 80061b4:	fba2 2303 	umull	r2, r3, r2, r3
 80061b8:	095b      	lsrs	r3, r3, #5
 80061ba:	005b      	lsls	r3, r3, #1
 80061bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80061c0:	441e      	add	r6, r3
 80061c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061c4:	4618      	mov	r0, r3
 80061c6:	f04f 0100 	mov.w	r1, #0
 80061ca:	4602      	mov	r2, r0
 80061cc:	460b      	mov	r3, r1
 80061ce:	1894      	adds	r4, r2, r2
 80061d0:	623c      	str	r4, [r7, #32]
 80061d2:	415b      	adcs	r3, r3
 80061d4:	627b      	str	r3, [r7, #36]	; 0x24
 80061d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80061da:	1812      	adds	r2, r2, r0
 80061dc:	eb41 0303 	adc.w	r3, r1, r3
 80061e0:	f04f 0400 	mov.w	r4, #0
 80061e4:	f04f 0500 	mov.w	r5, #0
 80061e8:	00dd      	lsls	r5, r3, #3
 80061ea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80061ee:	00d4      	lsls	r4, r2, #3
 80061f0:	4622      	mov	r2, r4
 80061f2:	462b      	mov	r3, r5
 80061f4:	1814      	adds	r4, r2, r0
 80061f6:	653c      	str	r4, [r7, #80]	; 0x50
 80061f8:	414b      	adcs	r3, r1
 80061fa:	657b      	str	r3, [r7, #84]	; 0x54
 80061fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	461a      	mov	r2, r3
 8006202:	f04f 0300 	mov.w	r3, #0
 8006206:	1891      	adds	r1, r2, r2
 8006208:	61b9      	str	r1, [r7, #24]
 800620a:	415b      	adcs	r3, r3
 800620c:	61fb      	str	r3, [r7, #28]
 800620e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006212:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006216:	f7fa fd37 	bl	8000c88 <__aeabi_uldivmod>
 800621a:	4602      	mov	r2, r0
 800621c:	460b      	mov	r3, r1
 800621e:	4b6c      	ldr	r3, [pc, #432]	; (80063d0 <UART_SetConfig+0x38c>)
 8006220:	fba3 1302 	umull	r1, r3, r3, r2
 8006224:	095b      	lsrs	r3, r3, #5
 8006226:	2164      	movs	r1, #100	; 0x64
 8006228:	fb01 f303 	mul.w	r3, r1, r3
 800622c:	1ad3      	subs	r3, r2, r3
 800622e:	00db      	lsls	r3, r3, #3
 8006230:	3332      	adds	r3, #50	; 0x32
 8006232:	4a67      	ldr	r2, [pc, #412]	; (80063d0 <UART_SetConfig+0x38c>)
 8006234:	fba2 2303 	umull	r2, r3, r2, r3
 8006238:	095b      	lsrs	r3, r3, #5
 800623a:	f003 0207 	and.w	r2, r3, #7
 800623e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4432      	add	r2, r6
 8006244:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006246:	e0b9      	b.n	80063bc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006248:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800624a:	461c      	mov	r4, r3
 800624c:	f04f 0500 	mov.w	r5, #0
 8006250:	4622      	mov	r2, r4
 8006252:	462b      	mov	r3, r5
 8006254:	1891      	adds	r1, r2, r2
 8006256:	6139      	str	r1, [r7, #16]
 8006258:	415b      	adcs	r3, r3
 800625a:	617b      	str	r3, [r7, #20]
 800625c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006260:	1912      	adds	r2, r2, r4
 8006262:	eb45 0303 	adc.w	r3, r5, r3
 8006266:	f04f 0000 	mov.w	r0, #0
 800626a:	f04f 0100 	mov.w	r1, #0
 800626e:	00d9      	lsls	r1, r3, #3
 8006270:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006274:	00d0      	lsls	r0, r2, #3
 8006276:	4602      	mov	r2, r0
 8006278:	460b      	mov	r3, r1
 800627a:	eb12 0804 	adds.w	r8, r2, r4
 800627e:	eb43 0905 	adc.w	r9, r3, r5
 8006282:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	4618      	mov	r0, r3
 8006288:	f04f 0100 	mov.w	r1, #0
 800628c:	f04f 0200 	mov.w	r2, #0
 8006290:	f04f 0300 	mov.w	r3, #0
 8006294:	008b      	lsls	r3, r1, #2
 8006296:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800629a:	0082      	lsls	r2, r0, #2
 800629c:	4640      	mov	r0, r8
 800629e:	4649      	mov	r1, r9
 80062a0:	f7fa fcf2 	bl	8000c88 <__aeabi_uldivmod>
 80062a4:	4602      	mov	r2, r0
 80062a6:	460b      	mov	r3, r1
 80062a8:	4b49      	ldr	r3, [pc, #292]	; (80063d0 <UART_SetConfig+0x38c>)
 80062aa:	fba3 2302 	umull	r2, r3, r3, r2
 80062ae:	095b      	lsrs	r3, r3, #5
 80062b0:	011e      	lsls	r6, r3, #4
 80062b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062b4:	4618      	mov	r0, r3
 80062b6:	f04f 0100 	mov.w	r1, #0
 80062ba:	4602      	mov	r2, r0
 80062bc:	460b      	mov	r3, r1
 80062be:	1894      	adds	r4, r2, r2
 80062c0:	60bc      	str	r4, [r7, #8]
 80062c2:	415b      	adcs	r3, r3
 80062c4:	60fb      	str	r3, [r7, #12]
 80062c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80062ca:	1812      	adds	r2, r2, r0
 80062cc:	eb41 0303 	adc.w	r3, r1, r3
 80062d0:	f04f 0400 	mov.w	r4, #0
 80062d4:	f04f 0500 	mov.w	r5, #0
 80062d8:	00dd      	lsls	r5, r3, #3
 80062da:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80062de:	00d4      	lsls	r4, r2, #3
 80062e0:	4622      	mov	r2, r4
 80062e2:	462b      	mov	r3, r5
 80062e4:	1814      	adds	r4, r2, r0
 80062e6:	64bc      	str	r4, [r7, #72]	; 0x48
 80062e8:	414b      	adcs	r3, r1
 80062ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	4618      	mov	r0, r3
 80062f2:	f04f 0100 	mov.w	r1, #0
 80062f6:	f04f 0200 	mov.w	r2, #0
 80062fa:	f04f 0300 	mov.w	r3, #0
 80062fe:	008b      	lsls	r3, r1, #2
 8006300:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006304:	0082      	lsls	r2, r0, #2
 8006306:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800630a:	f7fa fcbd 	bl	8000c88 <__aeabi_uldivmod>
 800630e:	4602      	mov	r2, r0
 8006310:	460b      	mov	r3, r1
 8006312:	4b2f      	ldr	r3, [pc, #188]	; (80063d0 <UART_SetConfig+0x38c>)
 8006314:	fba3 1302 	umull	r1, r3, r3, r2
 8006318:	095b      	lsrs	r3, r3, #5
 800631a:	2164      	movs	r1, #100	; 0x64
 800631c:	fb01 f303 	mul.w	r3, r1, r3
 8006320:	1ad3      	subs	r3, r2, r3
 8006322:	011b      	lsls	r3, r3, #4
 8006324:	3332      	adds	r3, #50	; 0x32
 8006326:	4a2a      	ldr	r2, [pc, #168]	; (80063d0 <UART_SetConfig+0x38c>)
 8006328:	fba2 2303 	umull	r2, r3, r2, r3
 800632c:	095b      	lsrs	r3, r3, #5
 800632e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006332:	441e      	add	r6, r3
 8006334:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006336:	4618      	mov	r0, r3
 8006338:	f04f 0100 	mov.w	r1, #0
 800633c:	4602      	mov	r2, r0
 800633e:	460b      	mov	r3, r1
 8006340:	1894      	adds	r4, r2, r2
 8006342:	603c      	str	r4, [r7, #0]
 8006344:	415b      	adcs	r3, r3
 8006346:	607b      	str	r3, [r7, #4]
 8006348:	e9d7 2300 	ldrd	r2, r3, [r7]
 800634c:	1812      	adds	r2, r2, r0
 800634e:	eb41 0303 	adc.w	r3, r1, r3
 8006352:	f04f 0400 	mov.w	r4, #0
 8006356:	f04f 0500 	mov.w	r5, #0
 800635a:	00dd      	lsls	r5, r3, #3
 800635c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006360:	00d4      	lsls	r4, r2, #3
 8006362:	4622      	mov	r2, r4
 8006364:	462b      	mov	r3, r5
 8006366:	eb12 0a00 	adds.w	sl, r2, r0
 800636a:	eb43 0b01 	adc.w	fp, r3, r1
 800636e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	4618      	mov	r0, r3
 8006374:	f04f 0100 	mov.w	r1, #0
 8006378:	f04f 0200 	mov.w	r2, #0
 800637c:	f04f 0300 	mov.w	r3, #0
 8006380:	008b      	lsls	r3, r1, #2
 8006382:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006386:	0082      	lsls	r2, r0, #2
 8006388:	4650      	mov	r0, sl
 800638a:	4659      	mov	r1, fp
 800638c:	f7fa fc7c 	bl	8000c88 <__aeabi_uldivmod>
 8006390:	4602      	mov	r2, r0
 8006392:	460b      	mov	r3, r1
 8006394:	4b0e      	ldr	r3, [pc, #56]	; (80063d0 <UART_SetConfig+0x38c>)
 8006396:	fba3 1302 	umull	r1, r3, r3, r2
 800639a:	095b      	lsrs	r3, r3, #5
 800639c:	2164      	movs	r1, #100	; 0x64
 800639e:	fb01 f303 	mul.w	r3, r1, r3
 80063a2:	1ad3      	subs	r3, r2, r3
 80063a4:	011b      	lsls	r3, r3, #4
 80063a6:	3332      	adds	r3, #50	; 0x32
 80063a8:	4a09      	ldr	r2, [pc, #36]	; (80063d0 <UART_SetConfig+0x38c>)
 80063aa:	fba2 2303 	umull	r2, r3, r2, r3
 80063ae:	095b      	lsrs	r3, r3, #5
 80063b0:	f003 020f 	and.w	r2, r3, #15
 80063b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4432      	add	r2, r6
 80063ba:	609a      	str	r2, [r3, #8]
}
 80063bc:	bf00      	nop
 80063be:	377c      	adds	r7, #124	; 0x7c
 80063c0:	46bd      	mov	sp, r7
 80063c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063c6:	bf00      	nop
 80063c8:	40011000 	.word	0x40011000
 80063cc:	40011400 	.word	0x40011400
 80063d0:	51eb851f 	.word	0x51eb851f

080063d4 <__errno>:
 80063d4:	4b01      	ldr	r3, [pc, #4]	; (80063dc <__errno+0x8>)
 80063d6:	6818      	ldr	r0, [r3, #0]
 80063d8:	4770      	bx	lr
 80063da:	bf00      	nop
 80063dc:	20000020 	.word	0x20000020

080063e0 <__libc_init_array>:
 80063e0:	b570      	push	{r4, r5, r6, lr}
 80063e2:	4d0d      	ldr	r5, [pc, #52]	; (8006418 <__libc_init_array+0x38>)
 80063e4:	4c0d      	ldr	r4, [pc, #52]	; (800641c <__libc_init_array+0x3c>)
 80063e6:	1b64      	subs	r4, r4, r5
 80063e8:	10a4      	asrs	r4, r4, #2
 80063ea:	2600      	movs	r6, #0
 80063ec:	42a6      	cmp	r6, r4
 80063ee:	d109      	bne.n	8006404 <__libc_init_array+0x24>
 80063f0:	4d0b      	ldr	r5, [pc, #44]	; (8006420 <__libc_init_array+0x40>)
 80063f2:	4c0c      	ldr	r4, [pc, #48]	; (8006424 <__libc_init_array+0x44>)
 80063f4:	f002 fd7e 	bl	8008ef4 <_init>
 80063f8:	1b64      	subs	r4, r4, r5
 80063fa:	10a4      	asrs	r4, r4, #2
 80063fc:	2600      	movs	r6, #0
 80063fe:	42a6      	cmp	r6, r4
 8006400:	d105      	bne.n	800640e <__libc_init_array+0x2e>
 8006402:	bd70      	pop	{r4, r5, r6, pc}
 8006404:	f855 3b04 	ldr.w	r3, [r5], #4
 8006408:	4798      	blx	r3
 800640a:	3601      	adds	r6, #1
 800640c:	e7ee      	b.n	80063ec <__libc_init_array+0xc>
 800640e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006412:	4798      	blx	r3
 8006414:	3601      	adds	r6, #1
 8006416:	e7f2      	b.n	80063fe <__libc_init_array+0x1e>
 8006418:	0800940c 	.word	0x0800940c
 800641c:	0800940c 	.word	0x0800940c
 8006420:	0800940c 	.word	0x0800940c
 8006424:	08009410 	.word	0x08009410

08006428 <memset>:
 8006428:	4402      	add	r2, r0
 800642a:	4603      	mov	r3, r0
 800642c:	4293      	cmp	r3, r2
 800642e:	d100      	bne.n	8006432 <memset+0xa>
 8006430:	4770      	bx	lr
 8006432:	f803 1b01 	strb.w	r1, [r3], #1
 8006436:	e7f9      	b.n	800642c <memset+0x4>

08006438 <__cvt>:
 8006438:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800643c:	ec55 4b10 	vmov	r4, r5, d0
 8006440:	2d00      	cmp	r5, #0
 8006442:	460e      	mov	r6, r1
 8006444:	4619      	mov	r1, r3
 8006446:	462b      	mov	r3, r5
 8006448:	bfbb      	ittet	lt
 800644a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800644e:	461d      	movlt	r5, r3
 8006450:	2300      	movge	r3, #0
 8006452:	232d      	movlt	r3, #45	; 0x2d
 8006454:	700b      	strb	r3, [r1, #0]
 8006456:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006458:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800645c:	4691      	mov	r9, r2
 800645e:	f023 0820 	bic.w	r8, r3, #32
 8006462:	bfbc      	itt	lt
 8006464:	4622      	movlt	r2, r4
 8006466:	4614      	movlt	r4, r2
 8006468:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800646c:	d005      	beq.n	800647a <__cvt+0x42>
 800646e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006472:	d100      	bne.n	8006476 <__cvt+0x3e>
 8006474:	3601      	adds	r6, #1
 8006476:	2102      	movs	r1, #2
 8006478:	e000      	b.n	800647c <__cvt+0x44>
 800647a:	2103      	movs	r1, #3
 800647c:	ab03      	add	r3, sp, #12
 800647e:	9301      	str	r3, [sp, #4]
 8006480:	ab02      	add	r3, sp, #8
 8006482:	9300      	str	r3, [sp, #0]
 8006484:	ec45 4b10 	vmov	d0, r4, r5
 8006488:	4653      	mov	r3, sl
 800648a:	4632      	mov	r2, r6
 800648c:	f000 fe18 	bl	80070c0 <_dtoa_r>
 8006490:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006494:	4607      	mov	r7, r0
 8006496:	d102      	bne.n	800649e <__cvt+0x66>
 8006498:	f019 0f01 	tst.w	r9, #1
 800649c:	d022      	beq.n	80064e4 <__cvt+0xac>
 800649e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80064a2:	eb07 0906 	add.w	r9, r7, r6
 80064a6:	d110      	bne.n	80064ca <__cvt+0x92>
 80064a8:	783b      	ldrb	r3, [r7, #0]
 80064aa:	2b30      	cmp	r3, #48	; 0x30
 80064ac:	d10a      	bne.n	80064c4 <__cvt+0x8c>
 80064ae:	2200      	movs	r2, #0
 80064b0:	2300      	movs	r3, #0
 80064b2:	4620      	mov	r0, r4
 80064b4:	4629      	mov	r1, r5
 80064b6:	f7fa fb27 	bl	8000b08 <__aeabi_dcmpeq>
 80064ba:	b918      	cbnz	r0, 80064c4 <__cvt+0x8c>
 80064bc:	f1c6 0601 	rsb	r6, r6, #1
 80064c0:	f8ca 6000 	str.w	r6, [sl]
 80064c4:	f8da 3000 	ldr.w	r3, [sl]
 80064c8:	4499      	add	r9, r3
 80064ca:	2200      	movs	r2, #0
 80064cc:	2300      	movs	r3, #0
 80064ce:	4620      	mov	r0, r4
 80064d0:	4629      	mov	r1, r5
 80064d2:	f7fa fb19 	bl	8000b08 <__aeabi_dcmpeq>
 80064d6:	b108      	cbz	r0, 80064dc <__cvt+0xa4>
 80064d8:	f8cd 900c 	str.w	r9, [sp, #12]
 80064dc:	2230      	movs	r2, #48	; 0x30
 80064de:	9b03      	ldr	r3, [sp, #12]
 80064e0:	454b      	cmp	r3, r9
 80064e2:	d307      	bcc.n	80064f4 <__cvt+0xbc>
 80064e4:	9b03      	ldr	r3, [sp, #12]
 80064e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80064e8:	1bdb      	subs	r3, r3, r7
 80064ea:	4638      	mov	r0, r7
 80064ec:	6013      	str	r3, [r2, #0]
 80064ee:	b004      	add	sp, #16
 80064f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064f4:	1c59      	adds	r1, r3, #1
 80064f6:	9103      	str	r1, [sp, #12]
 80064f8:	701a      	strb	r2, [r3, #0]
 80064fa:	e7f0      	b.n	80064de <__cvt+0xa6>

080064fc <__exponent>:
 80064fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064fe:	4603      	mov	r3, r0
 8006500:	2900      	cmp	r1, #0
 8006502:	bfb8      	it	lt
 8006504:	4249      	neglt	r1, r1
 8006506:	f803 2b02 	strb.w	r2, [r3], #2
 800650a:	bfb4      	ite	lt
 800650c:	222d      	movlt	r2, #45	; 0x2d
 800650e:	222b      	movge	r2, #43	; 0x2b
 8006510:	2909      	cmp	r1, #9
 8006512:	7042      	strb	r2, [r0, #1]
 8006514:	dd2a      	ble.n	800656c <__exponent+0x70>
 8006516:	f10d 0407 	add.w	r4, sp, #7
 800651a:	46a4      	mov	ip, r4
 800651c:	270a      	movs	r7, #10
 800651e:	46a6      	mov	lr, r4
 8006520:	460a      	mov	r2, r1
 8006522:	fb91 f6f7 	sdiv	r6, r1, r7
 8006526:	fb07 1516 	mls	r5, r7, r6, r1
 800652a:	3530      	adds	r5, #48	; 0x30
 800652c:	2a63      	cmp	r2, #99	; 0x63
 800652e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006532:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006536:	4631      	mov	r1, r6
 8006538:	dcf1      	bgt.n	800651e <__exponent+0x22>
 800653a:	3130      	adds	r1, #48	; 0x30
 800653c:	f1ae 0502 	sub.w	r5, lr, #2
 8006540:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006544:	1c44      	adds	r4, r0, #1
 8006546:	4629      	mov	r1, r5
 8006548:	4561      	cmp	r1, ip
 800654a:	d30a      	bcc.n	8006562 <__exponent+0x66>
 800654c:	f10d 0209 	add.w	r2, sp, #9
 8006550:	eba2 020e 	sub.w	r2, r2, lr
 8006554:	4565      	cmp	r5, ip
 8006556:	bf88      	it	hi
 8006558:	2200      	movhi	r2, #0
 800655a:	4413      	add	r3, r2
 800655c:	1a18      	subs	r0, r3, r0
 800655e:	b003      	add	sp, #12
 8006560:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006562:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006566:	f804 2f01 	strb.w	r2, [r4, #1]!
 800656a:	e7ed      	b.n	8006548 <__exponent+0x4c>
 800656c:	2330      	movs	r3, #48	; 0x30
 800656e:	3130      	adds	r1, #48	; 0x30
 8006570:	7083      	strb	r3, [r0, #2]
 8006572:	70c1      	strb	r1, [r0, #3]
 8006574:	1d03      	adds	r3, r0, #4
 8006576:	e7f1      	b.n	800655c <__exponent+0x60>

08006578 <_printf_float>:
 8006578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800657c:	ed2d 8b02 	vpush	{d8}
 8006580:	b08d      	sub	sp, #52	; 0x34
 8006582:	460c      	mov	r4, r1
 8006584:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006588:	4616      	mov	r6, r2
 800658a:	461f      	mov	r7, r3
 800658c:	4605      	mov	r5, r0
 800658e:	f001 fd3b 	bl	8008008 <_localeconv_r>
 8006592:	f8d0 a000 	ldr.w	sl, [r0]
 8006596:	4650      	mov	r0, sl
 8006598:	f7f9 fe3a 	bl	8000210 <strlen>
 800659c:	2300      	movs	r3, #0
 800659e:	930a      	str	r3, [sp, #40]	; 0x28
 80065a0:	6823      	ldr	r3, [r4, #0]
 80065a2:	9305      	str	r3, [sp, #20]
 80065a4:	f8d8 3000 	ldr.w	r3, [r8]
 80065a8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80065ac:	3307      	adds	r3, #7
 80065ae:	f023 0307 	bic.w	r3, r3, #7
 80065b2:	f103 0208 	add.w	r2, r3, #8
 80065b6:	f8c8 2000 	str.w	r2, [r8]
 80065ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065be:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80065c2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80065c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80065ca:	9307      	str	r3, [sp, #28]
 80065cc:	f8cd 8018 	str.w	r8, [sp, #24]
 80065d0:	ee08 0a10 	vmov	s16, r0
 80065d4:	4b9f      	ldr	r3, [pc, #636]	; (8006854 <_printf_float+0x2dc>)
 80065d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065da:	f04f 32ff 	mov.w	r2, #4294967295
 80065de:	f7fa fac5 	bl	8000b6c <__aeabi_dcmpun>
 80065e2:	bb88      	cbnz	r0, 8006648 <_printf_float+0xd0>
 80065e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065e8:	4b9a      	ldr	r3, [pc, #616]	; (8006854 <_printf_float+0x2dc>)
 80065ea:	f04f 32ff 	mov.w	r2, #4294967295
 80065ee:	f7fa fa9f 	bl	8000b30 <__aeabi_dcmple>
 80065f2:	bb48      	cbnz	r0, 8006648 <_printf_float+0xd0>
 80065f4:	2200      	movs	r2, #0
 80065f6:	2300      	movs	r3, #0
 80065f8:	4640      	mov	r0, r8
 80065fa:	4649      	mov	r1, r9
 80065fc:	f7fa fa8e 	bl	8000b1c <__aeabi_dcmplt>
 8006600:	b110      	cbz	r0, 8006608 <_printf_float+0x90>
 8006602:	232d      	movs	r3, #45	; 0x2d
 8006604:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006608:	4b93      	ldr	r3, [pc, #588]	; (8006858 <_printf_float+0x2e0>)
 800660a:	4894      	ldr	r0, [pc, #592]	; (800685c <_printf_float+0x2e4>)
 800660c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006610:	bf94      	ite	ls
 8006612:	4698      	movls	r8, r3
 8006614:	4680      	movhi	r8, r0
 8006616:	2303      	movs	r3, #3
 8006618:	6123      	str	r3, [r4, #16]
 800661a:	9b05      	ldr	r3, [sp, #20]
 800661c:	f023 0204 	bic.w	r2, r3, #4
 8006620:	6022      	str	r2, [r4, #0]
 8006622:	f04f 0900 	mov.w	r9, #0
 8006626:	9700      	str	r7, [sp, #0]
 8006628:	4633      	mov	r3, r6
 800662a:	aa0b      	add	r2, sp, #44	; 0x2c
 800662c:	4621      	mov	r1, r4
 800662e:	4628      	mov	r0, r5
 8006630:	f000 f9d8 	bl	80069e4 <_printf_common>
 8006634:	3001      	adds	r0, #1
 8006636:	f040 8090 	bne.w	800675a <_printf_float+0x1e2>
 800663a:	f04f 30ff 	mov.w	r0, #4294967295
 800663e:	b00d      	add	sp, #52	; 0x34
 8006640:	ecbd 8b02 	vpop	{d8}
 8006644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006648:	4642      	mov	r2, r8
 800664a:	464b      	mov	r3, r9
 800664c:	4640      	mov	r0, r8
 800664e:	4649      	mov	r1, r9
 8006650:	f7fa fa8c 	bl	8000b6c <__aeabi_dcmpun>
 8006654:	b140      	cbz	r0, 8006668 <_printf_float+0xf0>
 8006656:	464b      	mov	r3, r9
 8006658:	2b00      	cmp	r3, #0
 800665a:	bfbc      	itt	lt
 800665c:	232d      	movlt	r3, #45	; 0x2d
 800665e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006662:	487f      	ldr	r0, [pc, #508]	; (8006860 <_printf_float+0x2e8>)
 8006664:	4b7f      	ldr	r3, [pc, #508]	; (8006864 <_printf_float+0x2ec>)
 8006666:	e7d1      	b.n	800660c <_printf_float+0x94>
 8006668:	6863      	ldr	r3, [r4, #4]
 800666a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800666e:	9206      	str	r2, [sp, #24]
 8006670:	1c5a      	adds	r2, r3, #1
 8006672:	d13f      	bne.n	80066f4 <_printf_float+0x17c>
 8006674:	2306      	movs	r3, #6
 8006676:	6063      	str	r3, [r4, #4]
 8006678:	9b05      	ldr	r3, [sp, #20]
 800667a:	6861      	ldr	r1, [r4, #4]
 800667c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006680:	2300      	movs	r3, #0
 8006682:	9303      	str	r3, [sp, #12]
 8006684:	ab0a      	add	r3, sp, #40	; 0x28
 8006686:	e9cd b301 	strd	fp, r3, [sp, #4]
 800668a:	ab09      	add	r3, sp, #36	; 0x24
 800668c:	ec49 8b10 	vmov	d0, r8, r9
 8006690:	9300      	str	r3, [sp, #0]
 8006692:	6022      	str	r2, [r4, #0]
 8006694:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006698:	4628      	mov	r0, r5
 800669a:	f7ff fecd 	bl	8006438 <__cvt>
 800669e:	9b06      	ldr	r3, [sp, #24]
 80066a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80066a2:	2b47      	cmp	r3, #71	; 0x47
 80066a4:	4680      	mov	r8, r0
 80066a6:	d108      	bne.n	80066ba <_printf_float+0x142>
 80066a8:	1cc8      	adds	r0, r1, #3
 80066aa:	db02      	blt.n	80066b2 <_printf_float+0x13a>
 80066ac:	6863      	ldr	r3, [r4, #4]
 80066ae:	4299      	cmp	r1, r3
 80066b0:	dd41      	ble.n	8006736 <_printf_float+0x1be>
 80066b2:	f1ab 0b02 	sub.w	fp, fp, #2
 80066b6:	fa5f fb8b 	uxtb.w	fp, fp
 80066ba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80066be:	d820      	bhi.n	8006702 <_printf_float+0x18a>
 80066c0:	3901      	subs	r1, #1
 80066c2:	465a      	mov	r2, fp
 80066c4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80066c8:	9109      	str	r1, [sp, #36]	; 0x24
 80066ca:	f7ff ff17 	bl	80064fc <__exponent>
 80066ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066d0:	1813      	adds	r3, r2, r0
 80066d2:	2a01      	cmp	r2, #1
 80066d4:	4681      	mov	r9, r0
 80066d6:	6123      	str	r3, [r4, #16]
 80066d8:	dc02      	bgt.n	80066e0 <_printf_float+0x168>
 80066da:	6822      	ldr	r2, [r4, #0]
 80066dc:	07d2      	lsls	r2, r2, #31
 80066de:	d501      	bpl.n	80066e4 <_printf_float+0x16c>
 80066e0:	3301      	adds	r3, #1
 80066e2:	6123      	str	r3, [r4, #16]
 80066e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d09c      	beq.n	8006626 <_printf_float+0xae>
 80066ec:	232d      	movs	r3, #45	; 0x2d
 80066ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066f2:	e798      	b.n	8006626 <_printf_float+0xae>
 80066f4:	9a06      	ldr	r2, [sp, #24]
 80066f6:	2a47      	cmp	r2, #71	; 0x47
 80066f8:	d1be      	bne.n	8006678 <_printf_float+0x100>
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d1bc      	bne.n	8006678 <_printf_float+0x100>
 80066fe:	2301      	movs	r3, #1
 8006700:	e7b9      	b.n	8006676 <_printf_float+0xfe>
 8006702:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006706:	d118      	bne.n	800673a <_printf_float+0x1c2>
 8006708:	2900      	cmp	r1, #0
 800670a:	6863      	ldr	r3, [r4, #4]
 800670c:	dd0b      	ble.n	8006726 <_printf_float+0x1ae>
 800670e:	6121      	str	r1, [r4, #16]
 8006710:	b913      	cbnz	r3, 8006718 <_printf_float+0x1a0>
 8006712:	6822      	ldr	r2, [r4, #0]
 8006714:	07d0      	lsls	r0, r2, #31
 8006716:	d502      	bpl.n	800671e <_printf_float+0x1a6>
 8006718:	3301      	adds	r3, #1
 800671a:	440b      	add	r3, r1
 800671c:	6123      	str	r3, [r4, #16]
 800671e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006720:	f04f 0900 	mov.w	r9, #0
 8006724:	e7de      	b.n	80066e4 <_printf_float+0x16c>
 8006726:	b913      	cbnz	r3, 800672e <_printf_float+0x1b6>
 8006728:	6822      	ldr	r2, [r4, #0]
 800672a:	07d2      	lsls	r2, r2, #31
 800672c:	d501      	bpl.n	8006732 <_printf_float+0x1ba>
 800672e:	3302      	adds	r3, #2
 8006730:	e7f4      	b.n	800671c <_printf_float+0x1a4>
 8006732:	2301      	movs	r3, #1
 8006734:	e7f2      	b.n	800671c <_printf_float+0x1a4>
 8006736:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800673a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800673c:	4299      	cmp	r1, r3
 800673e:	db05      	blt.n	800674c <_printf_float+0x1d4>
 8006740:	6823      	ldr	r3, [r4, #0]
 8006742:	6121      	str	r1, [r4, #16]
 8006744:	07d8      	lsls	r0, r3, #31
 8006746:	d5ea      	bpl.n	800671e <_printf_float+0x1a6>
 8006748:	1c4b      	adds	r3, r1, #1
 800674a:	e7e7      	b.n	800671c <_printf_float+0x1a4>
 800674c:	2900      	cmp	r1, #0
 800674e:	bfd4      	ite	le
 8006750:	f1c1 0202 	rsble	r2, r1, #2
 8006754:	2201      	movgt	r2, #1
 8006756:	4413      	add	r3, r2
 8006758:	e7e0      	b.n	800671c <_printf_float+0x1a4>
 800675a:	6823      	ldr	r3, [r4, #0]
 800675c:	055a      	lsls	r2, r3, #21
 800675e:	d407      	bmi.n	8006770 <_printf_float+0x1f8>
 8006760:	6923      	ldr	r3, [r4, #16]
 8006762:	4642      	mov	r2, r8
 8006764:	4631      	mov	r1, r6
 8006766:	4628      	mov	r0, r5
 8006768:	47b8      	blx	r7
 800676a:	3001      	adds	r0, #1
 800676c:	d12c      	bne.n	80067c8 <_printf_float+0x250>
 800676e:	e764      	b.n	800663a <_printf_float+0xc2>
 8006770:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006774:	f240 80e0 	bls.w	8006938 <_printf_float+0x3c0>
 8006778:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800677c:	2200      	movs	r2, #0
 800677e:	2300      	movs	r3, #0
 8006780:	f7fa f9c2 	bl	8000b08 <__aeabi_dcmpeq>
 8006784:	2800      	cmp	r0, #0
 8006786:	d034      	beq.n	80067f2 <_printf_float+0x27a>
 8006788:	4a37      	ldr	r2, [pc, #220]	; (8006868 <_printf_float+0x2f0>)
 800678a:	2301      	movs	r3, #1
 800678c:	4631      	mov	r1, r6
 800678e:	4628      	mov	r0, r5
 8006790:	47b8      	blx	r7
 8006792:	3001      	adds	r0, #1
 8006794:	f43f af51 	beq.w	800663a <_printf_float+0xc2>
 8006798:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800679c:	429a      	cmp	r2, r3
 800679e:	db02      	blt.n	80067a6 <_printf_float+0x22e>
 80067a0:	6823      	ldr	r3, [r4, #0]
 80067a2:	07d8      	lsls	r0, r3, #31
 80067a4:	d510      	bpl.n	80067c8 <_printf_float+0x250>
 80067a6:	ee18 3a10 	vmov	r3, s16
 80067aa:	4652      	mov	r2, sl
 80067ac:	4631      	mov	r1, r6
 80067ae:	4628      	mov	r0, r5
 80067b0:	47b8      	blx	r7
 80067b2:	3001      	adds	r0, #1
 80067b4:	f43f af41 	beq.w	800663a <_printf_float+0xc2>
 80067b8:	f04f 0800 	mov.w	r8, #0
 80067bc:	f104 091a 	add.w	r9, r4, #26
 80067c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067c2:	3b01      	subs	r3, #1
 80067c4:	4543      	cmp	r3, r8
 80067c6:	dc09      	bgt.n	80067dc <_printf_float+0x264>
 80067c8:	6823      	ldr	r3, [r4, #0]
 80067ca:	079b      	lsls	r3, r3, #30
 80067cc:	f100 8105 	bmi.w	80069da <_printf_float+0x462>
 80067d0:	68e0      	ldr	r0, [r4, #12]
 80067d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067d4:	4298      	cmp	r0, r3
 80067d6:	bfb8      	it	lt
 80067d8:	4618      	movlt	r0, r3
 80067da:	e730      	b.n	800663e <_printf_float+0xc6>
 80067dc:	2301      	movs	r3, #1
 80067de:	464a      	mov	r2, r9
 80067e0:	4631      	mov	r1, r6
 80067e2:	4628      	mov	r0, r5
 80067e4:	47b8      	blx	r7
 80067e6:	3001      	adds	r0, #1
 80067e8:	f43f af27 	beq.w	800663a <_printf_float+0xc2>
 80067ec:	f108 0801 	add.w	r8, r8, #1
 80067f0:	e7e6      	b.n	80067c0 <_printf_float+0x248>
 80067f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	dc39      	bgt.n	800686c <_printf_float+0x2f4>
 80067f8:	4a1b      	ldr	r2, [pc, #108]	; (8006868 <_printf_float+0x2f0>)
 80067fa:	2301      	movs	r3, #1
 80067fc:	4631      	mov	r1, r6
 80067fe:	4628      	mov	r0, r5
 8006800:	47b8      	blx	r7
 8006802:	3001      	adds	r0, #1
 8006804:	f43f af19 	beq.w	800663a <_printf_float+0xc2>
 8006808:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800680c:	4313      	orrs	r3, r2
 800680e:	d102      	bne.n	8006816 <_printf_float+0x29e>
 8006810:	6823      	ldr	r3, [r4, #0]
 8006812:	07d9      	lsls	r1, r3, #31
 8006814:	d5d8      	bpl.n	80067c8 <_printf_float+0x250>
 8006816:	ee18 3a10 	vmov	r3, s16
 800681a:	4652      	mov	r2, sl
 800681c:	4631      	mov	r1, r6
 800681e:	4628      	mov	r0, r5
 8006820:	47b8      	blx	r7
 8006822:	3001      	adds	r0, #1
 8006824:	f43f af09 	beq.w	800663a <_printf_float+0xc2>
 8006828:	f04f 0900 	mov.w	r9, #0
 800682c:	f104 0a1a 	add.w	sl, r4, #26
 8006830:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006832:	425b      	negs	r3, r3
 8006834:	454b      	cmp	r3, r9
 8006836:	dc01      	bgt.n	800683c <_printf_float+0x2c4>
 8006838:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800683a:	e792      	b.n	8006762 <_printf_float+0x1ea>
 800683c:	2301      	movs	r3, #1
 800683e:	4652      	mov	r2, sl
 8006840:	4631      	mov	r1, r6
 8006842:	4628      	mov	r0, r5
 8006844:	47b8      	blx	r7
 8006846:	3001      	adds	r0, #1
 8006848:	f43f aef7 	beq.w	800663a <_printf_float+0xc2>
 800684c:	f109 0901 	add.w	r9, r9, #1
 8006850:	e7ee      	b.n	8006830 <_printf_float+0x2b8>
 8006852:	bf00      	nop
 8006854:	7fefffff 	.word	0x7fefffff
 8006858:	08009028 	.word	0x08009028
 800685c:	0800902c 	.word	0x0800902c
 8006860:	08009034 	.word	0x08009034
 8006864:	08009030 	.word	0x08009030
 8006868:	08009038 	.word	0x08009038
 800686c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800686e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006870:	429a      	cmp	r2, r3
 8006872:	bfa8      	it	ge
 8006874:	461a      	movge	r2, r3
 8006876:	2a00      	cmp	r2, #0
 8006878:	4691      	mov	r9, r2
 800687a:	dc37      	bgt.n	80068ec <_printf_float+0x374>
 800687c:	f04f 0b00 	mov.w	fp, #0
 8006880:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006884:	f104 021a 	add.w	r2, r4, #26
 8006888:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800688a:	9305      	str	r3, [sp, #20]
 800688c:	eba3 0309 	sub.w	r3, r3, r9
 8006890:	455b      	cmp	r3, fp
 8006892:	dc33      	bgt.n	80068fc <_printf_float+0x384>
 8006894:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006898:	429a      	cmp	r2, r3
 800689a:	db3b      	blt.n	8006914 <_printf_float+0x39c>
 800689c:	6823      	ldr	r3, [r4, #0]
 800689e:	07da      	lsls	r2, r3, #31
 80068a0:	d438      	bmi.n	8006914 <_printf_float+0x39c>
 80068a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068a4:	9b05      	ldr	r3, [sp, #20]
 80068a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068a8:	1ad3      	subs	r3, r2, r3
 80068aa:	eba2 0901 	sub.w	r9, r2, r1
 80068ae:	4599      	cmp	r9, r3
 80068b0:	bfa8      	it	ge
 80068b2:	4699      	movge	r9, r3
 80068b4:	f1b9 0f00 	cmp.w	r9, #0
 80068b8:	dc35      	bgt.n	8006926 <_printf_float+0x3ae>
 80068ba:	f04f 0800 	mov.w	r8, #0
 80068be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80068c2:	f104 0a1a 	add.w	sl, r4, #26
 80068c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068ca:	1a9b      	subs	r3, r3, r2
 80068cc:	eba3 0309 	sub.w	r3, r3, r9
 80068d0:	4543      	cmp	r3, r8
 80068d2:	f77f af79 	ble.w	80067c8 <_printf_float+0x250>
 80068d6:	2301      	movs	r3, #1
 80068d8:	4652      	mov	r2, sl
 80068da:	4631      	mov	r1, r6
 80068dc:	4628      	mov	r0, r5
 80068de:	47b8      	blx	r7
 80068e0:	3001      	adds	r0, #1
 80068e2:	f43f aeaa 	beq.w	800663a <_printf_float+0xc2>
 80068e6:	f108 0801 	add.w	r8, r8, #1
 80068ea:	e7ec      	b.n	80068c6 <_printf_float+0x34e>
 80068ec:	4613      	mov	r3, r2
 80068ee:	4631      	mov	r1, r6
 80068f0:	4642      	mov	r2, r8
 80068f2:	4628      	mov	r0, r5
 80068f4:	47b8      	blx	r7
 80068f6:	3001      	adds	r0, #1
 80068f8:	d1c0      	bne.n	800687c <_printf_float+0x304>
 80068fa:	e69e      	b.n	800663a <_printf_float+0xc2>
 80068fc:	2301      	movs	r3, #1
 80068fe:	4631      	mov	r1, r6
 8006900:	4628      	mov	r0, r5
 8006902:	9205      	str	r2, [sp, #20]
 8006904:	47b8      	blx	r7
 8006906:	3001      	adds	r0, #1
 8006908:	f43f ae97 	beq.w	800663a <_printf_float+0xc2>
 800690c:	9a05      	ldr	r2, [sp, #20]
 800690e:	f10b 0b01 	add.w	fp, fp, #1
 8006912:	e7b9      	b.n	8006888 <_printf_float+0x310>
 8006914:	ee18 3a10 	vmov	r3, s16
 8006918:	4652      	mov	r2, sl
 800691a:	4631      	mov	r1, r6
 800691c:	4628      	mov	r0, r5
 800691e:	47b8      	blx	r7
 8006920:	3001      	adds	r0, #1
 8006922:	d1be      	bne.n	80068a2 <_printf_float+0x32a>
 8006924:	e689      	b.n	800663a <_printf_float+0xc2>
 8006926:	9a05      	ldr	r2, [sp, #20]
 8006928:	464b      	mov	r3, r9
 800692a:	4442      	add	r2, r8
 800692c:	4631      	mov	r1, r6
 800692e:	4628      	mov	r0, r5
 8006930:	47b8      	blx	r7
 8006932:	3001      	adds	r0, #1
 8006934:	d1c1      	bne.n	80068ba <_printf_float+0x342>
 8006936:	e680      	b.n	800663a <_printf_float+0xc2>
 8006938:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800693a:	2a01      	cmp	r2, #1
 800693c:	dc01      	bgt.n	8006942 <_printf_float+0x3ca>
 800693e:	07db      	lsls	r3, r3, #31
 8006940:	d538      	bpl.n	80069b4 <_printf_float+0x43c>
 8006942:	2301      	movs	r3, #1
 8006944:	4642      	mov	r2, r8
 8006946:	4631      	mov	r1, r6
 8006948:	4628      	mov	r0, r5
 800694a:	47b8      	blx	r7
 800694c:	3001      	adds	r0, #1
 800694e:	f43f ae74 	beq.w	800663a <_printf_float+0xc2>
 8006952:	ee18 3a10 	vmov	r3, s16
 8006956:	4652      	mov	r2, sl
 8006958:	4631      	mov	r1, r6
 800695a:	4628      	mov	r0, r5
 800695c:	47b8      	blx	r7
 800695e:	3001      	adds	r0, #1
 8006960:	f43f ae6b 	beq.w	800663a <_printf_float+0xc2>
 8006964:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006968:	2200      	movs	r2, #0
 800696a:	2300      	movs	r3, #0
 800696c:	f7fa f8cc 	bl	8000b08 <__aeabi_dcmpeq>
 8006970:	b9d8      	cbnz	r0, 80069aa <_printf_float+0x432>
 8006972:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006974:	f108 0201 	add.w	r2, r8, #1
 8006978:	3b01      	subs	r3, #1
 800697a:	4631      	mov	r1, r6
 800697c:	4628      	mov	r0, r5
 800697e:	47b8      	blx	r7
 8006980:	3001      	adds	r0, #1
 8006982:	d10e      	bne.n	80069a2 <_printf_float+0x42a>
 8006984:	e659      	b.n	800663a <_printf_float+0xc2>
 8006986:	2301      	movs	r3, #1
 8006988:	4652      	mov	r2, sl
 800698a:	4631      	mov	r1, r6
 800698c:	4628      	mov	r0, r5
 800698e:	47b8      	blx	r7
 8006990:	3001      	adds	r0, #1
 8006992:	f43f ae52 	beq.w	800663a <_printf_float+0xc2>
 8006996:	f108 0801 	add.w	r8, r8, #1
 800699a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800699c:	3b01      	subs	r3, #1
 800699e:	4543      	cmp	r3, r8
 80069a0:	dcf1      	bgt.n	8006986 <_printf_float+0x40e>
 80069a2:	464b      	mov	r3, r9
 80069a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80069a8:	e6dc      	b.n	8006764 <_printf_float+0x1ec>
 80069aa:	f04f 0800 	mov.w	r8, #0
 80069ae:	f104 0a1a 	add.w	sl, r4, #26
 80069b2:	e7f2      	b.n	800699a <_printf_float+0x422>
 80069b4:	2301      	movs	r3, #1
 80069b6:	4642      	mov	r2, r8
 80069b8:	e7df      	b.n	800697a <_printf_float+0x402>
 80069ba:	2301      	movs	r3, #1
 80069bc:	464a      	mov	r2, r9
 80069be:	4631      	mov	r1, r6
 80069c0:	4628      	mov	r0, r5
 80069c2:	47b8      	blx	r7
 80069c4:	3001      	adds	r0, #1
 80069c6:	f43f ae38 	beq.w	800663a <_printf_float+0xc2>
 80069ca:	f108 0801 	add.w	r8, r8, #1
 80069ce:	68e3      	ldr	r3, [r4, #12]
 80069d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80069d2:	1a5b      	subs	r3, r3, r1
 80069d4:	4543      	cmp	r3, r8
 80069d6:	dcf0      	bgt.n	80069ba <_printf_float+0x442>
 80069d8:	e6fa      	b.n	80067d0 <_printf_float+0x258>
 80069da:	f04f 0800 	mov.w	r8, #0
 80069de:	f104 0919 	add.w	r9, r4, #25
 80069e2:	e7f4      	b.n	80069ce <_printf_float+0x456>

080069e4 <_printf_common>:
 80069e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069e8:	4616      	mov	r6, r2
 80069ea:	4699      	mov	r9, r3
 80069ec:	688a      	ldr	r2, [r1, #8]
 80069ee:	690b      	ldr	r3, [r1, #16]
 80069f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80069f4:	4293      	cmp	r3, r2
 80069f6:	bfb8      	it	lt
 80069f8:	4613      	movlt	r3, r2
 80069fa:	6033      	str	r3, [r6, #0]
 80069fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a00:	4607      	mov	r7, r0
 8006a02:	460c      	mov	r4, r1
 8006a04:	b10a      	cbz	r2, 8006a0a <_printf_common+0x26>
 8006a06:	3301      	adds	r3, #1
 8006a08:	6033      	str	r3, [r6, #0]
 8006a0a:	6823      	ldr	r3, [r4, #0]
 8006a0c:	0699      	lsls	r1, r3, #26
 8006a0e:	bf42      	ittt	mi
 8006a10:	6833      	ldrmi	r3, [r6, #0]
 8006a12:	3302      	addmi	r3, #2
 8006a14:	6033      	strmi	r3, [r6, #0]
 8006a16:	6825      	ldr	r5, [r4, #0]
 8006a18:	f015 0506 	ands.w	r5, r5, #6
 8006a1c:	d106      	bne.n	8006a2c <_printf_common+0x48>
 8006a1e:	f104 0a19 	add.w	sl, r4, #25
 8006a22:	68e3      	ldr	r3, [r4, #12]
 8006a24:	6832      	ldr	r2, [r6, #0]
 8006a26:	1a9b      	subs	r3, r3, r2
 8006a28:	42ab      	cmp	r3, r5
 8006a2a:	dc26      	bgt.n	8006a7a <_printf_common+0x96>
 8006a2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a30:	1e13      	subs	r3, r2, #0
 8006a32:	6822      	ldr	r2, [r4, #0]
 8006a34:	bf18      	it	ne
 8006a36:	2301      	movne	r3, #1
 8006a38:	0692      	lsls	r2, r2, #26
 8006a3a:	d42b      	bmi.n	8006a94 <_printf_common+0xb0>
 8006a3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a40:	4649      	mov	r1, r9
 8006a42:	4638      	mov	r0, r7
 8006a44:	47c0      	blx	r8
 8006a46:	3001      	adds	r0, #1
 8006a48:	d01e      	beq.n	8006a88 <_printf_common+0xa4>
 8006a4a:	6823      	ldr	r3, [r4, #0]
 8006a4c:	68e5      	ldr	r5, [r4, #12]
 8006a4e:	6832      	ldr	r2, [r6, #0]
 8006a50:	f003 0306 	and.w	r3, r3, #6
 8006a54:	2b04      	cmp	r3, #4
 8006a56:	bf08      	it	eq
 8006a58:	1aad      	subeq	r5, r5, r2
 8006a5a:	68a3      	ldr	r3, [r4, #8]
 8006a5c:	6922      	ldr	r2, [r4, #16]
 8006a5e:	bf0c      	ite	eq
 8006a60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a64:	2500      	movne	r5, #0
 8006a66:	4293      	cmp	r3, r2
 8006a68:	bfc4      	itt	gt
 8006a6a:	1a9b      	subgt	r3, r3, r2
 8006a6c:	18ed      	addgt	r5, r5, r3
 8006a6e:	2600      	movs	r6, #0
 8006a70:	341a      	adds	r4, #26
 8006a72:	42b5      	cmp	r5, r6
 8006a74:	d11a      	bne.n	8006aac <_printf_common+0xc8>
 8006a76:	2000      	movs	r0, #0
 8006a78:	e008      	b.n	8006a8c <_printf_common+0xa8>
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	4652      	mov	r2, sl
 8006a7e:	4649      	mov	r1, r9
 8006a80:	4638      	mov	r0, r7
 8006a82:	47c0      	blx	r8
 8006a84:	3001      	adds	r0, #1
 8006a86:	d103      	bne.n	8006a90 <_printf_common+0xac>
 8006a88:	f04f 30ff 	mov.w	r0, #4294967295
 8006a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a90:	3501      	adds	r5, #1
 8006a92:	e7c6      	b.n	8006a22 <_printf_common+0x3e>
 8006a94:	18e1      	adds	r1, r4, r3
 8006a96:	1c5a      	adds	r2, r3, #1
 8006a98:	2030      	movs	r0, #48	; 0x30
 8006a9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a9e:	4422      	add	r2, r4
 8006aa0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006aa4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006aa8:	3302      	adds	r3, #2
 8006aaa:	e7c7      	b.n	8006a3c <_printf_common+0x58>
 8006aac:	2301      	movs	r3, #1
 8006aae:	4622      	mov	r2, r4
 8006ab0:	4649      	mov	r1, r9
 8006ab2:	4638      	mov	r0, r7
 8006ab4:	47c0      	blx	r8
 8006ab6:	3001      	adds	r0, #1
 8006ab8:	d0e6      	beq.n	8006a88 <_printf_common+0xa4>
 8006aba:	3601      	adds	r6, #1
 8006abc:	e7d9      	b.n	8006a72 <_printf_common+0x8e>
	...

08006ac0 <_printf_i>:
 8006ac0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ac4:	460c      	mov	r4, r1
 8006ac6:	4691      	mov	r9, r2
 8006ac8:	7e27      	ldrb	r7, [r4, #24]
 8006aca:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006acc:	2f78      	cmp	r7, #120	; 0x78
 8006ace:	4680      	mov	r8, r0
 8006ad0:	469a      	mov	sl, r3
 8006ad2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ad6:	d807      	bhi.n	8006ae8 <_printf_i+0x28>
 8006ad8:	2f62      	cmp	r7, #98	; 0x62
 8006ada:	d80a      	bhi.n	8006af2 <_printf_i+0x32>
 8006adc:	2f00      	cmp	r7, #0
 8006ade:	f000 80d8 	beq.w	8006c92 <_printf_i+0x1d2>
 8006ae2:	2f58      	cmp	r7, #88	; 0x58
 8006ae4:	f000 80a3 	beq.w	8006c2e <_printf_i+0x16e>
 8006ae8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006aec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006af0:	e03a      	b.n	8006b68 <_printf_i+0xa8>
 8006af2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006af6:	2b15      	cmp	r3, #21
 8006af8:	d8f6      	bhi.n	8006ae8 <_printf_i+0x28>
 8006afa:	a001      	add	r0, pc, #4	; (adr r0, 8006b00 <_printf_i+0x40>)
 8006afc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006b00:	08006b59 	.word	0x08006b59
 8006b04:	08006b6d 	.word	0x08006b6d
 8006b08:	08006ae9 	.word	0x08006ae9
 8006b0c:	08006ae9 	.word	0x08006ae9
 8006b10:	08006ae9 	.word	0x08006ae9
 8006b14:	08006ae9 	.word	0x08006ae9
 8006b18:	08006b6d 	.word	0x08006b6d
 8006b1c:	08006ae9 	.word	0x08006ae9
 8006b20:	08006ae9 	.word	0x08006ae9
 8006b24:	08006ae9 	.word	0x08006ae9
 8006b28:	08006ae9 	.word	0x08006ae9
 8006b2c:	08006c79 	.word	0x08006c79
 8006b30:	08006b9d 	.word	0x08006b9d
 8006b34:	08006c5b 	.word	0x08006c5b
 8006b38:	08006ae9 	.word	0x08006ae9
 8006b3c:	08006ae9 	.word	0x08006ae9
 8006b40:	08006c9b 	.word	0x08006c9b
 8006b44:	08006ae9 	.word	0x08006ae9
 8006b48:	08006b9d 	.word	0x08006b9d
 8006b4c:	08006ae9 	.word	0x08006ae9
 8006b50:	08006ae9 	.word	0x08006ae9
 8006b54:	08006c63 	.word	0x08006c63
 8006b58:	680b      	ldr	r3, [r1, #0]
 8006b5a:	1d1a      	adds	r2, r3, #4
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	600a      	str	r2, [r1, #0]
 8006b60:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006b64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b68:	2301      	movs	r3, #1
 8006b6a:	e0a3      	b.n	8006cb4 <_printf_i+0x1f4>
 8006b6c:	6825      	ldr	r5, [r4, #0]
 8006b6e:	6808      	ldr	r0, [r1, #0]
 8006b70:	062e      	lsls	r6, r5, #24
 8006b72:	f100 0304 	add.w	r3, r0, #4
 8006b76:	d50a      	bpl.n	8006b8e <_printf_i+0xce>
 8006b78:	6805      	ldr	r5, [r0, #0]
 8006b7a:	600b      	str	r3, [r1, #0]
 8006b7c:	2d00      	cmp	r5, #0
 8006b7e:	da03      	bge.n	8006b88 <_printf_i+0xc8>
 8006b80:	232d      	movs	r3, #45	; 0x2d
 8006b82:	426d      	negs	r5, r5
 8006b84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b88:	485e      	ldr	r0, [pc, #376]	; (8006d04 <_printf_i+0x244>)
 8006b8a:	230a      	movs	r3, #10
 8006b8c:	e019      	b.n	8006bc2 <_printf_i+0x102>
 8006b8e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006b92:	6805      	ldr	r5, [r0, #0]
 8006b94:	600b      	str	r3, [r1, #0]
 8006b96:	bf18      	it	ne
 8006b98:	b22d      	sxthne	r5, r5
 8006b9a:	e7ef      	b.n	8006b7c <_printf_i+0xbc>
 8006b9c:	680b      	ldr	r3, [r1, #0]
 8006b9e:	6825      	ldr	r5, [r4, #0]
 8006ba0:	1d18      	adds	r0, r3, #4
 8006ba2:	6008      	str	r0, [r1, #0]
 8006ba4:	0628      	lsls	r0, r5, #24
 8006ba6:	d501      	bpl.n	8006bac <_printf_i+0xec>
 8006ba8:	681d      	ldr	r5, [r3, #0]
 8006baa:	e002      	b.n	8006bb2 <_printf_i+0xf2>
 8006bac:	0669      	lsls	r1, r5, #25
 8006bae:	d5fb      	bpl.n	8006ba8 <_printf_i+0xe8>
 8006bb0:	881d      	ldrh	r5, [r3, #0]
 8006bb2:	4854      	ldr	r0, [pc, #336]	; (8006d04 <_printf_i+0x244>)
 8006bb4:	2f6f      	cmp	r7, #111	; 0x6f
 8006bb6:	bf0c      	ite	eq
 8006bb8:	2308      	moveq	r3, #8
 8006bba:	230a      	movne	r3, #10
 8006bbc:	2100      	movs	r1, #0
 8006bbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006bc2:	6866      	ldr	r6, [r4, #4]
 8006bc4:	60a6      	str	r6, [r4, #8]
 8006bc6:	2e00      	cmp	r6, #0
 8006bc8:	bfa2      	ittt	ge
 8006bca:	6821      	ldrge	r1, [r4, #0]
 8006bcc:	f021 0104 	bicge.w	r1, r1, #4
 8006bd0:	6021      	strge	r1, [r4, #0]
 8006bd2:	b90d      	cbnz	r5, 8006bd8 <_printf_i+0x118>
 8006bd4:	2e00      	cmp	r6, #0
 8006bd6:	d04d      	beq.n	8006c74 <_printf_i+0x1b4>
 8006bd8:	4616      	mov	r6, r2
 8006bda:	fbb5 f1f3 	udiv	r1, r5, r3
 8006bde:	fb03 5711 	mls	r7, r3, r1, r5
 8006be2:	5dc7      	ldrb	r7, [r0, r7]
 8006be4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006be8:	462f      	mov	r7, r5
 8006bea:	42bb      	cmp	r3, r7
 8006bec:	460d      	mov	r5, r1
 8006bee:	d9f4      	bls.n	8006bda <_printf_i+0x11a>
 8006bf0:	2b08      	cmp	r3, #8
 8006bf2:	d10b      	bne.n	8006c0c <_printf_i+0x14c>
 8006bf4:	6823      	ldr	r3, [r4, #0]
 8006bf6:	07df      	lsls	r7, r3, #31
 8006bf8:	d508      	bpl.n	8006c0c <_printf_i+0x14c>
 8006bfa:	6923      	ldr	r3, [r4, #16]
 8006bfc:	6861      	ldr	r1, [r4, #4]
 8006bfe:	4299      	cmp	r1, r3
 8006c00:	bfde      	ittt	le
 8006c02:	2330      	movle	r3, #48	; 0x30
 8006c04:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006c08:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006c0c:	1b92      	subs	r2, r2, r6
 8006c0e:	6122      	str	r2, [r4, #16]
 8006c10:	f8cd a000 	str.w	sl, [sp]
 8006c14:	464b      	mov	r3, r9
 8006c16:	aa03      	add	r2, sp, #12
 8006c18:	4621      	mov	r1, r4
 8006c1a:	4640      	mov	r0, r8
 8006c1c:	f7ff fee2 	bl	80069e4 <_printf_common>
 8006c20:	3001      	adds	r0, #1
 8006c22:	d14c      	bne.n	8006cbe <_printf_i+0x1fe>
 8006c24:	f04f 30ff 	mov.w	r0, #4294967295
 8006c28:	b004      	add	sp, #16
 8006c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c2e:	4835      	ldr	r0, [pc, #212]	; (8006d04 <_printf_i+0x244>)
 8006c30:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006c34:	6823      	ldr	r3, [r4, #0]
 8006c36:	680e      	ldr	r6, [r1, #0]
 8006c38:	061f      	lsls	r7, r3, #24
 8006c3a:	f856 5b04 	ldr.w	r5, [r6], #4
 8006c3e:	600e      	str	r6, [r1, #0]
 8006c40:	d514      	bpl.n	8006c6c <_printf_i+0x1ac>
 8006c42:	07d9      	lsls	r1, r3, #31
 8006c44:	bf44      	itt	mi
 8006c46:	f043 0320 	orrmi.w	r3, r3, #32
 8006c4a:	6023      	strmi	r3, [r4, #0]
 8006c4c:	b91d      	cbnz	r5, 8006c56 <_printf_i+0x196>
 8006c4e:	6823      	ldr	r3, [r4, #0]
 8006c50:	f023 0320 	bic.w	r3, r3, #32
 8006c54:	6023      	str	r3, [r4, #0]
 8006c56:	2310      	movs	r3, #16
 8006c58:	e7b0      	b.n	8006bbc <_printf_i+0xfc>
 8006c5a:	6823      	ldr	r3, [r4, #0]
 8006c5c:	f043 0320 	orr.w	r3, r3, #32
 8006c60:	6023      	str	r3, [r4, #0]
 8006c62:	2378      	movs	r3, #120	; 0x78
 8006c64:	4828      	ldr	r0, [pc, #160]	; (8006d08 <_printf_i+0x248>)
 8006c66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c6a:	e7e3      	b.n	8006c34 <_printf_i+0x174>
 8006c6c:	065e      	lsls	r6, r3, #25
 8006c6e:	bf48      	it	mi
 8006c70:	b2ad      	uxthmi	r5, r5
 8006c72:	e7e6      	b.n	8006c42 <_printf_i+0x182>
 8006c74:	4616      	mov	r6, r2
 8006c76:	e7bb      	b.n	8006bf0 <_printf_i+0x130>
 8006c78:	680b      	ldr	r3, [r1, #0]
 8006c7a:	6826      	ldr	r6, [r4, #0]
 8006c7c:	6960      	ldr	r0, [r4, #20]
 8006c7e:	1d1d      	adds	r5, r3, #4
 8006c80:	600d      	str	r5, [r1, #0]
 8006c82:	0635      	lsls	r5, r6, #24
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	d501      	bpl.n	8006c8c <_printf_i+0x1cc>
 8006c88:	6018      	str	r0, [r3, #0]
 8006c8a:	e002      	b.n	8006c92 <_printf_i+0x1d2>
 8006c8c:	0671      	lsls	r1, r6, #25
 8006c8e:	d5fb      	bpl.n	8006c88 <_printf_i+0x1c8>
 8006c90:	8018      	strh	r0, [r3, #0]
 8006c92:	2300      	movs	r3, #0
 8006c94:	6123      	str	r3, [r4, #16]
 8006c96:	4616      	mov	r6, r2
 8006c98:	e7ba      	b.n	8006c10 <_printf_i+0x150>
 8006c9a:	680b      	ldr	r3, [r1, #0]
 8006c9c:	1d1a      	adds	r2, r3, #4
 8006c9e:	600a      	str	r2, [r1, #0]
 8006ca0:	681e      	ldr	r6, [r3, #0]
 8006ca2:	6862      	ldr	r2, [r4, #4]
 8006ca4:	2100      	movs	r1, #0
 8006ca6:	4630      	mov	r0, r6
 8006ca8:	f7f9 faba 	bl	8000220 <memchr>
 8006cac:	b108      	cbz	r0, 8006cb2 <_printf_i+0x1f2>
 8006cae:	1b80      	subs	r0, r0, r6
 8006cb0:	6060      	str	r0, [r4, #4]
 8006cb2:	6863      	ldr	r3, [r4, #4]
 8006cb4:	6123      	str	r3, [r4, #16]
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cbc:	e7a8      	b.n	8006c10 <_printf_i+0x150>
 8006cbe:	6923      	ldr	r3, [r4, #16]
 8006cc0:	4632      	mov	r2, r6
 8006cc2:	4649      	mov	r1, r9
 8006cc4:	4640      	mov	r0, r8
 8006cc6:	47d0      	blx	sl
 8006cc8:	3001      	adds	r0, #1
 8006cca:	d0ab      	beq.n	8006c24 <_printf_i+0x164>
 8006ccc:	6823      	ldr	r3, [r4, #0]
 8006cce:	079b      	lsls	r3, r3, #30
 8006cd0:	d413      	bmi.n	8006cfa <_printf_i+0x23a>
 8006cd2:	68e0      	ldr	r0, [r4, #12]
 8006cd4:	9b03      	ldr	r3, [sp, #12]
 8006cd6:	4298      	cmp	r0, r3
 8006cd8:	bfb8      	it	lt
 8006cda:	4618      	movlt	r0, r3
 8006cdc:	e7a4      	b.n	8006c28 <_printf_i+0x168>
 8006cde:	2301      	movs	r3, #1
 8006ce0:	4632      	mov	r2, r6
 8006ce2:	4649      	mov	r1, r9
 8006ce4:	4640      	mov	r0, r8
 8006ce6:	47d0      	blx	sl
 8006ce8:	3001      	adds	r0, #1
 8006cea:	d09b      	beq.n	8006c24 <_printf_i+0x164>
 8006cec:	3501      	adds	r5, #1
 8006cee:	68e3      	ldr	r3, [r4, #12]
 8006cf0:	9903      	ldr	r1, [sp, #12]
 8006cf2:	1a5b      	subs	r3, r3, r1
 8006cf4:	42ab      	cmp	r3, r5
 8006cf6:	dcf2      	bgt.n	8006cde <_printf_i+0x21e>
 8006cf8:	e7eb      	b.n	8006cd2 <_printf_i+0x212>
 8006cfa:	2500      	movs	r5, #0
 8006cfc:	f104 0619 	add.w	r6, r4, #25
 8006d00:	e7f5      	b.n	8006cee <_printf_i+0x22e>
 8006d02:	bf00      	nop
 8006d04:	0800903a 	.word	0x0800903a
 8006d08:	0800904b 	.word	0x0800904b

08006d0c <iprintf>:
 8006d0c:	b40f      	push	{r0, r1, r2, r3}
 8006d0e:	4b0a      	ldr	r3, [pc, #40]	; (8006d38 <iprintf+0x2c>)
 8006d10:	b513      	push	{r0, r1, r4, lr}
 8006d12:	681c      	ldr	r4, [r3, #0]
 8006d14:	b124      	cbz	r4, 8006d20 <iprintf+0x14>
 8006d16:	69a3      	ldr	r3, [r4, #24]
 8006d18:	b913      	cbnz	r3, 8006d20 <iprintf+0x14>
 8006d1a:	4620      	mov	r0, r4
 8006d1c:	f001 f8d6 	bl	8007ecc <__sinit>
 8006d20:	ab05      	add	r3, sp, #20
 8006d22:	9a04      	ldr	r2, [sp, #16]
 8006d24:	68a1      	ldr	r1, [r4, #8]
 8006d26:	9301      	str	r3, [sp, #4]
 8006d28:	4620      	mov	r0, r4
 8006d2a:	f001 fe51 	bl	80089d0 <_vfiprintf_r>
 8006d2e:	b002      	add	sp, #8
 8006d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d34:	b004      	add	sp, #16
 8006d36:	4770      	bx	lr
 8006d38:	20000020 	.word	0x20000020

08006d3c <_puts_r>:
 8006d3c:	b570      	push	{r4, r5, r6, lr}
 8006d3e:	460e      	mov	r6, r1
 8006d40:	4605      	mov	r5, r0
 8006d42:	b118      	cbz	r0, 8006d4c <_puts_r+0x10>
 8006d44:	6983      	ldr	r3, [r0, #24]
 8006d46:	b90b      	cbnz	r3, 8006d4c <_puts_r+0x10>
 8006d48:	f001 f8c0 	bl	8007ecc <__sinit>
 8006d4c:	69ab      	ldr	r3, [r5, #24]
 8006d4e:	68ac      	ldr	r4, [r5, #8]
 8006d50:	b913      	cbnz	r3, 8006d58 <_puts_r+0x1c>
 8006d52:	4628      	mov	r0, r5
 8006d54:	f001 f8ba 	bl	8007ecc <__sinit>
 8006d58:	4b2c      	ldr	r3, [pc, #176]	; (8006e0c <_puts_r+0xd0>)
 8006d5a:	429c      	cmp	r4, r3
 8006d5c:	d120      	bne.n	8006da0 <_puts_r+0x64>
 8006d5e:	686c      	ldr	r4, [r5, #4]
 8006d60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d62:	07db      	lsls	r3, r3, #31
 8006d64:	d405      	bmi.n	8006d72 <_puts_r+0x36>
 8006d66:	89a3      	ldrh	r3, [r4, #12]
 8006d68:	0598      	lsls	r0, r3, #22
 8006d6a:	d402      	bmi.n	8006d72 <_puts_r+0x36>
 8006d6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d6e:	f001 f950 	bl	8008012 <__retarget_lock_acquire_recursive>
 8006d72:	89a3      	ldrh	r3, [r4, #12]
 8006d74:	0719      	lsls	r1, r3, #28
 8006d76:	d51d      	bpl.n	8006db4 <_puts_r+0x78>
 8006d78:	6923      	ldr	r3, [r4, #16]
 8006d7a:	b1db      	cbz	r3, 8006db4 <_puts_r+0x78>
 8006d7c:	3e01      	subs	r6, #1
 8006d7e:	68a3      	ldr	r3, [r4, #8]
 8006d80:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006d84:	3b01      	subs	r3, #1
 8006d86:	60a3      	str	r3, [r4, #8]
 8006d88:	bb39      	cbnz	r1, 8006dda <_puts_r+0x9e>
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	da38      	bge.n	8006e00 <_puts_r+0xc4>
 8006d8e:	4622      	mov	r2, r4
 8006d90:	210a      	movs	r1, #10
 8006d92:	4628      	mov	r0, r5
 8006d94:	f000 f848 	bl	8006e28 <__swbuf_r>
 8006d98:	3001      	adds	r0, #1
 8006d9a:	d011      	beq.n	8006dc0 <_puts_r+0x84>
 8006d9c:	250a      	movs	r5, #10
 8006d9e:	e011      	b.n	8006dc4 <_puts_r+0x88>
 8006da0:	4b1b      	ldr	r3, [pc, #108]	; (8006e10 <_puts_r+0xd4>)
 8006da2:	429c      	cmp	r4, r3
 8006da4:	d101      	bne.n	8006daa <_puts_r+0x6e>
 8006da6:	68ac      	ldr	r4, [r5, #8]
 8006da8:	e7da      	b.n	8006d60 <_puts_r+0x24>
 8006daa:	4b1a      	ldr	r3, [pc, #104]	; (8006e14 <_puts_r+0xd8>)
 8006dac:	429c      	cmp	r4, r3
 8006dae:	bf08      	it	eq
 8006db0:	68ec      	ldreq	r4, [r5, #12]
 8006db2:	e7d5      	b.n	8006d60 <_puts_r+0x24>
 8006db4:	4621      	mov	r1, r4
 8006db6:	4628      	mov	r0, r5
 8006db8:	f000 f888 	bl	8006ecc <__swsetup_r>
 8006dbc:	2800      	cmp	r0, #0
 8006dbe:	d0dd      	beq.n	8006d7c <_puts_r+0x40>
 8006dc0:	f04f 35ff 	mov.w	r5, #4294967295
 8006dc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006dc6:	07da      	lsls	r2, r3, #31
 8006dc8:	d405      	bmi.n	8006dd6 <_puts_r+0x9a>
 8006dca:	89a3      	ldrh	r3, [r4, #12]
 8006dcc:	059b      	lsls	r3, r3, #22
 8006dce:	d402      	bmi.n	8006dd6 <_puts_r+0x9a>
 8006dd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006dd2:	f001 f91f 	bl	8008014 <__retarget_lock_release_recursive>
 8006dd6:	4628      	mov	r0, r5
 8006dd8:	bd70      	pop	{r4, r5, r6, pc}
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	da04      	bge.n	8006de8 <_puts_r+0xac>
 8006dde:	69a2      	ldr	r2, [r4, #24]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	dc06      	bgt.n	8006df2 <_puts_r+0xb6>
 8006de4:	290a      	cmp	r1, #10
 8006de6:	d004      	beq.n	8006df2 <_puts_r+0xb6>
 8006de8:	6823      	ldr	r3, [r4, #0]
 8006dea:	1c5a      	adds	r2, r3, #1
 8006dec:	6022      	str	r2, [r4, #0]
 8006dee:	7019      	strb	r1, [r3, #0]
 8006df0:	e7c5      	b.n	8006d7e <_puts_r+0x42>
 8006df2:	4622      	mov	r2, r4
 8006df4:	4628      	mov	r0, r5
 8006df6:	f000 f817 	bl	8006e28 <__swbuf_r>
 8006dfa:	3001      	adds	r0, #1
 8006dfc:	d1bf      	bne.n	8006d7e <_puts_r+0x42>
 8006dfe:	e7df      	b.n	8006dc0 <_puts_r+0x84>
 8006e00:	6823      	ldr	r3, [r4, #0]
 8006e02:	250a      	movs	r5, #10
 8006e04:	1c5a      	adds	r2, r3, #1
 8006e06:	6022      	str	r2, [r4, #0]
 8006e08:	701d      	strb	r5, [r3, #0]
 8006e0a:	e7db      	b.n	8006dc4 <_puts_r+0x88>
 8006e0c:	08009110 	.word	0x08009110
 8006e10:	08009130 	.word	0x08009130
 8006e14:	080090f0 	.word	0x080090f0

08006e18 <puts>:
 8006e18:	4b02      	ldr	r3, [pc, #8]	; (8006e24 <puts+0xc>)
 8006e1a:	4601      	mov	r1, r0
 8006e1c:	6818      	ldr	r0, [r3, #0]
 8006e1e:	f7ff bf8d 	b.w	8006d3c <_puts_r>
 8006e22:	bf00      	nop
 8006e24:	20000020 	.word	0x20000020

08006e28 <__swbuf_r>:
 8006e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e2a:	460e      	mov	r6, r1
 8006e2c:	4614      	mov	r4, r2
 8006e2e:	4605      	mov	r5, r0
 8006e30:	b118      	cbz	r0, 8006e3a <__swbuf_r+0x12>
 8006e32:	6983      	ldr	r3, [r0, #24]
 8006e34:	b90b      	cbnz	r3, 8006e3a <__swbuf_r+0x12>
 8006e36:	f001 f849 	bl	8007ecc <__sinit>
 8006e3a:	4b21      	ldr	r3, [pc, #132]	; (8006ec0 <__swbuf_r+0x98>)
 8006e3c:	429c      	cmp	r4, r3
 8006e3e:	d12b      	bne.n	8006e98 <__swbuf_r+0x70>
 8006e40:	686c      	ldr	r4, [r5, #4]
 8006e42:	69a3      	ldr	r3, [r4, #24]
 8006e44:	60a3      	str	r3, [r4, #8]
 8006e46:	89a3      	ldrh	r3, [r4, #12]
 8006e48:	071a      	lsls	r2, r3, #28
 8006e4a:	d52f      	bpl.n	8006eac <__swbuf_r+0x84>
 8006e4c:	6923      	ldr	r3, [r4, #16]
 8006e4e:	b36b      	cbz	r3, 8006eac <__swbuf_r+0x84>
 8006e50:	6923      	ldr	r3, [r4, #16]
 8006e52:	6820      	ldr	r0, [r4, #0]
 8006e54:	1ac0      	subs	r0, r0, r3
 8006e56:	6963      	ldr	r3, [r4, #20]
 8006e58:	b2f6      	uxtb	r6, r6
 8006e5a:	4283      	cmp	r3, r0
 8006e5c:	4637      	mov	r7, r6
 8006e5e:	dc04      	bgt.n	8006e6a <__swbuf_r+0x42>
 8006e60:	4621      	mov	r1, r4
 8006e62:	4628      	mov	r0, r5
 8006e64:	f000 ff9e 	bl	8007da4 <_fflush_r>
 8006e68:	bb30      	cbnz	r0, 8006eb8 <__swbuf_r+0x90>
 8006e6a:	68a3      	ldr	r3, [r4, #8]
 8006e6c:	3b01      	subs	r3, #1
 8006e6e:	60a3      	str	r3, [r4, #8]
 8006e70:	6823      	ldr	r3, [r4, #0]
 8006e72:	1c5a      	adds	r2, r3, #1
 8006e74:	6022      	str	r2, [r4, #0]
 8006e76:	701e      	strb	r6, [r3, #0]
 8006e78:	6963      	ldr	r3, [r4, #20]
 8006e7a:	3001      	adds	r0, #1
 8006e7c:	4283      	cmp	r3, r0
 8006e7e:	d004      	beq.n	8006e8a <__swbuf_r+0x62>
 8006e80:	89a3      	ldrh	r3, [r4, #12]
 8006e82:	07db      	lsls	r3, r3, #31
 8006e84:	d506      	bpl.n	8006e94 <__swbuf_r+0x6c>
 8006e86:	2e0a      	cmp	r6, #10
 8006e88:	d104      	bne.n	8006e94 <__swbuf_r+0x6c>
 8006e8a:	4621      	mov	r1, r4
 8006e8c:	4628      	mov	r0, r5
 8006e8e:	f000 ff89 	bl	8007da4 <_fflush_r>
 8006e92:	b988      	cbnz	r0, 8006eb8 <__swbuf_r+0x90>
 8006e94:	4638      	mov	r0, r7
 8006e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e98:	4b0a      	ldr	r3, [pc, #40]	; (8006ec4 <__swbuf_r+0x9c>)
 8006e9a:	429c      	cmp	r4, r3
 8006e9c:	d101      	bne.n	8006ea2 <__swbuf_r+0x7a>
 8006e9e:	68ac      	ldr	r4, [r5, #8]
 8006ea0:	e7cf      	b.n	8006e42 <__swbuf_r+0x1a>
 8006ea2:	4b09      	ldr	r3, [pc, #36]	; (8006ec8 <__swbuf_r+0xa0>)
 8006ea4:	429c      	cmp	r4, r3
 8006ea6:	bf08      	it	eq
 8006ea8:	68ec      	ldreq	r4, [r5, #12]
 8006eaa:	e7ca      	b.n	8006e42 <__swbuf_r+0x1a>
 8006eac:	4621      	mov	r1, r4
 8006eae:	4628      	mov	r0, r5
 8006eb0:	f000 f80c 	bl	8006ecc <__swsetup_r>
 8006eb4:	2800      	cmp	r0, #0
 8006eb6:	d0cb      	beq.n	8006e50 <__swbuf_r+0x28>
 8006eb8:	f04f 37ff 	mov.w	r7, #4294967295
 8006ebc:	e7ea      	b.n	8006e94 <__swbuf_r+0x6c>
 8006ebe:	bf00      	nop
 8006ec0:	08009110 	.word	0x08009110
 8006ec4:	08009130 	.word	0x08009130
 8006ec8:	080090f0 	.word	0x080090f0

08006ecc <__swsetup_r>:
 8006ecc:	4b32      	ldr	r3, [pc, #200]	; (8006f98 <__swsetup_r+0xcc>)
 8006ece:	b570      	push	{r4, r5, r6, lr}
 8006ed0:	681d      	ldr	r5, [r3, #0]
 8006ed2:	4606      	mov	r6, r0
 8006ed4:	460c      	mov	r4, r1
 8006ed6:	b125      	cbz	r5, 8006ee2 <__swsetup_r+0x16>
 8006ed8:	69ab      	ldr	r3, [r5, #24]
 8006eda:	b913      	cbnz	r3, 8006ee2 <__swsetup_r+0x16>
 8006edc:	4628      	mov	r0, r5
 8006ede:	f000 fff5 	bl	8007ecc <__sinit>
 8006ee2:	4b2e      	ldr	r3, [pc, #184]	; (8006f9c <__swsetup_r+0xd0>)
 8006ee4:	429c      	cmp	r4, r3
 8006ee6:	d10f      	bne.n	8006f08 <__swsetup_r+0x3c>
 8006ee8:	686c      	ldr	r4, [r5, #4]
 8006eea:	89a3      	ldrh	r3, [r4, #12]
 8006eec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ef0:	0719      	lsls	r1, r3, #28
 8006ef2:	d42c      	bmi.n	8006f4e <__swsetup_r+0x82>
 8006ef4:	06dd      	lsls	r5, r3, #27
 8006ef6:	d411      	bmi.n	8006f1c <__swsetup_r+0x50>
 8006ef8:	2309      	movs	r3, #9
 8006efa:	6033      	str	r3, [r6, #0]
 8006efc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006f00:	81a3      	strh	r3, [r4, #12]
 8006f02:	f04f 30ff 	mov.w	r0, #4294967295
 8006f06:	e03e      	b.n	8006f86 <__swsetup_r+0xba>
 8006f08:	4b25      	ldr	r3, [pc, #148]	; (8006fa0 <__swsetup_r+0xd4>)
 8006f0a:	429c      	cmp	r4, r3
 8006f0c:	d101      	bne.n	8006f12 <__swsetup_r+0x46>
 8006f0e:	68ac      	ldr	r4, [r5, #8]
 8006f10:	e7eb      	b.n	8006eea <__swsetup_r+0x1e>
 8006f12:	4b24      	ldr	r3, [pc, #144]	; (8006fa4 <__swsetup_r+0xd8>)
 8006f14:	429c      	cmp	r4, r3
 8006f16:	bf08      	it	eq
 8006f18:	68ec      	ldreq	r4, [r5, #12]
 8006f1a:	e7e6      	b.n	8006eea <__swsetup_r+0x1e>
 8006f1c:	0758      	lsls	r0, r3, #29
 8006f1e:	d512      	bpl.n	8006f46 <__swsetup_r+0x7a>
 8006f20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f22:	b141      	cbz	r1, 8006f36 <__swsetup_r+0x6a>
 8006f24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f28:	4299      	cmp	r1, r3
 8006f2a:	d002      	beq.n	8006f32 <__swsetup_r+0x66>
 8006f2c:	4630      	mov	r0, r6
 8006f2e:	f001 fc7b 	bl	8008828 <_free_r>
 8006f32:	2300      	movs	r3, #0
 8006f34:	6363      	str	r3, [r4, #52]	; 0x34
 8006f36:	89a3      	ldrh	r3, [r4, #12]
 8006f38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006f3c:	81a3      	strh	r3, [r4, #12]
 8006f3e:	2300      	movs	r3, #0
 8006f40:	6063      	str	r3, [r4, #4]
 8006f42:	6923      	ldr	r3, [r4, #16]
 8006f44:	6023      	str	r3, [r4, #0]
 8006f46:	89a3      	ldrh	r3, [r4, #12]
 8006f48:	f043 0308 	orr.w	r3, r3, #8
 8006f4c:	81a3      	strh	r3, [r4, #12]
 8006f4e:	6923      	ldr	r3, [r4, #16]
 8006f50:	b94b      	cbnz	r3, 8006f66 <__swsetup_r+0x9a>
 8006f52:	89a3      	ldrh	r3, [r4, #12]
 8006f54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006f58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f5c:	d003      	beq.n	8006f66 <__swsetup_r+0x9a>
 8006f5e:	4621      	mov	r1, r4
 8006f60:	4630      	mov	r0, r6
 8006f62:	f001 f87d 	bl	8008060 <__smakebuf_r>
 8006f66:	89a0      	ldrh	r0, [r4, #12]
 8006f68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f6c:	f010 0301 	ands.w	r3, r0, #1
 8006f70:	d00a      	beq.n	8006f88 <__swsetup_r+0xbc>
 8006f72:	2300      	movs	r3, #0
 8006f74:	60a3      	str	r3, [r4, #8]
 8006f76:	6963      	ldr	r3, [r4, #20]
 8006f78:	425b      	negs	r3, r3
 8006f7a:	61a3      	str	r3, [r4, #24]
 8006f7c:	6923      	ldr	r3, [r4, #16]
 8006f7e:	b943      	cbnz	r3, 8006f92 <__swsetup_r+0xc6>
 8006f80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006f84:	d1ba      	bne.n	8006efc <__swsetup_r+0x30>
 8006f86:	bd70      	pop	{r4, r5, r6, pc}
 8006f88:	0781      	lsls	r1, r0, #30
 8006f8a:	bf58      	it	pl
 8006f8c:	6963      	ldrpl	r3, [r4, #20]
 8006f8e:	60a3      	str	r3, [r4, #8]
 8006f90:	e7f4      	b.n	8006f7c <__swsetup_r+0xb0>
 8006f92:	2000      	movs	r0, #0
 8006f94:	e7f7      	b.n	8006f86 <__swsetup_r+0xba>
 8006f96:	bf00      	nop
 8006f98:	20000020 	.word	0x20000020
 8006f9c:	08009110 	.word	0x08009110
 8006fa0:	08009130 	.word	0x08009130
 8006fa4:	080090f0 	.word	0x080090f0

08006fa8 <quorem>:
 8006fa8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fac:	6903      	ldr	r3, [r0, #16]
 8006fae:	690c      	ldr	r4, [r1, #16]
 8006fb0:	42a3      	cmp	r3, r4
 8006fb2:	4607      	mov	r7, r0
 8006fb4:	f2c0 8081 	blt.w	80070ba <quorem+0x112>
 8006fb8:	3c01      	subs	r4, #1
 8006fba:	f101 0814 	add.w	r8, r1, #20
 8006fbe:	f100 0514 	add.w	r5, r0, #20
 8006fc2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006fc6:	9301      	str	r3, [sp, #4]
 8006fc8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006fcc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006fd0:	3301      	adds	r3, #1
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006fd8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006fdc:	fbb2 f6f3 	udiv	r6, r2, r3
 8006fe0:	d331      	bcc.n	8007046 <quorem+0x9e>
 8006fe2:	f04f 0e00 	mov.w	lr, #0
 8006fe6:	4640      	mov	r0, r8
 8006fe8:	46ac      	mov	ip, r5
 8006fea:	46f2      	mov	sl, lr
 8006fec:	f850 2b04 	ldr.w	r2, [r0], #4
 8006ff0:	b293      	uxth	r3, r2
 8006ff2:	fb06 e303 	mla	r3, r6, r3, lr
 8006ff6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	ebaa 0303 	sub.w	r3, sl, r3
 8007000:	0c12      	lsrs	r2, r2, #16
 8007002:	f8dc a000 	ldr.w	sl, [ip]
 8007006:	fb06 e202 	mla	r2, r6, r2, lr
 800700a:	fa13 f38a 	uxtah	r3, r3, sl
 800700e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007012:	fa1f fa82 	uxth.w	sl, r2
 8007016:	f8dc 2000 	ldr.w	r2, [ip]
 800701a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800701e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007022:	b29b      	uxth	r3, r3
 8007024:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007028:	4581      	cmp	r9, r0
 800702a:	f84c 3b04 	str.w	r3, [ip], #4
 800702e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007032:	d2db      	bcs.n	8006fec <quorem+0x44>
 8007034:	f855 300b 	ldr.w	r3, [r5, fp]
 8007038:	b92b      	cbnz	r3, 8007046 <quorem+0x9e>
 800703a:	9b01      	ldr	r3, [sp, #4]
 800703c:	3b04      	subs	r3, #4
 800703e:	429d      	cmp	r5, r3
 8007040:	461a      	mov	r2, r3
 8007042:	d32e      	bcc.n	80070a2 <quorem+0xfa>
 8007044:	613c      	str	r4, [r7, #16]
 8007046:	4638      	mov	r0, r7
 8007048:	f001 fade 	bl	8008608 <__mcmp>
 800704c:	2800      	cmp	r0, #0
 800704e:	db24      	blt.n	800709a <quorem+0xf2>
 8007050:	3601      	adds	r6, #1
 8007052:	4628      	mov	r0, r5
 8007054:	f04f 0c00 	mov.w	ip, #0
 8007058:	f858 2b04 	ldr.w	r2, [r8], #4
 800705c:	f8d0 e000 	ldr.w	lr, [r0]
 8007060:	b293      	uxth	r3, r2
 8007062:	ebac 0303 	sub.w	r3, ip, r3
 8007066:	0c12      	lsrs	r2, r2, #16
 8007068:	fa13 f38e 	uxtah	r3, r3, lr
 800706c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007070:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007074:	b29b      	uxth	r3, r3
 8007076:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800707a:	45c1      	cmp	r9, r8
 800707c:	f840 3b04 	str.w	r3, [r0], #4
 8007080:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007084:	d2e8      	bcs.n	8007058 <quorem+0xb0>
 8007086:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800708a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800708e:	b922      	cbnz	r2, 800709a <quorem+0xf2>
 8007090:	3b04      	subs	r3, #4
 8007092:	429d      	cmp	r5, r3
 8007094:	461a      	mov	r2, r3
 8007096:	d30a      	bcc.n	80070ae <quorem+0x106>
 8007098:	613c      	str	r4, [r7, #16]
 800709a:	4630      	mov	r0, r6
 800709c:	b003      	add	sp, #12
 800709e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070a2:	6812      	ldr	r2, [r2, #0]
 80070a4:	3b04      	subs	r3, #4
 80070a6:	2a00      	cmp	r2, #0
 80070a8:	d1cc      	bne.n	8007044 <quorem+0x9c>
 80070aa:	3c01      	subs	r4, #1
 80070ac:	e7c7      	b.n	800703e <quorem+0x96>
 80070ae:	6812      	ldr	r2, [r2, #0]
 80070b0:	3b04      	subs	r3, #4
 80070b2:	2a00      	cmp	r2, #0
 80070b4:	d1f0      	bne.n	8007098 <quorem+0xf0>
 80070b6:	3c01      	subs	r4, #1
 80070b8:	e7eb      	b.n	8007092 <quorem+0xea>
 80070ba:	2000      	movs	r0, #0
 80070bc:	e7ee      	b.n	800709c <quorem+0xf4>
	...

080070c0 <_dtoa_r>:
 80070c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070c4:	ed2d 8b02 	vpush	{d8}
 80070c8:	ec57 6b10 	vmov	r6, r7, d0
 80070cc:	b095      	sub	sp, #84	; 0x54
 80070ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80070d0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80070d4:	9105      	str	r1, [sp, #20]
 80070d6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80070da:	4604      	mov	r4, r0
 80070dc:	9209      	str	r2, [sp, #36]	; 0x24
 80070de:	930f      	str	r3, [sp, #60]	; 0x3c
 80070e0:	b975      	cbnz	r5, 8007100 <_dtoa_r+0x40>
 80070e2:	2010      	movs	r0, #16
 80070e4:	f000 fffc 	bl	80080e0 <malloc>
 80070e8:	4602      	mov	r2, r0
 80070ea:	6260      	str	r0, [r4, #36]	; 0x24
 80070ec:	b920      	cbnz	r0, 80070f8 <_dtoa_r+0x38>
 80070ee:	4bb2      	ldr	r3, [pc, #712]	; (80073b8 <_dtoa_r+0x2f8>)
 80070f0:	21ea      	movs	r1, #234	; 0xea
 80070f2:	48b2      	ldr	r0, [pc, #712]	; (80073bc <_dtoa_r+0x2fc>)
 80070f4:	f001 fe02 	bl	8008cfc <__assert_func>
 80070f8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80070fc:	6005      	str	r5, [r0, #0]
 80070fe:	60c5      	str	r5, [r0, #12]
 8007100:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007102:	6819      	ldr	r1, [r3, #0]
 8007104:	b151      	cbz	r1, 800711c <_dtoa_r+0x5c>
 8007106:	685a      	ldr	r2, [r3, #4]
 8007108:	604a      	str	r2, [r1, #4]
 800710a:	2301      	movs	r3, #1
 800710c:	4093      	lsls	r3, r2
 800710e:	608b      	str	r3, [r1, #8]
 8007110:	4620      	mov	r0, r4
 8007112:	f001 f83b 	bl	800818c <_Bfree>
 8007116:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007118:	2200      	movs	r2, #0
 800711a:	601a      	str	r2, [r3, #0]
 800711c:	1e3b      	subs	r3, r7, #0
 800711e:	bfb9      	ittee	lt
 8007120:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007124:	9303      	strlt	r3, [sp, #12]
 8007126:	2300      	movge	r3, #0
 8007128:	f8c8 3000 	strge.w	r3, [r8]
 800712c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007130:	4ba3      	ldr	r3, [pc, #652]	; (80073c0 <_dtoa_r+0x300>)
 8007132:	bfbc      	itt	lt
 8007134:	2201      	movlt	r2, #1
 8007136:	f8c8 2000 	strlt.w	r2, [r8]
 800713a:	ea33 0309 	bics.w	r3, r3, r9
 800713e:	d11b      	bne.n	8007178 <_dtoa_r+0xb8>
 8007140:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007142:	f242 730f 	movw	r3, #9999	; 0x270f
 8007146:	6013      	str	r3, [r2, #0]
 8007148:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800714c:	4333      	orrs	r3, r6
 800714e:	f000 857a 	beq.w	8007c46 <_dtoa_r+0xb86>
 8007152:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007154:	b963      	cbnz	r3, 8007170 <_dtoa_r+0xb0>
 8007156:	4b9b      	ldr	r3, [pc, #620]	; (80073c4 <_dtoa_r+0x304>)
 8007158:	e024      	b.n	80071a4 <_dtoa_r+0xe4>
 800715a:	4b9b      	ldr	r3, [pc, #620]	; (80073c8 <_dtoa_r+0x308>)
 800715c:	9300      	str	r3, [sp, #0]
 800715e:	3308      	adds	r3, #8
 8007160:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007162:	6013      	str	r3, [r2, #0]
 8007164:	9800      	ldr	r0, [sp, #0]
 8007166:	b015      	add	sp, #84	; 0x54
 8007168:	ecbd 8b02 	vpop	{d8}
 800716c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007170:	4b94      	ldr	r3, [pc, #592]	; (80073c4 <_dtoa_r+0x304>)
 8007172:	9300      	str	r3, [sp, #0]
 8007174:	3303      	adds	r3, #3
 8007176:	e7f3      	b.n	8007160 <_dtoa_r+0xa0>
 8007178:	ed9d 7b02 	vldr	d7, [sp, #8]
 800717c:	2200      	movs	r2, #0
 800717e:	ec51 0b17 	vmov	r0, r1, d7
 8007182:	2300      	movs	r3, #0
 8007184:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007188:	f7f9 fcbe 	bl	8000b08 <__aeabi_dcmpeq>
 800718c:	4680      	mov	r8, r0
 800718e:	b158      	cbz	r0, 80071a8 <_dtoa_r+0xe8>
 8007190:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007192:	2301      	movs	r3, #1
 8007194:	6013      	str	r3, [r2, #0]
 8007196:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007198:	2b00      	cmp	r3, #0
 800719a:	f000 8551 	beq.w	8007c40 <_dtoa_r+0xb80>
 800719e:	488b      	ldr	r0, [pc, #556]	; (80073cc <_dtoa_r+0x30c>)
 80071a0:	6018      	str	r0, [r3, #0]
 80071a2:	1e43      	subs	r3, r0, #1
 80071a4:	9300      	str	r3, [sp, #0]
 80071a6:	e7dd      	b.n	8007164 <_dtoa_r+0xa4>
 80071a8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80071ac:	aa12      	add	r2, sp, #72	; 0x48
 80071ae:	a913      	add	r1, sp, #76	; 0x4c
 80071b0:	4620      	mov	r0, r4
 80071b2:	f001 facd 	bl	8008750 <__d2b>
 80071b6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80071ba:	4683      	mov	fp, r0
 80071bc:	2d00      	cmp	r5, #0
 80071be:	d07c      	beq.n	80072ba <_dtoa_r+0x1fa>
 80071c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071c2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80071c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071ca:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80071ce:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80071d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80071d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80071da:	4b7d      	ldr	r3, [pc, #500]	; (80073d0 <_dtoa_r+0x310>)
 80071dc:	2200      	movs	r2, #0
 80071de:	4630      	mov	r0, r6
 80071e0:	4639      	mov	r1, r7
 80071e2:	f7f9 f871 	bl	80002c8 <__aeabi_dsub>
 80071e6:	a36e      	add	r3, pc, #440	; (adr r3, 80073a0 <_dtoa_r+0x2e0>)
 80071e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ec:	f7f9 fa24 	bl	8000638 <__aeabi_dmul>
 80071f0:	a36d      	add	r3, pc, #436	; (adr r3, 80073a8 <_dtoa_r+0x2e8>)
 80071f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f6:	f7f9 f869 	bl	80002cc <__adddf3>
 80071fa:	4606      	mov	r6, r0
 80071fc:	4628      	mov	r0, r5
 80071fe:	460f      	mov	r7, r1
 8007200:	f7f9 f9b0 	bl	8000564 <__aeabi_i2d>
 8007204:	a36a      	add	r3, pc, #424	; (adr r3, 80073b0 <_dtoa_r+0x2f0>)
 8007206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720a:	f7f9 fa15 	bl	8000638 <__aeabi_dmul>
 800720e:	4602      	mov	r2, r0
 8007210:	460b      	mov	r3, r1
 8007212:	4630      	mov	r0, r6
 8007214:	4639      	mov	r1, r7
 8007216:	f7f9 f859 	bl	80002cc <__adddf3>
 800721a:	4606      	mov	r6, r0
 800721c:	460f      	mov	r7, r1
 800721e:	f7f9 fcbb 	bl	8000b98 <__aeabi_d2iz>
 8007222:	2200      	movs	r2, #0
 8007224:	4682      	mov	sl, r0
 8007226:	2300      	movs	r3, #0
 8007228:	4630      	mov	r0, r6
 800722a:	4639      	mov	r1, r7
 800722c:	f7f9 fc76 	bl	8000b1c <__aeabi_dcmplt>
 8007230:	b148      	cbz	r0, 8007246 <_dtoa_r+0x186>
 8007232:	4650      	mov	r0, sl
 8007234:	f7f9 f996 	bl	8000564 <__aeabi_i2d>
 8007238:	4632      	mov	r2, r6
 800723a:	463b      	mov	r3, r7
 800723c:	f7f9 fc64 	bl	8000b08 <__aeabi_dcmpeq>
 8007240:	b908      	cbnz	r0, 8007246 <_dtoa_r+0x186>
 8007242:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007246:	f1ba 0f16 	cmp.w	sl, #22
 800724a:	d854      	bhi.n	80072f6 <_dtoa_r+0x236>
 800724c:	4b61      	ldr	r3, [pc, #388]	; (80073d4 <_dtoa_r+0x314>)
 800724e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007256:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800725a:	f7f9 fc5f 	bl	8000b1c <__aeabi_dcmplt>
 800725e:	2800      	cmp	r0, #0
 8007260:	d04b      	beq.n	80072fa <_dtoa_r+0x23a>
 8007262:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007266:	2300      	movs	r3, #0
 8007268:	930e      	str	r3, [sp, #56]	; 0x38
 800726a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800726c:	1b5d      	subs	r5, r3, r5
 800726e:	1e6b      	subs	r3, r5, #1
 8007270:	9304      	str	r3, [sp, #16]
 8007272:	bf43      	ittte	mi
 8007274:	2300      	movmi	r3, #0
 8007276:	f1c5 0801 	rsbmi	r8, r5, #1
 800727a:	9304      	strmi	r3, [sp, #16]
 800727c:	f04f 0800 	movpl.w	r8, #0
 8007280:	f1ba 0f00 	cmp.w	sl, #0
 8007284:	db3b      	blt.n	80072fe <_dtoa_r+0x23e>
 8007286:	9b04      	ldr	r3, [sp, #16]
 8007288:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800728c:	4453      	add	r3, sl
 800728e:	9304      	str	r3, [sp, #16]
 8007290:	2300      	movs	r3, #0
 8007292:	9306      	str	r3, [sp, #24]
 8007294:	9b05      	ldr	r3, [sp, #20]
 8007296:	2b09      	cmp	r3, #9
 8007298:	d869      	bhi.n	800736e <_dtoa_r+0x2ae>
 800729a:	2b05      	cmp	r3, #5
 800729c:	bfc4      	itt	gt
 800729e:	3b04      	subgt	r3, #4
 80072a0:	9305      	strgt	r3, [sp, #20]
 80072a2:	9b05      	ldr	r3, [sp, #20]
 80072a4:	f1a3 0302 	sub.w	r3, r3, #2
 80072a8:	bfcc      	ite	gt
 80072aa:	2500      	movgt	r5, #0
 80072ac:	2501      	movle	r5, #1
 80072ae:	2b03      	cmp	r3, #3
 80072b0:	d869      	bhi.n	8007386 <_dtoa_r+0x2c6>
 80072b2:	e8df f003 	tbb	[pc, r3]
 80072b6:	4e2c      	.short	0x4e2c
 80072b8:	5a4c      	.short	0x5a4c
 80072ba:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80072be:	441d      	add	r5, r3
 80072c0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80072c4:	2b20      	cmp	r3, #32
 80072c6:	bfc1      	itttt	gt
 80072c8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80072cc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80072d0:	fa09 f303 	lslgt.w	r3, r9, r3
 80072d4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80072d8:	bfda      	itte	le
 80072da:	f1c3 0320 	rsble	r3, r3, #32
 80072de:	fa06 f003 	lslle.w	r0, r6, r3
 80072e2:	4318      	orrgt	r0, r3
 80072e4:	f7f9 f92e 	bl	8000544 <__aeabi_ui2d>
 80072e8:	2301      	movs	r3, #1
 80072ea:	4606      	mov	r6, r0
 80072ec:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80072f0:	3d01      	subs	r5, #1
 80072f2:	9310      	str	r3, [sp, #64]	; 0x40
 80072f4:	e771      	b.n	80071da <_dtoa_r+0x11a>
 80072f6:	2301      	movs	r3, #1
 80072f8:	e7b6      	b.n	8007268 <_dtoa_r+0x1a8>
 80072fa:	900e      	str	r0, [sp, #56]	; 0x38
 80072fc:	e7b5      	b.n	800726a <_dtoa_r+0x1aa>
 80072fe:	f1ca 0300 	rsb	r3, sl, #0
 8007302:	9306      	str	r3, [sp, #24]
 8007304:	2300      	movs	r3, #0
 8007306:	eba8 080a 	sub.w	r8, r8, sl
 800730a:	930d      	str	r3, [sp, #52]	; 0x34
 800730c:	e7c2      	b.n	8007294 <_dtoa_r+0x1d4>
 800730e:	2300      	movs	r3, #0
 8007310:	9308      	str	r3, [sp, #32]
 8007312:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007314:	2b00      	cmp	r3, #0
 8007316:	dc39      	bgt.n	800738c <_dtoa_r+0x2cc>
 8007318:	f04f 0901 	mov.w	r9, #1
 800731c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007320:	464b      	mov	r3, r9
 8007322:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007326:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007328:	2200      	movs	r2, #0
 800732a:	6042      	str	r2, [r0, #4]
 800732c:	2204      	movs	r2, #4
 800732e:	f102 0614 	add.w	r6, r2, #20
 8007332:	429e      	cmp	r6, r3
 8007334:	6841      	ldr	r1, [r0, #4]
 8007336:	d92f      	bls.n	8007398 <_dtoa_r+0x2d8>
 8007338:	4620      	mov	r0, r4
 800733a:	f000 fee7 	bl	800810c <_Balloc>
 800733e:	9000      	str	r0, [sp, #0]
 8007340:	2800      	cmp	r0, #0
 8007342:	d14b      	bne.n	80073dc <_dtoa_r+0x31c>
 8007344:	4b24      	ldr	r3, [pc, #144]	; (80073d8 <_dtoa_r+0x318>)
 8007346:	4602      	mov	r2, r0
 8007348:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800734c:	e6d1      	b.n	80070f2 <_dtoa_r+0x32>
 800734e:	2301      	movs	r3, #1
 8007350:	e7de      	b.n	8007310 <_dtoa_r+0x250>
 8007352:	2300      	movs	r3, #0
 8007354:	9308      	str	r3, [sp, #32]
 8007356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007358:	eb0a 0903 	add.w	r9, sl, r3
 800735c:	f109 0301 	add.w	r3, r9, #1
 8007360:	2b01      	cmp	r3, #1
 8007362:	9301      	str	r3, [sp, #4]
 8007364:	bfb8      	it	lt
 8007366:	2301      	movlt	r3, #1
 8007368:	e7dd      	b.n	8007326 <_dtoa_r+0x266>
 800736a:	2301      	movs	r3, #1
 800736c:	e7f2      	b.n	8007354 <_dtoa_r+0x294>
 800736e:	2501      	movs	r5, #1
 8007370:	2300      	movs	r3, #0
 8007372:	9305      	str	r3, [sp, #20]
 8007374:	9508      	str	r5, [sp, #32]
 8007376:	f04f 39ff 	mov.w	r9, #4294967295
 800737a:	2200      	movs	r2, #0
 800737c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007380:	2312      	movs	r3, #18
 8007382:	9209      	str	r2, [sp, #36]	; 0x24
 8007384:	e7cf      	b.n	8007326 <_dtoa_r+0x266>
 8007386:	2301      	movs	r3, #1
 8007388:	9308      	str	r3, [sp, #32]
 800738a:	e7f4      	b.n	8007376 <_dtoa_r+0x2b6>
 800738c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007390:	f8cd 9004 	str.w	r9, [sp, #4]
 8007394:	464b      	mov	r3, r9
 8007396:	e7c6      	b.n	8007326 <_dtoa_r+0x266>
 8007398:	3101      	adds	r1, #1
 800739a:	6041      	str	r1, [r0, #4]
 800739c:	0052      	lsls	r2, r2, #1
 800739e:	e7c6      	b.n	800732e <_dtoa_r+0x26e>
 80073a0:	636f4361 	.word	0x636f4361
 80073a4:	3fd287a7 	.word	0x3fd287a7
 80073a8:	8b60c8b3 	.word	0x8b60c8b3
 80073ac:	3fc68a28 	.word	0x3fc68a28
 80073b0:	509f79fb 	.word	0x509f79fb
 80073b4:	3fd34413 	.word	0x3fd34413
 80073b8:	08009069 	.word	0x08009069
 80073bc:	08009080 	.word	0x08009080
 80073c0:	7ff00000 	.word	0x7ff00000
 80073c4:	08009065 	.word	0x08009065
 80073c8:	0800905c 	.word	0x0800905c
 80073cc:	08009039 	.word	0x08009039
 80073d0:	3ff80000 	.word	0x3ff80000
 80073d4:	080091d8 	.word	0x080091d8
 80073d8:	080090df 	.word	0x080090df
 80073dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073de:	9a00      	ldr	r2, [sp, #0]
 80073e0:	601a      	str	r2, [r3, #0]
 80073e2:	9b01      	ldr	r3, [sp, #4]
 80073e4:	2b0e      	cmp	r3, #14
 80073e6:	f200 80ad 	bhi.w	8007544 <_dtoa_r+0x484>
 80073ea:	2d00      	cmp	r5, #0
 80073ec:	f000 80aa 	beq.w	8007544 <_dtoa_r+0x484>
 80073f0:	f1ba 0f00 	cmp.w	sl, #0
 80073f4:	dd36      	ble.n	8007464 <_dtoa_r+0x3a4>
 80073f6:	4ac3      	ldr	r2, [pc, #780]	; (8007704 <_dtoa_r+0x644>)
 80073f8:	f00a 030f 	and.w	r3, sl, #15
 80073fc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007400:	ed93 7b00 	vldr	d7, [r3]
 8007404:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007408:	ea4f 172a 	mov.w	r7, sl, asr #4
 800740c:	eeb0 8a47 	vmov.f32	s16, s14
 8007410:	eef0 8a67 	vmov.f32	s17, s15
 8007414:	d016      	beq.n	8007444 <_dtoa_r+0x384>
 8007416:	4bbc      	ldr	r3, [pc, #752]	; (8007708 <_dtoa_r+0x648>)
 8007418:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800741c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007420:	f7f9 fa34 	bl	800088c <__aeabi_ddiv>
 8007424:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007428:	f007 070f 	and.w	r7, r7, #15
 800742c:	2503      	movs	r5, #3
 800742e:	4eb6      	ldr	r6, [pc, #728]	; (8007708 <_dtoa_r+0x648>)
 8007430:	b957      	cbnz	r7, 8007448 <_dtoa_r+0x388>
 8007432:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007436:	ec53 2b18 	vmov	r2, r3, d8
 800743a:	f7f9 fa27 	bl	800088c <__aeabi_ddiv>
 800743e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007442:	e029      	b.n	8007498 <_dtoa_r+0x3d8>
 8007444:	2502      	movs	r5, #2
 8007446:	e7f2      	b.n	800742e <_dtoa_r+0x36e>
 8007448:	07f9      	lsls	r1, r7, #31
 800744a:	d508      	bpl.n	800745e <_dtoa_r+0x39e>
 800744c:	ec51 0b18 	vmov	r0, r1, d8
 8007450:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007454:	f7f9 f8f0 	bl	8000638 <__aeabi_dmul>
 8007458:	ec41 0b18 	vmov	d8, r0, r1
 800745c:	3501      	adds	r5, #1
 800745e:	107f      	asrs	r7, r7, #1
 8007460:	3608      	adds	r6, #8
 8007462:	e7e5      	b.n	8007430 <_dtoa_r+0x370>
 8007464:	f000 80a6 	beq.w	80075b4 <_dtoa_r+0x4f4>
 8007468:	f1ca 0600 	rsb	r6, sl, #0
 800746c:	4ba5      	ldr	r3, [pc, #660]	; (8007704 <_dtoa_r+0x644>)
 800746e:	4fa6      	ldr	r7, [pc, #664]	; (8007708 <_dtoa_r+0x648>)
 8007470:	f006 020f 	and.w	r2, r6, #15
 8007474:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800747c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007480:	f7f9 f8da 	bl	8000638 <__aeabi_dmul>
 8007484:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007488:	1136      	asrs	r6, r6, #4
 800748a:	2300      	movs	r3, #0
 800748c:	2502      	movs	r5, #2
 800748e:	2e00      	cmp	r6, #0
 8007490:	f040 8085 	bne.w	800759e <_dtoa_r+0x4de>
 8007494:	2b00      	cmp	r3, #0
 8007496:	d1d2      	bne.n	800743e <_dtoa_r+0x37e>
 8007498:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800749a:	2b00      	cmp	r3, #0
 800749c:	f000 808c 	beq.w	80075b8 <_dtoa_r+0x4f8>
 80074a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80074a4:	4b99      	ldr	r3, [pc, #612]	; (800770c <_dtoa_r+0x64c>)
 80074a6:	2200      	movs	r2, #0
 80074a8:	4630      	mov	r0, r6
 80074aa:	4639      	mov	r1, r7
 80074ac:	f7f9 fb36 	bl	8000b1c <__aeabi_dcmplt>
 80074b0:	2800      	cmp	r0, #0
 80074b2:	f000 8081 	beq.w	80075b8 <_dtoa_r+0x4f8>
 80074b6:	9b01      	ldr	r3, [sp, #4]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d07d      	beq.n	80075b8 <_dtoa_r+0x4f8>
 80074bc:	f1b9 0f00 	cmp.w	r9, #0
 80074c0:	dd3c      	ble.n	800753c <_dtoa_r+0x47c>
 80074c2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80074c6:	9307      	str	r3, [sp, #28]
 80074c8:	2200      	movs	r2, #0
 80074ca:	4b91      	ldr	r3, [pc, #580]	; (8007710 <_dtoa_r+0x650>)
 80074cc:	4630      	mov	r0, r6
 80074ce:	4639      	mov	r1, r7
 80074d0:	f7f9 f8b2 	bl	8000638 <__aeabi_dmul>
 80074d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074d8:	3501      	adds	r5, #1
 80074da:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80074de:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80074e2:	4628      	mov	r0, r5
 80074e4:	f7f9 f83e 	bl	8000564 <__aeabi_i2d>
 80074e8:	4632      	mov	r2, r6
 80074ea:	463b      	mov	r3, r7
 80074ec:	f7f9 f8a4 	bl	8000638 <__aeabi_dmul>
 80074f0:	4b88      	ldr	r3, [pc, #544]	; (8007714 <_dtoa_r+0x654>)
 80074f2:	2200      	movs	r2, #0
 80074f4:	f7f8 feea 	bl	80002cc <__adddf3>
 80074f8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80074fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007500:	9303      	str	r3, [sp, #12]
 8007502:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007504:	2b00      	cmp	r3, #0
 8007506:	d15c      	bne.n	80075c2 <_dtoa_r+0x502>
 8007508:	4b83      	ldr	r3, [pc, #524]	; (8007718 <_dtoa_r+0x658>)
 800750a:	2200      	movs	r2, #0
 800750c:	4630      	mov	r0, r6
 800750e:	4639      	mov	r1, r7
 8007510:	f7f8 feda 	bl	80002c8 <__aeabi_dsub>
 8007514:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007518:	4606      	mov	r6, r0
 800751a:	460f      	mov	r7, r1
 800751c:	f7f9 fb1c 	bl	8000b58 <__aeabi_dcmpgt>
 8007520:	2800      	cmp	r0, #0
 8007522:	f040 8296 	bne.w	8007a52 <_dtoa_r+0x992>
 8007526:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800752a:	4630      	mov	r0, r6
 800752c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007530:	4639      	mov	r1, r7
 8007532:	f7f9 faf3 	bl	8000b1c <__aeabi_dcmplt>
 8007536:	2800      	cmp	r0, #0
 8007538:	f040 8288 	bne.w	8007a4c <_dtoa_r+0x98c>
 800753c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007540:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007544:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007546:	2b00      	cmp	r3, #0
 8007548:	f2c0 8158 	blt.w	80077fc <_dtoa_r+0x73c>
 800754c:	f1ba 0f0e 	cmp.w	sl, #14
 8007550:	f300 8154 	bgt.w	80077fc <_dtoa_r+0x73c>
 8007554:	4b6b      	ldr	r3, [pc, #428]	; (8007704 <_dtoa_r+0x644>)
 8007556:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800755a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800755e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007560:	2b00      	cmp	r3, #0
 8007562:	f280 80e3 	bge.w	800772c <_dtoa_r+0x66c>
 8007566:	9b01      	ldr	r3, [sp, #4]
 8007568:	2b00      	cmp	r3, #0
 800756a:	f300 80df 	bgt.w	800772c <_dtoa_r+0x66c>
 800756e:	f040 826d 	bne.w	8007a4c <_dtoa_r+0x98c>
 8007572:	4b69      	ldr	r3, [pc, #420]	; (8007718 <_dtoa_r+0x658>)
 8007574:	2200      	movs	r2, #0
 8007576:	4640      	mov	r0, r8
 8007578:	4649      	mov	r1, r9
 800757a:	f7f9 f85d 	bl	8000638 <__aeabi_dmul>
 800757e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007582:	f7f9 fadf 	bl	8000b44 <__aeabi_dcmpge>
 8007586:	9e01      	ldr	r6, [sp, #4]
 8007588:	4637      	mov	r7, r6
 800758a:	2800      	cmp	r0, #0
 800758c:	f040 8243 	bne.w	8007a16 <_dtoa_r+0x956>
 8007590:	9d00      	ldr	r5, [sp, #0]
 8007592:	2331      	movs	r3, #49	; 0x31
 8007594:	f805 3b01 	strb.w	r3, [r5], #1
 8007598:	f10a 0a01 	add.w	sl, sl, #1
 800759c:	e23f      	b.n	8007a1e <_dtoa_r+0x95e>
 800759e:	07f2      	lsls	r2, r6, #31
 80075a0:	d505      	bpl.n	80075ae <_dtoa_r+0x4ee>
 80075a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075a6:	f7f9 f847 	bl	8000638 <__aeabi_dmul>
 80075aa:	3501      	adds	r5, #1
 80075ac:	2301      	movs	r3, #1
 80075ae:	1076      	asrs	r6, r6, #1
 80075b0:	3708      	adds	r7, #8
 80075b2:	e76c      	b.n	800748e <_dtoa_r+0x3ce>
 80075b4:	2502      	movs	r5, #2
 80075b6:	e76f      	b.n	8007498 <_dtoa_r+0x3d8>
 80075b8:	9b01      	ldr	r3, [sp, #4]
 80075ba:	f8cd a01c 	str.w	sl, [sp, #28]
 80075be:	930c      	str	r3, [sp, #48]	; 0x30
 80075c0:	e78d      	b.n	80074de <_dtoa_r+0x41e>
 80075c2:	9900      	ldr	r1, [sp, #0]
 80075c4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80075c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80075c8:	4b4e      	ldr	r3, [pc, #312]	; (8007704 <_dtoa_r+0x644>)
 80075ca:	ed9d 7b02 	vldr	d7, [sp, #8]
 80075ce:	4401      	add	r1, r0
 80075d0:	9102      	str	r1, [sp, #8]
 80075d2:	9908      	ldr	r1, [sp, #32]
 80075d4:	eeb0 8a47 	vmov.f32	s16, s14
 80075d8:	eef0 8a67 	vmov.f32	s17, s15
 80075dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075e0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80075e4:	2900      	cmp	r1, #0
 80075e6:	d045      	beq.n	8007674 <_dtoa_r+0x5b4>
 80075e8:	494c      	ldr	r1, [pc, #304]	; (800771c <_dtoa_r+0x65c>)
 80075ea:	2000      	movs	r0, #0
 80075ec:	f7f9 f94e 	bl	800088c <__aeabi_ddiv>
 80075f0:	ec53 2b18 	vmov	r2, r3, d8
 80075f4:	f7f8 fe68 	bl	80002c8 <__aeabi_dsub>
 80075f8:	9d00      	ldr	r5, [sp, #0]
 80075fa:	ec41 0b18 	vmov	d8, r0, r1
 80075fe:	4639      	mov	r1, r7
 8007600:	4630      	mov	r0, r6
 8007602:	f7f9 fac9 	bl	8000b98 <__aeabi_d2iz>
 8007606:	900c      	str	r0, [sp, #48]	; 0x30
 8007608:	f7f8 ffac 	bl	8000564 <__aeabi_i2d>
 800760c:	4602      	mov	r2, r0
 800760e:	460b      	mov	r3, r1
 8007610:	4630      	mov	r0, r6
 8007612:	4639      	mov	r1, r7
 8007614:	f7f8 fe58 	bl	80002c8 <__aeabi_dsub>
 8007618:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800761a:	3330      	adds	r3, #48	; 0x30
 800761c:	f805 3b01 	strb.w	r3, [r5], #1
 8007620:	ec53 2b18 	vmov	r2, r3, d8
 8007624:	4606      	mov	r6, r0
 8007626:	460f      	mov	r7, r1
 8007628:	f7f9 fa78 	bl	8000b1c <__aeabi_dcmplt>
 800762c:	2800      	cmp	r0, #0
 800762e:	d165      	bne.n	80076fc <_dtoa_r+0x63c>
 8007630:	4632      	mov	r2, r6
 8007632:	463b      	mov	r3, r7
 8007634:	4935      	ldr	r1, [pc, #212]	; (800770c <_dtoa_r+0x64c>)
 8007636:	2000      	movs	r0, #0
 8007638:	f7f8 fe46 	bl	80002c8 <__aeabi_dsub>
 800763c:	ec53 2b18 	vmov	r2, r3, d8
 8007640:	f7f9 fa6c 	bl	8000b1c <__aeabi_dcmplt>
 8007644:	2800      	cmp	r0, #0
 8007646:	f040 80b9 	bne.w	80077bc <_dtoa_r+0x6fc>
 800764a:	9b02      	ldr	r3, [sp, #8]
 800764c:	429d      	cmp	r5, r3
 800764e:	f43f af75 	beq.w	800753c <_dtoa_r+0x47c>
 8007652:	4b2f      	ldr	r3, [pc, #188]	; (8007710 <_dtoa_r+0x650>)
 8007654:	ec51 0b18 	vmov	r0, r1, d8
 8007658:	2200      	movs	r2, #0
 800765a:	f7f8 ffed 	bl	8000638 <__aeabi_dmul>
 800765e:	4b2c      	ldr	r3, [pc, #176]	; (8007710 <_dtoa_r+0x650>)
 8007660:	ec41 0b18 	vmov	d8, r0, r1
 8007664:	2200      	movs	r2, #0
 8007666:	4630      	mov	r0, r6
 8007668:	4639      	mov	r1, r7
 800766a:	f7f8 ffe5 	bl	8000638 <__aeabi_dmul>
 800766e:	4606      	mov	r6, r0
 8007670:	460f      	mov	r7, r1
 8007672:	e7c4      	b.n	80075fe <_dtoa_r+0x53e>
 8007674:	ec51 0b17 	vmov	r0, r1, d7
 8007678:	f7f8 ffde 	bl	8000638 <__aeabi_dmul>
 800767c:	9b02      	ldr	r3, [sp, #8]
 800767e:	9d00      	ldr	r5, [sp, #0]
 8007680:	930c      	str	r3, [sp, #48]	; 0x30
 8007682:	ec41 0b18 	vmov	d8, r0, r1
 8007686:	4639      	mov	r1, r7
 8007688:	4630      	mov	r0, r6
 800768a:	f7f9 fa85 	bl	8000b98 <__aeabi_d2iz>
 800768e:	9011      	str	r0, [sp, #68]	; 0x44
 8007690:	f7f8 ff68 	bl	8000564 <__aeabi_i2d>
 8007694:	4602      	mov	r2, r0
 8007696:	460b      	mov	r3, r1
 8007698:	4630      	mov	r0, r6
 800769a:	4639      	mov	r1, r7
 800769c:	f7f8 fe14 	bl	80002c8 <__aeabi_dsub>
 80076a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80076a2:	3330      	adds	r3, #48	; 0x30
 80076a4:	f805 3b01 	strb.w	r3, [r5], #1
 80076a8:	9b02      	ldr	r3, [sp, #8]
 80076aa:	429d      	cmp	r5, r3
 80076ac:	4606      	mov	r6, r0
 80076ae:	460f      	mov	r7, r1
 80076b0:	f04f 0200 	mov.w	r2, #0
 80076b4:	d134      	bne.n	8007720 <_dtoa_r+0x660>
 80076b6:	4b19      	ldr	r3, [pc, #100]	; (800771c <_dtoa_r+0x65c>)
 80076b8:	ec51 0b18 	vmov	r0, r1, d8
 80076bc:	f7f8 fe06 	bl	80002cc <__adddf3>
 80076c0:	4602      	mov	r2, r0
 80076c2:	460b      	mov	r3, r1
 80076c4:	4630      	mov	r0, r6
 80076c6:	4639      	mov	r1, r7
 80076c8:	f7f9 fa46 	bl	8000b58 <__aeabi_dcmpgt>
 80076cc:	2800      	cmp	r0, #0
 80076ce:	d175      	bne.n	80077bc <_dtoa_r+0x6fc>
 80076d0:	ec53 2b18 	vmov	r2, r3, d8
 80076d4:	4911      	ldr	r1, [pc, #68]	; (800771c <_dtoa_r+0x65c>)
 80076d6:	2000      	movs	r0, #0
 80076d8:	f7f8 fdf6 	bl	80002c8 <__aeabi_dsub>
 80076dc:	4602      	mov	r2, r0
 80076de:	460b      	mov	r3, r1
 80076e0:	4630      	mov	r0, r6
 80076e2:	4639      	mov	r1, r7
 80076e4:	f7f9 fa1a 	bl	8000b1c <__aeabi_dcmplt>
 80076e8:	2800      	cmp	r0, #0
 80076ea:	f43f af27 	beq.w	800753c <_dtoa_r+0x47c>
 80076ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80076f0:	1e6b      	subs	r3, r5, #1
 80076f2:	930c      	str	r3, [sp, #48]	; 0x30
 80076f4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80076f8:	2b30      	cmp	r3, #48	; 0x30
 80076fa:	d0f8      	beq.n	80076ee <_dtoa_r+0x62e>
 80076fc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007700:	e04a      	b.n	8007798 <_dtoa_r+0x6d8>
 8007702:	bf00      	nop
 8007704:	080091d8 	.word	0x080091d8
 8007708:	080091b0 	.word	0x080091b0
 800770c:	3ff00000 	.word	0x3ff00000
 8007710:	40240000 	.word	0x40240000
 8007714:	401c0000 	.word	0x401c0000
 8007718:	40140000 	.word	0x40140000
 800771c:	3fe00000 	.word	0x3fe00000
 8007720:	4baf      	ldr	r3, [pc, #700]	; (80079e0 <_dtoa_r+0x920>)
 8007722:	f7f8 ff89 	bl	8000638 <__aeabi_dmul>
 8007726:	4606      	mov	r6, r0
 8007728:	460f      	mov	r7, r1
 800772a:	e7ac      	b.n	8007686 <_dtoa_r+0x5c6>
 800772c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007730:	9d00      	ldr	r5, [sp, #0]
 8007732:	4642      	mov	r2, r8
 8007734:	464b      	mov	r3, r9
 8007736:	4630      	mov	r0, r6
 8007738:	4639      	mov	r1, r7
 800773a:	f7f9 f8a7 	bl	800088c <__aeabi_ddiv>
 800773e:	f7f9 fa2b 	bl	8000b98 <__aeabi_d2iz>
 8007742:	9002      	str	r0, [sp, #8]
 8007744:	f7f8 ff0e 	bl	8000564 <__aeabi_i2d>
 8007748:	4642      	mov	r2, r8
 800774a:	464b      	mov	r3, r9
 800774c:	f7f8 ff74 	bl	8000638 <__aeabi_dmul>
 8007750:	4602      	mov	r2, r0
 8007752:	460b      	mov	r3, r1
 8007754:	4630      	mov	r0, r6
 8007756:	4639      	mov	r1, r7
 8007758:	f7f8 fdb6 	bl	80002c8 <__aeabi_dsub>
 800775c:	9e02      	ldr	r6, [sp, #8]
 800775e:	9f01      	ldr	r7, [sp, #4]
 8007760:	3630      	adds	r6, #48	; 0x30
 8007762:	f805 6b01 	strb.w	r6, [r5], #1
 8007766:	9e00      	ldr	r6, [sp, #0]
 8007768:	1bae      	subs	r6, r5, r6
 800776a:	42b7      	cmp	r7, r6
 800776c:	4602      	mov	r2, r0
 800776e:	460b      	mov	r3, r1
 8007770:	d137      	bne.n	80077e2 <_dtoa_r+0x722>
 8007772:	f7f8 fdab 	bl	80002cc <__adddf3>
 8007776:	4642      	mov	r2, r8
 8007778:	464b      	mov	r3, r9
 800777a:	4606      	mov	r6, r0
 800777c:	460f      	mov	r7, r1
 800777e:	f7f9 f9eb 	bl	8000b58 <__aeabi_dcmpgt>
 8007782:	b9c8      	cbnz	r0, 80077b8 <_dtoa_r+0x6f8>
 8007784:	4642      	mov	r2, r8
 8007786:	464b      	mov	r3, r9
 8007788:	4630      	mov	r0, r6
 800778a:	4639      	mov	r1, r7
 800778c:	f7f9 f9bc 	bl	8000b08 <__aeabi_dcmpeq>
 8007790:	b110      	cbz	r0, 8007798 <_dtoa_r+0x6d8>
 8007792:	9b02      	ldr	r3, [sp, #8]
 8007794:	07d9      	lsls	r1, r3, #31
 8007796:	d40f      	bmi.n	80077b8 <_dtoa_r+0x6f8>
 8007798:	4620      	mov	r0, r4
 800779a:	4659      	mov	r1, fp
 800779c:	f000 fcf6 	bl	800818c <_Bfree>
 80077a0:	2300      	movs	r3, #0
 80077a2:	702b      	strb	r3, [r5, #0]
 80077a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80077a6:	f10a 0001 	add.w	r0, sl, #1
 80077aa:	6018      	str	r0, [r3, #0]
 80077ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	f43f acd8 	beq.w	8007164 <_dtoa_r+0xa4>
 80077b4:	601d      	str	r5, [r3, #0]
 80077b6:	e4d5      	b.n	8007164 <_dtoa_r+0xa4>
 80077b8:	f8cd a01c 	str.w	sl, [sp, #28]
 80077bc:	462b      	mov	r3, r5
 80077be:	461d      	mov	r5, r3
 80077c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80077c4:	2a39      	cmp	r2, #57	; 0x39
 80077c6:	d108      	bne.n	80077da <_dtoa_r+0x71a>
 80077c8:	9a00      	ldr	r2, [sp, #0]
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d1f7      	bne.n	80077be <_dtoa_r+0x6fe>
 80077ce:	9a07      	ldr	r2, [sp, #28]
 80077d0:	9900      	ldr	r1, [sp, #0]
 80077d2:	3201      	adds	r2, #1
 80077d4:	9207      	str	r2, [sp, #28]
 80077d6:	2230      	movs	r2, #48	; 0x30
 80077d8:	700a      	strb	r2, [r1, #0]
 80077da:	781a      	ldrb	r2, [r3, #0]
 80077dc:	3201      	adds	r2, #1
 80077de:	701a      	strb	r2, [r3, #0]
 80077e0:	e78c      	b.n	80076fc <_dtoa_r+0x63c>
 80077e2:	4b7f      	ldr	r3, [pc, #508]	; (80079e0 <_dtoa_r+0x920>)
 80077e4:	2200      	movs	r2, #0
 80077e6:	f7f8 ff27 	bl	8000638 <__aeabi_dmul>
 80077ea:	2200      	movs	r2, #0
 80077ec:	2300      	movs	r3, #0
 80077ee:	4606      	mov	r6, r0
 80077f0:	460f      	mov	r7, r1
 80077f2:	f7f9 f989 	bl	8000b08 <__aeabi_dcmpeq>
 80077f6:	2800      	cmp	r0, #0
 80077f8:	d09b      	beq.n	8007732 <_dtoa_r+0x672>
 80077fa:	e7cd      	b.n	8007798 <_dtoa_r+0x6d8>
 80077fc:	9a08      	ldr	r2, [sp, #32]
 80077fe:	2a00      	cmp	r2, #0
 8007800:	f000 80c4 	beq.w	800798c <_dtoa_r+0x8cc>
 8007804:	9a05      	ldr	r2, [sp, #20]
 8007806:	2a01      	cmp	r2, #1
 8007808:	f300 80a8 	bgt.w	800795c <_dtoa_r+0x89c>
 800780c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800780e:	2a00      	cmp	r2, #0
 8007810:	f000 80a0 	beq.w	8007954 <_dtoa_r+0x894>
 8007814:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007818:	9e06      	ldr	r6, [sp, #24]
 800781a:	4645      	mov	r5, r8
 800781c:	9a04      	ldr	r2, [sp, #16]
 800781e:	2101      	movs	r1, #1
 8007820:	441a      	add	r2, r3
 8007822:	4620      	mov	r0, r4
 8007824:	4498      	add	r8, r3
 8007826:	9204      	str	r2, [sp, #16]
 8007828:	f000 fd6c 	bl	8008304 <__i2b>
 800782c:	4607      	mov	r7, r0
 800782e:	2d00      	cmp	r5, #0
 8007830:	dd0b      	ble.n	800784a <_dtoa_r+0x78a>
 8007832:	9b04      	ldr	r3, [sp, #16]
 8007834:	2b00      	cmp	r3, #0
 8007836:	dd08      	ble.n	800784a <_dtoa_r+0x78a>
 8007838:	42ab      	cmp	r3, r5
 800783a:	9a04      	ldr	r2, [sp, #16]
 800783c:	bfa8      	it	ge
 800783e:	462b      	movge	r3, r5
 8007840:	eba8 0803 	sub.w	r8, r8, r3
 8007844:	1aed      	subs	r5, r5, r3
 8007846:	1ad3      	subs	r3, r2, r3
 8007848:	9304      	str	r3, [sp, #16]
 800784a:	9b06      	ldr	r3, [sp, #24]
 800784c:	b1fb      	cbz	r3, 800788e <_dtoa_r+0x7ce>
 800784e:	9b08      	ldr	r3, [sp, #32]
 8007850:	2b00      	cmp	r3, #0
 8007852:	f000 809f 	beq.w	8007994 <_dtoa_r+0x8d4>
 8007856:	2e00      	cmp	r6, #0
 8007858:	dd11      	ble.n	800787e <_dtoa_r+0x7be>
 800785a:	4639      	mov	r1, r7
 800785c:	4632      	mov	r2, r6
 800785e:	4620      	mov	r0, r4
 8007860:	f000 fe0c 	bl	800847c <__pow5mult>
 8007864:	465a      	mov	r2, fp
 8007866:	4601      	mov	r1, r0
 8007868:	4607      	mov	r7, r0
 800786a:	4620      	mov	r0, r4
 800786c:	f000 fd60 	bl	8008330 <__multiply>
 8007870:	4659      	mov	r1, fp
 8007872:	9007      	str	r0, [sp, #28]
 8007874:	4620      	mov	r0, r4
 8007876:	f000 fc89 	bl	800818c <_Bfree>
 800787a:	9b07      	ldr	r3, [sp, #28]
 800787c:	469b      	mov	fp, r3
 800787e:	9b06      	ldr	r3, [sp, #24]
 8007880:	1b9a      	subs	r2, r3, r6
 8007882:	d004      	beq.n	800788e <_dtoa_r+0x7ce>
 8007884:	4659      	mov	r1, fp
 8007886:	4620      	mov	r0, r4
 8007888:	f000 fdf8 	bl	800847c <__pow5mult>
 800788c:	4683      	mov	fp, r0
 800788e:	2101      	movs	r1, #1
 8007890:	4620      	mov	r0, r4
 8007892:	f000 fd37 	bl	8008304 <__i2b>
 8007896:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007898:	2b00      	cmp	r3, #0
 800789a:	4606      	mov	r6, r0
 800789c:	dd7c      	ble.n	8007998 <_dtoa_r+0x8d8>
 800789e:	461a      	mov	r2, r3
 80078a0:	4601      	mov	r1, r0
 80078a2:	4620      	mov	r0, r4
 80078a4:	f000 fdea 	bl	800847c <__pow5mult>
 80078a8:	9b05      	ldr	r3, [sp, #20]
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	4606      	mov	r6, r0
 80078ae:	dd76      	ble.n	800799e <_dtoa_r+0x8de>
 80078b0:	2300      	movs	r3, #0
 80078b2:	9306      	str	r3, [sp, #24]
 80078b4:	6933      	ldr	r3, [r6, #16]
 80078b6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80078ba:	6918      	ldr	r0, [r3, #16]
 80078bc:	f000 fcd2 	bl	8008264 <__hi0bits>
 80078c0:	f1c0 0020 	rsb	r0, r0, #32
 80078c4:	9b04      	ldr	r3, [sp, #16]
 80078c6:	4418      	add	r0, r3
 80078c8:	f010 001f 	ands.w	r0, r0, #31
 80078cc:	f000 8086 	beq.w	80079dc <_dtoa_r+0x91c>
 80078d0:	f1c0 0320 	rsb	r3, r0, #32
 80078d4:	2b04      	cmp	r3, #4
 80078d6:	dd7f      	ble.n	80079d8 <_dtoa_r+0x918>
 80078d8:	f1c0 001c 	rsb	r0, r0, #28
 80078dc:	9b04      	ldr	r3, [sp, #16]
 80078de:	4403      	add	r3, r0
 80078e0:	4480      	add	r8, r0
 80078e2:	4405      	add	r5, r0
 80078e4:	9304      	str	r3, [sp, #16]
 80078e6:	f1b8 0f00 	cmp.w	r8, #0
 80078ea:	dd05      	ble.n	80078f8 <_dtoa_r+0x838>
 80078ec:	4659      	mov	r1, fp
 80078ee:	4642      	mov	r2, r8
 80078f0:	4620      	mov	r0, r4
 80078f2:	f000 fe1d 	bl	8008530 <__lshift>
 80078f6:	4683      	mov	fp, r0
 80078f8:	9b04      	ldr	r3, [sp, #16]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	dd05      	ble.n	800790a <_dtoa_r+0x84a>
 80078fe:	4631      	mov	r1, r6
 8007900:	461a      	mov	r2, r3
 8007902:	4620      	mov	r0, r4
 8007904:	f000 fe14 	bl	8008530 <__lshift>
 8007908:	4606      	mov	r6, r0
 800790a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800790c:	2b00      	cmp	r3, #0
 800790e:	d069      	beq.n	80079e4 <_dtoa_r+0x924>
 8007910:	4631      	mov	r1, r6
 8007912:	4658      	mov	r0, fp
 8007914:	f000 fe78 	bl	8008608 <__mcmp>
 8007918:	2800      	cmp	r0, #0
 800791a:	da63      	bge.n	80079e4 <_dtoa_r+0x924>
 800791c:	2300      	movs	r3, #0
 800791e:	4659      	mov	r1, fp
 8007920:	220a      	movs	r2, #10
 8007922:	4620      	mov	r0, r4
 8007924:	f000 fc54 	bl	80081d0 <__multadd>
 8007928:	9b08      	ldr	r3, [sp, #32]
 800792a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800792e:	4683      	mov	fp, r0
 8007930:	2b00      	cmp	r3, #0
 8007932:	f000 818f 	beq.w	8007c54 <_dtoa_r+0xb94>
 8007936:	4639      	mov	r1, r7
 8007938:	2300      	movs	r3, #0
 800793a:	220a      	movs	r2, #10
 800793c:	4620      	mov	r0, r4
 800793e:	f000 fc47 	bl	80081d0 <__multadd>
 8007942:	f1b9 0f00 	cmp.w	r9, #0
 8007946:	4607      	mov	r7, r0
 8007948:	f300 808e 	bgt.w	8007a68 <_dtoa_r+0x9a8>
 800794c:	9b05      	ldr	r3, [sp, #20]
 800794e:	2b02      	cmp	r3, #2
 8007950:	dc50      	bgt.n	80079f4 <_dtoa_r+0x934>
 8007952:	e089      	b.n	8007a68 <_dtoa_r+0x9a8>
 8007954:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007956:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800795a:	e75d      	b.n	8007818 <_dtoa_r+0x758>
 800795c:	9b01      	ldr	r3, [sp, #4]
 800795e:	1e5e      	subs	r6, r3, #1
 8007960:	9b06      	ldr	r3, [sp, #24]
 8007962:	42b3      	cmp	r3, r6
 8007964:	bfbf      	itttt	lt
 8007966:	9b06      	ldrlt	r3, [sp, #24]
 8007968:	9606      	strlt	r6, [sp, #24]
 800796a:	1af2      	sublt	r2, r6, r3
 800796c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800796e:	bfb6      	itet	lt
 8007970:	189b      	addlt	r3, r3, r2
 8007972:	1b9e      	subge	r6, r3, r6
 8007974:	930d      	strlt	r3, [sp, #52]	; 0x34
 8007976:	9b01      	ldr	r3, [sp, #4]
 8007978:	bfb8      	it	lt
 800797a:	2600      	movlt	r6, #0
 800797c:	2b00      	cmp	r3, #0
 800797e:	bfb5      	itete	lt
 8007980:	eba8 0503 	sublt.w	r5, r8, r3
 8007984:	9b01      	ldrge	r3, [sp, #4]
 8007986:	2300      	movlt	r3, #0
 8007988:	4645      	movge	r5, r8
 800798a:	e747      	b.n	800781c <_dtoa_r+0x75c>
 800798c:	9e06      	ldr	r6, [sp, #24]
 800798e:	9f08      	ldr	r7, [sp, #32]
 8007990:	4645      	mov	r5, r8
 8007992:	e74c      	b.n	800782e <_dtoa_r+0x76e>
 8007994:	9a06      	ldr	r2, [sp, #24]
 8007996:	e775      	b.n	8007884 <_dtoa_r+0x7c4>
 8007998:	9b05      	ldr	r3, [sp, #20]
 800799a:	2b01      	cmp	r3, #1
 800799c:	dc18      	bgt.n	80079d0 <_dtoa_r+0x910>
 800799e:	9b02      	ldr	r3, [sp, #8]
 80079a0:	b9b3      	cbnz	r3, 80079d0 <_dtoa_r+0x910>
 80079a2:	9b03      	ldr	r3, [sp, #12]
 80079a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079a8:	b9a3      	cbnz	r3, 80079d4 <_dtoa_r+0x914>
 80079aa:	9b03      	ldr	r3, [sp, #12]
 80079ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80079b0:	0d1b      	lsrs	r3, r3, #20
 80079b2:	051b      	lsls	r3, r3, #20
 80079b4:	b12b      	cbz	r3, 80079c2 <_dtoa_r+0x902>
 80079b6:	9b04      	ldr	r3, [sp, #16]
 80079b8:	3301      	adds	r3, #1
 80079ba:	9304      	str	r3, [sp, #16]
 80079bc:	f108 0801 	add.w	r8, r8, #1
 80079c0:	2301      	movs	r3, #1
 80079c2:	9306      	str	r3, [sp, #24]
 80079c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	f47f af74 	bne.w	80078b4 <_dtoa_r+0x7f4>
 80079cc:	2001      	movs	r0, #1
 80079ce:	e779      	b.n	80078c4 <_dtoa_r+0x804>
 80079d0:	2300      	movs	r3, #0
 80079d2:	e7f6      	b.n	80079c2 <_dtoa_r+0x902>
 80079d4:	9b02      	ldr	r3, [sp, #8]
 80079d6:	e7f4      	b.n	80079c2 <_dtoa_r+0x902>
 80079d8:	d085      	beq.n	80078e6 <_dtoa_r+0x826>
 80079da:	4618      	mov	r0, r3
 80079dc:	301c      	adds	r0, #28
 80079de:	e77d      	b.n	80078dc <_dtoa_r+0x81c>
 80079e0:	40240000 	.word	0x40240000
 80079e4:	9b01      	ldr	r3, [sp, #4]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	dc38      	bgt.n	8007a5c <_dtoa_r+0x99c>
 80079ea:	9b05      	ldr	r3, [sp, #20]
 80079ec:	2b02      	cmp	r3, #2
 80079ee:	dd35      	ble.n	8007a5c <_dtoa_r+0x99c>
 80079f0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80079f4:	f1b9 0f00 	cmp.w	r9, #0
 80079f8:	d10d      	bne.n	8007a16 <_dtoa_r+0x956>
 80079fa:	4631      	mov	r1, r6
 80079fc:	464b      	mov	r3, r9
 80079fe:	2205      	movs	r2, #5
 8007a00:	4620      	mov	r0, r4
 8007a02:	f000 fbe5 	bl	80081d0 <__multadd>
 8007a06:	4601      	mov	r1, r0
 8007a08:	4606      	mov	r6, r0
 8007a0a:	4658      	mov	r0, fp
 8007a0c:	f000 fdfc 	bl	8008608 <__mcmp>
 8007a10:	2800      	cmp	r0, #0
 8007a12:	f73f adbd 	bgt.w	8007590 <_dtoa_r+0x4d0>
 8007a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a18:	9d00      	ldr	r5, [sp, #0]
 8007a1a:	ea6f 0a03 	mvn.w	sl, r3
 8007a1e:	f04f 0800 	mov.w	r8, #0
 8007a22:	4631      	mov	r1, r6
 8007a24:	4620      	mov	r0, r4
 8007a26:	f000 fbb1 	bl	800818c <_Bfree>
 8007a2a:	2f00      	cmp	r7, #0
 8007a2c:	f43f aeb4 	beq.w	8007798 <_dtoa_r+0x6d8>
 8007a30:	f1b8 0f00 	cmp.w	r8, #0
 8007a34:	d005      	beq.n	8007a42 <_dtoa_r+0x982>
 8007a36:	45b8      	cmp	r8, r7
 8007a38:	d003      	beq.n	8007a42 <_dtoa_r+0x982>
 8007a3a:	4641      	mov	r1, r8
 8007a3c:	4620      	mov	r0, r4
 8007a3e:	f000 fba5 	bl	800818c <_Bfree>
 8007a42:	4639      	mov	r1, r7
 8007a44:	4620      	mov	r0, r4
 8007a46:	f000 fba1 	bl	800818c <_Bfree>
 8007a4a:	e6a5      	b.n	8007798 <_dtoa_r+0x6d8>
 8007a4c:	2600      	movs	r6, #0
 8007a4e:	4637      	mov	r7, r6
 8007a50:	e7e1      	b.n	8007a16 <_dtoa_r+0x956>
 8007a52:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007a54:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007a58:	4637      	mov	r7, r6
 8007a5a:	e599      	b.n	8007590 <_dtoa_r+0x4d0>
 8007a5c:	9b08      	ldr	r3, [sp, #32]
 8007a5e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	f000 80fd 	beq.w	8007c62 <_dtoa_r+0xba2>
 8007a68:	2d00      	cmp	r5, #0
 8007a6a:	dd05      	ble.n	8007a78 <_dtoa_r+0x9b8>
 8007a6c:	4639      	mov	r1, r7
 8007a6e:	462a      	mov	r2, r5
 8007a70:	4620      	mov	r0, r4
 8007a72:	f000 fd5d 	bl	8008530 <__lshift>
 8007a76:	4607      	mov	r7, r0
 8007a78:	9b06      	ldr	r3, [sp, #24]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d05c      	beq.n	8007b38 <_dtoa_r+0xa78>
 8007a7e:	6879      	ldr	r1, [r7, #4]
 8007a80:	4620      	mov	r0, r4
 8007a82:	f000 fb43 	bl	800810c <_Balloc>
 8007a86:	4605      	mov	r5, r0
 8007a88:	b928      	cbnz	r0, 8007a96 <_dtoa_r+0x9d6>
 8007a8a:	4b80      	ldr	r3, [pc, #512]	; (8007c8c <_dtoa_r+0xbcc>)
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007a92:	f7ff bb2e 	b.w	80070f2 <_dtoa_r+0x32>
 8007a96:	693a      	ldr	r2, [r7, #16]
 8007a98:	3202      	adds	r2, #2
 8007a9a:	0092      	lsls	r2, r2, #2
 8007a9c:	f107 010c 	add.w	r1, r7, #12
 8007aa0:	300c      	adds	r0, #12
 8007aa2:	f000 fb25 	bl	80080f0 <memcpy>
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	4629      	mov	r1, r5
 8007aaa:	4620      	mov	r0, r4
 8007aac:	f000 fd40 	bl	8008530 <__lshift>
 8007ab0:	9b00      	ldr	r3, [sp, #0]
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	9301      	str	r3, [sp, #4]
 8007ab6:	9b00      	ldr	r3, [sp, #0]
 8007ab8:	444b      	add	r3, r9
 8007aba:	9307      	str	r3, [sp, #28]
 8007abc:	9b02      	ldr	r3, [sp, #8]
 8007abe:	f003 0301 	and.w	r3, r3, #1
 8007ac2:	46b8      	mov	r8, r7
 8007ac4:	9306      	str	r3, [sp, #24]
 8007ac6:	4607      	mov	r7, r0
 8007ac8:	9b01      	ldr	r3, [sp, #4]
 8007aca:	4631      	mov	r1, r6
 8007acc:	3b01      	subs	r3, #1
 8007ace:	4658      	mov	r0, fp
 8007ad0:	9302      	str	r3, [sp, #8]
 8007ad2:	f7ff fa69 	bl	8006fa8 <quorem>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	3330      	adds	r3, #48	; 0x30
 8007ada:	9004      	str	r0, [sp, #16]
 8007adc:	4641      	mov	r1, r8
 8007ade:	4658      	mov	r0, fp
 8007ae0:	9308      	str	r3, [sp, #32]
 8007ae2:	f000 fd91 	bl	8008608 <__mcmp>
 8007ae6:	463a      	mov	r2, r7
 8007ae8:	4681      	mov	r9, r0
 8007aea:	4631      	mov	r1, r6
 8007aec:	4620      	mov	r0, r4
 8007aee:	f000 fda7 	bl	8008640 <__mdiff>
 8007af2:	68c2      	ldr	r2, [r0, #12]
 8007af4:	9b08      	ldr	r3, [sp, #32]
 8007af6:	4605      	mov	r5, r0
 8007af8:	bb02      	cbnz	r2, 8007b3c <_dtoa_r+0xa7c>
 8007afa:	4601      	mov	r1, r0
 8007afc:	4658      	mov	r0, fp
 8007afe:	f000 fd83 	bl	8008608 <__mcmp>
 8007b02:	9b08      	ldr	r3, [sp, #32]
 8007b04:	4602      	mov	r2, r0
 8007b06:	4629      	mov	r1, r5
 8007b08:	4620      	mov	r0, r4
 8007b0a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8007b0e:	f000 fb3d 	bl	800818c <_Bfree>
 8007b12:	9b05      	ldr	r3, [sp, #20]
 8007b14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b16:	9d01      	ldr	r5, [sp, #4]
 8007b18:	ea43 0102 	orr.w	r1, r3, r2
 8007b1c:	9b06      	ldr	r3, [sp, #24]
 8007b1e:	430b      	orrs	r3, r1
 8007b20:	9b08      	ldr	r3, [sp, #32]
 8007b22:	d10d      	bne.n	8007b40 <_dtoa_r+0xa80>
 8007b24:	2b39      	cmp	r3, #57	; 0x39
 8007b26:	d029      	beq.n	8007b7c <_dtoa_r+0xabc>
 8007b28:	f1b9 0f00 	cmp.w	r9, #0
 8007b2c:	dd01      	ble.n	8007b32 <_dtoa_r+0xa72>
 8007b2e:	9b04      	ldr	r3, [sp, #16]
 8007b30:	3331      	adds	r3, #49	; 0x31
 8007b32:	9a02      	ldr	r2, [sp, #8]
 8007b34:	7013      	strb	r3, [r2, #0]
 8007b36:	e774      	b.n	8007a22 <_dtoa_r+0x962>
 8007b38:	4638      	mov	r0, r7
 8007b3a:	e7b9      	b.n	8007ab0 <_dtoa_r+0x9f0>
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	e7e2      	b.n	8007b06 <_dtoa_r+0xa46>
 8007b40:	f1b9 0f00 	cmp.w	r9, #0
 8007b44:	db06      	blt.n	8007b54 <_dtoa_r+0xa94>
 8007b46:	9905      	ldr	r1, [sp, #20]
 8007b48:	ea41 0909 	orr.w	r9, r1, r9
 8007b4c:	9906      	ldr	r1, [sp, #24]
 8007b4e:	ea59 0101 	orrs.w	r1, r9, r1
 8007b52:	d120      	bne.n	8007b96 <_dtoa_r+0xad6>
 8007b54:	2a00      	cmp	r2, #0
 8007b56:	ddec      	ble.n	8007b32 <_dtoa_r+0xa72>
 8007b58:	4659      	mov	r1, fp
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	4620      	mov	r0, r4
 8007b5e:	9301      	str	r3, [sp, #4]
 8007b60:	f000 fce6 	bl	8008530 <__lshift>
 8007b64:	4631      	mov	r1, r6
 8007b66:	4683      	mov	fp, r0
 8007b68:	f000 fd4e 	bl	8008608 <__mcmp>
 8007b6c:	2800      	cmp	r0, #0
 8007b6e:	9b01      	ldr	r3, [sp, #4]
 8007b70:	dc02      	bgt.n	8007b78 <_dtoa_r+0xab8>
 8007b72:	d1de      	bne.n	8007b32 <_dtoa_r+0xa72>
 8007b74:	07da      	lsls	r2, r3, #31
 8007b76:	d5dc      	bpl.n	8007b32 <_dtoa_r+0xa72>
 8007b78:	2b39      	cmp	r3, #57	; 0x39
 8007b7a:	d1d8      	bne.n	8007b2e <_dtoa_r+0xa6e>
 8007b7c:	9a02      	ldr	r2, [sp, #8]
 8007b7e:	2339      	movs	r3, #57	; 0x39
 8007b80:	7013      	strb	r3, [r2, #0]
 8007b82:	462b      	mov	r3, r5
 8007b84:	461d      	mov	r5, r3
 8007b86:	3b01      	subs	r3, #1
 8007b88:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007b8c:	2a39      	cmp	r2, #57	; 0x39
 8007b8e:	d050      	beq.n	8007c32 <_dtoa_r+0xb72>
 8007b90:	3201      	adds	r2, #1
 8007b92:	701a      	strb	r2, [r3, #0]
 8007b94:	e745      	b.n	8007a22 <_dtoa_r+0x962>
 8007b96:	2a00      	cmp	r2, #0
 8007b98:	dd03      	ble.n	8007ba2 <_dtoa_r+0xae2>
 8007b9a:	2b39      	cmp	r3, #57	; 0x39
 8007b9c:	d0ee      	beq.n	8007b7c <_dtoa_r+0xabc>
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	e7c7      	b.n	8007b32 <_dtoa_r+0xa72>
 8007ba2:	9a01      	ldr	r2, [sp, #4]
 8007ba4:	9907      	ldr	r1, [sp, #28]
 8007ba6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007baa:	428a      	cmp	r2, r1
 8007bac:	d02a      	beq.n	8007c04 <_dtoa_r+0xb44>
 8007bae:	4659      	mov	r1, fp
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	220a      	movs	r2, #10
 8007bb4:	4620      	mov	r0, r4
 8007bb6:	f000 fb0b 	bl	80081d0 <__multadd>
 8007bba:	45b8      	cmp	r8, r7
 8007bbc:	4683      	mov	fp, r0
 8007bbe:	f04f 0300 	mov.w	r3, #0
 8007bc2:	f04f 020a 	mov.w	r2, #10
 8007bc6:	4641      	mov	r1, r8
 8007bc8:	4620      	mov	r0, r4
 8007bca:	d107      	bne.n	8007bdc <_dtoa_r+0xb1c>
 8007bcc:	f000 fb00 	bl	80081d0 <__multadd>
 8007bd0:	4680      	mov	r8, r0
 8007bd2:	4607      	mov	r7, r0
 8007bd4:	9b01      	ldr	r3, [sp, #4]
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	9301      	str	r3, [sp, #4]
 8007bda:	e775      	b.n	8007ac8 <_dtoa_r+0xa08>
 8007bdc:	f000 faf8 	bl	80081d0 <__multadd>
 8007be0:	4639      	mov	r1, r7
 8007be2:	4680      	mov	r8, r0
 8007be4:	2300      	movs	r3, #0
 8007be6:	220a      	movs	r2, #10
 8007be8:	4620      	mov	r0, r4
 8007bea:	f000 faf1 	bl	80081d0 <__multadd>
 8007bee:	4607      	mov	r7, r0
 8007bf0:	e7f0      	b.n	8007bd4 <_dtoa_r+0xb14>
 8007bf2:	f1b9 0f00 	cmp.w	r9, #0
 8007bf6:	9a00      	ldr	r2, [sp, #0]
 8007bf8:	bfcc      	ite	gt
 8007bfa:	464d      	movgt	r5, r9
 8007bfc:	2501      	movle	r5, #1
 8007bfe:	4415      	add	r5, r2
 8007c00:	f04f 0800 	mov.w	r8, #0
 8007c04:	4659      	mov	r1, fp
 8007c06:	2201      	movs	r2, #1
 8007c08:	4620      	mov	r0, r4
 8007c0a:	9301      	str	r3, [sp, #4]
 8007c0c:	f000 fc90 	bl	8008530 <__lshift>
 8007c10:	4631      	mov	r1, r6
 8007c12:	4683      	mov	fp, r0
 8007c14:	f000 fcf8 	bl	8008608 <__mcmp>
 8007c18:	2800      	cmp	r0, #0
 8007c1a:	dcb2      	bgt.n	8007b82 <_dtoa_r+0xac2>
 8007c1c:	d102      	bne.n	8007c24 <_dtoa_r+0xb64>
 8007c1e:	9b01      	ldr	r3, [sp, #4]
 8007c20:	07db      	lsls	r3, r3, #31
 8007c22:	d4ae      	bmi.n	8007b82 <_dtoa_r+0xac2>
 8007c24:	462b      	mov	r3, r5
 8007c26:	461d      	mov	r5, r3
 8007c28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c2c:	2a30      	cmp	r2, #48	; 0x30
 8007c2e:	d0fa      	beq.n	8007c26 <_dtoa_r+0xb66>
 8007c30:	e6f7      	b.n	8007a22 <_dtoa_r+0x962>
 8007c32:	9a00      	ldr	r2, [sp, #0]
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d1a5      	bne.n	8007b84 <_dtoa_r+0xac4>
 8007c38:	f10a 0a01 	add.w	sl, sl, #1
 8007c3c:	2331      	movs	r3, #49	; 0x31
 8007c3e:	e779      	b.n	8007b34 <_dtoa_r+0xa74>
 8007c40:	4b13      	ldr	r3, [pc, #76]	; (8007c90 <_dtoa_r+0xbd0>)
 8007c42:	f7ff baaf 	b.w	80071a4 <_dtoa_r+0xe4>
 8007c46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	f47f aa86 	bne.w	800715a <_dtoa_r+0x9a>
 8007c4e:	4b11      	ldr	r3, [pc, #68]	; (8007c94 <_dtoa_r+0xbd4>)
 8007c50:	f7ff baa8 	b.w	80071a4 <_dtoa_r+0xe4>
 8007c54:	f1b9 0f00 	cmp.w	r9, #0
 8007c58:	dc03      	bgt.n	8007c62 <_dtoa_r+0xba2>
 8007c5a:	9b05      	ldr	r3, [sp, #20]
 8007c5c:	2b02      	cmp	r3, #2
 8007c5e:	f73f aec9 	bgt.w	80079f4 <_dtoa_r+0x934>
 8007c62:	9d00      	ldr	r5, [sp, #0]
 8007c64:	4631      	mov	r1, r6
 8007c66:	4658      	mov	r0, fp
 8007c68:	f7ff f99e 	bl	8006fa8 <quorem>
 8007c6c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007c70:	f805 3b01 	strb.w	r3, [r5], #1
 8007c74:	9a00      	ldr	r2, [sp, #0]
 8007c76:	1aaa      	subs	r2, r5, r2
 8007c78:	4591      	cmp	r9, r2
 8007c7a:	ddba      	ble.n	8007bf2 <_dtoa_r+0xb32>
 8007c7c:	4659      	mov	r1, fp
 8007c7e:	2300      	movs	r3, #0
 8007c80:	220a      	movs	r2, #10
 8007c82:	4620      	mov	r0, r4
 8007c84:	f000 faa4 	bl	80081d0 <__multadd>
 8007c88:	4683      	mov	fp, r0
 8007c8a:	e7eb      	b.n	8007c64 <_dtoa_r+0xba4>
 8007c8c:	080090df 	.word	0x080090df
 8007c90:	08009038 	.word	0x08009038
 8007c94:	0800905c 	.word	0x0800905c

08007c98 <__sflush_r>:
 8007c98:	898a      	ldrh	r2, [r1, #12]
 8007c9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c9e:	4605      	mov	r5, r0
 8007ca0:	0710      	lsls	r0, r2, #28
 8007ca2:	460c      	mov	r4, r1
 8007ca4:	d458      	bmi.n	8007d58 <__sflush_r+0xc0>
 8007ca6:	684b      	ldr	r3, [r1, #4]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	dc05      	bgt.n	8007cb8 <__sflush_r+0x20>
 8007cac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	dc02      	bgt.n	8007cb8 <__sflush_r+0x20>
 8007cb2:	2000      	movs	r0, #0
 8007cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007cba:	2e00      	cmp	r6, #0
 8007cbc:	d0f9      	beq.n	8007cb2 <__sflush_r+0x1a>
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007cc4:	682f      	ldr	r7, [r5, #0]
 8007cc6:	602b      	str	r3, [r5, #0]
 8007cc8:	d032      	beq.n	8007d30 <__sflush_r+0x98>
 8007cca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007ccc:	89a3      	ldrh	r3, [r4, #12]
 8007cce:	075a      	lsls	r2, r3, #29
 8007cd0:	d505      	bpl.n	8007cde <__sflush_r+0x46>
 8007cd2:	6863      	ldr	r3, [r4, #4]
 8007cd4:	1ac0      	subs	r0, r0, r3
 8007cd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007cd8:	b10b      	cbz	r3, 8007cde <__sflush_r+0x46>
 8007cda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007cdc:	1ac0      	subs	r0, r0, r3
 8007cde:	2300      	movs	r3, #0
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ce4:	6a21      	ldr	r1, [r4, #32]
 8007ce6:	4628      	mov	r0, r5
 8007ce8:	47b0      	blx	r6
 8007cea:	1c43      	adds	r3, r0, #1
 8007cec:	89a3      	ldrh	r3, [r4, #12]
 8007cee:	d106      	bne.n	8007cfe <__sflush_r+0x66>
 8007cf0:	6829      	ldr	r1, [r5, #0]
 8007cf2:	291d      	cmp	r1, #29
 8007cf4:	d82c      	bhi.n	8007d50 <__sflush_r+0xb8>
 8007cf6:	4a2a      	ldr	r2, [pc, #168]	; (8007da0 <__sflush_r+0x108>)
 8007cf8:	40ca      	lsrs	r2, r1
 8007cfa:	07d6      	lsls	r6, r2, #31
 8007cfc:	d528      	bpl.n	8007d50 <__sflush_r+0xb8>
 8007cfe:	2200      	movs	r2, #0
 8007d00:	6062      	str	r2, [r4, #4]
 8007d02:	04d9      	lsls	r1, r3, #19
 8007d04:	6922      	ldr	r2, [r4, #16]
 8007d06:	6022      	str	r2, [r4, #0]
 8007d08:	d504      	bpl.n	8007d14 <__sflush_r+0x7c>
 8007d0a:	1c42      	adds	r2, r0, #1
 8007d0c:	d101      	bne.n	8007d12 <__sflush_r+0x7a>
 8007d0e:	682b      	ldr	r3, [r5, #0]
 8007d10:	b903      	cbnz	r3, 8007d14 <__sflush_r+0x7c>
 8007d12:	6560      	str	r0, [r4, #84]	; 0x54
 8007d14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d16:	602f      	str	r7, [r5, #0]
 8007d18:	2900      	cmp	r1, #0
 8007d1a:	d0ca      	beq.n	8007cb2 <__sflush_r+0x1a>
 8007d1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d20:	4299      	cmp	r1, r3
 8007d22:	d002      	beq.n	8007d2a <__sflush_r+0x92>
 8007d24:	4628      	mov	r0, r5
 8007d26:	f000 fd7f 	bl	8008828 <_free_r>
 8007d2a:	2000      	movs	r0, #0
 8007d2c:	6360      	str	r0, [r4, #52]	; 0x34
 8007d2e:	e7c1      	b.n	8007cb4 <__sflush_r+0x1c>
 8007d30:	6a21      	ldr	r1, [r4, #32]
 8007d32:	2301      	movs	r3, #1
 8007d34:	4628      	mov	r0, r5
 8007d36:	47b0      	blx	r6
 8007d38:	1c41      	adds	r1, r0, #1
 8007d3a:	d1c7      	bne.n	8007ccc <__sflush_r+0x34>
 8007d3c:	682b      	ldr	r3, [r5, #0]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d0c4      	beq.n	8007ccc <__sflush_r+0x34>
 8007d42:	2b1d      	cmp	r3, #29
 8007d44:	d001      	beq.n	8007d4a <__sflush_r+0xb2>
 8007d46:	2b16      	cmp	r3, #22
 8007d48:	d101      	bne.n	8007d4e <__sflush_r+0xb6>
 8007d4a:	602f      	str	r7, [r5, #0]
 8007d4c:	e7b1      	b.n	8007cb2 <__sflush_r+0x1a>
 8007d4e:	89a3      	ldrh	r3, [r4, #12]
 8007d50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d54:	81a3      	strh	r3, [r4, #12]
 8007d56:	e7ad      	b.n	8007cb4 <__sflush_r+0x1c>
 8007d58:	690f      	ldr	r7, [r1, #16]
 8007d5a:	2f00      	cmp	r7, #0
 8007d5c:	d0a9      	beq.n	8007cb2 <__sflush_r+0x1a>
 8007d5e:	0793      	lsls	r3, r2, #30
 8007d60:	680e      	ldr	r6, [r1, #0]
 8007d62:	bf08      	it	eq
 8007d64:	694b      	ldreq	r3, [r1, #20]
 8007d66:	600f      	str	r7, [r1, #0]
 8007d68:	bf18      	it	ne
 8007d6a:	2300      	movne	r3, #0
 8007d6c:	eba6 0807 	sub.w	r8, r6, r7
 8007d70:	608b      	str	r3, [r1, #8]
 8007d72:	f1b8 0f00 	cmp.w	r8, #0
 8007d76:	dd9c      	ble.n	8007cb2 <__sflush_r+0x1a>
 8007d78:	6a21      	ldr	r1, [r4, #32]
 8007d7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007d7c:	4643      	mov	r3, r8
 8007d7e:	463a      	mov	r2, r7
 8007d80:	4628      	mov	r0, r5
 8007d82:	47b0      	blx	r6
 8007d84:	2800      	cmp	r0, #0
 8007d86:	dc06      	bgt.n	8007d96 <__sflush_r+0xfe>
 8007d88:	89a3      	ldrh	r3, [r4, #12]
 8007d8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d8e:	81a3      	strh	r3, [r4, #12]
 8007d90:	f04f 30ff 	mov.w	r0, #4294967295
 8007d94:	e78e      	b.n	8007cb4 <__sflush_r+0x1c>
 8007d96:	4407      	add	r7, r0
 8007d98:	eba8 0800 	sub.w	r8, r8, r0
 8007d9c:	e7e9      	b.n	8007d72 <__sflush_r+0xda>
 8007d9e:	bf00      	nop
 8007da0:	20400001 	.word	0x20400001

08007da4 <_fflush_r>:
 8007da4:	b538      	push	{r3, r4, r5, lr}
 8007da6:	690b      	ldr	r3, [r1, #16]
 8007da8:	4605      	mov	r5, r0
 8007daa:	460c      	mov	r4, r1
 8007dac:	b913      	cbnz	r3, 8007db4 <_fflush_r+0x10>
 8007dae:	2500      	movs	r5, #0
 8007db0:	4628      	mov	r0, r5
 8007db2:	bd38      	pop	{r3, r4, r5, pc}
 8007db4:	b118      	cbz	r0, 8007dbe <_fflush_r+0x1a>
 8007db6:	6983      	ldr	r3, [r0, #24]
 8007db8:	b90b      	cbnz	r3, 8007dbe <_fflush_r+0x1a>
 8007dba:	f000 f887 	bl	8007ecc <__sinit>
 8007dbe:	4b14      	ldr	r3, [pc, #80]	; (8007e10 <_fflush_r+0x6c>)
 8007dc0:	429c      	cmp	r4, r3
 8007dc2:	d11b      	bne.n	8007dfc <_fflush_r+0x58>
 8007dc4:	686c      	ldr	r4, [r5, #4]
 8007dc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d0ef      	beq.n	8007dae <_fflush_r+0xa>
 8007dce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007dd0:	07d0      	lsls	r0, r2, #31
 8007dd2:	d404      	bmi.n	8007dde <_fflush_r+0x3a>
 8007dd4:	0599      	lsls	r1, r3, #22
 8007dd6:	d402      	bmi.n	8007dde <_fflush_r+0x3a>
 8007dd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007dda:	f000 f91a 	bl	8008012 <__retarget_lock_acquire_recursive>
 8007dde:	4628      	mov	r0, r5
 8007de0:	4621      	mov	r1, r4
 8007de2:	f7ff ff59 	bl	8007c98 <__sflush_r>
 8007de6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007de8:	07da      	lsls	r2, r3, #31
 8007dea:	4605      	mov	r5, r0
 8007dec:	d4e0      	bmi.n	8007db0 <_fflush_r+0xc>
 8007dee:	89a3      	ldrh	r3, [r4, #12]
 8007df0:	059b      	lsls	r3, r3, #22
 8007df2:	d4dd      	bmi.n	8007db0 <_fflush_r+0xc>
 8007df4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007df6:	f000 f90d 	bl	8008014 <__retarget_lock_release_recursive>
 8007dfa:	e7d9      	b.n	8007db0 <_fflush_r+0xc>
 8007dfc:	4b05      	ldr	r3, [pc, #20]	; (8007e14 <_fflush_r+0x70>)
 8007dfe:	429c      	cmp	r4, r3
 8007e00:	d101      	bne.n	8007e06 <_fflush_r+0x62>
 8007e02:	68ac      	ldr	r4, [r5, #8]
 8007e04:	e7df      	b.n	8007dc6 <_fflush_r+0x22>
 8007e06:	4b04      	ldr	r3, [pc, #16]	; (8007e18 <_fflush_r+0x74>)
 8007e08:	429c      	cmp	r4, r3
 8007e0a:	bf08      	it	eq
 8007e0c:	68ec      	ldreq	r4, [r5, #12]
 8007e0e:	e7da      	b.n	8007dc6 <_fflush_r+0x22>
 8007e10:	08009110 	.word	0x08009110
 8007e14:	08009130 	.word	0x08009130
 8007e18:	080090f0 	.word	0x080090f0

08007e1c <std>:
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	b510      	push	{r4, lr}
 8007e20:	4604      	mov	r4, r0
 8007e22:	e9c0 3300 	strd	r3, r3, [r0]
 8007e26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e2a:	6083      	str	r3, [r0, #8]
 8007e2c:	8181      	strh	r1, [r0, #12]
 8007e2e:	6643      	str	r3, [r0, #100]	; 0x64
 8007e30:	81c2      	strh	r2, [r0, #14]
 8007e32:	6183      	str	r3, [r0, #24]
 8007e34:	4619      	mov	r1, r3
 8007e36:	2208      	movs	r2, #8
 8007e38:	305c      	adds	r0, #92	; 0x5c
 8007e3a:	f7fe faf5 	bl	8006428 <memset>
 8007e3e:	4b05      	ldr	r3, [pc, #20]	; (8007e54 <std+0x38>)
 8007e40:	6263      	str	r3, [r4, #36]	; 0x24
 8007e42:	4b05      	ldr	r3, [pc, #20]	; (8007e58 <std+0x3c>)
 8007e44:	62a3      	str	r3, [r4, #40]	; 0x28
 8007e46:	4b05      	ldr	r3, [pc, #20]	; (8007e5c <std+0x40>)
 8007e48:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007e4a:	4b05      	ldr	r3, [pc, #20]	; (8007e60 <std+0x44>)
 8007e4c:	6224      	str	r4, [r4, #32]
 8007e4e:	6323      	str	r3, [r4, #48]	; 0x30
 8007e50:	bd10      	pop	{r4, pc}
 8007e52:	bf00      	nop
 8007e54:	08008c51 	.word	0x08008c51
 8007e58:	08008c73 	.word	0x08008c73
 8007e5c:	08008cab 	.word	0x08008cab
 8007e60:	08008ccf 	.word	0x08008ccf

08007e64 <_cleanup_r>:
 8007e64:	4901      	ldr	r1, [pc, #4]	; (8007e6c <_cleanup_r+0x8>)
 8007e66:	f000 b8af 	b.w	8007fc8 <_fwalk_reent>
 8007e6a:	bf00      	nop
 8007e6c:	08007da5 	.word	0x08007da5

08007e70 <__sfmoreglue>:
 8007e70:	b570      	push	{r4, r5, r6, lr}
 8007e72:	1e4a      	subs	r2, r1, #1
 8007e74:	2568      	movs	r5, #104	; 0x68
 8007e76:	4355      	muls	r5, r2
 8007e78:	460e      	mov	r6, r1
 8007e7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007e7e:	f000 fd23 	bl	80088c8 <_malloc_r>
 8007e82:	4604      	mov	r4, r0
 8007e84:	b140      	cbz	r0, 8007e98 <__sfmoreglue+0x28>
 8007e86:	2100      	movs	r1, #0
 8007e88:	e9c0 1600 	strd	r1, r6, [r0]
 8007e8c:	300c      	adds	r0, #12
 8007e8e:	60a0      	str	r0, [r4, #8]
 8007e90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007e94:	f7fe fac8 	bl	8006428 <memset>
 8007e98:	4620      	mov	r0, r4
 8007e9a:	bd70      	pop	{r4, r5, r6, pc}

08007e9c <__sfp_lock_acquire>:
 8007e9c:	4801      	ldr	r0, [pc, #4]	; (8007ea4 <__sfp_lock_acquire+0x8>)
 8007e9e:	f000 b8b8 	b.w	8008012 <__retarget_lock_acquire_recursive>
 8007ea2:	bf00      	nop
 8007ea4:	20000798 	.word	0x20000798

08007ea8 <__sfp_lock_release>:
 8007ea8:	4801      	ldr	r0, [pc, #4]	; (8007eb0 <__sfp_lock_release+0x8>)
 8007eaa:	f000 b8b3 	b.w	8008014 <__retarget_lock_release_recursive>
 8007eae:	bf00      	nop
 8007eb0:	20000798 	.word	0x20000798

08007eb4 <__sinit_lock_acquire>:
 8007eb4:	4801      	ldr	r0, [pc, #4]	; (8007ebc <__sinit_lock_acquire+0x8>)
 8007eb6:	f000 b8ac 	b.w	8008012 <__retarget_lock_acquire_recursive>
 8007eba:	bf00      	nop
 8007ebc:	20000793 	.word	0x20000793

08007ec0 <__sinit_lock_release>:
 8007ec0:	4801      	ldr	r0, [pc, #4]	; (8007ec8 <__sinit_lock_release+0x8>)
 8007ec2:	f000 b8a7 	b.w	8008014 <__retarget_lock_release_recursive>
 8007ec6:	bf00      	nop
 8007ec8:	20000793 	.word	0x20000793

08007ecc <__sinit>:
 8007ecc:	b510      	push	{r4, lr}
 8007ece:	4604      	mov	r4, r0
 8007ed0:	f7ff fff0 	bl	8007eb4 <__sinit_lock_acquire>
 8007ed4:	69a3      	ldr	r3, [r4, #24]
 8007ed6:	b11b      	cbz	r3, 8007ee0 <__sinit+0x14>
 8007ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007edc:	f7ff bff0 	b.w	8007ec0 <__sinit_lock_release>
 8007ee0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007ee4:	6523      	str	r3, [r4, #80]	; 0x50
 8007ee6:	4b13      	ldr	r3, [pc, #76]	; (8007f34 <__sinit+0x68>)
 8007ee8:	4a13      	ldr	r2, [pc, #76]	; (8007f38 <__sinit+0x6c>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	62a2      	str	r2, [r4, #40]	; 0x28
 8007eee:	42a3      	cmp	r3, r4
 8007ef0:	bf04      	itt	eq
 8007ef2:	2301      	moveq	r3, #1
 8007ef4:	61a3      	streq	r3, [r4, #24]
 8007ef6:	4620      	mov	r0, r4
 8007ef8:	f000 f820 	bl	8007f3c <__sfp>
 8007efc:	6060      	str	r0, [r4, #4]
 8007efe:	4620      	mov	r0, r4
 8007f00:	f000 f81c 	bl	8007f3c <__sfp>
 8007f04:	60a0      	str	r0, [r4, #8]
 8007f06:	4620      	mov	r0, r4
 8007f08:	f000 f818 	bl	8007f3c <__sfp>
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	60e0      	str	r0, [r4, #12]
 8007f10:	2104      	movs	r1, #4
 8007f12:	6860      	ldr	r0, [r4, #4]
 8007f14:	f7ff ff82 	bl	8007e1c <std>
 8007f18:	68a0      	ldr	r0, [r4, #8]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	2109      	movs	r1, #9
 8007f1e:	f7ff ff7d 	bl	8007e1c <std>
 8007f22:	68e0      	ldr	r0, [r4, #12]
 8007f24:	2202      	movs	r2, #2
 8007f26:	2112      	movs	r1, #18
 8007f28:	f7ff ff78 	bl	8007e1c <std>
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	61a3      	str	r3, [r4, #24]
 8007f30:	e7d2      	b.n	8007ed8 <__sinit+0xc>
 8007f32:	bf00      	nop
 8007f34:	08009024 	.word	0x08009024
 8007f38:	08007e65 	.word	0x08007e65

08007f3c <__sfp>:
 8007f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f3e:	4607      	mov	r7, r0
 8007f40:	f7ff ffac 	bl	8007e9c <__sfp_lock_acquire>
 8007f44:	4b1e      	ldr	r3, [pc, #120]	; (8007fc0 <__sfp+0x84>)
 8007f46:	681e      	ldr	r6, [r3, #0]
 8007f48:	69b3      	ldr	r3, [r6, #24]
 8007f4a:	b913      	cbnz	r3, 8007f52 <__sfp+0x16>
 8007f4c:	4630      	mov	r0, r6
 8007f4e:	f7ff ffbd 	bl	8007ecc <__sinit>
 8007f52:	3648      	adds	r6, #72	; 0x48
 8007f54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007f58:	3b01      	subs	r3, #1
 8007f5a:	d503      	bpl.n	8007f64 <__sfp+0x28>
 8007f5c:	6833      	ldr	r3, [r6, #0]
 8007f5e:	b30b      	cbz	r3, 8007fa4 <__sfp+0x68>
 8007f60:	6836      	ldr	r6, [r6, #0]
 8007f62:	e7f7      	b.n	8007f54 <__sfp+0x18>
 8007f64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007f68:	b9d5      	cbnz	r5, 8007fa0 <__sfp+0x64>
 8007f6a:	4b16      	ldr	r3, [pc, #88]	; (8007fc4 <__sfp+0x88>)
 8007f6c:	60e3      	str	r3, [r4, #12]
 8007f6e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007f72:	6665      	str	r5, [r4, #100]	; 0x64
 8007f74:	f000 f84c 	bl	8008010 <__retarget_lock_init_recursive>
 8007f78:	f7ff ff96 	bl	8007ea8 <__sfp_lock_release>
 8007f7c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007f80:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007f84:	6025      	str	r5, [r4, #0]
 8007f86:	61a5      	str	r5, [r4, #24]
 8007f88:	2208      	movs	r2, #8
 8007f8a:	4629      	mov	r1, r5
 8007f8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007f90:	f7fe fa4a 	bl	8006428 <memset>
 8007f94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007f98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007f9c:	4620      	mov	r0, r4
 8007f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fa0:	3468      	adds	r4, #104	; 0x68
 8007fa2:	e7d9      	b.n	8007f58 <__sfp+0x1c>
 8007fa4:	2104      	movs	r1, #4
 8007fa6:	4638      	mov	r0, r7
 8007fa8:	f7ff ff62 	bl	8007e70 <__sfmoreglue>
 8007fac:	4604      	mov	r4, r0
 8007fae:	6030      	str	r0, [r6, #0]
 8007fb0:	2800      	cmp	r0, #0
 8007fb2:	d1d5      	bne.n	8007f60 <__sfp+0x24>
 8007fb4:	f7ff ff78 	bl	8007ea8 <__sfp_lock_release>
 8007fb8:	230c      	movs	r3, #12
 8007fba:	603b      	str	r3, [r7, #0]
 8007fbc:	e7ee      	b.n	8007f9c <__sfp+0x60>
 8007fbe:	bf00      	nop
 8007fc0:	08009024 	.word	0x08009024
 8007fc4:	ffff0001 	.word	0xffff0001

08007fc8 <_fwalk_reent>:
 8007fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fcc:	4606      	mov	r6, r0
 8007fce:	4688      	mov	r8, r1
 8007fd0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007fd4:	2700      	movs	r7, #0
 8007fd6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007fda:	f1b9 0901 	subs.w	r9, r9, #1
 8007fde:	d505      	bpl.n	8007fec <_fwalk_reent+0x24>
 8007fe0:	6824      	ldr	r4, [r4, #0]
 8007fe2:	2c00      	cmp	r4, #0
 8007fe4:	d1f7      	bne.n	8007fd6 <_fwalk_reent+0xe>
 8007fe6:	4638      	mov	r0, r7
 8007fe8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fec:	89ab      	ldrh	r3, [r5, #12]
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	d907      	bls.n	8008002 <_fwalk_reent+0x3a>
 8007ff2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	d003      	beq.n	8008002 <_fwalk_reent+0x3a>
 8007ffa:	4629      	mov	r1, r5
 8007ffc:	4630      	mov	r0, r6
 8007ffe:	47c0      	blx	r8
 8008000:	4307      	orrs	r7, r0
 8008002:	3568      	adds	r5, #104	; 0x68
 8008004:	e7e9      	b.n	8007fda <_fwalk_reent+0x12>
	...

08008008 <_localeconv_r>:
 8008008:	4800      	ldr	r0, [pc, #0]	; (800800c <_localeconv_r+0x4>)
 800800a:	4770      	bx	lr
 800800c:	20000174 	.word	0x20000174

08008010 <__retarget_lock_init_recursive>:
 8008010:	4770      	bx	lr

08008012 <__retarget_lock_acquire_recursive>:
 8008012:	4770      	bx	lr

08008014 <__retarget_lock_release_recursive>:
 8008014:	4770      	bx	lr

08008016 <__swhatbuf_r>:
 8008016:	b570      	push	{r4, r5, r6, lr}
 8008018:	460e      	mov	r6, r1
 800801a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800801e:	2900      	cmp	r1, #0
 8008020:	b096      	sub	sp, #88	; 0x58
 8008022:	4614      	mov	r4, r2
 8008024:	461d      	mov	r5, r3
 8008026:	da07      	bge.n	8008038 <__swhatbuf_r+0x22>
 8008028:	2300      	movs	r3, #0
 800802a:	602b      	str	r3, [r5, #0]
 800802c:	89b3      	ldrh	r3, [r6, #12]
 800802e:	061a      	lsls	r2, r3, #24
 8008030:	d410      	bmi.n	8008054 <__swhatbuf_r+0x3e>
 8008032:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008036:	e00e      	b.n	8008056 <__swhatbuf_r+0x40>
 8008038:	466a      	mov	r2, sp
 800803a:	f000 fe9f 	bl	8008d7c <_fstat_r>
 800803e:	2800      	cmp	r0, #0
 8008040:	dbf2      	blt.n	8008028 <__swhatbuf_r+0x12>
 8008042:	9a01      	ldr	r2, [sp, #4]
 8008044:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008048:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800804c:	425a      	negs	r2, r3
 800804e:	415a      	adcs	r2, r3
 8008050:	602a      	str	r2, [r5, #0]
 8008052:	e7ee      	b.n	8008032 <__swhatbuf_r+0x1c>
 8008054:	2340      	movs	r3, #64	; 0x40
 8008056:	2000      	movs	r0, #0
 8008058:	6023      	str	r3, [r4, #0]
 800805a:	b016      	add	sp, #88	; 0x58
 800805c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008060 <__smakebuf_r>:
 8008060:	898b      	ldrh	r3, [r1, #12]
 8008062:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008064:	079d      	lsls	r5, r3, #30
 8008066:	4606      	mov	r6, r0
 8008068:	460c      	mov	r4, r1
 800806a:	d507      	bpl.n	800807c <__smakebuf_r+0x1c>
 800806c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008070:	6023      	str	r3, [r4, #0]
 8008072:	6123      	str	r3, [r4, #16]
 8008074:	2301      	movs	r3, #1
 8008076:	6163      	str	r3, [r4, #20]
 8008078:	b002      	add	sp, #8
 800807a:	bd70      	pop	{r4, r5, r6, pc}
 800807c:	ab01      	add	r3, sp, #4
 800807e:	466a      	mov	r2, sp
 8008080:	f7ff ffc9 	bl	8008016 <__swhatbuf_r>
 8008084:	9900      	ldr	r1, [sp, #0]
 8008086:	4605      	mov	r5, r0
 8008088:	4630      	mov	r0, r6
 800808a:	f000 fc1d 	bl	80088c8 <_malloc_r>
 800808e:	b948      	cbnz	r0, 80080a4 <__smakebuf_r+0x44>
 8008090:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008094:	059a      	lsls	r2, r3, #22
 8008096:	d4ef      	bmi.n	8008078 <__smakebuf_r+0x18>
 8008098:	f023 0303 	bic.w	r3, r3, #3
 800809c:	f043 0302 	orr.w	r3, r3, #2
 80080a0:	81a3      	strh	r3, [r4, #12]
 80080a2:	e7e3      	b.n	800806c <__smakebuf_r+0xc>
 80080a4:	4b0d      	ldr	r3, [pc, #52]	; (80080dc <__smakebuf_r+0x7c>)
 80080a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80080a8:	89a3      	ldrh	r3, [r4, #12]
 80080aa:	6020      	str	r0, [r4, #0]
 80080ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080b0:	81a3      	strh	r3, [r4, #12]
 80080b2:	9b00      	ldr	r3, [sp, #0]
 80080b4:	6163      	str	r3, [r4, #20]
 80080b6:	9b01      	ldr	r3, [sp, #4]
 80080b8:	6120      	str	r0, [r4, #16]
 80080ba:	b15b      	cbz	r3, 80080d4 <__smakebuf_r+0x74>
 80080bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080c0:	4630      	mov	r0, r6
 80080c2:	f000 fe6d 	bl	8008da0 <_isatty_r>
 80080c6:	b128      	cbz	r0, 80080d4 <__smakebuf_r+0x74>
 80080c8:	89a3      	ldrh	r3, [r4, #12]
 80080ca:	f023 0303 	bic.w	r3, r3, #3
 80080ce:	f043 0301 	orr.w	r3, r3, #1
 80080d2:	81a3      	strh	r3, [r4, #12]
 80080d4:	89a0      	ldrh	r0, [r4, #12]
 80080d6:	4305      	orrs	r5, r0
 80080d8:	81a5      	strh	r5, [r4, #12]
 80080da:	e7cd      	b.n	8008078 <__smakebuf_r+0x18>
 80080dc:	08007e65 	.word	0x08007e65

080080e0 <malloc>:
 80080e0:	4b02      	ldr	r3, [pc, #8]	; (80080ec <malloc+0xc>)
 80080e2:	4601      	mov	r1, r0
 80080e4:	6818      	ldr	r0, [r3, #0]
 80080e6:	f000 bbef 	b.w	80088c8 <_malloc_r>
 80080ea:	bf00      	nop
 80080ec:	20000020 	.word	0x20000020

080080f0 <memcpy>:
 80080f0:	440a      	add	r2, r1
 80080f2:	4291      	cmp	r1, r2
 80080f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80080f8:	d100      	bne.n	80080fc <memcpy+0xc>
 80080fa:	4770      	bx	lr
 80080fc:	b510      	push	{r4, lr}
 80080fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008102:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008106:	4291      	cmp	r1, r2
 8008108:	d1f9      	bne.n	80080fe <memcpy+0xe>
 800810a:	bd10      	pop	{r4, pc}

0800810c <_Balloc>:
 800810c:	b570      	push	{r4, r5, r6, lr}
 800810e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008110:	4604      	mov	r4, r0
 8008112:	460d      	mov	r5, r1
 8008114:	b976      	cbnz	r6, 8008134 <_Balloc+0x28>
 8008116:	2010      	movs	r0, #16
 8008118:	f7ff ffe2 	bl	80080e0 <malloc>
 800811c:	4602      	mov	r2, r0
 800811e:	6260      	str	r0, [r4, #36]	; 0x24
 8008120:	b920      	cbnz	r0, 800812c <_Balloc+0x20>
 8008122:	4b18      	ldr	r3, [pc, #96]	; (8008184 <_Balloc+0x78>)
 8008124:	4818      	ldr	r0, [pc, #96]	; (8008188 <_Balloc+0x7c>)
 8008126:	2166      	movs	r1, #102	; 0x66
 8008128:	f000 fde8 	bl	8008cfc <__assert_func>
 800812c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008130:	6006      	str	r6, [r0, #0]
 8008132:	60c6      	str	r6, [r0, #12]
 8008134:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008136:	68f3      	ldr	r3, [r6, #12]
 8008138:	b183      	cbz	r3, 800815c <_Balloc+0x50>
 800813a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800813c:	68db      	ldr	r3, [r3, #12]
 800813e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008142:	b9b8      	cbnz	r0, 8008174 <_Balloc+0x68>
 8008144:	2101      	movs	r1, #1
 8008146:	fa01 f605 	lsl.w	r6, r1, r5
 800814a:	1d72      	adds	r2, r6, #5
 800814c:	0092      	lsls	r2, r2, #2
 800814e:	4620      	mov	r0, r4
 8008150:	f000 fb5a 	bl	8008808 <_calloc_r>
 8008154:	b160      	cbz	r0, 8008170 <_Balloc+0x64>
 8008156:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800815a:	e00e      	b.n	800817a <_Balloc+0x6e>
 800815c:	2221      	movs	r2, #33	; 0x21
 800815e:	2104      	movs	r1, #4
 8008160:	4620      	mov	r0, r4
 8008162:	f000 fb51 	bl	8008808 <_calloc_r>
 8008166:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008168:	60f0      	str	r0, [r6, #12]
 800816a:	68db      	ldr	r3, [r3, #12]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d1e4      	bne.n	800813a <_Balloc+0x2e>
 8008170:	2000      	movs	r0, #0
 8008172:	bd70      	pop	{r4, r5, r6, pc}
 8008174:	6802      	ldr	r2, [r0, #0]
 8008176:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800817a:	2300      	movs	r3, #0
 800817c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008180:	e7f7      	b.n	8008172 <_Balloc+0x66>
 8008182:	bf00      	nop
 8008184:	08009069 	.word	0x08009069
 8008188:	08009150 	.word	0x08009150

0800818c <_Bfree>:
 800818c:	b570      	push	{r4, r5, r6, lr}
 800818e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008190:	4605      	mov	r5, r0
 8008192:	460c      	mov	r4, r1
 8008194:	b976      	cbnz	r6, 80081b4 <_Bfree+0x28>
 8008196:	2010      	movs	r0, #16
 8008198:	f7ff ffa2 	bl	80080e0 <malloc>
 800819c:	4602      	mov	r2, r0
 800819e:	6268      	str	r0, [r5, #36]	; 0x24
 80081a0:	b920      	cbnz	r0, 80081ac <_Bfree+0x20>
 80081a2:	4b09      	ldr	r3, [pc, #36]	; (80081c8 <_Bfree+0x3c>)
 80081a4:	4809      	ldr	r0, [pc, #36]	; (80081cc <_Bfree+0x40>)
 80081a6:	218a      	movs	r1, #138	; 0x8a
 80081a8:	f000 fda8 	bl	8008cfc <__assert_func>
 80081ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80081b0:	6006      	str	r6, [r0, #0]
 80081b2:	60c6      	str	r6, [r0, #12]
 80081b4:	b13c      	cbz	r4, 80081c6 <_Bfree+0x3a>
 80081b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80081b8:	6862      	ldr	r2, [r4, #4]
 80081ba:	68db      	ldr	r3, [r3, #12]
 80081bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80081c0:	6021      	str	r1, [r4, #0]
 80081c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80081c6:	bd70      	pop	{r4, r5, r6, pc}
 80081c8:	08009069 	.word	0x08009069
 80081cc:	08009150 	.word	0x08009150

080081d0 <__multadd>:
 80081d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081d4:	690e      	ldr	r6, [r1, #16]
 80081d6:	4607      	mov	r7, r0
 80081d8:	4698      	mov	r8, r3
 80081da:	460c      	mov	r4, r1
 80081dc:	f101 0014 	add.w	r0, r1, #20
 80081e0:	2300      	movs	r3, #0
 80081e2:	6805      	ldr	r5, [r0, #0]
 80081e4:	b2a9      	uxth	r1, r5
 80081e6:	fb02 8101 	mla	r1, r2, r1, r8
 80081ea:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80081ee:	0c2d      	lsrs	r5, r5, #16
 80081f0:	fb02 c505 	mla	r5, r2, r5, ip
 80081f4:	b289      	uxth	r1, r1
 80081f6:	3301      	adds	r3, #1
 80081f8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80081fc:	429e      	cmp	r6, r3
 80081fe:	f840 1b04 	str.w	r1, [r0], #4
 8008202:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008206:	dcec      	bgt.n	80081e2 <__multadd+0x12>
 8008208:	f1b8 0f00 	cmp.w	r8, #0
 800820c:	d022      	beq.n	8008254 <__multadd+0x84>
 800820e:	68a3      	ldr	r3, [r4, #8]
 8008210:	42b3      	cmp	r3, r6
 8008212:	dc19      	bgt.n	8008248 <__multadd+0x78>
 8008214:	6861      	ldr	r1, [r4, #4]
 8008216:	4638      	mov	r0, r7
 8008218:	3101      	adds	r1, #1
 800821a:	f7ff ff77 	bl	800810c <_Balloc>
 800821e:	4605      	mov	r5, r0
 8008220:	b928      	cbnz	r0, 800822e <__multadd+0x5e>
 8008222:	4602      	mov	r2, r0
 8008224:	4b0d      	ldr	r3, [pc, #52]	; (800825c <__multadd+0x8c>)
 8008226:	480e      	ldr	r0, [pc, #56]	; (8008260 <__multadd+0x90>)
 8008228:	21b5      	movs	r1, #181	; 0xb5
 800822a:	f000 fd67 	bl	8008cfc <__assert_func>
 800822e:	6922      	ldr	r2, [r4, #16]
 8008230:	3202      	adds	r2, #2
 8008232:	f104 010c 	add.w	r1, r4, #12
 8008236:	0092      	lsls	r2, r2, #2
 8008238:	300c      	adds	r0, #12
 800823a:	f7ff ff59 	bl	80080f0 <memcpy>
 800823e:	4621      	mov	r1, r4
 8008240:	4638      	mov	r0, r7
 8008242:	f7ff ffa3 	bl	800818c <_Bfree>
 8008246:	462c      	mov	r4, r5
 8008248:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800824c:	3601      	adds	r6, #1
 800824e:	f8c3 8014 	str.w	r8, [r3, #20]
 8008252:	6126      	str	r6, [r4, #16]
 8008254:	4620      	mov	r0, r4
 8008256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800825a:	bf00      	nop
 800825c:	080090df 	.word	0x080090df
 8008260:	08009150 	.word	0x08009150

08008264 <__hi0bits>:
 8008264:	0c03      	lsrs	r3, r0, #16
 8008266:	041b      	lsls	r3, r3, #16
 8008268:	b9d3      	cbnz	r3, 80082a0 <__hi0bits+0x3c>
 800826a:	0400      	lsls	r0, r0, #16
 800826c:	2310      	movs	r3, #16
 800826e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008272:	bf04      	itt	eq
 8008274:	0200      	lsleq	r0, r0, #8
 8008276:	3308      	addeq	r3, #8
 8008278:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800827c:	bf04      	itt	eq
 800827e:	0100      	lsleq	r0, r0, #4
 8008280:	3304      	addeq	r3, #4
 8008282:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008286:	bf04      	itt	eq
 8008288:	0080      	lsleq	r0, r0, #2
 800828a:	3302      	addeq	r3, #2
 800828c:	2800      	cmp	r0, #0
 800828e:	db05      	blt.n	800829c <__hi0bits+0x38>
 8008290:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008294:	f103 0301 	add.w	r3, r3, #1
 8008298:	bf08      	it	eq
 800829a:	2320      	moveq	r3, #32
 800829c:	4618      	mov	r0, r3
 800829e:	4770      	bx	lr
 80082a0:	2300      	movs	r3, #0
 80082a2:	e7e4      	b.n	800826e <__hi0bits+0xa>

080082a4 <__lo0bits>:
 80082a4:	6803      	ldr	r3, [r0, #0]
 80082a6:	f013 0207 	ands.w	r2, r3, #7
 80082aa:	4601      	mov	r1, r0
 80082ac:	d00b      	beq.n	80082c6 <__lo0bits+0x22>
 80082ae:	07da      	lsls	r2, r3, #31
 80082b0:	d424      	bmi.n	80082fc <__lo0bits+0x58>
 80082b2:	0798      	lsls	r0, r3, #30
 80082b4:	bf49      	itett	mi
 80082b6:	085b      	lsrmi	r3, r3, #1
 80082b8:	089b      	lsrpl	r3, r3, #2
 80082ba:	2001      	movmi	r0, #1
 80082bc:	600b      	strmi	r3, [r1, #0]
 80082be:	bf5c      	itt	pl
 80082c0:	600b      	strpl	r3, [r1, #0]
 80082c2:	2002      	movpl	r0, #2
 80082c4:	4770      	bx	lr
 80082c6:	b298      	uxth	r0, r3
 80082c8:	b9b0      	cbnz	r0, 80082f8 <__lo0bits+0x54>
 80082ca:	0c1b      	lsrs	r3, r3, #16
 80082cc:	2010      	movs	r0, #16
 80082ce:	f013 0fff 	tst.w	r3, #255	; 0xff
 80082d2:	bf04      	itt	eq
 80082d4:	0a1b      	lsreq	r3, r3, #8
 80082d6:	3008      	addeq	r0, #8
 80082d8:	071a      	lsls	r2, r3, #28
 80082da:	bf04      	itt	eq
 80082dc:	091b      	lsreq	r3, r3, #4
 80082de:	3004      	addeq	r0, #4
 80082e0:	079a      	lsls	r2, r3, #30
 80082e2:	bf04      	itt	eq
 80082e4:	089b      	lsreq	r3, r3, #2
 80082e6:	3002      	addeq	r0, #2
 80082e8:	07da      	lsls	r2, r3, #31
 80082ea:	d403      	bmi.n	80082f4 <__lo0bits+0x50>
 80082ec:	085b      	lsrs	r3, r3, #1
 80082ee:	f100 0001 	add.w	r0, r0, #1
 80082f2:	d005      	beq.n	8008300 <__lo0bits+0x5c>
 80082f4:	600b      	str	r3, [r1, #0]
 80082f6:	4770      	bx	lr
 80082f8:	4610      	mov	r0, r2
 80082fa:	e7e8      	b.n	80082ce <__lo0bits+0x2a>
 80082fc:	2000      	movs	r0, #0
 80082fe:	4770      	bx	lr
 8008300:	2020      	movs	r0, #32
 8008302:	4770      	bx	lr

08008304 <__i2b>:
 8008304:	b510      	push	{r4, lr}
 8008306:	460c      	mov	r4, r1
 8008308:	2101      	movs	r1, #1
 800830a:	f7ff feff 	bl	800810c <_Balloc>
 800830e:	4602      	mov	r2, r0
 8008310:	b928      	cbnz	r0, 800831e <__i2b+0x1a>
 8008312:	4b05      	ldr	r3, [pc, #20]	; (8008328 <__i2b+0x24>)
 8008314:	4805      	ldr	r0, [pc, #20]	; (800832c <__i2b+0x28>)
 8008316:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800831a:	f000 fcef 	bl	8008cfc <__assert_func>
 800831e:	2301      	movs	r3, #1
 8008320:	6144      	str	r4, [r0, #20]
 8008322:	6103      	str	r3, [r0, #16]
 8008324:	bd10      	pop	{r4, pc}
 8008326:	bf00      	nop
 8008328:	080090df 	.word	0x080090df
 800832c:	08009150 	.word	0x08009150

08008330 <__multiply>:
 8008330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008334:	4614      	mov	r4, r2
 8008336:	690a      	ldr	r2, [r1, #16]
 8008338:	6923      	ldr	r3, [r4, #16]
 800833a:	429a      	cmp	r2, r3
 800833c:	bfb8      	it	lt
 800833e:	460b      	movlt	r3, r1
 8008340:	460d      	mov	r5, r1
 8008342:	bfbc      	itt	lt
 8008344:	4625      	movlt	r5, r4
 8008346:	461c      	movlt	r4, r3
 8008348:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800834c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008350:	68ab      	ldr	r3, [r5, #8]
 8008352:	6869      	ldr	r1, [r5, #4]
 8008354:	eb0a 0709 	add.w	r7, sl, r9
 8008358:	42bb      	cmp	r3, r7
 800835a:	b085      	sub	sp, #20
 800835c:	bfb8      	it	lt
 800835e:	3101      	addlt	r1, #1
 8008360:	f7ff fed4 	bl	800810c <_Balloc>
 8008364:	b930      	cbnz	r0, 8008374 <__multiply+0x44>
 8008366:	4602      	mov	r2, r0
 8008368:	4b42      	ldr	r3, [pc, #264]	; (8008474 <__multiply+0x144>)
 800836a:	4843      	ldr	r0, [pc, #268]	; (8008478 <__multiply+0x148>)
 800836c:	f240 115d 	movw	r1, #349	; 0x15d
 8008370:	f000 fcc4 	bl	8008cfc <__assert_func>
 8008374:	f100 0614 	add.w	r6, r0, #20
 8008378:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800837c:	4633      	mov	r3, r6
 800837e:	2200      	movs	r2, #0
 8008380:	4543      	cmp	r3, r8
 8008382:	d31e      	bcc.n	80083c2 <__multiply+0x92>
 8008384:	f105 0c14 	add.w	ip, r5, #20
 8008388:	f104 0314 	add.w	r3, r4, #20
 800838c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008390:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008394:	9202      	str	r2, [sp, #8]
 8008396:	ebac 0205 	sub.w	r2, ip, r5
 800839a:	3a15      	subs	r2, #21
 800839c:	f022 0203 	bic.w	r2, r2, #3
 80083a0:	3204      	adds	r2, #4
 80083a2:	f105 0115 	add.w	r1, r5, #21
 80083a6:	458c      	cmp	ip, r1
 80083a8:	bf38      	it	cc
 80083aa:	2204      	movcc	r2, #4
 80083ac:	9201      	str	r2, [sp, #4]
 80083ae:	9a02      	ldr	r2, [sp, #8]
 80083b0:	9303      	str	r3, [sp, #12]
 80083b2:	429a      	cmp	r2, r3
 80083b4:	d808      	bhi.n	80083c8 <__multiply+0x98>
 80083b6:	2f00      	cmp	r7, #0
 80083b8:	dc55      	bgt.n	8008466 <__multiply+0x136>
 80083ba:	6107      	str	r7, [r0, #16]
 80083bc:	b005      	add	sp, #20
 80083be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083c2:	f843 2b04 	str.w	r2, [r3], #4
 80083c6:	e7db      	b.n	8008380 <__multiply+0x50>
 80083c8:	f8b3 a000 	ldrh.w	sl, [r3]
 80083cc:	f1ba 0f00 	cmp.w	sl, #0
 80083d0:	d020      	beq.n	8008414 <__multiply+0xe4>
 80083d2:	f105 0e14 	add.w	lr, r5, #20
 80083d6:	46b1      	mov	r9, r6
 80083d8:	2200      	movs	r2, #0
 80083da:	f85e 4b04 	ldr.w	r4, [lr], #4
 80083de:	f8d9 b000 	ldr.w	fp, [r9]
 80083e2:	b2a1      	uxth	r1, r4
 80083e4:	fa1f fb8b 	uxth.w	fp, fp
 80083e8:	fb0a b101 	mla	r1, sl, r1, fp
 80083ec:	4411      	add	r1, r2
 80083ee:	f8d9 2000 	ldr.w	r2, [r9]
 80083f2:	0c24      	lsrs	r4, r4, #16
 80083f4:	0c12      	lsrs	r2, r2, #16
 80083f6:	fb0a 2404 	mla	r4, sl, r4, r2
 80083fa:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80083fe:	b289      	uxth	r1, r1
 8008400:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008404:	45f4      	cmp	ip, lr
 8008406:	f849 1b04 	str.w	r1, [r9], #4
 800840a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800840e:	d8e4      	bhi.n	80083da <__multiply+0xaa>
 8008410:	9901      	ldr	r1, [sp, #4]
 8008412:	5072      	str	r2, [r6, r1]
 8008414:	9a03      	ldr	r2, [sp, #12]
 8008416:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800841a:	3304      	adds	r3, #4
 800841c:	f1b9 0f00 	cmp.w	r9, #0
 8008420:	d01f      	beq.n	8008462 <__multiply+0x132>
 8008422:	6834      	ldr	r4, [r6, #0]
 8008424:	f105 0114 	add.w	r1, r5, #20
 8008428:	46b6      	mov	lr, r6
 800842a:	f04f 0a00 	mov.w	sl, #0
 800842e:	880a      	ldrh	r2, [r1, #0]
 8008430:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008434:	fb09 b202 	mla	r2, r9, r2, fp
 8008438:	4492      	add	sl, r2
 800843a:	b2a4      	uxth	r4, r4
 800843c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008440:	f84e 4b04 	str.w	r4, [lr], #4
 8008444:	f851 4b04 	ldr.w	r4, [r1], #4
 8008448:	f8be 2000 	ldrh.w	r2, [lr]
 800844c:	0c24      	lsrs	r4, r4, #16
 800844e:	fb09 2404 	mla	r4, r9, r4, r2
 8008452:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008456:	458c      	cmp	ip, r1
 8008458:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800845c:	d8e7      	bhi.n	800842e <__multiply+0xfe>
 800845e:	9a01      	ldr	r2, [sp, #4]
 8008460:	50b4      	str	r4, [r6, r2]
 8008462:	3604      	adds	r6, #4
 8008464:	e7a3      	b.n	80083ae <__multiply+0x7e>
 8008466:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800846a:	2b00      	cmp	r3, #0
 800846c:	d1a5      	bne.n	80083ba <__multiply+0x8a>
 800846e:	3f01      	subs	r7, #1
 8008470:	e7a1      	b.n	80083b6 <__multiply+0x86>
 8008472:	bf00      	nop
 8008474:	080090df 	.word	0x080090df
 8008478:	08009150 	.word	0x08009150

0800847c <__pow5mult>:
 800847c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008480:	4615      	mov	r5, r2
 8008482:	f012 0203 	ands.w	r2, r2, #3
 8008486:	4606      	mov	r6, r0
 8008488:	460f      	mov	r7, r1
 800848a:	d007      	beq.n	800849c <__pow5mult+0x20>
 800848c:	4c25      	ldr	r4, [pc, #148]	; (8008524 <__pow5mult+0xa8>)
 800848e:	3a01      	subs	r2, #1
 8008490:	2300      	movs	r3, #0
 8008492:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008496:	f7ff fe9b 	bl	80081d0 <__multadd>
 800849a:	4607      	mov	r7, r0
 800849c:	10ad      	asrs	r5, r5, #2
 800849e:	d03d      	beq.n	800851c <__pow5mult+0xa0>
 80084a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80084a2:	b97c      	cbnz	r4, 80084c4 <__pow5mult+0x48>
 80084a4:	2010      	movs	r0, #16
 80084a6:	f7ff fe1b 	bl	80080e0 <malloc>
 80084aa:	4602      	mov	r2, r0
 80084ac:	6270      	str	r0, [r6, #36]	; 0x24
 80084ae:	b928      	cbnz	r0, 80084bc <__pow5mult+0x40>
 80084b0:	4b1d      	ldr	r3, [pc, #116]	; (8008528 <__pow5mult+0xac>)
 80084b2:	481e      	ldr	r0, [pc, #120]	; (800852c <__pow5mult+0xb0>)
 80084b4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80084b8:	f000 fc20 	bl	8008cfc <__assert_func>
 80084bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80084c0:	6004      	str	r4, [r0, #0]
 80084c2:	60c4      	str	r4, [r0, #12]
 80084c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80084c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80084cc:	b94c      	cbnz	r4, 80084e2 <__pow5mult+0x66>
 80084ce:	f240 2171 	movw	r1, #625	; 0x271
 80084d2:	4630      	mov	r0, r6
 80084d4:	f7ff ff16 	bl	8008304 <__i2b>
 80084d8:	2300      	movs	r3, #0
 80084da:	f8c8 0008 	str.w	r0, [r8, #8]
 80084de:	4604      	mov	r4, r0
 80084e0:	6003      	str	r3, [r0, #0]
 80084e2:	f04f 0900 	mov.w	r9, #0
 80084e6:	07eb      	lsls	r3, r5, #31
 80084e8:	d50a      	bpl.n	8008500 <__pow5mult+0x84>
 80084ea:	4639      	mov	r1, r7
 80084ec:	4622      	mov	r2, r4
 80084ee:	4630      	mov	r0, r6
 80084f0:	f7ff ff1e 	bl	8008330 <__multiply>
 80084f4:	4639      	mov	r1, r7
 80084f6:	4680      	mov	r8, r0
 80084f8:	4630      	mov	r0, r6
 80084fa:	f7ff fe47 	bl	800818c <_Bfree>
 80084fe:	4647      	mov	r7, r8
 8008500:	106d      	asrs	r5, r5, #1
 8008502:	d00b      	beq.n	800851c <__pow5mult+0xa0>
 8008504:	6820      	ldr	r0, [r4, #0]
 8008506:	b938      	cbnz	r0, 8008518 <__pow5mult+0x9c>
 8008508:	4622      	mov	r2, r4
 800850a:	4621      	mov	r1, r4
 800850c:	4630      	mov	r0, r6
 800850e:	f7ff ff0f 	bl	8008330 <__multiply>
 8008512:	6020      	str	r0, [r4, #0]
 8008514:	f8c0 9000 	str.w	r9, [r0]
 8008518:	4604      	mov	r4, r0
 800851a:	e7e4      	b.n	80084e6 <__pow5mult+0x6a>
 800851c:	4638      	mov	r0, r7
 800851e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008522:	bf00      	nop
 8008524:	080092a0 	.word	0x080092a0
 8008528:	08009069 	.word	0x08009069
 800852c:	08009150 	.word	0x08009150

08008530 <__lshift>:
 8008530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008534:	460c      	mov	r4, r1
 8008536:	6849      	ldr	r1, [r1, #4]
 8008538:	6923      	ldr	r3, [r4, #16]
 800853a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800853e:	68a3      	ldr	r3, [r4, #8]
 8008540:	4607      	mov	r7, r0
 8008542:	4691      	mov	r9, r2
 8008544:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008548:	f108 0601 	add.w	r6, r8, #1
 800854c:	42b3      	cmp	r3, r6
 800854e:	db0b      	blt.n	8008568 <__lshift+0x38>
 8008550:	4638      	mov	r0, r7
 8008552:	f7ff fddb 	bl	800810c <_Balloc>
 8008556:	4605      	mov	r5, r0
 8008558:	b948      	cbnz	r0, 800856e <__lshift+0x3e>
 800855a:	4602      	mov	r2, r0
 800855c:	4b28      	ldr	r3, [pc, #160]	; (8008600 <__lshift+0xd0>)
 800855e:	4829      	ldr	r0, [pc, #164]	; (8008604 <__lshift+0xd4>)
 8008560:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008564:	f000 fbca 	bl	8008cfc <__assert_func>
 8008568:	3101      	adds	r1, #1
 800856a:	005b      	lsls	r3, r3, #1
 800856c:	e7ee      	b.n	800854c <__lshift+0x1c>
 800856e:	2300      	movs	r3, #0
 8008570:	f100 0114 	add.w	r1, r0, #20
 8008574:	f100 0210 	add.w	r2, r0, #16
 8008578:	4618      	mov	r0, r3
 800857a:	4553      	cmp	r3, sl
 800857c:	db33      	blt.n	80085e6 <__lshift+0xb6>
 800857e:	6920      	ldr	r0, [r4, #16]
 8008580:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008584:	f104 0314 	add.w	r3, r4, #20
 8008588:	f019 091f 	ands.w	r9, r9, #31
 800858c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008590:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008594:	d02b      	beq.n	80085ee <__lshift+0xbe>
 8008596:	f1c9 0e20 	rsb	lr, r9, #32
 800859a:	468a      	mov	sl, r1
 800859c:	2200      	movs	r2, #0
 800859e:	6818      	ldr	r0, [r3, #0]
 80085a0:	fa00 f009 	lsl.w	r0, r0, r9
 80085a4:	4302      	orrs	r2, r0
 80085a6:	f84a 2b04 	str.w	r2, [sl], #4
 80085aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80085ae:	459c      	cmp	ip, r3
 80085b0:	fa22 f20e 	lsr.w	r2, r2, lr
 80085b4:	d8f3      	bhi.n	800859e <__lshift+0x6e>
 80085b6:	ebac 0304 	sub.w	r3, ip, r4
 80085ba:	3b15      	subs	r3, #21
 80085bc:	f023 0303 	bic.w	r3, r3, #3
 80085c0:	3304      	adds	r3, #4
 80085c2:	f104 0015 	add.w	r0, r4, #21
 80085c6:	4584      	cmp	ip, r0
 80085c8:	bf38      	it	cc
 80085ca:	2304      	movcc	r3, #4
 80085cc:	50ca      	str	r2, [r1, r3]
 80085ce:	b10a      	cbz	r2, 80085d4 <__lshift+0xa4>
 80085d0:	f108 0602 	add.w	r6, r8, #2
 80085d4:	3e01      	subs	r6, #1
 80085d6:	4638      	mov	r0, r7
 80085d8:	612e      	str	r6, [r5, #16]
 80085da:	4621      	mov	r1, r4
 80085dc:	f7ff fdd6 	bl	800818c <_Bfree>
 80085e0:	4628      	mov	r0, r5
 80085e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085e6:	f842 0f04 	str.w	r0, [r2, #4]!
 80085ea:	3301      	adds	r3, #1
 80085ec:	e7c5      	b.n	800857a <__lshift+0x4a>
 80085ee:	3904      	subs	r1, #4
 80085f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80085f4:	f841 2f04 	str.w	r2, [r1, #4]!
 80085f8:	459c      	cmp	ip, r3
 80085fa:	d8f9      	bhi.n	80085f0 <__lshift+0xc0>
 80085fc:	e7ea      	b.n	80085d4 <__lshift+0xa4>
 80085fe:	bf00      	nop
 8008600:	080090df 	.word	0x080090df
 8008604:	08009150 	.word	0x08009150

08008608 <__mcmp>:
 8008608:	b530      	push	{r4, r5, lr}
 800860a:	6902      	ldr	r2, [r0, #16]
 800860c:	690c      	ldr	r4, [r1, #16]
 800860e:	1b12      	subs	r2, r2, r4
 8008610:	d10e      	bne.n	8008630 <__mcmp+0x28>
 8008612:	f100 0314 	add.w	r3, r0, #20
 8008616:	3114      	adds	r1, #20
 8008618:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800861c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008620:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008624:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008628:	42a5      	cmp	r5, r4
 800862a:	d003      	beq.n	8008634 <__mcmp+0x2c>
 800862c:	d305      	bcc.n	800863a <__mcmp+0x32>
 800862e:	2201      	movs	r2, #1
 8008630:	4610      	mov	r0, r2
 8008632:	bd30      	pop	{r4, r5, pc}
 8008634:	4283      	cmp	r3, r0
 8008636:	d3f3      	bcc.n	8008620 <__mcmp+0x18>
 8008638:	e7fa      	b.n	8008630 <__mcmp+0x28>
 800863a:	f04f 32ff 	mov.w	r2, #4294967295
 800863e:	e7f7      	b.n	8008630 <__mcmp+0x28>

08008640 <__mdiff>:
 8008640:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008644:	460c      	mov	r4, r1
 8008646:	4606      	mov	r6, r0
 8008648:	4611      	mov	r1, r2
 800864a:	4620      	mov	r0, r4
 800864c:	4617      	mov	r7, r2
 800864e:	f7ff ffdb 	bl	8008608 <__mcmp>
 8008652:	1e05      	subs	r5, r0, #0
 8008654:	d110      	bne.n	8008678 <__mdiff+0x38>
 8008656:	4629      	mov	r1, r5
 8008658:	4630      	mov	r0, r6
 800865a:	f7ff fd57 	bl	800810c <_Balloc>
 800865e:	b930      	cbnz	r0, 800866e <__mdiff+0x2e>
 8008660:	4b39      	ldr	r3, [pc, #228]	; (8008748 <__mdiff+0x108>)
 8008662:	4602      	mov	r2, r0
 8008664:	f240 2132 	movw	r1, #562	; 0x232
 8008668:	4838      	ldr	r0, [pc, #224]	; (800874c <__mdiff+0x10c>)
 800866a:	f000 fb47 	bl	8008cfc <__assert_func>
 800866e:	2301      	movs	r3, #1
 8008670:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008674:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008678:	bfa4      	itt	ge
 800867a:	463b      	movge	r3, r7
 800867c:	4627      	movge	r7, r4
 800867e:	4630      	mov	r0, r6
 8008680:	6879      	ldr	r1, [r7, #4]
 8008682:	bfa6      	itte	ge
 8008684:	461c      	movge	r4, r3
 8008686:	2500      	movge	r5, #0
 8008688:	2501      	movlt	r5, #1
 800868a:	f7ff fd3f 	bl	800810c <_Balloc>
 800868e:	b920      	cbnz	r0, 800869a <__mdiff+0x5a>
 8008690:	4b2d      	ldr	r3, [pc, #180]	; (8008748 <__mdiff+0x108>)
 8008692:	4602      	mov	r2, r0
 8008694:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008698:	e7e6      	b.n	8008668 <__mdiff+0x28>
 800869a:	693e      	ldr	r6, [r7, #16]
 800869c:	60c5      	str	r5, [r0, #12]
 800869e:	6925      	ldr	r5, [r4, #16]
 80086a0:	f107 0114 	add.w	r1, r7, #20
 80086a4:	f104 0914 	add.w	r9, r4, #20
 80086a8:	f100 0e14 	add.w	lr, r0, #20
 80086ac:	f107 0210 	add.w	r2, r7, #16
 80086b0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80086b4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80086b8:	46f2      	mov	sl, lr
 80086ba:	2700      	movs	r7, #0
 80086bc:	f859 3b04 	ldr.w	r3, [r9], #4
 80086c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80086c4:	fa1f f883 	uxth.w	r8, r3
 80086c8:	fa17 f78b 	uxtah	r7, r7, fp
 80086cc:	0c1b      	lsrs	r3, r3, #16
 80086ce:	eba7 0808 	sub.w	r8, r7, r8
 80086d2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80086d6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80086da:	fa1f f888 	uxth.w	r8, r8
 80086de:	141f      	asrs	r7, r3, #16
 80086e0:	454d      	cmp	r5, r9
 80086e2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80086e6:	f84a 3b04 	str.w	r3, [sl], #4
 80086ea:	d8e7      	bhi.n	80086bc <__mdiff+0x7c>
 80086ec:	1b2b      	subs	r3, r5, r4
 80086ee:	3b15      	subs	r3, #21
 80086f0:	f023 0303 	bic.w	r3, r3, #3
 80086f4:	3304      	adds	r3, #4
 80086f6:	3415      	adds	r4, #21
 80086f8:	42a5      	cmp	r5, r4
 80086fa:	bf38      	it	cc
 80086fc:	2304      	movcc	r3, #4
 80086fe:	4419      	add	r1, r3
 8008700:	4473      	add	r3, lr
 8008702:	469e      	mov	lr, r3
 8008704:	460d      	mov	r5, r1
 8008706:	4565      	cmp	r5, ip
 8008708:	d30e      	bcc.n	8008728 <__mdiff+0xe8>
 800870a:	f10c 0203 	add.w	r2, ip, #3
 800870e:	1a52      	subs	r2, r2, r1
 8008710:	f022 0203 	bic.w	r2, r2, #3
 8008714:	3903      	subs	r1, #3
 8008716:	458c      	cmp	ip, r1
 8008718:	bf38      	it	cc
 800871a:	2200      	movcc	r2, #0
 800871c:	441a      	add	r2, r3
 800871e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008722:	b17b      	cbz	r3, 8008744 <__mdiff+0x104>
 8008724:	6106      	str	r6, [r0, #16]
 8008726:	e7a5      	b.n	8008674 <__mdiff+0x34>
 8008728:	f855 8b04 	ldr.w	r8, [r5], #4
 800872c:	fa17 f488 	uxtah	r4, r7, r8
 8008730:	1422      	asrs	r2, r4, #16
 8008732:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008736:	b2a4      	uxth	r4, r4
 8008738:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800873c:	f84e 4b04 	str.w	r4, [lr], #4
 8008740:	1417      	asrs	r7, r2, #16
 8008742:	e7e0      	b.n	8008706 <__mdiff+0xc6>
 8008744:	3e01      	subs	r6, #1
 8008746:	e7ea      	b.n	800871e <__mdiff+0xde>
 8008748:	080090df 	.word	0x080090df
 800874c:	08009150 	.word	0x08009150

08008750 <__d2b>:
 8008750:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008754:	4689      	mov	r9, r1
 8008756:	2101      	movs	r1, #1
 8008758:	ec57 6b10 	vmov	r6, r7, d0
 800875c:	4690      	mov	r8, r2
 800875e:	f7ff fcd5 	bl	800810c <_Balloc>
 8008762:	4604      	mov	r4, r0
 8008764:	b930      	cbnz	r0, 8008774 <__d2b+0x24>
 8008766:	4602      	mov	r2, r0
 8008768:	4b25      	ldr	r3, [pc, #148]	; (8008800 <__d2b+0xb0>)
 800876a:	4826      	ldr	r0, [pc, #152]	; (8008804 <__d2b+0xb4>)
 800876c:	f240 310a 	movw	r1, #778	; 0x30a
 8008770:	f000 fac4 	bl	8008cfc <__assert_func>
 8008774:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008778:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800877c:	bb35      	cbnz	r5, 80087cc <__d2b+0x7c>
 800877e:	2e00      	cmp	r6, #0
 8008780:	9301      	str	r3, [sp, #4]
 8008782:	d028      	beq.n	80087d6 <__d2b+0x86>
 8008784:	4668      	mov	r0, sp
 8008786:	9600      	str	r6, [sp, #0]
 8008788:	f7ff fd8c 	bl	80082a4 <__lo0bits>
 800878c:	9900      	ldr	r1, [sp, #0]
 800878e:	b300      	cbz	r0, 80087d2 <__d2b+0x82>
 8008790:	9a01      	ldr	r2, [sp, #4]
 8008792:	f1c0 0320 	rsb	r3, r0, #32
 8008796:	fa02 f303 	lsl.w	r3, r2, r3
 800879a:	430b      	orrs	r3, r1
 800879c:	40c2      	lsrs	r2, r0
 800879e:	6163      	str	r3, [r4, #20]
 80087a0:	9201      	str	r2, [sp, #4]
 80087a2:	9b01      	ldr	r3, [sp, #4]
 80087a4:	61a3      	str	r3, [r4, #24]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	bf14      	ite	ne
 80087aa:	2202      	movne	r2, #2
 80087ac:	2201      	moveq	r2, #1
 80087ae:	6122      	str	r2, [r4, #16]
 80087b0:	b1d5      	cbz	r5, 80087e8 <__d2b+0x98>
 80087b2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80087b6:	4405      	add	r5, r0
 80087b8:	f8c9 5000 	str.w	r5, [r9]
 80087bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80087c0:	f8c8 0000 	str.w	r0, [r8]
 80087c4:	4620      	mov	r0, r4
 80087c6:	b003      	add	sp, #12
 80087c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80087cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80087d0:	e7d5      	b.n	800877e <__d2b+0x2e>
 80087d2:	6161      	str	r1, [r4, #20]
 80087d4:	e7e5      	b.n	80087a2 <__d2b+0x52>
 80087d6:	a801      	add	r0, sp, #4
 80087d8:	f7ff fd64 	bl	80082a4 <__lo0bits>
 80087dc:	9b01      	ldr	r3, [sp, #4]
 80087de:	6163      	str	r3, [r4, #20]
 80087e0:	2201      	movs	r2, #1
 80087e2:	6122      	str	r2, [r4, #16]
 80087e4:	3020      	adds	r0, #32
 80087e6:	e7e3      	b.n	80087b0 <__d2b+0x60>
 80087e8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80087ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80087f0:	f8c9 0000 	str.w	r0, [r9]
 80087f4:	6918      	ldr	r0, [r3, #16]
 80087f6:	f7ff fd35 	bl	8008264 <__hi0bits>
 80087fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80087fe:	e7df      	b.n	80087c0 <__d2b+0x70>
 8008800:	080090df 	.word	0x080090df
 8008804:	08009150 	.word	0x08009150

08008808 <_calloc_r>:
 8008808:	b513      	push	{r0, r1, r4, lr}
 800880a:	434a      	muls	r2, r1
 800880c:	4611      	mov	r1, r2
 800880e:	9201      	str	r2, [sp, #4]
 8008810:	f000 f85a 	bl	80088c8 <_malloc_r>
 8008814:	4604      	mov	r4, r0
 8008816:	b118      	cbz	r0, 8008820 <_calloc_r+0x18>
 8008818:	9a01      	ldr	r2, [sp, #4]
 800881a:	2100      	movs	r1, #0
 800881c:	f7fd fe04 	bl	8006428 <memset>
 8008820:	4620      	mov	r0, r4
 8008822:	b002      	add	sp, #8
 8008824:	bd10      	pop	{r4, pc}
	...

08008828 <_free_r>:
 8008828:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800882a:	2900      	cmp	r1, #0
 800882c:	d048      	beq.n	80088c0 <_free_r+0x98>
 800882e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008832:	9001      	str	r0, [sp, #4]
 8008834:	2b00      	cmp	r3, #0
 8008836:	f1a1 0404 	sub.w	r4, r1, #4
 800883a:	bfb8      	it	lt
 800883c:	18e4      	addlt	r4, r4, r3
 800883e:	f000 fae3 	bl	8008e08 <__malloc_lock>
 8008842:	4a20      	ldr	r2, [pc, #128]	; (80088c4 <_free_r+0x9c>)
 8008844:	9801      	ldr	r0, [sp, #4]
 8008846:	6813      	ldr	r3, [r2, #0]
 8008848:	4615      	mov	r5, r2
 800884a:	b933      	cbnz	r3, 800885a <_free_r+0x32>
 800884c:	6063      	str	r3, [r4, #4]
 800884e:	6014      	str	r4, [r2, #0]
 8008850:	b003      	add	sp, #12
 8008852:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008856:	f000 badd 	b.w	8008e14 <__malloc_unlock>
 800885a:	42a3      	cmp	r3, r4
 800885c:	d90b      	bls.n	8008876 <_free_r+0x4e>
 800885e:	6821      	ldr	r1, [r4, #0]
 8008860:	1862      	adds	r2, r4, r1
 8008862:	4293      	cmp	r3, r2
 8008864:	bf04      	itt	eq
 8008866:	681a      	ldreq	r2, [r3, #0]
 8008868:	685b      	ldreq	r3, [r3, #4]
 800886a:	6063      	str	r3, [r4, #4]
 800886c:	bf04      	itt	eq
 800886e:	1852      	addeq	r2, r2, r1
 8008870:	6022      	streq	r2, [r4, #0]
 8008872:	602c      	str	r4, [r5, #0]
 8008874:	e7ec      	b.n	8008850 <_free_r+0x28>
 8008876:	461a      	mov	r2, r3
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	b10b      	cbz	r3, 8008880 <_free_r+0x58>
 800887c:	42a3      	cmp	r3, r4
 800887e:	d9fa      	bls.n	8008876 <_free_r+0x4e>
 8008880:	6811      	ldr	r1, [r2, #0]
 8008882:	1855      	adds	r5, r2, r1
 8008884:	42a5      	cmp	r5, r4
 8008886:	d10b      	bne.n	80088a0 <_free_r+0x78>
 8008888:	6824      	ldr	r4, [r4, #0]
 800888a:	4421      	add	r1, r4
 800888c:	1854      	adds	r4, r2, r1
 800888e:	42a3      	cmp	r3, r4
 8008890:	6011      	str	r1, [r2, #0]
 8008892:	d1dd      	bne.n	8008850 <_free_r+0x28>
 8008894:	681c      	ldr	r4, [r3, #0]
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	6053      	str	r3, [r2, #4]
 800889a:	4421      	add	r1, r4
 800889c:	6011      	str	r1, [r2, #0]
 800889e:	e7d7      	b.n	8008850 <_free_r+0x28>
 80088a0:	d902      	bls.n	80088a8 <_free_r+0x80>
 80088a2:	230c      	movs	r3, #12
 80088a4:	6003      	str	r3, [r0, #0]
 80088a6:	e7d3      	b.n	8008850 <_free_r+0x28>
 80088a8:	6825      	ldr	r5, [r4, #0]
 80088aa:	1961      	adds	r1, r4, r5
 80088ac:	428b      	cmp	r3, r1
 80088ae:	bf04      	itt	eq
 80088b0:	6819      	ldreq	r1, [r3, #0]
 80088b2:	685b      	ldreq	r3, [r3, #4]
 80088b4:	6063      	str	r3, [r4, #4]
 80088b6:	bf04      	itt	eq
 80088b8:	1949      	addeq	r1, r1, r5
 80088ba:	6021      	streq	r1, [r4, #0]
 80088bc:	6054      	str	r4, [r2, #4]
 80088be:	e7c7      	b.n	8008850 <_free_r+0x28>
 80088c0:	b003      	add	sp, #12
 80088c2:	bd30      	pop	{r4, r5, pc}
 80088c4:	20000544 	.word	0x20000544

080088c8 <_malloc_r>:
 80088c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ca:	1ccd      	adds	r5, r1, #3
 80088cc:	f025 0503 	bic.w	r5, r5, #3
 80088d0:	3508      	adds	r5, #8
 80088d2:	2d0c      	cmp	r5, #12
 80088d4:	bf38      	it	cc
 80088d6:	250c      	movcc	r5, #12
 80088d8:	2d00      	cmp	r5, #0
 80088da:	4606      	mov	r6, r0
 80088dc:	db01      	blt.n	80088e2 <_malloc_r+0x1a>
 80088de:	42a9      	cmp	r1, r5
 80088e0:	d903      	bls.n	80088ea <_malloc_r+0x22>
 80088e2:	230c      	movs	r3, #12
 80088e4:	6033      	str	r3, [r6, #0]
 80088e6:	2000      	movs	r0, #0
 80088e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088ea:	f000 fa8d 	bl	8008e08 <__malloc_lock>
 80088ee:	4921      	ldr	r1, [pc, #132]	; (8008974 <_malloc_r+0xac>)
 80088f0:	680a      	ldr	r2, [r1, #0]
 80088f2:	4614      	mov	r4, r2
 80088f4:	b99c      	cbnz	r4, 800891e <_malloc_r+0x56>
 80088f6:	4f20      	ldr	r7, [pc, #128]	; (8008978 <_malloc_r+0xb0>)
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	b923      	cbnz	r3, 8008906 <_malloc_r+0x3e>
 80088fc:	4621      	mov	r1, r4
 80088fe:	4630      	mov	r0, r6
 8008900:	f000 f996 	bl	8008c30 <_sbrk_r>
 8008904:	6038      	str	r0, [r7, #0]
 8008906:	4629      	mov	r1, r5
 8008908:	4630      	mov	r0, r6
 800890a:	f000 f991 	bl	8008c30 <_sbrk_r>
 800890e:	1c43      	adds	r3, r0, #1
 8008910:	d123      	bne.n	800895a <_malloc_r+0x92>
 8008912:	230c      	movs	r3, #12
 8008914:	6033      	str	r3, [r6, #0]
 8008916:	4630      	mov	r0, r6
 8008918:	f000 fa7c 	bl	8008e14 <__malloc_unlock>
 800891c:	e7e3      	b.n	80088e6 <_malloc_r+0x1e>
 800891e:	6823      	ldr	r3, [r4, #0]
 8008920:	1b5b      	subs	r3, r3, r5
 8008922:	d417      	bmi.n	8008954 <_malloc_r+0x8c>
 8008924:	2b0b      	cmp	r3, #11
 8008926:	d903      	bls.n	8008930 <_malloc_r+0x68>
 8008928:	6023      	str	r3, [r4, #0]
 800892a:	441c      	add	r4, r3
 800892c:	6025      	str	r5, [r4, #0]
 800892e:	e004      	b.n	800893a <_malloc_r+0x72>
 8008930:	6863      	ldr	r3, [r4, #4]
 8008932:	42a2      	cmp	r2, r4
 8008934:	bf0c      	ite	eq
 8008936:	600b      	streq	r3, [r1, #0]
 8008938:	6053      	strne	r3, [r2, #4]
 800893a:	4630      	mov	r0, r6
 800893c:	f000 fa6a 	bl	8008e14 <__malloc_unlock>
 8008940:	f104 000b 	add.w	r0, r4, #11
 8008944:	1d23      	adds	r3, r4, #4
 8008946:	f020 0007 	bic.w	r0, r0, #7
 800894a:	1ac2      	subs	r2, r0, r3
 800894c:	d0cc      	beq.n	80088e8 <_malloc_r+0x20>
 800894e:	1a1b      	subs	r3, r3, r0
 8008950:	50a3      	str	r3, [r4, r2]
 8008952:	e7c9      	b.n	80088e8 <_malloc_r+0x20>
 8008954:	4622      	mov	r2, r4
 8008956:	6864      	ldr	r4, [r4, #4]
 8008958:	e7cc      	b.n	80088f4 <_malloc_r+0x2c>
 800895a:	1cc4      	adds	r4, r0, #3
 800895c:	f024 0403 	bic.w	r4, r4, #3
 8008960:	42a0      	cmp	r0, r4
 8008962:	d0e3      	beq.n	800892c <_malloc_r+0x64>
 8008964:	1a21      	subs	r1, r4, r0
 8008966:	4630      	mov	r0, r6
 8008968:	f000 f962 	bl	8008c30 <_sbrk_r>
 800896c:	3001      	adds	r0, #1
 800896e:	d1dd      	bne.n	800892c <_malloc_r+0x64>
 8008970:	e7cf      	b.n	8008912 <_malloc_r+0x4a>
 8008972:	bf00      	nop
 8008974:	20000544 	.word	0x20000544
 8008978:	20000548 	.word	0x20000548

0800897c <__sfputc_r>:
 800897c:	6893      	ldr	r3, [r2, #8]
 800897e:	3b01      	subs	r3, #1
 8008980:	2b00      	cmp	r3, #0
 8008982:	b410      	push	{r4}
 8008984:	6093      	str	r3, [r2, #8]
 8008986:	da08      	bge.n	800899a <__sfputc_r+0x1e>
 8008988:	6994      	ldr	r4, [r2, #24]
 800898a:	42a3      	cmp	r3, r4
 800898c:	db01      	blt.n	8008992 <__sfputc_r+0x16>
 800898e:	290a      	cmp	r1, #10
 8008990:	d103      	bne.n	800899a <__sfputc_r+0x1e>
 8008992:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008996:	f7fe ba47 	b.w	8006e28 <__swbuf_r>
 800899a:	6813      	ldr	r3, [r2, #0]
 800899c:	1c58      	adds	r0, r3, #1
 800899e:	6010      	str	r0, [r2, #0]
 80089a0:	7019      	strb	r1, [r3, #0]
 80089a2:	4608      	mov	r0, r1
 80089a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089a8:	4770      	bx	lr

080089aa <__sfputs_r>:
 80089aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ac:	4606      	mov	r6, r0
 80089ae:	460f      	mov	r7, r1
 80089b0:	4614      	mov	r4, r2
 80089b2:	18d5      	adds	r5, r2, r3
 80089b4:	42ac      	cmp	r4, r5
 80089b6:	d101      	bne.n	80089bc <__sfputs_r+0x12>
 80089b8:	2000      	movs	r0, #0
 80089ba:	e007      	b.n	80089cc <__sfputs_r+0x22>
 80089bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089c0:	463a      	mov	r2, r7
 80089c2:	4630      	mov	r0, r6
 80089c4:	f7ff ffda 	bl	800897c <__sfputc_r>
 80089c8:	1c43      	adds	r3, r0, #1
 80089ca:	d1f3      	bne.n	80089b4 <__sfputs_r+0xa>
 80089cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080089d0 <_vfiprintf_r>:
 80089d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089d4:	460d      	mov	r5, r1
 80089d6:	b09d      	sub	sp, #116	; 0x74
 80089d8:	4614      	mov	r4, r2
 80089da:	4698      	mov	r8, r3
 80089dc:	4606      	mov	r6, r0
 80089de:	b118      	cbz	r0, 80089e8 <_vfiprintf_r+0x18>
 80089e0:	6983      	ldr	r3, [r0, #24]
 80089e2:	b90b      	cbnz	r3, 80089e8 <_vfiprintf_r+0x18>
 80089e4:	f7ff fa72 	bl	8007ecc <__sinit>
 80089e8:	4b89      	ldr	r3, [pc, #548]	; (8008c10 <_vfiprintf_r+0x240>)
 80089ea:	429d      	cmp	r5, r3
 80089ec:	d11b      	bne.n	8008a26 <_vfiprintf_r+0x56>
 80089ee:	6875      	ldr	r5, [r6, #4]
 80089f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089f2:	07d9      	lsls	r1, r3, #31
 80089f4:	d405      	bmi.n	8008a02 <_vfiprintf_r+0x32>
 80089f6:	89ab      	ldrh	r3, [r5, #12]
 80089f8:	059a      	lsls	r2, r3, #22
 80089fa:	d402      	bmi.n	8008a02 <_vfiprintf_r+0x32>
 80089fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80089fe:	f7ff fb08 	bl	8008012 <__retarget_lock_acquire_recursive>
 8008a02:	89ab      	ldrh	r3, [r5, #12]
 8008a04:	071b      	lsls	r3, r3, #28
 8008a06:	d501      	bpl.n	8008a0c <_vfiprintf_r+0x3c>
 8008a08:	692b      	ldr	r3, [r5, #16]
 8008a0a:	b9eb      	cbnz	r3, 8008a48 <_vfiprintf_r+0x78>
 8008a0c:	4629      	mov	r1, r5
 8008a0e:	4630      	mov	r0, r6
 8008a10:	f7fe fa5c 	bl	8006ecc <__swsetup_r>
 8008a14:	b1c0      	cbz	r0, 8008a48 <_vfiprintf_r+0x78>
 8008a16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a18:	07dc      	lsls	r4, r3, #31
 8008a1a:	d50e      	bpl.n	8008a3a <_vfiprintf_r+0x6a>
 8008a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a20:	b01d      	add	sp, #116	; 0x74
 8008a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a26:	4b7b      	ldr	r3, [pc, #492]	; (8008c14 <_vfiprintf_r+0x244>)
 8008a28:	429d      	cmp	r5, r3
 8008a2a:	d101      	bne.n	8008a30 <_vfiprintf_r+0x60>
 8008a2c:	68b5      	ldr	r5, [r6, #8]
 8008a2e:	e7df      	b.n	80089f0 <_vfiprintf_r+0x20>
 8008a30:	4b79      	ldr	r3, [pc, #484]	; (8008c18 <_vfiprintf_r+0x248>)
 8008a32:	429d      	cmp	r5, r3
 8008a34:	bf08      	it	eq
 8008a36:	68f5      	ldreq	r5, [r6, #12]
 8008a38:	e7da      	b.n	80089f0 <_vfiprintf_r+0x20>
 8008a3a:	89ab      	ldrh	r3, [r5, #12]
 8008a3c:	0598      	lsls	r0, r3, #22
 8008a3e:	d4ed      	bmi.n	8008a1c <_vfiprintf_r+0x4c>
 8008a40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a42:	f7ff fae7 	bl	8008014 <__retarget_lock_release_recursive>
 8008a46:	e7e9      	b.n	8008a1c <_vfiprintf_r+0x4c>
 8008a48:	2300      	movs	r3, #0
 8008a4a:	9309      	str	r3, [sp, #36]	; 0x24
 8008a4c:	2320      	movs	r3, #32
 8008a4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a52:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a56:	2330      	movs	r3, #48	; 0x30
 8008a58:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008c1c <_vfiprintf_r+0x24c>
 8008a5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a60:	f04f 0901 	mov.w	r9, #1
 8008a64:	4623      	mov	r3, r4
 8008a66:	469a      	mov	sl, r3
 8008a68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a6c:	b10a      	cbz	r2, 8008a72 <_vfiprintf_r+0xa2>
 8008a6e:	2a25      	cmp	r2, #37	; 0x25
 8008a70:	d1f9      	bne.n	8008a66 <_vfiprintf_r+0x96>
 8008a72:	ebba 0b04 	subs.w	fp, sl, r4
 8008a76:	d00b      	beq.n	8008a90 <_vfiprintf_r+0xc0>
 8008a78:	465b      	mov	r3, fp
 8008a7a:	4622      	mov	r2, r4
 8008a7c:	4629      	mov	r1, r5
 8008a7e:	4630      	mov	r0, r6
 8008a80:	f7ff ff93 	bl	80089aa <__sfputs_r>
 8008a84:	3001      	adds	r0, #1
 8008a86:	f000 80aa 	beq.w	8008bde <_vfiprintf_r+0x20e>
 8008a8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a8c:	445a      	add	r2, fp
 8008a8e:	9209      	str	r2, [sp, #36]	; 0x24
 8008a90:	f89a 3000 	ldrb.w	r3, [sl]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	f000 80a2 	beq.w	8008bde <_vfiprintf_r+0x20e>
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8008aa0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008aa4:	f10a 0a01 	add.w	sl, sl, #1
 8008aa8:	9304      	str	r3, [sp, #16]
 8008aaa:	9307      	str	r3, [sp, #28]
 8008aac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ab0:	931a      	str	r3, [sp, #104]	; 0x68
 8008ab2:	4654      	mov	r4, sl
 8008ab4:	2205      	movs	r2, #5
 8008ab6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008aba:	4858      	ldr	r0, [pc, #352]	; (8008c1c <_vfiprintf_r+0x24c>)
 8008abc:	f7f7 fbb0 	bl	8000220 <memchr>
 8008ac0:	9a04      	ldr	r2, [sp, #16]
 8008ac2:	b9d8      	cbnz	r0, 8008afc <_vfiprintf_r+0x12c>
 8008ac4:	06d1      	lsls	r1, r2, #27
 8008ac6:	bf44      	itt	mi
 8008ac8:	2320      	movmi	r3, #32
 8008aca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ace:	0713      	lsls	r3, r2, #28
 8008ad0:	bf44      	itt	mi
 8008ad2:	232b      	movmi	r3, #43	; 0x2b
 8008ad4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ad8:	f89a 3000 	ldrb.w	r3, [sl]
 8008adc:	2b2a      	cmp	r3, #42	; 0x2a
 8008ade:	d015      	beq.n	8008b0c <_vfiprintf_r+0x13c>
 8008ae0:	9a07      	ldr	r2, [sp, #28]
 8008ae2:	4654      	mov	r4, sl
 8008ae4:	2000      	movs	r0, #0
 8008ae6:	f04f 0c0a 	mov.w	ip, #10
 8008aea:	4621      	mov	r1, r4
 8008aec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008af0:	3b30      	subs	r3, #48	; 0x30
 8008af2:	2b09      	cmp	r3, #9
 8008af4:	d94e      	bls.n	8008b94 <_vfiprintf_r+0x1c4>
 8008af6:	b1b0      	cbz	r0, 8008b26 <_vfiprintf_r+0x156>
 8008af8:	9207      	str	r2, [sp, #28]
 8008afa:	e014      	b.n	8008b26 <_vfiprintf_r+0x156>
 8008afc:	eba0 0308 	sub.w	r3, r0, r8
 8008b00:	fa09 f303 	lsl.w	r3, r9, r3
 8008b04:	4313      	orrs	r3, r2
 8008b06:	9304      	str	r3, [sp, #16]
 8008b08:	46a2      	mov	sl, r4
 8008b0a:	e7d2      	b.n	8008ab2 <_vfiprintf_r+0xe2>
 8008b0c:	9b03      	ldr	r3, [sp, #12]
 8008b0e:	1d19      	adds	r1, r3, #4
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	9103      	str	r1, [sp, #12]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	bfbb      	ittet	lt
 8008b18:	425b      	neglt	r3, r3
 8008b1a:	f042 0202 	orrlt.w	r2, r2, #2
 8008b1e:	9307      	strge	r3, [sp, #28]
 8008b20:	9307      	strlt	r3, [sp, #28]
 8008b22:	bfb8      	it	lt
 8008b24:	9204      	strlt	r2, [sp, #16]
 8008b26:	7823      	ldrb	r3, [r4, #0]
 8008b28:	2b2e      	cmp	r3, #46	; 0x2e
 8008b2a:	d10c      	bne.n	8008b46 <_vfiprintf_r+0x176>
 8008b2c:	7863      	ldrb	r3, [r4, #1]
 8008b2e:	2b2a      	cmp	r3, #42	; 0x2a
 8008b30:	d135      	bne.n	8008b9e <_vfiprintf_r+0x1ce>
 8008b32:	9b03      	ldr	r3, [sp, #12]
 8008b34:	1d1a      	adds	r2, r3, #4
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	9203      	str	r2, [sp, #12]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	bfb8      	it	lt
 8008b3e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b42:	3402      	adds	r4, #2
 8008b44:	9305      	str	r3, [sp, #20]
 8008b46:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008c2c <_vfiprintf_r+0x25c>
 8008b4a:	7821      	ldrb	r1, [r4, #0]
 8008b4c:	2203      	movs	r2, #3
 8008b4e:	4650      	mov	r0, sl
 8008b50:	f7f7 fb66 	bl	8000220 <memchr>
 8008b54:	b140      	cbz	r0, 8008b68 <_vfiprintf_r+0x198>
 8008b56:	2340      	movs	r3, #64	; 0x40
 8008b58:	eba0 000a 	sub.w	r0, r0, sl
 8008b5c:	fa03 f000 	lsl.w	r0, r3, r0
 8008b60:	9b04      	ldr	r3, [sp, #16]
 8008b62:	4303      	orrs	r3, r0
 8008b64:	3401      	adds	r4, #1
 8008b66:	9304      	str	r3, [sp, #16]
 8008b68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b6c:	482c      	ldr	r0, [pc, #176]	; (8008c20 <_vfiprintf_r+0x250>)
 8008b6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b72:	2206      	movs	r2, #6
 8008b74:	f7f7 fb54 	bl	8000220 <memchr>
 8008b78:	2800      	cmp	r0, #0
 8008b7a:	d03f      	beq.n	8008bfc <_vfiprintf_r+0x22c>
 8008b7c:	4b29      	ldr	r3, [pc, #164]	; (8008c24 <_vfiprintf_r+0x254>)
 8008b7e:	bb1b      	cbnz	r3, 8008bc8 <_vfiprintf_r+0x1f8>
 8008b80:	9b03      	ldr	r3, [sp, #12]
 8008b82:	3307      	adds	r3, #7
 8008b84:	f023 0307 	bic.w	r3, r3, #7
 8008b88:	3308      	adds	r3, #8
 8008b8a:	9303      	str	r3, [sp, #12]
 8008b8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b8e:	443b      	add	r3, r7
 8008b90:	9309      	str	r3, [sp, #36]	; 0x24
 8008b92:	e767      	b.n	8008a64 <_vfiprintf_r+0x94>
 8008b94:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b98:	460c      	mov	r4, r1
 8008b9a:	2001      	movs	r0, #1
 8008b9c:	e7a5      	b.n	8008aea <_vfiprintf_r+0x11a>
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	3401      	adds	r4, #1
 8008ba2:	9305      	str	r3, [sp, #20]
 8008ba4:	4619      	mov	r1, r3
 8008ba6:	f04f 0c0a 	mov.w	ip, #10
 8008baa:	4620      	mov	r0, r4
 8008bac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bb0:	3a30      	subs	r2, #48	; 0x30
 8008bb2:	2a09      	cmp	r2, #9
 8008bb4:	d903      	bls.n	8008bbe <_vfiprintf_r+0x1ee>
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d0c5      	beq.n	8008b46 <_vfiprintf_r+0x176>
 8008bba:	9105      	str	r1, [sp, #20]
 8008bbc:	e7c3      	b.n	8008b46 <_vfiprintf_r+0x176>
 8008bbe:	fb0c 2101 	mla	r1, ip, r1, r2
 8008bc2:	4604      	mov	r4, r0
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	e7f0      	b.n	8008baa <_vfiprintf_r+0x1da>
 8008bc8:	ab03      	add	r3, sp, #12
 8008bca:	9300      	str	r3, [sp, #0]
 8008bcc:	462a      	mov	r2, r5
 8008bce:	4b16      	ldr	r3, [pc, #88]	; (8008c28 <_vfiprintf_r+0x258>)
 8008bd0:	a904      	add	r1, sp, #16
 8008bd2:	4630      	mov	r0, r6
 8008bd4:	f7fd fcd0 	bl	8006578 <_printf_float>
 8008bd8:	4607      	mov	r7, r0
 8008bda:	1c78      	adds	r0, r7, #1
 8008bdc:	d1d6      	bne.n	8008b8c <_vfiprintf_r+0x1bc>
 8008bde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008be0:	07d9      	lsls	r1, r3, #31
 8008be2:	d405      	bmi.n	8008bf0 <_vfiprintf_r+0x220>
 8008be4:	89ab      	ldrh	r3, [r5, #12]
 8008be6:	059a      	lsls	r2, r3, #22
 8008be8:	d402      	bmi.n	8008bf0 <_vfiprintf_r+0x220>
 8008bea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008bec:	f7ff fa12 	bl	8008014 <__retarget_lock_release_recursive>
 8008bf0:	89ab      	ldrh	r3, [r5, #12]
 8008bf2:	065b      	lsls	r3, r3, #25
 8008bf4:	f53f af12 	bmi.w	8008a1c <_vfiprintf_r+0x4c>
 8008bf8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008bfa:	e711      	b.n	8008a20 <_vfiprintf_r+0x50>
 8008bfc:	ab03      	add	r3, sp, #12
 8008bfe:	9300      	str	r3, [sp, #0]
 8008c00:	462a      	mov	r2, r5
 8008c02:	4b09      	ldr	r3, [pc, #36]	; (8008c28 <_vfiprintf_r+0x258>)
 8008c04:	a904      	add	r1, sp, #16
 8008c06:	4630      	mov	r0, r6
 8008c08:	f7fd ff5a 	bl	8006ac0 <_printf_i>
 8008c0c:	e7e4      	b.n	8008bd8 <_vfiprintf_r+0x208>
 8008c0e:	bf00      	nop
 8008c10:	08009110 	.word	0x08009110
 8008c14:	08009130 	.word	0x08009130
 8008c18:	080090f0 	.word	0x080090f0
 8008c1c:	080092ac 	.word	0x080092ac
 8008c20:	080092b6 	.word	0x080092b6
 8008c24:	08006579 	.word	0x08006579
 8008c28:	080089ab 	.word	0x080089ab
 8008c2c:	080092b2 	.word	0x080092b2

08008c30 <_sbrk_r>:
 8008c30:	b538      	push	{r3, r4, r5, lr}
 8008c32:	4d06      	ldr	r5, [pc, #24]	; (8008c4c <_sbrk_r+0x1c>)
 8008c34:	2300      	movs	r3, #0
 8008c36:	4604      	mov	r4, r0
 8008c38:	4608      	mov	r0, r1
 8008c3a:	602b      	str	r3, [r5, #0]
 8008c3c:	f7f9 f99e 	bl	8001f7c <_sbrk>
 8008c40:	1c43      	adds	r3, r0, #1
 8008c42:	d102      	bne.n	8008c4a <_sbrk_r+0x1a>
 8008c44:	682b      	ldr	r3, [r5, #0]
 8008c46:	b103      	cbz	r3, 8008c4a <_sbrk_r+0x1a>
 8008c48:	6023      	str	r3, [r4, #0]
 8008c4a:	bd38      	pop	{r3, r4, r5, pc}
 8008c4c:	2000079c 	.word	0x2000079c

08008c50 <__sread>:
 8008c50:	b510      	push	{r4, lr}
 8008c52:	460c      	mov	r4, r1
 8008c54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c58:	f000 f8e2 	bl	8008e20 <_read_r>
 8008c5c:	2800      	cmp	r0, #0
 8008c5e:	bfab      	itete	ge
 8008c60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008c62:	89a3      	ldrhlt	r3, [r4, #12]
 8008c64:	181b      	addge	r3, r3, r0
 8008c66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008c6a:	bfac      	ite	ge
 8008c6c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008c6e:	81a3      	strhlt	r3, [r4, #12]
 8008c70:	bd10      	pop	{r4, pc}

08008c72 <__swrite>:
 8008c72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c76:	461f      	mov	r7, r3
 8008c78:	898b      	ldrh	r3, [r1, #12]
 8008c7a:	05db      	lsls	r3, r3, #23
 8008c7c:	4605      	mov	r5, r0
 8008c7e:	460c      	mov	r4, r1
 8008c80:	4616      	mov	r6, r2
 8008c82:	d505      	bpl.n	8008c90 <__swrite+0x1e>
 8008c84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c88:	2302      	movs	r3, #2
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	f000 f898 	bl	8008dc0 <_lseek_r>
 8008c90:	89a3      	ldrh	r3, [r4, #12]
 8008c92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c9a:	81a3      	strh	r3, [r4, #12]
 8008c9c:	4632      	mov	r2, r6
 8008c9e:	463b      	mov	r3, r7
 8008ca0:	4628      	mov	r0, r5
 8008ca2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ca6:	f000 b817 	b.w	8008cd8 <_write_r>

08008caa <__sseek>:
 8008caa:	b510      	push	{r4, lr}
 8008cac:	460c      	mov	r4, r1
 8008cae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cb2:	f000 f885 	bl	8008dc0 <_lseek_r>
 8008cb6:	1c43      	adds	r3, r0, #1
 8008cb8:	89a3      	ldrh	r3, [r4, #12]
 8008cba:	bf15      	itete	ne
 8008cbc:	6560      	strne	r0, [r4, #84]	; 0x54
 8008cbe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008cc2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008cc6:	81a3      	strheq	r3, [r4, #12]
 8008cc8:	bf18      	it	ne
 8008cca:	81a3      	strhne	r3, [r4, #12]
 8008ccc:	bd10      	pop	{r4, pc}

08008cce <__sclose>:
 8008cce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cd2:	f000 b831 	b.w	8008d38 <_close_r>
	...

08008cd8 <_write_r>:
 8008cd8:	b538      	push	{r3, r4, r5, lr}
 8008cda:	4d07      	ldr	r5, [pc, #28]	; (8008cf8 <_write_r+0x20>)
 8008cdc:	4604      	mov	r4, r0
 8008cde:	4608      	mov	r0, r1
 8008ce0:	4611      	mov	r1, r2
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	602a      	str	r2, [r5, #0]
 8008ce6:	461a      	mov	r2, r3
 8008ce8:	f7f9 f8f7 	bl	8001eda <_write>
 8008cec:	1c43      	adds	r3, r0, #1
 8008cee:	d102      	bne.n	8008cf6 <_write_r+0x1e>
 8008cf0:	682b      	ldr	r3, [r5, #0]
 8008cf2:	b103      	cbz	r3, 8008cf6 <_write_r+0x1e>
 8008cf4:	6023      	str	r3, [r4, #0]
 8008cf6:	bd38      	pop	{r3, r4, r5, pc}
 8008cf8:	2000079c 	.word	0x2000079c

08008cfc <__assert_func>:
 8008cfc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008cfe:	4614      	mov	r4, r2
 8008d00:	461a      	mov	r2, r3
 8008d02:	4b09      	ldr	r3, [pc, #36]	; (8008d28 <__assert_func+0x2c>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4605      	mov	r5, r0
 8008d08:	68d8      	ldr	r0, [r3, #12]
 8008d0a:	b14c      	cbz	r4, 8008d20 <__assert_func+0x24>
 8008d0c:	4b07      	ldr	r3, [pc, #28]	; (8008d2c <__assert_func+0x30>)
 8008d0e:	9100      	str	r1, [sp, #0]
 8008d10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008d14:	4906      	ldr	r1, [pc, #24]	; (8008d30 <__assert_func+0x34>)
 8008d16:	462b      	mov	r3, r5
 8008d18:	f000 f81e 	bl	8008d58 <fiprintf>
 8008d1c:	f000 f89f 	bl	8008e5e <abort>
 8008d20:	4b04      	ldr	r3, [pc, #16]	; (8008d34 <__assert_func+0x38>)
 8008d22:	461c      	mov	r4, r3
 8008d24:	e7f3      	b.n	8008d0e <__assert_func+0x12>
 8008d26:	bf00      	nop
 8008d28:	20000020 	.word	0x20000020
 8008d2c:	080092bd 	.word	0x080092bd
 8008d30:	080092ca 	.word	0x080092ca
 8008d34:	080092f8 	.word	0x080092f8

08008d38 <_close_r>:
 8008d38:	b538      	push	{r3, r4, r5, lr}
 8008d3a:	4d06      	ldr	r5, [pc, #24]	; (8008d54 <_close_r+0x1c>)
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	4604      	mov	r4, r0
 8008d40:	4608      	mov	r0, r1
 8008d42:	602b      	str	r3, [r5, #0]
 8008d44:	f7f9 f8e5 	bl	8001f12 <_close>
 8008d48:	1c43      	adds	r3, r0, #1
 8008d4a:	d102      	bne.n	8008d52 <_close_r+0x1a>
 8008d4c:	682b      	ldr	r3, [r5, #0]
 8008d4e:	b103      	cbz	r3, 8008d52 <_close_r+0x1a>
 8008d50:	6023      	str	r3, [r4, #0]
 8008d52:	bd38      	pop	{r3, r4, r5, pc}
 8008d54:	2000079c 	.word	0x2000079c

08008d58 <fiprintf>:
 8008d58:	b40e      	push	{r1, r2, r3}
 8008d5a:	b503      	push	{r0, r1, lr}
 8008d5c:	4601      	mov	r1, r0
 8008d5e:	ab03      	add	r3, sp, #12
 8008d60:	4805      	ldr	r0, [pc, #20]	; (8008d78 <fiprintf+0x20>)
 8008d62:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d66:	6800      	ldr	r0, [r0, #0]
 8008d68:	9301      	str	r3, [sp, #4]
 8008d6a:	f7ff fe31 	bl	80089d0 <_vfiprintf_r>
 8008d6e:	b002      	add	sp, #8
 8008d70:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d74:	b003      	add	sp, #12
 8008d76:	4770      	bx	lr
 8008d78:	20000020 	.word	0x20000020

08008d7c <_fstat_r>:
 8008d7c:	b538      	push	{r3, r4, r5, lr}
 8008d7e:	4d07      	ldr	r5, [pc, #28]	; (8008d9c <_fstat_r+0x20>)
 8008d80:	2300      	movs	r3, #0
 8008d82:	4604      	mov	r4, r0
 8008d84:	4608      	mov	r0, r1
 8008d86:	4611      	mov	r1, r2
 8008d88:	602b      	str	r3, [r5, #0]
 8008d8a:	f7f9 f8ce 	bl	8001f2a <_fstat>
 8008d8e:	1c43      	adds	r3, r0, #1
 8008d90:	d102      	bne.n	8008d98 <_fstat_r+0x1c>
 8008d92:	682b      	ldr	r3, [r5, #0]
 8008d94:	b103      	cbz	r3, 8008d98 <_fstat_r+0x1c>
 8008d96:	6023      	str	r3, [r4, #0]
 8008d98:	bd38      	pop	{r3, r4, r5, pc}
 8008d9a:	bf00      	nop
 8008d9c:	2000079c 	.word	0x2000079c

08008da0 <_isatty_r>:
 8008da0:	b538      	push	{r3, r4, r5, lr}
 8008da2:	4d06      	ldr	r5, [pc, #24]	; (8008dbc <_isatty_r+0x1c>)
 8008da4:	2300      	movs	r3, #0
 8008da6:	4604      	mov	r4, r0
 8008da8:	4608      	mov	r0, r1
 8008daa:	602b      	str	r3, [r5, #0]
 8008dac:	f7f9 f8cd 	bl	8001f4a <_isatty>
 8008db0:	1c43      	adds	r3, r0, #1
 8008db2:	d102      	bne.n	8008dba <_isatty_r+0x1a>
 8008db4:	682b      	ldr	r3, [r5, #0]
 8008db6:	b103      	cbz	r3, 8008dba <_isatty_r+0x1a>
 8008db8:	6023      	str	r3, [r4, #0]
 8008dba:	bd38      	pop	{r3, r4, r5, pc}
 8008dbc:	2000079c 	.word	0x2000079c

08008dc0 <_lseek_r>:
 8008dc0:	b538      	push	{r3, r4, r5, lr}
 8008dc2:	4d07      	ldr	r5, [pc, #28]	; (8008de0 <_lseek_r+0x20>)
 8008dc4:	4604      	mov	r4, r0
 8008dc6:	4608      	mov	r0, r1
 8008dc8:	4611      	mov	r1, r2
 8008dca:	2200      	movs	r2, #0
 8008dcc:	602a      	str	r2, [r5, #0]
 8008dce:	461a      	mov	r2, r3
 8008dd0:	f7f9 f8c6 	bl	8001f60 <_lseek>
 8008dd4:	1c43      	adds	r3, r0, #1
 8008dd6:	d102      	bne.n	8008dde <_lseek_r+0x1e>
 8008dd8:	682b      	ldr	r3, [r5, #0]
 8008dda:	b103      	cbz	r3, 8008dde <_lseek_r+0x1e>
 8008ddc:	6023      	str	r3, [r4, #0]
 8008dde:	bd38      	pop	{r3, r4, r5, pc}
 8008de0:	2000079c 	.word	0x2000079c

08008de4 <__ascii_mbtowc>:
 8008de4:	b082      	sub	sp, #8
 8008de6:	b901      	cbnz	r1, 8008dea <__ascii_mbtowc+0x6>
 8008de8:	a901      	add	r1, sp, #4
 8008dea:	b142      	cbz	r2, 8008dfe <__ascii_mbtowc+0x1a>
 8008dec:	b14b      	cbz	r3, 8008e02 <__ascii_mbtowc+0x1e>
 8008dee:	7813      	ldrb	r3, [r2, #0]
 8008df0:	600b      	str	r3, [r1, #0]
 8008df2:	7812      	ldrb	r2, [r2, #0]
 8008df4:	1e10      	subs	r0, r2, #0
 8008df6:	bf18      	it	ne
 8008df8:	2001      	movne	r0, #1
 8008dfa:	b002      	add	sp, #8
 8008dfc:	4770      	bx	lr
 8008dfe:	4610      	mov	r0, r2
 8008e00:	e7fb      	b.n	8008dfa <__ascii_mbtowc+0x16>
 8008e02:	f06f 0001 	mvn.w	r0, #1
 8008e06:	e7f8      	b.n	8008dfa <__ascii_mbtowc+0x16>

08008e08 <__malloc_lock>:
 8008e08:	4801      	ldr	r0, [pc, #4]	; (8008e10 <__malloc_lock+0x8>)
 8008e0a:	f7ff b902 	b.w	8008012 <__retarget_lock_acquire_recursive>
 8008e0e:	bf00      	nop
 8008e10:	20000794 	.word	0x20000794

08008e14 <__malloc_unlock>:
 8008e14:	4801      	ldr	r0, [pc, #4]	; (8008e1c <__malloc_unlock+0x8>)
 8008e16:	f7ff b8fd 	b.w	8008014 <__retarget_lock_release_recursive>
 8008e1a:	bf00      	nop
 8008e1c:	20000794 	.word	0x20000794

08008e20 <_read_r>:
 8008e20:	b538      	push	{r3, r4, r5, lr}
 8008e22:	4d07      	ldr	r5, [pc, #28]	; (8008e40 <_read_r+0x20>)
 8008e24:	4604      	mov	r4, r0
 8008e26:	4608      	mov	r0, r1
 8008e28:	4611      	mov	r1, r2
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	602a      	str	r2, [r5, #0]
 8008e2e:	461a      	mov	r2, r3
 8008e30:	f7f9 f836 	bl	8001ea0 <_read>
 8008e34:	1c43      	adds	r3, r0, #1
 8008e36:	d102      	bne.n	8008e3e <_read_r+0x1e>
 8008e38:	682b      	ldr	r3, [r5, #0]
 8008e3a:	b103      	cbz	r3, 8008e3e <_read_r+0x1e>
 8008e3c:	6023      	str	r3, [r4, #0]
 8008e3e:	bd38      	pop	{r3, r4, r5, pc}
 8008e40:	2000079c 	.word	0x2000079c

08008e44 <__ascii_wctomb>:
 8008e44:	b149      	cbz	r1, 8008e5a <__ascii_wctomb+0x16>
 8008e46:	2aff      	cmp	r2, #255	; 0xff
 8008e48:	bf85      	ittet	hi
 8008e4a:	238a      	movhi	r3, #138	; 0x8a
 8008e4c:	6003      	strhi	r3, [r0, #0]
 8008e4e:	700a      	strbls	r2, [r1, #0]
 8008e50:	f04f 30ff 	movhi.w	r0, #4294967295
 8008e54:	bf98      	it	ls
 8008e56:	2001      	movls	r0, #1
 8008e58:	4770      	bx	lr
 8008e5a:	4608      	mov	r0, r1
 8008e5c:	4770      	bx	lr

08008e5e <abort>:
 8008e5e:	b508      	push	{r3, lr}
 8008e60:	2006      	movs	r0, #6
 8008e62:	f000 f82b 	bl	8008ebc <raise>
 8008e66:	2001      	movs	r0, #1
 8008e68:	f7f9 f810 	bl	8001e8c <_exit>

08008e6c <_raise_r>:
 8008e6c:	291f      	cmp	r1, #31
 8008e6e:	b538      	push	{r3, r4, r5, lr}
 8008e70:	4604      	mov	r4, r0
 8008e72:	460d      	mov	r5, r1
 8008e74:	d904      	bls.n	8008e80 <_raise_r+0x14>
 8008e76:	2316      	movs	r3, #22
 8008e78:	6003      	str	r3, [r0, #0]
 8008e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8008e7e:	bd38      	pop	{r3, r4, r5, pc}
 8008e80:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008e82:	b112      	cbz	r2, 8008e8a <_raise_r+0x1e>
 8008e84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008e88:	b94b      	cbnz	r3, 8008e9e <_raise_r+0x32>
 8008e8a:	4620      	mov	r0, r4
 8008e8c:	f000 f830 	bl	8008ef0 <_getpid_r>
 8008e90:	462a      	mov	r2, r5
 8008e92:	4601      	mov	r1, r0
 8008e94:	4620      	mov	r0, r4
 8008e96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e9a:	f000 b817 	b.w	8008ecc <_kill_r>
 8008e9e:	2b01      	cmp	r3, #1
 8008ea0:	d00a      	beq.n	8008eb8 <_raise_r+0x4c>
 8008ea2:	1c59      	adds	r1, r3, #1
 8008ea4:	d103      	bne.n	8008eae <_raise_r+0x42>
 8008ea6:	2316      	movs	r3, #22
 8008ea8:	6003      	str	r3, [r0, #0]
 8008eaa:	2001      	movs	r0, #1
 8008eac:	e7e7      	b.n	8008e7e <_raise_r+0x12>
 8008eae:	2400      	movs	r4, #0
 8008eb0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008eb4:	4628      	mov	r0, r5
 8008eb6:	4798      	blx	r3
 8008eb8:	2000      	movs	r0, #0
 8008eba:	e7e0      	b.n	8008e7e <_raise_r+0x12>

08008ebc <raise>:
 8008ebc:	4b02      	ldr	r3, [pc, #8]	; (8008ec8 <raise+0xc>)
 8008ebe:	4601      	mov	r1, r0
 8008ec0:	6818      	ldr	r0, [r3, #0]
 8008ec2:	f7ff bfd3 	b.w	8008e6c <_raise_r>
 8008ec6:	bf00      	nop
 8008ec8:	20000020 	.word	0x20000020

08008ecc <_kill_r>:
 8008ecc:	b538      	push	{r3, r4, r5, lr}
 8008ece:	4d07      	ldr	r5, [pc, #28]	; (8008eec <_kill_r+0x20>)
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	4604      	mov	r4, r0
 8008ed4:	4608      	mov	r0, r1
 8008ed6:	4611      	mov	r1, r2
 8008ed8:	602b      	str	r3, [r5, #0]
 8008eda:	f7f8 ffc7 	bl	8001e6c <_kill>
 8008ede:	1c43      	adds	r3, r0, #1
 8008ee0:	d102      	bne.n	8008ee8 <_kill_r+0x1c>
 8008ee2:	682b      	ldr	r3, [r5, #0]
 8008ee4:	b103      	cbz	r3, 8008ee8 <_kill_r+0x1c>
 8008ee6:	6023      	str	r3, [r4, #0]
 8008ee8:	bd38      	pop	{r3, r4, r5, pc}
 8008eea:	bf00      	nop
 8008eec:	2000079c 	.word	0x2000079c

08008ef0 <_getpid_r>:
 8008ef0:	f7f8 bfb4 	b.w	8001e5c <_getpid>

08008ef4 <_init>:
 8008ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ef6:	bf00      	nop
 8008ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008efa:	bc08      	pop	{r3}
 8008efc:	469e      	mov	lr, r3
 8008efe:	4770      	bx	lr

08008f00 <_fini>:
 8008f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f02:	bf00      	nop
 8008f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f06:	bc08      	pop	{r3}
 8008f08:	469e      	mov	lr, r3
 8008f0a:	4770      	bx	lr
