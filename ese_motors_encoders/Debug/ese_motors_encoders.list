
ese_motors_encoders.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085ac  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  08008780  08008780  00018780  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bcc  08008bcc  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  08008bcc  08008bcc  00018bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008bd4  08008bd4  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bd4  08008bd4  00018bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008bd8  08008bd8  00018bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08008bdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  200001e8  08008dc4  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003cc  08008dc4  000203cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f36e  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003862  00000000  00000000  0003f586  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001038  00000000  00000000  00042de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ed0  00000000  00000000  00043e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025e1b  00000000  00000000  00044cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016b7a  00000000  00000000  0006ab0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df6db  00000000  00000000  00081685  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00160d60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052b0  00000000  00000000  00160db4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008764 	.word	0x08008764

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	08008764 	.word	0x08008764

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b96e 	b.w	8000efc <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	4604      	mov	r4, r0
 8000c40:	468c      	mov	ip, r1
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	f040 8083 	bne.w	8000d4e <__udivmoddi4+0x116>
 8000c48:	428a      	cmp	r2, r1
 8000c4a:	4617      	mov	r7, r2
 8000c4c:	d947      	bls.n	8000cde <__udivmoddi4+0xa6>
 8000c4e:	fab2 f282 	clz	r2, r2
 8000c52:	b142      	cbz	r2, 8000c66 <__udivmoddi4+0x2e>
 8000c54:	f1c2 0020 	rsb	r0, r2, #32
 8000c58:	fa24 f000 	lsr.w	r0, r4, r0
 8000c5c:	4091      	lsls	r1, r2
 8000c5e:	4097      	lsls	r7, r2
 8000c60:	ea40 0c01 	orr.w	ip, r0, r1
 8000c64:	4094      	lsls	r4, r2
 8000c66:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c6a:	0c23      	lsrs	r3, r4, #16
 8000c6c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c70:	fa1f fe87 	uxth.w	lr, r7
 8000c74:	fb08 c116 	mls	r1, r8, r6, ip
 8000c78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c80:	4299      	cmp	r1, r3
 8000c82:	d909      	bls.n	8000c98 <__udivmoddi4+0x60>
 8000c84:	18fb      	adds	r3, r7, r3
 8000c86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c8a:	f080 8119 	bcs.w	8000ec0 <__udivmoddi4+0x288>
 8000c8e:	4299      	cmp	r1, r3
 8000c90:	f240 8116 	bls.w	8000ec0 <__udivmoddi4+0x288>
 8000c94:	3e02      	subs	r6, #2
 8000c96:	443b      	add	r3, r7
 8000c98:	1a5b      	subs	r3, r3, r1
 8000c9a:	b2a4      	uxth	r4, r4
 8000c9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ca8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cac:	45a6      	cmp	lr, r4
 8000cae:	d909      	bls.n	8000cc4 <__udivmoddi4+0x8c>
 8000cb0:	193c      	adds	r4, r7, r4
 8000cb2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cb6:	f080 8105 	bcs.w	8000ec4 <__udivmoddi4+0x28c>
 8000cba:	45a6      	cmp	lr, r4
 8000cbc:	f240 8102 	bls.w	8000ec4 <__udivmoddi4+0x28c>
 8000cc0:	3802      	subs	r0, #2
 8000cc2:	443c      	add	r4, r7
 8000cc4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cc8:	eba4 040e 	sub.w	r4, r4, lr
 8000ccc:	2600      	movs	r6, #0
 8000cce:	b11d      	cbz	r5, 8000cd8 <__udivmoddi4+0xa0>
 8000cd0:	40d4      	lsrs	r4, r2
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cd8:	4631      	mov	r1, r6
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	b902      	cbnz	r2, 8000ce2 <__udivmoddi4+0xaa>
 8000ce0:	deff      	udf	#255	; 0xff
 8000ce2:	fab2 f282 	clz	r2, r2
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	d150      	bne.n	8000d8c <__udivmoddi4+0x154>
 8000cea:	1bcb      	subs	r3, r1, r7
 8000cec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf0:	fa1f f887 	uxth.w	r8, r7
 8000cf4:	2601      	movs	r6, #1
 8000cf6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cfa:	0c21      	lsrs	r1, r4, #16
 8000cfc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d04:	fb08 f30c 	mul.w	r3, r8, ip
 8000d08:	428b      	cmp	r3, r1
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0xe4>
 8000d0c:	1879      	adds	r1, r7, r1
 8000d0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0xe2>
 8000d14:	428b      	cmp	r3, r1
 8000d16:	f200 80e9 	bhi.w	8000eec <__udivmoddi4+0x2b4>
 8000d1a:	4684      	mov	ip, r0
 8000d1c:	1ac9      	subs	r1, r1, r3
 8000d1e:	b2a3      	uxth	r3, r4
 8000d20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d24:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d28:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d2c:	fb08 f800 	mul.w	r8, r8, r0
 8000d30:	45a0      	cmp	r8, r4
 8000d32:	d907      	bls.n	8000d44 <__udivmoddi4+0x10c>
 8000d34:	193c      	adds	r4, r7, r4
 8000d36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x10a>
 8000d3c:	45a0      	cmp	r8, r4
 8000d3e:	f200 80d9 	bhi.w	8000ef4 <__udivmoddi4+0x2bc>
 8000d42:	4618      	mov	r0, r3
 8000d44:	eba4 0408 	sub.w	r4, r4, r8
 8000d48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d4c:	e7bf      	b.n	8000cce <__udivmoddi4+0x96>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d909      	bls.n	8000d66 <__udivmoddi4+0x12e>
 8000d52:	2d00      	cmp	r5, #0
 8000d54:	f000 80b1 	beq.w	8000eba <__udivmoddi4+0x282>
 8000d58:	2600      	movs	r6, #0
 8000d5a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d5e:	4630      	mov	r0, r6
 8000d60:	4631      	mov	r1, r6
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	fab3 f683 	clz	r6, r3
 8000d6a:	2e00      	cmp	r6, #0
 8000d6c:	d14a      	bne.n	8000e04 <__udivmoddi4+0x1cc>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d302      	bcc.n	8000d78 <__udivmoddi4+0x140>
 8000d72:	4282      	cmp	r2, r0
 8000d74:	f200 80b8 	bhi.w	8000ee8 <__udivmoddi4+0x2b0>
 8000d78:	1a84      	subs	r4, r0, r2
 8000d7a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d7e:	2001      	movs	r0, #1
 8000d80:	468c      	mov	ip, r1
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	d0a8      	beq.n	8000cd8 <__udivmoddi4+0xa0>
 8000d86:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d8a:	e7a5      	b.n	8000cd8 <__udivmoddi4+0xa0>
 8000d8c:	f1c2 0320 	rsb	r3, r2, #32
 8000d90:	fa20 f603 	lsr.w	r6, r0, r3
 8000d94:	4097      	lsls	r7, r2
 8000d96:	fa01 f002 	lsl.w	r0, r1, r2
 8000d9a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d9e:	40d9      	lsrs	r1, r3
 8000da0:	4330      	orrs	r0, r6
 8000da2:	0c03      	lsrs	r3, r0, #16
 8000da4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000da8:	fa1f f887 	uxth.w	r8, r7
 8000dac:	fb0e 1116 	mls	r1, lr, r6, r1
 8000db0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db4:	fb06 f108 	mul.w	r1, r6, r8
 8000db8:	4299      	cmp	r1, r3
 8000dba:	fa04 f402 	lsl.w	r4, r4, r2
 8000dbe:	d909      	bls.n	8000dd4 <__udivmoddi4+0x19c>
 8000dc0:	18fb      	adds	r3, r7, r3
 8000dc2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000dc6:	f080 808d 	bcs.w	8000ee4 <__udivmoddi4+0x2ac>
 8000dca:	4299      	cmp	r1, r3
 8000dcc:	f240 808a 	bls.w	8000ee4 <__udivmoddi4+0x2ac>
 8000dd0:	3e02      	subs	r6, #2
 8000dd2:	443b      	add	r3, r7
 8000dd4:	1a5b      	subs	r3, r3, r1
 8000dd6:	b281      	uxth	r1, r0
 8000dd8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ddc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000de0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de4:	fb00 f308 	mul.w	r3, r0, r8
 8000de8:	428b      	cmp	r3, r1
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x1c4>
 8000dec:	1879      	adds	r1, r7, r1
 8000dee:	f100 3cff 	add.w	ip, r0, #4294967295
 8000df2:	d273      	bcs.n	8000edc <__udivmoddi4+0x2a4>
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d971      	bls.n	8000edc <__udivmoddi4+0x2a4>
 8000df8:	3802      	subs	r0, #2
 8000dfa:	4439      	add	r1, r7
 8000dfc:	1acb      	subs	r3, r1, r3
 8000dfe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e02:	e778      	b.n	8000cf6 <__udivmoddi4+0xbe>
 8000e04:	f1c6 0c20 	rsb	ip, r6, #32
 8000e08:	fa03 f406 	lsl.w	r4, r3, r6
 8000e0c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e10:	431c      	orrs	r4, r3
 8000e12:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e16:	fa01 f306 	lsl.w	r3, r1, r6
 8000e1a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e1e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e22:	431f      	orrs	r7, r3
 8000e24:	0c3b      	lsrs	r3, r7, #16
 8000e26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e2a:	fa1f f884 	uxth.w	r8, r4
 8000e2e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e32:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e36:	fb09 fa08 	mul.w	sl, r9, r8
 8000e3a:	458a      	cmp	sl, r1
 8000e3c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e40:	fa00 f306 	lsl.w	r3, r0, r6
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x220>
 8000e46:	1861      	adds	r1, r4, r1
 8000e48:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e4c:	d248      	bcs.n	8000ee0 <__udivmoddi4+0x2a8>
 8000e4e:	458a      	cmp	sl, r1
 8000e50:	d946      	bls.n	8000ee0 <__udivmoddi4+0x2a8>
 8000e52:	f1a9 0902 	sub.w	r9, r9, #2
 8000e56:	4421      	add	r1, r4
 8000e58:	eba1 010a 	sub.w	r1, r1, sl
 8000e5c:	b2bf      	uxth	r7, r7
 8000e5e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e62:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e66:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e6a:	fb00 f808 	mul.w	r8, r0, r8
 8000e6e:	45b8      	cmp	r8, r7
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x24a>
 8000e72:	19e7      	adds	r7, r4, r7
 8000e74:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e78:	d22e      	bcs.n	8000ed8 <__udivmoddi4+0x2a0>
 8000e7a:	45b8      	cmp	r8, r7
 8000e7c:	d92c      	bls.n	8000ed8 <__udivmoddi4+0x2a0>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	4427      	add	r7, r4
 8000e82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e86:	eba7 0708 	sub.w	r7, r7, r8
 8000e8a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e8e:	454f      	cmp	r7, r9
 8000e90:	46c6      	mov	lr, r8
 8000e92:	4649      	mov	r1, r9
 8000e94:	d31a      	bcc.n	8000ecc <__udivmoddi4+0x294>
 8000e96:	d017      	beq.n	8000ec8 <__udivmoddi4+0x290>
 8000e98:	b15d      	cbz	r5, 8000eb2 <__udivmoddi4+0x27a>
 8000e9a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e9e:	eb67 0701 	sbc.w	r7, r7, r1
 8000ea2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ea6:	40f2      	lsrs	r2, r6
 8000ea8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eac:	40f7      	lsrs	r7, r6
 8000eae:	e9c5 2700 	strd	r2, r7, [r5]
 8000eb2:	2600      	movs	r6, #0
 8000eb4:	4631      	mov	r1, r6
 8000eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e70b      	b.n	8000cd8 <__udivmoddi4+0xa0>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e9      	b.n	8000c98 <__udivmoddi4+0x60>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6fd      	b.n	8000cc4 <__udivmoddi4+0x8c>
 8000ec8:	4543      	cmp	r3, r8
 8000eca:	d2e5      	bcs.n	8000e98 <__udivmoddi4+0x260>
 8000ecc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ed0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7df      	b.n	8000e98 <__udivmoddi4+0x260>
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e7d2      	b.n	8000e82 <__udivmoddi4+0x24a>
 8000edc:	4660      	mov	r0, ip
 8000ede:	e78d      	b.n	8000dfc <__udivmoddi4+0x1c4>
 8000ee0:	4681      	mov	r9, r0
 8000ee2:	e7b9      	b.n	8000e58 <__udivmoddi4+0x220>
 8000ee4:	4666      	mov	r6, ip
 8000ee6:	e775      	b.n	8000dd4 <__udivmoddi4+0x19c>
 8000ee8:	4630      	mov	r0, r6
 8000eea:	e74a      	b.n	8000d82 <__udivmoddi4+0x14a>
 8000eec:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef0:	4439      	add	r1, r7
 8000ef2:	e713      	b.n	8000d1c <__udivmoddi4+0xe4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	443c      	add	r4, r7
 8000ef8:	e724      	b.n	8000d44 <__udivmoddi4+0x10c>
 8000efa:	bf00      	nop

08000efc <__aeabi_idiv0>:
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop

08000f00 <Ctrl_Init_SetTimer>:
/*	@brief	Initialization of the motor control configuration structure with timer settings
 *	@param	Motor is a Ctrl_Struct structure
 *	@param 	htim is the TIM handle
 *	@retval 0
 */
uint8_t Ctrl_Init_SetTimer(Ctrl_Struct* Control, TIM_HandleTypeDef *htim){
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
	Control->Timer = htim;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	683a      	ldr	r2, [r7, #0]
 8000f0e:	601a      	str	r2, [r3, #0]

	HAL_TIM_Base_Start_IT(Control->Timer);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f002 fd5b 	bl	80039d0 <HAL_TIM_Base_Start_IT>
	return 0;
 8000f1a:	2300      	movs	r3, #0
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <Ctrl_SpeedControl>:

/*	@brief	Speed control function called with a 50Hz frequency
 *	@param	None
 *	@retval 0
 */
float Ctrl_SpeedControl(){
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
	// Nombre de ticks du compteur depuis le dernier appel
	int16_t ticks = Enc_GetCnt(&CodeurGauche);
 8000f2a:	4812      	ldr	r0, [pc, #72]	; (8000f74 <Ctrl_SpeedControl+0x50>)
 8000f2c:	f000 f849 	bl	8000fc2 <Enc_GetCnt>
 8000f30:	4603      	mov	r3, r0
 8000f32:	80fb      	strh	r3, [r7, #6]
	//if(ticks >= 0) distance = (float)ticks * (float)DISTANCE_PER_TICK;
	//else distance = (-1) * (float)ticks * (float)DISTANCE_PER_TICK;
	//printf("%f\r\n",distance);

	// Calcul de la vitesse
	float speed = (ticks / (float)ENCODER_PPR) * 50;
 8000f34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f38:	ee07 3a90 	vmov	s15, r3
 8000f3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f40:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8000f78 <Ctrl_SpeedControl+0x54>
 8000f44:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f48:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000f7c <Ctrl_SpeedControl+0x58>
 8000f4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f50:	edc7 7a00 	vstr	s15, [r7]
	//printf("%f\r\n",(float)SPEED_CONTROL_PERIOD);
	printf("%f tr/s\r\n",speed);
 8000f54:	6838      	ldr	r0, [r7, #0]
 8000f56:	f7ff fb27 	bl	80005a8 <__aeabi_f2d>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	4808      	ldr	r0, [pc, #32]	; (8000f80 <Ctrl_SpeedControl+0x5c>)
 8000f60:	f005 fb0c 	bl	800657c <iprintf>

	return speed;
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	ee07 3a90 	vmov	s15, r3
}
 8000f6a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000244 	.word	0x20000244
 8000f78:	44870000 	.word	0x44870000
 8000f7c:	42480000 	.word	0x42480000
 8000f80:	08008780 	.word	0x08008780

08000f84 <Enc_Init_SetTimer>:
 *	@param 	htim is the TIM handle
 *  @param  Channel_A is the TIM Channels
 *  @param  Channel_B is the TIM Channels
 *	@retval 0
 */
uint8_t Enc_Init_SetTimer(Enc_Struct* Encoder, TIM_HandleTypeDef *htim, uint32_t Channel_A, uint32_t Channel_B){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
 8000f90:	603b      	str	r3, [r7, #0]
	Encoder->Timer = htim;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	68ba      	ldr	r2, [r7, #8]
 8000f96:	601a      	str	r2, [r3, #0]
	Encoder->Timer_Channel_A = Channel_A;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	605a      	str	r2, [r3, #4]
	Encoder->Timer_Channel_B = Channel_B;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	683a      	ldr	r2, [r7, #0]
 8000fa2:	609a      	str	r2, [r3, #8]

	HAL_TIM_Encoder_Start(Encoder->Timer, Encoder->Timer_Channel_A & Encoder->Timer_Channel_B);
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	6818      	ldr	r0, [r3, #0]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	685a      	ldr	r2, [r3, #4]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	f002 ff44 	bl	8003e40 <HAL_TIM_Encoder_Start>
	return 0;
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <Enc_GetCnt>:

/*	@brief	Get the counter value of the timer
 *	@param	Encoder is a Enc_Struct structure
 *	@retval CNT value of the timer
 */
int16_t Enc_GetCnt(Enc_Struct* Encoder){
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b084      	sub	sp, #16
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
	//uint16_t ticks = __HAL_TIM_GET_COUNTER(Encoder->Timer);
	int16_t ticks = Encoder->Timer->Instance->CNT;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd2:	81fb      	strh	r3, [r7, #14]
	Enc_ResetCnt(Encoder);
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f000 f806 	bl	8000fe6 <Enc_ResetCnt>

	return ticks;
 8000fda:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <Enc_ResetCnt>:

/*	@brief	Reset the counter value of the timer
 *	@param	Encoder is a Enc_Struct structure
 *	@retval 0
 */
uint8_t Enc_ResetCnt(Enc_Struct* Encoder){
 8000fe6:	b480      	push	{r7}
 8000fe8:	b083      	sub	sp, #12
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
	Encoder->Timer->Instance->CNT = 0;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	625a      	str	r2, [r3, #36]	; 0x24

	return 0;
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr

08001006 <Mot_Init_SetTimer>:
 *	@param	Motor is a Mot_Struct structure
 *	@param 	htim is the TIM handle
 *  @param  Channel is the TIM Channels
 *	@retval 0
 */
uint8_t Mot_Init_SetTimer(Mot_Struct* Motor, TIM_HandleTypeDef *htim, uint32_t Channel){
 8001006:	b580      	push	{r7, lr}
 8001008:	b084      	sub	sp, #16
 800100a:	af00      	add	r7, sp, #0
 800100c:	60f8      	str	r0, [r7, #12]
 800100e:	60b9      	str	r1, [r7, #8]
 8001010:	607a      	str	r2, [r7, #4]
	Motor->Timer_Handle = htim;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	68ba      	ldr	r2, [r7, #8]
 8001016:	601a      	str	r2, [r3, #0]
	Motor->Timer_Channel = Channel;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	605a      	str	r2, [r3, #4]

	HAL_TIM_PWM_Start(Motor->Timer_Handle, Motor->Timer_Channel);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	4619      	mov	r1, r3
 8001028:	4610      	mov	r0, r2
 800102a:	f002 fd9b 	bl	8003b64 <HAL_TIM_PWM_Start>
	return 0;
 800102e:	2300      	movs	r3, #0
}
 8001030:	4618      	mov	r0, r3
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <Mot_Init_SetGPIOs>:
 *	@param 	IN2_GPIOx is a GPIOx where x can be (A..K) to select the GPIO peripheral for STM32
 *  @param  IN2_GPIO_Pin specifies the port bit
 *	@retval 0
 */
uint8_t Mot_Init_SetGPIOs(Mot_Struct* Motor, GPIO_TypeDef* IN1_GPIOx, uint16_t IN1_GPIO_Pin,
		GPIO_TypeDef* IN2_GPIOx, uint16_t IN2_GPIO_Pin){
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	603b      	str	r3, [r7, #0]
 8001044:	4613      	mov	r3, r2
 8001046:	80fb      	strh	r3, [r7, #6]
	Motor->IN1_GPIOx = IN1_GPIOx;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	68ba      	ldr	r2, [r7, #8]
 800104c:	609a      	str	r2, [r3, #8]
	Motor->IN1_GPIO_Pin = IN1_GPIO_Pin;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	88fa      	ldrh	r2, [r7, #6]
 8001052:	819a      	strh	r2, [r3, #12]
	Motor->IN2_GPIOx = IN2_GPIOx;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	683a      	ldr	r2, [r7, #0]
 8001058:	611a      	str	r2, [r3, #16]
	Motor->IN2_GPIO_Pin = IN2_GPIO_Pin;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	8b3a      	ldrh	r2, [r7, #24]
 800105e:	829a      	strh	r2, [r3, #20]
	return 0;
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	3714      	adds	r7, #20
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr

0800106e <Mot_SetDirection>:
 *		@arg 	MOTOR_FORWARD
 *		@arg 	MOTOR_REVERSE
 *	@retval 0
 */

uint8_t Mot_SetDirection(Mot_Struct* Motor, uint8_t direction){
 800106e:	b580      	push	{r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
 8001076:	460b      	mov	r3, r1
 8001078:	70fb      	strb	r3, [r7, #3]
	switch(direction){
 800107a:	78fb      	ldrb	r3, [r7, #3]
 800107c:	2b02      	cmp	r3, #2
 800107e:	d028      	beq.n	80010d2 <Mot_SetDirection+0x64>
 8001080:	2b02      	cmp	r3, #2
 8001082:	dc37      	bgt.n	80010f4 <Mot_SetDirection+0x86>
 8001084:	2b00      	cmp	r3, #0
 8001086:	d002      	beq.n	800108e <Mot_SetDirection+0x20>
 8001088:	2b01      	cmp	r3, #1
 800108a:	d011      	beq.n	80010b0 <Mot_SetDirection+0x42>
 800108c:	e032      	b.n	80010f4 <Mot_SetDirection+0x86>

	case MOTOR_STOP:
		HAL_GPIO_WritePin(Motor->IN1_GPIOx, Motor->IN1_GPIO_Pin, GPIO_PIN_RESET);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6898      	ldr	r0, [r3, #8]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	899b      	ldrh	r3, [r3, #12]
 8001096:	2200      	movs	r2, #0
 8001098:	4619      	mov	r1, r3
 800109a:	f001 fec5 	bl	8002e28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor->IN2_GPIOx, Motor->IN2_GPIO_Pin, GPIO_PIN_RESET);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6918      	ldr	r0, [r3, #16]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	8a9b      	ldrh	r3, [r3, #20]
 80010a6:	2200      	movs	r2, #0
 80010a8:	4619      	mov	r1, r3
 80010aa:	f001 febd 	bl	8002e28 <HAL_GPIO_WritePin>
		break;
 80010ae:	e031      	b.n	8001114 <Mot_SetDirection+0xa6>

	case MOTOR_FORWARD:
		HAL_GPIO_WritePin(Motor->IN1_GPIOx, Motor->IN1_GPIO_Pin, GPIO_PIN_SET);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6898      	ldr	r0, [r3, #8]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	899b      	ldrh	r3, [r3, #12]
 80010b8:	2201      	movs	r2, #1
 80010ba:	4619      	mov	r1, r3
 80010bc:	f001 feb4 	bl	8002e28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor->IN2_GPIOx, Motor->IN2_GPIO_Pin, GPIO_PIN_RESET);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6918      	ldr	r0, [r3, #16]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	8a9b      	ldrh	r3, [r3, #20]
 80010c8:	2200      	movs	r2, #0
 80010ca:	4619      	mov	r1, r3
 80010cc:	f001 feac 	bl	8002e28 <HAL_GPIO_WritePin>
		break;
 80010d0:	e020      	b.n	8001114 <Mot_SetDirection+0xa6>

	case MOTOR_REVERSE:
		HAL_GPIO_WritePin(Motor->IN1_GPIOx, Motor->IN1_GPIO_Pin, GPIO_PIN_RESET);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6898      	ldr	r0, [r3, #8]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	899b      	ldrh	r3, [r3, #12]
 80010da:	2200      	movs	r2, #0
 80010dc:	4619      	mov	r1, r3
 80010de:	f001 fea3 	bl	8002e28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor->IN2_GPIOx, Motor->IN2_GPIO_Pin, GPIO_PIN_SET);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6918      	ldr	r0, [r3, #16]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	8a9b      	ldrh	r3, [r3, #20]
 80010ea:	2201      	movs	r2, #1
 80010ec:	4619      	mov	r1, r3
 80010ee:	f001 fe9b 	bl	8002e28 <HAL_GPIO_WritePin>
		break;
 80010f2:	e00f      	b.n	8001114 <Mot_SetDirection+0xa6>

	default:
		HAL_GPIO_WritePin(Motor->IN1_GPIOx, Motor->IN1_GPIO_Pin, GPIO_PIN_RESET);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6898      	ldr	r0, [r3, #8]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	899b      	ldrh	r3, [r3, #12]
 80010fc:	2200      	movs	r2, #0
 80010fe:	4619      	mov	r1, r3
 8001100:	f001 fe92 	bl	8002e28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor->IN2_GPIOx, Motor->IN2_GPIO_Pin, GPIO_PIN_RESET);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6918      	ldr	r0, [r3, #16]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	8a9b      	ldrh	r3, [r3, #20]
 800110c:	2200      	movs	r2, #0
 800110e:	4619      	mov	r1, r3
 8001110:	f001 fe8a 	bl	8002e28 <HAL_GPIO_WritePin>
	}

	return 0;
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <Mot_SetDutyCycle>:
/*	@brief	Set the PWM Duty Cycle
 *	@param	Motor is a Mot_Struct structure
 *	@param	duty_cycle is value between 0 and 100
 *	@retval 0
 */
uint8_t Mot_SetDutyCycle(Mot_Struct* Motor, float duty_cycle){
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	ed87 0a00 	vstr	s0, [r7]
	if(duty_cycle > 100) duty_cycle = 100;
 800112c:	edd7 7a00 	vldr	s15, [r7]
 8001130:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80011d8 <Mot_SetDutyCycle+0xb8>
 8001134:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800113c:	dd01      	ble.n	8001142 <Mot_SetDutyCycle+0x22>
 800113e:	4b27      	ldr	r3, [pc, #156]	; (80011dc <Mot_SetDutyCycle+0xbc>)
 8001140:	603b      	str	r3, [r7, #0]

	float pulse = (duty_cycle / 100) * (float)COUNTER_PERIOD;
 8001142:	ed97 7a00 	vldr	s14, [r7]
 8001146:	eddf 6a24 	vldr	s13, [pc, #144]	; 80011d8 <Mot_SetDutyCycle+0xb8>
 800114a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800114e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80011e0 <Mot_SetDutyCycle+0xc0>
 8001152:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001156:	edc7 7a03 	vstr	s15, [r7, #12]

	__HAL_TIM_SET_COMPARE(Motor->Timer_Handle, Motor->Timer_Channel, (uint32_t)pulse);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d10a      	bne.n	8001178 <Mot_SetDutyCycle+0x58>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	edd7 7a03 	vldr	s15, [r7, #12]
 800116c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001170:	ee17 2a90 	vmov	r2, s15
 8001174:	635a      	str	r2, [r3, #52]	; 0x34
 8001176:	e027      	b.n	80011c8 <Mot_SetDutyCycle+0xa8>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	2b04      	cmp	r3, #4
 800117e:	d10a      	bne.n	8001196 <Mot_SetDutyCycle+0x76>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	edd7 7a03 	vldr	s15, [r7, #12]
 800118a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800118e:	ee17 3a90 	vmov	r3, s15
 8001192:	6393      	str	r3, [r2, #56]	; 0x38
 8001194:	e018      	b.n	80011c8 <Mot_SetDutyCycle+0xa8>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	2b08      	cmp	r3, #8
 800119c:	d10a      	bne.n	80011b4 <Mot_SetDutyCycle+0x94>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80011a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011ac:	ee17 3a90 	vmov	r3, s15
 80011b0:	63d3      	str	r3, [r2, #60]	; 0x3c
 80011b2:	e009      	b.n	80011c8 <Mot_SetDutyCycle+0xa8>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80011be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011c2:	ee17 3a90 	vmov	r3, s15
 80011c6:	6413      	str	r3, [r2, #64]	; 0x40
	return 0;
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3714      	adds	r7, #20
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	42c80000 	.word	0x42c80000
 80011dc:	42c80000 	.word	0x42c80000
 80011e0:	45520000 	.word	0x45520000

080011e4 <Shell_CharReceived>:
	HAL_UART_Receive_IT(Shell->huart, (uint8_t*)&charReceived, 1);
	HAL_UART_Transmit(Shell->huart, (uint8_t*)shellPrompt, sizeof(shellPrompt), HAL_MAX_DELAY);
	return 0;
}

uint8_t Shell_CharReceived(Shell_Struct* Shell, char charReceived){
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	460b      	mov	r3, r1
 80011ee:	70fb      	strb	r3, [r7, #3]
	if(charReceived !='\r' && indexSh<32){
 80011f0:	78fb      	ldrb	r3, [r7, #3]
 80011f2:	2b0d      	cmp	r3, #13
 80011f4:	d018      	beq.n	8001228 <Shell_CharReceived+0x44>
 80011f6:	4b19      	ldr	r3, [pc, #100]	; (800125c <Shell_CharReceived+0x78>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	2b1f      	cmp	r3, #31
 80011fc:	d814      	bhi.n	8001228 <Shell_CharReceived+0x44>
		HAL_UART_Transmit(Shell->huart, (uint8_t*)&charReceived, 1, HAL_MAX_DELAY);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6818      	ldr	r0, [r3, #0]
 8001202:	1cf9      	adds	r1, r7, #3
 8001204:	f04f 33ff 	mov.w	r3, #4294967295
 8001208:	2201      	movs	r2, #1
 800120a:	f003 fda0 	bl	8004d4e <HAL_UART_Transmit>
		charArray[indexSh] = charReceived;
 800120e:	4b13      	ldr	r3, [pc, #76]	; (800125c <Shell_CharReceived+0x78>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	461a      	mov	r2, r3
 8001214:	78f9      	ldrb	r1, [r7, #3]
 8001216:	4b12      	ldr	r3, [pc, #72]	; (8001260 <Shell_CharReceived+0x7c>)
 8001218:	5499      	strb	r1, [r3, r2]
		indexSh++;
 800121a:	4b10      	ldr	r3, [pc, #64]	; (800125c <Shell_CharReceived+0x78>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	3301      	adds	r3, #1
 8001220:	b2da      	uxtb	r2, r3
 8001222:	4b0e      	ldr	r3, [pc, #56]	; (800125c <Shell_CharReceived+0x78>)
 8001224:	701a      	strb	r2, [r3, #0]
 8001226:	e013      	b.n	8001250 <Shell_CharReceived+0x6c>
	}
	else{
		Shell_Request(Shell, charArray);
 8001228:	490d      	ldr	r1, [pc, #52]	; (8001260 <Shell_CharReceived+0x7c>)
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f000 f81c 	bl	8001268 <Shell_Request>
		memset(charArray, 0, sizeof (charArray));
 8001230:	2220      	movs	r2, #32
 8001232:	2100      	movs	r1, #0
 8001234:	480a      	ldr	r0, [pc, #40]	; (8001260 <Shell_CharReceived+0x7c>)
 8001236:	f004 fd2f 	bl	8005c98 <memset>
		indexSh=0;
 800123a:	4b08      	ldr	r3, [pc, #32]	; (800125c <Shell_CharReceived+0x78>)
 800123c:	2200      	movs	r2, #0
 800123e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(Shell->huart, (uint8_t*)shellPrompt, sizeof(shellPrompt), HAL_MAX_DELAY);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6818      	ldr	r0, [r3, #0]
 8001244:	f04f 33ff 	mov.w	r3, #4294967295
 8001248:	220e      	movs	r2, #14
 800124a:	4906      	ldr	r1, [pc, #24]	; (8001264 <Shell_CharReceived+0x80>)
 800124c:	f003 fd7f 	bl	8004d4e <HAL_UART_Transmit>
	}

	return 0;
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20000228 	.word	0x20000228
 8001260:	20000208 	.word	0x20000208
 8001264:	080087c4 	.word	0x080087c4

08001268 <Shell_Request>:

uint8_t Shell_Request(Shell_Struct* Shell, char* cmd){
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]

	uint8_t cmdSelected = -1;
 8001272:	23ff      	movs	r3, #255	; 0xff
 8001274:	73fb      	strb	r3, [r7, #15]
    for (uint8_t j = 0; ShellCmd[j]; j++){
 8001276:	2300      	movs	r3, #0
 8001278:	73bb      	strb	r3, [r7, #14]
 800127a:	e00f      	b.n	800129c <Shell_Request+0x34>
    	if(!strcmp(cmd, ShellCmd[j])) cmdSelected = j;
 800127c:	7bbb      	ldrb	r3, [r7, #14]
 800127e:	4a13      	ldr	r2, [pc, #76]	; (80012cc <Shell_Request+0x64>)
 8001280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001284:	4619      	mov	r1, r3
 8001286:	6838      	ldr	r0, [r7, #0]
 8001288:	f7fe ffc2 	bl	8000210 <strcmp>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d101      	bne.n	8001296 <Shell_Request+0x2e>
 8001292:	7bbb      	ldrb	r3, [r7, #14]
 8001294:	73fb      	strb	r3, [r7, #15]
    for (uint8_t j = 0; ShellCmd[j]; j++){
 8001296:	7bbb      	ldrb	r3, [r7, #14]
 8001298:	3301      	adds	r3, #1
 800129a:	73bb      	strb	r3, [r7, #14]
 800129c:	7bbb      	ldrb	r3, [r7, #14]
 800129e:	4a0b      	ldr	r2, [pc, #44]	; (80012cc <Shell_Request+0x64>)
 80012a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d1e9      	bne.n	800127c <Shell_Request+0x14>
    }

    switch(cmdSelected){
 80012a8:	7bfb      	ldrb	r3, [r7, #15]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d108      	bne.n	80012c0 <Shell_Request+0x58>
    	case 0:
    		HAL_UART_Transmit(Shell->huart, (uint8_t*)"\r\nT=+12.50_C", 13, HAL_MAX_DELAY);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6818      	ldr	r0, [r3, #0]
 80012b2:	f04f 33ff 	mov.w	r3, #4294967295
 80012b6:	220d      	movs	r2, #13
 80012b8:	4905      	ldr	r1, [pc, #20]	; (80012d0 <Shell_Request+0x68>)
 80012ba:	f003 fd48 	bl	8004d4e <HAL_UART_Transmit>
    		break;
 80012be:	e000      	b.n	80012c2 <Shell_Request+0x5a>
    	default:
    		break;
 80012c0:	bf00      	nop
    }

	return 0;
 80012c2:	2300      	movs	r3, #0
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000000 	.word	0x20000000
 80012d0:	0800879c 	.word	0x0800879c

080012d4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012da:	463b      	mov	r3, r7
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80012e6:	4b21      	ldr	r3, [pc, #132]	; (800136c <MX_ADC1_Init+0x98>)
 80012e8:	4a21      	ldr	r2, [pc, #132]	; (8001370 <MX_ADC1_Init+0x9c>)
 80012ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012ec:	4b1f      	ldr	r3, [pc, #124]	; (800136c <MX_ADC1_Init+0x98>)
 80012ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80012f2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012f4:	4b1d      	ldr	r3, [pc, #116]	; (800136c <MX_ADC1_Init+0x98>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80012fa:	4b1c      	ldr	r3, [pc, #112]	; (800136c <MX_ADC1_Init+0x98>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001300:	4b1a      	ldr	r3, [pc, #104]	; (800136c <MX_ADC1_Init+0x98>)
 8001302:	2201      	movs	r2, #1
 8001304:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001306:	4b19      	ldr	r3, [pc, #100]	; (800136c <MX_ADC1_Init+0x98>)
 8001308:	2200      	movs	r2, #0
 800130a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800130e:	4b17      	ldr	r3, [pc, #92]	; (800136c <MX_ADC1_Init+0x98>)
 8001310:	2200      	movs	r2, #0
 8001312:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001314:	4b15      	ldr	r3, [pc, #84]	; (800136c <MX_ADC1_Init+0x98>)
 8001316:	4a17      	ldr	r2, [pc, #92]	; (8001374 <MX_ADC1_Init+0xa0>)
 8001318:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800131a:	4b14      	ldr	r3, [pc, #80]	; (800136c <MX_ADC1_Init+0x98>)
 800131c:	2200      	movs	r2, #0
 800131e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001320:	4b12      	ldr	r3, [pc, #72]	; (800136c <MX_ADC1_Init+0x98>)
 8001322:	2201      	movs	r2, #1
 8001324:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001326:	4b11      	ldr	r3, [pc, #68]	; (800136c <MX_ADC1_Init+0x98>)
 8001328:	2200      	movs	r2, #0
 800132a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800132e:	4b0f      	ldr	r3, [pc, #60]	; (800136c <MX_ADC1_Init+0x98>)
 8001330:	2200      	movs	r2, #0
 8001332:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001334:	480d      	ldr	r0, [pc, #52]	; (800136c <MX_ADC1_Init+0x98>)
 8001336:	f000 fe6f 	bl	8002018 <HAL_ADC_Init>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001340:	f000 f9e8 	bl	8001714 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001344:	2308      	movs	r3, #8
 8001346:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001348:	2301      	movs	r3, #1
 800134a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800134c:	2300      	movs	r3, #0
 800134e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001350:	463b      	mov	r3, r7
 8001352:	4619      	mov	r1, r3
 8001354:	4805      	ldr	r0, [pc, #20]	; (800136c <MX_ADC1_Init+0x98>)
 8001356:	f000 fff7 	bl	8002348 <HAL_ADC_ConfigChannel>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001360:	f000 f9d8 	bl	8001714 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001364:	bf00      	nop
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20000250 	.word	0x20000250
 8001370:	40012000 	.word	0x40012000
 8001374:	0f000001 	.word	0x0f000001

08001378 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08a      	sub	sp, #40	; 0x28
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a1b      	ldr	r2, [pc, #108]	; (8001404 <HAL_ADC_MspInit+0x8c>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d12f      	bne.n	80013fa <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	613b      	str	r3, [r7, #16]
 800139e:	4b1a      	ldr	r3, [pc, #104]	; (8001408 <HAL_ADC_MspInit+0x90>)
 80013a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a2:	4a19      	ldr	r2, [pc, #100]	; (8001408 <HAL_ADC_MspInit+0x90>)
 80013a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013a8:	6453      	str	r3, [r2, #68]	; 0x44
 80013aa:	4b17      	ldr	r3, [pc, #92]	; (8001408 <HAL_ADC_MspInit+0x90>)
 80013ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b2:	613b      	str	r3, [r7, #16]
 80013b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	4b13      	ldr	r3, [pc, #76]	; (8001408 <HAL_ADC_MspInit+0x90>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	4a12      	ldr	r2, [pc, #72]	; (8001408 <HAL_ADC_MspInit+0x90>)
 80013c0:	f043 0302 	orr.w	r3, r3, #2
 80013c4:	6313      	str	r3, [r2, #48]	; 0x30
 80013c6:	4b10      	ldr	r3, [pc, #64]	; (8001408 <HAL_ADC_MspInit+0x90>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013d2:	2301      	movs	r3, #1
 80013d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013d6:	2303      	movs	r3, #3
 80013d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013de:	f107 0314 	add.w	r3, r7, #20
 80013e2:	4619      	mov	r1, r3
 80013e4:	4809      	ldr	r0, [pc, #36]	; (800140c <HAL_ADC_MspInit+0x94>)
 80013e6:	f001 fb8b 	bl	8002b00 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2100      	movs	r1, #0
 80013ee:	2012      	movs	r0, #18
 80013f0:	f001 fabd 	bl	800296e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80013f4:	2012      	movs	r0, #18
 80013f6:	f001 fad6 	bl	80029a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80013fa:	bf00      	nop
 80013fc:	3728      	adds	r7, #40	; 0x28
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40012000 	.word	0x40012000
 8001408:	40023800 	.word	0x40023800
 800140c:	40020400 	.word	0x40020400

08001410 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08a      	sub	sp, #40	; 0x28
 8001414:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001416:	f107 0314 	add.w	r3, r7, #20
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	609a      	str	r2, [r3, #8]
 8001422:	60da      	str	r2, [r3, #12]
 8001424:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	613b      	str	r3, [r7, #16]
 800142a:	4b37      	ldr	r3, [pc, #220]	; (8001508 <MX_GPIO_Init+0xf8>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	4a36      	ldr	r2, [pc, #216]	; (8001508 <MX_GPIO_Init+0xf8>)
 8001430:	f043 0304 	orr.w	r3, r3, #4
 8001434:	6313      	str	r3, [r2, #48]	; 0x30
 8001436:	4b34      	ldr	r3, [pc, #208]	; (8001508 <MX_GPIO_Init+0xf8>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	f003 0304 	and.w	r3, r3, #4
 800143e:	613b      	str	r3, [r7, #16]
 8001440:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	4b30      	ldr	r3, [pc, #192]	; (8001508 <MX_GPIO_Init+0xf8>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a2f      	ldr	r2, [pc, #188]	; (8001508 <MX_GPIO_Init+0xf8>)
 800144c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b2d      	ldr	r3, [pc, #180]	; (8001508 <MX_GPIO_Init+0xf8>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	60bb      	str	r3, [r7, #8]
 8001462:	4b29      	ldr	r3, [pc, #164]	; (8001508 <MX_GPIO_Init+0xf8>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a28      	ldr	r2, [pc, #160]	; (8001508 <MX_GPIO_Init+0xf8>)
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b26      	ldr	r3, [pc, #152]	; (8001508 <MX_GPIO_Init+0xf8>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	60bb      	str	r3, [r7, #8]
 8001478:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	607b      	str	r3, [r7, #4]
 800147e:	4b22      	ldr	r3, [pc, #136]	; (8001508 <MX_GPIO_Init+0xf8>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a21      	ldr	r2, [pc, #132]	; (8001508 <MX_GPIO_Init+0xf8>)
 8001484:	f043 0302 	orr.w	r3, r3, #2
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b1f      	ldr	r3, [pc, #124]	; (8001508 <MX_GPIO_Init+0xf8>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	607b      	str	r3, [r7, #4]
 8001494:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOT_IN1_Pin|MOT_IN2_Pin, GPIO_PIN_RESET);
 8001496:	2200      	movs	r2, #0
 8001498:	2103      	movs	r1, #3
 800149a:	481c      	ldr	r0, [pc, #112]	; (800150c <MX_GPIO_Init+0xfc>)
 800149c:	f001 fcc4 	bl	8002e28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80014a0:	2200      	movs	r2, #0
 80014a2:	2120      	movs	r1, #32
 80014a4:	481a      	ldr	r0, [pc, #104]	; (8001510 <MX_GPIO_Init+0x100>)
 80014a6:	f001 fcbf 	bl	8002e28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014b0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80014b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014ba:	f107 0314 	add.w	r3, r7, #20
 80014be:	4619      	mov	r1, r3
 80014c0:	4812      	ldr	r0, [pc, #72]	; (800150c <MX_GPIO_Init+0xfc>)
 80014c2:	f001 fb1d 	bl	8002b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MOT_IN1_Pin|MOT_IN2_Pin;
 80014c6:	2303      	movs	r3, #3
 80014c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ca:	2301      	movs	r3, #1
 80014cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d2:	2300      	movs	r3, #0
 80014d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014d6:	f107 0314 	add.w	r3, r7, #20
 80014da:	4619      	mov	r1, r3
 80014dc:	480b      	ldr	r0, [pc, #44]	; (800150c <MX_GPIO_Init+0xfc>)
 80014de:	f001 fb0f 	bl	8002b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80014e2:	2320      	movs	r3, #32
 80014e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e6:	2301      	movs	r3, #1
 80014e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ee:	2300      	movs	r3, #0
 80014f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014f2:	f107 0314 	add.w	r3, r7, #20
 80014f6:	4619      	mov	r1, r3
 80014f8:	4805      	ldr	r0, [pc, #20]	; (8001510 <MX_GPIO_Init+0x100>)
 80014fa:	f001 fb01 	bl	8002b00 <HAL_GPIO_Init>

}
 80014fe:	bf00      	nop
 8001500:	3728      	adds	r7, #40	; 0x28
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40023800 	.word	0x40023800
 800150c:	40020800 	.word	0x40020800
 8001510:	40020000 	.word	0x40020000

08001514 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08e      	sub	sp, #56	; 0x38
 8001518:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800151a:	f000 fce7 	bl	8001eec <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800151e:	f000 f84f 	bl	80015c0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001522:	f7ff ff75 	bl	8001410 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001526:	f000 fc3d 	bl	8001da4 <MX_USART2_UART_Init>
	MX_TIM1_Init();
 800152a:	f000 fa53 	bl	80019d4 <MX_TIM1_Init>
	MX_TIM2_Init();
 800152e:	f000 faf1 	bl	8001b14 <MX_TIM2_Init>
	MX_TIM6_Init();
 8001532:	f000 fb43 	bl	8001bbc <MX_TIM6_Init>
	MX_ADC1_Init();
 8001536:	f7ff fecd 	bl	80012d4 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	printf("\r\nese_motors_encoders\r\n");
 800153a:	481a      	ldr	r0, [pc, #104]	; (80015a4 <main+0x90>)
 800153c:	f005 f8a4 	bl	8006688 <puts>
	// Configuration de la réception UART avec interruption
	//Shell_Init(&Shell, &huart2);

	// Initialisation du Moteur A
	Mot_Struct MoteurA;
	Mot_Init_SetTimer(&MoteurA, &htim1, TIM_CHANNEL_1);
 8001540:	f107 0310 	add.w	r3, r7, #16
 8001544:	2200      	movs	r2, #0
 8001546:	4918      	ldr	r1, [pc, #96]	; (80015a8 <main+0x94>)
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff fd5c 	bl	8001006 <Mot_Init_SetTimer>
	Mot_Init_SetGPIOs(&MoteurA, GPIOC, GPIO_PIN_0, GPIOC, GPIO_PIN_1); // IN1:PC0 et IN2:PC1
 800154e:	f107 0010 	add.w	r0, r7, #16
 8001552:	2302      	movs	r3, #2
 8001554:	9300      	str	r3, [sp, #0]
 8001556:	4b15      	ldr	r3, [pc, #84]	; (80015ac <main+0x98>)
 8001558:	2201      	movs	r2, #1
 800155a:	4914      	ldr	r1, [pc, #80]	; (80015ac <main+0x98>)
 800155c:	f7ff fd6c 	bl	8001038 <Mot_Init_SetGPIOs>
	Mot_SetDirection(&MoteurA, MOTOR_REVERSE);
 8001560:	f107 0310 	add.w	r3, r7, #16
 8001564:	2102      	movs	r1, #2
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff fd81 	bl	800106e <Mot_SetDirection>
	Mot_SetDutyCycle(&MoteurA, 70);
 800156c:	f107 0310 	add.w	r3, r7, #16
 8001570:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 80015b0 <main+0x9c>
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff fdd3 	bl	8001120 <Mot_SetDutyCycle>
	//HAL_ADC_Start_IT(&hadc1);

	// Initialisation du Codeur A
	Enc_Init_SetTimer(&CodeurGauche, &htim2, TIM_CHANNEL_1, TIM_CHANNEL_2); // PhA:PA0 et PhB:PA1
 800157a:	2304      	movs	r3, #4
 800157c:	2200      	movs	r2, #0
 800157e:	490d      	ldr	r1, [pc, #52]	; (80015b4 <main+0xa0>)
 8001580:	480d      	ldr	r0, [pc, #52]	; (80015b8 <main+0xa4>)
 8001582:	f7ff fcff 	bl	8000f84 <Enc_Init_SetTimer>

	// Initialisation de l'asservissement
	Ctrl_Struct Control;
	Ctrl_Init_SetTimer(&Control, &htim6);
 8001586:	463b      	mov	r3, r7
 8001588:	490c      	ldr	r1, [pc, #48]	; (80015bc <main+0xa8>)
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff fcb8 	bl	8000f00 <Ctrl_Init_SetTimer>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		int i = Enc_GetCnt(&CodeurGauche);
 8001590:	4809      	ldr	r0, [pc, #36]	; (80015b8 <main+0xa4>)
 8001592:	f7ff fd16 	bl	8000fc2 <Enc_GetCnt>
 8001596:	4603      	mov	r3, r0
 8001598:	62fb      	str	r3, [r7, #44]	; 0x2c
		//printf("Ticks = %d\r\n",i);
		//printf("%d\r\n",i);
		//printf("%f\r\n",(float)DISTANCE_PER_TICK);

		HAL_Delay(1000);
 800159a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800159e:	f000 fd17 	bl	8001fd0 <HAL_Delay>
	{
 80015a2:	e7f5      	b.n	8001590 <main+0x7c>
 80015a4:	080087ac 	.word	0x080087ac
 80015a8:	200002e4 	.word	0x200002e4
 80015ac:	40020800 	.word	0x40020800
 80015b0:	428c0000 	.word	0x428c0000
 80015b4:	2000032c 	.word	0x2000032c
 80015b8:	20000244 	.word	0x20000244
 80015bc:	2000029c 	.word	0x2000029c

080015c0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b094      	sub	sp, #80	; 0x50
 80015c4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015c6:	f107 031c 	add.w	r3, r7, #28
 80015ca:	2234      	movs	r2, #52	; 0x34
 80015cc:	2100      	movs	r1, #0
 80015ce:	4618      	mov	r0, r3
 80015d0:	f004 fb62 	bl	8005c98 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015d4:	f107 0308 	add.w	r3, r7, #8
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80015e4:	2300      	movs	r3, #0
 80015e6:	607b      	str	r3, [r7, #4]
 80015e8:	4b2a      	ldr	r3, [pc, #168]	; (8001694 <SystemClock_Config+0xd4>)
 80015ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ec:	4a29      	ldr	r2, [pc, #164]	; (8001694 <SystemClock_Config+0xd4>)
 80015ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f2:	6413      	str	r3, [r2, #64]	; 0x40
 80015f4:	4b27      	ldr	r3, [pc, #156]	; (8001694 <SystemClock_Config+0xd4>)
 80015f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fc:	607b      	str	r3, [r7, #4]
 80015fe:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001600:	2300      	movs	r3, #0
 8001602:	603b      	str	r3, [r7, #0]
 8001604:	4b24      	ldr	r3, [pc, #144]	; (8001698 <SystemClock_Config+0xd8>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800160c:	4a22      	ldr	r2, [pc, #136]	; (8001698 <SystemClock_Config+0xd8>)
 800160e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001612:	6013      	str	r3, [r2, #0]
 8001614:	4b20      	ldr	r3, [pc, #128]	; (8001698 <SystemClock_Config+0xd8>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800161c:	603b      	str	r3, [r7, #0]
 800161e:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001620:	2302      	movs	r3, #2
 8001622:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001624:	2301      	movs	r3, #1
 8001626:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001628:	2310      	movs	r3, #16
 800162a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800162c:	2302      	movs	r3, #2
 800162e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001630:	2300      	movs	r3, #0
 8001632:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 8001634:	2310      	movs	r3, #16
 8001636:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001638:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800163c:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800163e:	2304      	movs	r3, #4
 8001640:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8001642:	2302      	movs	r3, #2
 8001644:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001646:	2302      	movs	r3, #2
 8001648:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800164a:	f107 031c 	add.w	r3, r7, #28
 800164e:	4618      	mov	r0, r3
 8001650:	f001 fed0 	bl	80033f4 <HAL_RCC_OscConfig>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <SystemClock_Config+0x9e>
	{
		Error_Handler();
 800165a:	f000 f85b 	bl	8001714 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800165e:	230f      	movs	r3, #15
 8001660:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001662:	2302      	movs	r3, #2
 8001664:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001666:	2300      	movs	r3, #0
 8001668:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800166a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800166e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001670:	2300      	movs	r3, #0
 8001672:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001674:	f107 0308 	add.w	r3, r7, #8
 8001678:	2102      	movs	r1, #2
 800167a:	4618      	mov	r0, r3
 800167c:	f001 fbee 	bl	8002e5c <HAL_RCC_ClockConfig>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <SystemClock_Config+0xca>
	{
		Error_Handler();
 8001686:	f000 f845 	bl	8001714 <Error_Handler>
	}
}
 800168a:	bf00      	nop
 800168c:	3750      	adds	r7, #80	; 0x50
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40023800 	.word	0x40023800
 8001698:	40007000 	.word	0x40007000

0800169c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart){
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a08      	ldr	r2, [pc, #32]	; (80016cc <HAL_UART_RxCpltCallback+0x30>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d10a      	bne.n	80016c4 <HAL_UART_RxCpltCallback+0x28>
		//HAL_UART_Transmit(&huart2, (uint8_t*)&charReceived, 1, HAL_MAX_DELAY);
		Shell_CharReceived(&Shell, charReceived);
 80016ae:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <HAL_UART_RxCpltCallback+0x34>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	4619      	mov	r1, r3
 80016b4:	4807      	ldr	r0, [pc, #28]	; (80016d4 <HAL_UART_RxCpltCallback+0x38>)
 80016b6:	f7ff fd95 	bl	80011e4 <Shell_CharReceived>
		HAL_UART_Receive_IT(&huart2, (uint8_t*)&charReceived, 1);
 80016ba:	2201      	movs	r2, #1
 80016bc:	4904      	ldr	r1, [pc, #16]	; (80016d0 <HAL_UART_RxCpltCallback+0x34>)
 80016be:	4806      	ldr	r0, [pc, #24]	; (80016d8 <HAL_UART_RxCpltCallback+0x3c>)
 80016c0:	f003 fbd7 	bl	8004e72 <HAL_UART_Receive_IT>
	}
}
 80016c4:	bf00      	nop
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40004400 	.word	0x40004400
 80016d0:	20000204 	.word	0x20000204
 80016d4:	20000298 	.word	0x20000298
 80016d8:	20000374 	.word	0x20000374

080016dc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a04      	ldr	r2, [pc, #16]	; (80016fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d101      	bne.n	80016f2 <HAL_TIM_PeriodElapsedCallback+0x16>
		Ctrl_SpeedControl();
 80016ee:	f7ff fc19 	bl	8000f24 <Ctrl_SpeedControl>
		//printf("speed = %f mm/s\r\n",speed);
	}
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40001000 	.word	0x40001000

08001700 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1){
		//uint32_t val = HAL_ADC_GetValue(&hadc1);
		//printf("val = %ld\r\n", val);
		//HAL_ADC_Start_IT(&hadc1);
	}
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001718:	b672      	cpsid	i
}
 800171a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800171c:	e7fe      	b.n	800171c <Error_Handler+0x8>
	...

08001720 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	607b      	str	r3, [r7, #4]
 800172a:	4b10      	ldr	r3, [pc, #64]	; (800176c <HAL_MspInit+0x4c>)
 800172c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172e:	4a0f      	ldr	r2, [pc, #60]	; (800176c <HAL_MspInit+0x4c>)
 8001730:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001734:	6453      	str	r3, [r2, #68]	; 0x44
 8001736:	4b0d      	ldr	r3, [pc, #52]	; (800176c <HAL_MspInit+0x4c>)
 8001738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800173e:	607b      	str	r3, [r7, #4]
 8001740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	603b      	str	r3, [r7, #0]
 8001746:	4b09      	ldr	r3, [pc, #36]	; (800176c <HAL_MspInit+0x4c>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	4a08      	ldr	r2, [pc, #32]	; (800176c <HAL_MspInit+0x4c>)
 800174c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001750:	6413      	str	r3, [r2, #64]	; 0x40
 8001752:	4b06      	ldr	r3, [pc, #24]	; (800176c <HAL_MspInit+0x4c>)
 8001754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800175a:	603b      	str	r3, [r7, #0]
 800175c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800175e:	2007      	movs	r0, #7
 8001760:	f001 f8fa 	bl	8002958 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001764:	bf00      	nop
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40023800 	.word	0x40023800

08001770 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001778:	1d39      	adds	r1, r7, #4
 800177a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800177e:	2201      	movs	r2, #1
 8001780:	4803      	ldr	r0, [pc, #12]	; (8001790 <__io_putchar+0x20>)
 8001782:	f003 fae4 	bl	8004d4e <HAL_UART_Transmit>

  return ch;
 8001786:	687b      	ldr	r3, [r7, #4]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	20000374 	.word	0x20000374

08001794 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001798:	e7fe      	b.n	8001798 <NMI_Handler+0x4>

0800179a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800179e:	e7fe      	b.n	800179e <HardFault_Handler+0x4>

080017a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a4:	e7fe      	b.n	80017a4 <MemManage_Handler+0x4>

080017a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017aa:	e7fe      	b.n	80017aa <BusFault_Handler+0x4>

080017ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b0:	e7fe      	b.n	80017b0 <UsageFault_Handler+0x4>

080017b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017b2:	b480      	push	{r7}
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017e0:	f000 fbd6 	bl	8001f90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017e4:	bf00      	nop
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80017ec:	4802      	ldr	r0, [pc, #8]	; (80017f8 <ADC_IRQHandler+0x10>)
 80017ee:	f000 fc56 	bl	800209e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000250 	.word	0x20000250

080017fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001800:	4802      	ldr	r0, [pc, #8]	; (800180c <USART2_IRQHandler+0x10>)
 8001802:	f003 fb67 	bl	8004ed4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000374 	.word	0x20000374

08001810 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001814:	4802      	ldr	r0, [pc, #8]	; (8001820 <TIM6_DAC_IRQHandler+0x10>)
 8001816:	f002 fba1 	bl	8003f5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	2000029c 	.word	0x2000029c

08001824 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
	return 1;
 8001828:	2301      	movs	r3, #1
}
 800182a:	4618      	mov	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <_kill>:

int _kill(int pid, int sig)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800183e:	f004 fa01 	bl	8005c44 <__errno>
 8001842:	4603      	mov	r3, r0
 8001844:	2216      	movs	r2, #22
 8001846:	601a      	str	r2, [r3, #0]
	return -1;
 8001848:	f04f 33ff 	mov.w	r3, #4294967295
}
 800184c:	4618      	mov	r0, r3
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <_exit>:

void _exit (int status)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800185c:	f04f 31ff 	mov.w	r1, #4294967295
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f7ff ffe7 	bl	8001834 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001866:	e7fe      	b.n	8001866 <_exit+0x12>

08001868 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]
 8001878:	e00a      	b.n	8001890 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800187a:	f3af 8000 	nop.w
 800187e:	4601      	mov	r1, r0
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	1c5a      	adds	r2, r3, #1
 8001884:	60ba      	str	r2, [r7, #8]
 8001886:	b2ca      	uxtb	r2, r1
 8001888:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	3301      	adds	r3, #1
 800188e:	617b      	str	r3, [r7, #20]
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	429a      	cmp	r2, r3
 8001896:	dbf0      	blt.n	800187a <_read+0x12>
	}

return len;
 8001898:	687b      	ldr	r3, [r7, #4]
}
 800189a:	4618      	mov	r0, r3
 800189c:	3718      	adds	r7, #24
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b086      	sub	sp, #24
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	60f8      	str	r0, [r7, #12]
 80018aa:	60b9      	str	r1, [r7, #8]
 80018ac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ae:	2300      	movs	r3, #0
 80018b0:	617b      	str	r3, [r7, #20]
 80018b2:	e009      	b.n	80018c8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	1c5a      	adds	r2, r3, #1
 80018b8:	60ba      	str	r2, [r7, #8]
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff ff57 	bl	8001770 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	3301      	adds	r3, #1
 80018c6:	617b      	str	r3, [r7, #20]
 80018c8:	697a      	ldr	r2, [r7, #20]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	dbf1      	blt.n	80018b4 <_write+0x12>
	}
	return len;
 80018d0:	687b      	ldr	r3, [r7, #4]
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3718      	adds	r7, #24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <_close>:

int _close(int file)
{
 80018da:	b480      	push	{r7}
 80018dc:	b083      	sub	sp, #12
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
	return -1;
 80018e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018f2:	b480      	push	{r7}
 80018f4:	b083      	sub	sp, #12
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
 80018fa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001902:	605a      	str	r2, [r3, #4]
	return 0;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <_isatty>:

int _isatty(int file)
{
 8001912:	b480      	push	{r7}
 8001914:	b083      	sub	sp, #12
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
	return 1;
 800191a:	2301      	movs	r3, #1
}
 800191c:	4618      	mov	r0, r3
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
	return 0;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3714      	adds	r7, #20
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
	...

08001944 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800194c:	4a14      	ldr	r2, [pc, #80]	; (80019a0 <_sbrk+0x5c>)
 800194e:	4b15      	ldr	r3, [pc, #84]	; (80019a4 <_sbrk+0x60>)
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001958:	4b13      	ldr	r3, [pc, #76]	; (80019a8 <_sbrk+0x64>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d102      	bne.n	8001966 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001960:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <_sbrk+0x64>)
 8001962:	4a12      	ldr	r2, [pc, #72]	; (80019ac <_sbrk+0x68>)
 8001964:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001966:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <_sbrk+0x64>)
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4413      	add	r3, r2
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	429a      	cmp	r2, r3
 8001972:	d207      	bcs.n	8001984 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001974:	f004 f966 	bl	8005c44 <__errno>
 8001978:	4603      	mov	r3, r0
 800197a:	220c      	movs	r2, #12
 800197c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800197e:	f04f 33ff 	mov.w	r3, #4294967295
 8001982:	e009      	b.n	8001998 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001984:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <_sbrk+0x64>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800198a:	4b07      	ldr	r3, [pc, #28]	; (80019a8 <_sbrk+0x64>)
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4413      	add	r3, r2
 8001992:	4a05      	ldr	r2, [pc, #20]	; (80019a8 <_sbrk+0x64>)
 8001994:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001996:	68fb      	ldr	r3, [r7, #12]
}
 8001998:	4618      	mov	r0, r3
 800199a:	3718      	adds	r7, #24
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	20020000 	.word	0x20020000
 80019a4:	00000400 	.word	0x00000400
 80019a8:	2000022c 	.word	0x2000022c
 80019ac:	200003d0 	.word	0x200003d0

080019b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019b4:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <SystemInit+0x20>)
 80019b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ba:	4a05      	ldr	r2, [pc, #20]	; (80019d0 <SystemInit+0x20>)
 80019bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b096      	sub	sp, #88	; 0x58
 80019d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	605a      	str	r2, [r3, #4]
 80019e4:	609a      	str	r2, [r3, #8]
 80019e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	605a      	str	r2, [r3, #4]
 80019fc:	609a      	str	r2, [r3, #8]
 80019fe:	60da      	str	r2, [r3, #12]
 8001a00:	611a      	str	r2, [r3, #16]
 8001a02:	615a      	str	r2, [r3, #20]
 8001a04:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a06:	1d3b      	adds	r3, r7, #4
 8001a08:	2220      	movs	r2, #32
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f004 f943 	bl	8005c98 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a12:	4b3e      	ldr	r3, [pc, #248]	; (8001b0c <MX_TIM1_Init+0x138>)
 8001a14:	4a3e      	ldr	r2, [pc, #248]	; (8001b10 <MX_TIM1_Init+0x13c>)
 8001a16:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a18:	4b3c      	ldr	r3, [pc, #240]	; (8001b0c <MX_TIM1_Init+0x138>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a1e:	4b3b      	ldr	r3, [pc, #236]	; (8001b0c <MX_TIM1_Init+0x138>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3360-1;
 8001a24:	4b39      	ldr	r3, [pc, #228]	; (8001b0c <MX_TIM1_Init+0x138>)
 8001a26:	f640 521f 	movw	r2, #3359	; 0xd1f
 8001a2a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a2c:	4b37      	ldr	r3, [pc, #220]	; (8001b0c <MX_TIM1_Init+0x138>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a32:	4b36      	ldr	r3, [pc, #216]	; (8001b0c <MX_TIM1_Init+0x138>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a38:	4b34      	ldr	r3, [pc, #208]	; (8001b0c <MX_TIM1_Init+0x138>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a3e:	4833      	ldr	r0, [pc, #204]	; (8001b0c <MX_TIM1_Init+0x138>)
 8001a40:	f001 ff76 	bl	8003930 <HAL_TIM_Base_Init>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001a4a:	f7ff fe63 	bl	8001714 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a52:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a54:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a58:	4619      	mov	r1, r3
 8001a5a:	482c      	ldr	r0, [pc, #176]	; (8001b0c <MX_TIM1_Init+0x138>)
 8001a5c:	f002 fc48 	bl	80042f0 <HAL_TIM_ConfigClockSource>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001a66:	f7ff fe55 	bl	8001714 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a6a:	4828      	ldr	r0, [pc, #160]	; (8001b0c <MX_TIM1_Init+0x138>)
 8001a6c:	f002 f820 	bl	8003ab0 <HAL_TIM_PWM_Init>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001a76:	f7ff fe4d 	bl	8001714 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a82:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a86:	4619      	mov	r1, r3
 8001a88:	4820      	ldr	r0, [pc, #128]	; (8001b0c <MX_TIM1_Init+0x138>)
 8001a8a:	f003 f831 	bl	8004af0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001a94:	f7ff fe3e 	bl	8001714 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a98:	2360      	movs	r3, #96	; 0x60
 8001a9a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001aac:	2300      	movs	r3, #0
 8001aae:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ab4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ab8:	2200      	movs	r2, #0
 8001aba:	4619      	mov	r1, r3
 8001abc:	4813      	ldr	r0, [pc, #76]	; (8001b0c <MX_TIM1_Init+0x138>)
 8001abe:	f002 fb55 	bl	800416c <HAL_TIM_PWM_ConfigChannel>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001ac8:	f7ff fe24 	bl	8001714 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001acc:	2300      	movs	r3, #0
 8001ace:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001adc:	2300      	movs	r3, #0
 8001ade:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ae0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ae4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001aea:	1d3b      	adds	r3, r7, #4
 8001aec:	4619      	mov	r1, r3
 8001aee:	4807      	ldr	r0, [pc, #28]	; (8001b0c <MX_TIM1_Init+0x138>)
 8001af0:	f003 f87a 	bl	8004be8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001afa:	f7ff fe0b 	bl	8001714 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001afe:	4803      	ldr	r0, [pc, #12]	; (8001b0c <MX_TIM1_Init+0x138>)
 8001b00:	f000 f916 	bl	8001d30 <HAL_TIM_MspPostInit>

}
 8001b04:	bf00      	nop
 8001b06:	3758      	adds	r7, #88	; 0x58
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	200002e4 	.word	0x200002e4
 8001b10:	40010000 	.word	0x40010000

08001b14 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b08c      	sub	sp, #48	; 0x30
 8001b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b1a:	f107 030c 	add.w	r3, r7, #12
 8001b1e:	2224      	movs	r2, #36	; 0x24
 8001b20:	2100      	movs	r1, #0
 8001b22:	4618      	mov	r0, r3
 8001b24:	f004 f8b8 	bl	8005c98 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b28:	1d3b      	adds	r3, r7, #4
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b30:	4b21      	ldr	r3, [pc, #132]	; (8001bb8 <MX_TIM2_Init+0xa4>)
 8001b32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b36:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b38:	4b1f      	ldr	r3, [pc, #124]	; (8001bb8 <MX_TIM2_Init+0xa4>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b3e:	4b1e      	ldr	r3, [pc, #120]	; (8001bb8 <MX_TIM2_Init+0xa4>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001b44:	4b1c      	ldr	r3, [pc, #112]	; (8001bb8 <MX_TIM2_Init+0xa4>)
 8001b46:	f04f 32ff 	mov.w	r2, #4294967295
 8001b4a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b4c:	4b1a      	ldr	r3, [pc, #104]	; (8001bb8 <MX_TIM2_Init+0xa4>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b52:	4b19      	ldr	r3, [pc, #100]	; (8001bb8 <MX_TIM2_Init+0xa4>)
 8001b54:	2280      	movs	r2, #128	; 0x80
 8001b56:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b60:	2301      	movs	r3, #1
 8001b62:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b64:	2300      	movs	r3, #0
 8001b66:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001b68:	230a      	movs	r3, #10
 8001b6a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b70:	2301      	movs	r3, #1
 8001b72:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b74:	2300      	movs	r3, #0
 8001b76:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001b7c:	f107 030c 	add.w	r3, r7, #12
 8001b80:	4619      	mov	r1, r3
 8001b82:	480d      	ldr	r0, [pc, #52]	; (8001bb8 <MX_TIM2_Init+0xa4>)
 8001b84:	f002 f8b6 	bl	8003cf4 <HAL_TIM_Encoder_Init>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001b8e:	f7ff fdc1 	bl	8001714 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b92:	2300      	movs	r3, #0
 8001b94:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b96:	2300      	movs	r3, #0
 8001b98:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b9a:	1d3b      	adds	r3, r7, #4
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4806      	ldr	r0, [pc, #24]	; (8001bb8 <MX_TIM2_Init+0xa4>)
 8001ba0:	f002 ffa6 	bl	8004af0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001baa:	f7ff fdb3 	bl	8001714 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001bae:	bf00      	nop
 8001bb0:	3730      	adds	r7, #48	; 0x30
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	2000032c 	.word	0x2000032c

08001bbc <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bc2:	463b      	mov	r3, r7
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001bca:	4b15      	ldr	r3, [pc, #84]	; (8001c20 <MX_TIM6_Init+0x64>)
 8001bcc:	4a15      	ldr	r2, [pc, #84]	; (8001c24 <MX_TIM6_Init+0x68>)
 8001bce:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8400-1;
 8001bd0:	4b13      	ldr	r3, [pc, #76]	; (8001c20 <MX_TIM6_Init+0x64>)
 8001bd2:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001bd6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bd8:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <MX_TIM6_Init+0x64>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 200;
 8001bde:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <MX_TIM6_Init+0x64>)
 8001be0:	22c8      	movs	r2, #200	; 0xc8
 8001be2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001be4:	4b0e      	ldr	r3, [pc, #56]	; (8001c20 <MX_TIM6_Init+0x64>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001bea:	480d      	ldr	r0, [pc, #52]	; (8001c20 <MX_TIM6_Init+0x64>)
 8001bec:	f001 fea0 	bl	8003930 <HAL_TIM_Base_Init>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001bf6:	f7ff fd8d 	bl	8001714 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c02:	463b      	mov	r3, r7
 8001c04:	4619      	mov	r1, r3
 8001c06:	4806      	ldr	r0, [pc, #24]	; (8001c20 <MX_TIM6_Init+0x64>)
 8001c08:	f002 ff72 	bl	8004af0 <HAL_TIMEx_MasterConfigSynchronization>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001c12:	f7ff fd7f 	bl	8001714 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	2000029c 	.word	0x2000029c
 8001c24:	40001000 	.word	0x40001000

08001c28 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a18      	ldr	r2, [pc, #96]	; (8001c98 <HAL_TIM_Base_MspInit+0x70>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d10e      	bne.n	8001c58 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60fb      	str	r3, [r7, #12]
 8001c3e:	4b17      	ldr	r3, [pc, #92]	; (8001c9c <HAL_TIM_Base_MspInit+0x74>)
 8001c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c42:	4a16      	ldr	r2, [pc, #88]	; (8001c9c <HAL_TIM_Base_MspInit+0x74>)
 8001c44:	f043 0301 	orr.w	r3, r3, #1
 8001c48:	6453      	str	r3, [r2, #68]	; 0x44
 8001c4a:	4b14      	ldr	r3, [pc, #80]	; (8001c9c <HAL_TIM_Base_MspInit+0x74>)
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001c56:	e01a      	b.n	8001c8e <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM6)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a10      	ldr	r2, [pc, #64]	; (8001ca0 <HAL_TIM_Base_MspInit+0x78>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d115      	bne.n	8001c8e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	60bb      	str	r3, [r7, #8]
 8001c66:	4b0d      	ldr	r3, [pc, #52]	; (8001c9c <HAL_TIM_Base_MspInit+0x74>)
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	4a0c      	ldr	r2, [pc, #48]	; (8001c9c <HAL_TIM_Base_MspInit+0x74>)
 8001c6c:	f043 0310 	orr.w	r3, r3, #16
 8001c70:	6413      	str	r3, [r2, #64]	; 0x40
 8001c72:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <HAL_TIM_Base_MspInit+0x74>)
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	f003 0310 	and.w	r3, r3, #16
 8001c7a:	60bb      	str	r3, [r7, #8]
 8001c7c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001c7e:	2200      	movs	r2, #0
 8001c80:	2100      	movs	r1, #0
 8001c82:	2036      	movs	r0, #54	; 0x36
 8001c84:	f000 fe73 	bl	800296e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c88:	2036      	movs	r0, #54	; 0x36
 8001c8a:	f000 fe8c 	bl	80029a6 <HAL_NVIC_EnableIRQ>
}
 8001c8e:	bf00      	nop
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40010000 	.word	0x40010000
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	40001000 	.word	0x40001000

08001ca4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b08a      	sub	sp, #40	; 0x28
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cac:	f107 0314 	add.w	r3, r7, #20
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	605a      	str	r2, [r3, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
 8001cb8:	60da      	str	r2, [r3, #12]
 8001cba:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cc4:	d12b      	bne.n	8001d1e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	613b      	str	r3, [r7, #16]
 8001cca:	4b17      	ldr	r3, [pc, #92]	; (8001d28 <HAL_TIM_Encoder_MspInit+0x84>)
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	4a16      	ldr	r2, [pc, #88]	; (8001d28 <HAL_TIM_Encoder_MspInit+0x84>)
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cd6:	4b14      	ldr	r3, [pc, #80]	; (8001d28 <HAL_TIM_Encoder_MspInit+0x84>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	613b      	str	r3, [r7, #16]
 8001ce0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	4b10      	ldr	r3, [pc, #64]	; (8001d28 <HAL_TIM_Encoder_MspInit+0x84>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	4a0f      	ldr	r2, [pc, #60]	; (8001d28 <HAL_TIM_Encoder_MspInit+0x84>)
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf2:	4b0d      	ldr	r3, [pc, #52]	; (8001d28 <HAL_TIM_Encoder_MspInit+0x84>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d02:	2302      	movs	r3, #2
 8001d04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d06:	2300      	movs	r3, #0
 8001d08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d12:	f107 0314 	add.w	r3, r7, #20
 8001d16:	4619      	mov	r1, r3
 8001d18:	4804      	ldr	r0, [pc, #16]	; (8001d2c <HAL_TIM_Encoder_MspInit+0x88>)
 8001d1a:	f000 fef1 	bl	8002b00 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001d1e:	bf00      	nop
 8001d20:	3728      	adds	r7, #40	; 0x28
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	40020000 	.word	0x40020000

08001d30 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b088      	sub	sp, #32
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d38:	f107 030c 	add.w	r3, r7, #12
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]
 8001d46:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a12      	ldr	r2, [pc, #72]	; (8001d98 <HAL_TIM_MspPostInit+0x68>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d11e      	bne.n	8001d90 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	60bb      	str	r3, [r7, #8]
 8001d56:	4b11      	ldr	r3, [pc, #68]	; (8001d9c <HAL_TIM_MspPostInit+0x6c>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	4a10      	ldr	r2, [pc, #64]	; (8001d9c <HAL_TIM_MspPostInit+0x6c>)
 8001d5c:	f043 0301 	orr.w	r3, r3, #1
 8001d60:	6313      	str	r3, [r2, #48]	; 0x30
 8001d62:	4b0e      	ldr	r3, [pc, #56]	; (8001d9c <HAL_TIM_MspPostInit+0x6c>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	60bb      	str	r3, [r7, #8]
 8001d6c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = MOT_ENA_Pin;
 8001d6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d72:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d74:	2302      	movs	r3, #2
 8001d76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d80:	2301      	movs	r3, #1
 8001d82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MOT_ENA_GPIO_Port, &GPIO_InitStruct);
 8001d84:	f107 030c 	add.w	r3, r7, #12
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4805      	ldr	r0, [pc, #20]	; (8001da0 <HAL_TIM_MspPostInit+0x70>)
 8001d8c:	f000 feb8 	bl	8002b00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001d90:	bf00      	nop
 8001d92:	3720      	adds	r7, #32
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40010000 	.word	0x40010000
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	40020000 	.word	0x40020000

08001da4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001da8:	4b11      	ldr	r3, [pc, #68]	; (8001df0 <MX_USART2_UART_Init+0x4c>)
 8001daa:	4a12      	ldr	r2, [pc, #72]	; (8001df4 <MX_USART2_UART_Init+0x50>)
 8001dac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001dae:	4b10      	ldr	r3, [pc, #64]	; (8001df0 <MX_USART2_UART_Init+0x4c>)
 8001db0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001db4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001db6:	4b0e      	ldr	r3, [pc, #56]	; (8001df0 <MX_USART2_UART_Init+0x4c>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001dbc:	4b0c      	ldr	r3, [pc, #48]	; (8001df0 <MX_USART2_UART_Init+0x4c>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001dc2:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <MX_USART2_UART_Init+0x4c>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001dc8:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <MX_USART2_UART_Init+0x4c>)
 8001dca:	220c      	movs	r2, #12
 8001dcc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dce:	4b08      	ldr	r3, [pc, #32]	; (8001df0 <MX_USART2_UART_Init+0x4c>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dd4:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <MX_USART2_UART_Init+0x4c>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001dda:	4805      	ldr	r0, [pc, #20]	; (8001df0 <MX_USART2_UART_Init+0x4c>)
 8001ddc:	f002 ff6a 	bl	8004cb4 <HAL_UART_Init>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001de6:	f7ff fc95 	bl	8001714 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000374 	.word	0x20000374
 8001df4:	40004400 	.word	0x40004400

08001df8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08a      	sub	sp, #40	; 0x28
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e00:	f107 0314 	add.w	r3, r7, #20
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	60da      	str	r2, [r3, #12]
 8001e0e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a1d      	ldr	r2, [pc, #116]	; (8001e8c <HAL_UART_MspInit+0x94>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d133      	bne.n	8001e82 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	613b      	str	r3, [r7, #16]
 8001e1e:	4b1c      	ldr	r3, [pc, #112]	; (8001e90 <HAL_UART_MspInit+0x98>)
 8001e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e22:	4a1b      	ldr	r2, [pc, #108]	; (8001e90 <HAL_UART_MspInit+0x98>)
 8001e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e28:	6413      	str	r3, [r2, #64]	; 0x40
 8001e2a:	4b19      	ldr	r3, [pc, #100]	; (8001e90 <HAL_UART_MspInit+0x98>)
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e32:	613b      	str	r3, [r7, #16]
 8001e34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	4b15      	ldr	r3, [pc, #84]	; (8001e90 <HAL_UART_MspInit+0x98>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	4a14      	ldr	r2, [pc, #80]	; (8001e90 <HAL_UART_MspInit+0x98>)
 8001e40:	f043 0301 	orr.w	r3, r3, #1
 8001e44:	6313      	str	r3, [r2, #48]	; 0x30
 8001e46:	4b12      	ldr	r3, [pc, #72]	; (8001e90 <HAL_UART_MspInit+0x98>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e52:	230c      	movs	r3, #12
 8001e54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e56:	2302      	movs	r3, #2
 8001e58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e62:	2307      	movs	r3, #7
 8001e64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e66:	f107 0314 	add.w	r3, r7, #20
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4809      	ldr	r0, [pc, #36]	; (8001e94 <HAL_UART_MspInit+0x9c>)
 8001e6e:	f000 fe47 	bl	8002b00 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e72:	2200      	movs	r2, #0
 8001e74:	2100      	movs	r1, #0
 8001e76:	2026      	movs	r0, #38	; 0x26
 8001e78:	f000 fd79 	bl	800296e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e7c:	2026      	movs	r0, #38	; 0x26
 8001e7e:	f000 fd92 	bl	80029a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001e82:	bf00      	nop
 8001e84:	3728      	adds	r7, #40	; 0x28
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40004400 	.word	0x40004400
 8001e90:	40023800 	.word	0x40023800
 8001e94:	40020000 	.word	0x40020000

08001e98 <Reset_Handler>:
 8001e98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ed0 <LoopFillZerobss+0x12>
 8001e9c:	480d      	ldr	r0, [pc, #52]	; (8001ed4 <LoopFillZerobss+0x16>)
 8001e9e:	490e      	ldr	r1, [pc, #56]	; (8001ed8 <LoopFillZerobss+0x1a>)
 8001ea0:	4a0e      	ldr	r2, [pc, #56]	; (8001edc <LoopFillZerobss+0x1e>)
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	e002      	b.n	8001eac <LoopCopyDataInit>

08001ea6 <CopyDataInit>:
 8001ea6:	58d4      	ldr	r4, [r2, r3]
 8001ea8:	50c4      	str	r4, [r0, r3]
 8001eaa:	3304      	adds	r3, #4

08001eac <LoopCopyDataInit>:
 8001eac:	18c4      	adds	r4, r0, r3
 8001eae:	428c      	cmp	r4, r1
 8001eb0:	d3f9      	bcc.n	8001ea6 <CopyDataInit>
 8001eb2:	4a0b      	ldr	r2, [pc, #44]	; (8001ee0 <LoopFillZerobss+0x22>)
 8001eb4:	4c0b      	ldr	r4, [pc, #44]	; (8001ee4 <LoopFillZerobss+0x26>)
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	e001      	b.n	8001ebe <LoopFillZerobss>

08001eba <FillZerobss>:
 8001eba:	6013      	str	r3, [r2, #0]
 8001ebc:	3204      	adds	r2, #4

08001ebe <LoopFillZerobss>:
 8001ebe:	42a2      	cmp	r2, r4
 8001ec0:	d3fb      	bcc.n	8001eba <FillZerobss>
 8001ec2:	f7ff fd75 	bl	80019b0 <SystemInit>
 8001ec6:	f003 fec3 	bl	8005c50 <__libc_init_array>
 8001eca:	f7ff fb23 	bl	8001514 <main>
 8001ece:	4770      	bx	lr
 8001ed0:	20020000 	.word	0x20020000
 8001ed4:	20000000 	.word	0x20000000
 8001ed8:	200001e8 	.word	0x200001e8
 8001edc:	08008bdc 	.word	0x08008bdc
 8001ee0:	200001e8 	.word	0x200001e8
 8001ee4:	200003cc 	.word	0x200003cc

08001ee8 <CAN1_RX0_IRQHandler>:
 8001ee8:	e7fe      	b.n	8001ee8 <CAN1_RX0_IRQHandler>
	...

08001eec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ef0:	4b0e      	ldr	r3, [pc, #56]	; (8001f2c <HAL_Init+0x40>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a0d      	ldr	r2, [pc, #52]	; (8001f2c <HAL_Init+0x40>)
 8001ef6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001efa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001efc:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <HAL_Init+0x40>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a0a      	ldr	r2, [pc, #40]	; (8001f2c <HAL_Init+0x40>)
 8001f02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f08:	4b08      	ldr	r3, [pc, #32]	; (8001f2c <HAL_Init+0x40>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a07      	ldr	r2, [pc, #28]	; (8001f2c <HAL_Init+0x40>)
 8001f0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f14:	2003      	movs	r0, #3
 8001f16:	f000 fd1f 	bl	8002958 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f1a:	2000      	movs	r0, #0
 8001f1c:	f000 f808 	bl	8001f30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f20:	f7ff fbfe 	bl	8001720 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40023c00 	.word	0x40023c00

08001f30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f38:	4b12      	ldr	r3, [pc, #72]	; (8001f84 <HAL_InitTick+0x54>)
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	4b12      	ldr	r3, [pc, #72]	; (8001f88 <HAL_InitTick+0x58>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	4619      	mov	r1, r3
 8001f42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f000 fd37 	bl	80029c2 <HAL_SYSTICK_Config>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e00e      	b.n	8001f7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2b0f      	cmp	r3, #15
 8001f62:	d80a      	bhi.n	8001f7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f64:	2200      	movs	r2, #0
 8001f66:	6879      	ldr	r1, [r7, #4]
 8001f68:	f04f 30ff 	mov.w	r0, #4294967295
 8001f6c:	f000 fcff 	bl	800296e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f70:	4a06      	ldr	r2, [pc, #24]	; (8001f8c <HAL_InitTick+0x5c>)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
 8001f78:	e000      	b.n	8001f7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3708      	adds	r7, #8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	2000000c 	.word	0x2000000c
 8001f88:	20000014 	.word	0x20000014
 8001f8c:	20000010 	.word	0x20000010

08001f90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f94:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <HAL_IncTick+0x20>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <HAL_IncTick+0x24>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	4a04      	ldr	r2, [pc, #16]	; (8001fb4 <HAL_IncTick+0x24>)
 8001fa2:	6013      	str	r3, [r2, #0]
}
 8001fa4:	bf00      	nop
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	20000014 	.word	0x20000014
 8001fb4:	200003b8 	.word	0x200003b8

08001fb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  return uwTick;
 8001fbc:	4b03      	ldr	r3, [pc, #12]	; (8001fcc <HAL_GetTick+0x14>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	200003b8 	.word	0x200003b8

08001fd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fd8:	f7ff ffee 	bl	8001fb8 <HAL_GetTick>
 8001fdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe8:	d005      	beq.n	8001ff6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fea:	4b0a      	ldr	r3, [pc, #40]	; (8002014 <HAL_Delay+0x44>)
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	461a      	mov	r2, r3
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ff6:	bf00      	nop
 8001ff8:	f7ff ffde 	bl	8001fb8 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	429a      	cmp	r2, r3
 8002006:	d8f7      	bhi.n	8001ff8 <HAL_Delay+0x28>
  {
  }
}
 8002008:	bf00      	nop
 800200a:	bf00      	nop
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	20000014 	.word	0x20000014

08002018 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002020:	2300      	movs	r3, #0
 8002022:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e033      	b.n	8002096 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	2b00      	cmp	r3, #0
 8002034:	d109      	bne.n	800204a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f7ff f99e 	bl	8001378 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	f003 0310 	and.w	r3, r3, #16
 8002052:	2b00      	cmp	r3, #0
 8002054:	d118      	bne.n	8002088 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800205e:	f023 0302 	bic.w	r3, r3, #2
 8002062:	f043 0202 	orr.w	r2, r3, #2
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 fa9e 	bl	80025ac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	f023 0303 	bic.w	r3, r3, #3
 800207e:	f043 0201 	orr.w	r2, r3, #1
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	641a      	str	r2, [r3, #64]	; 0x40
 8002086:	e001      	b.n	800208c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002094:	7bfb      	ldrb	r3, [r7, #15]
}
 8002096:	4618      	mov	r0, r3
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b084      	sub	sp, #16
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80020a6:	2300      	movs	r3, #0
 80020a8:	60fb      	str	r3, [r7, #12]
 80020aa:	2300      	movs	r3, #0
 80020ac:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	bf0c      	ite	eq
 80020bc:	2301      	moveq	r3, #1
 80020be:	2300      	movne	r3, #0
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f003 0320 	and.w	r3, r3, #32
 80020ce:	2b20      	cmp	r3, #32
 80020d0:	bf0c      	ite	eq
 80020d2:	2301      	moveq	r3, #1
 80020d4:	2300      	movne	r3, #0
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d049      	beq.n	8002174 <HAL_ADC_IRQHandler+0xd6>
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d046      	beq.n	8002174 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	f003 0310 	and.w	r3, r3, #16
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d105      	bne.n	80020fe <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d12b      	bne.n	8002164 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002110:	2b00      	cmp	r3, #0
 8002112:	d127      	bne.n	8002164 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800211e:	2b00      	cmp	r3, #0
 8002120:	d006      	beq.n	8002130 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800212c:	2b00      	cmp	r3, #0
 800212e:	d119      	bne.n	8002164 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	685a      	ldr	r2, [r3, #4]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f022 0220 	bic.w	r2, r2, #32
 800213e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002144:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002150:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d105      	bne.n	8002164 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215c:	f043 0201 	orr.w	r2, r3, #1
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f7ff facb 	bl	8001700 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f06f 0212 	mvn.w	r2, #18
 8002172:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0304 	and.w	r3, r3, #4
 800217e:	2b04      	cmp	r3, #4
 8002180:	bf0c      	ite	eq
 8002182:	2301      	moveq	r3, #1
 8002184:	2300      	movne	r3, #0
 8002186:	b2db      	uxtb	r3, r3
 8002188:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002194:	2b80      	cmp	r3, #128	; 0x80
 8002196:	bf0c      	ite	eq
 8002198:	2301      	moveq	r3, #1
 800219a:	2300      	movne	r3, #0
 800219c:	b2db      	uxtb	r3, r3
 800219e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d057      	beq.n	8002256 <HAL_ADC_IRQHandler+0x1b8>
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d054      	beq.n	8002256 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b0:	f003 0310 	and.w	r3, r3, #16
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d105      	bne.n	80021c4 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021bc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d139      	bne.n	8002246 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d006      	beq.n	80021ee <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d12b      	bne.n	8002246 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d124      	bne.n	8002246 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002206:	2b00      	cmp	r3, #0
 8002208:	d11d      	bne.n	8002246 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800220e:	2b00      	cmp	r3, #0
 8002210:	d119      	bne.n	8002246 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002220:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002226:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002236:	2b00      	cmp	r3, #0
 8002238:	d105      	bne.n	8002246 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	f043 0201 	orr.w	r2, r3, #1
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 faac 	bl	80027a4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f06f 020c 	mvn.w	r2, #12
 8002254:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	2b01      	cmp	r3, #1
 8002262:	bf0c      	ite	eq
 8002264:	2301      	moveq	r3, #1
 8002266:	2300      	movne	r3, #0
 8002268:	b2db      	uxtb	r3, r3
 800226a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002276:	2b40      	cmp	r3, #64	; 0x40
 8002278:	bf0c      	ite	eq
 800227a:	2301      	moveq	r3, #1
 800227c:	2300      	movne	r3, #0
 800227e:	b2db      	uxtb	r3, r3
 8002280:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d017      	beq.n	80022b8 <HAL_ADC_IRQHandler+0x21a>
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d014      	beq.n	80022b8 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0301 	and.w	r3, r3, #1
 8002298:	2b01      	cmp	r3, #1
 800229a:	d10d      	bne.n	80022b8 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f000 f839 	bl	8002320 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f06f 0201 	mvn.w	r2, #1
 80022b6:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0320 	and.w	r3, r3, #32
 80022c2:	2b20      	cmp	r3, #32
 80022c4:	bf0c      	ite	eq
 80022c6:	2301      	moveq	r3, #1
 80022c8:	2300      	movne	r3, #0
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022dc:	bf0c      	ite	eq
 80022de:	2301      	moveq	r3, #1
 80022e0:	2300      	movne	r3, #0
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d015      	beq.n	8002318 <HAL_ADC_IRQHandler+0x27a>
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d012      	beq.n	8002318 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f6:	f043 0202 	orr.w	r2, r3, #2
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f06f 0220 	mvn.w	r2, #32
 8002306:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f000 f813 	bl	8002334 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f06f 0220 	mvn.w	r2, #32
 8002316:	601a      	str	r2, [r3, #0]
  }
}
 8002318:	bf00      	nop
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002352:	2300      	movs	r3, #0
 8002354:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800235c:	2b01      	cmp	r3, #1
 800235e:	d101      	bne.n	8002364 <HAL_ADC_ConfigChannel+0x1c>
 8002360:	2302      	movs	r3, #2
 8002362:	e113      	b.n	800258c <HAL_ADC_ConfigChannel+0x244>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2b09      	cmp	r3, #9
 8002372:	d925      	bls.n	80023c0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	68d9      	ldr	r1, [r3, #12]
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	b29b      	uxth	r3, r3
 8002380:	461a      	mov	r2, r3
 8002382:	4613      	mov	r3, r2
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	4413      	add	r3, r2
 8002388:	3b1e      	subs	r3, #30
 800238a:	2207      	movs	r2, #7
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	43da      	mvns	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	400a      	ands	r2, r1
 8002398:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68d9      	ldr	r1, [r3, #12]
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	4618      	mov	r0, r3
 80023ac:	4603      	mov	r3, r0
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	4403      	add	r3, r0
 80023b2:	3b1e      	subs	r3, #30
 80023b4:	409a      	lsls	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	430a      	orrs	r2, r1
 80023bc:	60da      	str	r2, [r3, #12]
 80023be:	e022      	b.n	8002406 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6919      	ldr	r1, [r3, #16]
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	461a      	mov	r2, r3
 80023ce:	4613      	mov	r3, r2
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	4413      	add	r3, r2
 80023d4:	2207      	movs	r2, #7
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	43da      	mvns	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	400a      	ands	r2, r1
 80023e2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6919      	ldr	r1, [r3, #16]
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	689a      	ldr	r2, [r3, #8]
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	4618      	mov	r0, r3
 80023f6:	4603      	mov	r3, r0
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	4403      	add	r3, r0
 80023fc:	409a      	lsls	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	430a      	orrs	r2, r1
 8002404:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2b06      	cmp	r3, #6
 800240c:	d824      	bhi.n	8002458 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685a      	ldr	r2, [r3, #4]
 8002418:	4613      	mov	r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	4413      	add	r3, r2
 800241e:	3b05      	subs	r3, #5
 8002420:	221f      	movs	r2, #31
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	43da      	mvns	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	400a      	ands	r2, r1
 800242e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	b29b      	uxth	r3, r3
 800243c:	4618      	mov	r0, r3
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685a      	ldr	r2, [r3, #4]
 8002442:	4613      	mov	r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	4413      	add	r3, r2
 8002448:	3b05      	subs	r3, #5
 800244a:	fa00 f203 	lsl.w	r2, r0, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	430a      	orrs	r2, r1
 8002454:	635a      	str	r2, [r3, #52]	; 0x34
 8002456:	e04c      	b.n	80024f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	2b0c      	cmp	r3, #12
 800245e:	d824      	bhi.n	80024aa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685a      	ldr	r2, [r3, #4]
 800246a:	4613      	mov	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	4413      	add	r3, r2
 8002470:	3b23      	subs	r3, #35	; 0x23
 8002472:	221f      	movs	r2, #31
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	43da      	mvns	r2, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	400a      	ands	r2, r1
 8002480:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	b29b      	uxth	r3, r3
 800248e:	4618      	mov	r0, r3
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685a      	ldr	r2, [r3, #4]
 8002494:	4613      	mov	r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	4413      	add	r3, r2
 800249a:	3b23      	subs	r3, #35	; 0x23
 800249c:	fa00 f203 	lsl.w	r2, r0, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	430a      	orrs	r2, r1
 80024a6:	631a      	str	r2, [r3, #48]	; 0x30
 80024a8:	e023      	b.n	80024f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	4613      	mov	r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	4413      	add	r3, r2
 80024ba:	3b41      	subs	r3, #65	; 0x41
 80024bc:	221f      	movs	r2, #31
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	43da      	mvns	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	400a      	ands	r2, r1
 80024ca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	4618      	mov	r0, r3
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685a      	ldr	r2, [r3, #4]
 80024de:	4613      	mov	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	3b41      	subs	r3, #65	; 0x41
 80024e6:	fa00 f203 	lsl.w	r2, r0, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	430a      	orrs	r2, r1
 80024f0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024f2:	4b29      	ldr	r3, [pc, #164]	; (8002598 <HAL_ADC_ConfigChannel+0x250>)
 80024f4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a28      	ldr	r2, [pc, #160]	; (800259c <HAL_ADC_ConfigChannel+0x254>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d10f      	bne.n	8002520 <HAL_ADC_ConfigChannel+0x1d8>
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2b12      	cmp	r3, #18
 8002506:	d10b      	bne.n	8002520 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a1d      	ldr	r2, [pc, #116]	; (800259c <HAL_ADC_ConfigChannel+0x254>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d12b      	bne.n	8002582 <HAL_ADC_ConfigChannel+0x23a>
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a1c      	ldr	r2, [pc, #112]	; (80025a0 <HAL_ADC_ConfigChannel+0x258>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d003      	beq.n	800253c <HAL_ADC_ConfigChannel+0x1f4>
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2b11      	cmp	r3, #17
 800253a:	d122      	bne.n	8002582 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a11      	ldr	r2, [pc, #68]	; (80025a0 <HAL_ADC_ConfigChannel+0x258>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d111      	bne.n	8002582 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800255e:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <HAL_ADC_ConfigChannel+0x25c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a11      	ldr	r2, [pc, #68]	; (80025a8 <HAL_ADC_ConfigChannel+0x260>)
 8002564:	fba2 2303 	umull	r2, r3, r2, r3
 8002568:	0c9a      	lsrs	r2, r3, #18
 800256a:	4613      	mov	r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	4413      	add	r3, r2
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002574:	e002      	b.n	800257c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	3b01      	subs	r3, #1
 800257a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1f9      	bne.n	8002576 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	3714      	adds	r7, #20
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	40012300 	.word	0x40012300
 800259c:	40012000 	.word	0x40012000
 80025a0:	10000012 	.word	0x10000012
 80025a4:	2000000c 	.word	0x2000000c
 80025a8:	431bde83 	.word	0x431bde83

080025ac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025b4:	4b79      	ldr	r3, [pc, #484]	; (800279c <ADC_Init+0x1f0>)
 80025b6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	685a      	ldr	r2, [r3, #4]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	431a      	orrs	r2, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	6859      	ldr	r1, [r3, #4]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	021a      	lsls	r2, r3, #8
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	685a      	ldr	r2, [r3, #4]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002604:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6859      	ldr	r1, [r3, #4]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	430a      	orrs	r2, r1
 8002616:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	689a      	ldr	r2, [r3, #8]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002626:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6899      	ldr	r1, [r3, #8]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	68da      	ldr	r2, [r3, #12]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	430a      	orrs	r2, r1
 8002638:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263e:	4a58      	ldr	r2, [pc, #352]	; (80027a0 <ADC_Init+0x1f4>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d022      	beq.n	800268a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	689a      	ldr	r2, [r3, #8]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002652:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	6899      	ldr	r1, [r3, #8]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	430a      	orrs	r2, r1
 8002664:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	689a      	ldr	r2, [r3, #8]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002674:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	6899      	ldr	r1, [r3, #8]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	430a      	orrs	r2, r1
 8002686:	609a      	str	r2, [r3, #8]
 8002688:	e00f      	b.n	80026aa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	689a      	ldr	r2, [r3, #8]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002698:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80026a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 0202 	bic.w	r2, r2, #2
 80026b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	6899      	ldr	r1, [r3, #8]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	7e1b      	ldrb	r3, [r3, #24]
 80026c4:	005a      	lsls	r2, r3, #1
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	430a      	orrs	r2, r1
 80026cc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d01b      	beq.n	8002710 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	685a      	ldr	r2, [r3, #4]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026e6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	685a      	ldr	r2, [r3, #4]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80026f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6859      	ldr	r1, [r3, #4]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002702:	3b01      	subs	r3, #1
 8002704:	035a      	lsls	r2, r3, #13
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	430a      	orrs	r2, r1
 800270c:	605a      	str	r2, [r3, #4]
 800270e:	e007      	b.n	8002720 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	685a      	ldr	r2, [r3, #4]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800271e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800272e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	69db      	ldr	r3, [r3, #28]
 800273a:	3b01      	subs	r3, #1
 800273c:	051a      	lsls	r2, r3, #20
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	430a      	orrs	r2, r1
 8002744:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	689a      	ldr	r2, [r3, #8]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002754:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	6899      	ldr	r1, [r3, #8]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002762:	025a      	lsls	r2, r3, #9
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	430a      	orrs	r2, r1
 800276a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	689a      	ldr	r2, [r3, #8]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800277a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6899      	ldr	r1, [r3, #8]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	029a      	lsls	r2, r3, #10
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	430a      	orrs	r2, r1
 800278e:	609a      	str	r2, [r3, #8]
}
 8002790:	bf00      	nop
 8002792:	3714      	adds	r7, #20
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr
 800279c:	40012300 	.word	0x40012300
 80027a0:	0f000001 	.word	0x0f000001

080027a4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b085      	sub	sp, #20
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f003 0307 	and.w	r3, r3, #7
 80027c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027c8:	4b0c      	ldr	r3, [pc, #48]	; (80027fc <__NVIC_SetPriorityGrouping+0x44>)
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027ce:	68ba      	ldr	r2, [r7, #8]
 80027d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027d4:	4013      	ands	r3, r2
 80027d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027ea:	4a04      	ldr	r2, [pc, #16]	; (80027fc <__NVIC_SetPriorityGrouping+0x44>)
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	60d3      	str	r3, [r2, #12]
}
 80027f0:	bf00      	nop
 80027f2:	3714      	adds	r7, #20
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr
 80027fc:	e000ed00 	.word	0xe000ed00

08002800 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002804:	4b04      	ldr	r3, [pc, #16]	; (8002818 <__NVIC_GetPriorityGrouping+0x18>)
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	0a1b      	lsrs	r3, r3, #8
 800280a:	f003 0307 	and.w	r3, r3, #7
}
 800280e:	4618      	mov	r0, r3
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	e000ed00 	.word	0xe000ed00

0800281c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	4603      	mov	r3, r0
 8002824:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282a:	2b00      	cmp	r3, #0
 800282c:	db0b      	blt.n	8002846 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800282e:	79fb      	ldrb	r3, [r7, #7]
 8002830:	f003 021f 	and.w	r2, r3, #31
 8002834:	4907      	ldr	r1, [pc, #28]	; (8002854 <__NVIC_EnableIRQ+0x38>)
 8002836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283a:	095b      	lsrs	r3, r3, #5
 800283c:	2001      	movs	r0, #1
 800283e:	fa00 f202 	lsl.w	r2, r0, r2
 8002842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002846:	bf00      	nop
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	e000e100 	.word	0xe000e100

08002858 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	4603      	mov	r3, r0
 8002860:	6039      	str	r1, [r7, #0]
 8002862:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002868:	2b00      	cmp	r3, #0
 800286a:	db0a      	blt.n	8002882 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	b2da      	uxtb	r2, r3
 8002870:	490c      	ldr	r1, [pc, #48]	; (80028a4 <__NVIC_SetPriority+0x4c>)
 8002872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002876:	0112      	lsls	r2, r2, #4
 8002878:	b2d2      	uxtb	r2, r2
 800287a:	440b      	add	r3, r1
 800287c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002880:	e00a      	b.n	8002898 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	b2da      	uxtb	r2, r3
 8002886:	4908      	ldr	r1, [pc, #32]	; (80028a8 <__NVIC_SetPriority+0x50>)
 8002888:	79fb      	ldrb	r3, [r7, #7]
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	3b04      	subs	r3, #4
 8002890:	0112      	lsls	r2, r2, #4
 8002892:	b2d2      	uxtb	r2, r2
 8002894:	440b      	add	r3, r1
 8002896:	761a      	strb	r2, [r3, #24]
}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	e000e100 	.word	0xe000e100
 80028a8:	e000ed00 	.word	0xe000ed00

080028ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b089      	sub	sp, #36	; 0x24
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f003 0307 	and.w	r3, r3, #7
 80028be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	f1c3 0307 	rsb	r3, r3, #7
 80028c6:	2b04      	cmp	r3, #4
 80028c8:	bf28      	it	cs
 80028ca:	2304      	movcs	r3, #4
 80028cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	3304      	adds	r3, #4
 80028d2:	2b06      	cmp	r3, #6
 80028d4:	d902      	bls.n	80028dc <NVIC_EncodePriority+0x30>
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	3b03      	subs	r3, #3
 80028da:	e000      	b.n	80028de <NVIC_EncodePriority+0x32>
 80028dc:	2300      	movs	r3, #0
 80028de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028e0:	f04f 32ff 	mov.w	r2, #4294967295
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ea:	43da      	mvns	r2, r3
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	401a      	ands	r2, r3
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028f4:	f04f 31ff 	mov.w	r1, #4294967295
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	fa01 f303 	lsl.w	r3, r1, r3
 80028fe:	43d9      	mvns	r1, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002904:	4313      	orrs	r3, r2
         );
}
 8002906:	4618      	mov	r0, r3
 8002908:	3724      	adds	r7, #36	; 0x24
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
	...

08002914 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3b01      	subs	r3, #1
 8002920:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002924:	d301      	bcc.n	800292a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002926:	2301      	movs	r3, #1
 8002928:	e00f      	b.n	800294a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800292a:	4a0a      	ldr	r2, [pc, #40]	; (8002954 <SysTick_Config+0x40>)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3b01      	subs	r3, #1
 8002930:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002932:	210f      	movs	r1, #15
 8002934:	f04f 30ff 	mov.w	r0, #4294967295
 8002938:	f7ff ff8e 	bl	8002858 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800293c:	4b05      	ldr	r3, [pc, #20]	; (8002954 <SysTick_Config+0x40>)
 800293e:	2200      	movs	r2, #0
 8002940:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002942:	4b04      	ldr	r3, [pc, #16]	; (8002954 <SysTick_Config+0x40>)
 8002944:	2207      	movs	r2, #7
 8002946:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	e000e010 	.word	0xe000e010

08002958 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f7ff ff29 	bl	80027b8 <__NVIC_SetPriorityGrouping>
}
 8002966:	bf00      	nop
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800296e:	b580      	push	{r7, lr}
 8002970:	b086      	sub	sp, #24
 8002972:	af00      	add	r7, sp, #0
 8002974:	4603      	mov	r3, r0
 8002976:	60b9      	str	r1, [r7, #8]
 8002978:	607a      	str	r2, [r7, #4]
 800297a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800297c:	2300      	movs	r3, #0
 800297e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002980:	f7ff ff3e 	bl	8002800 <__NVIC_GetPriorityGrouping>
 8002984:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	68b9      	ldr	r1, [r7, #8]
 800298a:	6978      	ldr	r0, [r7, #20]
 800298c:	f7ff ff8e 	bl	80028ac <NVIC_EncodePriority>
 8002990:	4602      	mov	r2, r0
 8002992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002996:	4611      	mov	r1, r2
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff ff5d 	bl	8002858 <__NVIC_SetPriority>
}
 800299e:	bf00      	nop
 80029a0:	3718      	adds	r7, #24
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b082      	sub	sp, #8
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	4603      	mov	r3, r0
 80029ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff ff31 	bl	800281c <__NVIC_EnableIRQ>
}
 80029ba:	bf00      	nop
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b082      	sub	sp, #8
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f7ff ffa2 	bl	8002914 <SysTick_Config>
 80029d0:	4603      	mov	r3, r0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b084      	sub	sp, #16
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80029e8:	f7ff fae6 	bl	8001fb8 <HAL_GetTick>
 80029ec:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d008      	beq.n	8002a0c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2280      	movs	r2, #128	; 0x80
 80029fe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e052      	b.n	8002ab2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f022 0216 	bic.w	r2, r2, #22
 8002a1a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	695a      	ldr	r2, [r3, #20]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a2a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d103      	bne.n	8002a3c <HAL_DMA_Abort+0x62>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d007      	beq.n	8002a4c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f022 0208 	bic.w	r2, r2, #8
 8002a4a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 0201 	bic.w	r2, r2, #1
 8002a5a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a5c:	e013      	b.n	8002a86 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a5e:	f7ff faab 	bl	8001fb8 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	2b05      	cmp	r3, #5
 8002a6a:	d90c      	bls.n	8002a86 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2220      	movs	r2, #32
 8002a70:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2203      	movs	r2, #3
 8002a76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e015      	b.n	8002ab2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1e4      	bne.n	8002a5e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a98:	223f      	movs	r2, #63	; 0x3f
 8002a9a:	409a      	lsls	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002aba:	b480      	push	{r7}
 8002abc:	b083      	sub	sp, #12
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d004      	beq.n	8002ad8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2280      	movs	r2, #128	; 0x80
 8002ad2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e00c      	b.n	8002af2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2205      	movs	r2, #5
 8002adc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f022 0201 	bic.w	r2, r2, #1
 8002aee:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
	...

08002b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b089      	sub	sp, #36	; 0x24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b12:	2300      	movs	r3, #0
 8002b14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b16:	2300      	movs	r3, #0
 8002b18:	61fb      	str	r3, [r7, #28]
 8002b1a:	e165      	b.n	8002de8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	f040 8154 	bne.w	8002de2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f003 0303 	and.w	r3, r3, #3
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d005      	beq.n	8002b52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d130      	bne.n	8002bb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	2203      	movs	r2, #3
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	43db      	mvns	r3, r3
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	4013      	ands	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	68da      	ldr	r2, [r3, #12]
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b88:	2201      	movs	r2, #1
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	43db      	mvns	r3, r3
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	4013      	ands	r3, r2
 8002b96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	091b      	lsrs	r3, r3, #4
 8002b9e:	f003 0201 	and.w	r2, r3, #1
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f003 0303 	and.w	r3, r3, #3
 8002bbc:	2b03      	cmp	r3, #3
 8002bbe:	d017      	beq.n	8002bf0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	2203      	movs	r2, #3
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	689a      	ldr	r2, [r3, #8]
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f003 0303 	and.w	r3, r3, #3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d123      	bne.n	8002c44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	08da      	lsrs	r2, r3, #3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	3208      	adds	r2, #8
 8002c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	f003 0307 	and.w	r3, r3, #7
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	220f      	movs	r2, #15
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	691a      	ldr	r2, [r3, #16]
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	f003 0307 	and.w	r3, r3, #7
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	08da      	lsrs	r2, r3, #3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	3208      	adds	r2, #8
 8002c3e:	69b9      	ldr	r1, [r7, #24]
 8002c40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	2203      	movs	r2, #3
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	43db      	mvns	r3, r3
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f003 0203 	and.w	r2, r3, #3
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f000 80ae 	beq.w	8002de2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c86:	2300      	movs	r3, #0
 8002c88:	60fb      	str	r3, [r7, #12]
 8002c8a:	4b5d      	ldr	r3, [pc, #372]	; (8002e00 <HAL_GPIO_Init+0x300>)
 8002c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8e:	4a5c      	ldr	r2, [pc, #368]	; (8002e00 <HAL_GPIO_Init+0x300>)
 8002c90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c94:	6453      	str	r3, [r2, #68]	; 0x44
 8002c96:	4b5a      	ldr	r3, [pc, #360]	; (8002e00 <HAL_GPIO_Init+0x300>)
 8002c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ca2:	4a58      	ldr	r2, [pc, #352]	; (8002e04 <HAL_GPIO_Init+0x304>)
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	089b      	lsrs	r3, r3, #2
 8002ca8:	3302      	adds	r3, #2
 8002caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	f003 0303 	and.w	r3, r3, #3
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	220f      	movs	r2, #15
 8002cba:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbe:	43db      	mvns	r3, r3
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a4f      	ldr	r2, [pc, #316]	; (8002e08 <HAL_GPIO_Init+0x308>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d025      	beq.n	8002d1a <HAL_GPIO_Init+0x21a>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a4e      	ldr	r2, [pc, #312]	; (8002e0c <HAL_GPIO_Init+0x30c>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d01f      	beq.n	8002d16 <HAL_GPIO_Init+0x216>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a4d      	ldr	r2, [pc, #308]	; (8002e10 <HAL_GPIO_Init+0x310>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d019      	beq.n	8002d12 <HAL_GPIO_Init+0x212>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a4c      	ldr	r2, [pc, #304]	; (8002e14 <HAL_GPIO_Init+0x314>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d013      	beq.n	8002d0e <HAL_GPIO_Init+0x20e>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a4b      	ldr	r2, [pc, #300]	; (8002e18 <HAL_GPIO_Init+0x318>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d00d      	beq.n	8002d0a <HAL_GPIO_Init+0x20a>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a4a      	ldr	r2, [pc, #296]	; (8002e1c <HAL_GPIO_Init+0x31c>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d007      	beq.n	8002d06 <HAL_GPIO_Init+0x206>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a49      	ldr	r2, [pc, #292]	; (8002e20 <HAL_GPIO_Init+0x320>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d101      	bne.n	8002d02 <HAL_GPIO_Init+0x202>
 8002cfe:	2306      	movs	r3, #6
 8002d00:	e00c      	b.n	8002d1c <HAL_GPIO_Init+0x21c>
 8002d02:	2307      	movs	r3, #7
 8002d04:	e00a      	b.n	8002d1c <HAL_GPIO_Init+0x21c>
 8002d06:	2305      	movs	r3, #5
 8002d08:	e008      	b.n	8002d1c <HAL_GPIO_Init+0x21c>
 8002d0a:	2304      	movs	r3, #4
 8002d0c:	e006      	b.n	8002d1c <HAL_GPIO_Init+0x21c>
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e004      	b.n	8002d1c <HAL_GPIO_Init+0x21c>
 8002d12:	2302      	movs	r3, #2
 8002d14:	e002      	b.n	8002d1c <HAL_GPIO_Init+0x21c>
 8002d16:	2301      	movs	r3, #1
 8002d18:	e000      	b.n	8002d1c <HAL_GPIO_Init+0x21c>
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	69fa      	ldr	r2, [r7, #28]
 8002d1e:	f002 0203 	and.w	r2, r2, #3
 8002d22:	0092      	lsls	r2, r2, #2
 8002d24:	4093      	lsls	r3, r2
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d2c:	4935      	ldr	r1, [pc, #212]	; (8002e04 <HAL_GPIO_Init+0x304>)
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	089b      	lsrs	r3, r3, #2
 8002d32:	3302      	adds	r3, #2
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d3a:	4b3a      	ldr	r3, [pc, #232]	; (8002e24 <HAL_GPIO_Init+0x324>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	43db      	mvns	r3, r3
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	4013      	ands	r3, r2
 8002d48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d5e:	4a31      	ldr	r2, [pc, #196]	; (8002e24 <HAL_GPIO_Init+0x324>)
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d64:	4b2f      	ldr	r3, [pc, #188]	; (8002e24 <HAL_GPIO_Init+0x324>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	43db      	mvns	r3, r3
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	4013      	ands	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d003      	beq.n	8002d88 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d88:	4a26      	ldr	r2, [pc, #152]	; (8002e24 <HAL_GPIO_Init+0x324>)
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d8e:	4b25      	ldr	r3, [pc, #148]	; (8002e24 <HAL_GPIO_Init+0x324>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	43db      	mvns	r3, r3
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002db2:	4a1c      	ldr	r2, [pc, #112]	; (8002e24 <HAL_GPIO_Init+0x324>)
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002db8:	4b1a      	ldr	r3, [pc, #104]	; (8002e24 <HAL_GPIO_Init+0x324>)
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d003      	beq.n	8002ddc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ddc:	4a11      	ldr	r2, [pc, #68]	; (8002e24 <HAL_GPIO_Init+0x324>)
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	3301      	adds	r3, #1
 8002de6:	61fb      	str	r3, [r7, #28]
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	2b0f      	cmp	r3, #15
 8002dec:	f67f ae96 	bls.w	8002b1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002df0:	bf00      	nop
 8002df2:	bf00      	nop
 8002df4:	3724      	adds	r7, #36	; 0x24
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	40023800 	.word	0x40023800
 8002e04:	40013800 	.word	0x40013800
 8002e08:	40020000 	.word	0x40020000
 8002e0c:	40020400 	.word	0x40020400
 8002e10:	40020800 	.word	0x40020800
 8002e14:	40020c00 	.word	0x40020c00
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	40021400 	.word	0x40021400
 8002e20:	40021800 	.word	0x40021800
 8002e24:	40013c00 	.word	0x40013c00

08002e28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	460b      	mov	r3, r1
 8002e32:	807b      	strh	r3, [r7, #2]
 8002e34:	4613      	mov	r3, r2
 8002e36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e38:	787b      	ldrb	r3, [r7, #1]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d003      	beq.n	8002e46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e3e:	887a      	ldrh	r2, [r7, #2]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e44:	e003      	b.n	8002e4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e46:	887b      	ldrh	r3, [r7, #2]
 8002e48:	041a      	lsls	r2, r3, #16
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	619a      	str	r2, [r3, #24]
}
 8002e4e:	bf00      	nop
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
	...

08002e5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d101      	bne.n	8002e70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e0cc      	b.n	800300a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e70:	4b68      	ldr	r3, [pc, #416]	; (8003014 <HAL_RCC_ClockConfig+0x1b8>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 030f 	and.w	r3, r3, #15
 8002e78:	683a      	ldr	r2, [r7, #0]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d90c      	bls.n	8002e98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e7e:	4b65      	ldr	r3, [pc, #404]	; (8003014 <HAL_RCC_ClockConfig+0x1b8>)
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	b2d2      	uxtb	r2, r2
 8002e84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e86:	4b63      	ldr	r3, [pc, #396]	; (8003014 <HAL_RCC_ClockConfig+0x1b8>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 030f 	and.w	r3, r3, #15
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d001      	beq.n	8002e98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e0b8      	b.n	800300a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d020      	beq.n	8002ee6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0304 	and.w	r3, r3, #4
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d005      	beq.n	8002ebc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002eb0:	4b59      	ldr	r3, [pc, #356]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	4a58      	ldr	r2, [pc, #352]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002eba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0308 	and.w	r3, r3, #8
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d005      	beq.n	8002ed4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ec8:	4b53      	ldr	r3, [pc, #332]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	4a52      	ldr	r2, [pc, #328]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002ece:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ed2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ed4:	4b50      	ldr	r3, [pc, #320]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	494d      	ldr	r1, [pc, #308]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d044      	beq.n	8002f7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d107      	bne.n	8002f0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002efa:	4b47      	ldr	r3, [pc, #284]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d119      	bne.n	8002f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e07f      	b.n	800300a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d003      	beq.n	8002f1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f16:	2b03      	cmp	r3, #3
 8002f18:	d107      	bne.n	8002f2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f1a:	4b3f      	ldr	r3, [pc, #252]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d109      	bne.n	8002f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e06f      	b.n	800300a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f2a:	4b3b      	ldr	r3, [pc, #236]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e067      	b.n	800300a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f3a:	4b37      	ldr	r3, [pc, #220]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f023 0203 	bic.w	r2, r3, #3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	4934      	ldr	r1, [pc, #208]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f4c:	f7ff f834 	bl	8001fb8 <HAL_GetTick>
 8002f50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f52:	e00a      	b.n	8002f6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f54:	f7ff f830 	bl	8001fb8 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e04f      	b.n	800300a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f6a:	4b2b      	ldr	r3, [pc, #172]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f003 020c 	and.w	r2, r3, #12
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d1eb      	bne.n	8002f54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f7c:	4b25      	ldr	r3, [pc, #148]	; (8003014 <HAL_RCC_ClockConfig+0x1b8>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 030f 	and.w	r3, r3, #15
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d20c      	bcs.n	8002fa4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f8a:	4b22      	ldr	r3, [pc, #136]	; (8003014 <HAL_RCC_ClockConfig+0x1b8>)
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	b2d2      	uxtb	r2, r2
 8002f90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f92:	4b20      	ldr	r3, [pc, #128]	; (8003014 <HAL_RCC_ClockConfig+0x1b8>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	683a      	ldr	r2, [r7, #0]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d001      	beq.n	8002fa4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e032      	b.n	800300a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d008      	beq.n	8002fc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fb0:	4b19      	ldr	r3, [pc, #100]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	4916      	ldr	r1, [pc, #88]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0308 	and.w	r3, r3, #8
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d009      	beq.n	8002fe2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fce:	4b12      	ldr	r3, [pc, #72]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	490e      	ldr	r1, [pc, #56]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fe2:	f000 f855 	bl	8003090 <HAL_RCC_GetSysClockFreq>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	4b0b      	ldr	r3, [pc, #44]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	091b      	lsrs	r3, r3, #4
 8002fee:	f003 030f 	and.w	r3, r3, #15
 8002ff2:	490a      	ldr	r1, [pc, #40]	; (800301c <HAL_RCC_ClockConfig+0x1c0>)
 8002ff4:	5ccb      	ldrb	r3, [r1, r3]
 8002ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8002ffa:	4a09      	ldr	r2, [pc, #36]	; (8003020 <HAL_RCC_ClockConfig+0x1c4>)
 8002ffc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ffe:	4b09      	ldr	r3, [pc, #36]	; (8003024 <HAL_RCC_ClockConfig+0x1c8>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4618      	mov	r0, r3
 8003004:	f7fe ff94 	bl	8001f30 <HAL_InitTick>

  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	40023c00 	.word	0x40023c00
 8003018:	40023800 	.word	0x40023800
 800301c:	080087d4 	.word	0x080087d4
 8003020:	2000000c 	.word	0x2000000c
 8003024:	20000010 	.word	0x20000010

08003028 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800302c:	4b03      	ldr	r3, [pc, #12]	; (800303c <HAL_RCC_GetHCLKFreq+0x14>)
 800302e:	681b      	ldr	r3, [r3, #0]
}
 8003030:	4618      	mov	r0, r3
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	2000000c 	.word	0x2000000c

08003040 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003044:	f7ff fff0 	bl	8003028 <HAL_RCC_GetHCLKFreq>
 8003048:	4602      	mov	r2, r0
 800304a:	4b05      	ldr	r3, [pc, #20]	; (8003060 <HAL_RCC_GetPCLK1Freq+0x20>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	0a9b      	lsrs	r3, r3, #10
 8003050:	f003 0307 	and.w	r3, r3, #7
 8003054:	4903      	ldr	r1, [pc, #12]	; (8003064 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003056:	5ccb      	ldrb	r3, [r1, r3]
 8003058:	fa22 f303 	lsr.w	r3, r2, r3
}
 800305c:	4618      	mov	r0, r3
 800305e:	bd80      	pop	{r7, pc}
 8003060:	40023800 	.word	0x40023800
 8003064:	080087e4 	.word	0x080087e4

08003068 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800306c:	f7ff ffdc 	bl	8003028 <HAL_RCC_GetHCLKFreq>
 8003070:	4602      	mov	r2, r0
 8003072:	4b05      	ldr	r3, [pc, #20]	; (8003088 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	0b5b      	lsrs	r3, r3, #13
 8003078:	f003 0307 	and.w	r3, r3, #7
 800307c:	4903      	ldr	r1, [pc, #12]	; (800308c <HAL_RCC_GetPCLK2Freq+0x24>)
 800307e:	5ccb      	ldrb	r3, [r1, r3]
 8003080:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003084:	4618      	mov	r0, r3
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40023800 	.word	0x40023800
 800308c:	080087e4 	.word	0x080087e4

08003090 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003090:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003094:	b088      	sub	sp, #32
 8003096:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003098:	2300      	movs	r3, #0
 800309a:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 800309c:	2300      	movs	r3, #0
 800309e:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80030a0:	2300      	movs	r3, #0
 80030a2:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80030a4:	2300      	movs	r3, #0
 80030a6:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80030a8:	2300      	movs	r3, #0
 80030aa:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030ac:	4bce      	ldr	r3, [pc, #824]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x358>)
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f003 030c 	and.w	r3, r3, #12
 80030b4:	2b0c      	cmp	r3, #12
 80030b6:	f200 818d 	bhi.w	80033d4 <HAL_RCC_GetSysClockFreq+0x344>
 80030ba:	a201      	add	r2, pc, #4	; (adr r2, 80030c0 <HAL_RCC_GetSysClockFreq+0x30>)
 80030bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c0:	080030f5 	.word	0x080030f5
 80030c4:	080033d5 	.word	0x080033d5
 80030c8:	080033d5 	.word	0x080033d5
 80030cc:	080033d5 	.word	0x080033d5
 80030d0:	080030fb 	.word	0x080030fb
 80030d4:	080033d5 	.word	0x080033d5
 80030d8:	080033d5 	.word	0x080033d5
 80030dc:	080033d5 	.word	0x080033d5
 80030e0:	08003101 	.word	0x08003101
 80030e4:	080033d5 	.word	0x080033d5
 80030e8:	080033d5 	.word	0x080033d5
 80030ec:	080033d5 	.word	0x080033d5
 80030f0:	08003275 	.word	0x08003275
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030f4:	4bbd      	ldr	r3, [pc, #756]	; (80033ec <HAL_RCC_GetSysClockFreq+0x35c>)
 80030f6:	61bb      	str	r3, [r7, #24]
       break;
 80030f8:	e16f      	b.n	80033da <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030fa:	4bbd      	ldr	r3, [pc, #756]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x360>)
 80030fc:	61bb      	str	r3, [r7, #24]
      break;
 80030fe:	e16c      	b.n	80033da <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003100:	4bb9      	ldr	r3, [pc, #740]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x358>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003108:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800310a:	4bb7      	ldr	r3, [pc, #732]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x358>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d053      	beq.n	80031be <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003116:	4bb4      	ldr	r3, [pc, #720]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x358>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	099b      	lsrs	r3, r3, #6
 800311c:	461a      	mov	r2, r3
 800311e:	f04f 0300 	mov.w	r3, #0
 8003122:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003126:	f04f 0100 	mov.w	r1, #0
 800312a:	ea02 0400 	and.w	r4, r2, r0
 800312e:	603c      	str	r4, [r7, #0]
 8003130:	400b      	ands	r3, r1
 8003132:	607b      	str	r3, [r7, #4]
 8003134:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003138:	4620      	mov	r0, r4
 800313a:	4629      	mov	r1, r5
 800313c:	f04f 0200 	mov.w	r2, #0
 8003140:	f04f 0300 	mov.w	r3, #0
 8003144:	014b      	lsls	r3, r1, #5
 8003146:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800314a:	0142      	lsls	r2, r0, #5
 800314c:	4610      	mov	r0, r2
 800314e:	4619      	mov	r1, r3
 8003150:	4623      	mov	r3, r4
 8003152:	1ac0      	subs	r0, r0, r3
 8003154:	462b      	mov	r3, r5
 8003156:	eb61 0103 	sbc.w	r1, r1, r3
 800315a:	f04f 0200 	mov.w	r2, #0
 800315e:	f04f 0300 	mov.w	r3, #0
 8003162:	018b      	lsls	r3, r1, #6
 8003164:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003168:	0182      	lsls	r2, r0, #6
 800316a:	1a12      	subs	r2, r2, r0
 800316c:	eb63 0301 	sbc.w	r3, r3, r1
 8003170:	f04f 0000 	mov.w	r0, #0
 8003174:	f04f 0100 	mov.w	r1, #0
 8003178:	00d9      	lsls	r1, r3, #3
 800317a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800317e:	00d0      	lsls	r0, r2, #3
 8003180:	4602      	mov	r2, r0
 8003182:	460b      	mov	r3, r1
 8003184:	4621      	mov	r1, r4
 8003186:	1852      	adds	r2, r2, r1
 8003188:	4629      	mov	r1, r5
 800318a:	eb43 0101 	adc.w	r1, r3, r1
 800318e:	460b      	mov	r3, r1
 8003190:	f04f 0000 	mov.w	r0, #0
 8003194:	f04f 0100 	mov.w	r1, #0
 8003198:	0259      	lsls	r1, r3, #9
 800319a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800319e:	0250      	lsls	r0, r2, #9
 80031a0:	4602      	mov	r2, r0
 80031a2:	460b      	mov	r3, r1
 80031a4:	4610      	mov	r0, r2
 80031a6:	4619      	mov	r1, r3
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	461a      	mov	r2, r3
 80031ac:	f04f 0300 	mov.w	r3, #0
 80031b0:	f7fd fd2a 	bl	8000c08 <__aeabi_uldivmod>
 80031b4:	4602      	mov	r2, r0
 80031b6:	460b      	mov	r3, r1
 80031b8:	4613      	mov	r3, r2
 80031ba:	61fb      	str	r3, [r7, #28]
 80031bc:	e04c      	b.n	8003258 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031be:	4b8a      	ldr	r3, [pc, #552]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x358>)
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	099b      	lsrs	r3, r3, #6
 80031c4:	461a      	mov	r2, r3
 80031c6:	f04f 0300 	mov.w	r3, #0
 80031ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80031ce:	f04f 0100 	mov.w	r1, #0
 80031d2:	ea02 0a00 	and.w	sl, r2, r0
 80031d6:	ea03 0b01 	and.w	fp, r3, r1
 80031da:	4650      	mov	r0, sl
 80031dc:	4659      	mov	r1, fp
 80031de:	f04f 0200 	mov.w	r2, #0
 80031e2:	f04f 0300 	mov.w	r3, #0
 80031e6:	014b      	lsls	r3, r1, #5
 80031e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80031ec:	0142      	lsls	r2, r0, #5
 80031ee:	4610      	mov	r0, r2
 80031f0:	4619      	mov	r1, r3
 80031f2:	ebb0 000a 	subs.w	r0, r0, sl
 80031f6:	eb61 010b 	sbc.w	r1, r1, fp
 80031fa:	f04f 0200 	mov.w	r2, #0
 80031fe:	f04f 0300 	mov.w	r3, #0
 8003202:	018b      	lsls	r3, r1, #6
 8003204:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003208:	0182      	lsls	r2, r0, #6
 800320a:	1a12      	subs	r2, r2, r0
 800320c:	eb63 0301 	sbc.w	r3, r3, r1
 8003210:	f04f 0000 	mov.w	r0, #0
 8003214:	f04f 0100 	mov.w	r1, #0
 8003218:	00d9      	lsls	r1, r3, #3
 800321a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800321e:	00d0      	lsls	r0, r2, #3
 8003220:	4602      	mov	r2, r0
 8003222:	460b      	mov	r3, r1
 8003224:	eb12 020a 	adds.w	r2, r2, sl
 8003228:	eb43 030b 	adc.w	r3, r3, fp
 800322c:	f04f 0000 	mov.w	r0, #0
 8003230:	f04f 0100 	mov.w	r1, #0
 8003234:	0299      	lsls	r1, r3, #10
 8003236:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800323a:	0290      	lsls	r0, r2, #10
 800323c:	4602      	mov	r2, r0
 800323e:	460b      	mov	r3, r1
 8003240:	4610      	mov	r0, r2
 8003242:	4619      	mov	r1, r3
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	461a      	mov	r2, r3
 8003248:	f04f 0300 	mov.w	r3, #0
 800324c:	f7fd fcdc 	bl	8000c08 <__aeabi_uldivmod>
 8003250:	4602      	mov	r2, r0
 8003252:	460b      	mov	r3, r1
 8003254:	4613      	mov	r3, r2
 8003256:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003258:	4b63      	ldr	r3, [pc, #396]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x358>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	0c1b      	lsrs	r3, r3, #16
 800325e:	f003 0303 	and.w	r3, r3, #3
 8003262:	3301      	adds	r3, #1
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8003268:	69fa      	ldr	r2, [r7, #28]
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003270:	61bb      	str	r3, [r7, #24]
      break;
 8003272:	e0b2      	b.n	80033da <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003274:	4b5c      	ldr	r3, [pc, #368]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x358>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800327c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800327e:	4b5a      	ldr	r3, [pc, #360]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x358>)
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d04d      	beq.n	8003326 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800328a:	4b57      	ldr	r3, [pc, #348]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x358>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	099b      	lsrs	r3, r3, #6
 8003290:	461a      	mov	r2, r3
 8003292:	f04f 0300 	mov.w	r3, #0
 8003296:	f240 10ff 	movw	r0, #511	; 0x1ff
 800329a:	f04f 0100 	mov.w	r1, #0
 800329e:	ea02 0800 	and.w	r8, r2, r0
 80032a2:	ea03 0901 	and.w	r9, r3, r1
 80032a6:	4640      	mov	r0, r8
 80032a8:	4649      	mov	r1, r9
 80032aa:	f04f 0200 	mov.w	r2, #0
 80032ae:	f04f 0300 	mov.w	r3, #0
 80032b2:	014b      	lsls	r3, r1, #5
 80032b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80032b8:	0142      	lsls	r2, r0, #5
 80032ba:	4610      	mov	r0, r2
 80032bc:	4619      	mov	r1, r3
 80032be:	ebb0 0008 	subs.w	r0, r0, r8
 80032c2:	eb61 0109 	sbc.w	r1, r1, r9
 80032c6:	f04f 0200 	mov.w	r2, #0
 80032ca:	f04f 0300 	mov.w	r3, #0
 80032ce:	018b      	lsls	r3, r1, #6
 80032d0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80032d4:	0182      	lsls	r2, r0, #6
 80032d6:	1a12      	subs	r2, r2, r0
 80032d8:	eb63 0301 	sbc.w	r3, r3, r1
 80032dc:	f04f 0000 	mov.w	r0, #0
 80032e0:	f04f 0100 	mov.w	r1, #0
 80032e4:	00d9      	lsls	r1, r3, #3
 80032e6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032ea:	00d0      	lsls	r0, r2, #3
 80032ec:	4602      	mov	r2, r0
 80032ee:	460b      	mov	r3, r1
 80032f0:	eb12 0208 	adds.w	r2, r2, r8
 80032f4:	eb43 0309 	adc.w	r3, r3, r9
 80032f8:	f04f 0000 	mov.w	r0, #0
 80032fc:	f04f 0100 	mov.w	r1, #0
 8003300:	0259      	lsls	r1, r3, #9
 8003302:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003306:	0250      	lsls	r0, r2, #9
 8003308:	4602      	mov	r2, r0
 800330a:	460b      	mov	r3, r1
 800330c:	4610      	mov	r0, r2
 800330e:	4619      	mov	r1, r3
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	461a      	mov	r2, r3
 8003314:	f04f 0300 	mov.w	r3, #0
 8003318:	f7fd fc76 	bl	8000c08 <__aeabi_uldivmod>
 800331c:	4602      	mov	r2, r0
 800331e:	460b      	mov	r3, r1
 8003320:	4613      	mov	r3, r2
 8003322:	61fb      	str	r3, [r7, #28]
 8003324:	e04a      	b.n	80033bc <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003326:	4b30      	ldr	r3, [pc, #192]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x358>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	099b      	lsrs	r3, r3, #6
 800332c:	461a      	mov	r2, r3
 800332e:	f04f 0300 	mov.w	r3, #0
 8003332:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003336:	f04f 0100 	mov.w	r1, #0
 800333a:	ea02 0400 	and.w	r4, r2, r0
 800333e:	ea03 0501 	and.w	r5, r3, r1
 8003342:	4620      	mov	r0, r4
 8003344:	4629      	mov	r1, r5
 8003346:	f04f 0200 	mov.w	r2, #0
 800334a:	f04f 0300 	mov.w	r3, #0
 800334e:	014b      	lsls	r3, r1, #5
 8003350:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003354:	0142      	lsls	r2, r0, #5
 8003356:	4610      	mov	r0, r2
 8003358:	4619      	mov	r1, r3
 800335a:	1b00      	subs	r0, r0, r4
 800335c:	eb61 0105 	sbc.w	r1, r1, r5
 8003360:	f04f 0200 	mov.w	r2, #0
 8003364:	f04f 0300 	mov.w	r3, #0
 8003368:	018b      	lsls	r3, r1, #6
 800336a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800336e:	0182      	lsls	r2, r0, #6
 8003370:	1a12      	subs	r2, r2, r0
 8003372:	eb63 0301 	sbc.w	r3, r3, r1
 8003376:	f04f 0000 	mov.w	r0, #0
 800337a:	f04f 0100 	mov.w	r1, #0
 800337e:	00d9      	lsls	r1, r3, #3
 8003380:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003384:	00d0      	lsls	r0, r2, #3
 8003386:	4602      	mov	r2, r0
 8003388:	460b      	mov	r3, r1
 800338a:	1912      	adds	r2, r2, r4
 800338c:	eb45 0303 	adc.w	r3, r5, r3
 8003390:	f04f 0000 	mov.w	r0, #0
 8003394:	f04f 0100 	mov.w	r1, #0
 8003398:	0299      	lsls	r1, r3, #10
 800339a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800339e:	0290      	lsls	r0, r2, #10
 80033a0:	4602      	mov	r2, r0
 80033a2:	460b      	mov	r3, r1
 80033a4:	4610      	mov	r0, r2
 80033a6:	4619      	mov	r1, r3
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	461a      	mov	r2, r3
 80033ac:	f04f 0300 	mov.w	r3, #0
 80033b0:	f7fd fc2a 	bl	8000c08 <__aeabi_uldivmod>
 80033b4:	4602      	mov	r2, r0
 80033b6:	460b      	mov	r3, r1
 80033b8:	4613      	mov	r3, r2
 80033ba:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80033bc:	4b0a      	ldr	r3, [pc, #40]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x358>)
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	0f1b      	lsrs	r3, r3, #28
 80033c2:	f003 0307 	and.w	r3, r3, #7
 80033c6:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80033c8:	69fa      	ldr	r2, [r7, #28]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d0:	61bb      	str	r3, [r7, #24]
      break;
 80033d2:	e002      	b.n	80033da <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033d4:	4b05      	ldr	r3, [pc, #20]	; (80033ec <HAL_RCC_GetSysClockFreq+0x35c>)
 80033d6:	61bb      	str	r3, [r7, #24]
      break;
 80033d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033da:	69bb      	ldr	r3, [r7, #24]
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3720      	adds	r7, #32
 80033e0:	46bd      	mov	sp, r7
 80033e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033e6:	bf00      	nop
 80033e8:	40023800 	.word	0x40023800
 80033ec:	00f42400 	.word	0x00f42400
 80033f0:	007a1200 	.word	0x007a1200

080033f4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e28d      	b.n	8003922 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b00      	cmp	r3, #0
 8003410:	f000 8083 	beq.w	800351a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003414:	4b94      	ldr	r3, [pc, #592]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f003 030c 	and.w	r3, r3, #12
 800341c:	2b04      	cmp	r3, #4
 800341e:	d019      	beq.n	8003454 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003420:	4b91      	ldr	r3, [pc, #580]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003428:	2b08      	cmp	r3, #8
 800342a:	d106      	bne.n	800343a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800342c:	4b8e      	ldr	r3, [pc, #568]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003434:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003438:	d00c      	beq.n	8003454 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800343a:	4b8b      	ldr	r3, [pc, #556]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003442:	2b0c      	cmp	r3, #12
 8003444:	d112      	bne.n	800346c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003446:	4b88      	ldr	r3, [pc, #544]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800344e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003452:	d10b      	bne.n	800346c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003454:	4b84      	ldr	r3, [pc, #528]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d05b      	beq.n	8003518 <HAL_RCC_OscConfig+0x124>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d157      	bne.n	8003518 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e25a      	b.n	8003922 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003474:	d106      	bne.n	8003484 <HAL_RCC_OscConfig+0x90>
 8003476:	4b7c      	ldr	r3, [pc, #496]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a7b      	ldr	r2, [pc, #492]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 800347c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003480:	6013      	str	r3, [r2, #0]
 8003482:	e01d      	b.n	80034c0 <HAL_RCC_OscConfig+0xcc>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800348c:	d10c      	bne.n	80034a8 <HAL_RCC_OscConfig+0xb4>
 800348e:	4b76      	ldr	r3, [pc, #472]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a75      	ldr	r2, [pc, #468]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 8003494:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003498:	6013      	str	r3, [r2, #0]
 800349a:	4b73      	ldr	r3, [pc, #460]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a72      	ldr	r2, [pc, #456]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 80034a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034a4:	6013      	str	r3, [r2, #0]
 80034a6:	e00b      	b.n	80034c0 <HAL_RCC_OscConfig+0xcc>
 80034a8:	4b6f      	ldr	r3, [pc, #444]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a6e      	ldr	r2, [pc, #440]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 80034ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034b2:	6013      	str	r3, [r2, #0]
 80034b4:	4b6c      	ldr	r3, [pc, #432]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a6b      	ldr	r2, [pc, #428]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 80034ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d013      	beq.n	80034f0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c8:	f7fe fd76 	bl	8001fb8 <HAL_GetTick>
 80034cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ce:	e008      	b.n	80034e2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034d0:	f7fe fd72 	bl	8001fb8 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b64      	cmp	r3, #100	; 0x64
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e21f      	b.n	8003922 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034e2:	4b61      	ldr	r3, [pc, #388]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d0f0      	beq.n	80034d0 <HAL_RCC_OscConfig+0xdc>
 80034ee:	e014      	b.n	800351a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f0:	f7fe fd62 	bl	8001fb8 <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034f6:	e008      	b.n	800350a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034f8:	f7fe fd5e 	bl	8001fb8 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b64      	cmp	r3, #100	; 0x64
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e20b      	b.n	8003922 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800350a:	4b57      	ldr	r3, [pc, #348]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1f0      	bne.n	80034f8 <HAL_RCC_OscConfig+0x104>
 8003516:	e000      	b.n	800351a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003518:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d06f      	beq.n	8003606 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003526:	4b50      	ldr	r3, [pc, #320]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f003 030c 	and.w	r3, r3, #12
 800352e:	2b00      	cmp	r3, #0
 8003530:	d017      	beq.n	8003562 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003532:	4b4d      	ldr	r3, [pc, #308]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800353a:	2b08      	cmp	r3, #8
 800353c:	d105      	bne.n	800354a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800353e:	4b4a      	ldr	r3, [pc, #296]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00b      	beq.n	8003562 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800354a:	4b47      	ldr	r3, [pc, #284]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003552:	2b0c      	cmp	r3, #12
 8003554:	d11c      	bne.n	8003590 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003556:	4b44      	ldr	r3, [pc, #272]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d116      	bne.n	8003590 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003562:	4b41      	ldr	r3, [pc, #260]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d005      	beq.n	800357a <HAL_RCC_OscConfig+0x186>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d001      	beq.n	800357a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e1d3      	b.n	8003922 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800357a:	4b3b      	ldr	r3, [pc, #236]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	4937      	ldr	r1, [pc, #220]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 800358a:	4313      	orrs	r3, r2
 800358c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800358e:	e03a      	b.n	8003606 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d020      	beq.n	80035da <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003598:	4b34      	ldr	r3, [pc, #208]	; (800366c <HAL_RCC_OscConfig+0x278>)
 800359a:	2201      	movs	r2, #1
 800359c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800359e:	f7fe fd0b 	bl	8001fb8 <HAL_GetTick>
 80035a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035a4:	e008      	b.n	80035b8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035a6:	f7fe fd07 	bl	8001fb8 <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d901      	bls.n	80035b8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e1b4      	b.n	8003922 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035b8:	4b2b      	ldr	r3, [pc, #172]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0302 	and.w	r3, r3, #2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d0f0      	beq.n	80035a6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035c4:	4b28      	ldr	r3, [pc, #160]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	691b      	ldr	r3, [r3, #16]
 80035d0:	00db      	lsls	r3, r3, #3
 80035d2:	4925      	ldr	r1, [pc, #148]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	600b      	str	r3, [r1, #0]
 80035d8:	e015      	b.n	8003606 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035da:	4b24      	ldr	r3, [pc, #144]	; (800366c <HAL_RCC_OscConfig+0x278>)
 80035dc:	2200      	movs	r2, #0
 80035de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e0:	f7fe fcea 	bl	8001fb8 <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035e8:	f7fe fce6 	bl	8001fb8 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e193      	b.n	8003922 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035fa:	4b1b      	ldr	r3, [pc, #108]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1f0      	bne.n	80035e8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0308 	and.w	r3, r3, #8
 800360e:	2b00      	cmp	r3, #0
 8003610:	d036      	beq.n	8003680 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d016      	beq.n	8003648 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800361a:	4b15      	ldr	r3, [pc, #84]	; (8003670 <HAL_RCC_OscConfig+0x27c>)
 800361c:	2201      	movs	r2, #1
 800361e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003620:	f7fe fcca 	bl	8001fb8 <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003626:	e008      	b.n	800363a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003628:	f7fe fcc6 	bl	8001fb8 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b02      	cmp	r3, #2
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e173      	b.n	8003922 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800363a:	4b0b      	ldr	r3, [pc, #44]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 800363c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d0f0      	beq.n	8003628 <HAL_RCC_OscConfig+0x234>
 8003646:	e01b      	b.n	8003680 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003648:	4b09      	ldr	r3, [pc, #36]	; (8003670 <HAL_RCC_OscConfig+0x27c>)
 800364a:	2200      	movs	r2, #0
 800364c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800364e:	f7fe fcb3 	bl	8001fb8 <HAL_GetTick>
 8003652:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003654:	e00e      	b.n	8003674 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003656:	f7fe fcaf 	bl	8001fb8 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b02      	cmp	r3, #2
 8003662:	d907      	bls.n	8003674 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e15c      	b.n	8003922 <HAL_RCC_OscConfig+0x52e>
 8003668:	40023800 	.word	0x40023800
 800366c:	42470000 	.word	0x42470000
 8003670:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003674:	4b8a      	ldr	r3, [pc, #552]	; (80038a0 <HAL_RCC_OscConfig+0x4ac>)
 8003676:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003678:	f003 0302 	and.w	r3, r3, #2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1ea      	bne.n	8003656 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0304 	and.w	r3, r3, #4
 8003688:	2b00      	cmp	r3, #0
 800368a:	f000 8097 	beq.w	80037bc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800368e:	2300      	movs	r3, #0
 8003690:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003692:	4b83      	ldr	r3, [pc, #524]	; (80038a0 <HAL_RCC_OscConfig+0x4ac>)
 8003694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d10f      	bne.n	80036be <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800369e:	2300      	movs	r3, #0
 80036a0:	60bb      	str	r3, [r7, #8]
 80036a2:	4b7f      	ldr	r3, [pc, #508]	; (80038a0 <HAL_RCC_OscConfig+0x4ac>)
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	4a7e      	ldr	r2, [pc, #504]	; (80038a0 <HAL_RCC_OscConfig+0x4ac>)
 80036a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036ac:	6413      	str	r3, [r2, #64]	; 0x40
 80036ae:	4b7c      	ldr	r3, [pc, #496]	; (80038a0 <HAL_RCC_OscConfig+0x4ac>)
 80036b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036b6:	60bb      	str	r3, [r7, #8]
 80036b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036ba:	2301      	movs	r3, #1
 80036bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036be:	4b79      	ldr	r3, [pc, #484]	; (80038a4 <HAL_RCC_OscConfig+0x4b0>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d118      	bne.n	80036fc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036ca:	4b76      	ldr	r3, [pc, #472]	; (80038a4 <HAL_RCC_OscConfig+0x4b0>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a75      	ldr	r2, [pc, #468]	; (80038a4 <HAL_RCC_OscConfig+0x4b0>)
 80036d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036d6:	f7fe fc6f 	bl	8001fb8 <HAL_GetTick>
 80036da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036dc:	e008      	b.n	80036f0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036de:	f7fe fc6b 	bl	8001fb8 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d901      	bls.n	80036f0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e118      	b.n	8003922 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036f0:	4b6c      	ldr	r3, [pc, #432]	; (80038a4 <HAL_RCC_OscConfig+0x4b0>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d0f0      	beq.n	80036de <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d106      	bne.n	8003712 <HAL_RCC_OscConfig+0x31e>
 8003704:	4b66      	ldr	r3, [pc, #408]	; (80038a0 <HAL_RCC_OscConfig+0x4ac>)
 8003706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003708:	4a65      	ldr	r2, [pc, #404]	; (80038a0 <HAL_RCC_OscConfig+0x4ac>)
 800370a:	f043 0301 	orr.w	r3, r3, #1
 800370e:	6713      	str	r3, [r2, #112]	; 0x70
 8003710:	e01c      	b.n	800374c <HAL_RCC_OscConfig+0x358>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	2b05      	cmp	r3, #5
 8003718:	d10c      	bne.n	8003734 <HAL_RCC_OscConfig+0x340>
 800371a:	4b61      	ldr	r3, [pc, #388]	; (80038a0 <HAL_RCC_OscConfig+0x4ac>)
 800371c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371e:	4a60      	ldr	r2, [pc, #384]	; (80038a0 <HAL_RCC_OscConfig+0x4ac>)
 8003720:	f043 0304 	orr.w	r3, r3, #4
 8003724:	6713      	str	r3, [r2, #112]	; 0x70
 8003726:	4b5e      	ldr	r3, [pc, #376]	; (80038a0 <HAL_RCC_OscConfig+0x4ac>)
 8003728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372a:	4a5d      	ldr	r2, [pc, #372]	; (80038a0 <HAL_RCC_OscConfig+0x4ac>)
 800372c:	f043 0301 	orr.w	r3, r3, #1
 8003730:	6713      	str	r3, [r2, #112]	; 0x70
 8003732:	e00b      	b.n	800374c <HAL_RCC_OscConfig+0x358>
 8003734:	4b5a      	ldr	r3, [pc, #360]	; (80038a0 <HAL_RCC_OscConfig+0x4ac>)
 8003736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003738:	4a59      	ldr	r2, [pc, #356]	; (80038a0 <HAL_RCC_OscConfig+0x4ac>)
 800373a:	f023 0301 	bic.w	r3, r3, #1
 800373e:	6713      	str	r3, [r2, #112]	; 0x70
 8003740:	4b57      	ldr	r3, [pc, #348]	; (80038a0 <HAL_RCC_OscConfig+0x4ac>)
 8003742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003744:	4a56      	ldr	r2, [pc, #344]	; (80038a0 <HAL_RCC_OscConfig+0x4ac>)
 8003746:	f023 0304 	bic.w	r3, r3, #4
 800374a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d015      	beq.n	8003780 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003754:	f7fe fc30 	bl	8001fb8 <HAL_GetTick>
 8003758:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800375a:	e00a      	b.n	8003772 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800375c:	f7fe fc2c 	bl	8001fb8 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	f241 3288 	movw	r2, #5000	; 0x1388
 800376a:	4293      	cmp	r3, r2
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e0d7      	b.n	8003922 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003772:	4b4b      	ldr	r3, [pc, #300]	; (80038a0 <HAL_RCC_OscConfig+0x4ac>)
 8003774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d0ee      	beq.n	800375c <HAL_RCC_OscConfig+0x368>
 800377e:	e014      	b.n	80037aa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003780:	f7fe fc1a 	bl	8001fb8 <HAL_GetTick>
 8003784:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003786:	e00a      	b.n	800379e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003788:	f7fe fc16 	bl	8001fb8 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	f241 3288 	movw	r2, #5000	; 0x1388
 8003796:	4293      	cmp	r3, r2
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e0c1      	b.n	8003922 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800379e:	4b40      	ldr	r3, [pc, #256]	; (80038a0 <HAL_RCC_OscConfig+0x4ac>)
 80037a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1ee      	bne.n	8003788 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037aa:	7dfb      	ldrb	r3, [r7, #23]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d105      	bne.n	80037bc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037b0:	4b3b      	ldr	r3, [pc, #236]	; (80038a0 <HAL_RCC_OscConfig+0x4ac>)
 80037b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b4:	4a3a      	ldr	r2, [pc, #232]	; (80038a0 <HAL_RCC_OscConfig+0x4ac>)
 80037b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	699b      	ldr	r3, [r3, #24]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f000 80ad 	beq.w	8003920 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037c6:	4b36      	ldr	r3, [pc, #216]	; (80038a0 <HAL_RCC_OscConfig+0x4ac>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f003 030c 	and.w	r3, r3, #12
 80037ce:	2b08      	cmp	r3, #8
 80037d0:	d060      	beq.n	8003894 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d145      	bne.n	8003866 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037da:	4b33      	ldr	r3, [pc, #204]	; (80038a8 <HAL_RCC_OscConfig+0x4b4>)
 80037dc:	2200      	movs	r2, #0
 80037de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e0:	f7fe fbea 	bl	8001fb8 <HAL_GetTick>
 80037e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037e6:	e008      	b.n	80037fa <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037e8:	f7fe fbe6 	bl	8001fb8 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e093      	b.n	8003922 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037fa:	4b29      	ldr	r3, [pc, #164]	; (80038a0 <HAL_RCC_OscConfig+0x4ac>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1f0      	bne.n	80037e8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	69da      	ldr	r2, [r3, #28]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a1b      	ldr	r3, [r3, #32]
 800380e:	431a      	orrs	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003814:	019b      	lsls	r3, r3, #6
 8003816:	431a      	orrs	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381c:	085b      	lsrs	r3, r3, #1
 800381e:	3b01      	subs	r3, #1
 8003820:	041b      	lsls	r3, r3, #16
 8003822:	431a      	orrs	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003828:	061b      	lsls	r3, r3, #24
 800382a:	431a      	orrs	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003830:	071b      	lsls	r3, r3, #28
 8003832:	491b      	ldr	r1, [pc, #108]	; (80038a0 <HAL_RCC_OscConfig+0x4ac>)
 8003834:	4313      	orrs	r3, r2
 8003836:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003838:	4b1b      	ldr	r3, [pc, #108]	; (80038a8 <HAL_RCC_OscConfig+0x4b4>)
 800383a:	2201      	movs	r2, #1
 800383c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383e:	f7fe fbbb 	bl	8001fb8 <HAL_GetTick>
 8003842:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003844:	e008      	b.n	8003858 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003846:	f7fe fbb7 	bl	8001fb8 <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	2b02      	cmp	r3, #2
 8003852:	d901      	bls.n	8003858 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e064      	b.n	8003922 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003858:	4b11      	ldr	r3, [pc, #68]	; (80038a0 <HAL_RCC_OscConfig+0x4ac>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d0f0      	beq.n	8003846 <HAL_RCC_OscConfig+0x452>
 8003864:	e05c      	b.n	8003920 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003866:	4b10      	ldr	r3, [pc, #64]	; (80038a8 <HAL_RCC_OscConfig+0x4b4>)
 8003868:	2200      	movs	r2, #0
 800386a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800386c:	f7fe fba4 	bl	8001fb8 <HAL_GetTick>
 8003870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003872:	e008      	b.n	8003886 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003874:	f7fe fba0 	bl	8001fb8 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b02      	cmp	r3, #2
 8003880:	d901      	bls.n	8003886 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e04d      	b.n	8003922 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003886:	4b06      	ldr	r3, [pc, #24]	; (80038a0 <HAL_RCC_OscConfig+0x4ac>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1f0      	bne.n	8003874 <HAL_RCC_OscConfig+0x480>
 8003892:	e045      	b.n	8003920 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	2b01      	cmp	r3, #1
 800389a:	d107      	bne.n	80038ac <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e040      	b.n	8003922 <HAL_RCC_OscConfig+0x52e>
 80038a0:	40023800 	.word	0x40023800
 80038a4:	40007000 	.word	0x40007000
 80038a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038ac:	4b1f      	ldr	r3, [pc, #124]	; (800392c <HAL_RCC_OscConfig+0x538>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d030      	beq.n	800391c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d129      	bne.n	800391c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d122      	bne.n	800391c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038dc:	4013      	ands	r3, r2
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d119      	bne.n	800391c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f2:	085b      	lsrs	r3, r3, #1
 80038f4:	3b01      	subs	r3, #1
 80038f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d10f      	bne.n	800391c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003906:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003908:	429a      	cmp	r2, r3
 800390a:	d107      	bne.n	800391c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003916:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003918:	429a      	cmp	r2, r3
 800391a:	d001      	beq.n	8003920 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e000      	b.n	8003922 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3718      	adds	r7, #24
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	40023800 	.word	0x40023800

08003930 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e041      	b.n	80039c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d106      	bne.n	800395c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7fe f966 	bl	8001c28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2202      	movs	r2, #2
 8003960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	3304      	adds	r3, #4
 800396c:	4619      	mov	r1, r3
 800396e:	4610      	mov	r0, r2
 8003970:	f000 fdae 	bl	80044d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
	...

080039d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d001      	beq.n	80039e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e04e      	b.n	8003a86 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2202      	movs	r2, #2
 80039ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68da      	ldr	r2, [r3, #12]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f042 0201 	orr.w	r2, r2, #1
 80039fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a23      	ldr	r2, [pc, #140]	; (8003a94 <HAL_TIM_Base_Start_IT+0xc4>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d022      	beq.n	8003a50 <HAL_TIM_Base_Start_IT+0x80>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a12:	d01d      	beq.n	8003a50 <HAL_TIM_Base_Start_IT+0x80>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a1f      	ldr	r2, [pc, #124]	; (8003a98 <HAL_TIM_Base_Start_IT+0xc8>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d018      	beq.n	8003a50 <HAL_TIM_Base_Start_IT+0x80>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a1e      	ldr	r2, [pc, #120]	; (8003a9c <HAL_TIM_Base_Start_IT+0xcc>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d013      	beq.n	8003a50 <HAL_TIM_Base_Start_IT+0x80>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a1c      	ldr	r2, [pc, #112]	; (8003aa0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d00e      	beq.n	8003a50 <HAL_TIM_Base_Start_IT+0x80>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a1b      	ldr	r2, [pc, #108]	; (8003aa4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d009      	beq.n	8003a50 <HAL_TIM_Base_Start_IT+0x80>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a19      	ldr	r2, [pc, #100]	; (8003aa8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d004      	beq.n	8003a50 <HAL_TIM_Base_Start_IT+0x80>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a18      	ldr	r2, [pc, #96]	; (8003aac <HAL_TIM_Base_Start_IT+0xdc>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d111      	bne.n	8003a74 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f003 0307 	and.w	r3, r3, #7
 8003a5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2b06      	cmp	r3, #6
 8003a60:	d010      	beq.n	8003a84 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f042 0201 	orr.w	r2, r2, #1
 8003a70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a72:	e007      	b.n	8003a84 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f042 0201 	orr.w	r2, r2, #1
 8003a82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3714      	adds	r7, #20
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	40010000 	.word	0x40010000
 8003a98:	40000400 	.word	0x40000400
 8003a9c:	40000800 	.word	0x40000800
 8003aa0:	40000c00 	.word	0x40000c00
 8003aa4:	40010400 	.word	0x40010400
 8003aa8:	40014000 	.word	0x40014000
 8003aac:	40001800 	.word	0x40001800

08003ab0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e041      	b.n	8003b46 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d106      	bne.n	8003adc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 f839 	bl	8003b4e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2202      	movs	r2, #2
 8003ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	3304      	adds	r3, #4
 8003aec:	4619      	mov	r1, r3
 8003aee:	4610      	mov	r0, r2
 8003af0:	f000 fcee 	bl	80044d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3708      	adds	r7, #8
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b083      	sub	sp, #12
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003b56:	bf00      	nop
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
	...

08003b64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d109      	bne.n	8003b88 <HAL_TIM_PWM_Start+0x24>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	bf14      	ite	ne
 8003b80:	2301      	movne	r3, #1
 8003b82:	2300      	moveq	r3, #0
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	e022      	b.n	8003bce <HAL_TIM_PWM_Start+0x6a>
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	2b04      	cmp	r3, #4
 8003b8c:	d109      	bne.n	8003ba2 <HAL_TIM_PWM_Start+0x3e>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	bf14      	ite	ne
 8003b9a:	2301      	movne	r3, #1
 8003b9c:	2300      	moveq	r3, #0
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	e015      	b.n	8003bce <HAL_TIM_PWM_Start+0x6a>
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	2b08      	cmp	r3, #8
 8003ba6:	d109      	bne.n	8003bbc <HAL_TIM_PWM_Start+0x58>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	bf14      	ite	ne
 8003bb4:	2301      	movne	r3, #1
 8003bb6:	2300      	moveq	r3, #0
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	e008      	b.n	8003bce <HAL_TIM_PWM_Start+0x6a>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	bf14      	ite	ne
 8003bc8:	2301      	movne	r3, #1
 8003bca:	2300      	moveq	r3, #0
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e07c      	b.n	8003cd0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d104      	bne.n	8003be6 <HAL_TIM_PWM_Start+0x82>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2202      	movs	r2, #2
 8003be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003be4:	e013      	b.n	8003c0e <HAL_TIM_PWM_Start+0xaa>
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	2b04      	cmp	r3, #4
 8003bea:	d104      	bne.n	8003bf6 <HAL_TIM_PWM_Start+0x92>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2202      	movs	r2, #2
 8003bf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bf4:	e00b      	b.n	8003c0e <HAL_TIM_PWM_Start+0xaa>
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	2b08      	cmp	r3, #8
 8003bfa:	d104      	bne.n	8003c06 <HAL_TIM_PWM_Start+0xa2>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2202      	movs	r2, #2
 8003c00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c04:	e003      	b.n	8003c0e <HAL_TIM_PWM_Start+0xaa>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2202      	movs	r2, #2
 8003c0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2201      	movs	r2, #1
 8003c14:	6839      	ldr	r1, [r7, #0]
 8003c16:	4618      	mov	r0, r3
 8003c18:	f000 ff44 	bl	8004aa4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a2d      	ldr	r2, [pc, #180]	; (8003cd8 <HAL_TIM_PWM_Start+0x174>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d004      	beq.n	8003c30 <HAL_TIM_PWM_Start+0xcc>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a2c      	ldr	r2, [pc, #176]	; (8003cdc <HAL_TIM_PWM_Start+0x178>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d101      	bne.n	8003c34 <HAL_TIM_PWM_Start+0xd0>
 8003c30:	2301      	movs	r3, #1
 8003c32:	e000      	b.n	8003c36 <HAL_TIM_PWM_Start+0xd2>
 8003c34:	2300      	movs	r3, #0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d007      	beq.n	8003c4a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c48:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a22      	ldr	r2, [pc, #136]	; (8003cd8 <HAL_TIM_PWM_Start+0x174>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d022      	beq.n	8003c9a <HAL_TIM_PWM_Start+0x136>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c5c:	d01d      	beq.n	8003c9a <HAL_TIM_PWM_Start+0x136>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a1f      	ldr	r2, [pc, #124]	; (8003ce0 <HAL_TIM_PWM_Start+0x17c>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d018      	beq.n	8003c9a <HAL_TIM_PWM_Start+0x136>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a1d      	ldr	r2, [pc, #116]	; (8003ce4 <HAL_TIM_PWM_Start+0x180>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d013      	beq.n	8003c9a <HAL_TIM_PWM_Start+0x136>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a1c      	ldr	r2, [pc, #112]	; (8003ce8 <HAL_TIM_PWM_Start+0x184>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d00e      	beq.n	8003c9a <HAL_TIM_PWM_Start+0x136>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a16      	ldr	r2, [pc, #88]	; (8003cdc <HAL_TIM_PWM_Start+0x178>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d009      	beq.n	8003c9a <HAL_TIM_PWM_Start+0x136>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a18      	ldr	r2, [pc, #96]	; (8003cec <HAL_TIM_PWM_Start+0x188>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d004      	beq.n	8003c9a <HAL_TIM_PWM_Start+0x136>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a16      	ldr	r2, [pc, #88]	; (8003cf0 <HAL_TIM_PWM_Start+0x18c>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d111      	bne.n	8003cbe <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f003 0307 	and.w	r3, r3, #7
 8003ca4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2b06      	cmp	r3, #6
 8003caa:	d010      	beq.n	8003cce <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f042 0201 	orr.w	r2, r2, #1
 8003cba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cbc:	e007      	b.n	8003cce <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f042 0201 	orr.w	r2, r2, #1
 8003ccc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3710      	adds	r7, #16
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	40010000 	.word	0x40010000
 8003cdc:	40010400 	.word	0x40010400
 8003ce0:	40000400 	.word	0x40000400
 8003ce4:	40000800 	.word	0x40000800
 8003ce8:	40000c00 	.word	0x40000c00
 8003cec:	40014000 	.word	0x40014000
 8003cf0:	40001800 	.word	0x40001800

08003cf4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b086      	sub	sp, #24
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d101      	bne.n	8003d08 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e097      	b.n	8003e38 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d106      	bne.n	8003d22 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f7fd ffc1 	bl	8001ca4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2202      	movs	r2, #2
 8003d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	6812      	ldr	r2, [r2, #0]
 8003d34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d38:	f023 0307 	bic.w	r3, r3, #7
 8003d3c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	3304      	adds	r3, #4
 8003d46:	4619      	mov	r1, r3
 8003d48:	4610      	mov	r0, r2
 8003d4a:	f000 fbc1 	bl	80044d0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	6a1b      	ldr	r3, [r3, #32]
 8003d64:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	697a      	ldr	r2, [r7, #20]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d76:	f023 0303 	bic.w	r3, r3, #3
 8003d7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	689a      	ldr	r2, [r3, #8]
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	021b      	lsls	r3, r3, #8
 8003d86:	4313      	orrs	r3, r2
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003d94:	f023 030c 	bic.w	r3, r3, #12
 8003d98:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003da0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003da4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	68da      	ldr	r2, [r3, #12]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	69db      	ldr	r3, [r3, #28]
 8003dae:	021b      	lsls	r3, r3, #8
 8003db0:	4313      	orrs	r3, r2
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	011a      	lsls	r2, r3, #4
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	6a1b      	ldr	r3, [r3, #32]
 8003dc2:	031b      	lsls	r3, r3, #12
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003dd2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003dda:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685a      	ldr	r2, [r3, #4]
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	695b      	ldr	r3, [r3, #20]
 8003de4:	011b      	lsls	r3, r3, #4
 8003de6:	4313      	orrs	r3, r2
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	697a      	ldr	r2, [r7, #20]
 8003df4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2201      	movs	r2, #1
 8003e12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2201      	movs	r2, #1
 8003e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3718      	adds	r7, #24
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e50:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e58:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e60:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003e68:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d110      	bne.n	8003e92 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e70:	7bfb      	ldrb	r3, [r7, #15]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d102      	bne.n	8003e7c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003e76:	7b7b      	ldrb	r3, [r7, #13]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d001      	beq.n	8003e80 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e069      	b.n	8003f54 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2202      	movs	r2, #2
 8003e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e90:	e031      	b.n	8003ef6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	2b04      	cmp	r3, #4
 8003e96:	d110      	bne.n	8003eba <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e98:	7bbb      	ldrb	r3, [r7, #14]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d102      	bne.n	8003ea4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003e9e:	7b3b      	ldrb	r3, [r7, #12]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d001      	beq.n	8003ea8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e055      	b.n	8003f54 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2202      	movs	r2, #2
 8003eac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003eb8:	e01d      	b.n	8003ef6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003eba:	7bfb      	ldrb	r3, [r7, #15]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d108      	bne.n	8003ed2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ec0:	7bbb      	ldrb	r3, [r7, #14]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d105      	bne.n	8003ed2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ec6:	7b7b      	ldrb	r3, [r7, #13]
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d102      	bne.n	8003ed2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ecc:	7b3b      	ldrb	r3, [r7, #12]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d001      	beq.n	8003ed6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e03e      	b.n	8003f54 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2202      	movs	r2, #2
 8003eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2202      	movs	r2, #2
 8003ee2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2202      	movs	r2, #2
 8003eea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2202      	movs	r2, #2
 8003ef2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d003      	beq.n	8003f04 <HAL_TIM_Encoder_Start+0xc4>
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	2b04      	cmp	r3, #4
 8003f00:	d008      	beq.n	8003f14 <HAL_TIM_Encoder_Start+0xd4>
 8003f02:	e00f      	b.n	8003f24 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	2100      	movs	r1, #0
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f000 fdc9 	bl	8004aa4 <TIM_CCxChannelCmd>
      break;
 8003f12:	e016      	b.n	8003f42 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	2104      	movs	r1, #4
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f000 fdc1 	bl	8004aa4 <TIM_CCxChannelCmd>
      break;
 8003f22:	e00e      	b.n	8003f42 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	2100      	movs	r1, #0
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f000 fdb9 	bl	8004aa4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2201      	movs	r2, #1
 8003f38:	2104      	movs	r1, #4
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f000 fdb2 	bl	8004aa4 <TIM_CCxChannelCmd>
      break;
 8003f40:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f042 0201 	orr.w	r2, r2, #1
 8003f50:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3710      	adds	r7, #16
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d122      	bne.n	8003fb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	f003 0302 	and.w	r3, r3, #2
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d11b      	bne.n	8003fb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f06f 0202 	mvn.w	r2, #2
 8003f88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	f003 0303 	and.w	r3, r3, #3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d003      	beq.n	8003fa6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 fa77 	bl	8004492 <HAL_TIM_IC_CaptureCallback>
 8003fa4:	e005      	b.n	8003fb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 fa69 	bl	800447e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f000 fa7a 	bl	80044a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	f003 0304 	and.w	r3, r3, #4
 8003fc2:	2b04      	cmp	r3, #4
 8003fc4:	d122      	bne.n	800400c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	f003 0304 	and.w	r3, r3, #4
 8003fd0:	2b04      	cmp	r3, #4
 8003fd2:	d11b      	bne.n	800400c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f06f 0204 	mvn.w	r2, #4
 8003fdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2202      	movs	r2, #2
 8003fe2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d003      	beq.n	8003ffa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 fa4d 	bl	8004492 <HAL_TIM_IC_CaptureCallback>
 8003ff8:	e005      	b.n	8004006 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 fa3f 	bl	800447e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 fa50 	bl	80044a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	f003 0308 	and.w	r3, r3, #8
 8004016:	2b08      	cmp	r3, #8
 8004018:	d122      	bne.n	8004060 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	f003 0308 	and.w	r3, r3, #8
 8004024:	2b08      	cmp	r3, #8
 8004026:	d11b      	bne.n	8004060 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f06f 0208 	mvn.w	r2, #8
 8004030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2204      	movs	r2, #4
 8004036:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	69db      	ldr	r3, [r3, #28]
 800403e:	f003 0303 	and.w	r3, r3, #3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d003      	beq.n	800404e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 fa23 	bl	8004492 <HAL_TIM_IC_CaptureCallback>
 800404c:	e005      	b.n	800405a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 fa15 	bl	800447e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 fa26 	bl	80044a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	f003 0310 	and.w	r3, r3, #16
 800406a:	2b10      	cmp	r3, #16
 800406c:	d122      	bne.n	80040b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	f003 0310 	and.w	r3, r3, #16
 8004078:	2b10      	cmp	r3, #16
 800407a:	d11b      	bne.n	80040b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f06f 0210 	mvn.w	r2, #16
 8004084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2208      	movs	r2, #8
 800408a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	69db      	ldr	r3, [r3, #28]
 8004092:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004096:	2b00      	cmp	r3, #0
 8004098:	d003      	beq.n	80040a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 f9f9 	bl	8004492 <HAL_TIM_IC_CaptureCallback>
 80040a0:	e005      	b.n	80040ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f9eb 	bl	800447e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 f9fc 	bl	80044a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d10e      	bne.n	80040e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	f003 0301 	and.w	r3, r3, #1
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d107      	bne.n	80040e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f06f 0201 	mvn.w	r2, #1
 80040d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f7fd fafe 	bl	80016dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ea:	2b80      	cmp	r3, #128	; 0x80
 80040ec:	d10e      	bne.n	800410c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040f8:	2b80      	cmp	r3, #128	; 0x80
 80040fa:	d107      	bne.n	800410c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 fdca 	bl	8004ca0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004116:	2b40      	cmp	r3, #64	; 0x40
 8004118:	d10e      	bne.n	8004138 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004124:	2b40      	cmp	r3, #64	; 0x40
 8004126:	d107      	bne.n	8004138 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 f9c1 	bl	80044ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	f003 0320 	and.w	r3, r3, #32
 8004142:	2b20      	cmp	r3, #32
 8004144:	d10e      	bne.n	8004164 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	f003 0320 	and.w	r3, r3, #32
 8004150:	2b20      	cmp	r3, #32
 8004152:	d107      	bne.n	8004164 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f06f 0220 	mvn.w	r2, #32
 800415c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 fd94 	bl	8004c8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004164:	bf00      	nop
 8004166:	3708      	adds	r7, #8
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004178:	2300      	movs	r3, #0
 800417a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004182:	2b01      	cmp	r3, #1
 8004184:	d101      	bne.n	800418a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004186:	2302      	movs	r3, #2
 8004188:	e0ae      	b.n	80042e8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2b0c      	cmp	r3, #12
 8004196:	f200 809f 	bhi.w	80042d8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800419a:	a201      	add	r2, pc, #4	; (adr r2, 80041a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800419c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a0:	080041d5 	.word	0x080041d5
 80041a4:	080042d9 	.word	0x080042d9
 80041a8:	080042d9 	.word	0x080042d9
 80041ac:	080042d9 	.word	0x080042d9
 80041b0:	08004215 	.word	0x08004215
 80041b4:	080042d9 	.word	0x080042d9
 80041b8:	080042d9 	.word	0x080042d9
 80041bc:	080042d9 	.word	0x080042d9
 80041c0:	08004257 	.word	0x08004257
 80041c4:	080042d9 	.word	0x080042d9
 80041c8:	080042d9 	.word	0x080042d9
 80041cc:	080042d9 	.word	0x080042d9
 80041d0:	08004297 	.word	0x08004297
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68b9      	ldr	r1, [r7, #8]
 80041da:	4618      	mov	r0, r3
 80041dc:	f000 fa18 	bl	8004610 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	699a      	ldr	r2, [r3, #24]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f042 0208 	orr.w	r2, r2, #8
 80041ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	699a      	ldr	r2, [r3, #24]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f022 0204 	bic.w	r2, r2, #4
 80041fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	6999      	ldr	r1, [r3, #24]
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	691a      	ldr	r2, [r3, #16]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	430a      	orrs	r2, r1
 8004210:	619a      	str	r2, [r3, #24]
      break;
 8004212:	e064      	b.n	80042de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68b9      	ldr	r1, [r7, #8]
 800421a:	4618      	mov	r0, r3
 800421c:	f000 fa68 	bl	80046f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	699a      	ldr	r2, [r3, #24]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800422e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	699a      	ldr	r2, [r3, #24]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800423e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6999      	ldr	r1, [r3, #24]
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	021a      	lsls	r2, r3, #8
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	430a      	orrs	r2, r1
 8004252:	619a      	str	r2, [r3, #24]
      break;
 8004254:	e043      	b.n	80042de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68b9      	ldr	r1, [r7, #8]
 800425c:	4618      	mov	r0, r3
 800425e:	f000 fabd 	bl	80047dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	69da      	ldr	r2, [r3, #28]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f042 0208 	orr.w	r2, r2, #8
 8004270:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	69da      	ldr	r2, [r3, #28]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f022 0204 	bic.w	r2, r2, #4
 8004280:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	69d9      	ldr	r1, [r3, #28]
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	691a      	ldr	r2, [r3, #16]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	430a      	orrs	r2, r1
 8004292:	61da      	str	r2, [r3, #28]
      break;
 8004294:	e023      	b.n	80042de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68b9      	ldr	r1, [r7, #8]
 800429c:	4618      	mov	r0, r3
 800429e:	f000 fb11 	bl	80048c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	69da      	ldr	r2, [r3, #28]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	69da      	ldr	r2, [r3, #28]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	69d9      	ldr	r1, [r3, #28]
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	021a      	lsls	r2, r3, #8
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	430a      	orrs	r2, r1
 80042d4:	61da      	str	r2, [r3, #28]
      break;
 80042d6:	e002      	b.n	80042de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	75fb      	strb	r3, [r7, #23]
      break;
 80042dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80042e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3718      	adds	r7, #24
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042fa:	2300      	movs	r3, #0
 80042fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004304:	2b01      	cmp	r3, #1
 8004306:	d101      	bne.n	800430c <HAL_TIM_ConfigClockSource+0x1c>
 8004308:	2302      	movs	r3, #2
 800430a:	e0b4      	b.n	8004476 <HAL_TIM_ConfigClockSource+0x186>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2202      	movs	r2, #2
 8004318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800432a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004332:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68ba      	ldr	r2, [r7, #8]
 800433a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004344:	d03e      	beq.n	80043c4 <HAL_TIM_ConfigClockSource+0xd4>
 8004346:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800434a:	f200 8087 	bhi.w	800445c <HAL_TIM_ConfigClockSource+0x16c>
 800434e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004352:	f000 8086 	beq.w	8004462 <HAL_TIM_ConfigClockSource+0x172>
 8004356:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800435a:	d87f      	bhi.n	800445c <HAL_TIM_ConfigClockSource+0x16c>
 800435c:	2b70      	cmp	r3, #112	; 0x70
 800435e:	d01a      	beq.n	8004396 <HAL_TIM_ConfigClockSource+0xa6>
 8004360:	2b70      	cmp	r3, #112	; 0x70
 8004362:	d87b      	bhi.n	800445c <HAL_TIM_ConfigClockSource+0x16c>
 8004364:	2b60      	cmp	r3, #96	; 0x60
 8004366:	d050      	beq.n	800440a <HAL_TIM_ConfigClockSource+0x11a>
 8004368:	2b60      	cmp	r3, #96	; 0x60
 800436a:	d877      	bhi.n	800445c <HAL_TIM_ConfigClockSource+0x16c>
 800436c:	2b50      	cmp	r3, #80	; 0x50
 800436e:	d03c      	beq.n	80043ea <HAL_TIM_ConfigClockSource+0xfa>
 8004370:	2b50      	cmp	r3, #80	; 0x50
 8004372:	d873      	bhi.n	800445c <HAL_TIM_ConfigClockSource+0x16c>
 8004374:	2b40      	cmp	r3, #64	; 0x40
 8004376:	d058      	beq.n	800442a <HAL_TIM_ConfigClockSource+0x13a>
 8004378:	2b40      	cmp	r3, #64	; 0x40
 800437a:	d86f      	bhi.n	800445c <HAL_TIM_ConfigClockSource+0x16c>
 800437c:	2b30      	cmp	r3, #48	; 0x30
 800437e:	d064      	beq.n	800444a <HAL_TIM_ConfigClockSource+0x15a>
 8004380:	2b30      	cmp	r3, #48	; 0x30
 8004382:	d86b      	bhi.n	800445c <HAL_TIM_ConfigClockSource+0x16c>
 8004384:	2b20      	cmp	r3, #32
 8004386:	d060      	beq.n	800444a <HAL_TIM_ConfigClockSource+0x15a>
 8004388:	2b20      	cmp	r3, #32
 800438a:	d867      	bhi.n	800445c <HAL_TIM_ConfigClockSource+0x16c>
 800438c:	2b00      	cmp	r3, #0
 800438e:	d05c      	beq.n	800444a <HAL_TIM_ConfigClockSource+0x15a>
 8004390:	2b10      	cmp	r3, #16
 8004392:	d05a      	beq.n	800444a <HAL_TIM_ConfigClockSource+0x15a>
 8004394:	e062      	b.n	800445c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6818      	ldr	r0, [r3, #0]
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	6899      	ldr	r1, [r3, #8]
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	685a      	ldr	r2, [r3, #4]
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	f000 fb5d 	bl	8004a64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80043b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68ba      	ldr	r2, [r7, #8]
 80043c0:	609a      	str	r2, [r3, #8]
      break;
 80043c2:	e04f      	b.n	8004464 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6818      	ldr	r0, [r3, #0]
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	6899      	ldr	r1, [r3, #8]
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	685a      	ldr	r2, [r3, #4]
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	f000 fb46 	bl	8004a64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	689a      	ldr	r2, [r3, #8]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043e6:	609a      	str	r2, [r3, #8]
      break;
 80043e8:	e03c      	b.n	8004464 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6818      	ldr	r0, [r3, #0]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	6859      	ldr	r1, [r3, #4]
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	461a      	mov	r2, r3
 80043f8:	f000 faba 	bl	8004970 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2150      	movs	r1, #80	; 0x50
 8004402:	4618      	mov	r0, r3
 8004404:	f000 fb13 	bl	8004a2e <TIM_ITRx_SetConfig>
      break;
 8004408:	e02c      	b.n	8004464 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6818      	ldr	r0, [r3, #0]
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	6859      	ldr	r1, [r3, #4]
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	461a      	mov	r2, r3
 8004418:	f000 fad9 	bl	80049ce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2160      	movs	r1, #96	; 0x60
 8004422:	4618      	mov	r0, r3
 8004424:	f000 fb03 	bl	8004a2e <TIM_ITRx_SetConfig>
      break;
 8004428:	e01c      	b.n	8004464 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6818      	ldr	r0, [r3, #0]
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	6859      	ldr	r1, [r3, #4]
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	461a      	mov	r2, r3
 8004438:	f000 fa9a 	bl	8004970 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2140      	movs	r1, #64	; 0x40
 8004442:	4618      	mov	r0, r3
 8004444:	f000 faf3 	bl	8004a2e <TIM_ITRx_SetConfig>
      break;
 8004448:	e00c      	b.n	8004464 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4619      	mov	r1, r3
 8004454:	4610      	mov	r0, r2
 8004456:	f000 faea 	bl	8004a2e <TIM_ITRx_SetConfig>
      break;
 800445a:	e003      	b.n	8004464 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	73fb      	strb	r3, [r7, #15]
      break;
 8004460:	e000      	b.n	8004464 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004462:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004474:	7bfb      	ldrb	r3, [r7, #15]
}
 8004476:	4618      	mov	r0, r3
 8004478:	3710      	adds	r7, #16
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800447e:	b480      	push	{r7}
 8004480:	b083      	sub	sp, #12
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004486:	bf00      	nop
 8004488:	370c      	adds	r7, #12
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr

08004492 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004492:	b480      	push	{r7}
 8004494:	b083      	sub	sp, #12
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800449a:	bf00      	nop
 800449c:	370c      	adds	r7, #12
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr

080044a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044a6:	b480      	push	{r7}
 80044a8:	b083      	sub	sp, #12
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044ae:	bf00      	nop
 80044b0:	370c      	adds	r7, #12
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr

080044ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044ba:	b480      	push	{r7}
 80044bc:	b083      	sub	sp, #12
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044c2:	bf00      	nop
 80044c4:	370c      	adds	r7, #12
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
	...

080044d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b085      	sub	sp, #20
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a40      	ldr	r2, [pc, #256]	; (80045e4 <TIM_Base_SetConfig+0x114>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d013      	beq.n	8004510 <TIM_Base_SetConfig+0x40>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ee:	d00f      	beq.n	8004510 <TIM_Base_SetConfig+0x40>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a3d      	ldr	r2, [pc, #244]	; (80045e8 <TIM_Base_SetConfig+0x118>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d00b      	beq.n	8004510 <TIM_Base_SetConfig+0x40>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4a3c      	ldr	r2, [pc, #240]	; (80045ec <TIM_Base_SetConfig+0x11c>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d007      	beq.n	8004510 <TIM_Base_SetConfig+0x40>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a3b      	ldr	r2, [pc, #236]	; (80045f0 <TIM_Base_SetConfig+0x120>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d003      	beq.n	8004510 <TIM_Base_SetConfig+0x40>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a3a      	ldr	r2, [pc, #232]	; (80045f4 <TIM_Base_SetConfig+0x124>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d108      	bne.n	8004522 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004516:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	4313      	orrs	r3, r2
 8004520:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a2f      	ldr	r2, [pc, #188]	; (80045e4 <TIM_Base_SetConfig+0x114>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d02b      	beq.n	8004582 <TIM_Base_SetConfig+0xb2>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004530:	d027      	beq.n	8004582 <TIM_Base_SetConfig+0xb2>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a2c      	ldr	r2, [pc, #176]	; (80045e8 <TIM_Base_SetConfig+0x118>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d023      	beq.n	8004582 <TIM_Base_SetConfig+0xb2>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a2b      	ldr	r2, [pc, #172]	; (80045ec <TIM_Base_SetConfig+0x11c>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d01f      	beq.n	8004582 <TIM_Base_SetConfig+0xb2>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a2a      	ldr	r2, [pc, #168]	; (80045f0 <TIM_Base_SetConfig+0x120>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d01b      	beq.n	8004582 <TIM_Base_SetConfig+0xb2>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a29      	ldr	r2, [pc, #164]	; (80045f4 <TIM_Base_SetConfig+0x124>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d017      	beq.n	8004582 <TIM_Base_SetConfig+0xb2>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a28      	ldr	r2, [pc, #160]	; (80045f8 <TIM_Base_SetConfig+0x128>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d013      	beq.n	8004582 <TIM_Base_SetConfig+0xb2>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a27      	ldr	r2, [pc, #156]	; (80045fc <TIM_Base_SetConfig+0x12c>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d00f      	beq.n	8004582 <TIM_Base_SetConfig+0xb2>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a26      	ldr	r2, [pc, #152]	; (8004600 <TIM_Base_SetConfig+0x130>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d00b      	beq.n	8004582 <TIM_Base_SetConfig+0xb2>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a25      	ldr	r2, [pc, #148]	; (8004604 <TIM_Base_SetConfig+0x134>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d007      	beq.n	8004582 <TIM_Base_SetConfig+0xb2>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a24      	ldr	r2, [pc, #144]	; (8004608 <TIM_Base_SetConfig+0x138>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d003      	beq.n	8004582 <TIM_Base_SetConfig+0xb2>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a23      	ldr	r2, [pc, #140]	; (800460c <TIM_Base_SetConfig+0x13c>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d108      	bne.n	8004594 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004588:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	4313      	orrs	r3, r2
 8004592:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	4313      	orrs	r3, r2
 80045a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	689a      	ldr	r2, [r3, #8]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4a0a      	ldr	r2, [pc, #40]	; (80045e4 <TIM_Base_SetConfig+0x114>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d003      	beq.n	80045c8 <TIM_Base_SetConfig+0xf8>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a0c      	ldr	r2, [pc, #48]	; (80045f4 <TIM_Base_SetConfig+0x124>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d103      	bne.n	80045d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	691a      	ldr	r2, [r3, #16]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	615a      	str	r2, [r3, #20]
}
 80045d6:	bf00      	nop
 80045d8:	3714      	adds	r7, #20
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	40010000 	.word	0x40010000
 80045e8:	40000400 	.word	0x40000400
 80045ec:	40000800 	.word	0x40000800
 80045f0:	40000c00 	.word	0x40000c00
 80045f4:	40010400 	.word	0x40010400
 80045f8:	40014000 	.word	0x40014000
 80045fc:	40014400 	.word	0x40014400
 8004600:	40014800 	.word	0x40014800
 8004604:	40001800 	.word	0x40001800
 8004608:	40001c00 	.word	0x40001c00
 800460c:	40002000 	.word	0x40002000

08004610 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004610:	b480      	push	{r7}
 8004612:	b087      	sub	sp, #28
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a1b      	ldr	r3, [r3, #32]
 800461e:	f023 0201 	bic.w	r2, r3, #1
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a1b      	ldr	r3, [r3, #32]
 800462a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800463e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f023 0303 	bic.w	r3, r3, #3
 8004646:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	4313      	orrs	r3, r2
 8004650:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	f023 0302 	bic.w	r3, r3, #2
 8004658:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	4313      	orrs	r3, r2
 8004662:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a20      	ldr	r2, [pc, #128]	; (80046e8 <TIM_OC1_SetConfig+0xd8>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d003      	beq.n	8004674 <TIM_OC1_SetConfig+0x64>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a1f      	ldr	r2, [pc, #124]	; (80046ec <TIM_OC1_SetConfig+0xdc>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d10c      	bne.n	800468e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	f023 0308 	bic.w	r3, r3, #8
 800467a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	697a      	ldr	r2, [r7, #20]
 8004682:	4313      	orrs	r3, r2
 8004684:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	f023 0304 	bic.w	r3, r3, #4
 800468c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a15      	ldr	r2, [pc, #84]	; (80046e8 <TIM_OC1_SetConfig+0xd8>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d003      	beq.n	800469e <TIM_OC1_SetConfig+0x8e>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a14      	ldr	r2, [pc, #80]	; (80046ec <TIM_OC1_SetConfig+0xdc>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d111      	bne.n	80046c2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	695b      	ldr	r3, [r3, #20]
 80046b2:	693a      	ldr	r2, [r7, #16]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	4313      	orrs	r3, r2
 80046c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	693a      	ldr	r2, [r7, #16]
 80046c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	685a      	ldr	r2, [r3, #4]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	697a      	ldr	r2, [r7, #20]
 80046da:	621a      	str	r2, [r3, #32]
}
 80046dc:	bf00      	nop
 80046de:	371c      	adds	r7, #28
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr
 80046e8:	40010000 	.word	0x40010000
 80046ec:	40010400 	.word	0x40010400

080046f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b087      	sub	sp, #28
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	f023 0210 	bic.w	r2, r3, #16
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a1b      	ldr	r3, [r3, #32]
 800470a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800471e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004726:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	021b      	lsls	r3, r3, #8
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	4313      	orrs	r3, r2
 8004732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	f023 0320 	bic.w	r3, r3, #32
 800473a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	011b      	lsls	r3, r3, #4
 8004742:	697a      	ldr	r2, [r7, #20]
 8004744:	4313      	orrs	r3, r2
 8004746:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a22      	ldr	r2, [pc, #136]	; (80047d4 <TIM_OC2_SetConfig+0xe4>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d003      	beq.n	8004758 <TIM_OC2_SetConfig+0x68>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a21      	ldr	r2, [pc, #132]	; (80047d8 <TIM_OC2_SetConfig+0xe8>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d10d      	bne.n	8004774 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800475e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	011b      	lsls	r3, r3, #4
 8004766:	697a      	ldr	r2, [r7, #20]
 8004768:	4313      	orrs	r3, r2
 800476a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004772:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a17      	ldr	r2, [pc, #92]	; (80047d4 <TIM_OC2_SetConfig+0xe4>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d003      	beq.n	8004784 <TIM_OC2_SetConfig+0x94>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a16      	ldr	r2, [pc, #88]	; (80047d8 <TIM_OC2_SetConfig+0xe8>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d113      	bne.n	80047ac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800478a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004792:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	695b      	ldr	r3, [r3, #20]
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	693a      	ldr	r2, [r7, #16]
 800479c:	4313      	orrs	r3, r2
 800479e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	685a      	ldr	r2, [r3, #4]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	697a      	ldr	r2, [r7, #20]
 80047c4:	621a      	str	r2, [r3, #32]
}
 80047c6:	bf00      	nop
 80047c8:	371c      	adds	r7, #28
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	40010000 	.word	0x40010000
 80047d8:	40010400 	.word	0x40010400

080047dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047dc:	b480      	push	{r7}
 80047de:	b087      	sub	sp, #28
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a1b      	ldr	r3, [r3, #32]
 80047ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	69db      	ldr	r3, [r3, #28]
 8004802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800480a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f023 0303 	bic.w	r3, r3, #3
 8004812:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	4313      	orrs	r3, r2
 800481c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004824:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	021b      	lsls	r3, r3, #8
 800482c:	697a      	ldr	r2, [r7, #20]
 800482e:	4313      	orrs	r3, r2
 8004830:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a21      	ldr	r2, [pc, #132]	; (80048bc <TIM_OC3_SetConfig+0xe0>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d003      	beq.n	8004842 <TIM_OC3_SetConfig+0x66>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a20      	ldr	r2, [pc, #128]	; (80048c0 <TIM_OC3_SetConfig+0xe4>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d10d      	bne.n	800485e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004848:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	021b      	lsls	r3, r3, #8
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	4313      	orrs	r3, r2
 8004854:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800485c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a16      	ldr	r2, [pc, #88]	; (80048bc <TIM_OC3_SetConfig+0xe0>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d003      	beq.n	800486e <TIM_OC3_SetConfig+0x92>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a15      	ldr	r2, [pc, #84]	; (80048c0 <TIM_OC3_SetConfig+0xe4>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d113      	bne.n	8004896 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004874:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800487c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	011b      	lsls	r3, r3, #4
 8004884:	693a      	ldr	r2, [r7, #16]
 8004886:	4313      	orrs	r3, r2
 8004888:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	011b      	lsls	r3, r3, #4
 8004890:	693a      	ldr	r2, [r7, #16]
 8004892:	4313      	orrs	r3, r2
 8004894:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	693a      	ldr	r2, [r7, #16]
 800489a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	685a      	ldr	r2, [r3, #4]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	697a      	ldr	r2, [r7, #20]
 80048ae:	621a      	str	r2, [r3, #32]
}
 80048b0:	bf00      	nop
 80048b2:	371c      	adds	r7, #28
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr
 80048bc:	40010000 	.word	0x40010000
 80048c0:	40010400 	.word	0x40010400

080048c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b087      	sub	sp, #28
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a1b      	ldr	r3, [r3, #32]
 80048d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	69db      	ldr	r3, [r3, #28]
 80048ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	021b      	lsls	r3, r3, #8
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	4313      	orrs	r3, r2
 8004906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800490e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	031b      	lsls	r3, r3, #12
 8004916:	693a      	ldr	r2, [r7, #16]
 8004918:	4313      	orrs	r3, r2
 800491a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a12      	ldr	r2, [pc, #72]	; (8004968 <TIM_OC4_SetConfig+0xa4>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d003      	beq.n	800492c <TIM_OC4_SetConfig+0x68>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a11      	ldr	r2, [pc, #68]	; (800496c <TIM_OC4_SetConfig+0xa8>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d109      	bne.n	8004940 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004932:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	695b      	ldr	r3, [r3, #20]
 8004938:	019b      	lsls	r3, r3, #6
 800493a:	697a      	ldr	r2, [r7, #20]
 800493c:	4313      	orrs	r3, r2
 800493e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	697a      	ldr	r2, [r7, #20]
 8004944:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	68fa      	ldr	r2, [r7, #12]
 800494a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	685a      	ldr	r2, [r3, #4]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	693a      	ldr	r2, [r7, #16]
 8004958:	621a      	str	r2, [r3, #32]
}
 800495a:	bf00      	nop
 800495c:	371c      	adds	r7, #28
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	40010000 	.word	0x40010000
 800496c:	40010400 	.word	0x40010400

08004970 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004970:	b480      	push	{r7}
 8004972:	b087      	sub	sp, #28
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6a1b      	ldr	r3, [r3, #32]
 8004980:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6a1b      	ldr	r3, [r3, #32]
 8004986:	f023 0201 	bic.w	r2, r3, #1
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800499a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	011b      	lsls	r3, r3, #4
 80049a0:	693a      	ldr	r2, [r7, #16]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	f023 030a 	bic.w	r3, r3, #10
 80049ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	697a      	ldr	r2, [r7, #20]
 80049c0:	621a      	str	r2, [r3, #32]
}
 80049c2:	bf00      	nop
 80049c4:	371c      	adds	r7, #28
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr

080049ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049ce:	b480      	push	{r7}
 80049d0:	b087      	sub	sp, #28
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	60f8      	str	r0, [r7, #12]
 80049d6:	60b9      	str	r1, [r7, #8]
 80049d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6a1b      	ldr	r3, [r3, #32]
 80049de:	f023 0210 	bic.w	r2, r3, #16
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6a1b      	ldr	r3, [r3, #32]
 80049f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	031b      	lsls	r3, r3, #12
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a0a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	011b      	lsls	r3, r3, #4
 8004a10:	693a      	ldr	r2, [r7, #16]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	697a      	ldr	r2, [r7, #20]
 8004a1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	693a      	ldr	r2, [r7, #16]
 8004a20:	621a      	str	r2, [r3, #32]
}
 8004a22:	bf00      	nop
 8004a24:	371c      	adds	r7, #28
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr

08004a2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a2e:	b480      	push	{r7}
 8004a30:	b085      	sub	sp, #20
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
 8004a36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a46:	683a      	ldr	r2, [r7, #0]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	f043 0307 	orr.w	r3, r3, #7
 8004a50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	68fa      	ldr	r2, [r7, #12]
 8004a56:	609a      	str	r2, [r3, #8]
}
 8004a58:	bf00      	nop
 8004a5a:	3714      	adds	r7, #20
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b087      	sub	sp, #28
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	607a      	str	r2, [r7, #4]
 8004a70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	021a      	lsls	r2, r3, #8
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	431a      	orrs	r2, r3
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	697a      	ldr	r2, [r7, #20]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	609a      	str	r2, [r3, #8]
}
 8004a98:	bf00      	nop
 8004a9a:	371c      	adds	r7, #28
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b087      	sub	sp, #28
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	f003 031f 	and.w	r3, r3, #31
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8004abc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6a1a      	ldr	r2, [r3, #32]
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	43db      	mvns	r3, r3
 8004ac6:	401a      	ands	r2, r3
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6a1a      	ldr	r2, [r3, #32]
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	f003 031f 	and.w	r3, r3, #31
 8004ad6:	6879      	ldr	r1, [r7, #4]
 8004ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8004adc:	431a      	orrs	r2, r3
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	621a      	str	r2, [r3, #32]
}
 8004ae2:	bf00      	nop
 8004ae4:	371c      	adds	r7, #28
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
	...

08004af0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b085      	sub	sp, #20
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d101      	bne.n	8004b08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b04:	2302      	movs	r3, #2
 8004b06:	e05a      	b.n	8004bbe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2202      	movs	r2, #2
 8004b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a21      	ldr	r2, [pc, #132]	; (8004bcc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d022      	beq.n	8004b92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b54:	d01d      	beq.n	8004b92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a1d      	ldr	r2, [pc, #116]	; (8004bd0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d018      	beq.n	8004b92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a1b      	ldr	r2, [pc, #108]	; (8004bd4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d013      	beq.n	8004b92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a1a      	ldr	r2, [pc, #104]	; (8004bd8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d00e      	beq.n	8004b92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a18      	ldr	r2, [pc, #96]	; (8004bdc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d009      	beq.n	8004b92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a17      	ldr	r2, [pc, #92]	; (8004be0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d004      	beq.n	8004b92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a15      	ldr	r2, [pc, #84]	; (8004be4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d10c      	bne.n	8004bac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	68ba      	ldr	r2, [r7, #8]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68ba      	ldr	r2, [r7, #8]
 8004baa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3714      	adds	r7, #20
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	40010000 	.word	0x40010000
 8004bd0:	40000400 	.word	0x40000400
 8004bd4:	40000800 	.word	0x40000800
 8004bd8:	40000c00 	.word	0x40000c00
 8004bdc:	40010400 	.word	0x40010400
 8004be0:	40014000 	.word	0x40014000
 8004be4:	40001800 	.word	0x40001800

08004be8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b085      	sub	sp, #20
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d101      	bne.n	8004c04 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004c00:	2302      	movs	r3, #2
 8004c02:	e03d      	b.n	8004c80 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	695b      	ldr	r3, [r3, #20]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	69db      	ldr	r3, [r3, #28]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3714      	adds	r7, #20
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ca8:	bf00      	nop
 8004caa:	370c      	adds	r7, #12
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d101      	bne.n	8004cc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e03f      	b.n	8004d46 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d106      	bne.n	8004ce0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f7fd f88c 	bl	8001df8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2224      	movs	r2, #36	; 0x24
 8004ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68da      	ldr	r2, [r3, #12]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cf6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f000 fddb 	bl	80058b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	691a      	ldr	r2, [r3, #16]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	695a      	ldr	r2, [r3, #20]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68da      	ldr	r2, [r3, #12]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2220      	movs	r2, #32
 8004d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2220      	movs	r2, #32
 8004d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3708      	adds	r7, #8
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}

08004d4e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d4e:	b580      	push	{r7, lr}
 8004d50:	b08a      	sub	sp, #40	; 0x28
 8004d52:	af02      	add	r7, sp, #8
 8004d54:	60f8      	str	r0, [r7, #12]
 8004d56:	60b9      	str	r1, [r7, #8]
 8004d58:	603b      	str	r3, [r7, #0]
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	2b20      	cmp	r3, #32
 8004d6c:	d17c      	bne.n	8004e68 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d002      	beq.n	8004d7a <HAL_UART_Transmit+0x2c>
 8004d74:	88fb      	ldrh	r3, [r7, #6]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d101      	bne.n	8004d7e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e075      	b.n	8004e6a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d101      	bne.n	8004d8c <HAL_UART_Transmit+0x3e>
 8004d88:	2302      	movs	r3, #2
 8004d8a:	e06e      	b.n	8004e6a <HAL_UART_Transmit+0x11c>
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2200      	movs	r2, #0
 8004d98:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2221      	movs	r2, #33	; 0x21
 8004d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004da2:	f7fd f909 	bl	8001fb8 <HAL_GetTick>
 8004da6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	88fa      	ldrh	r2, [r7, #6]
 8004dac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	88fa      	ldrh	r2, [r7, #6]
 8004db2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dbc:	d108      	bne.n	8004dd0 <HAL_UART_Transmit+0x82>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d104      	bne.n	8004dd0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	61bb      	str	r3, [r7, #24]
 8004dce:	e003      	b.n	8004dd8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004de0:	e02a      	b.n	8004e38 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	9300      	str	r3, [sp, #0]
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	2200      	movs	r2, #0
 8004dea:	2180      	movs	r1, #128	; 0x80
 8004dec:	68f8      	ldr	r0, [r7, #12]
 8004dee:	f000 fb1f 	bl	8005430 <UART_WaitOnFlagUntilTimeout>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d001      	beq.n	8004dfc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e036      	b.n	8004e6a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d10b      	bne.n	8004e1a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	881b      	ldrh	r3, [r3, #0]
 8004e06:	461a      	mov	r2, r3
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e10:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	3302      	adds	r3, #2
 8004e16:	61bb      	str	r3, [r7, #24]
 8004e18:	e007      	b.n	8004e2a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	781a      	ldrb	r2, [r3, #0]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	3301      	adds	r3, #1
 8004e28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	3b01      	subs	r3, #1
 8004e32:	b29a      	uxth	r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d1cf      	bne.n	8004de2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	9300      	str	r3, [sp, #0]
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	2140      	movs	r1, #64	; 0x40
 8004e4c:	68f8      	ldr	r0, [r7, #12]
 8004e4e:	f000 faef 	bl	8005430 <UART_WaitOnFlagUntilTimeout>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d001      	beq.n	8004e5c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	e006      	b.n	8004e6a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2220      	movs	r2, #32
 8004e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004e64:	2300      	movs	r3, #0
 8004e66:	e000      	b.n	8004e6a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004e68:	2302      	movs	r3, #2
  }
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3720      	adds	r7, #32
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}

08004e72 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e72:	b580      	push	{r7, lr}
 8004e74:	b084      	sub	sp, #16
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	60f8      	str	r0, [r7, #12]
 8004e7a:	60b9      	str	r1, [r7, #8]
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	2b20      	cmp	r3, #32
 8004e8a:	d11d      	bne.n	8004ec8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d002      	beq.n	8004e98 <HAL_UART_Receive_IT+0x26>
 8004e92:	88fb      	ldrh	r3, [r7, #6]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d101      	bne.n	8004e9c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e016      	b.n	8004eca <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d101      	bne.n	8004eaa <HAL_UART_Receive_IT+0x38>
 8004ea6:	2302      	movs	r3, #2
 8004ea8:	e00f      	b.n	8004eca <HAL_UART_Receive_IT+0x58>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2201      	movs	r2, #1
 8004eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004eb8:	88fb      	ldrh	r3, [r7, #6]
 8004eba:	461a      	mov	r2, r3
 8004ebc:	68b9      	ldr	r1, [r7, #8]
 8004ebe:	68f8      	ldr	r0, [r7, #12]
 8004ec0:	f000 fb24 	bl	800550c <UART_Start_Receive_IT>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	e000      	b.n	8004eca <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004ec8:	2302      	movs	r3, #2
  }
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
	...

08004ed4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b0ba      	sub	sp, #232	; 0xe8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004efa:	2300      	movs	r3, #0
 8004efc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004f00:	2300      	movs	r3, #0
 8004f02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004f06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f0a:	f003 030f 	and.w	r3, r3, #15
 8004f0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004f12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d10f      	bne.n	8004f3a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f1e:	f003 0320 	and.w	r3, r3, #32
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d009      	beq.n	8004f3a <HAL_UART_IRQHandler+0x66>
 8004f26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f2a:	f003 0320 	and.w	r3, r3, #32
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d003      	beq.n	8004f3a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 fc03 	bl	800573e <UART_Receive_IT>
      return;
 8004f38:	e256      	b.n	80053e8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004f3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	f000 80de 	beq.w	8005100 <HAL_UART_IRQHandler+0x22c>
 8004f44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f48:	f003 0301 	and.w	r3, r3, #1
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d106      	bne.n	8004f5e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004f50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f54:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f000 80d1 	beq.w	8005100 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00b      	beq.n	8004f82 <HAL_UART_IRQHandler+0xae>
 8004f6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d005      	beq.n	8004f82 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7a:	f043 0201 	orr.w	r2, r3, #1
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f86:	f003 0304 	and.w	r3, r3, #4
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00b      	beq.n	8004fa6 <HAL_UART_IRQHandler+0xd2>
 8004f8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f92:	f003 0301 	and.w	r3, r3, #1
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d005      	beq.n	8004fa6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9e:	f043 0202 	orr.w	r2, r3, #2
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004faa:	f003 0302 	and.w	r3, r3, #2
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00b      	beq.n	8004fca <HAL_UART_IRQHandler+0xf6>
 8004fb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fb6:	f003 0301 	and.w	r3, r3, #1
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d005      	beq.n	8004fca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc2:	f043 0204 	orr.w	r2, r3, #4
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fce:	f003 0308 	and.w	r3, r3, #8
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d011      	beq.n	8004ffa <HAL_UART_IRQHandler+0x126>
 8004fd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fda:	f003 0320 	and.w	r3, r3, #32
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d105      	bne.n	8004fee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004fe2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fe6:	f003 0301 	and.w	r3, r3, #1
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d005      	beq.n	8004ffa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff2:	f043 0208 	orr.w	r2, r3, #8
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	f000 81ed 	beq.w	80053de <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005008:	f003 0320 	and.w	r3, r3, #32
 800500c:	2b00      	cmp	r3, #0
 800500e:	d008      	beq.n	8005022 <HAL_UART_IRQHandler+0x14e>
 8005010:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005014:	f003 0320 	and.w	r3, r3, #32
 8005018:	2b00      	cmp	r3, #0
 800501a:	d002      	beq.n	8005022 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f000 fb8e 	bl	800573e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	695b      	ldr	r3, [r3, #20]
 8005028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800502c:	2b40      	cmp	r3, #64	; 0x40
 800502e:	bf0c      	ite	eq
 8005030:	2301      	moveq	r3, #1
 8005032:	2300      	movne	r3, #0
 8005034:	b2db      	uxtb	r3, r3
 8005036:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503e:	f003 0308 	and.w	r3, r3, #8
 8005042:	2b00      	cmp	r3, #0
 8005044:	d103      	bne.n	800504e <HAL_UART_IRQHandler+0x17a>
 8005046:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800504a:	2b00      	cmp	r3, #0
 800504c:	d04f      	beq.n	80050ee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 fa96 	bl	8005580 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800505e:	2b40      	cmp	r3, #64	; 0x40
 8005060:	d141      	bne.n	80050e6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	3314      	adds	r3, #20
 8005068:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800506c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005070:	e853 3f00 	ldrex	r3, [r3]
 8005074:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005078:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800507c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005080:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	3314      	adds	r3, #20
 800508a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800508e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005092:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005096:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800509a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800509e:	e841 2300 	strex	r3, r2, [r1]
 80050a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80050a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d1d9      	bne.n	8005062 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d013      	beq.n	80050de <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ba:	4a7d      	ldr	r2, [pc, #500]	; (80052b0 <HAL_UART_IRQHandler+0x3dc>)
 80050bc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c2:	4618      	mov	r0, r3
 80050c4:	f7fd fcf9 	bl	8002aba <HAL_DMA_Abort_IT>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d016      	beq.n	80050fc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80050d8:	4610      	mov	r0, r2
 80050da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050dc:	e00e      	b.n	80050fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 f990 	bl	8005404 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050e4:	e00a      	b.n	80050fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 f98c 	bl	8005404 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050ec:	e006      	b.n	80050fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 f988 	bl	8005404 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80050fa:	e170      	b.n	80053de <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050fc:	bf00      	nop
    return;
 80050fe:	e16e      	b.n	80053de <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005104:	2b01      	cmp	r3, #1
 8005106:	f040 814a 	bne.w	800539e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800510a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800510e:	f003 0310 	and.w	r3, r3, #16
 8005112:	2b00      	cmp	r3, #0
 8005114:	f000 8143 	beq.w	800539e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005118:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800511c:	f003 0310 	and.w	r3, r3, #16
 8005120:	2b00      	cmp	r3, #0
 8005122:	f000 813c 	beq.w	800539e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005126:	2300      	movs	r3, #0
 8005128:	60bb      	str	r3, [r7, #8]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	60bb      	str	r3, [r7, #8]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	60bb      	str	r3, [r7, #8]
 800513a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005146:	2b40      	cmp	r3, #64	; 0x40
 8005148:	f040 80b4 	bne.w	80052b4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005158:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800515c:	2b00      	cmp	r3, #0
 800515e:	f000 8140 	beq.w	80053e2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005166:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800516a:	429a      	cmp	r2, r3
 800516c:	f080 8139 	bcs.w	80053e2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005176:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517c:	69db      	ldr	r3, [r3, #28]
 800517e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005182:	f000 8088 	beq.w	8005296 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	330c      	adds	r3, #12
 800518c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005190:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005194:	e853 3f00 	ldrex	r3, [r3]
 8005198:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800519c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	330c      	adds	r3, #12
 80051ae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80051b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80051b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80051be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80051c2:	e841 2300 	strex	r3, r2, [r1]
 80051c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80051ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d1d9      	bne.n	8005186 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	3314      	adds	r3, #20
 80051d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051dc:	e853 3f00 	ldrex	r3, [r3]
 80051e0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80051e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051e4:	f023 0301 	bic.w	r3, r3, #1
 80051e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	3314      	adds	r3, #20
 80051f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80051f6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80051fa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051fc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80051fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005202:	e841 2300 	strex	r3, r2, [r1]
 8005206:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005208:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800520a:	2b00      	cmp	r3, #0
 800520c:	d1e1      	bne.n	80051d2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	3314      	adds	r3, #20
 8005214:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005216:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005218:	e853 3f00 	ldrex	r3, [r3]
 800521c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800521e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005220:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005224:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	3314      	adds	r3, #20
 800522e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005232:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005234:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005236:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005238:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800523a:	e841 2300 	strex	r3, r2, [r1]
 800523e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005240:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005242:	2b00      	cmp	r3, #0
 8005244:	d1e3      	bne.n	800520e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2220      	movs	r2, #32
 800524a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	330c      	adds	r3, #12
 800525a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800525c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800525e:	e853 3f00 	ldrex	r3, [r3]
 8005262:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005264:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005266:	f023 0310 	bic.w	r3, r3, #16
 800526a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	330c      	adds	r3, #12
 8005274:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005278:	65ba      	str	r2, [r7, #88]	; 0x58
 800527a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800527e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005280:	e841 2300 	strex	r3, r2, [r1]
 8005284:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005286:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1e3      	bne.n	8005254 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005290:	4618      	mov	r0, r3
 8005292:	f7fd fba2 	bl	80029da <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800529e:	b29b      	uxth	r3, r3
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	4619      	mov	r1, r3
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 f8b6 	bl	8005418 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80052ac:	e099      	b.n	80053e2 <HAL_UART_IRQHandler+0x50e>
 80052ae:	bf00      	nop
 80052b0:	08005647 	.word	0x08005647
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052bc:	b29b      	uxth	r3, r3
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	f000 808b 	beq.w	80053e6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80052d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	f000 8086 	beq.w	80053e6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	330c      	adds	r3, #12
 80052e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e4:	e853 3f00 	ldrex	r3, [r3]
 80052e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80052ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	330c      	adds	r3, #12
 80052fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80052fe:	647a      	str	r2, [r7, #68]	; 0x44
 8005300:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005302:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005304:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005306:	e841 2300 	strex	r3, r2, [r1]
 800530a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800530c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1e3      	bne.n	80052da <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	3314      	adds	r3, #20
 8005318:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531c:	e853 3f00 	ldrex	r3, [r3]
 8005320:	623b      	str	r3, [r7, #32]
   return(result);
 8005322:	6a3b      	ldr	r3, [r7, #32]
 8005324:	f023 0301 	bic.w	r3, r3, #1
 8005328:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	3314      	adds	r3, #20
 8005332:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005336:	633a      	str	r2, [r7, #48]	; 0x30
 8005338:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800533c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800533e:	e841 2300 	strex	r3, r2, [r1]
 8005342:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1e3      	bne.n	8005312 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2220      	movs	r2, #32
 800534e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	330c      	adds	r3, #12
 800535e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	e853 3f00 	ldrex	r3, [r3]
 8005366:	60fb      	str	r3, [r7, #12]
   return(result);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f023 0310 	bic.w	r3, r3, #16
 800536e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	330c      	adds	r3, #12
 8005378:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800537c:	61fa      	str	r2, [r7, #28]
 800537e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005380:	69b9      	ldr	r1, [r7, #24]
 8005382:	69fa      	ldr	r2, [r7, #28]
 8005384:	e841 2300 	strex	r3, r2, [r1]
 8005388:	617b      	str	r3, [r7, #20]
   return(result);
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d1e3      	bne.n	8005358 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005390:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005394:	4619      	mov	r1, r3
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 f83e 	bl	8005418 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800539c:	e023      	b.n	80053e6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800539e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d009      	beq.n	80053be <HAL_UART_IRQHandler+0x4ea>
 80053aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d003      	beq.n	80053be <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 f959 	bl	800566e <UART_Transmit_IT>
    return;
 80053bc:	e014      	b.n	80053e8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80053be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00e      	beq.n	80053e8 <HAL_UART_IRQHandler+0x514>
 80053ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d008      	beq.n	80053e8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 f999 	bl	800570e <UART_EndTransmit_IT>
    return;
 80053dc:	e004      	b.n	80053e8 <HAL_UART_IRQHandler+0x514>
    return;
 80053de:	bf00      	nop
 80053e0:	e002      	b.n	80053e8 <HAL_UART_IRQHandler+0x514>
      return;
 80053e2:	bf00      	nop
 80053e4:	e000      	b.n	80053e8 <HAL_UART_IRQHandler+0x514>
      return;
 80053e6:	bf00      	nop
  }
}
 80053e8:	37e8      	adds	r7, #232	; 0xe8
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop

080053f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80053f8:	bf00      	nop
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800540c:	bf00      	nop
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	460b      	mov	r3, r1
 8005422:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005424:	bf00      	nop
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b090      	sub	sp, #64	; 0x40
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	603b      	str	r3, [r7, #0]
 800543c:	4613      	mov	r3, r2
 800543e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005440:	e050      	b.n	80054e4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005442:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005448:	d04c      	beq.n	80054e4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800544a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800544c:	2b00      	cmp	r3, #0
 800544e:	d007      	beq.n	8005460 <UART_WaitOnFlagUntilTimeout+0x30>
 8005450:	f7fc fdb2 	bl	8001fb8 <HAL_GetTick>
 8005454:	4602      	mov	r2, r0
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800545c:	429a      	cmp	r2, r3
 800545e:	d241      	bcs.n	80054e4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	330c      	adds	r3, #12
 8005466:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800546a:	e853 3f00 	ldrex	r3, [r3]
 800546e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005472:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005476:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	330c      	adds	r3, #12
 800547e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005480:	637a      	str	r2, [r7, #52]	; 0x34
 8005482:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005484:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005486:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005488:	e841 2300 	strex	r3, r2, [r1]
 800548c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800548e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005490:	2b00      	cmp	r3, #0
 8005492:	d1e5      	bne.n	8005460 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	3314      	adds	r3, #20
 800549a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	e853 3f00 	ldrex	r3, [r3]
 80054a2:	613b      	str	r3, [r7, #16]
   return(result);
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	f023 0301 	bic.w	r3, r3, #1
 80054aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	3314      	adds	r3, #20
 80054b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054b4:	623a      	str	r2, [r7, #32]
 80054b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b8:	69f9      	ldr	r1, [r7, #28]
 80054ba:	6a3a      	ldr	r2, [r7, #32]
 80054bc:	e841 2300 	strex	r3, r2, [r1]
 80054c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1e5      	bne.n	8005494 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2220      	movs	r2, #32
 80054cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2220      	movs	r2, #32
 80054d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2200      	movs	r2, #0
 80054dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80054e0:	2303      	movs	r3, #3
 80054e2:	e00f      	b.n	8005504 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	4013      	ands	r3, r2
 80054ee:	68ba      	ldr	r2, [r7, #8]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	bf0c      	ite	eq
 80054f4:	2301      	moveq	r3, #1
 80054f6:	2300      	movne	r3, #0
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	461a      	mov	r2, r3
 80054fc:	79fb      	ldrb	r3, [r7, #7]
 80054fe:	429a      	cmp	r2, r3
 8005500:	d09f      	beq.n	8005442 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005502:	2300      	movs	r3, #0
}
 8005504:	4618      	mov	r0, r3
 8005506:	3740      	adds	r7, #64	; 0x40
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	4613      	mov	r3, r2
 8005518:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	68ba      	ldr	r2, [r7, #8]
 800551e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	88fa      	ldrh	r2, [r7, #6]
 8005524:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	88fa      	ldrh	r2, [r7, #6]
 800552a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2200      	movs	r2, #0
 8005530:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2222      	movs	r2, #34	; 0x22
 8005536:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68da      	ldr	r2, [r3, #12]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005550:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	695a      	ldr	r2, [r3, #20]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f042 0201 	orr.w	r2, r2, #1
 8005560:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68da      	ldr	r2, [r3, #12]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f042 0220 	orr.w	r2, r2, #32
 8005570:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	3714      	adds	r7, #20
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005580:	b480      	push	{r7}
 8005582:	b095      	sub	sp, #84	; 0x54
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	330c      	adds	r3, #12
 800558e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005592:	e853 3f00 	ldrex	r3, [r3]
 8005596:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800559e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	330c      	adds	r3, #12
 80055a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80055a8:	643a      	str	r2, [r7, #64]	; 0x40
 80055aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80055ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055b0:	e841 2300 	strex	r3, r2, [r1]
 80055b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1e5      	bne.n	8005588 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	3314      	adds	r3, #20
 80055c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c4:	6a3b      	ldr	r3, [r7, #32]
 80055c6:	e853 3f00 	ldrex	r3, [r3]
 80055ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	f023 0301 	bic.w	r3, r3, #1
 80055d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	3314      	adds	r3, #20
 80055da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055e4:	e841 2300 	strex	r3, r2, [r1]
 80055e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1e5      	bne.n	80055bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d119      	bne.n	800562c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	330c      	adds	r3, #12
 80055fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	e853 3f00 	ldrex	r3, [r3]
 8005606:	60bb      	str	r3, [r7, #8]
   return(result);
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	f023 0310 	bic.w	r3, r3, #16
 800560e:	647b      	str	r3, [r7, #68]	; 0x44
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	330c      	adds	r3, #12
 8005616:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005618:	61ba      	str	r2, [r7, #24]
 800561a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561c:	6979      	ldr	r1, [r7, #20]
 800561e:	69ba      	ldr	r2, [r7, #24]
 8005620:	e841 2300 	strex	r3, r2, [r1]
 8005624:	613b      	str	r3, [r7, #16]
   return(result);
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d1e5      	bne.n	80055f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2220      	movs	r2, #32
 8005630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	631a      	str	r2, [r3, #48]	; 0x30
}
 800563a:	bf00      	nop
 800563c:	3754      	adds	r7, #84	; 0x54
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr

08005646 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005646:	b580      	push	{r7, lr}
 8005648:	b084      	sub	sp, #16
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005652:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2200      	movs	r2, #0
 8005658:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2200      	movs	r2, #0
 800565e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005660:	68f8      	ldr	r0, [r7, #12]
 8005662:	f7ff fecf 	bl	8005404 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005666:	bf00      	nop
 8005668:	3710      	adds	r7, #16
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}

0800566e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800566e:	b480      	push	{r7}
 8005670:	b085      	sub	sp, #20
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800567c:	b2db      	uxtb	r3, r3
 800567e:	2b21      	cmp	r3, #33	; 0x21
 8005680:	d13e      	bne.n	8005700 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800568a:	d114      	bne.n	80056b6 <UART_Transmit_IT+0x48>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	691b      	ldr	r3, [r3, #16]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d110      	bne.n	80056b6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6a1b      	ldr	r3, [r3, #32]
 8005698:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	881b      	ldrh	r3, [r3, #0]
 800569e:	461a      	mov	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056a8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a1b      	ldr	r3, [r3, #32]
 80056ae:	1c9a      	adds	r2, r3, #2
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	621a      	str	r2, [r3, #32]
 80056b4:	e008      	b.n	80056c8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a1b      	ldr	r3, [r3, #32]
 80056ba:	1c59      	adds	r1, r3, #1
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	6211      	str	r1, [r2, #32]
 80056c0:	781a      	ldrb	r2, [r3, #0]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	3b01      	subs	r3, #1
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	4619      	mov	r1, r3
 80056d6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d10f      	bne.n	80056fc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68da      	ldr	r2, [r3, #12]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056ea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68da      	ldr	r2, [r3, #12]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056fa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80056fc:	2300      	movs	r3, #0
 80056fe:	e000      	b.n	8005702 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005700:	2302      	movs	r3, #2
  }
}
 8005702:	4618      	mov	r0, r3
 8005704:	3714      	adds	r7, #20
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr

0800570e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800570e:	b580      	push	{r7, lr}
 8005710:	b082      	sub	sp, #8
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	68da      	ldr	r2, [r3, #12]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005724:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2220      	movs	r2, #32
 800572a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f7ff fe5e 	bl	80053f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3708      	adds	r7, #8
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}

0800573e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800573e:	b580      	push	{r7, lr}
 8005740:	b08c      	sub	sp, #48	; 0x30
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800574c:	b2db      	uxtb	r3, r3
 800574e:	2b22      	cmp	r3, #34	; 0x22
 8005750:	f040 80ab 	bne.w	80058aa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800575c:	d117      	bne.n	800578e <UART_Receive_IT+0x50>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d113      	bne.n	800578e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005766:	2300      	movs	r3, #0
 8005768:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800576e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	b29b      	uxth	r3, r3
 8005778:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800577c:	b29a      	uxth	r2, r3
 800577e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005780:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005786:	1c9a      	adds	r2, r3, #2
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	629a      	str	r2, [r3, #40]	; 0x28
 800578c:	e026      	b.n	80057dc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005792:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005794:	2300      	movs	r3, #0
 8005796:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057a0:	d007      	beq.n	80057b2 <UART_Receive_IT+0x74>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d10a      	bne.n	80057c0 <UART_Receive_IT+0x82>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d106      	bne.n	80057c0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	b2da      	uxtb	r2, r3
 80057ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057bc:	701a      	strb	r2, [r3, #0]
 80057be:	e008      	b.n	80057d2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057cc:	b2da      	uxtb	r2, r3
 80057ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d6:	1c5a      	adds	r2, r3, #1
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	3b01      	subs	r3, #1
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	4619      	mov	r1, r3
 80057ea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d15a      	bne.n	80058a6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68da      	ldr	r2, [r3, #12]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f022 0220 	bic.w	r2, r2, #32
 80057fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68da      	ldr	r2, [r3, #12]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800580e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	695a      	ldr	r2, [r3, #20]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f022 0201 	bic.w	r2, r2, #1
 800581e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2220      	movs	r2, #32
 8005824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800582c:	2b01      	cmp	r3, #1
 800582e:	d135      	bne.n	800589c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	330c      	adds	r3, #12
 800583c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	e853 3f00 	ldrex	r3, [r3]
 8005844:	613b      	str	r3, [r7, #16]
   return(result);
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	f023 0310 	bic.w	r3, r3, #16
 800584c:	627b      	str	r3, [r7, #36]	; 0x24
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	330c      	adds	r3, #12
 8005854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005856:	623a      	str	r2, [r7, #32]
 8005858:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800585a:	69f9      	ldr	r1, [r7, #28]
 800585c:	6a3a      	ldr	r2, [r7, #32]
 800585e:	e841 2300 	strex	r3, r2, [r1]
 8005862:	61bb      	str	r3, [r7, #24]
   return(result);
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1e5      	bne.n	8005836 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0310 	and.w	r3, r3, #16
 8005874:	2b10      	cmp	r3, #16
 8005876:	d10a      	bne.n	800588e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005878:	2300      	movs	r3, #0
 800587a:	60fb      	str	r3, [r7, #12]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	60fb      	str	r3, [r7, #12]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	60fb      	str	r3, [r7, #12]
 800588c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005892:	4619      	mov	r1, r3
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f7ff fdbf 	bl	8005418 <HAL_UARTEx_RxEventCallback>
 800589a:	e002      	b.n	80058a2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f7fb fefd 	bl	800169c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80058a2:	2300      	movs	r3, #0
 80058a4:	e002      	b.n	80058ac <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80058a6:	2300      	movs	r3, #0
 80058a8:	e000      	b.n	80058ac <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80058aa:	2302      	movs	r3, #2
  }
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3730      	adds	r7, #48	; 0x30
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058b8:	b09f      	sub	sp, #124	; 0x7c
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	691b      	ldr	r3, [r3, #16]
 80058c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80058c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058ca:	68d9      	ldr	r1, [r3, #12]
 80058cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	ea40 0301 	orr.w	r3, r0, r1
 80058d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80058d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058d8:	689a      	ldr	r2, [r3, #8]
 80058da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	431a      	orrs	r2, r3
 80058e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058e2:	695b      	ldr	r3, [r3, #20]
 80058e4:	431a      	orrs	r2, r3
 80058e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058e8:	69db      	ldr	r3, [r3, #28]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80058ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80058f8:	f021 010c 	bic.w	r1, r1, #12
 80058fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005902:	430b      	orrs	r3, r1
 8005904:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	695b      	ldr	r3, [r3, #20]
 800590c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005910:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005912:	6999      	ldr	r1, [r3, #24]
 8005914:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	ea40 0301 	orr.w	r3, r0, r1
 800591c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800591e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	4bc5      	ldr	r3, [pc, #788]	; (8005c38 <UART_SetConfig+0x384>)
 8005924:	429a      	cmp	r2, r3
 8005926:	d004      	beq.n	8005932 <UART_SetConfig+0x7e>
 8005928:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	4bc3      	ldr	r3, [pc, #780]	; (8005c3c <UART_SetConfig+0x388>)
 800592e:	429a      	cmp	r2, r3
 8005930:	d103      	bne.n	800593a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005932:	f7fd fb99 	bl	8003068 <HAL_RCC_GetPCLK2Freq>
 8005936:	6778      	str	r0, [r7, #116]	; 0x74
 8005938:	e002      	b.n	8005940 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800593a:	f7fd fb81 	bl	8003040 <HAL_RCC_GetPCLK1Freq>
 800593e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005940:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005942:	69db      	ldr	r3, [r3, #28]
 8005944:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005948:	f040 80b6 	bne.w	8005ab8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800594c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800594e:	461c      	mov	r4, r3
 8005950:	f04f 0500 	mov.w	r5, #0
 8005954:	4622      	mov	r2, r4
 8005956:	462b      	mov	r3, r5
 8005958:	1891      	adds	r1, r2, r2
 800595a:	6439      	str	r1, [r7, #64]	; 0x40
 800595c:	415b      	adcs	r3, r3
 800595e:	647b      	str	r3, [r7, #68]	; 0x44
 8005960:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005964:	1912      	adds	r2, r2, r4
 8005966:	eb45 0303 	adc.w	r3, r5, r3
 800596a:	f04f 0000 	mov.w	r0, #0
 800596e:	f04f 0100 	mov.w	r1, #0
 8005972:	00d9      	lsls	r1, r3, #3
 8005974:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005978:	00d0      	lsls	r0, r2, #3
 800597a:	4602      	mov	r2, r0
 800597c:	460b      	mov	r3, r1
 800597e:	1911      	adds	r1, r2, r4
 8005980:	6639      	str	r1, [r7, #96]	; 0x60
 8005982:	416b      	adcs	r3, r5
 8005984:	667b      	str	r3, [r7, #100]	; 0x64
 8005986:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	461a      	mov	r2, r3
 800598c:	f04f 0300 	mov.w	r3, #0
 8005990:	1891      	adds	r1, r2, r2
 8005992:	63b9      	str	r1, [r7, #56]	; 0x38
 8005994:	415b      	adcs	r3, r3
 8005996:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005998:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800599c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80059a0:	f7fb f932 	bl	8000c08 <__aeabi_uldivmod>
 80059a4:	4602      	mov	r2, r0
 80059a6:	460b      	mov	r3, r1
 80059a8:	4ba5      	ldr	r3, [pc, #660]	; (8005c40 <UART_SetConfig+0x38c>)
 80059aa:	fba3 2302 	umull	r2, r3, r3, r2
 80059ae:	095b      	lsrs	r3, r3, #5
 80059b0:	011e      	lsls	r6, r3, #4
 80059b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059b4:	461c      	mov	r4, r3
 80059b6:	f04f 0500 	mov.w	r5, #0
 80059ba:	4622      	mov	r2, r4
 80059bc:	462b      	mov	r3, r5
 80059be:	1891      	adds	r1, r2, r2
 80059c0:	6339      	str	r1, [r7, #48]	; 0x30
 80059c2:	415b      	adcs	r3, r3
 80059c4:	637b      	str	r3, [r7, #52]	; 0x34
 80059c6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80059ca:	1912      	adds	r2, r2, r4
 80059cc:	eb45 0303 	adc.w	r3, r5, r3
 80059d0:	f04f 0000 	mov.w	r0, #0
 80059d4:	f04f 0100 	mov.w	r1, #0
 80059d8:	00d9      	lsls	r1, r3, #3
 80059da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80059de:	00d0      	lsls	r0, r2, #3
 80059e0:	4602      	mov	r2, r0
 80059e2:	460b      	mov	r3, r1
 80059e4:	1911      	adds	r1, r2, r4
 80059e6:	65b9      	str	r1, [r7, #88]	; 0x58
 80059e8:	416b      	adcs	r3, r5
 80059ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	461a      	mov	r2, r3
 80059f2:	f04f 0300 	mov.w	r3, #0
 80059f6:	1891      	adds	r1, r2, r2
 80059f8:	62b9      	str	r1, [r7, #40]	; 0x28
 80059fa:	415b      	adcs	r3, r3
 80059fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a02:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005a06:	f7fb f8ff 	bl	8000c08 <__aeabi_uldivmod>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	4b8c      	ldr	r3, [pc, #560]	; (8005c40 <UART_SetConfig+0x38c>)
 8005a10:	fba3 1302 	umull	r1, r3, r3, r2
 8005a14:	095b      	lsrs	r3, r3, #5
 8005a16:	2164      	movs	r1, #100	; 0x64
 8005a18:	fb01 f303 	mul.w	r3, r1, r3
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	00db      	lsls	r3, r3, #3
 8005a20:	3332      	adds	r3, #50	; 0x32
 8005a22:	4a87      	ldr	r2, [pc, #540]	; (8005c40 <UART_SetConfig+0x38c>)
 8005a24:	fba2 2303 	umull	r2, r3, r2, r3
 8005a28:	095b      	lsrs	r3, r3, #5
 8005a2a:	005b      	lsls	r3, r3, #1
 8005a2c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a30:	441e      	add	r6, r3
 8005a32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a34:	4618      	mov	r0, r3
 8005a36:	f04f 0100 	mov.w	r1, #0
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	1894      	adds	r4, r2, r2
 8005a40:	623c      	str	r4, [r7, #32]
 8005a42:	415b      	adcs	r3, r3
 8005a44:	627b      	str	r3, [r7, #36]	; 0x24
 8005a46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005a4a:	1812      	adds	r2, r2, r0
 8005a4c:	eb41 0303 	adc.w	r3, r1, r3
 8005a50:	f04f 0400 	mov.w	r4, #0
 8005a54:	f04f 0500 	mov.w	r5, #0
 8005a58:	00dd      	lsls	r5, r3, #3
 8005a5a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005a5e:	00d4      	lsls	r4, r2, #3
 8005a60:	4622      	mov	r2, r4
 8005a62:	462b      	mov	r3, r5
 8005a64:	1814      	adds	r4, r2, r0
 8005a66:	653c      	str	r4, [r7, #80]	; 0x50
 8005a68:	414b      	adcs	r3, r1
 8005a6a:	657b      	str	r3, [r7, #84]	; 0x54
 8005a6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	461a      	mov	r2, r3
 8005a72:	f04f 0300 	mov.w	r3, #0
 8005a76:	1891      	adds	r1, r2, r2
 8005a78:	61b9      	str	r1, [r7, #24]
 8005a7a:	415b      	adcs	r3, r3
 8005a7c:	61fb      	str	r3, [r7, #28]
 8005a7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a82:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005a86:	f7fb f8bf 	bl	8000c08 <__aeabi_uldivmod>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	4b6c      	ldr	r3, [pc, #432]	; (8005c40 <UART_SetConfig+0x38c>)
 8005a90:	fba3 1302 	umull	r1, r3, r3, r2
 8005a94:	095b      	lsrs	r3, r3, #5
 8005a96:	2164      	movs	r1, #100	; 0x64
 8005a98:	fb01 f303 	mul.w	r3, r1, r3
 8005a9c:	1ad3      	subs	r3, r2, r3
 8005a9e:	00db      	lsls	r3, r3, #3
 8005aa0:	3332      	adds	r3, #50	; 0x32
 8005aa2:	4a67      	ldr	r2, [pc, #412]	; (8005c40 <UART_SetConfig+0x38c>)
 8005aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8005aa8:	095b      	lsrs	r3, r3, #5
 8005aaa:	f003 0207 	and.w	r2, r3, #7
 8005aae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4432      	add	r2, r6
 8005ab4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ab6:	e0b9      	b.n	8005c2c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ab8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005aba:	461c      	mov	r4, r3
 8005abc:	f04f 0500 	mov.w	r5, #0
 8005ac0:	4622      	mov	r2, r4
 8005ac2:	462b      	mov	r3, r5
 8005ac4:	1891      	adds	r1, r2, r2
 8005ac6:	6139      	str	r1, [r7, #16]
 8005ac8:	415b      	adcs	r3, r3
 8005aca:	617b      	str	r3, [r7, #20]
 8005acc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005ad0:	1912      	adds	r2, r2, r4
 8005ad2:	eb45 0303 	adc.w	r3, r5, r3
 8005ad6:	f04f 0000 	mov.w	r0, #0
 8005ada:	f04f 0100 	mov.w	r1, #0
 8005ade:	00d9      	lsls	r1, r3, #3
 8005ae0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ae4:	00d0      	lsls	r0, r2, #3
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	460b      	mov	r3, r1
 8005aea:	eb12 0804 	adds.w	r8, r2, r4
 8005aee:	eb43 0905 	adc.w	r9, r3, r5
 8005af2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	4618      	mov	r0, r3
 8005af8:	f04f 0100 	mov.w	r1, #0
 8005afc:	f04f 0200 	mov.w	r2, #0
 8005b00:	f04f 0300 	mov.w	r3, #0
 8005b04:	008b      	lsls	r3, r1, #2
 8005b06:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005b0a:	0082      	lsls	r2, r0, #2
 8005b0c:	4640      	mov	r0, r8
 8005b0e:	4649      	mov	r1, r9
 8005b10:	f7fb f87a 	bl	8000c08 <__aeabi_uldivmod>
 8005b14:	4602      	mov	r2, r0
 8005b16:	460b      	mov	r3, r1
 8005b18:	4b49      	ldr	r3, [pc, #292]	; (8005c40 <UART_SetConfig+0x38c>)
 8005b1a:	fba3 2302 	umull	r2, r3, r3, r2
 8005b1e:	095b      	lsrs	r3, r3, #5
 8005b20:	011e      	lsls	r6, r3, #4
 8005b22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b24:	4618      	mov	r0, r3
 8005b26:	f04f 0100 	mov.w	r1, #0
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	1894      	adds	r4, r2, r2
 8005b30:	60bc      	str	r4, [r7, #8]
 8005b32:	415b      	adcs	r3, r3
 8005b34:	60fb      	str	r3, [r7, #12]
 8005b36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b3a:	1812      	adds	r2, r2, r0
 8005b3c:	eb41 0303 	adc.w	r3, r1, r3
 8005b40:	f04f 0400 	mov.w	r4, #0
 8005b44:	f04f 0500 	mov.w	r5, #0
 8005b48:	00dd      	lsls	r5, r3, #3
 8005b4a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005b4e:	00d4      	lsls	r4, r2, #3
 8005b50:	4622      	mov	r2, r4
 8005b52:	462b      	mov	r3, r5
 8005b54:	1814      	adds	r4, r2, r0
 8005b56:	64bc      	str	r4, [r7, #72]	; 0x48
 8005b58:	414b      	adcs	r3, r1
 8005b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	4618      	mov	r0, r3
 8005b62:	f04f 0100 	mov.w	r1, #0
 8005b66:	f04f 0200 	mov.w	r2, #0
 8005b6a:	f04f 0300 	mov.w	r3, #0
 8005b6e:	008b      	lsls	r3, r1, #2
 8005b70:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005b74:	0082      	lsls	r2, r0, #2
 8005b76:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005b7a:	f7fb f845 	bl	8000c08 <__aeabi_uldivmod>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	460b      	mov	r3, r1
 8005b82:	4b2f      	ldr	r3, [pc, #188]	; (8005c40 <UART_SetConfig+0x38c>)
 8005b84:	fba3 1302 	umull	r1, r3, r3, r2
 8005b88:	095b      	lsrs	r3, r3, #5
 8005b8a:	2164      	movs	r1, #100	; 0x64
 8005b8c:	fb01 f303 	mul.w	r3, r1, r3
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	011b      	lsls	r3, r3, #4
 8005b94:	3332      	adds	r3, #50	; 0x32
 8005b96:	4a2a      	ldr	r2, [pc, #168]	; (8005c40 <UART_SetConfig+0x38c>)
 8005b98:	fba2 2303 	umull	r2, r3, r2, r3
 8005b9c:	095b      	lsrs	r3, r3, #5
 8005b9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ba2:	441e      	add	r6, r3
 8005ba4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f04f 0100 	mov.w	r1, #0
 8005bac:	4602      	mov	r2, r0
 8005bae:	460b      	mov	r3, r1
 8005bb0:	1894      	adds	r4, r2, r2
 8005bb2:	603c      	str	r4, [r7, #0]
 8005bb4:	415b      	adcs	r3, r3
 8005bb6:	607b      	str	r3, [r7, #4]
 8005bb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bbc:	1812      	adds	r2, r2, r0
 8005bbe:	eb41 0303 	adc.w	r3, r1, r3
 8005bc2:	f04f 0400 	mov.w	r4, #0
 8005bc6:	f04f 0500 	mov.w	r5, #0
 8005bca:	00dd      	lsls	r5, r3, #3
 8005bcc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005bd0:	00d4      	lsls	r4, r2, #3
 8005bd2:	4622      	mov	r2, r4
 8005bd4:	462b      	mov	r3, r5
 8005bd6:	eb12 0a00 	adds.w	sl, r2, r0
 8005bda:	eb43 0b01 	adc.w	fp, r3, r1
 8005bde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	4618      	mov	r0, r3
 8005be4:	f04f 0100 	mov.w	r1, #0
 8005be8:	f04f 0200 	mov.w	r2, #0
 8005bec:	f04f 0300 	mov.w	r3, #0
 8005bf0:	008b      	lsls	r3, r1, #2
 8005bf2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005bf6:	0082      	lsls	r2, r0, #2
 8005bf8:	4650      	mov	r0, sl
 8005bfa:	4659      	mov	r1, fp
 8005bfc:	f7fb f804 	bl	8000c08 <__aeabi_uldivmod>
 8005c00:	4602      	mov	r2, r0
 8005c02:	460b      	mov	r3, r1
 8005c04:	4b0e      	ldr	r3, [pc, #56]	; (8005c40 <UART_SetConfig+0x38c>)
 8005c06:	fba3 1302 	umull	r1, r3, r3, r2
 8005c0a:	095b      	lsrs	r3, r3, #5
 8005c0c:	2164      	movs	r1, #100	; 0x64
 8005c0e:	fb01 f303 	mul.w	r3, r1, r3
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	011b      	lsls	r3, r3, #4
 8005c16:	3332      	adds	r3, #50	; 0x32
 8005c18:	4a09      	ldr	r2, [pc, #36]	; (8005c40 <UART_SetConfig+0x38c>)
 8005c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c1e:	095b      	lsrs	r3, r3, #5
 8005c20:	f003 020f 	and.w	r2, r3, #15
 8005c24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4432      	add	r2, r6
 8005c2a:	609a      	str	r2, [r3, #8]
}
 8005c2c:	bf00      	nop
 8005c2e:	377c      	adds	r7, #124	; 0x7c
 8005c30:	46bd      	mov	sp, r7
 8005c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c36:	bf00      	nop
 8005c38:	40011000 	.word	0x40011000
 8005c3c:	40011400 	.word	0x40011400
 8005c40:	51eb851f 	.word	0x51eb851f

08005c44 <__errno>:
 8005c44:	4b01      	ldr	r3, [pc, #4]	; (8005c4c <__errno+0x8>)
 8005c46:	6818      	ldr	r0, [r3, #0]
 8005c48:	4770      	bx	lr
 8005c4a:	bf00      	nop
 8005c4c:	20000018 	.word	0x20000018

08005c50 <__libc_init_array>:
 8005c50:	b570      	push	{r4, r5, r6, lr}
 8005c52:	4d0d      	ldr	r5, [pc, #52]	; (8005c88 <__libc_init_array+0x38>)
 8005c54:	4c0d      	ldr	r4, [pc, #52]	; (8005c8c <__libc_init_array+0x3c>)
 8005c56:	1b64      	subs	r4, r4, r5
 8005c58:	10a4      	asrs	r4, r4, #2
 8005c5a:	2600      	movs	r6, #0
 8005c5c:	42a6      	cmp	r6, r4
 8005c5e:	d109      	bne.n	8005c74 <__libc_init_array+0x24>
 8005c60:	4d0b      	ldr	r5, [pc, #44]	; (8005c90 <__libc_init_array+0x40>)
 8005c62:	4c0c      	ldr	r4, [pc, #48]	; (8005c94 <__libc_init_array+0x44>)
 8005c64:	f002 fd7e 	bl	8008764 <_init>
 8005c68:	1b64      	subs	r4, r4, r5
 8005c6a:	10a4      	asrs	r4, r4, #2
 8005c6c:	2600      	movs	r6, #0
 8005c6e:	42a6      	cmp	r6, r4
 8005c70:	d105      	bne.n	8005c7e <__libc_init_array+0x2e>
 8005c72:	bd70      	pop	{r4, r5, r6, pc}
 8005c74:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c78:	4798      	blx	r3
 8005c7a:	3601      	adds	r6, #1
 8005c7c:	e7ee      	b.n	8005c5c <__libc_init_array+0xc>
 8005c7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c82:	4798      	blx	r3
 8005c84:	3601      	adds	r6, #1
 8005c86:	e7f2      	b.n	8005c6e <__libc_init_array+0x1e>
 8005c88:	08008bd4 	.word	0x08008bd4
 8005c8c:	08008bd4 	.word	0x08008bd4
 8005c90:	08008bd4 	.word	0x08008bd4
 8005c94:	08008bd8 	.word	0x08008bd8

08005c98 <memset>:
 8005c98:	4402      	add	r2, r0
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d100      	bne.n	8005ca2 <memset+0xa>
 8005ca0:	4770      	bx	lr
 8005ca2:	f803 1b01 	strb.w	r1, [r3], #1
 8005ca6:	e7f9      	b.n	8005c9c <memset+0x4>

08005ca8 <__cvt>:
 8005ca8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cac:	ec55 4b10 	vmov	r4, r5, d0
 8005cb0:	2d00      	cmp	r5, #0
 8005cb2:	460e      	mov	r6, r1
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	462b      	mov	r3, r5
 8005cb8:	bfbb      	ittet	lt
 8005cba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005cbe:	461d      	movlt	r5, r3
 8005cc0:	2300      	movge	r3, #0
 8005cc2:	232d      	movlt	r3, #45	; 0x2d
 8005cc4:	700b      	strb	r3, [r1, #0]
 8005cc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005cc8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005ccc:	4691      	mov	r9, r2
 8005cce:	f023 0820 	bic.w	r8, r3, #32
 8005cd2:	bfbc      	itt	lt
 8005cd4:	4622      	movlt	r2, r4
 8005cd6:	4614      	movlt	r4, r2
 8005cd8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005cdc:	d005      	beq.n	8005cea <__cvt+0x42>
 8005cde:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005ce2:	d100      	bne.n	8005ce6 <__cvt+0x3e>
 8005ce4:	3601      	adds	r6, #1
 8005ce6:	2102      	movs	r1, #2
 8005ce8:	e000      	b.n	8005cec <__cvt+0x44>
 8005cea:	2103      	movs	r1, #3
 8005cec:	ab03      	add	r3, sp, #12
 8005cee:	9301      	str	r3, [sp, #4]
 8005cf0:	ab02      	add	r3, sp, #8
 8005cf2:	9300      	str	r3, [sp, #0]
 8005cf4:	ec45 4b10 	vmov	d0, r4, r5
 8005cf8:	4653      	mov	r3, sl
 8005cfa:	4632      	mov	r2, r6
 8005cfc:	f000 fe18 	bl	8006930 <_dtoa_r>
 8005d00:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005d04:	4607      	mov	r7, r0
 8005d06:	d102      	bne.n	8005d0e <__cvt+0x66>
 8005d08:	f019 0f01 	tst.w	r9, #1
 8005d0c:	d022      	beq.n	8005d54 <__cvt+0xac>
 8005d0e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005d12:	eb07 0906 	add.w	r9, r7, r6
 8005d16:	d110      	bne.n	8005d3a <__cvt+0x92>
 8005d18:	783b      	ldrb	r3, [r7, #0]
 8005d1a:	2b30      	cmp	r3, #48	; 0x30
 8005d1c:	d10a      	bne.n	8005d34 <__cvt+0x8c>
 8005d1e:	2200      	movs	r2, #0
 8005d20:	2300      	movs	r3, #0
 8005d22:	4620      	mov	r0, r4
 8005d24:	4629      	mov	r1, r5
 8005d26:	f7fa feff 	bl	8000b28 <__aeabi_dcmpeq>
 8005d2a:	b918      	cbnz	r0, 8005d34 <__cvt+0x8c>
 8005d2c:	f1c6 0601 	rsb	r6, r6, #1
 8005d30:	f8ca 6000 	str.w	r6, [sl]
 8005d34:	f8da 3000 	ldr.w	r3, [sl]
 8005d38:	4499      	add	r9, r3
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	4620      	mov	r0, r4
 8005d40:	4629      	mov	r1, r5
 8005d42:	f7fa fef1 	bl	8000b28 <__aeabi_dcmpeq>
 8005d46:	b108      	cbz	r0, 8005d4c <__cvt+0xa4>
 8005d48:	f8cd 900c 	str.w	r9, [sp, #12]
 8005d4c:	2230      	movs	r2, #48	; 0x30
 8005d4e:	9b03      	ldr	r3, [sp, #12]
 8005d50:	454b      	cmp	r3, r9
 8005d52:	d307      	bcc.n	8005d64 <__cvt+0xbc>
 8005d54:	9b03      	ldr	r3, [sp, #12]
 8005d56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d58:	1bdb      	subs	r3, r3, r7
 8005d5a:	4638      	mov	r0, r7
 8005d5c:	6013      	str	r3, [r2, #0]
 8005d5e:	b004      	add	sp, #16
 8005d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d64:	1c59      	adds	r1, r3, #1
 8005d66:	9103      	str	r1, [sp, #12]
 8005d68:	701a      	strb	r2, [r3, #0]
 8005d6a:	e7f0      	b.n	8005d4e <__cvt+0xa6>

08005d6c <__exponent>:
 8005d6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d6e:	4603      	mov	r3, r0
 8005d70:	2900      	cmp	r1, #0
 8005d72:	bfb8      	it	lt
 8005d74:	4249      	neglt	r1, r1
 8005d76:	f803 2b02 	strb.w	r2, [r3], #2
 8005d7a:	bfb4      	ite	lt
 8005d7c:	222d      	movlt	r2, #45	; 0x2d
 8005d7e:	222b      	movge	r2, #43	; 0x2b
 8005d80:	2909      	cmp	r1, #9
 8005d82:	7042      	strb	r2, [r0, #1]
 8005d84:	dd2a      	ble.n	8005ddc <__exponent+0x70>
 8005d86:	f10d 0407 	add.w	r4, sp, #7
 8005d8a:	46a4      	mov	ip, r4
 8005d8c:	270a      	movs	r7, #10
 8005d8e:	46a6      	mov	lr, r4
 8005d90:	460a      	mov	r2, r1
 8005d92:	fb91 f6f7 	sdiv	r6, r1, r7
 8005d96:	fb07 1516 	mls	r5, r7, r6, r1
 8005d9a:	3530      	adds	r5, #48	; 0x30
 8005d9c:	2a63      	cmp	r2, #99	; 0x63
 8005d9e:	f104 34ff 	add.w	r4, r4, #4294967295
 8005da2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005da6:	4631      	mov	r1, r6
 8005da8:	dcf1      	bgt.n	8005d8e <__exponent+0x22>
 8005daa:	3130      	adds	r1, #48	; 0x30
 8005dac:	f1ae 0502 	sub.w	r5, lr, #2
 8005db0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005db4:	1c44      	adds	r4, r0, #1
 8005db6:	4629      	mov	r1, r5
 8005db8:	4561      	cmp	r1, ip
 8005dba:	d30a      	bcc.n	8005dd2 <__exponent+0x66>
 8005dbc:	f10d 0209 	add.w	r2, sp, #9
 8005dc0:	eba2 020e 	sub.w	r2, r2, lr
 8005dc4:	4565      	cmp	r5, ip
 8005dc6:	bf88      	it	hi
 8005dc8:	2200      	movhi	r2, #0
 8005dca:	4413      	add	r3, r2
 8005dcc:	1a18      	subs	r0, r3, r0
 8005dce:	b003      	add	sp, #12
 8005dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005dd6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005dda:	e7ed      	b.n	8005db8 <__exponent+0x4c>
 8005ddc:	2330      	movs	r3, #48	; 0x30
 8005dde:	3130      	adds	r1, #48	; 0x30
 8005de0:	7083      	strb	r3, [r0, #2]
 8005de2:	70c1      	strb	r1, [r0, #3]
 8005de4:	1d03      	adds	r3, r0, #4
 8005de6:	e7f1      	b.n	8005dcc <__exponent+0x60>

08005de8 <_printf_float>:
 8005de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dec:	ed2d 8b02 	vpush	{d8}
 8005df0:	b08d      	sub	sp, #52	; 0x34
 8005df2:	460c      	mov	r4, r1
 8005df4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005df8:	4616      	mov	r6, r2
 8005dfa:	461f      	mov	r7, r3
 8005dfc:	4605      	mov	r5, r0
 8005dfe:	f001 fd3b 	bl	8007878 <_localeconv_r>
 8005e02:	f8d0 a000 	ldr.w	sl, [r0]
 8005e06:	4650      	mov	r0, sl
 8005e08:	f7fa fa0c 	bl	8000224 <strlen>
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	930a      	str	r3, [sp, #40]	; 0x28
 8005e10:	6823      	ldr	r3, [r4, #0]
 8005e12:	9305      	str	r3, [sp, #20]
 8005e14:	f8d8 3000 	ldr.w	r3, [r8]
 8005e18:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005e1c:	3307      	adds	r3, #7
 8005e1e:	f023 0307 	bic.w	r3, r3, #7
 8005e22:	f103 0208 	add.w	r2, r3, #8
 8005e26:	f8c8 2000 	str.w	r2, [r8]
 8005e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005e32:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005e36:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005e3a:	9307      	str	r3, [sp, #28]
 8005e3c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005e40:	ee08 0a10 	vmov	s16, r0
 8005e44:	4b9f      	ldr	r3, [pc, #636]	; (80060c4 <_printf_float+0x2dc>)
 8005e46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e4a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e4e:	f7fa fe9d 	bl	8000b8c <__aeabi_dcmpun>
 8005e52:	bb88      	cbnz	r0, 8005eb8 <_printf_float+0xd0>
 8005e54:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e58:	4b9a      	ldr	r3, [pc, #616]	; (80060c4 <_printf_float+0x2dc>)
 8005e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e5e:	f7fa fe77 	bl	8000b50 <__aeabi_dcmple>
 8005e62:	bb48      	cbnz	r0, 8005eb8 <_printf_float+0xd0>
 8005e64:	2200      	movs	r2, #0
 8005e66:	2300      	movs	r3, #0
 8005e68:	4640      	mov	r0, r8
 8005e6a:	4649      	mov	r1, r9
 8005e6c:	f7fa fe66 	bl	8000b3c <__aeabi_dcmplt>
 8005e70:	b110      	cbz	r0, 8005e78 <_printf_float+0x90>
 8005e72:	232d      	movs	r3, #45	; 0x2d
 8005e74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e78:	4b93      	ldr	r3, [pc, #588]	; (80060c8 <_printf_float+0x2e0>)
 8005e7a:	4894      	ldr	r0, [pc, #592]	; (80060cc <_printf_float+0x2e4>)
 8005e7c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005e80:	bf94      	ite	ls
 8005e82:	4698      	movls	r8, r3
 8005e84:	4680      	movhi	r8, r0
 8005e86:	2303      	movs	r3, #3
 8005e88:	6123      	str	r3, [r4, #16]
 8005e8a:	9b05      	ldr	r3, [sp, #20]
 8005e8c:	f023 0204 	bic.w	r2, r3, #4
 8005e90:	6022      	str	r2, [r4, #0]
 8005e92:	f04f 0900 	mov.w	r9, #0
 8005e96:	9700      	str	r7, [sp, #0]
 8005e98:	4633      	mov	r3, r6
 8005e9a:	aa0b      	add	r2, sp, #44	; 0x2c
 8005e9c:	4621      	mov	r1, r4
 8005e9e:	4628      	mov	r0, r5
 8005ea0:	f000 f9d8 	bl	8006254 <_printf_common>
 8005ea4:	3001      	adds	r0, #1
 8005ea6:	f040 8090 	bne.w	8005fca <_printf_float+0x1e2>
 8005eaa:	f04f 30ff 	mov.w	r0, #4294967295
 8005eae:	b00d      	add	sp, #52	; 0x34
 8005eb0:	ecbd 8b02 	vpop	{d8}
 8005eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eb8:	4642      	mov	r2, r8
 8005eba:	464b      	mov	r3, r9
 8005ebc:	4640      	mov	r0, r8
 8005ebe:	4649      	mov	r1, r9
 8005ec0:	f7fa fe64 	bl	8000b8c <__aeabi_dcmpun>
 8005ec4:	b140      	cbz	r0, 8005ed8 <_printf_float+0xf0>
 8005ec6:	464b      	mov	r3, r9
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	bfbc      	itt	lt
 8005ecc:	232d      	movlt	r3, #45	; 0x2d
 8005ece:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005ed2:	487f      	ldr	r0, [pc, #508]	; (80060d0 <_printf_float+0x2e8>)
 8005ed4:	4b7f      	ldr	r3, [pc, #508]	; (80060d4 <_printf_float+0x2ec>)
 8005ed6:	e7d1      	b.n	8005e7c <_printf_float+0x94>
 8005ed8:	6863      	ldr	r3, [r4, #4]
 8005eda:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005ede:	9206      	str	r2, [sp, #24]
 8005ee0:	1c5a      	adds	r2, r3, #1
 8005ee2:	d13f      	bne.n	8005f64 <_printf_float+0x17c>
 8005ee4:	2306      	movs	r3, #6
 8005ee6:	6063      	str	r3, [r4, #4]
 8005ee8:	9b05      	ldr	r3, [sp, #20]
 8005eea:	6861      	ldr	r1, [r4, #4]
 8005eec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	9303      	str	r3, [sp, #12]
 8005ef4:	ab0a      	add	r3, sp, #40	; 0x28
 8005ef6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005efa:	ab09      	add	r3, sp, #36	; 0x24
 8005efc:	ec49 8b10 	vmov	d0, r8, r9
 8005f00:	9300      	str	r3, [sp, #0]
 8005f02:	6022      	str	r2, [r4, #0]
 8005f04:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005f08:	4628      	mov	r0, r5
 8005f0a:	f7ff fecd 	bl	8005ca8 <__cvt>
 8005f0e:	9b06      	ldr	r3, [sp, #24]
 8005f10:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f12:	2b47      	cmp	r3, #71	; 0x47
 8005f14:	4680      	mov	r8, r0
 8005f16:	d108      	bne.n	8005f2a <_printf_float+0x142>
 8005f18:	1cc8      	adds	r0, r1, #3
 8005f1a:	db02      	blt.n	8005f22 <_printf_float+0x13a>
 8005f1c:	6863      	ldr	r3, [r4, #4]
 8005f1e:	4299      	cmp	r1, r3
 8005f20:	dd41      	ble.n	8005fa6 <_printf_float+0x1be>
 8005f22:	f1ab 0b02 	sub.w	fp, fp, #2
 8005f26:	fa5f fb8b 	uxtb.w	fp, fp
 8005f2a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005f2e:	d820      	bhi.n	8005f72 <_printf_float+0x18a>
 8005f30:	3901      	subs	r1, #1
 8005f32:	465a      	mov	r2, fp
 8005f34:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005f38:	9109      	str	r1, [sp, #36]	; 0x24
 8005f3a:	f7ff ff17 	bl	8005d6c <__exponent>
 8005f3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f40:	1813      	adds	r3, r2, r0
 8005f42:	2a01      	cmp	r2, #1
 8005f44:	4681      	mov	r9, r0
 8005f46:	6123      	str	r3, [r4, #16]
 8005f48:	dc02      	bgt.n	8005f50 <_printf_float+0x168>
 8005f4a:	6822      	ldr	r2, [r4, #0]
 8005f4c:	07d2      	lsls	r2, r2, #31
 8005f4e:	d501      	bpl.n	8005f54 <_printf_float+0x16c>
 8005f50:	3301      	adds	r3, #1
 8005f52:	6123      	str	r3, [r4, #16]
 8005f54:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d09c      	beq.n	8005e96 <_printf_float+0xae>
 8005f5c:	232d      	movs	r3, #45	; 0x2d
 8005f5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f62:	e798      	b.n	8005e96 <_printf_float+0xae>
 8005f64:	9a06      	ldr	r2, [sp, #24]
 8005f66:	2a47      	cmp	r2, #71	; 0x47
 8005f68:	d1be      	bne.n	8005ee8 <_printf_float+0x100>
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d1bc      	bne.n	8005ee8 <_printf_float+0x100>
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e7b9      	b.n	8005ee6 <_printf_float+0xfe>
 8005f72:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005f76:	d118      	bne.n	8005faa <_printf_float+0x1c2>
 8005f78:	2900      	cmp	r1, #0
 8005f7a:	6863      	ldr	r3, [r4, #4]
 8005f7c:	dd0b      	ble.n	8005f96 <_printf_float+0x1ae>
 8005f7e:	6121      	str	r1, [r4, #16]
 8005f80:	b913      	cbnz	r3, 8005f88 <_printf_float+0x1a0>
 8005f82:	6822      	ldr	r2, [r4, #0]
 8005f84:	07d0      	lsls	r0, r2, #31
 8005f86:	d502      	bpl.n	8005f8e <_printf_float+0x1a6>
 8005f88:	3301      	adds	r3, #1
 8005f8a:	440b      	add	r3, r1
 8005f8c:	6123      	str	r3, [r4, #16]
 8005f8e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005f90:	f04f 0900 	mov.w	r9, #0
 8005f94:	e7de      	b.n	8005f54 <_printf_float+0x16c>
 8005f96:	b913      	cbnz	r3, 8005f9e <_printf_float+0x1b6>
 8005f98:	6822      	ldr	r2, [r4, #0]
 8005f9a:	07d2      	lsls	r2, r2, #31
 8005f9c:	d501      	bpl.n	8005fa2 <_printf_float+0x1ba>
 8005f9e:	3302      	adds	r3, #2
 8005fa0:	e7f4      	b.n	8005f8c <_printf_float+0x1a4>
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e7f2      	b.n	8005f8c <_printf_float+0x1a4>
 8005fa6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005faa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fac:	4299      	cmp	r1, r3
 8005fae:	db05      	blt.n	8005fbc <_printf_float+0x1d4>
 8005fb0:	6823      	ldr	r3, [r4, #0]
 8005fb2:	6121      	str	r1, [r4, #16]
 8005fb4:	07d8      	lsls	r0, r3, #31
 8005fb6:	d5ea      	bpl.n	8005f8e <_printf_float+0x1a6>
 8005fb8:	1c4b      	adds	r3, r1, #1
 8005fba:	e7e7      	b.n	8005f8c <_printf_float+0x1a4>
 8005fbc:	2900      	cmp	r1, #0
 8005fbe:	bfd4      	ite	le
 8005fc0:	f1c1 0202 	rsble	r2, r1, #2
 8005fc4:	2201      	movgt	r2, #1
 8005fc6:	4413      	add	r3, r2
 8005fc8:	e7e0      	b.n	8005f8c <_printf_float+0x1a4>
 8005fca:	6823      	ldr	r3, [r4, #0]
 8005fcc:	055a      	lsls	r2, r3, #21
 8005fce:	d407      	bmi.n	8005fe0 <_printf_float+0x1f8>
 8005fd0:	6923      	ldr	r3, [r4, #16]
 8005fd2:	4642      	mov	r2, r8
 8005fd4:	4631      	mov	r1, r6
 8005fd6:	4628      	mov	r0, r5
 8005fd8:	47b8      	blx	r7
 8005fda:	3001      	adds	r0, #1
 8005fdc:	d12c      	bne.n	8006038 <_printf_float+0x250>
 8005fde:	e764      	b.n	8005eaa <_printf_float+0xc2>
 8005fe0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005fe4:	f240 80e0 	bls.w	80061a8 <_printf_float+0x3c0>
 8005fe8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005fec:	2200      	movs	r2, #0
 8005fee:	2300      	movs	r3, #0
 8005ff0:	f7fa fd9a 	bl	8000b28 <__aeabi_dcmpeq>
 8005ff4:	2800      	cmp	r0, #0
 8005ff6:	d034      	beq.n	8006062 <_printf_float+0x27a>
 8005ff8:	4a37      	ldr	r2, [pc, #220]	; (80060d8 <_printf_float+0x2f0>)
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	4631      	mov	r1, r6
 8005ffe:	4628      	mov	r0, r5
 8006000:	47b8      	blx	r7
 8006002:	3001      	adds	r0, #1
 8006004:	f43f af51 	beq.w	8005eaa <_printf_float+0xc2>
 8006008:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800600c:	429a      	cmp	r2, r3
 800600e:	db02      	blt.n	8006016 <_printf_float+0x22e>
 8006010:	6823      	ldr	r3, [r4, #0]
 8006012:	07d8      	lsls	r0, r3, #31
 8006014:	d510      	bpl.n	8006038 <_printf_float+0x250>
 8006016:	ee18 3a10 	vmov	r3, s16
 800601a:	4652      	mov	r2, sl
 800601c:	4631      	mov	r1, r6
 800601e:	4628      	mov	r0, r5
 8006020:	47b8      	blx	r7
 8006022:	3001      	adds	r0, #1
 8006024:	f43f af41 	beq.w	8005eaa <_printf_float+0xc2>
 8006028:	f04f 0800 	mov.w	r8, #0
 800602c:	f104 091a 	add.w	r9, r4, #26
 8006030:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006032:	3b01      	subs	r3, #1
 8006034:	4543      	cmp	r3, r8
 8006036:	dc09      	bgt.n	800604c <_printf_float+0x264>
 8006038:	6823      	ldr	r3, [r4, #0]
 800603a:	079b      	lsls	r3, r3, #30
 800603c:	f100 8105 	bmi.w	800624a <_printf_float+0x462>
 8006040:	68e0      	ldr	r0, [r4, #12]
 8006042:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006044:	4298      	cmp	r0, r3
 8006046:	bfb8      	it	lt
 8006048:	4618      	movlt	r0, r3
 800604a:	e730      	b.n	8005eae <_printf_float+0xc6>
 800604c:	2301      	movs	r3, #1
 800604e:	464a      	mov	r2, r9
 8006050:	4631      	mov	r1, r6
 8006052:	4628      	mov	r0, r5
 8006054:	47b8      	blx	r7
 8006056:	3001      	adds	r0, #1
 8006058:	f43f af27 	beq.w	8005eaa <_printf_float+0xc2>
 800605c:	f108 0801 	add.w	r8, r8, #1
 8006060:	e7e6      	b.n	8006030 <_printf_float+0x248>
 8006062:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006064:	2b00      	cmp	r3, #0
 8006066:	dc39      	bgt.n	80060dc <_printf_float+0x2f4>
 8006068:	4a1b      	ldr	r2, [pc, #108]	; (80060d8 <_printf_float+0x2f0>)
 800606a:	2301      	movs	r3, #1
 800606c:	4631      	mov	r1, r6
 800606e:	4628      	mov	r0, r5
 8006070:	47b8      	blx	r7
 8006072:	3001      	adds	r0, #1
 8006074:	f43f af19 	beq.w	8005eaa <_printf_float+0xc2>
 8006078:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800607c:	4313      	orrs	r3, r2
 800607e:	d102      	bne.n	8006086 <_printf_float+0x29e>
 8006080:	6823      	ldr	r3, [r4, #0]
 8006082:	07d9      	lsls	r1, r3, #31
 8006084:	d5d8      	bpl.n	8006038 <_printf_float+0x250>
 8006086:	ee18 3a10 	vmov	r3, s16
 800608a:	4652      	mov	r2, sl
 800608c:	4631      	mov	r1, r6
 800608e:	4628      	mov	r0, r5
 8006090:	47b8      	blx	r7
 8006092:	3001      	adds	r0, #1
 8006094:	f43f af09 	beq.w	8005eaa <_printf_float+0xc2>
 8006098:	f04f 0900 	mov.w	r9, #0
 800609c:	f104 0a1a 	add.w	sl, r4, #26
 80060a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060a2:	425b      	negs	r3, r3
 80060a4:	454b      	cmp	r3, r9
 80060a6:	dc01      	bgt.n	80060ac <_printf_float+0x2c4>
 80060a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060aa:	e792      	b.n	8005fd2 <_printf_float+0x1ea>
 80060ac:	2301      	movs	r3, #1
 80060ae:	4652      	mov	r2, sl
 80060b0:	4631      	mov	r1, r6
 80060b2:	4628      	mov	r0, r5
 80060b4:	47b8      	blx	r7
 80060b6:	3001      	adds	r0, #1
 80060b8:	f43f aef7 	beq.w	8005eaa <_printf_float+0xc2>
 80060bc:	f109 0901 	add.w	r9, r9, #1
 80060c0:	e7ee      	b.n	80060a0 <_printf_float+0x2b8>
 80060c2:	bf00      	nop
 80060c4:	7fefffff 	.word	0x7fefffff
 80060c8:	080087f0 	.word	0x080087f0
 80060cc:	080087f4 	.word	0x080087f4
 80060d0:	080087fc 	.word	0x080087fc
 80060d4:	080087f8 	.word	0x080087f8
 80060d8:	08008800 	.word	0x08008800
 80060dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80060de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80060e0:	429a      	cmp	r2, r3
 80060e2:	bfa8      	it	ge
 80060e4:	461a      	movge	r2, r3
 80060e6:	2a00      	cmp	r2, #0
 80060e8:	4691      	mov	r9, r2
 80060ea:	dc37      	bgt.n	800615c <_printf_float+0x374>
 80060ec:	f04f 0b00 	mov.w	fp, #0
 80060f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80060f4:	f104 021a 	add.w	r2, r4, #26
 80060f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80060fa:	9305      	str	r3, [sp, #20]
 80060fc:	eba3 0309 	sub.w	r3, r3, r9
 8006100:	455b      	cmp	r3, fp
 8006102:	dc33      	bgt.n	800616c <_printf_float+0x384>
 8006104:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006108:	429a      	cmp	r2, r3
 800610a:	db3b      	blt.n	8006184 <_printf_float+0x39c>
 800610c:	6823      	ldr	r3, [r4, #0]
 800610e:	07da      	lsls	r2, r3, #31
 8006110:	d438      	bmi.n	8006184 <_printf_float+0x39c>
 8006112:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006114:	9b05      	ldr	r3, [sp, #20]
 8006116:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006118:	1ad3      	subs	r3, r2, r3
 800611a:	eba2 0901 	sub.w	r9, r2, r1
 800611e:	4599      	cmp	r9, r3
 8006120:	bfa8      	it	ge
 8006122:	4699      	movge	r9, r3
 8006124:	f1b9 0f00 	cmp.w	r9, #0
 8006128:	dc35      	bgt.n	8006196 <_printf_float+0x3ae>
 800612a:	f04f 0800 	mov.w	r8, #0
 800612e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006132:	f104 0a1a 	add.w	sl, r4, #26
 8006136:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800613a:	1a9b      	subs	r3, r3, r2
 800613c:	eba3 0309 	sub.w	r3, r3, r9
 8006140:	4543      	cmp	r3, r8
 8006142:	f77f af79 	ble.w	8006038 <_printf_float+0x250>
 8006146:	2301      	movs	r3, #1
 8006148:	4652      	mov	r2, sl
 800614a:	4631      	mov	r1, r6
 800614c:	4628      	mov	r0, r5
 800614e:	47b8      	blx	r7
 8006150:	3001      	adds	r0, #1
 8006152:	f43f aeaa 	beq.w	8005eaa <_printf_float+0xc2>
 8006156:	f108 0801 	add.w	r8, r8, #1
 800615a:	e7ec      	b.n	8006136 <_printf_float+0x34e>
 800615c:	4613      	mov	r3, r2
 800615e:	4631      	mov	r1, r6
 8006160:	4642      	mov	r2, r8
 8006162:	4628      	mov	r0, r5
 8006164:	47b8      	blx	r7
 8006166:	3001      	adds	r0, #1
 8006168:	d1c0      	bne.n	80060ec <_printf_float+0x304>
 800616a:	e69e      	b.n	8005eaa <_printf_float+0xc2>
 800616c:	2301      	movs	r3, #1
 800616e:	4631      	mov	r1, r6
 8006170:	4628      	mov	r0, r5
 8006172:	9205      	str	r2, [sp, #20]
 8006174:	47b8      	blx	r7
 8006176:	3001      	adds	r0, #1
 8006178:	f43f ae97 	beq.w	8005eaa <_printf_float+0xc2>
 800617c:	9a05      	ldr	r2, [sp, #20]
 800617e:	f10b 0b01 	add.w	fp, fp, #1
 8006182:	e7b9      	b.n	80060f8 <_printf_float+0x310>
 8006184:	ee18 3a10 	vmov	r3, s16
 8006188:	4652      	mov	r2, sl
 800618a:	4631      	mov	r1, r6
 800618c:	4628      	mov	r0, r5
 800618e:	47b8      	blx	r7
 8006190:	3001      	adds	r0, #1
 8006192:	d1be      	bne.n	8006112 <_printf_float+0x32a>
 8006194:	e689      	b.n	8005eaa <_printf_float+0xc2>
 8006196:	9a05      	ldr	r2, [sp, #20]
 8006198:	464b      	mov	r3, r9
 800619a:	4442      	add	r2, r8
 800619c:	4631      	mov	r1, r6
 800619e:	4628      	mov	r0, r5
 80061a0:	47b8      	blx	r7
 80061a2:	3001      	adds	r0, #1
 80061a4:	d1c1      	bne.n	800612a <_printf_float+0x342>
 80061a6:	e680      	b.n	8005eaa <_printf_float+0xc2>
 80061a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80061aa:	2a01      	cmp	r2, #1
 80061ac:	dc01      	bgt.n	80061b2 <_printf_float+0x3ca>
 80061ae:	07db      	lsls	r3, r3, #31
 80061b0:	d538      	bpl.n	8006224 <_printf_float+0x43c>
 80061b2:	2301      	movs	r3, #1
 80061b4:	4642      	mov	r2, r8
 80061b6:	4631      	mov	r1, r6
 80061b8:	4628      	mov	r0, r5
 80061ba:	47b8      	blx	r7
 80061bc:	3001      	adds	r0, #1
 80061be:	f43f ae74 	beq.w	8005eaa <_printf_float+0xc2>
 80061c2:	ee18 3a10 	vmov	r3, s16
 80061c6:	4652      	mov	r2, sl
 80061c8:	4631      	mov	r1, r6
 80061ca:	4628      	mov	r0, r5
 80061cc:	47b8      	blx	r7
 80061ce:	3001      	adds	r0, #1
 80061d0:	f43f ae6b 	beq.w	8005eaa <_printf_float+0xc2>
 80061d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80061d8:	2200      	movs	r2, #0
 80061da:	2300      	movs	r3, #0
 80061dc:	f7fa fca4 	bl	8000b28 <__aeabi_dcmpeq>
 80061e0:	b9d8      	cbnz	r0, 800621a <_printf_float+0x432>
 80061e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061e4:	f108 0201 	add.w	r2, r8, #1
 80061e8:	3b01      	subs	r3, #1
 80061ea:	4631      	mov	r1, r6
 80061ec:	4628      	mov	r0, r5
 80061ee:	47b8      	blx	r7
 80061f0:	3001      	adds	r0, #1
 80061f2:	d10e      	bne.n	8006212 <_printf_float+0x42a>
 80061f4:	e659      	b.n	8005eaa <_printf_float+0xc2>
 80061f6:	2301      	movs	r3, #1
 80061f8:	4652      	mov	r2, sl
 80061fa:	4631      	mov	r1, r6
 80061fc:	4628      	mov	r0, r5
 80061fe:	47b8      	blx	r7
 8006200:	3001      	adds	r0, #1
 8006202:	f43f ae52 	beq.w	8005eaa <_printf_float+0xc2>
 8006206:	f108 0801 	add.w	r8, r8, #1
 800620a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800620c:	3b01      	subs	r3, #1
 800620e:	4543      	cmp	r3, r8
 8006210:	dcf1      	bgt.n	80061f6 <_printf_float+0x40e>
 8006212:	464b      	mov	r3, r9
 8006214:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006218:	e6dc      	b.n	8005fd4 <_printf_float+0x1ec>
 800621a:	f04f 0800 	mov.w	r8, #0
 800621e:	f104 0a1a 	add.w	sl, r4, #26
 8006222:	e7f2      	b.n	800620a <_printf_float+0x422>
 8006224:	2301      	movs	r3, #1
 8006226:	4642      	mov	r2, r8
 8006228:	e7df      	b.n	80061ea <_printf_float+0x402>
 800622a:	2301      	movs	r3, #1
 800622c:	464a      	mov	r2, r9
 800622e:	4631      	mov	r1, r6
 8006230:	4628      	mov	r0, r5
 8006232:	47b8      	blx	r7
 8006234:	3001      	adds	r0, #1
 8006236:	f43f ae38 	beq.w	8005eaa <_printf_float+0xc2>
 800623a:	f108 0801 	add.w	r8, r8, #1
 800623e:	68e3      	ldr	r3, [r4, #12]
 8006240:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006242:	1a5b      	subs	r3, r3, r1
 8006244:	4543      	cmp	r3, r8
 8006246:	dcf0      	bgt.n	800622a <_printf_float+0x442>
 8006248:	e6fa      	b.n	8006040 <_printf_float+0x258>
 800624a:	f04f 0800 	mov.w	r8, #0
 800624e:	f104 0919 	add.w	r9, r4, #25
 8006252:	e7f4      	b.n	800623e <_printf_float+0x456>

08006254 <_printf_common>:
 8006254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006258:	4616      	mov	r6, r2
 800625a:	4699      	mov	r9, r3
 800625c:	688a      	ldr	r2, [r1, #8]
 800625e:	690b      	ldr	r3, [r1, #16]
 8006260:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006264:	4293      	cmp	r3, r2
 8006266:	bfb8      	it	lt
 8006268:	4613      	movlt	r3, r2
 800626a:	6033      	str	r3, [r6, #0]
 800626c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006270:	4607      	mov	r7, r0
 8006272:	460c      	mov	r4, r1
 8006274:	b10a      	cbz	r2, 800627a <_printf_common+0x26>
 8006276:	3301      	adds	r3, #1
 8006278:	6033      	str	r3, [r6, #0]
 800627a:	6823      	ldr	r3, [r4, #0]
 800627c:	0699      	lsls	r1, r3, #26
 800627e:	bf42      	ittt	mi
 8006280:	6833      	ldrmi	r3, [r6, #0]
 8006282:	3302      	addmi	r3, #2
 8006284:	6033      	strmi	r3, [r6, #0]
 8006286:	6825      	ldr	r5, [r4, #0]
 8006288:	f015 0506 	ands.w	r5, r5, #6
 800628c:	d106      	bne.n	800629c <_printf_common+0x48>
 800628e:	f104 0a19 	add.w	sl, r4, #25
 8006292:	68e3      	ldr	r3, [r4, #12]
 8006294:	6832      	ldr	r2, [r6, #0]
 8006296:	1a9b      	subs	r3, r3, r2
 8006298:	42ab      	cmp	r3, r5
 800629a:	dc26      	bgt.n	80062ea <_printf_common+0x96>
 800629c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80062a0:	1e13      	subs	r3, r2, #0
 80062a2:	6822      	ldr	r2, [r4, #0]
 80062a4:	bf18      	it	ne
 80062a6:	2301      	movne	r3, #1
 80062a8:	0692      	lsls	r2, r2, #26
 80062aa:	d42b      	bmi.n	8006304 <_printf_common+0xb0>
 80062ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80062b0:	4649      	mov	r1, r9
 80062b2:	4638      	mov	r0, r7
 80062b4:	47c0      	blx	r8
 80062b6:	3001      	adds	r0, #1
 80062b8:	d01e      	beq.n	80062f8 <_printf_common+0xa4>
 80062ba:	6823      	ldr	r3, [r4, #0]
 80062bc:	68e5      	ldr	r5, [r4, #12]
 80062be:	6832      	ldr	r2, [r6, #0]
 80062c0:	f003 0306 	and.w	r3, r3, #6
 80062c4:	2b04      	cmp	r3, #4
 80062c6:	bf08      	it	eq
 80062c8:	1aad      	subeq	r5, r5, r2
 80062ca:	68a3      	ldr	r3, [r4, #8]
 80062cc:	6922      	ldr	r2, [r4, #16]
 80062ce:	bf0c      	ite	eq
 80062d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062d4:	2500      	movne	r5, #0
 80062d6:	4293      	cmp	r3, r2
 80062d8:	bfc4      	itt	gt
 80062da:	1a9b      	subgt	r3, r3, r2
 80062dc:	18ed      	addgt	r5, r5, r3
 80062de:	2600      	movs	r6, #0
 80062e0:	341a      	adds	r4, #26
 80062e2:	42b5      	cmp	r5, r6
 80062e4:	d11a      	bne.n	800631c <_printf_common+0xc8>
 80062e6:	2000      	movs	r0, #0
 80062e8:	e008      	b.n	80062fc <_printf_common+0xa8>
 80062ea:	2301      	movs	r3, #1
 80062ec:	4652      	mov	r2, sl
 80062ee:	4649      	mov	r1, r9
 80062f0:	4638      	mov	r0, r7
 80062f2:	47c0      	blx	r8
 80062f4:	3001      	adds	r0, #1
 80062f6:	d103      	bne.n	8006300 <_printf_common+0xac>
 80062f8:	f04f 30ff 	mov.w	r0, #4294967295
 80062fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006300:	3501      	adds	r5, #1
 8006302:	e7c6      	b.n	8006292 <_printf_common+0x3e>
 8006304:	18e1      	adds	r1, r4, r3
 8006306:	1c5a      	adds	r2, r3, #1
 8006308:	2030      	movs	r0, #48	; 0x30
 800630a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800630e:	4422      	add	r2, r4
 8006310:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006314:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006318:	3302      	adds	r3, #2
 800631a:	e7c7      	b.n	80062ac <_printf_common+0x58>
 800631c:	2301      	movs	r3, #1
 800631e:	4622      	mov	r2, r4
 8006320:	4649      	mov	r1, r9
 8006322:	4638      	mov	r0, r7
 8006324:	47c0      	blx	r8
 8006326:	3001      	adds	r0, #1
 8006328:	d0e6      	beq.n	80062f8 <_printf_common+0xa4>
 800632a:	3601      	adds	r6, #1
 800632c:	e7d9      	b.n	80062e2 <_printf_common+0x8e>
	...

08006330 <_printf_i>:
 8006330:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006334:	460c      	mov	r4, r1
 8006336:	4691      	mov	r9, r2
 8006338:	7e27      	ldrb	r7, [r4, #24]
 800633a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800633c:	2f78      	cmp	r7, #120	; 0x78
 800633e:	4680      	mov	r8, r0
 8006340:	469a      	mov	sl, r3
 8006342:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006346:	d807      	bhi.n	8006358 <_printf_i+0x28>
 8006348:	2f62      	cmp	r7, #98	; 0x62
 800634a:	d80a      	bhi.n	8006362 <_printf_i+0x32>
 800634c:	2f00      	cmp	r7, #0
 800634e:	f000 80d8 	beq.w	8006502 <_printf_i+0x1d2>
 8006352:	2f58      	cmp	r7, #88	; 0x58
 8006354:	f000 80a3 	beq.w	800649e <_printf_i+0x16e>
 8006358:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800635c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006360:	e03a      	b.n	80063d8 <_printf_i+0xa8>
 8006362:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006366:	2b15      	cmp	r3, #21
 8006368:	d8f6      	bhi.n	8006358 <_printf_i+0x28>
 800636a:	a001      	add	r0, pc, #4	; (adr r0, 8006370 <_printf_i+0x40>)
 800636c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006370:	080063c9 	.word	0x080063c9
 8006374:	080063dd 	.word	0x080063dd
 8006378:	08006359 	.word	0x08006359
 800637c:	08006359 	.word	0x08006359
 8006380:	08006359 	.word	0x08006359
 8006384:	08006359 	.word	0x08006359
 8006388:	080063dd 	.word	0x080063dd
 800638c:	08006359 	.word	0x08006359
 8006390:	08006359 	.word	0x08006359
 8006394:	08006359 	.word	0x08006359
 8006398:	08006359 	.word	0x08006359
 800639c:	080064e9 	.word	0x080064e9
 80063a0:	0800640d 	.word	0x0800640d
 80063a4:	080064cb 	.word	0x080064cb
 80063a8:	08006359 	.word	0x08006359
 80063ac:	08006359 	.word	0x08006359
 80063b0:	0800650b 	.word	0x0800650b
 80063b4:	08006359 	.word	0x08006359
 80063b8:	0800640d 	.word	0x0800640d
 80063bc:	08006359 	.word	0x08006359
 80063c0:	08006359 	.word	0x08006359
 80063c4:	080064d3 	.word	0x080064d3
 80063c8:	680b      	ldr	r3, [r1, #0]
 80063ca:	1d1a      	adds	r2, r3, #4
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	600a      	str	r2, [r1, #0]
 80063d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80063d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80063d8:	2301      	movs	r3, #1
 80063da:	e0a3      	b.n	8006524 <_printf_i+0x1f4>
 80063dc:	6825      	ldr	r5, [r4, #0]
 80063de:	6808      	ldr	r0, [r1, #0]
 80063e0:	062e      	lsls	r6, r5, #24
 80063e2:	f100 0304 	add.w	r3, r0, #4
 80063e6:	d50a      	bpl.n	80063fe <_printf_i+0xce>
 80063e8:	6805      	ldr	r5, [r0, #0]
 80063ea:	600b      	str	r3, [r1, #0]
 80063ec:	2d00      	cmp	r5, #0
 80063ee:	da03      	bge.n	80063f8 <_printf_i+0xc8>
 80063f0:	232d      	movs	r3, #45	; 0x2d
 80063f2:	426d      	negs	r5, r5
 80063f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063f8:	485e      	ldr	r0, [pc, #376]	; (8006574 <_printf_i+0x244>)
 80063fa:	230a      	movs	r3, #10
 80063fc:	e019      	b.n	8006432 <_printf_i+0x102>
 80063fe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006402:	6805      	ldr	r5, [r0, #0]
 8006404:	600b      	str	r3, [r1, #0]
 8006406:	bf18      	it	ne
 8006408:	b22d      	sxthne	r5, r5
 800640a:	e7ef      	b.n	80063ec <_printf_i+0xbc>
 800640c:	680b      	ldr	r3, [r1, #0]
 800640e:	6825      	ldr	r5, [r4, #0]
 8006410:	1d18      	adds	r0, r3, #4
 8006412:	6008      	str	r0, [r1, #0]
 8006414:	0628      	lsls	r0, r5, #24
 8006416:	d501      	bpl.n	800641c <_printf_i+0xec>
 8006418:	681d      	ldr	r5, [r3, #0]
 800641a:	e002      	b.n	8006422 <_printf_i+0xf2>
 800641c:	0669      	lsls	r1, r5, #25
 800641e:	d5fb      	bpl.n	8006418 <_printf_i+0xe8>
 8006420:	881d      	ldrh	r5, [r3, #0]
 8006422:	4854      	ldr	r0, [pc, #336]	; (8006574 <_printf_i+0x244>)
 8006424:	2f6f      	cmp	r7, #111	; 0x6f
 8006426:	bf0c      	ite	eq
 8006428:	2308      	moveq	r3, #8
 800642a:	230a      	movne	r3, #10
 800642c:	2100      	movs	r1, #0
 800642e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006432:	6866      	ldr	r6, [r4, #4]
 8006434:	60a6      	str	r6, [r4, #8]
 8006436:	2e00      	cmp	r6, #0
 8006438:	bfa2      	ittt	ge
 800643a:	6821      	ldrge	r1, [r4, #0]
 800643c:	f021 0104 	bicge.w	r1, r1, #4
 8006440:	6021      	strge	r1, [r4, #0]
 8006442:	b90d      	cbnz	r5, 8006448 <_printf_i+0x118>
 8006444:	2e00      	cmp	r6, #0
 8006446:	d04d      	beq.n	80064e4 <_printf_i+0x1b4>
 8006448:	4616      	mov	r6, r2
 800644a:	fbb5 f1f3 	udiv	r1, r5, r3
 800644e:	fb03 5711 	mls	r7, r3, r1, r5
 8006452:	5dc7      	ldrb	r7, [r0, r7]
 8006454:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006458:	462f      	mov	r7, r5
 800645a:	42bb      	cmp	r3, r7
 800645c:	460d      	mov	r5, r1
 800645e:	d9f4      	bls.n	800644a <_printf_i+0x11a>
 8006460:	2b08      	cmp	r3, #8
 8006462:	d10b      	bne.n	800647c <_printf_i+0x14c>
 8006464:	6823      	ldr	r3, [r4, #0]
 8006466:	07df      	lsls	r7, r3, #31
 8006468:	d508      	bpl.n	800647c <_printf_i+0x14c>
 800646a:	6923      	ldr	r3, [r4, #16]
 800646c:	6861      	ldr	r1, [r4, #4]
 800646e:	4299      	cmp	r1, r3
 8006470:	bfde      	ittt	le
 8006472:	2330      	movle	r3, #48	; 0x30
 8006474:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006478:	f106 36ff 	addle.w	r6, r6, #4294967295
 800647c:	1b92      	subs	r2, r2, r6
 800647e:	6122      	str	r2, [r4, #16]
 8006480:	f8cd a000 	str.w	sl, [sp]
 8006484:	464b      	mov	r3, r9
 8006486:	aa03      	add	r2, sp, #12
 8006488:	4621      	mov	r1, r4
 800648a:	4640      	mov	r0, r8
 800648c:	f7ff fee2 	bl	8006254 <_printf_common>
 8006490:	3001      	adds	r0, #1
 8006492:	d14c      	bne.n	800652e <_printf_i+0x1fe>
 8006494:	f04f 30ff 	mov.w	r0, #4294967295
 8006498:	b004      	add	sp, #16
 800649a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800649e:	4835      	ldr	r0, [pc, #212]	; (8006574 <_printf_i+0x244>)
 80064a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80064a4:	6823      	ldr	r3, [r4, #0]
 80064a6:	680e      	ldr	r6, [r1, #0]
 80064a8:	061f      	lsls	r7, r3, #24
 80064aa:	f856 5b04 	ldr.w	r5, [r6], #4
 80064ae:	600e      	str	r6, [r1, #0]
 80064b0:	d514      	bpl.n	80064dc <_printf_i+0x1ac>
 80064b2:	07d9      	lsls	r1, r3, #31
 80064b4:	bf44      	itt	mi
 80064b6:	f043 0320 	orrmi.w	r3, r3, #32
 80064ba:	6023      	strmi	r3, [r4, #0]
 80064bc:	b91d      	cbnz	r5, 80064c6 <_printf_i+0x196>
 80064be:	6823      	ldr	r3, [r4, #0]
 80064c0:	f023 0320 	bic.w	r3, r3, #32
 80064c4:	6023      	str	r3, [r4, #0]
 80064c6:	2310      	movs	r3, #16
 80064c8:	e7b0      	b.n	800642c <_printf_i+0xfc>
 80064ca:	6823      	ldr	r3, [r4, #0]
 80064cc:	f043 0320 	orr.w	r3, r3, #32
 80064d0:	6023      	str	r3, [r4, #0]
 80064d2:	2378      	movs	r3, #120	; 0x78
 80064d4:	4828      	ldr	r0, [pc, #160]	; (8006578 <_printf_i+0x248>)
 80064d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80064da:	e7e3      	b.n	80064a4 <_printf_i+0x174>
 80064dc:	065e      	lsls	r6, r3, #25
 80064de:	bf48      	it	mi
 80064e0:	b2ad      	uxthmi	r5, r5
 80064e2:	e7e6      	b.n	80064b2 <_printf_i+0x182>
 80064e4:	4616      	mov	r6, r2
 80064e6:	e7bb      	b.n	8006460 <_printf_i+0x130>
 80064e8:	680b      	ldr	r3, [r1, #0]
 80064ea:	6826      	ldr	r6, [r4, #0]
 80064ec:	6960      	ldr	r0, [r4, #20]
 80064ee:	1d1d      	adds	r5, r3, #4
 80064f0:	600d      	str	r5, [r1, #0]
 80064f2:	0635      	lsls	r5, r6, #24
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	d501      	bpl.n	80064fc <_printf_i+0x1cc>
 80064f8:	6018      	str	r0, [r3, #0]
 80064fa:	e002      	b.n	8006502 <_printf_i+0x1d2>
 80064fc:	0671      	lsls	r1, r6, #25
 80064fe:	d5fb      	bpl.n	80064f8 <_printf_i+0x1c8>
 8006500:	8018      	strh	r0, [r3, #0]
 8006502:	2300      	movs	r3, #0
 8006504:	6123      	str	r3, [r4, #16]
 8006506:	4616      	mov	r6, r2
 8006508:	e7ba      	b.n	8006480 <_printf_i+0x150>
 800650a:	680b      	ldr	r3, [r1, #0]
 800650c:	1d1a      	adds	r2, r3, #4
 800650e:	600a      	str	r2, [r1, #0]
 8006510:	681e      	ldr	r6, [r3, #0]
 8006512:	6862      	ldr	r2, [r4, #4]
 8006514:	2100      	movs	r1, #0
 8006516:	4630      	mov	r0, r6
 8006518:	f7f9 fe92 	bl	8000240 <memchr>
 800651c:	b108      	cbz	r0, 8006522 <_printf_i+0x1f2>
 800651e:	1b80      	subs	r0, r0, r6
 8006520:	6060      	str	r0, [r4, #4]
 8006522:	6863      	ldr	r3, [r4, #4]
 8006524:	6123      	str	r3, [r4, #16]
 8006526:	2300      	movs	r3, #0
 8006528:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800652c:	e7a8      	b.n	8006480 <_printf_i+0x150>
 800652e:	6923      	ldr	r3, [r4, #16]
 8006530:	4632      	mov	r2, r6
 8006532:	4649      	mov	r1, r9
 8006534:	4640      	mov	r0, r8
 8006536:	47d0      	blx	sl
 8006538:	3001      	adds	r0, #1
 800653a:	d0ab      	beq.n	8006494 <_printf_i+0x164>
 800653c:	6823      	ldr	r3, [r4, #0]
 800653e:	079b      	lsls	r3, r3, #30
 8006540:	d413      	bmi.n	800656a <_printf_i+0x23a>
 8006542:	68e0      	ldr	r0, [r4, #12]
 8006544:	9b03      	ldr	r3, [sp, #12]
 8006546:	4298      	cmp	r0, r3
 8006548:	bfb8      	it	lt
 800654a:	4618      	movlt	r0, r3
 800654c:	e7a4      	b.n	8006498 <_printf_i+0x168>
 800654e:	2301      	movs	r3, #1
 8006550:	4632      	mov	r2, r6
 8006552:	4649      	mov	r1, r9
 8006554:	4640      	mov	r0, r8
 8006556:	47d0      	blx	sl
 8006558:	3001      	adds	r0, #1
 800655a:	d09b      	beq.n	8006494 <_printf_i+0x164>
 800655c:	3501      	adds	r5, #1
 800655e:	68e3      	ldr	r3, [r4, #12]
 8006560:	9903      	ldr	r1, [sp, #12]
 8006562:	1a5b      	subs	r3, r3, r1
 8006564:	42ab      	cmp	r3, r5
 8006566:	dcf2      	bgt.n	800654e <_printf_i+0x21e>
 8006568:	e7eb      	b.n	8006542 <_printf_i+0x212>
 800656a:	2500      	movs	r5, #0
 800656c:	f104 0619 	add.w	r6, r4, #25
 8006570:	e7f5      	b.n	800655e <_printf_i+0x22e>
 8006572:	bf00      	nop
 8006574:	08008802 	.word	0x08008802
 8006578:	08008813 	.word	0x08008813

0800657c <iprintf>:
 800657c:	b40f      	push	{r0, r1, r2, r3}
 800657e:	4b0a      	ldr	r3, [pc, #40]	; (80065a8 <iprintf+0x2c>)
 8006580:	b513      	push	{r0, r1, r4, lr}
 8006582:	681c      	ldr	r4, [r3, #0]
 8006584:	b124      	cbz	r4, 8006590 <iprintf+0x14>
 8006586:	69a3      	ldr	r3, [r4, #24]
 8006588:	b913      	cbnz	r3, 8006590 <iprintf+0x14>
 800658a:	4620      	mov	r0, r4
 800658c:	f001 f8d6 	bl	800773c <__sinit>
 8006590:	ab05      	add	r3, sp, #20
 8006592:	9a04      	ldr	r2, [sp, #16]
 8006594:	68a1      	ldr	r1, [r4, #8]
 8006596:	9301      	str	r3, [sp, #4]
 8006598:	4620      	mov	r0, r4
 800659a:	f001 fe51 	bl	8008240 <_vfiprintf_r>
 800659e:	b002      	add	sp, #8
 80065a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065a4:	b004      	add	sp, #16
 80065a6:	4770      	bx	lr
 80065a8:	20000018 	.word	0x20000018

080065ac <_puts_r>:
 80065ac:	b570      	push	{r4, r5, r6, lr}
 80065ae:	460e      	mov	r6, r1
 80065b0:	4605      	mov	r5, r0
 80065b2:	b118      	cbz	r0, 80065bc <_puts_r+0x10>
 80065b4:	6983      	ldr	r3, [r0, #24]
 80065b6:	b90b      	cbnz	r3, 80065bc <_puts_r+0x10>
 80065b8:	f001 f8c0 	bl	800773c <__sinit>
 80065bc:	69ab      	ldr	r3, [r5, #24]
 80065be:	68ac      	ldr	r4, [r5, #8]
 80065c0:	b913      	cbnz	r3, 80065c8 <_puts_r+0x1c>
 80065c2:	4628      	mov	r0, r5
 80065c4:	f001 f8ba 	bl	800773c <__sinit>
 80065c8:	4b2c      	ldr	r3, [pc, #176]	; (800667c <_puts_r+0xd0>)
 80065ca:	429c      	cmp	r4, r3
 80065cc:	d120      	bne.n	8006610 <_puts_r+0x64>
 80065ce:	686c      	ldr	r4, [r5, #4]
 80065d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065d2:	07db      	lsls	r3, r3, #31
 80065d4:	d405      	bmi.n	80065e2 <_puts_r+0x36>
 80065d6:	89a3      	ldrh	r3, [r4, #12]
 80065d8:	0598      	lsls	r0, r3, #22
 80065da:	d402      	bmi.n	80065e2 <_puts_r+0x36>
 80065dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065de:	f001 f950 	bl	8007882 <__retarget_lock_acquire_recursive>
 80065e2:	89a3      	ldrh	r3, [r4, #12]
 80065e4:	0719      	lsls	r1, r3, #28
 80065e6:	d51d      	bpl.n	8006624 <_puts_r+0x78>
 80065e8:	6923      	ldr	r3, [r4, #16]
 80065ea:	b1db      	cbz	r3, 8006624 <_puts_r+0x78>
 80065ec:	3e01      	subs	r6, #1
 80065ee:	68a3      	ldr	r3, [r4, #8]
 80065f0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80065f4:	3b01      	subs	r3, #1
 80065f6:	60a3      	str	r3, [r4, #8]
 80065f8:	bb39      	cbnz	r1, 800664a <_puts_r+0x9e>
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	da38      	bge.n	8006670 <_puts_r+0xc4>
 80065fe:	4622      	mov	r2, r4
 8006600:	210a      	movs	r1, #10
 8006602:	4628      	mov	r0, r5
 8006604:	f000 f848 	bl	8006698 <__swbuf_r>
 8006608:	3001      	adds	r0, #1
 800660a:	d011      	beq.n	8006630 <_puts_r+0x84>
 800660c:	250a      	movs	r5, #10
 800660e:	e011      	b.n	8006634 <_puts_r+0x88>
 8006610:	4b1b      	ldr	r3, [pc, #108]	; (8006680 <_puts_r+0xd4>)
 8006612:	429c      	cmp	r4, r3
 8006614:	d101      	bne.n	800661a <_puts_r+0x6e>
 8006616:	68ac      	ldr	r4, [r5, #8]
 8006618:	e7da      	b.n	80065d0 <_puts_r+0x24>
 800661a:	4b1a      	ldr	r3, [pc, #104]	; (8006684 <_puts_r+0xd8>)
 800661c:	429c      	cmp	r4, r3
 800661e:	bf08      	it	eq
 8006620:	68ec      	ldreq	r4, [r5, #12]
 8006622:	e7d5      	b.n	80065d0 <_puts_r+0x24>
 8006624:	4621      	mov	r1, r4
 8006626:	4628      	mov	r0, r5
 8006628:	f000 f888 	bl	800673c <__swsetup_r>
 800662c:	2800      	cmp	r0, #0
 800662e:	d0dd      	beq.n	80065ec <_puts_r+0x40>
 8006630:	f04f 35ff 	mov.w	r5, #4294967295
 8006634:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006636:	07da      	lsls	r2, r3, #31
 8006638:	d405      	bmi.n	8006646 <_puts_r+0x9a>
 800663a:	89a3      	ldrh	r3, [r4, #12]
 800663c:	059b      	lsls	r3, r3, #22
 800663e:	d402      	bmi.n	8006646 <_puts_r+0x9a>
 8006640:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006642:	f001 f91f 	bl	8007884 <__retarget_lock_release_recursive>
 8006646:	4628      	mov	r0, r5
 8006648:	bd70      	pop	{r4, r5, r6, pc}
 800664a:	2b00      	cmp	r3, #0
 800664c:	da04      	bge.n	8006658 <_puts_r+0xac>
 800664e:	69a2      	ldr	r2, [r4, #24]
 8006650:	429a      	cmp	r2, r3
 8006652:	dc06      	bgt.n	8006662 <_puts_r+0xb6>
 8006654:	290a      	cmp	r1, #10
 8006656:	d004      	beq.n	8006662 <_puts_r+0xb6>
 8006658:	6823      	ldr	r3, [r4, #0]
 800665a:	1c5a      	adds	r2, r3, #1
 800665c:	6022      	str	r2, [r4, #0]
 800665e:	7019      	strb	r1, [r3, #0]
 8006660:	e7c5      	b.n	80065ee <_puts_r+0x42>
 8006662:	4622      	mov	r2, r4
 8006664:	4628      	mov	r0, r5
 8006666:	f000 f817 	bl	8006698 <__swbuf_r>
 800666a:	3001      	adds	r0, #1
 800666c:	d1bf      	bne.n	80065ee <_puts_r+0x42>
 800666e:	e7df      	b.n	8006630 <_puts_r+0x84>
 8006670:	6823      	ldr	r3, [r4, #0]
 8006672:	250a      	movs	r5, #10
 8006674:	1c5a      	adds	r2, r3, #1
 8006676:	6022      	str	r2, [r4, #0]
 8006678:	701d      	strb	r5, [r3, #0]
 800667a:	e7db      	b.n	8006634 <_puts_r+0x88>
 800667c:	080088d8 	.word	0x080088d8
 8006680:	080088f8 	.word	0x080088f8
 8006684:	080088b8 	.word	0x080088b8

08006688 <puts>:
 8006688:	4b02      	ldr	r3, [pc, #8]	; (8006694 <puts+0xc>)
 800668a:	4601      	mov	r1, r0
 800668c:	6818      	ldr	r0, [r3, #0]
 800668e:	f7ff bf8d 	b.w	80065ac <_puts_r>
 8006692:	bf00      	nop
 8006694:	20000018 	.word	0x20000018

08006698 <__swbuf_r>:
 8006698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800669a:	460e      	mov	r6, r1
 800669c:	4614      	mov	r4, r2
 800669e:	4605      	mov	r5, r0
 80066a0:	b118      	cbz	r0, 80066aa <__swbuf_r+0x12>
 80066a2:	6983      	ldr	r3, [r0, #24]
 80066a4:	b90b      	cbnz	r3, 80066aa <__swbuf_r+0x12>
 80066a6:	f001 f849 	bl	800773c <__sinit>
 80066aa:	4b21      	ldr	r3, [pc, #132]	; (8006730 <__swbuf_r+0x98>)
 80066ac:	429c      	cmp	r4, r3
 80066ae:	d12b      	bne.n	8006708 <__swbuf_r+0x70>
 80066b0:	686c      	ldr	r4, [r5, #4]
 80066b2:	69a3      	ldr	r3, [r4, #24]
 80066b4:	60a3      	str	r3, [r4, #8]
 80066b6:	89a3      	ldrh	r3, [r4, #12]
 80066b8:	071a      	lsls	r2, r3, #28
 80066ba:	d52f      	bpl.n	800671c <__swbuf_r+0x84>
 80066bc:	6923      	ldr	r3, [r4, #16]
 80066be:	b36b      	cbz	r3, 800671c <__swbuf_r+0x84>
 80066c0:	6923      	ldr	r3, [r4, #16]
 80066c2:	6820      	ldr	r0, [r4, #0]
 80066c4:	1ac0      	subs	r0, r0, r3
 80066c6:	6963      	ldr	r3, [r4, #20]
 80066c8:	b2f6      	uxtb	r6, r6
 80066ca:	4283      	cmp	r3, r0
 80066cc:	4637      	mov	r7, r6
 80066ce:	dc04      	bgt.n	80066da <__swbuf_r+0x42>
 80066d0:	4621      	mov	r1, r4
 80066d2:	4628      	mov	r0, r5
 80066d4:	f000 ff9e 	bl	8007614 <_fflush_r>
 80066d8:	bb30      	cbnz	r0, 8006728 <__swbuf_r+0x90>
 80066da:	68a3      	ldr	r3, [r4, #8]
 80066dc:	3b01      	subs	r3, #1
 80066de:	60a3      	str	r3, [r4, #8]
 80066e0:	6823      	ldr	r3, [r4, #0]
 80066e2:	1c5a      	adds	r2, r3, #1
 80066e4:	6022      	str	r2, [r4, #0]
 80066e6:	701e      	strb	r6, [r3, #0]
 80066e8:	6963      	ldr	r3, [r4, #20]
 80066ea:	3001      	adds	r0, #1
 80066ec:	4283      	cmp	r3, r0
 80066ee:	d004      	beq.n	80066fa <__swbuf_r+0x62>
 80066f0:	89a3      	ldrh	r3, [r4, #12]
 80066f2:	07db      	lsls	r3, r3, #31
 80066f4:	d506      	bpl.n	8006704 <__swbuf_r+0x6c>
 80066f6:	2e0a      	cmp	r6, #10
 80066f8:	d104      	bne.n	8006704 <__swbuf_r+0x6c>
 80066fa:	4621      	mov	r1, r4
 80066fc:	4628      	mov	r0, r5
 80066fe:	f000 ff89 	bl	8007614 <_fflush_r>
 8006702:	b988      	cbnz	r0, 8006728 <__swbuf_r+0x90>
 8006704:	4638      	mov	r0, r7
 8006706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006708:	4b0a      	ldr	r3, [pc, #40]	; (8006734 <__swbuf_r+0x9c>)
 800670a:	429c      	cmp	r4, r3
 800670c:	d101      	bne.n	8006712 <__swbuf_r+0x7a>
 800670e:	68ac      	ldr	r4, [r5, #8]
 8006710:	e7cf      	b.n	80066b2 <__swbuf_r+0x1a>
 8006712:	4b09      	ldr	r3, [pc, #36]	; (8006738 <__swbuf_r+0xa0>)
 8006714:	429c      	cmp	r4, r3
 8006716:	bf08      	it	eq
 8006718:	68ec      	ldreq	r4, [r5, #12]
 800671a:	e7ca      	b.n	80066b2 <__swbuf_r+0x1a>
 800671c:	4621      	mov	r1, r4
 800671e:	4628      	mov	r0, r5
 8006720:	f000 f80c 	bl	800673c <__swsetup_r>
 8006724:	2800      	cmp	r0, #0
 8006726:	d0cb      	beq.n	80066c0 <__swbuf_r+0x28>
 8006728:	f04f 37ff 	mov.w	r7, #4294967295
 800672c:	e7ea      	b.n	8006704 <__swbuf_r+0x6c>
 800672e:	bf00      	nop
 8006730:	080088d8 	.word	0x080088d8
 8006734:	080088f8 	.word	0x080088f8
 8006738:	080088b8 	.word	0x080088b8

0800673c <__swsetup_r>:
 800673c:	4b32      	ldr	r3, [pc, #200]	; (8006808 <__swsetup_r+0xcc>)
 800673e:	b570      	push	{r4, r5, r6, lr}
 8006740:	681d      	ldr	r5, [r3, #0]
 8006742:	4606      	mov	r6, r0
 8006744:	460c      	mov	r4, r1
 8006746:	b125      	cbz	r5, 8006752 <__swsetup_r+0x16>
 8006748:	69ab      	ldr	r3, [r5, #24]
 800674a:	b913      	cbnz	r3, 8006752 <__swsetup_r+0x16>
 800674c:	4628      	mov	r0, r5
 800674e:	f000 fff5 	bl	800773c <__sinit>
 8006752:	4b2e      	ldr	r3, [pc, #184]	; (800680c <__swsetup_r+0xd0>)
 8006754:	429c      	cmp	r4, r3
 8006756:	d10f      	bne.n	8006778 <__swsetup_r+0x3c>
 8006758:	686c      	ldr	r4, [r5, #4]
 800675a:	89a3      	ldrh	r3, [r4, #12]
 800675c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006760:	0719      	lsls	r1, r3, #28
 8006762:	d42c      	bmi.n	80067be <__swsetup_r+0x82>
 8006764:	06dd      	lsls	r5, r3, #27
 8006766:	d411      	bmi.n	800678c <__swsetup_r+0x50>
 8006768:	2309      	movs	r3, #9
 800676a:	6033      	str	r3, [r6, #0]
 800676c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006770:	81a3      	strh	r3, [r4, #12]
 8006772:	f04f 30ff 	mov.w	r0, #4294967295
 8006776:	e03e      	b.n	80067f6 <__swsetup_r+0xba>
 8006778:	4b25      	ldr	r3, [pc, #148]	; (8006810 <__swsetup_r+0xd4>)
 800677a:	429c      	cmp	r4, r3
 800677c:	d101      	bne.n	8006782 <__swsetup_r+0x46>
 800677e:	68ac      	ldr	r4, [r5, #8]
 8006780:	e7eb      	b.n	800675a <__swsetup_r+0x1e>
 8006782:	4b24      	ldr	r3, [pc, #144]	; (8006814 <__swsetup_r+0xd8>)
 8006784:	429c      	cmp	r4, r3
 8006786:	bf08      	it	eq
 8006788:	68ec      	ldreq	r4, [r5, #12]
 800678a:	e7e6      	b.n	800675a <__swsetup_r+0x1e>
 800678c:	0758      	lsls	r0, r3, #29
 800678e:	d512      	bpl.n	80067b6 <__swsetup_r+0x7a>
 8006790:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006792:	b141      	cbz	r1, 80067a6 <__swsetup_r+0x6a>
 8006794:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006798:	4299      	cmp	r1, r3
 800679a:	d002      	beq.n	80067a2 <__swsetup_r+0x66>
 800679c:	4630      	mov	r0, r6
 800679e:	f001 fc7b 	bl	8008098 <_free_r>
 80067a2:	2300      	movs	r3, #0
 80067a4:	6363      	str	r3, [r4, #52]	; 0x34
 80067a6:	89a3      	ldrh	r3, [r4, #12]
 80067a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80067ac:	81a3      	strh	r3, [r4, #12]
 80067ae:	2300      	movs	r3, #0
 80067b0:	6063      	str	r3, [r4, #4]
 80067b2:	6923      	ldr	r3, [r4, #16]
 80067b4:	6023      	str	r3, [r4, #0]
 80067b6:	89a3      	ldrh	r3, [r4, #12]
 80067b8:	f043 0308 	orr.w	r3, r3, #8
 80067bc:	81a3      	strh	r3, [r4, #12]
 80067be:	6923      	ldr	r3, [r4, #16]
 80067c0:	b94b      	cbnz	r3, 80067d6 <__swsetup_r+0x9a>
 80067c2:	89a3      	ldrh	r3, [r4, #12]
 80067c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80067c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067cc:	d003      	beq.n	80067d6 <__swsetup_r+0x9a>
 80067ce:	4621      	mov	r1, r4
 80067d0:	4630      	mov	r0, r6
 80067d2:	f001 f87d 	bl	80078d0 <__smakebuf_r>
 80067d6:	89a0      	ldrh	r0, [r4, #12]
 80067d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80067dc:	f010 0301 	ands.w	r3, r0, #1
 80067e0:	d00a      	beq.n	80067f8 <__swsetup_r+0xbc>
 80067e2:	2300      	movs	r3, #0
 80067e4:	60a3      	str	r3, [r4, #8]
 80067e6:	6963      	ldr	r3, [r4, #20]
 80067e8:	425b      	negs	r3, r3
 80067ea:	61a3      	str	r3, [r4, #24]
 80067ec:	6923      	ldr	r3, [r4, #16]
 80067ee:	b943      	cbnz	r3, 8006802 <__swsetup_r+0xc6>
 80067f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80067f4:	d1ba      	bne.n	800676c <__swsetup_r+0x30>
 80067f6:	bd70      	pop	{r4, r5, r6, pc}
 80067f8:	0781      	lsls	r1, r0, #30
 80067fa:	bf58      	it	pl
 80067fc:	6963      	ldrpl	r3, [r4, #20]
 80067fe:	60a3      	str	r3, [r4, #8]
 8006800:	e7f4      	b.n	80067ec <__swsetup_r+0xb0>
 8006802:	2000      	movs	r0, #0
 8006804:	e7f7      	b.n	80067f6 <__swsetup_r+0xba>
 8006806:	bf00      	nop
 8006808:	20000018 	.word	0x20000018
 800680c:	080088d8 	.word	0x080088d8
 8006810:	080088f8 	.word	0x080088f8
 8006814:	080088b8 	.word	0x080088b8

08006818 <quorem>:
 8006818:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800681c:	6903      	ldr	r3, [r0, #16]
 800681e:	690c      	ldr	r4, [r1, #16]
 8006820:	42a3      	cmp	r3, r4
 8006822:	4607      	mov	r7, r0
 8006824:	f2c0 8081 	blt.w	800692a <quorem+0x112>
 8006828:	3c01      	subs	r4, #1
 800682a:	f101 0814 	add.w	r8, r1, #20
 800682e:	f100 0514 	add.w	r5, r0, #20
 8006832:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006836:	9301      	str	r3, [sp, #4]
 8006838:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800683c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006840:	3301      	adds	r3, #1
 8006842:	429a      	cmp	r2, r3
 8006844:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006848:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800684c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006850:	d331      	bcc.n	80068b6 <quorem+0x9e>
 8006852:	f04f 0e00 	mov.w	lr, #0
 8006856:	4640      	mov	r0, r8
 8006858:	46ac      	mov	ip, r5
 800685a:	46f2      	mov	sl, lr
 800685c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006860:	b293      	uxth	r3, r2
 8006862:	fb06 e303 	mla	r3, r6, r3, lr
 8006866:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800686a:	b29b      	uxth	r3, r3
 800686c:	ebaa 0303 	sub.w	r3, sl, r3
 8006870:	0c12      	lsrs	r2, r2, #16
 8006872:	f8dc a000 	ldr.w	sl, [ip]
 8006876:	fb06 e202 	mla	r2, r6, r2, lr
 800687a:	fa13 f38a 	uxtah	r3, r3, sl
 800687e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006882:	fa1f fa82 	uxth.w	sl, r2
 8006886:	f8dc 2000 	ldr.w	r2, [ip]
 800688a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800688e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006892:	b29b      	uxth	r3, r3
 8006894:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006898:	4581      	cmp	r9, r0
 800689a:	f84c 3b04 	str.w	r3, [ip], #4
 800689e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80068a2:	d2db      	bcs.n	800685c <quorem+0x44>
 80068a4:	f855 300b 	ldr.w	r3, [r5, fp]
 80068a8:	b92b      	cbnz	r3, 80068b6 <quorem+0x9e>
 80068aa:	9b01      	ldr	r3, [sp, #4]
 80068ac:	3b04      	subs	r3, #4
 80068ae:	429d      	cmp	r5, r3
 80068b0:	461a      	mov	r2, r3
 80068b2:	d32e      	bcc.n	8006912 <quorem+0xfa>
 80068b4:	613c      	str	r4, [r7, #16]
 80068b6:	4638      	mov	r0, r7
 80068b8:	f001 fade 	bl	8007e78 <__mcmp>
 80068bc:	2800      	cmp	r0, #0
 80068be:	db24      	blt.n	800690a <quorem+0xf2>
 80068c0:	3601      	adds	r6, #1
 80068c2:	4628      	mov	r0, r5
 80068c4:	f04f 0c00 	mov.w	ip, #0
 80068c8:	f858 2b04 	ldr.w	r2, [r8], #4
 80068cc:	f8d0 e000 	ldr.w	lr, [r0]
 80068d0:	b293      	uxth	r3, r2
 80068d2:	ebac 0303 	sub.w	r3, ip, r3
 80068d6:	0c12      	lsrs	r2, r2, #16
 80068d8:	fa13 f38e 	uxtah	r3, r3, lr
 80068dc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80068e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80068ea:	45c1      	cmp	r9, r8
 80068ec:	f840 3b04 	str.w	r3, [r0], #4
 80068f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80068f4:	d2e8      	bcs.n	80068c8 <quorem+0xb0>
 80068f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80068fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80068fe:	b922      	cbnz	r2, 800690a <quorem+0xf2>
 8006900:	3b04      	subs	r3, #4
 8006902:	429d      	cmp	r5, r3
 8006904:	461a      	mov	r2, r3
 8006906:	d30a      	bcc.n	800691e <quorem+0x106>
 8006908:	613c      	str	r4, [r7, #16]
 800690a:	4630      	mov	r0, r6
 800690c:	b003      	add	sp, #12
 800690e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006912:	6812      	ldr	r2, [r2, #0]
 8006914:	3b04      	subs	r3, #4
 8006916:	2a00      	cmp	r2, #0
 8006918:	d1cc      	bne.n	80068b4 <quorem+0x9c>
 800691a:	3c01      	subs	r4, #1
 800691c:	e7c7      	b.n	80068ae <quorem+0x96>
 800691e:	6812      	ldr	r2, [r2, #0]
 8006920:	3b04      	subs	r3, #4
 8006922:	2a00      	cmp	r2, #0
 8006924:	d1f0      	bne.n	8006908 <quorem+0xf0>
 8006926:	3c01      	subs	r4, #1
 8006928:	e7eb      	b.n	8006902 <quorem+0xea>
 800692a:	2000      	movs	r0, #0
 800692c:	e7ee      	b.n	800690c <quorem+0xf4>
	...

08006930 <_dtoa_r>:
 8006930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006934:	ed2d 8b02 	vpush	{d8}
 8006938:	ec57 6b10 	vmov	r6, r7, d0
 800693c:	b095      	sub	sp, #84	; 0x54
 800693e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006940:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006944:	9105      	str	r1, [sp, #20]
 8006946:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800694a:	4604      	mov	r4, r0
 800694c:	9209      	str	r2, [sp, #36]	; 0x24
 800694e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006950:	b975      	cbnz	r5, 8006970 <_dtoa_r+0x40>
 8006952:	2010      	movs	r0, #16
 8006954:	f000 fffc 	bl	8007950 <malloc>
 8006958:	4602      	mov	r2, r0
 800695a:	6260      	str	r0, [r4, #36]	; 0x24
 800695c:	b920      	cbnz	r0, 8006968 <_dtoa_r+0x38>
 800695e:	4bb2      	ldr	r3, [pc, #712]	; (8006c28 <_dtoa_r+0x2f8>)
 8006960:	21ea      	movs	r1, #234	; 0xea
 8006962:	48b2      	ldr	r0, [pc, #712]	; (8006c2c <_dtoa_r+0x2fc>)
 8006964:	f001 fe02 	bl	800856c <__assert_func>
 8006968:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800696c:	6005      	str	r5, [r0, #0]
 800696e:	60c5      	str	r5, [r0, #12]
 8006970:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006972:	6819      	ldr	r1, [r3, #0]
 8006974:	b151      	cbz	r1, 800698c <_dtoa_r+0x5c>
 8006976:	685a      	ldr	r2, [r3, #4]
 8006978:	604a      	str	r2, [r1, #4]
 800697a:	2301      	movs	r3, #1
 800697c:	4093      	lsls	r3, r2
 800697e:	608b      	str	r3, [r1, #8]
 8006980:	4620      	mov	r0, r4
 8006982:	f001 f83b 	bl	80079fc <_Bfree>
 8006986:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006988:	2200      	movs	r2, #0
 800698a:	601a      	str	r2, [r3, #0]
 800698c:	1e3b      	subs	r3, r7, #0
 800698e:	bfb9      	ittee	lt
 8006990:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006994:	9303      	strlt	r3, [sp, #12]
 8006996:	2300      	movge	r3, #0
 8006998:	f8c8 3000 	strge.w	r3, [r8]
 800699c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80069a0:	4ba3      	ldr	r3, [pc, #652]	; (8006c30 <_dtoa_r+0x300>)
 80069a2:	bfbc      	itt	lt
 80069a4:	2201      	movlt	r2, #1
 80069a6:	f8c8 2000 	strlt.w	r2, [r8]
 80069aa:	ea33 0309 	bics.w	r3, r3, r9
 80069ae:	d11b      	bne.n	80069e8 <_dtoa_r+0xb8>
 80069b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80069b2:	f242 730f 	movw	r3, #9999	; 0x270f
 80069b6:	6013      	str	r3, [r2, #0]
 80069b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80069bc:	4333      	orrs	r3, r6
 80069be:	f000 857a 	beq.w	80074b6 <_dtoa_r+0xb86>
 80069c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80069c4:	b963      	cbnz	r3, 80069e0 <_dtoa_r+0xb0>
 80069c6:	4b9b      	ldr	r3, [pc, #620]	; (8006c34 <_dtoa_r+0x304>)
 80069c8:	e024      	b.n	8006a14 <_dtoa_r+0xe4>
 80069ca:	4b9b      	ldr	r3, [pc, #620]	; (8006c38 <_dtoa_r+0x308>)
 80069cc:	9300      	str	r3, [sp, #0]
 80069ce:	3308      	adds	r3, #8
 80069d0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80069d2:	6013      	str	r3, [r2, #0]
 80069d4:	9800      	ldr	r0, [sp, #0]
 80069d6:	b015      	add	sp, #84	; 0x54
 80069d8:	ecbd 8b02 	vpop	{d8}
 80069dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069e0:	4b94      	ldr	r3, [pc, #592]	; (8006c34 <_dtoa_r+0x304>)
 80069e2:	9300      	str	r3, [sp, #0]
 80069e4:	3303      	adds	r3, #3
 80069e6:	e7f3      	b.n	80069d0 <_dtoa_r+0xa0>
 80069e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80069ec:	2200      	movs	r2, #0
 80069ee:	ec51 0b17 	vmov	r0, r1, d7
 80069f2:	2300      	movs	r3, #0
 80069f4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80069f8:	f7fa f896 	bl	8000b28 <__aeabi_dcmpeq>
 80069fc:	4680      	mov	r8, r0
 80069fe:	b158      	cbz	r0, 8006a18 <_dtoa_r+0xe8>
 8006a00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006a02:	2301      	movs	r3, #1
 8006a04:	6013      	str	r3, [r2, #0]
 8006a06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	f000 8551 	beq.w	80074b0 <_dtoa_r+0xb80>
 8006a0e:	488b      	ldr	r0, [pc, #556]	; (8006c3c <_dtoa_r+0x30c>)
 8006a10:	6018      	str	r0, [r3, #0]
 8006a12:	1e43      	subs	r3, r0, #1
 8006a14:	9300      	str	r3, [sp, #0]
 8006a16:	e7dd      	b.n	80069d4 <_dtoa_r+0xa4>
 8006a18:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006a1c:	aa12      	add	r2, sp, #72	; 0x48
 8006a1e:	a913      	add	r1, sp, #76	; 0x4c
 8006a20:	4620      	mov	r0, r4
 8006a22:	f001 facd 	bl	8007fc0 <__d2b>
 8006a26:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006a2a:	4683      	mov	fp, r0
 8006a2c:	2d00      	cmp	r5, #0
 8006a2e:	d07c      	beq.n	8006b2a <_dtoa_r+0x1fa>
 8006a30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a32:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006a36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a3a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006a3e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006a42:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006a46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006a4a:	4b7d      	ldr	r3, [pc, #500]	; (8006c40 <_dtoa_r+0x310>)
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	4630      	mov	r0, r6
 8006a50:	4639      	mov	r1, r7
 8006a52:	f7f9 fc49 	bl	80002e8 <__aeabi_dsub>
 8006a56:	a36e      	add	r3, pc, #440	; (adr r3, 8006c10 <_dtoa_r+0x2e0>)
 8006a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a5c:	f7f9 fdfc 	bl	8000658 <__aeabi_dmul>
 8006a60:	a36d      	add	r3, pc, #436	; (adr r3, 8006c18 <_dtoa_r+0x2e8>)
 8006a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a66:	f7f9 fc41 	bl	80002ec <__adddf3>
 8006a6a:	4606      	mov	r6, r0
 8006a6c:	4628      	mov	r0, r5
 8006a6e:	460f      	mov	r7, r1
 8006a70:	f7f9 fd88 	bl	8000584 <__aeabi_i2d>
 8006a74:	a36a      	add	r3, pc, #424	; (adr r3, 8006c20 <_dtoa_r+0x2f0>)
 8006a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7a:	f7f9 fded 	bl	8000658 <__aeabi_dmul>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	460b      	mov	r3, r1
 8006a82:	4630      	mov	r0, r6
 8006a84:	4639      	mov	r1, r7
 8006a86:	f7f9 fc31 	bl	80002ec <__adddf3>
 8006a8a:	4606      	mov	r6, r0
 8006a8c:	460f      	mov	r7, r1
 8006a8e:	f7fa f893 	bl	8000bb8 <__aeabi_d2iz>
 8006a92:	2200      	movs	r2, #0
 8006a94:	4682      	mov	sl, r0
 8006a96:	2300      	movs	r3, #0
 8006a98:	4630      	mov	r0, r6
 8006a9a:	4639      	mov	r1, r7
 8006a9c:	f7fa f84e 	bl	8000b3c <__aeabi_dcmplt>
 8006aa0:	b148      	cbz	r0, 8006ab6 <_dtoa_r+0x186>
 8006aa2:	4650      	mov	r0, sl
 8006aa4:	f7f9 fd6e 	bl	8000584 <__aeabi_i2d>
 8006aa8:	4632      	mov	r2, r6
 8006aaa:	463b      	mov	r3, r7
 8006aac:	f7fa f83c 	bl	8000b28 <__aeabi_dcmpeq>
 8006ab0:	b908      	cbnz	r0, 8006ab6 <_dtoa_r+0x186>
 8006ab2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ab6:	f1ba 0f16 	cmp.w	sl, #22
 8006aba:	d854      	bhi.n	8006b66 <_dtoa_r+0x236>
 8006abc:	4b61      	ldr	r3, [pc, #388]	; (8006c44 <_dtoa_r+0x314>)
 8006abe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006aca:	f7fa f837 	bl	8000b3c <__aeabi_dcmplt>
 8006ace:	2800      	cmp	r0, #0
 8006ad0:	d04b      	beq.n	8006b6a <_dtoa_r+0x23a>
 8006ad2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	930e      	str	r3, [sp, #56]	; 0x38
 8006ada:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006adc:	1b5d      	subs	r5, r3, r5
 8006ade:	1e6b      	subs	r3, r5, #1
 8006ae0:	9304      	str	r3, [sp, #16]
 8006ae2:	bf43      	ittte	mi
 8006ae4:	2300      	movmi	r3, #0
 8006ae6:	f1c5 0801 	rsbmi	r8, r5, #1
 8006aea:	9304      	strmi	r3, [sp, #16]
 8006aec:	f04f 0800 	movpl.w	r8, #0
 8006af0:	f1ba 0f00 	cmp.w	sl, #0
 8006af4:	db3b      	blt.n	8006b6e <_dtoa_r+0x23e>
 8006af6:	9b04      	ldr	r3, [sp, #16]
 8006af8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8006afc:	4453      	add	r3, sl
 8006afe:	9304      	str	r3, [sp, #16]
 8006b00:	2300      	movs	r3, #0
 8006b02:	9306      	str	r3, [sp, #24]
 8006b04:	9b05      	ldr	r3, [sp, #20]
 8006b06:	2b09      	cmp	r3, #9
 8006b08:	d869      	bhi.n	8006bde <_dtoa_r+0x2ae>
 8006b0a:	2b05      	cmp	r3, #5
 8006b0c:	bfc4      	itt	gt
 8006b0e:	3b04      	subgt	r3, #4
 8006b10:	9305      	strgt	r3, [sp, #20]
 8006b12:	9b05      	ldr	r3, [sp, #20]
 8006b14:	f1a3 0302 	sub.w	r3, r3, #2
 8006b18:	bfcc      	ite	gt
 8006b1a:	2500      	movgt	r5, #0
 8006b1c:	2501      	movle	r5, #1
 8006b1e:	2b03      	cmp	r3, #3
 8006b20:	d869      	bhi.n	8006bf6 <_dtoa_r+0x2c6>
 8006b22:	e8df f003 	tbb	[pc, r3]
 8006b26:	4e2c      	.short	0x4e2c
 8006b28:	5a4c      	.short	0x5a4c
 8006b2a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006b2e:	441d      	add	r5, r3
 8006b30:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006b34:	2b20      	cmp	r3, #32
 8006b36:	bfc1      	itttt	gt
 8006b38:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006b3c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006b40:	fa09 f303 	lslgt.w	r3, r9, r3
 8006b44:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006b48:	bfda      	itte	le
 8006b4a:	f1c3 0320 	rsble	r3, r3, #32
 8006b4e:	fa06 f003 	lslle.w	r0, r6, r3
 8006b52:	4318      	orrgt	r0, r3
 8006b54:	f7f9 fd06 	bl	8000564 <__aeabi_ui2d>
 8006b58:	2301      	movs	r3, #1
 8006b5a:	4606      	mov	r6, r0
 8006b5c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006b60:	3d01      	subs	r5, #1
 8006b62:	9310      	str	r3, [sp, #64]	; 0x40
 8006b64:	e771      	b.n	8006a4a <_dtoa_r+0x11a>
 8006b66:	2301      	movs	r3, #1
 8006b68:	e7b6      	b.n	8006ad8 <_dtoa_r+0x1a8>
 8006b6a:	900e      	str	r0, [sp, #56]	; 0x38
 8006b6c:	e7b5      	b.n	8006ada <_dtoa_r+0x1aa>
 8006b6e:	f1ca 0300 	rsb	r3, sl, #0
 8006b72:	9306      	str	r3, [sp, #24]
 8006b74:	2300      	movs	r3, #0
 8006b76:	eba8 080a 	sub.w	r8, r8, sl
 8006b7a:	930d      	str	r3, [sp, #52]	; 0x34
 8006b7c:	e7c2      	b.n	8006b04 <_dtoa_r+0x1d4>
 8006b7e:	2300      	movs	r3, #0
 8006b80:	9308      	str	r3, [sp, #32]
 8006b82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	dc39      	bgt.n	8006bfc <_dtoa_r+0x2cc>
 8006b88:	f04f 0901 	mov.w	r9, #1
 8006b8c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006b90:	464b      	mov	r3, r9
 8006b92:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006b96:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006b98:	2200      	movs	r2, #0
 8006b9a:	6042      	str	r2, [r0, #4]
 8006b9c:	2204      	movs	r2, #4
 8006b9e:	f102 0614 	add.w	r6, r2, #20
 8006ba2:	429e      	cmp	r6, r3
 8006ba4:	6841      	ldr	r1, [r0, #4]
 8006ba6:	d92f      	bls.n	8006c08 <_dtoa_r+0x2d8>
 8006ba8:	4620      	mov	r0, r4
 8006baa:	f000 fee7 	bl	800797c <_Balloc>
 8006bae:	9000      	str	r0, [sp, #0]
 8006bb0:	2800      	cmp	r0, #0
 8006bb2:	d14b      	bne.n	8006c4c <_dtoa_r+0x31c>
 8006bb4:	4b24      	ldr	r3, [pc, #144]	; (8006c48 <_dtoa_r+0x318>)
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006bbc:	e6d1      	b.n	8006962 <_dtoa_r+0x32>
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e7de      	b.n	8006b80 <_dtoa_r+0x250>
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	9308      	str	r3, [sp, #32]
 8006bc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bc8:	eb0a 0903 	add.w	r9, sl, r3
 8006bcc:	f109 0301 	add.w	r3, r9, #1
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	9301      	str	r3, [sp, #4]
 8006bd4:	bfb8      	it	lt
 8006bd6:	2301      	movlt	r3, #1
 8006bd8:	e7dd      	b.n	8006b96 <_dtoa_r+0x266>
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e7f2      	b.n	8006bc4 <_dtoa_r+0x294>
 8006bde:	2501      	movs	r5, #1
 8006be0:	2300      	movs	r3, #0
 8006be2:	9305      	str	r3, [sp, #20]
 8006be4:	9508      	str	r5, [sp, #32]
 8006be6:	f04f 39ff 	mov.w	r9, #4294967295
 8006bea:	2200      	movs	r2, #0
 8006bec:	f8cd 9004 	str.w	r9, [sp, #4]
 8006bf0:	2312      	movs	r3, #18
 8006bf2:	9209      	str	r2, [sp, #36]	; 0x24
 8006bf4:	e7cf      	b.n	8006b96 <_dtoa_r+0x266>
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	9308      	str	r3, [sp, #32]
 8006bfa:	e7f4      	b.n	8006be6 <_dtoa_r+0x2b6>
 8006bfc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006c00:	f8cd 9004 	str.w	r9, [sp, #4]
 8006c04:	464b      	mov	r3, r9
 8006c06:	e7c6      	b.n	8006b96 <_dtoa_r+0x266>
 8006c08:	3101      	adds	r1, #1
 8006c0a:	6041      	str	r1, [r0, #4]
 8006c0c:	0052      	lsls	r2, r2, #1
 8006c0e:	e7c6      	b.n	8006b9e <_dtoa_r+0x26e>
 8006c10:	636f4361 	.word	0x636f4361
 8006c14:	3fd287a7 	.word	0x3fd287a7
 8006c18:	8b60c8b3 	.word	0x8b60c8b3
 8006c1c:	3fc68a28 	.word	0x3fc68a28
 8006c20:	509f79fb 	.word	0x509f79fb
 8006c24:	3fd34413 	.word	0x3fd34413
 8006c28:	08008831 	.word	0x08008831
 8006c2c:	08008848 	.word	0x08008848
 8006c30:	7ff00000 	.word	0x7ff00000
 8006c34:	0800882d 	.word	0x0800882d
 8006c38:	08008824 	.word	0x08008824
 8006c3c:	08008801 	.word	0x08008801
 8006c40:	3ff80000 	.word	0x3ff80000
 8006c44:	080089a0 	.word	0x080089a0
 8006c48:	080088a7 	.word	0x080088a7
 8006c4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c4e:	9a00      	ldr	r2, [sp, #0]
 8006c50:	601a      	str	r2, [r3, #0]
 8006c52:	9b01      	ldr	r3, [sp, #4]
 8006c54:	2b0e      	cmp	r3, #14
 8006c56:	f200 80ad 	bhi.w	8006db4 <_dtoa_r+0x484>
 8006c5a:	2d00      	cmp	r5, #0
 8006c5c:	f000 80aa 	beq.w	8006db4 <_dtoa_r+0x484>
 8006c60:	f1ba 0f00 	cmp.w	sl, #0
 8006c64:	dd36      	ble.n	8006cd4 <_dtoa_r+0x3a4>
 8006c66:	4ac3      	ldr	r2, [pc, #780]	; (8006f74 <_dtoa_r+0x644>)
 8006c68:	f00a 030f 	and.w	r3, sl, #15
 8006c6c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006c70:	ed93 7b00 	vldr	d7, [r3]
 8006c74:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006c78:	ea4f 172a 	mov.w	r7, sl, asr #4
 8006c7c:	eeb0 8a47 	vmov.f32	s16, s14
 8006c80:	eef0 8a67 	vmov.f32	s17, s15
 8006c84:	d016      	beq.n	8006cb4 <_dtoa_r+0x384>
 8006c86:	4bbc      	ldr	r3, [pc, #752]	; (8006f78 <_dtoa_r+0x648>)
 8006c88:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006c8c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006c90:	f7f9 fe0c 	bl	80008ac <__aeabi_ddiv>
 8006c94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c98:	f007 070f 	and.w	r7, r7, #15
 8006c9c:	2503      	movs	r5, #3
 8006c9e:	4eb6      	ldr	r6, [pc, #728]	; (8006f78 <_dtoa_r+0x648>)
 8006ca0:	b957      	cbnz	r7, 8006cb8 <_dtoa_r+0x388>
 8006ca2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ca6:	ec53 2b18 	vmov	r2, r3, d8
 8006caa:	f7f9 fdff 	bl	80008ac <__aeabi_ddiv>
 8006cae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cb2:	e029      	b.n	8006d08 <_dtoa_r+0x3d8>
 8006cb4:	2502      	movs	r5, #2
 8006cb6:	e7f2      	b.n	8006c9e <_dtoa_r+0x36e>
 8006cb8:	07f9      	lsls	r1, r7, #31
 8006cba:	d508      	bpl.n	8006cce <_dtoa_r+0x39e>
 8006cbc:	ec51 0b18 	vmov	r0, r1, d8
 8006cc0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006cc4:	f7f9 fcc8 	bl	8000658 <__aeabi_dmul>
 8006cc8:	ec41 0b18 	vmov	d8, r0, r1
 8006ccc:	3501      	adds	r5, #1
 8006cce:	107f      	asrs	r7, r7, #1
 8006cd0:	3608      	adds	r6, #8
 8006cd2:	e7e5      	b.n	8006ca0 <_dtoa_r+0x370>
 8006cd4:	f000 80a6 	beq.w	8006e24 <_dtoa_r+0x4f4>
 8006cd8:	f1ca 0600 	rsb	r6, sl, #0
 8006cdc:	4ba5      	ldr	r3, [pc, #660]	; (8006f74 <_dtoa_r+0x644>)
 8006cde:	4fa6      	ldr	r7, [pc, #664]	; (8006f78 <_dtoa_r+0x648>)
 8006ce0:	f006 020f 	and.w	r2, r6, #15
 8006ce4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006cf0:	f7f9 fcb2 	bl	8000658 <__aeabi_dmul>
 8006cf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cf8:	1136      	asrs	r6, r6, #4
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	2502      	movs	r5, #2
 8006cfe:	2e00      	cmp	r6, #0
 8006d00:	f040 8085 	bne.w	8006e0e <_dtoa_r+0x4de>
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d1d2      	bne.n	8006cae <_dtoa_r+0x37e>
 8006d08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	f000 808c 	beq.w	8006e28 <_dtoa_r+0x4f8>
 8006d10:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006d14:	4b99      	ldr	r3, [pc, #612]	; (8006f7c <_dtoa_r+0x64c>)
 8006d16:	2200      	movs	r2, #0
 8006d18:	4630      	mov	r0, r6
 8006d1a:	4639      	mov	r1, r7
 8006d1c:	f7f9 ff0e 	bl	8000b3c <__aeabi_dcmplt>
 8006d20:	2800      	cmp	r0, #0
 8006d22:	f000 8081 	beq.w	8006e28 <_dtoa_r+0x4f8>
 8006d26:	9b01      	ldr	r3, [sp, #4]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d07d      	beq.n	8006e28 <_dtoa_r+0x4f8>
 8006d2c:	f1b9 0f00 	cmp.w	r9, #0
 8006d30:	dd3c      	ble.n	8006dac <_dtoa_r+0x47c>
 8006d32:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006d36:	9307      	str	r3, [sp, #28]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	4b91      	ldr	r3, [pc, #580]	; (8006f80 <_dtoa_r+0x650>)
 8006d3c:	4630      	mov	r0, r6
 8006d3e:	4639      	mov	r1, r7
 8006d40:	f7f9 fc8a 	bl	8000658 <__aeabi_dmul>
 8006d44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d48:	3501      	adds	r5, #1
 8006d4a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8006d4e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006d52:	4628      	mov	r0, r5
 8006d54:	f7f9 fc16 	bl	8000584 <__aeabi_i2d>
 8006d58:	4632      	mov	r2, r6
 8006d5a:	463b      	mov	r3, r7
 8006d5c:	f7f9 fc7c 	bl	8000658 <__aeabi_dmul>
 8006d60:	4b88      	ldr	r3, [pc, #544]	; (8006f84 <_dtoa_r+0x654>)
 8006d62:	2200      	movs	r2, #0
 8006d64:	f7f9 fac2 	bl	80002ec <__adddf3>
 8006d68:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006d6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d70:	9303      	str	r3, [sp, #12]
 8006d72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d15c      	bne.n	8006e32 <_dtoa_r+0x502>
 8006d78:	4b83      	ldr	r3, [pc, #524]	; (8006f88 <_dtoa_r+0x658>)
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	4630      	mov	r0, r6
 8006d7e:	4639      	mov	r1, r7
 8006d80:	f7f9 fab2 	bl	80002e8 <__aeabi_dsub>
 8006d84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d88:	4606      	mov	r6, r0
 8006d8a:	460f      	mov	r7, r1
 8006d8c:	f7f9 fef4 	bl	8000b78 <__aeabi_dcmpgt>
 8006d90:	2800      	cmp	r0, #0
 8006d92:	f040 8296 	bne.w	80072c2 <_dtoa_r+0x992>
 8006d96:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006d9a:	4630      	mov	r0, r6
 8006d9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006da0:	4639      	mov	r1, r7
 8006da2:	f7f9 fecb 	bl	8000b3c <__aeabi_dcmplt>
 8006da6:	2800      	cmp	r0, #0
 8006da8:	f040 8288 	bne.w	80072bc <_dtoa_r+0x98c>
 8006dac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006db0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006db4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	f2c0 8158 	blt.w	800706c <_dtoa_r+0x73c>
 8006dbc:	f1ba 0f0e 	cmp.w	sl, #14
 8006dc0:	f300 8154 	bgt.w	800706c <_dtoa_r+0x73c>
 8006dc4:	4b6b      	ldr	r3, [pc, #428]	; (8006f74 <_dtoa_r+0x644>)
 8006dc6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006dca:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	f280 80e3 	bge.w	8006f9c <_dtoa_r+0x66c>
 8006dd6:	9b01      	ldr	r3, [sp, #4]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	f300 80df 	bgt.w	8006f9c <_dtoa_r+0x66c>
 8006dde:	f040 826d 	bne.w	80072bc <_dtoa_r+0x98c>
 8006de2:	4b69      	ldr	r3, [pc, #420]	; (8006f88 <_dtoa_r+0x658>)
 8006de4:	2200      	movs	r2, #0
 8006de6:	4640      	mov	r0, r8
 8006de8:	4649      	mov	r1, r9
 8006dea:	f7f9 fc35 	bl	8000658 <__aeabi_dmul>
 8006dee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006df2:	f7f9 feb7 	bl	8000b64 <__aeabi_dcmpge>
 8006df6:	9e01      	ldr	r6, [sp, #4]
 8006df8:	4637      	mov	r7, r6
 8006dfa:	2800      	cmp	r0, #0
 8006dfc:	f040 8243 	bne.w	8007286 <_dtoa_r+0x956>
 8006e00:	9d00      	ldr	r5, [sp, #0]
 8006e02:	2331      	movs	r3, #49	; 0x31
 8006e04:	f805 3b01 	strb.w	r3, [r5], #1
 8006e08:	f10a 0a01 	add.w	sl, sl, #1
 8006e0c:	e23f      	b.n	800728e <_dtoa_r+0x95e>
 8006e0e:	07f2      	lsls	r2, r6, #31
 8006e10:	d505      	bpl.n	8006e1e <_dtoa_r+0x4ee>
 8006e12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e16:	f7f9 fc1f 	bl	8000658 <__aeabi_dmul>
 8006e1a:	3501      	adds	r5, #1
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	1076      	asrs	r6, r6, #1
 8006e20:	3708      	adds	r7, #8
 8006e22:	e76c      	b.n	8006cfe <_dtoa_r+0x3ce>
 8006e24:	2502      	movs	r5, #2
 8006e26:	e76f      	b.n	8006d08 <_dtoa_r+0x3d8>
 8006e28:	9b01      	ldr	r3, [sp, #4]
 8006e2a:	f8cd a01c 	str.w	sl, [sp, #28]
 8006e2e:	930c      	str	r3, [sp, #48]	; 0x30
 8006e30:	e78d      	b.n	8006d4e <_dtoa_r+0x41e>
 8006e32:	9900      	ldr	r1, [sp, #0]
 8006e34:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006e36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e38:	4b4e      	ldr	r3, [pc, #312]	; (8006f74 <_dtoa_r+0x644>)
 8006e3a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006e3e:	4401      	add	r1, r0
 8006e40:	9102      	str	r1, [sp, #8]
 8006e42:	9908      	ldr	r1, [sp, #32]
 8006e44:	eeb0 8a47 	vmov.f32	s16, s14
 8006e48:	eef0 8a67 	vmov.f32	s17, s15
 8006e4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e50:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006e54:	2900      	cmp	r1, #0
 8006e56:	d045      	beq.n	8006ee4 <_dtoa_r+0x5b4>
 8006e58:	494c      	ldr	r1, [pc, #304]	; (8006f8c <_dtoa_r+0x65c>)
 8006e5a:	2000      	movs	r0, #0
 8006e5c:	f7f9 fd26 	bl	80008ac <__aeabi_ddiv>
 8006e60:	ec53 2b18 	vmov	r2, r3, d8
 8006e64:	f7f9 fa40 	bl	80002e8 <__aeabi_dsub>
 8006e68:	9d00      	ldr	r5, [sp, #0]
 8006e6a:	ec41 0b18 	vmov	d8, r0, r1
 8006e6e:	4639      	mov	r1, r7
 8006e70:	4630      	mov	r0, r6
 8006e72:	f7f9 fea1 	bl	8000bb8 <__aeabi_d2iz>
 8006e76:	900c      	str	r0, [sp, #48]	; 0x30
 8006e78:	f7f9 fb84 	bl	8000584 <__aeabi_i2d>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	460b      	mov	r3, r1
 8006e80:	4630      	mov	r0, r6
 8006e82:	4639      	mov	r1, r7
 8006e84:	f7f9 fa30 	bl	80002e8 <__aeabi_dsub>
 8006e88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e8a:	3330      	adds	r3, #48	; 0x30
 8006e8c:	f805 3b01 	strb.w	r3, [r5], #1
 8006e90:	ec53 2b18 	vmov	r2, r3, d8
 8006e94:	4606      	mov	r6, r0
 8006e96:	460f      	mov	r7, r1
 8006e98:	f7f9 fe50 	bl	8000b3c <__aeabi_dcmplt>
 8006e9c:	2800      	cmp	r0, #0
 8006e9e:	d165      	bne.n	8006f6c <_dtoa_r+0x63c>
 8006ea0:	4632      	mov	r2, r6
 8006ea2:	463b      	mov	r3, r7
 8006ea4:	4935      	ldr	r1, [pc, #212]	; (8006f7c <_dtoa_r+0x64c>)
 8006ea6:	2000      	movs	r0, #0
 8006ea8:	f7f9 fa1e 	bl	80002e8 <__aeabi_dsub>
 8006eac:	ec53 2b18 	vmov	r2, r3, d8
 8006eb0:	f7f9 fe44 	bl	8000b3c <__aeabi_dcmplt>
 8006eb4:	2800      	cmp	r0, #0
 8006eb6:	f040 80b9 	bne.w	800702c <_dtoa_r+0x6fc>
 8006eba:	9b02      	ldr	r3, [sp, #8]
 8006ebc:	429d      	cmp	r5, r3
 8006ebe:	f43f af75 	beq.w	8006dac <_dtoa_r+0x47c>
 8006ec2:	4b2f      	ldr	r3, [pc, #188]	; (8006f80 <_dtoa_r+0x650>)
 8006ec4:	ec51 0b18 	vmov	r0, r1, d8
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f7f9 fbc5 	bl	8000658 <__aeabi_dmul>
 8006ece:	4b2c      	ldr	r3, [pc, #176]	; (8006f80 <_dtoa_r+0x650>)
 8006ed0:	ec41 0b18 	vmov	d8, r0, r1
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	4630      	mov	r0, r6
 8006ed8:	4639      	mov	r1, r7
 8006eda:	f7f9 fbbd 	bl	8000658 <__aeabi_dmul>
 8006ede:	4606      	mov	r6, r0
 8006ee0:	460f      	mov	r7, r1
 8006ee2:	e7c4      	b.n	8006e6e <_dtoa_r+0x53e>
 8006ee4:	ec51 0b17 	vmov	r0, r1, d7
 8006ee8:	f7f9 fbb6 	bl	8000658 <__aeabi_dmul>
 8006eec:	9b02      	ldr	r3, [sp, #8]
 8006eee:	9d00      	ldr	r5, [sp, #0]
 8006ef0:	930c      	str	r3, [sp, #48]	; 0x30
 8006ef2:	ec41 0b18 	vmov	d8, r0, r1
 8006ef6:	4639      	mov	r1, r7
 8006ef8:	4630      	mov	r0, r6
 8006efa:	f7f9 fe5d 	bl	8000bb8 <__aeabi_d2iz>
 8006efe:	9011      	str	r0, [sp, #68]	; 0x44
 8006f00:	f7f9 fb40 	bl	8000584 <__aeabi_i2d>
 8006f04:	4602      	mov	r2, r0
 8006f06:	460b      	mov	r3, r1
 8006f08:	4630      	mov	r0, r6
 8006f0a:	4639      	mov	r1, r7
 8006f0c:	f7f9 f9ec 	bl	80002e8 <__aeabi_dsub>
 8006f10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006f12:	3330      	adds	r3, #48	; 0x30
 8006f14:	f805 3b01 	strb.w	r3, [r5], #1
 8006f18:	9b02      	ldr	r3, [sp, #8]
 8006f1a:	429d      	cmp	r5, r3
 8006f1c:	4606      	mov	r6, r0
 8006f1e:	460f      	mov	r7, r1
 8006f20:	f04f 0200 	mov.w	r2, #0
 8006f24:	d134      	bne.n	8006f90 <_dtoa_r+0x660>
 8006f26:	4b19      	ldr	r3, [pc, #100]	; (8006f8c <_dtoa_r+0x65c>)
 8006f28:	ec51 0b18 	vmov	r0, r1, d8
 8006f2c:	f7f9 f9de 	bl	80002ec <__adddf3>
 8006f30:	4602      	mov	r2, r0
 8006f32:	460b      	mov	r3, r1
 8006f34:	4630      	mov	r0, r6
 8006f36:	4639      	mov	r1, r7
 8006f38:	f7f9 fe1e 	bl	8000b78 <__aeabi_dcmpgt>
 8006f3c:	2800      	cmp	r0, #0
 8006f3e:	d175      	bne.n	800702c <_dtoa_r+0x6fc>
 8006f40:	ec53 2b18 	vmov	r2, r3, d8
 8006f44:	4911      	ldr	r1, [pc, #68]	; (8006f8c <_dtoa_r+0x65c>)
 8006f46:	2000      	movs	r0, #0
 8006f48:	f7f9 f9ce 	bl	80002e8 <__aeabi_dsub>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	460b      	mov	r3, r1
 8006f50:	4630      	mov	r0, r6
 8006f52:	4639      	mov	r1, r7
 8006f54:	f7f9 fdf2 	bl	8000b3c <__aeabi_dcmplt>
 8006f58:	2800      	cmp	r0, #0
 8006f5a:	f43f af27 	beq.w	8006dac <_dtoa_r+0x47c>
 8006f5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006f60:	1e6b      	subs	r3, r5, #1
 8006f62:	930c      	str	r3, [sp, #48]	; 0x30
 8006f64:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006f68:	2b30      	cmp	r3, #48	; 0x30
 8006f6a:	d0f8      	beq.n	8006f5e <_dtoa_r+0x62e>
 8006f6c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006f70:	e04a      	b.n	8007008 <_dtoa_r+0x6d8>
 8006f72:	bf00      	nop
 8006f74:	080089a0 	.word	0x080089a0
 8006f78:	08008978 	.word	0x08008978
 8006f7c:	3ff00000 	.word	0x3ff00000
 8006f80:	40240000 	.word	0x40240000
 8006f84:	401c0000 	.word	0x401c0000
 8006f88:	40140000 	.word	0x40140000
 8006f8c:	3fe00000 	.word	0x3fe00000
 8006f90:	4baf      	ldr	r3, [pc, #700]	; (8007250 <_dtoa_r+0x920>)
 8006f92:	f7f9 fb61 	bl	8000658 <__aeabi_dmul>
 8006f96:	4606      	mov	r6, r0
 8006f98:	460f      	mov	r7, r1
 8006f9a:	e7ac      	b.n	8006ef6 <_dtoa_r+0x5c6>
 8006f9c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006fa0:	9d00      	ldr	r5, [sp, #0]
 8006fa2:	4642      	mov	r2, r8
 8006fa4:	464b      	mov	r3, r9
 8006fa6:	4630      	mov	r0, r6
 8006fa8:	4639      	mov	r1, r7
 8006faa:	f7f9 fc7f 	bl	80008ac <__aeabi_ddiv>
 8006fae:	f7f9 fe03 	bl	8000bb8 <__aeabi_d2iz>
 8006fb2:	9002      	str	r0, [sp, #8]
 8006fb4:	f7f9 fae6 	bl	8000584 <__aeabi_i2d>
 8006fb8:	4642      	mov	r2, r8
 8006fba:	464b      	mov	r3, r9
 8006fbc:	f7f9 fb4c 	bl	8000658 <__aeabi_dmul>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	460b      	mov	r3, r1
 8006fc4:	4630      	mov	r0, r6
 8006fc6:	4639      	mov	r1, r7
 8006fc8:	f7f9 f98e 	bl	80002e8 <__aeabi_dsub>
 8006fcc:	9e02      	ldr	r6, [sp, #8]
 8006fce:	9f01      	ldr	r7, [sp, #4]
 8006fd0:	3630      	adds	r6, #48	; 0x30
 8006fd2:	f805 6b01 	strb.w	r6, [r5], #1
 8006fd6:	9e00      	ldr	r6, [sp, #0]
 8006fd8:	1bae      	subs	r6, r5, r6
 8006fda:	42b7      	cmp	r7, r6
 8006fdc:	4602      	mov	r2, r0
 8006fde:	460b      	mov	r3, r1
 8006fe0:	d137      	bne.n	8007052 <_dtoa_r+0x722>
 8006fe2:	f7f9 f983 	bl	80002ec <__adddf3>
 8006fe6:	4642      	mov	r2, r8
 8006fe8:	464b      	mov	r3, r9
 8006fea:	4606      	mov	r6, r0
 8006fec:	460f      	mov	r7, r1
 8006fee:	f7f9 fdc3 	bl	8000b78 <__aeabi_dcmpgt>
 8006ff2:	b9c8      	cbnz	r0, 8007028 <_dtoa_r+0x6f8>
 8006ff4:	4642      	mov	r2, r8
 8006ff6:	464b      	mov	r3, r9
 8006ff8:	4630      	mov	r0, r6
 8006ffa:	4639      	mov	r1, r7
 8006ffc:	f7f9 fd94 	bl	8000b28 <__aeabi_dcmpeq>
 8007000:	b110      	cbz	r0, 8007008 <_dtoa_r+0x6d8>
 8007002:	9b02      	ldr	r3, [sp, #8]
 8007004:	07d9      	lsls	r1, r3, #31
 8007006:	d40f      	bmi.n	8007028 <_dtoa_r+0x6f8>
 8007008:	4620      	mov	r0, r4
 800700a:	4659      	mov	r1, fp
 800700c:	f000 fcf6 	bl	80079fc <_Bfree>
 8007010:	2300      	movs	r3, #0
 8007012:	702b      	strb	r3, [r5, #0]
 8007014:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007016:	f10a 0001 	add.w	r0, sl, #1
 800701a:	6018      	str	r0, [r3, #0]
 800701c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800701e:	2b00      	cmp	r3, #0
 8007020:	f43f acd8 	beq.w	80069d4 <_dtoa_r+0xa4>
 8007024:	601d      	str	r5, [r3, #0]
 8007026:	e4d5      	b.n	80069d4 <_dtoa_r+0xa4>
 8007028:	f8cd a01c 	str.w	sl, [sp, #28]
 800702c:	462b      	mov	r3, r5
 800702e:	461d      	mov	r5, r3
 8007030:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007034:	2a39      	cmp	r2, #57	; 0x39
 8007036:	d108      	bne.n	800704a <_dtoa_r+0x71a>
 8007038:	9a00      	ldr	r2, [sp, #0]
 800703a:	429a      	cmp	r2, r3
 800703c:	d1f7      	bne.n	800702e <_dtoa_r+0x6fe>
 800703e:	9a07      	ldr	r2, [sp, #28]
 8007040:	9900      	ldr	r1, [sp, #0]
 8007042:	3201      	adds	r2, #1
 8007044:	9207      	str	r2, [sp, #28]
 8007046:	2230      	movs	r2, #48	; 0x30
 8007048:	700a      	strb	r2, [r1, #0]
 800704a:	781a      	ldrb	r2, [r3, #0]
 800704c:	3201      	adds	r2, #1
 800704e:	701a      	strb	r2, [r3, #0]
 8007050:	e78c      	b.n	8006f6c <_dtoa_r+0x63c>
 8007052:	4b7f      	ldr	r3, [pc, #508]	; (8007250 <_dtoa_r+0x920>)
 8007054:	2200      	movs	r2, #0
 8007056:	f7f9 faff 	bl	8000658 <__aeabi_dmul>
 800705a:	2200      	movs	r2, #0
 800705c:	2300      	movs	r3, #0
 800705e:	4606      	mov	r6, r0
 8007060:	460f      	mov	r7, r1
 8007062:	f7f9 fd61 	bl	8000b28 <__aeabi_dcmpeq>
 8007066:	2800      	cmp	r0, #0
 8007068:	d09b      	beq.n	8006fa2 <_dtoa_r+0x672>
 800706a:	e7cd      	b.n	8007008 <_dtoa_r+0x6d8>
 800706c:	9a08      	ldr	r2, [sp, #32]
 800706e:	2a00      	cmp	r2, #0
 8007070:	f000 80c4 	beq.w	80071fc <_dtoa_r+0x8cc>
 8007074:	9a05      	ldr	r2, [sp, #20]
 8007076:	2a01      	cmp	r2, #1
 8007078:	f300 80a8 	bgt.w	80071cc <_dtoa_r+0x89c>
 800707c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800707e:	2a00      	cmp	r2, #0
 8007080:	f000 80a0 	beq.w	80071c4 <_dtoa_r+0x894>
 8007084:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007088:	9e06      	ldr	r6, [sp, #24]
 800708a:	4645      	mov	r5, r8
 800708c:	9a04      	ldr	r2, [sp, #16]
 800708e:	2101      	movs	r1, #1
 8007090:	441a      	add	r2, r3
 8007092:	4620      	mov	r0, r4
 8007094:	4498      	add	r8, r3
 8007096:	9204      	str	r2, [sp, #16]
 8007098:	f000 fd6c 	bl	8007b74 <__i2b>
 800709c:	4607      	mov	r7, r0
 800709e:	2d00      	cmp	r5, #0
 80070a0:	dd0b      	ble.n	80070ba <_dtoa_r+0x78a>
 80070a2:	9b04      	ldr	r3, [sp, #16]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	dd08      	ble.n	80070ba <_dtoa_r+0x78a>
 80070a8:	42ab      	cmp	r3, r5
 80070aa:	9a04      	ldr	r2, [sp, #16]
 80070ac:	bfa8      	it	ge
 80070ae:	462b      	movge	r3, r5
 80070b0:	eba8 0803 	sub.w	r8, r8, r3
 80070b4:	1aed      	subs	r5, r5, r3
 80070b6:	1ad3      	subs	r3, r2, r3
 80070b8:	9304      	str	r3, [sp, #16]
 80070ba:	9b06      	ldr	r3, [sp, #24]
 80070bc:	b1fb      	cbz	r3, 80070fe <_dtoa_r+0x7ce>
 80070be:	9b08      	ldr	r3, [sp, #32]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	f000 809f 	beq.w	8007204 <_dtoa_r+0x8d4>
 80070c6:	2e00      	cmp	r6, #0
 80070c8:	dd11      	ble.n	80070ee <_dtoa_r+0x7be>
 80070ca:	4639      	mov	r1, r7
 80070cc:	4632      	mov	r2, r6
 80070ce:	4620      	mov	r0, r4
 80070d0:	f000 fe0c 	bl	8007cec <__pow5mult>
 80070d4:	465a      	mov	r2, fp
 80070d6:	4601      	mov	r1, r0
 80070d8:	4607      	mov	r7, r0
 80070da:	4620      	mov	r0, r4
 80070dc:	f000 fd60 	bl	8007ba0 <__multiply>
 80070e0:	4659      	mov	r1, fp
 80070e2:	9007      	str	r0, [sp, #28]
 80070e4:	4620      	mov	r0, r4
 80070e6:	f000 fc89 	bl	80079fc <_Bfree>
 80070ea:	9b07      	ldr	r3, [sp, #28]
 80070ec:	469b      	mov	fp, r3
 80070ee:	9b06      	ldr	r3, [sp, #24]
 80070f0:	1b9a      	subs	r2, r3, r6
 80070f2:	d004      	beq.n	80070fe <_dtoa_r+0x7ce>
 80070f4:	4659      	mov	r1, fp
 80070f6:	4620      	mov	r0, r4
 80070f8:	f000 fdf8 	bl	8007cec <__pow5mult>
 80070fc:	4683      	mov	fp, r0
 80070fe:	2101      	movs	r1, #1
 8007100:	4620      	mov	r0, r4
 8007102:	f000 fd37 	bl	8007b74 <__i2b>
 8007106:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007108:	2b00      	cmp	r3, #0
 800710a:	4606      	mov	r6, r0
 800710c:	dd7c      	ble.n	8007208 <_dtoa_r+0x8d8>
 800710e:	461a      	mov	r2, r3
 8007110:	4601      	mov	r1, r0
 8007112:	4620      	mov	r0, r4
 8007114:	f000 fdea 	bl	8007cec <__pow5mult>
 8007118:	9b05      	ldr	r3, [sp, #20]
 800711a:	2b01      	cmp	r3, #1
 800711c:	4606      	mov	r6, r0
 800711e:	dd76      	ble.n	800720e <_dtoa_r+0x8de>
 8007120:	2300      	movs	r3, #0
 8007122:	9306      	str	r3, [sp, #24]
 8007124:	6933      	ldr	r3, [r6, #16]
 8007126:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800712a:	6918      	ldr	r0, [r3, #16]
 800712c:	f000 fcd2 	bl	8007ad4 <__hi0bits>
 8007130:	f1c0 0020 	rsb	r0, r0, #32
 8007134:	9b04      	ldr	r3, [sp, #16]
 8007136:	4418      	add	r0, r3
 8007138:	f010 001f 	ands.w	r0, r0, #31
 800713c:	f000 8086 	beq.w	800724c <_dtoa_r+0x91c>
 8007140:	f1c0 0320 	rsb	r3, r0, #32
 8007144:	2b04      	cmp	r3, #4
 8007146:	dd7f      	ble.n	8007248 <_dtoa_r+0x918>
 8007148:	f1c0 001c 	rsb	r0, r0, #28
 800714c:	9b04      	ldr	r3, [sp, #16]
 800714e:	4403      	add	r3, r0
 8007150:	4480      	add	r8, r0
 8007152:	4405      	add	r5, r0
 8007154:	9304      	str	r3, [sp, #16]
 8007156:	f1b8 0f00 	cmp.w	r8, #0
 800715a:	dd05      	ble.n	8007168 <_dtoa_r+0x838>
 800715c:	4659      	mov	r1, fp
 800715e:	4642      	mov	r2, r8
 8007160:	4620      	mov	r0, r4
 8007162:	f000 fe1d 	bl	8007da0 <__lshift>
 8007166:	4683      	mov	fp, r0
 8007168:	9b04      	ldr	r3, [sp, #16]
 800716a:	2b00      	cmp	r3, #0
 800716c:	dd05      	ble.n	800717a <_dtoa_r+0x84a>
 800716e:	4631      	mov	r1, r6
 8007170:	461a      	mov	r2, r3
 8007172:	4620      	mov	r0, r4
 8007174:	f000 fe14 	bl	8007da0 <__lshift>
 8007178:	4606      	mov	r6, r0
 800717a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800717c:	2b00      	cmp	r3, #0
 800717e:	d069      	beq.n	8007254 <_dtoa_r+0x924>
 8007180:	4631      	mov	r1, r6
 8007182:	4658      	mov	r0, fp
 8007184:	f000 fe78 	bl	8007e78 <__mcmp>
 8007188:	2800      	cmp	r0, #0
 800718a:	da63      	bge.n	8007254 <_dtoa_r+0x924>
 800718c:	2300      	movs	r3, #0
 800718e:	4659      	mov	r1, fp
 8007190:	220a      	movs	r2, #10
 8007192:	4620      	mov	r0, r4
 8007194:	f000 fc54 	bl	8007a40 <__multadd>
 8007198:	9b08      	ldr	r3, [sp, #32]
 800719a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800719e:	4683      	mov	fp, r0
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	f000 818f 	beq.w	80074c4 <_dtoa_r+0xb94>
 80071a6:	4639      	mov	r1, r7
 80071a8:	2300      	movs	r3, #0
 80071aa:	220a      	movs	r2, #10
 80071ac:	4620      	mov	r0, r4
 80071ae:	f000 fc47 	bl	8007a40 <__multadd>
 80071b2:	f1b9 0f00 	cmp.w	r9, #0
 80071b6:	4607      	mov	r7, r0
 80071b8:	f300 808e 	bgt.w	80072d8 <_dtoa_r+0x9a8>
 80071bc:	9b05      	ldr	r3, [sp, #20]
 80071be:	2b02      	cmp	r3, #2
 80071c0:	dc50      	bgt.n	8007264 <_dtoa_r+0x934>
 80071c2:	e089      	b.n	80072d8 <_dtoa_r+0x9a8>
 80071c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80071c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80071ca:	e75d      	b.n	8007088 <_dtoa_r+0x758>
 80071cc:	9b01      	ldr	r3, [sp, #4]
 80071ce:	1e5e      	subs	r6, r3, #1
 80071d0:	9b06      	ldr	r3, [sp, #24]
 80071d2:	42b3      	cmp	r3, r6
 80071d4:	bfbf      	itttt	lt
 80071d6:	9b06      	ldrlt	r3, [sp, #24]
 80071d8:	9606      	strlt	r6, [sp, #24]
 80071da:	1af2      	sublt	r2, r6, r3
 80071dc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80071de:	bfb6      	itet	lt
 80071e0:	189b      	addlt	r3, r3, r2
 80071e2:	1b9e      	subge	r6, r3, r6
 80071e4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80071e6:	9b01      	ldr	r3, [sp, #4]
 80071e8:	bfb8      	it	lt
 80071ea:	2600      	movlt	r6, #0
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	bfb5      	itete	lt
 80071f0:	eba8 0503 	sublt.w	r5, r8, r3
 80071f4:	9b01      	ldrge	r3, [sp, #4]
 80071f6:	2300      	movlt	r3, #0
 80071f8:	4645      	movge	r5, r8
 80071fa:	e747      	b.n	800708c <_dtoa_r+0x75c>
 80071fc:	9e06      	ldr	r6, [sp, #24]
 80071fe:	9f08      	ldr	r7, [sp, #32]
 8007200:	4645      	mov	r5, r8
 8007202:	e74c      	b.n	800709e <_dtoa_r+0x76e>
 8007204:	9a06      	ldr	r2, [sp, #24]
 8007206:	e775      	b.n	80070f4 <_dtoa_r+0x7c4>
 8007208:	9b05      	ldr	r3, [sp, #20]
 800720a:	2b01      	cmp	r3, #1
 800720c:	dc18      	bgt.n	8007240 <_dtoa_r+0x910>
 800720e:	9b02      	ldr	r3, [sp, #8]
 8007210:	b9b3      	cbnz	r3, 8007240 <_dtoa_r+0x910>
 8007212:	9b03      	ldr	r3, [sp, #12]
 8007214:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007218:	b9a3      	cbnz	r3, 8007244 <_dtoa_r+0x914>
 800721a:	9b03      	ldr	r3, [sp, #12]
 800721c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007220:	0d1b      	lsrs	r3, r3, #20
 8007222:	051b      	lsls	r3, r3, #20
 8007224:	b12b      	cbz	r3, 8007232 <_dtoa_r+0x902>
 8007226:	9b04      	ldr	r3, [sp, #16]
 8007228:	3301      	adds	r3, #1
 800722a:	9304      	str	r3, [sp, #16]
 800722c:	f108 0801 	add.w	r8, r8, #1
 8007230:	2301      	movs	r3, #1
 8007232:	9306      	str	r3, [sp, #24]
 8007234:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007236:	2b00      	cmp	r3, #0
 8007238:	f47f af74 	bne.w	8007124 <_dtoa_r+0x7f4>
 800723c:	2001      	movs	r0, #1
 800723e:	e779      	b.n	8007134 <_dtoa_r+0x804>
 8007240:	2300      	movs	r3, #0
 8007242:	e7f6      	b.n	8007232 <_dtoa_r+0x902>
 8007244:	9b02      	ldr	r3, [sp, #8]
 8007246:	e7f4      	b.n	8007232 <_dtoa_r+0x902>
 8007248:	d085      	beq.n	8007156 <_dtoa_r+0x826>
 800724a:	4618      	mov	r0, r3
 800724c:	301c      	adds	r0, #28
 800724e:	e77d      	b.n	800714c <_dtoa_r+0x81c>
 8007250:	40240000 	.word	0x40240000
 8007254:	9b01      	ldr	r3, [sp, #4]
 8007256:	2b00      	cmp	r3, #0
 8007258:	dc38      	bgt.n	80072cc <_dtoa_r+0x99c>
 800725a:	9b05      	ldr	r3, [sp, #20]
 800725c:	2b02      	cmp	r3, #2
 800725e:	dd35      	ble.n	80072cc <_dtoa_r+0x99c>
 8007260:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007264:	f1b9 0f00 	cmp.w	r9, #0
 8007268:	d10d      	bne.n	8007286 <_dtoa_r+0x956>
 800726a:	4631      	mov	r1, r6
 800726c:	464b      	mov	r3, r9
 800726e:	2205      	movs	r2, #5
 8007270:	4620      	mov	r0, r4
 8007272:	f000 fbe5 	bl	8007a40 <__multadd>
 8007276:	4601      	mov	r1, r0
 8007278:	4606      	mov	r6, r0
 800727a:	4658      	mov	r0, fp
 800727c:	f000 fdfc 	bl	8007e78 <__mcmp>
 8007280:	2800      	cmp	r0, #0
 8007282:	f73f adbd 	bgt.w	8006e00 <_dtoa_r+0x4d0>
 8007286:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007288:	9d00      	ldr	r5, [sp, #0]
 800728a:	ea6f 0a03 	mvn.w	sl, r3
 800728e:	f04f 0800 	mov.w	r8, #0
 8007292:	4631      	mov	r1, r6
 8007294:	4620      	mov	r0, r4
 8007296:	f000 fbb1 	bl	80079fc <_Bfree>
 800729a:	2f00      	cmp	r7, #0
 800729c:	f43f aeb4 	beq.w	8007008 <_dtoa_r+0x6d8>
 80072a0:	f1b8 0f00 	cmp.w	r8, #0
 80072a4:	d005      	beq.n	80072b2 <_dtoa_r+0x982>
 80072a6:	45b8      	cmp	r8, r7
 80072a8:	d003      	beq.n	80072b2 <_dtoa_r+0x982>
 80072aa:	4641      	mov	r1, r8
 80072ac:	4620      	mov	r0, r4
 80072ae:	f000 fba5 	bl	80079fc <_Bfree>
 80072b2:	4639      	mov	r1, r7
 80072b4:	4620      	mov	r0, r4
 80072b6:	f000 fba1 	bl	80079fc <_Bfree>
 80072ba:	e6a5      	b.n	8007008 <_dtoa_r+0x6d8>
 80072bc:	2600      	movs	r6, #0
 80072be:	4637      	mov	r7, r6
 80072c0:	e7e1      	b.n	8007286 <_dtoa_r+0x956>
 80072c2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80072c4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80072c8:	4637      	mov	r7, r6
 80072ca:	e599      	b.n	8006e00 <_dtoa_r+0x4d0>
 80072cc:	9b08      	ldr	r3, [sp, #32]
 80072ce:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	f000 80fd 	beq.w	80074d2 <_dtoa_r+0xba2>
 80072d8:	2d00      	cmp	r5, #0
 80072da:	dd05      	ble.n	80072e8 <_dtoa_r+0x9b8>
 80072dc:	4639      	mov	r1, r7
 80072de:	462a      	mov	r2, r5
 80072e0:	4620      	mov	r0, r4
 80072e2:	f000 fd5d 	bl	8007da0 <__lshift>
 80072e6:	4607      	mov	r7, r0
 80072e8:	9b06      	ldr	r3, [sp, #24]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d05c      	beq.n	80073a8 <_dtoa_r+0xa78>
 80072ee:	6879      	ldr	r1, [r7, #4]
 80072f0:	4620      	mov	r0, r4
 80072f2:	f000 fb43 	bl	800797c <_Balloc>
 80072f6:	4605      	mov	r5, r0
 80072f8:	b928      	cbnz	r0, 8007306 <_dtoa_r+0x9d6>
 80072fa:	4b80      	ldr	r3, [pc, #512]	; (80074fc <_dtoa_r+0xbcc>)
 80072fc:	4602      	mov	r2, r0
 80072fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007302:	f7ff bb2e 	b.w	8006962 <_dtoa_r+0x32>
 8007306:	693a      	ldr	r2, [r7, #16]
 8007308:	3202      	adds	r2, #2
 800730a:	0092      	lsls	r2, r2, #2
 800730c:	f107 010c 	add.w	r1, r7, #12
 8007310:	300c      	adds	r0, #12
 8007312:	f000 fb25 	bl	8007960 <memcpy>
 8007316:	2201      	movs	r2, #1
 8007318:	4629      	mov	r1, r5
 800731a:	4620      	mov	r0, r4
 800731c:	f000 fd40 	bl	8007da0 <__lshift>
 8007320:	9b00      	ldr	r3, [sp, #0]
 8007322:	3301      	adds	r3, #1
 8007324:	9301      	str	r3, [sp, #4]
 8007326:	9b00      	ldr	r3, [sp, #0]
 8007328:	444b      	add	r3, r9
 800732a:	9307      	str	r3, [sp, #28]
 800732c:	9b02      	ldr	r3, [sp, #8]
 800732e:	f003 0301 	and.w	r3, r3, #1
 8007332:	46b8      	mov	r8, r7
 8007334:	9306      	str	r3, [sp, #24]
 8007336:	4607      	mov	r7, r0
 8007338:	9b01      	ldr	r3, [sp, #4]
 800733a:	4631      	mov	r1, r6
 800733c:	3b01      	subs	r3, #1
 800733e:	4658      	mov	r0, fp
 8007340:	9302      	str	r3, [sp, #8]
 8007342:	f7ff fa69 	bl	8006818 <quorem>
 8007346:	4603      	mov	r3, r0
 8007348:	3330      	adds	r3, #48	; 0x30
 800734a:	9004      	str	r0, [sp, #16]
 800734c:	4641      	mov	r1, r8
 800734e:	4658      	mov	r0, fp
 8007350:	9308      	str	r3, [sp, #32]
 8007352:	f000 fd91 	bl	8007e78 <__mcmp>
 8007356:	463a      	mov	r2, r7
 8007358:	4681      	mov	r9, r0
 800735a:	4631      	mov	r1, r6
 800735c:	4620      	mov	r0, r4
 800735e:	f000 fda7 	bl	8007eb0 <__mdiff>
 8007362:	68c2      	ldr	r2, [r0, #12]
 8007364:	9b08      	ldr	r3, [sp, #32]
 8007366:	4605      	mov	r5, r0
 8007368:	bb02      	cbnz	r2, 80073ac <_dtoa_r+0xa7c>
 800736a:	4601      	mov	r1, r0
 800736c:	4658      	mov	r0, fp
 800736e:	f000 fd83 	bl	8007e78 <__mcmp>
 8007372:	9b08      	ldr	r3, [sp, #32]
 8007374:	4602      	mov	r2, r0
 8007376:	4629      	mov	r1, r5
 8007378:	4620      	mov	r0, r4
 800737a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800737e:	f000 fb3d 	bl	80079fc <_Bfree>
 8007382:	9b05      	ldr	r3, [sp, #20]
 8007384:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007386:	9d01      	ldr	r5, [sp, #4]
 8007388:	ea43 0102 	orr.w	r1, r3, r2
 800738c:	9b06      	ldr	r3, [sp, #24]
 800738e:	430b      	orrs	r3, r1
 8007390:	9b08      	ldr	r3, [sp, #32]
 8007392:	d10d      	bne.n	80073b0 <_dtoa_r+0xa80>
 8007394:	2b39      	cmp	r3, #57	; 0x39
 8007396:	d029      	beq.n	80073ec <_dtoa_r+0xabc>
 8007398:	f1b9 0f00 	cmp.w	r9, #0
 800739c:	dd01      	ble.n	80073a2 <_dtoa_r+0xa72>
 800739e:	9b04      	ldr	r3, [sp, #16]
 80073a0:	3331      	adds	r3, #49	; 0x31
 80073a2:	9a02      	ldr	r2, [sp, #8]
 80073a4:	7013      	strb	r3, [r2, #0]
 80073a6:	e774      	b.n	8007292 <_dtoa_r+0x962>
 80073a8:	4638      	mov	r0, r7
 80073aa:	e7b9      	b.n	8007320 <_dtoa_r+0x9f0>
 80073ac:	2201      	movs	r2, #1
 80073ae:	e7e2      	b.n	8007376 <_dtoa_r+0xa46>
 80073b0:	f1b9 0f00 	cmp.w	r9, #0
 80073b4:	db06      	blt.n	80073c4 <_dtoa_r+0xa94>
 80073b6:	9905      	ldr	r1, [sp, #20]
 80073b8:	ea41 0909 	orr.w	r9, r1, r9
 80073bc:	9906      	ldr	r1, [sp, #24]
 80073be:	ea59 0101 	orrs.w	r1, r9, r1
 80073c2:	d120      	bne.n	8007406 <_dtoa_r+0xad6>
 80073c4:	2a00      	cmp	r2, #0
 80073c6:	ddec      	ble.n	80073a2 <_dtoa_r+0xa72>
 80073c8:	4659      	mov	r1, fp
 80073ca:	2201      	movs	r2, #1
 80073cc:	4620      	mov	r0, r4
 80073ce:	9301      	str	r3, [sp, #4]
 80073d0:	f000 fce6 	bl	8007da0 <__lshift>
 80073d4:	4631      	mov	r1, r6
 80073d6:	4683      	mov	fp, r0
 80073d8:	f000 fd4e 	bl	8007e78 <__mcmp>
 80073dc:	2800      	cmp	r0, #0
 80073de:	9b01      	ldr	r3, [sp, #4]
 80073e0:	dc02      	bgt.n	80073e8 <_dtoa_r+0xab8>
 80073e2:	d1de      	bne.n	80073a2 <_dtoa_r+0xa72>
 80073e4:	07da      	lsls	r2, r3, #31
 80073e6:	d5dc      	bpl.n	80073a2 <_dtoa_r+0xa72>
 80073e8:	2b39      	cmp	r3, #57	; 0x39
 80073ea:	d1d8      	bne.n	800739e <_dtoa_r+0xa6e>
 80073ec:	9a02      	ldr	r2, [sp, #8]
 80073ee:	2339      	movs	r3, #57	; 0x39
 80073f0:	7013      	strb	r3, [r2, #0]
 80073f2:	462b      	mov	r3, r5
 80073f4:	461d      	mov	r5, r3
 80073f6:	3b01      	subs	r3, #1
 80073f8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80073fc:	2a39      	cmp	r2, #57	; 0x39
 80073fe:	d050      	beq.n	80074a2 <_dtoa_r+0xb72>
 8007400:	3201      	adds	r2, #1
 8007402:	701a      	strb	r2, [r3, #0]
 8007404:	e745      	b.n	8007292 <_dtoa_r+0x962>
 8007406:	2a00      	cmp	r2, #0
 8007408:	dd03      	ble.n	8007412 <_dtoa_r+0xae2>
 800740a:	2b39      	cmp	r3, #57	; 0x39
 800740c:	d0ee      	beq.n	80073ec <_dtoa_r+0xabc>
 800740e:	3301      	adds	r3, #1
 8007410:	e7c7      	b.n	80073a2 <_dtoa_r+0xa72>
 8007412:	9a01      	ldr	r2, [sp, #4]
 8007414:	9907      	ldr	r1, [sp, #28]
 8007416:	f802 3c01 	strb.w	r3, [r2, #-1]
 800741a:	428a      	cmp	r2, r1
 800741c:	d02a      	beq.n	8007474 <_dtoa_r+0xb44>
 800741e:	4659      	mov	r1, fp
 8007420:	2300      	movs	r3, #0
 8007422:	220a      	movs	r2, #10
 8007424:	4620      	mov	r0, r4
 8007426:	f000 fb0b 	bl	8007a40 <__multadd>
 800742a:	45b8      	cmp	r8, r7
 800742c:	4683      	mov	fp, r0
 800742e:	f04f 0300 	mov.w	r3, #0
 8007432:	f04f 020a 	mov.w	r2, #10
 8007436:	4641      	mov	r1, r8
 8007438:	4620      	mov	r0, r4
 800743a:	d107      	bne.n	800744c <_dtoa_r+0xb1c>
 800743c:	f000 fb00 	bl	8007a40 <__multadd>
 8007440:	4680      	mov	r8, r0
 8007442:	4607      	mov	r7, r0
 8007444:	9b01      	ldr	r3, [sp, #4]
 8007446:	3301      	adds	r3, #1
 8007448:	9301      	str	r3, [sp, #4]
 800744a:	e775      	b.n	8007338 <_dtoa_r+0xa08>
 800744c:	f000 faf8 	bl	8007a40 <__multadd>
 8007450:	4639      	mov	r1, r7
 8007452:	4680      	mov	r8, r0
 8007454:	2300      	movs	r3, #0
 8007456:	220a      	movs	r2, #10
 8007458:	4620      	mov	r0, r4
 800745a:	f000 faf1 	bl	8007a40 <__multadd>
 800745e:	4607      	mov	r7, r0
 8007460:	e7f0      	b.n	8007444 <_dtoa_r+0xb14>
 8007462:	f1b9 0f00 	cmp.w	r9, #0
 8007466:	9a00      	ldr	r2, [sp, #0]
 8007468:	bfcc      	ite	gt
 800746a:	464d      	movgt	r5, r9
 800746c:	2501      	movle	r5, #1
 800746e:	4415      	add	r5, r2
 8007470:	f04f 0800 	mov.w	r8, #0
 8007474:	4659      	mov	r1, fp
 8007476:	2201      	movs	r2, #1
 8007478:	4620      	mov	r0, r4
 800747a:	9301      	str	r3, [sp, #4]
 800747c:	f000 fc90 	bl	8007da0 <__lshift>
 8007480:	4631      	mov	r1, r6
 8007482:	4683      	mov	fp, r0
 8007484:	f000 fcf8 	bl	8007e78 <__mcmp>
 8007488:	2800      	cmp	r0, #0
 800748a:	dcb2      	bgt.n	80073f2 <_dtoa_r+0xac2>
 800748c:	d102      	bne.n	8007494 <_dtoa_r+0xb64>
 800748e:	9b01      	ldr	r3, [sp, #4]
 8007490:	07db      	lsls	r3, r3, #31
 8007492:	d4ae      	bmi.n	80073f2 <_dtoa_r+0xac2>
 8007494:	462b      	mov	r3, r5
 8007496:	461d      	mov	r5, r3
 8007498:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800749c:	2a30      	cmp	r2, #48	; 0x30
 800749e:	d0fa      	beq.n	8007496 <_dtoa_r+0xb66>
 80074a0:	e6f7      	b.n	8007292 <_dtoa_r+0x962>
 80074a2:	9a00      	ldr	r2, [sp, #0]
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d1a5      	bne.n	80073f4 <_dtoa_r+0xac4>
 80074a8:	f10a 0a01 	add.w	sl, sl, #1
 80074ac:	2331      	movs	r3, #49	; 0x31
 80074ae:	e779      	b.n	80073a4 <_dtoa_r+0xa74>
 80074b0:	4b13      	ldr	r3, [pc, #76]	; (8007500 <_dtoa_r+0xbd0>)
 80074b2:	f7ff baaf 	b.w	8006a14 <_dtoa_r+0xe4>
 80074b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	f47f aa86 	bne.w	80069ca <_dtoa_r+0x9a>
 80074be:	4b11      	ldr	r3, [pc, #68]	; (8007504 <_dtoa_r+0xbd4>)
 80074c0:	f7ff baa8 	b.w	8006a14 <_dtoa_r+0xe4>
 80074c4:	f1b9 0f00 	cmp.w	r9, #0
 80074c8:	dc03      	bgt.n	80074d2 <_dtoa_r+0xba2>
 80074ca:	9b05      	ldr	r3, [sp, #20]
 80074cc:	2b02      	cmp	r3, #2
 80074ce:	f73f aec9 	bgt.w	8007264 <_dtoa_r+0x934>
 80074d2:	9d00      	ldr	r5, [sp, #0]
 80074d4:	4631      	mov	r1, r6
 80074d6:	4658      	mov	r0, fp
 80074d8:	f7ff f99e 	bl	8006818 <quorem>
 80074dc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80074e0:	f805 3b01 	strb.w	r3, [r5], #1
 80074e4:	9a00      	ldr	r2, [sp, #0]
 80074e6:	1aaa      	subs	r2, r5, r2
 80074e8:	4591      	cmp	r9, r2
 80074ea:	ddba      	ble.n	8007462 <_dtoa_r+0xb32>
 80074ec:	4659      	mov	r1, fp
 80074ee:	2300      	movs	r3, #0
 80074f0:	220a      	movs	r2, #10
 80074f2:	4620      	mov	r0, r4
 80074f4:	f000 faa4 	bl	8007a40 <__multadd>
 80074f8:	4683      	mov	fp, r0
 80074fa:	e7eb      	b.n	80074d4 <_dtoa_r+0xba4>
 80074fc:	080088a7 	.word	0x080088a7
 8007500:	08008800 	.word	0x08008800
 8007504:	08008824 	.word	0x08008824

08007508 <__sflush_r>:
 8007508:	898a      	ldrh	r2, [r1, #12]
 800750a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800750e:	4605      	mov	r5, r0
 8007510:	0710      	lsls	r0, r2, #28
 8007512:	460c      	mov	r4, r1
 8007514:	d458      	bmi.n	80075c8 <__sflush_r+0xc0>
 8007516:	684b      	ldr	r3, [r1, #4]
 8007518:	2b00      	cmp	r3, #0
 800751a:	dc05      	bgt.n	8007528 <__sflush_r+0x20>
 800751c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800751e:	2b00      	cmp	r3, #0
 8007520:	dc02      	bgt.n	8007528 <__sflush_r+0x20>
 8007522:	2000      	movs	r0, #0
 8007524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007528:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800752a:	2e00      	cmp	r6, #0
 800752c:	d0f9      	beq.n	8007522 <__sflush_r+0x1a>
 800752e:	2300      	movs	r3, #0
 8007530:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007534:	682f      	ldr	r7, [r5, #0]
 8007536:	602b      	str	r3, [r5, #0]
 8007538:	d032      	beq.n	80075a0 <__sflush_r+0x98>
 800753a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800753c:	89a3      	ldrh	r3, [r4, #12]
 800753e:	075a      	lsls	r2, r3, #29
 8007540:	d505      	bpl.n	800754e <__sflush_r+0x46>
 8007542:	6863      	ldr	r3, [r4, #4]
 8007544:	1ac0      	subs	r0, r0, r3
 8007546:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007548:	b10b      	cbz	r3, 800754e <__sflush_r+0x46>
 800754a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800754c:	1ac0      	subs	r0, r0, r3
 800754e:	2300      	movs	r3, #0
 8007550:	4602      	mov	r2, r0
 8007552:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007554:	6a21      	ldr	r1, [r4, #32]
 8007556:	4628      	mov	r0, r5
 8007558:	47b0      	blx	r6
 800755a:	1c43      	adds	r3, r0, #1
 800755c:	89a3      	ldrh	r3, [r4, #12]
 800755e:	d106      	bne.n	800756e <__sflush_r+0x66>
 8007560:	6829      	ldr	r1, [r5, #0]
 8007562:	291d      	cmp	r1, #29
 8007564:	d82c      	bhi.n	80075c0 <__sflush_r+0xb8>
 8007566:	4a2a      	ldr	r2, [pc, #168]	; (8007610 <__sflush_r+0x108>)
 8007568:	40ca      	lsrs	r2, r1
 800756a:	07d6      	lsls	r6, r2, #31
 800756c:	d528      	bpl.n	80075c0 <__sflush_r+0xb8>
 800756e:	2200      	movs	r2, #0
 8007570:	6062      	str	r2, [r4, #4]
 8007572:	04d9      	lsls	r1, r3, #19
 8007574:	6922      	ldr	r2, [r4, #16]
 8007576:	6022      	str	r2, [r4, #0]
 8007578:	d504      	bpl.n	8007584 <__sflush_r+0x7c>
 800757a:	1c42      	adds	r2, r0, #1
 800757c:	d101      	bne.n	8007582 <__sflush_r+0x7a>
 800757e:	682b      	ldr	r3, [r5, #0]
 8007580:	b903      	cbnz	r3, 8007584 <__sflush_r+0x7c>
 8007582:	6560      	str	r0, [r4, #84]	; 0x54
 8007584:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007586:	602f      	str	r7, [r5, #0]
 8007588:	2900      	cmp	r1, #0
 800758a:	d0ca      	beq.n	8007522 <__sflush_r+0x1a>
 800758c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007590:	4299      	cmp	r1, r3
 8007592:	d002      	beq.n	800759a <__sflush_r+0x92>
 8007594:	4628      	mov	r0, r5
 8007596:	f000 fd7f 	bl	8008098 <_free_r>
 800759a:	2000      	movs	r0, #0
 800759c:	6360      	str	r0, [r4, #52]	; 0x34
 800759e:	e7c1      	b.n	8007524 <__sflush_r+0x1c>
 80075a0:	6a21      	ldr	r1, [r4, #32]
 80075a2:	2301      	movs	r3, #1
 80075a4:	4628      	mov	r0, r5
 80075a6:	47b0      	blx	r6
 80075a8:	1c41      	adds	r1, r0, #1
 80075aa:	d1c7      	bne.n	800753c <__sflush_r+0x34>
 80075ac:	682b      	ldr	r3, [r5, #0]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d0c4      	beq.n	800753c <__sflush_r+0x34>
 80075b2:	2b1d      	cmp	r3, #29
 80075b4:	d001      	beq.n	80075ba <__sflush_r+0xb2>
 80075b6:	2b16      	cmp	r3, #22
 80075b8:	d101      	bne.n	80075be <__sflush_r+0xb6>
 80075ba:	602f      	str	r7, [r5, #0]
 80075bc:	e7b1      	b.n	8007522 <__sflush_r+0x1a>
 80075be:	89a3      	ldrh	r3, [r4, #12]
 80075c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075c4:	81a3      	strh	r3, [r4, #12]
 80075c6:	e7ad      	b.n	8007524 <__sflush_r+0x1c>
 80075c8:	690f      	ldr	r7, [r1, #16]
 80075ca:	2f00      	cmp	r7, #0
 80075cc:	d0a9      	beq.n	8007522 <__sflush_r+0x1a>
 80075ce:	0793      	lsls	r3, r2, #30
 80075d0:	680e      	ldr	r6, [r1, #0]
 80075d2:	bf08      	it	eq
 80075d4:	694b      	ldreq	r3, [r1, #20]
 80075d6:	600f      	str	r7, [r1, #0]
 80075d8:	bf18      	it	ne
 80075da:	2300      	movne	r3, #0
 80075dc:	eba6 0807 	sub.w	r8, r6, r7
 80075e0:	608b      	str	r3, [r1, #8]
 80075e2:	f1b8 0f00 	cmp.w	r8, #0
 80075e6:	dd9c      	ble.n	8007522 <__sflush_r+0x1a>
 80075e8:	6a21      	ldr	r1, [r4, #32]
 80075ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80075ec:	4643      	mov	r3, r8
 80075ee:	463a      	mov	r2, r7
 80075f0:	4628      	mov	r0, r5
 80075f2:	47b0      	blx	r6
 80075f4:	2800      	cmp	r0, #0
 80075f6:	dc06      	bgt.n	8007606 <__sflush_r+0xfe>
 80075f8:	89a3      	ldrh	r3, [r4, #12]
 80075fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075fe:	81a3      	strh	r3, [r4, #12]
 8007600:	f04f 30ff 	mov.w	r0, #4294967295
 8007604:	e78e      	b.n	8007524 <__sflush_r+0x1c>
 8007606:	4407      	add	r7, r0
 8007608:	eba8 0800 	sub.w	r8, r8, r0
 800760c:	e7e9      	b.n	80075e2 <__sflush_r+0xda>
 800760e:	bf00      	nop
 8007610:	20400001 	.word	0x20400001

08007614 <_fflush_r>:
 8007614:	b538      	push	{r3, r4, r5, lr}
 8007616:	690b      	ldr	r3, [r1, #16]
 8007618:	4605      	mov	r5, r0
 800761a:	460c      	mov	r4, r1
 800761c:	b913      	cbnz	r3, 8007624 <_fflush_r+0x10>
 800761e:	2500      	movs	r5, #0
 8007620:	4628      	mov	r0, r5
 8007622:	bd38      	pop	{r3, r4, r5, pc}
 8007624:	b118      	cbz	r0, 800762e <_fflush_r+0x1a>
 8007626:	6983      	ldr	r3, [r0, #24]
 8007628:	b90b      	cbnz	r3, 800762e <_fflush_r+0x1a>
 800762a:	f000 f887 	bl	800773c <__sinit>
 800762e:	4b14      	ldr	r3, [pc, #80]	; (8007680 <_fflush_r+0x6c>)
 8007630:	429c      	cmp	r4, r3
 8007632:	d11b      	bne.n	800766c <_fflush_r+0x58>
 8007634:	686c      	ldr	r4, [r5, #4]
 8007636:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d0ef      	beq.n	800761e <_fflush_r+0xa>
 800763e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007640:	07d0      	lsls	r0, r2, #31
 8007642:	d404      	bmi.n	800764e <_fflush_r+0x3a>
 8007644:	0599      	lsls	r1, r3, #22
 8007646:	d402      	bmi.n	800764e <_fflush_r+0x3a>
 8007648:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800764a:	f000 f91a 	bl	8007882 <__retarget_lock_acquire_recursive>
 800764e:	4628      	mov	r0, r5
 8007650:	4621      	mov	r1, r4
 8007652:	f7ff ff59 	bl	8007508 <__sflush_r>
 8007656:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007658:	07da      	lsls	r2, r3, #31
 800765a:	4605      	mov	r5, r0
 800765c:	d4e0      	bmi.n	8007620 <_fflush_r+0xc>
 800765e:	89a3      	ldrh	r3, [r4, #12]
 8007660:	059b      	lsls	r3, r3, #22
 8007662:	d4dd      	bmi.n	8007620 <_fflush_r+0xc>
 8007664:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007666:	f000 f90d 	bl	8007884 <__retarget_lock_release_recursive>
 800766a:	e7d9      	b.n	8007620 <_fflush_r+0xc>
 800766c:	4b05      	ldr	r3, [pc, #20]	; (8007684 <_fflush_r+0x70>)
 800766e:	429c      	cmp	r4, r3
 8007670:	d101      	bne.n	8007676 <_fflush_r+0x62>
 8007672:	68ac      	ldr	r4, [r5, #8]
 8007674:	e7df      	b.n	8007636 <_fflush_r+0x22>
 8007676:	4b04      	ldr	r3, [pc, #16]	; (8007688 <_fflush_r+0x74>)
 8007678:	429c      	cmp	r4, r3
 800767a:	bf08      	it	eq
 800767c:	68ec      	ldreq	r4, [r5, #12]
 800767e:	e7da      	b.n	8007636 <_fflush_r+0x22>
 8007680:	080088d8 	.word	0x080088d8
 8007684:	080088f8 	.word	0x080088f8
 8007688:	080088b8 	.word	0x080088b8

0800768c <std>:
 800768c:	2300      	movs	r3, #0
 800768e:	b510      	push	{r4, lr}
 8007690:	4604      	mov	r4, r0
 8007692:	e9c0 3300 	strd	r3, r3, [r0]
 8007696:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800769a:	6083      	str	r3, [r0, #8]
 800769c:	8181      	strh	r1, [r0, #12]
 800769e:	6643      	str	r3, [r0, #100]	; 0x64
 80076a0:	81c2      	strh	r2, [r0, #14]
 80076a2:	6183      	str	r3, [r0, #24]
 80076a4:	4619      	mov	r1, r3
 80076a6:	2208      	movs	r2, #8
 80076a8:	305c      	adds	r0, #92	; 0x5c
 80076aa:	f7fe faf5 	bl	8005c98 <memset>
 80076ae:	4b05      	ldr	r3, [pc, #20]	; (80076c4 <std+0x38>)
 80076b0:	6263      	str	r3, [r4, #36]	; 0x24
 80076b2:	4b05      	ldr	r3, [pc, #20]	; (80076c8 <std+0x3c>)
 80076b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80076b6:	4b05      	ldr	r3, [pc, #20]	; (80076cc <std+0x40>)
 80076b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80076ba:	4b05      	ldr	r3, [pc, #20]	; (80076d0 <std+0x44>)
 80076bc:	6224      	str	r4, [r4, #32]
 80076be:	6323      	str	r3, [r4, #48]	; 0x30
 80076c0:	bd10      	pop	{r4, pc}
 80076c2:	bf00      	nop
 80076c4:	080084c1 	.word	0x080084c1
 80076c8:	080084e3 	.word	0x080084e3
 80076cc:	0800851b 	.word	0x0800851b
 80076d0:	0800853f 	.word	0x0800853f

080076d4 <_cleanup_r>:
 80076d4:	4901      	ldr	r1, [pc, #4]	; (80076dc <_cleanup_r+0x8>)
 80076d6:	f000 b8af 	b.w	8007838 <_fwalk_reent>
 80076da:	bf00      	nop
 80076dc:	08007615 	.word	0x08007615

080076e0 <__sfmoreglue>:
 80076e0:	b570      	push	{r4, r5, r6, lr}
 80076e2:	1e4a      	subs	r2, r1, #1
 80076e4:	2568      	movs	r5, #104	; 0x68
 80076e6:	4355      	muls	r5, r2
 80076e8:	460e      	mov	r6, r1
 80076ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80076ee:	f000 fd23 	bl	8008138 <_malloc_r>
 80076f2:	4604      	mov	r4, r0
 80076f4:	b140      	cbz	r0, 8007708 <__sfmoreglue+0x28>
 80076f6:	2100      	movs	r1, #0
 80076f8:	e9c0 1600 	strd	r1, r6, [r0]
 80076fc:	300c      	adds	r0, #12
 80076fe:	60a0      	str	r0, [r4, #8]
 8007700:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007704:	f7fe fac8 	bl	8005c98 <memset>
 8007708:	4620      	mov	r0, r4
 800770a:	bd70      	pop	{r4, r5, r6, pc}

0800770c <__sfp_lock_acquire>:
 800770c:	4801      	ldr	r0, [pc, #4]	; (8007714 <__sfp_lock_acquire+0x8>)
 800770e:	f000 b8b8 	b.w	8007882 <__retarget_lock_acquire_recursive>
 8007712:	bf00      	nop
 8007714:	200003c4 	.word	0x200003c4

08007718 <__sfp_lock_release>:
 8007718:	4801      	ldr	r0, [pc, #4]	; (8007720 <__sfp_lock_release+0x8>)
 800771a:	f000 b8b3 	b.w	8007884 <__retarget_lock_release_recursive>
 800771e:	bf00      	nop
 8007720:	200003c4 	.word	0x200003c4

08007724 <__sinit_lock_acquire>:
 8007724:	4801      	ldr	r0, [pc, #4]	; (800772c <__sinit_lock_acquire+0x8>)
 8007726:	f000 b8ac 	b.w	8007882 <__retarget_lock_acquire_recursive>
 800772a:	bf00      	nop
 800772c:	200003bf 	.word	0x200003bf

08007730 <__sinit_lock_release>:
 8007730:	4801      	ldr	r0, [pc, #4]	; (8007738 <__sinit_lock_release+0x8>)
 8007732:	f000 b8a7 	b.w	8007884 <__retarget_lock_release_recursive>
 8007736:	bf00      	nop
 8007738:	200003bf 	.word	0x200003bf

0800773c <__sinit>:
 800773c:	b510      	push	{r4, lr}
 800773e:	4604      	mov	r4, r0
 8007740:	f7ff fff0 	bl	8007724 <__sinit_lock_acquire>
 8007744:	69a3      	ldr	r3, [r4, #24]
 8007746:	b11b      	cbz	r3, 8007750 <__sinit+0x14>
 8007748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800774c:	f7ff bff0 	b.w	8007730 <__sinit_lock_release>
 8007750:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007754:	6523      	str	r3, [r4, #80]	; 0x50
 8007756:	4b13      	ldr	r3, [pc, #76]	; (80077a4 <__sinit+0x68>)
 8007758:	4a13      	ldr	r2, [pc, #76]	; (80077a8 <__sinit+0x6c>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	62a2      	str	r2, [r4, #40]	; 0x28
 800775e:	42a3      	cmp	r3, r4
 8007760:	bf04      	itt	eq
 8007762:	2301      	moveq	r3, #1
 8007764:	61a3      	streq	r3, [r4, #24]
 8007766:	4620      	mov	r0, r4
 8007768:	f000 f820 	bl	80077ac <__sfp>
 800776c:	6060      	str	r0, [r4, #4]
 800776e:	4620      	mov	r0, r4
 8007770:	f000 f81c 	bl	80077ac <__sfp>
 8007774:	60a0      	str	r0, [r4, #8]
 8007776:	4620      	mov	r0, r4
 8007778:	f000 f818 	bl	80077ac <__sfp>
 800777c:	2200      	movs	r2, #0
 800777e:	60e0      	str	r0, [r4, #12]
 8007780:	2104      	movs	r1, #4
 8007782:	6860      	ldr	r0, [r4, #4]
 8007784:	f7ff ff82 	bl	800768c <std>
 8007788:	68a0      	ldr	r0, [r4, #8]
 800778a:	2201      	movs	r2, #1
 800778c:	2109      	movs	r1, #9
 800778e:	f7ff ff7d 	bl	800768c <std>
 8007792:	68e0      	ldr	r0, [r4, #12]
 8007794:	2202      	movs	r2, #2
 8007796:	2112      	movs	r1, #18
 8007798:	f7ff ff78 	bl	800768c <std>
 800779c:	2301      	movs	r3, #1
 800779e:	61a3      	str	r3, [r4, #24]
 80077a0:	e7d2      	b.n	8007748 <__sinit+0xc>
 80077a2:	bf00      	nop
 80077a4:	080087ec 	.word	0x080087ec
 80077a8:	080076d5 	.word	0x080076d5

080077ac <__sfp>:
 80077ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ae:	4607      	mov	r7, r0
 80077b0:	f7ff ffac 	bl	800770c <__sfp_lock_acquire>
 80077b4:	4b1e      	ldr	r3, [pc, #120]	; (8007830 <__sfp+0x84>)
 80077b6:	681e      	ldr	r6, [r3, #0]
 80077b8:	69b3      	ldr	r3, [r6, #24]
 80077ba:	b913      	cbnz	r3, 80077c2 <__sfp+0x16>
 80077bc:	4630      	mov	r0, r6
 80077be:	f7ff ffbd 	bl	800773c <__sinit>
 80077c2:	3648      	adds	r6, #72	; 0x48
 80077c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80077c8:	3b01      	subs	r3, #1
 80077ca:	d503      	bpl.n	80077d4 <__sfp+0x28>
 80077cc:	6833      	ldr	r3, [r6, #0]
 80077ce:	b30b      	cbz	r3, 8007814 <__sfp+0x68>
 80077d0:	6836      	ldr	r6, [r6, #0]
 80077d2:	e7f7      	b.n	80077c4 <__sfp+0x18>
 80077d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80077d8:	b9d5      	cbnz	r5, 8007810 <__sfp+0x64>
 80077da:	4b16      	ldr	r3, [pc, #88]	; (8007834 <__sfp+0x88>)
 80077dc:	60e3      	str	r3, [r4, #12]
 80077de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80077e2:	6665      	str	r5, [r4, #100]	; 0x64
 80077e4:	f000 f84c 	bl	8007880 <__retarget_lock_init_recursive>
 80077e8:	f7ff ff96 	bl	8007718 <__sfp_lock_release>
 80077ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80077f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80077f4:	6025      	str	r5, [r4, #0]
 80077f6:	61a5      	str	r5, [r4, #24]
 80077f8:	2208      	movs	r2, #8
 80077fa:	4629      	mov	r1, r5
 80077fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007800:	f7fe fa4a 	bl	8005c98 <memset>
 8007804:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007808:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800780c:	4620      	mov	r0, r4
 800780e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007810:	3468      	adds	r4, #104	; 0x68
 8007812:	e7d9      	b.n	80077c8 <__sfp+0x1c>
 8007814:	2104      	movs	r1, #4
 8007816:	4638      	mov	r0, r7
 8007818:	f7ff ff62 	bl	80076e0 <__sfmoreglue>
 800781c:	4604      	mov	r4, r0
 800781e:	6030      	str	r0, [r6, #0]
 8007820:	2800      	cmp	r0, #0
 8007822:	d1d5      	bne.n	80077d0 <__sfp+0x24>
 8007824:	f7ff ff78 	bl	8007718 <__sfp_lock_release>
 8007828:	230c      	movs	r3, #12
 800782a:	603b      	str	r3, [r7, #0]
 800782c:	e7ee      	b.n	800780c <__sfp+0x60>
 800782e:	bf00      	nop
 8007830:	080087ec 	.word	0x080087ec
 8007834:	ffff0001 	.word	0xffff0001

08007838 <_fwalk_reent>:
 8007838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800783c:	4606      	mov	r6, r0
 800783e:	4688      	mov	r8, r1
 8007840:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007844:	2700      	movs	r7, #0
 8007846:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800784a:	f1b9 0901 	subs.w	r9, r9, #1
 800784e:	d505      	bpl.n	800785c <_fwalk_reent+0x24>
 8007850:	6824      	ldr	r4, [r4, #0]
 8007852:	2c00      	cmp	r4, #0
 8007854:	d1f7      	bne.n	8007846 <_fwalk_reent+0xe>
 8007856:	4638      	mov	r0, r7
 8007858:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800785c:	89ab      	ldrh	r3, [r5, #12]
 800785e:	2b01      	cmp	r3, #1
 8007860:	d907      	bls.n	8007872 <_fwalk_reent+0x3a>
 8007862:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007866:	3301      	adds	r3, #1
 8007868:	d003      	beq.n	8007872 <_fwalk_reent+0x3a>
 800786a:	4629      	mov	r1, r5
 800786c:	4630      	mov	r0, r6
 800786e:	47c0      	blx	r8
 8007870:	4307      	orrs	r7, r0
 8007872:	3568      	adds	r5, #104	; 0x68
 8007874:	e7e9      	b.n	800784a <_fwalk_reent+0x12>
	...

08007878 <_localeconv_r>:
 8007878:	4800      	ldr	r0, [pc, #0]	; (800787c <_localeconv_r+0x4>)
 800787a:	4770      	bx	lr
 800787c:	2000016c 	.word	0x2000016c

08007880 <__retarget_lock_init_recursive>:
 8007880:	4770      	bx	lr

08007882 <__retarget_lock_acquire_recursive>:
 8007882:	4770      	bx	lr

08007884 <__retarget_lock_release_recursive>:
 8007884:	4770      	bx	lr

08007886 <__swhatbuf_r>:
 8007886:	b570      	push	{r4, r5, r6, lr}
 8007888:	460e      	mov	r6, r1
 800788a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800788e:	2900      	cmp	r1, #0
 8007890:	b096      	sub	sp, #88	; 0x58
 8007892:	4614      	mov	r4, r2
 8007894:	461d      	mov	r5, r3
 8007896:	da07      	bge.n	80078a8 <__swhatbuf_r+0x22>
 8007898:	2300      	movs	r3, #0
 800789a:	602b      	str	r3, [r5, #0]
 800789c:	89b3      	ldrh	r3, [r6, #12]
 800789e:	061a      	lsls	r2, r3, #24
 80078a0:	d410      	bmi.n	80078c4 <__swhatbuf_r+0x3e>
 80078a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078a6:	e00e      	b.n	80078c6 <__swhatbuf_r+0x40>
 80078a8:	466a      	mov	r2, sp
 80078aa:	f000 fe9f 	bl	80085ec <_fstat_r>
 80078ae:	2800      	cmp	r0, #0
 80078b0:	dbf2      	blt.n	8007898 <__swhatbuf_r+0x12>
 80078b2:	9a01      	ldr	r2, [sp, #4]
 80078b4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80078b8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80078bc:	425a      	negs	r2, r3
 80078be:	415a      	adcs	r2, r3
 80078c0:	602a      	str	r2, [r5, #0]
 80078c2:	e7ee      	b.n	80078a2 <__swhatbuf_r+0x1c>
 80078c4:	2340      	movs	r3, #64	; 0x40
 80078c6:	2000      	movs	r0, #0
 80078c8:	6023      	str	r3, [r4, #0]
 80078ca:	b016      	add	sp, #88	; 0x58
 80078cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080078d0 <__smakebuf_r>:
 80078d0:	898b      	ldrh	r3, [r1, #12]
 80078d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80078d4:	079d      	lsls	r5, r3, #30
 80078d6:	4606      	mov	r6, r0
 80078d8:	460c      	mov	r4, r1
 80078da:	d507      	bpl.n	80078ec <__smakebuf_r+0x1c>
 80078dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80078e0:	6023      	str	r3, [r4, #0]
 80078e2:	6123      	str	r3, [r4, #16]
 80078e4:	2301      	movs	r3, #1
 80078e6:	6163      	str	r3, [r4, #20]
 80078e8:	b002      	add	sp, #8
 80078ea:	bd70      	pop	{r4, r5, r6, pc}
 80078ec:	ab01      	add	r3, sp, #4
 80078ee:	466a      	mov	r2, sp
 80078f0:	f7ff ffc9 	bl	8007886 <__swhatbuf_r>
 80078f4:	9900      	ldr	r1, [sp, #0]
 80078f6:	4605      	mov	r5, r0
 80078f8:	4630      	mov	r0, r6
 80078fa:	f000 fc1d 	bl	8008138 <_malloc_r>
 80078fe:	b948      	cbnz	r0, 8007914 <__smakebuf_r+0x44>
 8007900:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007904:	059a      	lsls	r2, r3, #22
 8007906:	d4ef      	bmi.n	80078e8 <__smakebuf_r+0x18>
 8007908:	f023 0303 	bic.w	r3, r3, #3
 800790c:	f043 0302 	orr.w	r3, r3, #2
 8007910:	81a3      	strh	r3, [r4, #12]
 8007912:	e7e3      	b.n	80078dc <__smakebuf_r+0xc>
 8007914:	4b0d      	ldr	r3, [pc, #52]	; (800794c <__smakebuf_r+0x7c>)
 8007916:	62b3      	str	r3, [r6, #40]	; 0x28
 8007918:	89a3      	ldrh	r3, [r4, #12]
 800791a:	6020      	str	r0, [r4, #0]
 800791c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007920:	81a3      	strh	r3, [r4, #12]
 8007922:	9b00      	ldr	r3, [sp, #0]
 8007924:	6163      	str	r3, [r4, #20]
 8007926:	9b01      	ldr	r3, [sp, #4]
 8007928:	6120      	str	r0, [r4, #16]
 800792a:	b15b      	cbz	r3, 8007944 <__smakebuf_r+0x74>
 800792c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007930:	4630      	mov	r0, r6
 8007932:	f000 fe6d 	bl	8008610 <_isatty_r>
 8007936:	b128      	cbz	r0, 8007944 <__smakebuf_r+0x74>
 8007938:	89a3      	ldrh	r3, [r4, #12]
 800793a:	f023 0303 	bic.w	r3, r3, #3
 800793e:	f043 0301 	orr.w	r3, r3, #1
 8007942:	81a3      	strh	r3, [r4, #12]
 8007944:	89a0      	ldrh	r0, [r4, #12]
 8007946:	4305      	orrs	r5, r0
 8007948:	81a5      	strh	r5, [r4, #12]
 800794a:	e7cd      	b.n	80078e8 <__smakebuf_r+0x18>
 800794c:	080076d5 	.word	0x080076d5

08007950 <malloc>:
 8007950:	4b02      	ldr	r3, [pc, #8]	; (800795c <malloc+0xc>)
 8007952:	4601      	mov	r1, r0
 8007954:	6818      	ldr	r0, [r3, #0]
 8007956:	f000 bbef 	b.w	8008138 <_malloc_r>
 800795a:	bf00      	nop
 800795c:	20000018 	.word	0x20000018

08007960 <memcpy>:
 8007960:	440a      	add	r2, r1
 8007962:	4291      	cmp	r1, r2
 8007964:	f100 33ff 	add.w	r3, r0, #4294967295
 8007968:	d100      	bne.n	800796c <memcpy+0xc>
 800796a:	4770      	bx	lr
 800796c:	b510      	push	{r4, lr}
 800796e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007972:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007976:	4291      	cmp	r1, r2
 8007978:	d1f9      	bne.n	800796e <memcpy+0xe>
 800797a:	bd10      	pop	{r4, pc}

0800797c <_Balloc>:
 800797c:	b570      	push	{r4, r5, r6, lr}
 800797e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007980:	4604      	mov	r4, r0
 8007982:	460d      	mov	r5, r1
 8007984:	b976      	cbnz	r6, 80079a4 <_Balloc+0x28>
 8007986:	2010      	movs	r0, #16
 8007988:	f7ff ffe2 	bl	8007950 <malloc>
 800798c:	4602      	mov	r2, r0
 800798e:	6260      	str	r0, [r4, #36]	; 0x24
 8007990:	b920      	cbnz	r0, 800799c <_Balloc+0x20>
 8007992:	4b18      	ldr	r3, [pc, #96]	; (80079f4 <_Balloc+0x78>)
 8007994:	4818      	ldr	r0, [pc, #96]	; (80079f8 <_Balloc+0x7c>)
 8007996:	2166      	movs	r1, #102	; 0x66
 8007998:	f000 fde8 	bl	800856c <__assert_func>
 800799c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80079a0:	6006      	str	r6, [r0, #0]
 80079a2:	60c6      	str	r6, [r0, #12]
 80079a4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80079a6:	68f3      	ldr	r3, [r6, #12]
 80079a8:	b183      	cbz	r3, 80079cc <_Balloc+0x50>
 80079aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079ac:	68db      	ldr	r3, [r3, #12]
 80079ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80079b2:	b9b8      	cbnz	r0, 80079e4 <_Balloc+0x68>
 80079b4:	2101      	movs	r1, #1
 80079b6:	fa01 f605 	lsl.w	r6, r1, r5
 80079ba:	1d72      	adds	r2, r6, #5
 80079bc:	0092      	lsls	r2, r2, #2
 80079be:	4620      	mov	r0, r4
 80079c0:	f000 fb5a 	bl	8008078 <_calloc_r>
 80079c4:	b160      	cbz	r0, 80079e0 <_Balloc+0x64>
 80079c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80079ca:	e00e      	b.n	80079ea <_Balloc+0x6e>
 80079cc:	2221      	movs	r2, #33	; 0x21
 80079ce:	2104      	movs	r1, #4
 80079d0:	4620      	mov	r0, r4
 80079d2:	f000 fb51 	bl	8008078 <_calloc_r>
 80079d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079d8:	60f0      	str	r0, [r6, #12]
 80079da:	68db      	ldr	r3, [r3, #12]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d1e4      	bne.n	80079aa <_Balloc+0x2e>
 80079e0:	2000      	movs	r0, #0
 80079e2:	bd70      	pop	{r4, r5, r6, pc}
 80079e4:	6802      	ldr	r2, [r0, #0]
 80079e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80079ea:	2300      	movs	r3, #0
 80079ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80079f0:	e7f7      	b.n	80079e2 <_Balloc+0x66>
 80079f2:	bf00      	nop
 80079f4:	08008831 	.word	0x08008831
 80079f8:	08008918 	.word	0x08008918

080079fc <_Bfree>:
 80079fc:	b570      	push	{r4, r5, r6, lr}
 80079fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007a00:	4605      	mov	r5, r0
 8007a02:	460c      	mov	r4, r1
 8007a04:	b976      	cbnz	r6, 8007a24 <_Bfree+0x28>
 8007a06:	2010      	movs	r0, #16
 8007a08:	f7ff ffa2 	bl	8007950 <malloc>
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	6268      	str	r0, [r5, #36]	; 0x24
 8007a10:	b920      	cbnz	r0, 8007a1c <_Bfree+0x20>
 8007a12:	4b09      	ldr	r3, [pc, #36]	; (8007a38 <_Bfree+0x3c>)
 8007a14:	4809      	ldr	r0, [pc, #36]	; (8007a3c <_Bfree+0x40>)
 8007a16:	218a      	movs	r1, #138	; 0x8a
 8007a18:	f000 fda8 	bl	800856c <__assert_func>
 8007a1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a20:	6006      	str	r6, [r0, #0]
 8007a22:	60c6      	str	r6, [r0, #12]
 8007a24:	b13c      	cbz	r4, 8007a36 <_Bfree+0x3a>
 8007a26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007a28:	6862      	ldr	r2, [r4, #4]
 8007a2a:	68db      	ldr	r3, [r3, #12]
 8007a2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007a30:	6021      	str	r1, [r4, #0]
 8007a32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007a36:	bd70      	pop	{r4, r5, r6, pc}
 8007a38:	08008831 	.word	0x08008831
 8007a3c:	08008918 	.word	0x08008918

08007a40 <__multadd>:
 8007a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a44:	690e      	ldr	r6, [r1, #16]
 8007a46:	4607      	mov	r7, r0
 8007a48:	4698      	mov	r8, r3
 8007a4a:	460c      	mov	r4, r1
 8007a4c:	f101 0014 	add.w	r0, r1, #20
 8007a50:	2300      	movs	r3, #0
 8007a52:	6805      	ldr	r5, [r0, #0]
 8007a54:	b2a9      	uxth	r1, r5
 8007a56:	fb02 8101 	mla	r1, r2, r1, r8
 8007a5a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007a5e:	0c2d      	lsrs	r5, r5, #16
 8007a60:	fb02 c505 	mla	r5, r2, r5, ip
 8007a64:	b289      	uxth	r1, r1
 8007a66:	3301      	adds	r3, #1
 8007a68:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007a6c:	429e      	cmp	r6, r3
 8007a6e:	f840 1b04 	str.w	r1, [r0], #4
 8007a72:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007a76:	dcec      	bgt.n	8007a52 <__multadd+0x12>
 8007a78:	f1b8 0f00 	cmp.w	r8, #0
 8007a7c:	d022      	beq.n	8007ac4 <__multadd+0x84>
 8007a7e:	68a3      	ldr	r3, [r4, #8]
 8007a80:	42b3      	cmp	r3, r6
 8007a82:	dc19      	bgt.n	8007ab8 <__multadd+0x78>
 8007a84:	6861      	ldr	r1, [r4, #4]
 8007a86:	4638      	mov	r0, r7
 8007a88:	3101      	adds	r1, #1
 8007a8a:	f7ff ff77 	bl	800797c <_Balloc>
 8007a8e:	4605      	mov	r5, r0
 8007a90:	b928      	cbnz	r0, 8007a9e <__multadd+0x5e>
 8007a92:	4602      	mov	r2, r0
 8007a94:	4b0d      	ldr	r3, [pc, #52]	; (8007acc <__multadd+0x8c>)
 8007a96:	480e      	ldr	r0, [pc, #56]	; (8007ad0 <__multadd+0x90>)
 8007a98:	21b5      	movs	r1, #181	; 0xb5
 8007a9a:	f000 fd67 	bl	800856c <__assert_func>
 8007a9e:	6922      	ldr	r2, [r4, #16]
 8007aa0:	3202      	adds	r2, #2
 8007aa2:	f104 010c 	add.w	r1, r4, #12
 8007aa6:	0092      	lsls	r2, r2, #2
 8007aa8:	300c      	adds	r0, #12
 8007aaa:	f7ff ff59 	bl	8007960 <memcpy>
 8007aae:	4621      	mov	r1, r4
 8007ab0:	4638      	mov	r0, r7
 8007ab2:	f7ff ffa3 	bl	80079fc <_Bfree>
 8007ab6:	462c      	mov	r4, r5
 8007ab8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007abc:	3601      	adds	r6, #1
 8007abe:	f8c3 8014 	str.w	r8, [r3, #20]
 8007ac2:	6126      	str	r6, [r4, #16]
 8007ac4:	4620      	mov	r0, r4
 8007ac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007aca:	bf00      	nop
 8007acc:	080088a7 	.word	0x080088a7
 8007ad0:	08008918 	.word	0x08008918

08007ad4 <__hi0bits>:
 8007ad4:	0c03      	lsrs	r3, r0, #16
 8007ad6:	041b      	lsls	r3, r3, #16
 8007ad8:	b9d3      	cbnz	r3, 8007b10 <__hi0bits+0x3c>
 8007ada:	0400      	lsls	r0, r0, #16
 8007adc:	2310      	movs	r3, #16
 8007ade:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007ae2:	bf04      	itt	eq
 8007ae4:	0200      	lsleq	r0, r0, #8
 8007ae6:	3308      	addeq	r3, #8
 8007ae8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007aec:	bf04      	itt	eq
 8007aee:	0100      	lsleq	r0, r0, #4
 8007af0:	3304      	addeq	r3, #4
 8007af2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007af6:	bf04      	itt	eq
 8007af8:	0080      	lsleq	r0, r0, #2
 8007afa:	3302      	addeq	r3, #2
 8007afc:	2800      	cmp	r0, #0
 8007afe:	db05      	blt.n	8007b0c <__hi0bits+0x38>
 8007b00:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007b04:	f103 0301 	add.w	r3, r3, #1
 8007b08:	bf08      	it	eq
 8007b0a:	2320      	moveq	r3, #32
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	4770      	bx	lr
 8007b10:	2300      	movs	r3, #0
 8007b12:	e7e4      	b.n	8007ade <__hi0bits+0xa>

08007b14 <__lo0bits>:
 8007b14:	6803      	ldr	r3, [r0, #0]
 8007b16:	f013 0207 	ands.w	r2, r3, #7
 8007b1a:	4601      	mov	r1, r0
 8007b1c:	d00b      	beq.n	8007b36 <__lo0bits+0x22>
 8007b1e:	07da      	lsls	r2, r3, #31
 8007b20:	d424      	bmi.n	8007b6c <__lo0bits+0x58>
 8007b22:	0798      	lsls	r0, r3, #30
 8007b24:	bf49      	itett	mi
 8007b26:	085b      	lsrmi	r3, r3, #1
 8007b28:	089b      	lsrpl	r3, r3, #2
 8007b2a:	2001      	movmi	r0, #1
 8007b2c:	600b      	strmi	r3, [r1, #0]
 8007b2e:	bf5c      	itt	pl
 8007b30:	600b      	strpl	r3, [r1, #0]
 8007b32:	2002      	movpl	r0, #2
 8007b34:	4770      	bx	lr
 8007b36:	b298      	uxth	r0, r3
 8007b38:	b9b0      	cbnz	r0, 8007b68 <__lo0bits+0x54>
 8007b3a:	0c1b      	lsrs	r3, r3, #16
 8007b3c:	2010      	movs	r0, #16
 8007b3e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007b42:	bf04      	itt	eq
 8007b44:	0a1b      	lsreq	r3, r3, #8
 8007b46:	3008      	addeq	r0, #8
 8007b48:	071a      	lsls	r2, r3, #28
 8007b4a:	bf04      	itt	eq
 8007b4c:	091b      	lsreq	r3, r3, #4
 8007b4e:	3004      	addeq	r0, #4
 8007b50:	079a      	lsls	r2, r3, #30
 8007b52:	bf04      	itt	eq
 8007b54:	089b      	lsreq	r3, r3, #2
 8007b56:	3002      	addeq	r0, #2
 8007b58:	07da      	lsls	r2, r3, #31
 8007b5a:	d403      	bmi.n	8007b64 <__lo0bits+0x50>
 8007b5c:	085b      	lsrs	r3, r3, #1
 8007b5e:	f100 0001 	add.w	r0, r0, #1
 8007b62:	d005      	beq.n	8007b70 <__lo0bits+0x5c>
 8007b64:	600b      	str	r3, [r1, #0]
 8007b66:	4770      	bx	lr
 8007b68:	4610      	mov	r0, r2
 8007b6a:	e7e8      	b.n	8007b3e <__lo0bits+0x2a>
 8007b6c:	2000      	movs	r0, #0
 8007b6e:	4770      	bx	lr
 8007b70:	2020      	movs	r0, #32
 8007b72:	4770      	bx	lr

08007b74 <__i2b>:
 8007b74:	b510      	push	{r4, lr}
 8007b76:	460c      	mov	r4, r1
 8007b78:	2101      	movs	r1, #1
 8007b7a:	f7ff feff 	bl	800797c <_Balloc>
 8007b7e:	4602      	mov	r2, r0
 8007b80:	b928      	cbnz	r0, 8007b8e <__i2b+0x1a>
 8007b82:	4b05      	ldr	r3, [pc, #20]	; (8007b98 <__i2b+0x24>)
 8007b84:	4805      	ldr	r0, [pc, #20]	; (8007b9c <__i2b+0x28>)
 8007b86:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007b8a:	f000 fcef 	bl	800856c <__assert_func>
 8007b8e:	2301      	movs	r3, #1
 8007b90:	6144      	str	r4, [r0, #20]
 8007b92:	6103      	str	r3, [r0, #16]
 8007b94:	bd10      	pop	{r4, pc}
 8007b96:	bf00      	nop
 8007b98:	080088a7 	.word	0x080088a7
 8007b9c:	08008918 	.word	0x08008918

08007ba0 <__multiply>:
 8007ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ba4:	4614      	mov	r4, r2
 8007ba6:	690a      	ldr	r2, [r1, #16]
 8007ba8:	6923      	ldr	r3, [r4, #16]
 8007baa:	429a      	cmp	r2, r3
 8007bac:	bfb8      	it	lt
 8007bae:	460b      	movlt	r3, r1
 8007bb0:	460d      	mov	r5, r1
 8007bb2:	bfbc      	itt	lt
 8007bb4:	4625      	movlt	r5, r4
 8007bb6:	461c      	movlt	r4, r3
 8007bb8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007bbc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007bc0:	68ab      	ldr	r3, [r5, #8]
 8007bc2:	6869      	ldr	r1, [r5, #4]
 8007bc4:	eb0a 0709 	add.w	r7, sl, r9
 8007bc8:	42bb      	cmp	r3, r7
 8007bca:	b085      	sub	sp, #20
 8007bcc:	bfb8      	it	lt
 8007bce:	3101      	addlt	r1, #1
 8007bd0:	f7ff fed4 	bl	800797c <_Balloc>
 8007bd4:	b930      	cbnz	r0, 8007be4 <__multiply+0x44>
 8007bd6:	4602      	mov	r2, r0
 8007bd8:	4b42      	ldr	r3, [pc, #264]	; (8007ce4 <__multiply+0x144>)
 8007bda:	4843      	ldr	r0, [pc, #268]	; (8007ce8 <__multiply+0x148>)
 8007bdc:	f240 115d 	movw	r1, #349	; 0x15d
 8007be0:	f000 fcc4 	bl	800856c <__assert_func>
 8007be4:	f100 0614 	add.w	r6, r0, #20
 8007be8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007bec:	4633      	mov	r3, r6
 8007bee:	2200      	movs	r2, #0
 8007bf0:	4543      	cmp	r3, r8
 8007bf2:	d31e      	bcc.n	8007c32 <__multiply+0x92>
 8007bf4:	f105 0c14 	add.w	ip, r5, #20
 8007bf8:	f104 0314 	add.w	r3, r4, #20
 8007bfc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007c00:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007c04:	9202      	str	r2, [sp, #8]
 8007c06:	ebac 0205 	sub.w	r2, ip, r5
 8007c0a:	3a15      	subs	r2, #21
 8007c0c:	f022 0203 	bic.w	r2, r2, #3
 8007c10:	3204      	adds	r2, #4
 8007c12:	f105 0115 	add.w	r1, r5, #21
 8007c16:	458c      	cmp	ip, r1
 8007c18:	bf38      	it	cc
 8007c1a:	2204      	movcc	r2, #4
 8007c1c:	9201      	str	r2, [sp, #4]
 8007c1e:	9a02      	ldr	r2, [sp, #8]
 8007c20:	9303      	str	r3, [sp, #12]
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d808      	bhi.n	8007c38 <__multiply+0x98>
 8007c26:	2f00      	cmp	r7, #0
 8007c28:	dc55      	bgt.n	8007cd6 <__multiply+0x136>
 8007c2a:	6107      	str	r7, [r0, #16]
 8007c2c:	b005      	add	sp, #20
 8007c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c32:	f843 2b04 	str.w	r2, [r3], #4
 8007c36:	e7db      	b.n	8007bf0 <__multiply+0x50>
 8007c38:	f8b3 a000 	ldrh.w	sl, [r3]
 8007c3c:	f1ba 0f00 	cmp.w	sl, #0
 8007c40:	d020      	beq.n	8007c84 <__multiply+0xe4>
 8007c42:	f105 0e14 	add.w	lr, r5, #20
 8007c46:	46b1      	mov	r9, r6
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007c4e:	f8d9 b000 	ldr.w	fp, [r9]
 8007c52:	b2a1      	uxth	r1, r4
 8007c54:	fa1f fb8b 	uxth.w	fp, fp
 8007c58:	fb0a b101 	mla	r1, sl, r1, fp
 8007c5c:	4411      	add	r1, r2
 8007c5e:	f8d9 2000 	ldr.w	r2, [r9]
 8007c62:	0c24      	lsrs	r4, r4, #16
 8007c64:	0c12      	lsrs	r2, r2, #16
 8007c66:	fb0a 2404 	mla	r4, sl, r4, r2
 8007c6a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007c6e:	b289      	uxth	r1, r1
 8007c70:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007c74:	45f4      	cmp	ip, lr
 8007c76:	f849 1b04 	str.w	r1, [r9], #4
 8007c7a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007c7e:	d8e4      	bhi.n	8007c4a <__multiply+0xaa>
 8007c80:	9901      	ldr	r1, [sp, #4]
 8007c82:	5072      	str	r2, [r6, r1]
 8007c84:	9a03      	ldr	r2, [sp, #12]
 8007c86:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007c8a:	3304      	adds	r3, #4
 8007c8c:	f1b9 0f00 	cmp.w	r9, #0
 8007c90:	d01f      	beq.n	8007cd2 <__multiply+0x132>
 8007c92:	6834      	ldr	r4, [r6, #0]
 8007c94:	f105 0114 	add.w	r1, r5, #20
 8007c98:	46b6      	mov	lr, r6
 8007c9a:	f04f 0a00 	mov.w	sl, #0
 8007c9e:	880a      	ldrh	r2, [r1, #0]
 8007ca0:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007ca4:	fb09 b202 	mla	r2, r9, r2, fp
 8007ca8:	4492      	add	sl, r2
 8007caa:	b2a4      	uxth	r4, r4
 8007cac:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007cb0:	f84e 4b04 	str.w	r4, [lr], #4
 8007cb4:	f851 4b04 	ldr.w	r4, [r1], #4
 8007cb8:	f8be 2000 	ldrh.w	r2, [lr]
 8007cbc:	0c24      	lsrs	r4, r4, #16
 8007cbe:	fb09 2404 	mla	r4, r9, r4, r2
 8007cc2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007cc6:	458c      	cmp	ip, r1
 8007cc8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007ccc:	d8e7      	bhi.n	8007c9e <__multiply+0xfe>
 8007cce:	9a01      	ldr	r2, [sp, #4]
 8007cd0:	50b4      	str	r4, [r6, r2]
 8007cd2:	3604      	adds	r6, #4
 8007cd4:	e7a3      	b.n	8007c1e <__multiply+0x7e>
 8007cd6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d1a5      	bne.n	8007c2a <__multiply+0x8a>
 8007cde:	3f01      	subs	r7, #1
 8007ce0:	e7a1      	b.n	8007c26 <__multiply+0x86>
 8007ce2:	bf00      	nop
 8007ce4:	080088a7 	.word	0x080088a7
 8007ce8:	08008918 	.word	0x08008918

08007cec <__pow5mult>:
 8007cec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cf0:	4615      	mov	r5, r2
 8007cf2:	f012 0203 	ands.w	r2, r2, #3
 8007cf6:	4606      	mov	r6, r0
 8007cf8:	460f      	mov	r7, r1
 8007cfa:	d007      	beq.n	8007d0c <__pow5mult+0x20>
 8007cfc:	4c25      	ldr	r4, [pc, #148]	; (8007d94 <__pow5mult+0xa8>)
 8007cfe:	3a01      	subs	r2, #1
 8007d00:	2300      	movs	r3, #0
 8007d02:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007d06:	f7ff fe9b 	bl	8007a40 <__multadd>
 8007d0a:	4607      	mov	r7, r0
 8007d0c:	10ad      	asrs	r5, r5, #2
 8007d0e:	d03d      	beq.n	8007d8c <__pow5mult+0xa0>
 8007d10:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007d12:	b97c      	cbnz	r4, 8007d34 <__pow5mult+0x48>
 8007d14:	2010      	movs	r0, #16
 8007d16:	f7ff fe1b 	bl	8007950 <malloc>
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	6270      	str	r0, [r6, #36]	; 0x24
 8007d1e:	b928      	cbnz	r0, 8007d2c <__pow5mult+0x40>
 8007d20:	4b1d      	ldr	r3, [pc, #116]	; (8007d98 <__pow5mult+0xac>)
 8007d22:	481e      	ldr	r0, [pc, #120]	; (8007d9c <__pow5mult+0xb0>)
 8007d24:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007d28:	f000 fc20 	bl	800856c <__assert_func>
 8007d2c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007d30:	6004      	str	r4, [r0, #0]
 8007d32:	60c4      	str	r4, [r0, #12]
 8007d34:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007d38:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007d3c:	b94c      	cbnz	r4, 8007d52 <__pow5mult+0x66>
 8007d3e:	f240 2171 	movw	r1, #625	; 0x271
 8007d42:	4630      	mov	r0, r6
 8007d44:	f7ff ff16 	bl	8007b74 <__i2b>
 8007d48:	2300      	movs	r3, #0
 8007d4a:	f8c8 0008 	str.w	r0, [r8, #8]
 8007d4e:	4604      	mov	r4, r0
 8007d50:	6003      	str	r3, [r0, #0]
 8007d52:	f04f 0900 	mov.w	r9, #0
 8007d56:	07eb      	lsls	r3, r5, #31
 8007d58:	d50a      	bpl.n	8007d70 <__pow5mult+0x84>
 8007d5a:	4639      	mov	r1, r7
 8007d5c:	4622      	mov	r2, r4
 8007d5e:	4630      	mov	r0, r6
 8007d60:	f7ff ff1e 	bl	8007ba0 <__multiply>
 8007d64:	4639      	mov	r1, r7
 8007d66:	4680      	mov	r8, r0
 8007d68:	4630      	mov	r0, r6
 8007d6a:	f7ff fe47 	bl	80079fc <_Bfree>
 8007d6e:	4647      	mov	r7, r8
 8007d70:	106d      	asrs	r5, r5, #1
 8007d72:	d00b      	beq.n	8007d8c <__pow5mult+0xa0>
 8007d74:	6820      	ldr	r0, [r4, #0]
 8007d76:	b938      	cbnz	r0, 8007d88 <__pow5mult+0x9c>
 8007d78:	4622      	mov	r2, r4
 8007d7a:	4621      	mov	r1, r4
 8007d7c:	4630      	mov	r0, r6
 8007d7e:	f7ff ff0f 	bl	8007ba0 <__multiply>
 8007d82:	6020      	str	r0, [r4, #0]
 8007d84:	f8c0 9000 	str.w	r9, [r0]
 8007d88:	4604      	mov	r4, r0
 8007d8a:	e7e4      	b.n	8007d56 <__pow5mult+0x6a>
 8007d8c:	4638      	mov	r0, r7
 8007d8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d92:	bf00      	nop
 8007d94:	08008a68 	.word	0x08008a68
 8007d98:	08008831 	.word	0x08008831
 8007d9c:	08008918 	.word	0x08008918

08007da0 <__lshift>:
 8007da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007da4:	460c      	mov	r4, r1
 8007da6:	6849      	ldr	r1, [r1, #4]
 8007da8:	6923      	ldr	r3, [r4, #16]
 8007daa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007dae:	68a3      	ldr	r3, [r4, #8]
 8007db0:	4607      	mov	r7, r0
 8007db2:	4691      	mov	r9, r2
 8007db4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007db8:	f108 0601 	add.w	r6, r8, #1
 8007dbc:	42b3      	cmp	r3, r6
 8007dbe:	db0b      	blt.n	8007dd8 <__lshift+0x38>
 8007dc0:	4638      	mov	r0, r7
 8007dc2:	f7ff fddb 	bl	800797c <_Balloc>
 8007dc6:	4605      	mov	r5, r0
 8007dc8:	b948      	cbnz	r0, 8007dde <__lshift+0x3e>
 8007dca:	4602      	mov	r2, r0
 8007dcc:	4b28      	ldr	r3, [pc, #160]	; (8007e70 <__lshift+0xd0>)
 8007dce:	4829      	ldr	r0, [pc, #164]	; (8007e74 <__lshift+0xd4>)
 8007dd0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007dd4:	f000 fbca 	bl	800856c <__assert_func>
 8007dd8:	3101      	adds	r1, #1
 8007dda:	005b      	lsls	r3, r3, #1
 8007ddc:	e7ee      	b.n	8007dbc <__lshift+0x1c>
 8007dde:	2300      	movs	r3, #0
 8007de0:	f100 0114 	add.w	r1, r0, #20
 8007de4:	f100 0210 	add.w	r2, r0, #16
 8007de8:	4618      	mov	r0, r3
 8007dea:	4553      	cmp	r3, sl
 8007dec:	db33      	blt.n	8007e56 <__lshift+0xb6>
 8007dee:	6920      	ldr	r0, [r4, #16]
 8007df0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007df4:	f104 0314 	add.w	r3, r4, #20
 8007df8:	f019 091f 	ands.w	r9, r9, #31
 8007dfc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007e00:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007e04:	d02b      	beq.n	8007e5e <__lshift+0xbe>
 8007e06:	f1c9 0e20 	rsb	lr, r9, #32
 8007e0a:	468a      	mov	sl, r1
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	6818      	ldr	r0, [r3, #0]
 8007e10:	fa00 f009 	lsl.w	r0, r0, r9
 8007e14:	4302      	orrs	r2, r0
 8007e16:	f84a 2b04 	str.w	r2, [sl], #4
 8007e1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e1e:	459c      	cmp	ip, r3
 8007e20:	fa22 f20e 	lsr.w	r2, r2, lr
 8007e24:	d8f3      	bhi.n	8007e0e <__lshift+0x6e>
 8007e26:	ebac 0304 	sub.w	r3, ip, r4
 8007e2a:	3b15      	subs	r3, #21
 8007e2c:	f023 0303 	bic.w	r3, r3, #3
 8007e30:	3304      	adds	r3, #4
 8007e32:	f104 0015 	add.w	r0, r4, #21
 8007e36:	4584      	cmp	ip, r0
 8007e38:	bf38      	it	cc
 8007e3a:	2304      	movcc	r3, #4
 8007e3c:	50ca      	str	r2, [r1, r3]
 8007e3e:	b10a      	cbz	r2, 8007e44 <__lshift+0xa4>
 8007e40:	f108 0602 	add.w	r6, r8, #2
 8007e44:	3e01      	subs	r6, #1
 8007e46:	4638      	mov	r0, r7
 8007e48:	612e      	str	r6, [r5, #16]
 8007e4a:	4621      	mov	r1, r4
 8007e4c:	f7ff fdd6 	bl	80079fc <_Bfree>
 8007e50:	4628      	mov	r0, r5
 8007e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e56:	f842 0f04 	str.w	r0, [r2, #4]!
 8007e5a:	3301      	adds	r3, #1
 8007e5c:	e7c5      	b.n	8007dea <__lshift+0x4a>
 8007e5e:	3904      	subs	r1, #4
 8007e60:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e64:	f841 2f04 	str.w	r2, [r1, #4]!
 8007e68:	459c      	cmp	ip, r3
 8007e6a:	d8f9      	bhi.n	8007e60 <__lshift+0xc0>
 8007e6c:	e7ea      	b.n	8007e44 <__lshift+0xa4>
 8007e6e:	bf00      	nop
 8007e70:	080088a7 	.word	0x080088a7
 8007e74:	08008918 	.word	0x08008918

08007e78 <__mcmp>:
 8007e78:	b530      	push	{r4, r5, lr}
 8007e7a:	6902      	ldr	r2, [r0, #16]
 8007e7c:	690c      	ldr	r4, [r1, #16]
 8007e7e:	1b12      	subs	r2, r2, r4
 8007e80:	d10e      	bne.n	8007ea0 <__mcmp+0x28>
 8007e82:	f100 0314 	add.w	r3, r0, #20
 8007e86:	3114      	adds	r1, #20
 8007e88:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007e8c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007e90:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007e94:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007e98:	42a5      	cmp	r5, r4
 8007e9a:	d003      	beq.n	8007ea4 <__mcmp+0x2c>
 8007e9c:	d305      	bcc.n	8007eaa <__mcmp+0x32>
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	4610      	mov	r0, r2
 8007ea2:	bd30      	pop	{r4, r5, pc}
 8007ea4:	4283      	cmp	r3, r0
 8007ea6:	d3f3      	bcc.n	8007e90 <__mcmp+0x18>
 8007ea8:	e7fa      	b.n	8007ea0 <__mcmp+0x28>
 8007eaa:	f04f 32ff 	mov.w	r2, #4294967295
 8007eae:	e7f7      	b.n	8007ea0 <__mcmp+0x28>

08007eb0 <__mdiff>:
 8007eb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eb4:	460c      	mov	r4, r1
 8007eb6:	4606      	mov	r6, r0
 8007eb8:	4611      	mov	r1, r2
 8007eba:	4620      	mov	r0, r4
 8007ebc:	4617      	mov	r7, r2
 8007ebe:	f7ff ffdb 	bl	8007e78 <__mcmp>
 8007ec2:	1e05      	subs	r5, r0, #0
 8007ec4:	d110      	bne.n	8007ee8 <__mdiff+0x38>
 8007ec6:	4629      	mov	r1, r5
 8007ec8:	4630      	mov	r0, r6
 8007eca:	f7ff fd57 	bl	800797c <_Balloc>
 8007ece:	b930      	cbnz	r0, 8007ede <__mdiff+0x2e>
 8007ed0:	4b39      	ldr	r3, [pc, #228]	; (8007fb8 <__mdiff+0x108>)
 8007ed2:	4602      	mov	r2, r0
 8007ed4:	f240 2132 	movw	r1, #562	; 0x232
 8007ed8:	4838      	ldr	r0, [pc, #224]	; (8007fbc <__mdiff+0x10c>)
 8007eda:	f000 fb47 	bl	800856c <__assert_func>
 8007ede:	2301      	movs	r3, #1
 8007ee0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007ee4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ee8:	bfa4      	itt	ge
 8007eea:	463b      	movge	r3, r7
 8007eec:	4627      	movge	r7, r4
 8007eee:	4630      	mov	r0, r6
 8007ef0:	6879      	ldr	r1, [r7, #4]
 8007ef2:	bfa6      	itte	ge
 8007ef4:	461c      	movge	r4, r3
 8007ef6:	2500      	movge	r5, #0
 8007ef8:	2501      	movlt	r5, #1
 8007efa:	f7ff fd3f 	bl	800797c <_Balloc>
 8007efe:	b920      	cbnz	r0, 8007f0a <__mdiff+0x5a>
 8007f00:	4b2d      	ldr	r3, [pc, #180]	; (8007fb8 <__mdiff+0x108>)
 8007f02:	4602      	mov	r2, r0
 8007f04:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007f08:	e7e6      	b.n	8007ed8 <__mdiff+0x28>
 8007f0a:	693e      	ldr	r6, [r7, #16]
 8007f0c:	60c5      	str	r5, [r0, #12]
 8007f0e:	6925      	ldr	r5, [r4, #16]
 8007f10:	f107 0114 	add.w	r1, r7, #20
 8007f14:	f104 0914 	add.w	r9, r4, #20
 8007f18:	f100 0e14 	add.w	lr, r0, #20
 8007f1c:	f107 0210 	add.w	r2, r7, #16
 8007f20:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007f24:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007f28:	46f2      	mov	sl, lr
 8007f2a:	2700      	movs	r7, #0
 8007f2c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007f30:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007f34:	fa1f f883 	uxth.w	r8, r3
 8007f38:	fa17 f78b 	uxtah	r7, r7, fp
 8007f3c:	0c1b      	lsrs	r3, r3, #16
 8007f3e:	eba7 0808 	sub.w	r8, r7, r8
 8007f42:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007f46:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007f4a:	fa1f f888 	uxth.w	r8, r8
 8007f4e:	141f      	asrs	r7, r3, #16
 8007f50:	454d      	cmp	r5, r9
 8007f52:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007f56:	f84a 3b04 	str.w	r3, [sl], #4
 8007f5a:	d8e7      	bhi.n	8007f2c <__mdiff+0x7c>
 8007f5c:	1b2b      	subs	r3, r5, r4
 8007f5e:	3b15      	subs	r3, #21
 8007f60:	f023 0303 	bic.w	r3, r3, #3
 8007f64:	3304      	adds	r3, #4
 8007f66:	3415      	adds	r4, #21
 8007f68:	42a5      	cmp	r5, r4
 8007f6a:	bf38      	it	cc
 8007f6c:	2304      	movcc	r3, #4
 8007f6e:	4419      	add	r1, r3
 8007f70:	4473      	add	r3, lr
 8007f72:	469e      	mov	lr, r3
 8007f74:	460d      	mov	r5, r1
 8007f76:	4565      	cmp	r5, ip
 8007f78:	d30e      	bcc.n	8007f98 <__mdiff+0xe8>
 8007f7a:	f10c 0203 	add.w	r2, ip, #3
 8007f7e:	1a52      	subs	r2, r2, r1
 8007f80:	f022 0203 	bic.w	r2, r2, #3
 8007f84:	3903      	subs	r1, #3
 8007f86:	458c      	cmp	ip, r1
 8007f88:	bf38      	it	cc
 8007f8a:	2200      	movcc	r2, #0
 8007f8c:	441a      	add	r2, r3
 8007f8e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007f92:	b17b      	cbz	r3, 8007fb4 <__mdiff+0x104>
 8007f94:	6106      	str	r6, [r0, #16]
 8007f96:	e7a5      	b.n	8007ee4 <__mdiff+0x34>
 8007f98:	f855 8b04 	ldr.w	r8, [r5], #4
 8007f9c:	fa17 f488 	uxtah	r4, r7, r8
 8007fa0:	1422      	asrs	r2, r4, #16
 8007fa2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8007fa6:	b2a4      	uxth	r4, r4
 8007fa8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007fac:	f84e 4b04 	str.w	r4, [lr], #4
 8007fb0:	1417      	asrs	r7, r2, #16
 8007fb2:	e7e0      	b.n	8007f76 <__mdiff+0xc6>
 8007fb4:	3e01      	subs	r6, #1
 8007fb6:	e7ea      	b.n	8007f8e <__mdiff+0xde>
 8007fb8:	080088a7 	.word	0x080088a7
 8007fbc:	08008918 	.word	0x08008918

08007fc0 <__d2b>:
 8007fc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007fc4:	4689      	mov	r9, r1
 8007fc6:	2101      	movs	r1, #1
 8007fc8:	ec57 6b10 	vmov	r6, r7, d0
 8007fcc:	4690      	mov	r8, r2
 8007fce:	f7ff fcd5 	bl	800797c <_Balloc>
 8007fd2:	4604      	mov	r4, r0
 8007fd4:	b930      	cbnz	r0, 8007fe4 <__d2b+0x24>
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	4b25      	ldr	r3, [pc, #148]	; (8008070 <__d2b+0xb0>)
 8007fda:	4826      	ldr	r0, [pc, #152]	; (8008074 <__d2b+0xb4>)
 8007fdc:	f240 310a 	movw	r1, #778	; 0x30a
 8007fe0:	f000 fac4 	bl	800856c <__assert_func>
 8007fe4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007fe8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007fec:	bb35      	cbnz	r5, 800803c <__d2b+0x7c>
 8007fee:	2e00      	cmp	r6, #0
 8007ff0:	9301      	str	r3, [sp, #4]
 8007ff2:	d028      	beq.n	8008046 <__d2b+0x86>
 8007ff4:	4668      	mov	r0, sp
 8007ff6:	9600      	str	r6, [sp, #0]
 8007ff8:	f7ff fd8c 	bl	8007b14 <__lo0bits>
 8007ffc:	9900      	ldr	r1, [sp, #0]
 8007ffe:	b300      	cbz	r0, 8008042 <__d2b+0x82>
 8008000:	9a01      	ldr	r2, [sp, #4]
 8008002:	f1c0 0320 	rsb	r3, r0, #32
 8008006:	fa02 f303 	lsl.w	r3, r2, r3
 800800a:	430b      	orrs	r3, r1
 800800c:	40c2      	lsrs	r2, r0
 800800e:	6163      	str	r3, [r4, #20]
 8008010:	9201      	str	r2, [sp, #4]
 8008012:	9b01      	ldr	r3, [sp, #4]
 8008014:	61a3      	str	r3, [r4, #24]
 8008016:	2b00      	cmp	r3, #0
 8008018:	bf14      	ite	ne
 800801a:	2202      	movne	r2, #2
 800801c:	2201      	moveq	r2, #1
 800801e:	6122      	str	r2, [r4, #16]
 8008020:	b1d5      	cbz	r5, 8008058 <__d2b+0x98>
 8008022:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008026:	4405      	add	r5, r0
 8008028:	f8c9 5000 	str.w	r5, [r9]
 800802c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008030:	f8c8 0000 	str.w	r0, [r8]
 8008034:	4620      	mov	r0, r4
 8008036:	b003      	add	sp, #12
 8008038:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800803c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008040:	e7d5      	b.n	8007fee <__d2b+0x2e>
 8008042:	6161      	str	r1, [r4, #20]
 8008044:	e7e5      	b.n	8008012 <__d2b+0x52>
 8008046:	a801      	add	r0, sp, #4
 8008048:	f7ff fd64 	bl	8007b14 <__lo0bits>
 800804c:	9b01      	ldr	r3, [sp, #4]
 800804e:	6163      	str	r3, [r4, #20]
 8008050:	2201      	movs	r2, #1
 8008052:	6122      	str	r2, [r4, #16]
 8008054:	3020      	adds	r0, #32
 8008056:	e7e3      	b.n	8008020 <__d2b+0x60>
 8008058:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800805c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008060:	f8c9 0000 	str.w	r0, [r9]
 8008064:	6918      	ldr	r0, [r3, #16]
 8008066:	f7ff fd35 	bl	8007ad4 <__hi0bits>
 800806a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800806e:	e7df      	b.n	8008030 <__d2b+0x70>
 8008070:	080088a7 	.word	0x080088a7
 8008074:	08008918 	.word	0x08008918

08008078 <_calloc_r>:
 8008078:	b513      	push	{r0, r1, r4, lr}
 800807a:	434a      	muls	r2, r1
 800807c:	4611      	mov	r1, r2
 800807e:	9201      	str	r2, [sp, #4]
 8008080:	f000 f85a 	bl	8008138 <_malloc_r>
 8008084:	4604      	mov	r4, r0
 8008086:	b118      	cbz	r0, 8008090 <_calloc_r+0x18>
 8008088:	9a01      	ldr	r2, [sp, #4]
 800808a:	2100      	movs	r1, #0
 800808c:	f7fd fe04 	bl	8005c98 <memset>
 8008090:	4620      	mov	r0, r4
 8008092:	b002      	add	sp, #8
 8008094:	bd10      	pop	{r4, pc}
	...

08008098 <_free_r>:
 8008098:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800809a:	2900      	cmp	r1, #0
 800809c:	d048      	beq.n	8008130 <_free_r+0x98>
 800809e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080a2:	9001      	str	r0, [sp, #4]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	f1a1 0404 	sub.w	r4, r1, #4
 80080aa:	bfb8      	it	lt
 80080ac:	18e4      	addlt	r4, r4, r3
 80080ae:	f000 fae3 	bl	8008678 <__malloc_lock>
 80080b2:	4a20      	ldr	r2, [pc, #128]	; (8008134 <_free_r+0x9c>)
 80080b4:	9801      	ldr	r0, [sp, #4]
 80080b6:	6813      	ldr	r3, [r2, #0]
 80080b8:	4615      	mov	r5, r2
 80080ba:	b933      	cbnz	r3, 80080ca <_free_r+0x32>
 80080bc:	6063      	str	r3, [r4, #4]
 80080be:	6014      	str	r4, [r2, #0]
 80080c0:	b003      	add	sp, #12
 80080c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80080c6:	f000 badd 	b.w	8008684 <__malloc_unlock>
 80080ca:	42a3      	cmp	r3, r4
 80080cc:	d90b      	bls.n	80080e6 <_free_r+0x4e>
 80080ce:	6821      	ldr	r1, [r4, #0]
 80080d0:	1862      	adds	r2, r4, r1
 80080d2:	4293      	cmp	r3, r2
 80080d4:	bf04      	itt	eq
 80080d6:	681a      	ldreq	r2, [r3, #0]
 80080d8:	685b      	ldreq	r3, [r3, #4]
 80080da:	6063      	str	r3, [r4, #4]
 80080dc:	bf04      	itt	eq
 80080de:	1852      	addeq	r2, r2, r1
 80080e0:	6022      	streq	r2, [r4, #0]
 80080e2:	602c      	str	r4, [r5, #0]
 80080e4:	e7ec      	b.n	80080c0 <_free_r+0x28>
 80080e6:	461a      	mov	r2, r3
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	b10b      	cbz	r3, 80080f0 <_free_r+0x58>
 80080ec:	42a3      	cmp	r3, r4
 80080ee:	d9fa      	bls.n	80080e6 <_free_r+0x4e>
 80080f0:	6811      	ldr	r1, [r2, #0]
 80080f2:	1855      	adds	r5, r2, r1
 80080f4:	42a5      	cmp	r5, r4
 80080f6:	d10b      	bne.n	8008110 <_free_r+0x78>
 80080f8:	6824      	ldr	r4, [r4, #0]
 80080fa:	4421      	add	r1, r4
 80080fc:	1854      	adds	r4, r2, r1
 80080fe:	42a3      	cmp	r3, r4
 8008100:	6011      	str	r1, [r2, #0]
 8008102:	d1dd      	bne.n	80080c0 <_free_r+0x28>
 8008104:	681c      	ldr	r4, [r3, #0]
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	6053      	str	r3, [r2, #4]
 800810a:	4421      	add	r1, r4
 800810c:	6011      	str	r1, [r2, #0]
 800810e:	e7d7      	b.n	80080c0 <_free_r+0x28>
 8008110:	d902      	bls.n	8008118 <_free_r+0x80>
 8008112:	230c      	movs	r3, #12
 8008114:	6003      	str	r3, [r0, #0]
 8008116:	e7d3      	b.n	80080c0 <_free_r+0x28>
 8008118:	6825      	ldr	r5, [r4, #0]
 800811a:	1961      	adds	r1, r4, r5
 800811c:	428b      	cmp	r3, r1
 800811e:	bf04      	itt	eq
 8008120:	6819      	ldreq	r1, [r3, #0]
 8008122:	685b      	ldreq	r3, [r3, #4]
 8008124:	6063      	str	r3, [r4, #4]
 8008126:	bf04      	itt	eq
 8008128:	1949      	addeq	r1, r1, r5
 800812a:	6021      	streq	r1, [r4, #0]
 800812c:	6054      	str	r4, [r2, #4]
 800812e:	e7c7      	b.n	80080c0 <_free_r+0x28>
 8008130:	b003      	add	sp, #12
 8008132:	bd30      	pop	{r4, r5, pc}
 8008134:	20000230 	.word	0x20000230

08008138 <_malloc_r>:
 8008138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800813a:	1ccd      	adds	r5, r1, #3
 800813c:	f025 0503 	bic.w	r5, r5, #3
 8008140:	3508      	adds	r5, #8
 8008142:	2d0c      	cmp	r5, #12
 8008144:	bf38      	it	cc
 8008146:	250c      	movcc	r5, #12
 8008148:	2d00      	cmp	r5, #0
 800814a:	4606      	mov	r6, r0
 800814c:	db01      	blt.n	8008152 <_malloc_r+0x1a>
 800814e:	42a9      	cmp	r1, r5
 8008150:	d903      	bls.n	800815a <_malloc_r+0x22>
 8008152:	230c      	movs	r3, #12
 8008154:	6033      	str	r3, [r6, #0]
 8008156:	2000      	movs	r0, #0
 8008158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800815a:	f000 fa8d 	bl	8008678 <__malloc_lock>
 800815e:	4921      	ldr	r1, [pc, #132]	; (80081e4 <_malloc_r+0xac>)
 8008160:	680a      	ldr	r2, [r1, #0]
 8008162:	4614      	mov	r4, r2
 8008164:	b99c      	cbnz	r4, 800818e <_malloc_r+0x56>
 8008166:	4f20      	ldr	r7, [pc, #128]	; (80081e8 <_malloc_r+0xb0>)
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	b923      	cbnz	r3, 8008176 <_malloc_r+0x3e>
 800816c:	4621      	mov	r1, r4
 800816e:	4630      	mov	r0, r6
 8008170:	f000 f996 	bl	80084a0 <_sbrk_r>
 8008174:	6038      	str	r0, [r7, #0]
 8008176:	4629      	mov	r1, r5
 8008178:	4630      	mov	r0, r6
 800817a:	f000 f991 	bl	80084a0 <_sbrk_r>
 800817e:	1c43      	adds	r3, r0, #1
 8008180:	d123      	bne.n	80081ca <_malloc_r+0x92>
 8008182:	230c      	movs	r3, #12
 8008184:	6033      	str	r3, [r6, #0]
 8008186:	4630      	mov	r0, r6
 8008188:	f000 fa7c 	bl	8008684 <__malloc_unlock>
 800818c:	e7e3      	b.n	8008156 <_malloc_r+0x1e>
 800818e:	6823      	ldr	r3, [r4, #0]
 8008190:	1b5b      	subs	r3, r3, r5
 8008192:	d417      	bmi.n	80081c4 <_malloc_r+0x8c>
 8008194:	2b0b      	cmp	r3, #11
 8008196:	d903      	bls.n	80081a0 <_malloc_r+0x68>
 8008198:	6023      	str	r3, [r4, #0]
 800819a:	441c      	add	r4, r3
 800819c:	6025      	str	r5, [r4, #0]
 800819e:	e004      	b.n	80081aa <_malloc_r+0x72>
 80081a0:	6863      	ldr	r3, [r4, #4]
 80081a2:	42a2      	cmp	r2, r4
 80081a4:	bf0c      	ite	eq
 80081a6:	600b      	streq	r3, [r1, #0]
 80081a8:	6053      	strne	r3, [r2, #4]
 80081aa:	4630      	mov	r0, r6
 80081ac:	f000 fa6a 	bl	8008684 <__malloc_unlock>
 80081b0:	f104 000b 	add.w	r0, r4, #11
 80081b4:	1d23      	adds	r3, r4, #4
 80081b6:	f020 0007 	bic.w	r0, r0, #7
 80081ba:	1ac2      	subs	r2, r0, r3
 80081bc:	d0cc      	beq.n	8008158 <_malloc_r+0x20>
 80081be:	1a1b      	subs	r3, r3, r0
 80081c0:	50a3      	str	r3, [r4, r2]
 80081c2:	e7c9      	b.n	8008158 <_malloc_r+0x20>
 80081c4:	4622      	mov	r2, r4
 80081c6:	6864      	ldr	r4, [r4, #4]
 80081c8:	e7cc      	b.n	8008164 <_malloc_r+0x2c>
 80081ca:	1cc4      	adds	r4, r0, #3
 80081cc:	f024 0403 	bic.w	r4, r4, #3
 80081d0:	42a0      	cmp	r0, r4
 80081d2:	d0e3      	beq.n	800819c <_malloc_r+0x64>
 80081d4:	1a21      	subs	r1, r4, r0
 80081d6:	4630      	mov	r0, r6
 80081d8:	f000 f962 	bl	80084a0 <_sbrk_r>
 80081dc:	3001      	adds	r0, #1
 80081de:	d1dd      	bne.n	800819c <_malloc_r+0x64>
 80081e0:	e7cf      	b.n	8008182 <_malloc_r+0x4a>
 80081e2:	bf00      	nop
 80081e4:	20000230 	.word	0x20000230
 80081e8:	20000234 	.word	0x20000234

080081ec <__sfputc_r>:
 80081ec:	6893      	ldr	r3, [r2, #8]
 80081ee:	3b01      	subs	r3, #1
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	b410      	push	{r4}
 80081f4:	6093      	str	r3, [r2, #8]
 80081f6:	da08      	bge.n	800820a <__sfputc_r+0x1e>
 80081f8:	6994      	ldr	r4, [r2, #24]
 80081fa:	42a3      	cmp	r3, r4
 80081fc:	db01      	blt.n	8008202 <__sfputc_r+0x16>
 80081fe:	290a      	cmp	r1, #10
 8008200:	d103      	bne.n	800820a <__sfputc_r+0x1e>
 8008202:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008206:	f7fe ba47 	b.w	8006698 <__swbuf_r>
 800820a:	6813      	ldr	r3, [r2, #0]
 800820c:	1c58      	adds	r0, r3, #1
 800820e:	6010      	str	r0, [r2, #0]
 8008210:	7019      	strb	r1, [r3, #0]
 8008212:	4608      	mov	r0, r1
 8008214:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008218:	4770      	bx	lr

0800821a <__sfputs_r>:
 800821a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800821c:	4606      	mov	r6, r0
 800821e:	460f      	mov	r7, r1
 8008220:	4614      	mov	r4, r2
 8008222:	18d5      	adds	r5, r2, r3
 8008224:	42ac      	cmp	r4, r5
 8008226:	d101      	bne.n	800822c <__sfputs_r+0x12>
 8008228:	2000      	movs	r0, #0
 800822a:	e007      	b.n	800823c <__sfputs_r+0x22>
 800822c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008230:	463a      	mov	r2, r7
 8008232:	4630      	mov	r0, r6
 8008234:	f7ff ffda 	bl	80081ec <__sfputc_r>
 8008238:	1c43      	adds	r3, r0, #1
 800823a:	d1f3      	bne.n	8008224 <__sfputs_r+0xa>
 800823c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008240 <_vfiprintf_r>:
 8008240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008244:	460d      	mov	r5, r1
 8008246:	b09d      	sub	sp, #116	; 0x74
 8008248:	4614      	mov	r4, r2
 800824a:	4698      	mov	r8, r3
 800824c:	4606      	mov	r6, r0
 800824e:	b118      	cbz	r0, 8008258 <_vfiprintf_r+0x18>
 8008250:	6983      	ldr	r3, [r0, #24]
 8008252:	b90b      	cbnz	r3, 8008258 <_vfiprintf_r+0x18>
 8008254:	f7ff fa72 	bl	800773c <__sinit>
 8008258:	4b89      	ldr	r3, [pc, #548]	; (8008480 <_vfiprintf_r+0x240>)
 800825a:	429d      	cmp	r5, r3
 800825c:	d11b      	bne.n	8008296 <_vfiprintf_r+0x56>
 800825e:	6875      	ldr	r5, [r6, #4]
 8008260:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008262:	07d9      	lsls	r1, r3, #31
 8008264:	d405      	bmi.n	8008272 <_vfiprintf_r+0x32>
 8008266:	89ab      	ldrh	r3, [r5, #12]
 8008268:	059a      	lsls	r2, r3, #22
 800826a:	d402      	bmi.n	8008272 <_vfiprintf_r+0x32>
 800826c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800826e:	f7ff fb08 	bl	8007882 <__retarget_lock_acquire_recursive>
 8008272:	89ab      	ldrh	r3, [r5, #12]
 8008274:	071b      	lsls	r3, r3, #28
 8008276:	d501      	bpl.n	800827c <_vfiprintf_r+0x3c>
 8008278:	692b      	ldr	r3, [r5, #16]
 800827a:	b9eb      	cbnz	r3, 80082b8 <_vfiprintf_r+0x78>
 800827c:	4629      	mov	r1, r5
 800827e:	4630      	mov	r0, r6
 8008280:	f7fe fa5c 	bl	800673c <__swsetup_r>
 8008284:	b1c0      	cbz	r0, 80082b8 <_vfiprintf_r+0x78>
 8008286:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008288:	07dc      	lsls	r4, r3, #31
 800828a:	d50e      	bpl.n	80082aa <_vfiprintf_r+0x6a>
 800828c:	f04f 30ff 	mov.w	r0, #4294967295
 8008290:	b01d      	add	sp, #116	; 0x74
 8008292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008296:	4b7b      	ldr	r3, [pc, #492]	; (8008484 <_vfiprintf_r+0x244>)
 8008298:	429d      	cmp	r5, r3
 800829a:	d101      	bne.n	80082a0 <_vfiprintf_r+0x60>
 800829c:	68b5      	ldr	r5, [r6, #8]
 800829e:	e7df      	b.n	8008260 <_vfiprintf_r+0x20>
 80082a0:	4b79      	ldr	r3, [pc, #484]	; (8008488 <_vfiprintf_r+0x248>)
 80082a2:	429d      	cmp	r5, r3
 80082a4:	bf08      	it	eq
 80082a6:	68f5      	ldreq	r5, [r6, #12]
 80082a8:	e7da      	b.n	8008260 <_vfiprintf_r+0x20>
 80082aa:	89ab      	ldrh	r3, [r5, #12]
 80082ac:	0598      	lsls	r0, r3, #22
 80082ae:	d4ed      	bmi.n	800828c <_vfiprintf_r+0x4c>
 80082b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082b2:	f7ff fae7 	bl	8007884 <__retarget_lock_release_recursive>
 80082b6:	e7e9      	b.n	800828c <_vfiprintf_r+0x4c>
 80082b8:	2300      	movs	r3, #0
 80082ba:	9309      	str	r3, [sp, #36]	; 0x24
 80082bc:	2320      	movs	r3, #32
 80082be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80082c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80082c6:	2330      	movs	r3, #48	; 0x30
 80082c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800848c <_vfiprintf_r+0x24c>
 80082cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80082d0:	f04f 0901 	mov.w	r9, #1
 80082d4:	4623      	mov	r3, r4
 80082d6:	469a      	mov	sl, r3
 80082d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082dc:	b10a      	cbz	r2, 80082e2 <_vfiprintf_r+0xa2>
 80082de:	2a25      	cmp	r2, #37	; 0x25
 80082e0:	d1f9      	bne.n	80082d6 <_vfiprintf_r+0x96>
 80082e2:	ebba 0b04 	subs.w	fp, sl, r4
 80082e6:	d00b      	beq.n	8008300 <_vfiprintf_r+0xc0>
 80082e8:	465b      	mov	r3, fp
 80082ea:	4622      	mov	r2, r4
 80082ec:	4629      	mov	r1, r5
 80082ee:	4630      	mov	r0, r6
 80082f0:	f7ff ff93 	bl	800821a <__sfputs_r>
 80082f4:	3001      	adds	r0, #1
 80082f6:	f000 80aa 	beq.w	800844e <_vfiprintf_r+0x20e>
 80082fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082fc:	445a      	add	r2, fp
 80082fe:	9209      	str	r2, [sp, #36]	; 0x24
 8008300:	f89a 3000 	ldrb.w	r3, [sl]
 8008304:	2b00      	cmp	r3, #0
 8008306:	f000 80a2 	beq.w	800844e <_vfiprintf_r+0x20e>
 800830a:	2300      	movs	r3, #0
 800830c:	f04f 32ff 	mov.w	r2, #4294967295
 8008310:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008314:	f10a 0a01 	add.w	sl, sl, #1
 8008318:	9304      	str	r3, [sp, #16]
 800831a:	9307      	str	r3, [sp, #28]
 800831c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008320:	931a      	str	r3, [sp, #104]	; 0x68
 8008322:	4654      	mov	r4, sl
 8008324:	2205      	movs	r2, #5
 8008326:	f814 1b01 	ldrb.w	r1, [r4], #1
 800832a:	4858      	ldr	r0, [pc, #352]	; (800848c <_vfiprintf_r+0x24c>)
 800832c:	f7f7 ff88 	bl	8000240 <memchr>
 8008330:	9a04      	ldr	r2, [sp, #16]
 8008332:	b9d8      	cbnz	r0, 800836c <_vfiprintf_r+0x12c>
 8008334:	06d1      	lsls	r1, r2, #27
 8008336:	bf44      	itt	mi
 8008338:	2320      	movmi	r3, #32
 800833a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800833e:	0713      	lsls	r3, r2, #28
 8008340:	bf44      	itt	mi
 8008342:	232b      	movmi	r3, #43	; 0x2b
 8008344:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008348:	f89a 3000 	ldrb.w	r3, [sl]
 800834c:	2b2a      	cmp	r3, #42	; 0x2a
 800834e:	d015      	beq.n	800837c <_vfiprintf_r+0x13c>
 8008350:	9a07      	ldr	r2, [sp, #28]
 8008352:	4654      	mov	r4, sl
 8008354:	2000      	movs	r0, #0
 8008356:	f04f 0c0a 	mov.w	ip, #10
 800835a:	4621      	mov	r1, r4
 800835c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008360:	3b30      	subs	r3, #48	; 0x30
 8008362:	2b09      	cmp	r3, #9
 8008364:	d94e      	bls.n	8008404 <_vfiprintf_r+0x1c4>
 8008366:	b1b0      	cbz	r0, 8008396 <_vfiprintf_r+0x156>
 8008368:	9207      	str	r2, [sp, #28]
 800836a:	e014      	b.n	8008396 <_vfiprintf_r+0x156>
 800836c:	eba0 0308 	sub.w	r3, r0, r8
 8008370:	fa09 f303 	lsl.w	r3, r9, r3
 8008374:	4313      	orrs	r3, r2
 8008376:	9304      	str	r3, [sp, #16]
 8008378:	46a2      	mov	sl, r4
 800837a:	e7d2      	b.n	8008322 <_vfiprintf_r+0xe2>
 800837c:	9b03      	ldr	r3, [sp, #12]
 800837e:	1d19      	adds	r1, r3, #4
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	9103      	str	r1, [sp, #12]
 8008384:	2b00      	cmp	r3, #0
 8008386:	bfbb      	ittet	lt
 8008388:	425b      	neglt	r3, r3
 800838a:	f042 0202 	orrlt.w	r2, r2, #2
 800838e:	9307      	strge	r3, [sp, #28]
 8008390:	9307      	strlt	r3, [sp, #28]
 8008392:	bfb8      	it	lt
 8008394:	9204      	strlt	r2, [sp, #16]
 8008396:	7823      	ldrb	r3, [r4, #0]
 8008398:	2b2e      	cmp	r3, #46	; 0x2e
 800839a:	d10c      	bne.n	80083b6 <_vfiprintf_r+0x176>
 800839c:	7863      	ldrb	r3, [r4, #1]
 800839e:	2b2a      	cmp	r3, #42	; 0x2a
 80083a0:	d135      	bne.n	800840e <_vfiprintf_r+0x1ce>
 80083a2:	9b03      	ldr	r3, [sp, #12]
 80083a4:	1d1a      	adds	r2, r3, #4
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	9203      	str	r2, [sp, #12]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	bfb8      	it	lt
 80083ae:	f04f 33ff 	movlt.w	r3, #4294967295
 80083b2:	3402      	adds	r4, #2
 80083b4:	9305      	str	r3, [sp, #20]
 80083b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800849c <_vfiprintf_r+0x25c>
 80083ba:	7821      	ldrb	r1, [r4, #0]
 80083bc:	2203      	movs	r2, #3
 80083be:	4650      	mov	r0, sl
 80083c0:	f7f7 ff3e 	bl	8000240 <memchr>
 80083c4:	b140      	cbz	r0, 80083d8 <_vfiprintf_r+0x198>
 80083c6:	2340      	movs	r3, #64	; 0x40
 80083c8:	eba0 000a 	sub.w	r0, r0, sl
 80083cc:	fa03 f000 	lsl.w	r0, r3, r0
 80083d0:	9b04      	ldr	r3, [sp, #16]
 80083d2:	4303      	orrs	r3, r0
 80083d4:	3401      	adds	r4, #1
 80083d6:	9304      	str	r3, [sp, #16]
 80083d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083dc:	482c      	ldr	r0, [pc, #176]	; (8008490 <_vfiprintf_r+0x250>)
 80083de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80083e2:	2206      	movs	r2, #6
 80083e4:	f7f7 ff2c 	bl	8000240 <memchr>
 80083e8:	2800      	cmp	r0, #0
 80083ea:	d03f      	beq.n	800846c <_vfiprintf_r+0x22c>
 80083ec:	4b29      	ldr	r3, [pc, #164]	; (8008494 <_vfiprintf_r+0x254>)
 80083ee:	bb1b      	cbnz	r3, 8008438 <_vfiprintf_r+0x1f8>
 80083f0:	9b03      	ldr	r3, [sp, #12]
 80083f2:	3307      	adds	r3, #7
 80083f4:	f023 0307 	bic.w	r3, r3, #7
 80083f8:	3308      	adds	r3, #8
 80083fa:	9303      	str	r3, [sp, #12]
 80083fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083fe:	443b      	add	r3, r7
 8008400:	9309      	str	r3, [sp, #36]	; 0x24
 8008402:	e767      	b.n	80082d4 <_vfiprintf_r+0x94>
 8008404:	fb0c 3202 	mla	r2, ip, r2, r3
 8008408:	460c      	mov	r4, r1
 800840a:	2001      	movs	r0, #1
 800840c:	e7a5      	b.n	800835a <_vfiprintf_r+0x11a>
 800840e:	2300      	movs	r3, #0
 8008410:	3401      	adds	r4, #1
 8008412:	9305      	str	r3, [sp, #20]
 8008414:	4619      	mov	r1, r3
 8008416:	f04f 0c0a 	mov.w	ip, #10
 800841a:	4620      	mov	r0, r4
 800841c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008420:	3a30      	subs	r2, #48	; 0x30
 8008422:	2a09      	cmp	r2, #9
 8008424:	d903      	bls.n	800842e <_vfiprintf_r+0x1ee>
 8008426:	2b00      	cmp	r3, #0
 8008428:	d0c5      	beq.n	80083b6 <_vfiprintf_r+0x176>
 800842a:	9105      	str	r1, [sp, #20]
 800842c:	e7c3      	b.n	80083b6 <_vfiprintf_r+0x176>
 800842e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008432:	4604      	mov	r4, r0
 8008434:	2301      	movs	r3, #1
 8008436:	e7f0      	b.n	800841a <_vfiprintf_r+0x1da>
 8008438:	ab03      	add	r3, sp, #12
 800843a:	9300      	str	r3, [sp, #0]
 800843c:	462a      	mov	r2, r5
 800843e:	4b16      	ldr	r3, [pc, #88]	; (8008498 <_vfiprintf_r+0x258>)
 8008440:	a904      	add	r1, sp, #16
 8008442:	4630      	mov	r0, r6
 8008444:	f7fd fcd0 	bl	8005de8 <_printf_float>
 8008448:	4607      	mov	r7, r0
 800844a:	1c78      	adds	r0, r7, #1
 800844c:	d1d6      	bne.n	80083fc <_vfiprintf_r+0x1bc>
 800844e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008450:	07d9      	lsls	r1, r3, #31
 8008452:	d405      	bmi.n	8008460 <_vfiprintf_r+0x220>
 8008454:	89ab      	ldrh	r3, [r5, #12]
 8008456:	059a      	lsls	r2, r3, #22
 8008458:	d402      	bmi.n	8008460 <_vfiprintf_r+0x220>
 800845a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800845c:	f7ff fa12 	bl	8007884 <__retarget_lock_release_recursive>
 8008460:	89ab      	ldrh	r3, [r5, #12]
 8008462:	065b      	lsls	r3, r3, #25
 8008464:	f53f af12 	bmi.w	800828c <_vfiprintf_r+0x4c>
 8008468:	9809      	ldr	r0, [sp, #36]	; 0x24
 800846a:	e711      	b.n	8008290 <_vfiprintf_r+0x50>
 800846c:	ab03      	add	r3, sp, #12
 800846e:	9300      	str	r3, [sp, #0]
 8008470:	462a      	mov	r2, r5
 8008472:	4b09      	ldr	r3, [pc, #36]	; (8008498 <_vfiprintf_r+0x258>)
 8008474:	a904      	add	r1, sp, #16
 8008476:	4630      	mov	r0, r6
 8008478:	f7fd ff5a 	bl	8006330 <_printf_i>
 800847c:	e7e4      	b.n	8008448 <_vfiprintf_r+0x208>
 800847e:	bf00      	nop
 8008480:	080088d8 	.word	0x080088d8
 8008484:	080088f8 	.word	0x080088f8
 8008488:	080088b8 	.word	0x080088b8
 800848c:	08008a74 	.word	0x08008a74
 8008490:	08008a7e 	.word	0x08008a7e
 8008494:	08005de9 	.word	0x08005de9
 8008498:	0800821b 	.word	0x0800821b
 800849c:	08008a7a 	.word	0x08008a7a

080084a0 <_sbrk_r>:
 80084a0:	b538      	push	{r3, r4, r5, lr}
 80084a2:	4d06      	ldr	r5, [pc, #24]	; (80084bc <_sbrk_r+0x1c>)
 80084a4:	2300      	movs	r3, #0
 80084a6:	4604      	mov	r4, r0
 80084a8:	4608      	mov	r0, r1
 80084aa:	602b      	str	r3, [r5, #0]
 80084ac:	f7f9 fa4a 	bl	8001944 <_sbrk>
 80084b0:	1c43      	adds	r3, r0, #1
 80084b2:	d102      	bne.n	80084ba <_sbrk_r+0x1a>
 80084b4:	682b      	ldr	r3, [r5, #0]
 80084b6:	b103      	cbz	r3, 80084ba <_sbrk_r+0x1a>
 80084b8:	6023      	str	r3, [r4, #0]
 80084ba:	bd38      	pop	{r3, r4, r5, pc}
 80084bc:	200003c8 	.word	0x200003c8

080084c0 <__sread>:
 80084c0:	b510      	push	{r4, lr}
 80084c2:	460c      	mov	r4, r1
 80084c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084c8:	f000 f8e2 	bl	8008690 <_read_r>
 80084cc:	2800      	cmp	r0, #0
 80084ce:	bfab      	itete	ge
 80084d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80084d2:	89a3      	ldrhlt	r3, [r4, #12]
 80084d4:	181b      	addge	r3, r3, r0
 80084d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80084da:	bfac      	ite	ge
 80084dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80084de:	81a3      	strhlt	r3, [r4, #12]
 80084e0:	bd10      	pop	{r4, pc}

080084e2 <__swrite>:
 80084e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084e6:	461f      	mov	r7, r3
 80084e8:	898b      	ldrh	r3, [r1, #12]
 80084ea:	05db      	lsls	r3, r3, #23
 80084ec:	4605      	mov	r5, r0
 80084ee:	460c      	mov	r4, r1
 80084f0:	4616      	mov	r6, r2
 80084f2:	d505      	bpl.n	8008500 <__swrite+0x1e>
 80084f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084f8:	2302      	movs	r3, #2
 80084fa:	2200      	movs	r2, #0
 80084fc:	f000 f898 	bl	8008630 <_lseek_r>
 8008500:	89a3      	ldrh	r3, [r4, #12]
 8008502:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008506:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800850a:	81a3      	strh	r3, [r4, #12]
 800850c:	4632      	mov	r2, r6
 800850e:	463b      	mov	r3, r7
 8008510:	4628      	mov	r0, r5
 8008512:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008516:	f000 b817 	b.w	8008548 <_write_r>

0800851a <__sseek>:
 800851a:	b510      	push	{r4, lr}
 800851c:	460c      	mov	r4, r1
 800851e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008522:	f000 f885 	bl	8008630 <_lseek_r>
 8008526:	1c43      	adds	r3, r0, #1
 8008528:	89a3      	ldrh	r3, [r4, #12]
 800852a:	bf15      	itete	ne
 800852c:	6560      	strne	r0, [r4, #84]	; 0x54
 800852e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008532:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008536:	81a3      	strheq	r3, [r4, #12]
 8008538:	bf18      	it	ne
 800853a:	81a3      	strhne	r3, [r4, #12]
 800853c:	bd10      	pop	{r4, pc}

0800853e <__sclose>:
 800853e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008542:	f000 b831 	b.w	80085a8 <_close_r>
	...

08008548 <_write_r>:
 8008548:	b538      	push	{r3, r4, r5, lr}
 800854a:	4d07      	ldr	r5, [pc, #28]	; (8008568 <_write_r+0x20>)
 800854c:	4604      	mov	r4, r0
 800854e:	4608      	mov	r0, r1
 8008550:	4611      	mov	r1, r2
 8008552:	2200      	movs	r2, #0
 8008554:	602a      	str	r2, [r5, #0]
 8008556:	461a      	mov	r2, r3
 8008558:	f7f9 f9a3 	bl	80018a2 <_write>
 800855c:	1c43      	adds	r3, r0, #1
 800855e:	d102      	bne.n	8008566 <_write_r+0x1e>
 8008560:	682b      	ldr	r3, [r5, #0]
 8008562:	b103      	cbz	r3, 8008566 <_write_r+0x1e>
 8008564:	6023      	str	r3, [r4, #0]
 8008566:	bd38      	pop	{r3, r4, r5, pc}
 8008568:	200003c8 	.word	0x200003c8

0800856c <__assert_func>:
 800856c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800856e:	4614      	mov	r4, r2
 8008570:	461a      	mov	r2, r3
 8008572:	4b09      	ldr	r3, [pc, #36]	; (8008598 <__assert_func+0x2c>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4605      	mov	r5, r0
 8008578:	68d8      	ldr	r0, [r3, #12]
 800857a:	b14c      	cbz	r4, 8008590 <__assert_func+0x24>
 800857c:	4b07      	ldr	r3, [pc, #28]	; (800859c <__assert_func+0x30>)
 800857e:	9100      	str	r1, [sp, #0]
 8008580:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008584:	4906      	ldr	r1, [pc, #24]	; (80085a0 <__assert_func+0x34>)
 8008586:	462b      	mov	r3, r5
 8008588:	f000 f81e 	bl	80085c8 <fiprintf>
 800858c:	f000 f89f 	bl	80086ce <abort>
 8008590:	4b04      	ldr	r3, [pc, #16]	; (80085a4 <__assert_func+0x38>)
 8008592:	461c      	mov	r4, r3
 8008594:	e7f3      	b.n	800857e <__assert_func+0x12>
 8008596:	bf00      	nop
 8008598:	20000018 	.word	0x20000018
 800859c:	08008a85 	.word	0x08008a85
 80085a0:	08008a92 	.word	0x08008a92
 80085a4:	08008ac0 	.word	0x08008ac0

080085a8 <_close_r>:
 80085a8:	b538      	push	{r3, r4, r5, lr}
 80085aa:	4d06      	ldr	r5, [pc, #24]	; (80085c4 <_close_r+0x1c>)
 80085ac:	2300      	movs	r3, #0
 80085ae:	4604      	mov	r4, r0
 80085b0:	4608      	mov	r0, r1
 80085b2:	602b      	str	r3, [r5, #0]
 80085b4:	f7f9 f991 	bl	80018da <_close>
 80085b8:	1c43      	adds	r3, r0, #1
 80085ba:	d102      	bne.n	80085c2 <_close_r+0x1a>
 80085bc:	682b      	ldr	r3, [r5, #0]
 80085be:	b103      	cbz	r3, 80085c2 <_close_r+0x1a>
 80085c0:	6023      	str	r3, [r4, #0]
 80085c2:	bd38      	pop	{r3, r4, r5, pc}
 80085c4:	200003c8 	.word	0x200003c8

080085c8 <fiprintf>:
 80085c8:	b40e      	push	{r1, r2, r3}
 80085ca:	b503      	push	{r0, r1, lr}
 80085cc:	4601      	mov	r1, r0
 80085ce:	ab03      	add	r3, sp, #12
 80085d0:	4805      	ldr	r0, [pc, #20]	; (80085e8 <fiprintf+0x20>)
 80085d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80085d6:	6800      	ldr	r0, [r0, #0]
 80085d8:	9301      	str	r3, [sp, #4]
 80085da:	f7ff fe31 	bl	8008240 <_vfiprintf_r>
 80085de:	b002      	add	sp, #8
 80085e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80085e4:	b003      	add	sp, #12
 80085e6:	4770      	bx	lr
 80085e8:	20000018 	.word	0x20000018

080085ec <_fstat_r>:
 80085ec:	b538      	push	{r3, r4, r5, lr}
 80085ee:	4d07      	ldr	r5, [pc, #28]	; (800860c <_fstat_r+0x20>)
 80085f0:	2300      	movs	r3, #0
 80085f2:	4604      	mov	r4, r0
 80085f4:	4608      	mov	r0, r1
 80085f6:	4611      	mov	r1, r2
 80085f8:	602b      	str	r3, [r5, #0]
 80085fa:	f7f9 f97a 	bl	80018f2 <_fstat>
 80085fe:	1c43      	adds	r3, r0, #1
 8008600:	d102      	bne.n	8008608 <_fstat_r+0x1c>
 8008602:	682b      	ldr	r3, [r5, #0]
 8008604:	b103      	cbz	r3, 8008608 <_fstat_r+0x1c>
 8008606:	6023      	str	r3, [r4, #0]
 8008608:	bd38      	pop	{r3, r4, r5, pc}
 800860a:	bf00      	nop
 800860c:	200003c8 	.word	0x200003c8

08008610 <_isatty_r>:
 8008610:	b538      	push	{r3, r4, r5, lr}
 8008612:	4d06      	ldr	r5, [pc, #24]	; (800862c <_isatty_r+0x1c>)
 8008614:	2300      	movs	r3, #0
 8008616:	4604      	mov	r4, r0
 8008618:	4608      	mov	r0, r1
 800861a:	602b      	str	r3, [r5, #0]
 800861c:	f7f9 f979 	bl	8001912 <_isatty>
 8008620:	1c43      	adds	r3, r0, #1
 8008622:	d102      	bne.n	800862a <_isatty_r+0x1a>
 8008624:	682b      	ldr	r3, [r5, #0]
 8008626:	b103      	cbz	r3, 800862a <_isatty_r+0x1a>
 8008628:	6023      	str	r3, [r4, #0]
 800862a:	bd38      	pop	{r3, r4, r5, pc}
 800862c:	200003c8 	.word	0x200003c8

08008630 <_lseek_r>:
 8008630:	b538      	push	{r3, r4, r5, lr}
 8008632:	4d07      	ldr	r5, [pc, #28]	; (8008650 <_lseek_r+0x20>)
 8008634:	4604      	mov	r4, r0
 8008636:	4608      	mov	r0, r1
 8008638:	4611      	mov	r1, r2
 800863a:	2200      	movs	r2, #0
 800863c:	602a      	str	r2, [r5, #0]
 800863e:	461a      	mov	r2, r3
 8008640:	f7f9 f972 	bl	8001928 <_lseek>
 8008644:	1c43      	adds	r3, r0, #1
 8008646:	d102      	bne.n	800864e <_lseek_r+0x1e>
 8008648:	682b      	ldr	r3, [r5, #0]
 800864a:	b103      	cbz	r3, 800864e <_lseek_r+0x1e>
 800864c:	6023      	str	r3, [r4, #0]
 800864e:	bd38      	pop	{r3, r4, r5, pc}
 8008650:	200003c8 	.word	0x200003c8

08008654 <__ascii_mbtowc>:
 8008654:	b082      	sub	sp, #8
 8008656:	b901      	cbnz	r1, 800865a <__ascii_mbtowc+0x6>
 8008658:	a901      	add	r1, sp, #4
 800865a:	b142      	cbz	r2, 800866e <__ascii_mbtowc+0x1a>
 800865c:	b14b      	cbz	r3, 8008672 <__ascii_mbtowc+0x1e>
 800865e:	7813      	ldrb	r3, [r2, #0]
 8008660:	600b      	str	r3, [r1, #0]
 8008662:	7812      	ldrb	r2, [r2, #0]
 8008664:	1e10      	subs	r0, r2, #0
 8008666:	bf18      	it	ne
 8008668:	2001      	movne	r0, #1
 800866a:	b002      	add	sp, #8
 800866c:	4770      	bx	lr
 800866e:	4610      	mov	r0, r2
 8008670:	e7fb      	b.n	800866a <__ascii_mbtowc+0x16>
 8008672:	f06f 0001 	mvn.w	r0, #1
 8008676:	e7f8      	b.n	800866a <__ascii_mbtowc+0x16>

08008678 <__malloc_lock>:
 8008678:	4801      	ldr	r0, [pc, #4]	; (8008680 <__malloc_lock+0x8>)
 800867a:	f7ff b902 	b.w	8007882 <__retarget_lock_acquire_recursive>
 800867e:	bf00      	nop
 8008680:	200003c0 	.word	0x200003c0

08008684 <__malloc_unlock>:
 8008684:	4801      	ldr	r0, [pc, #4]	; (800868c <__malloc_unlock+0x8>)
 8008686:	f7ff b8fd 	b.w	8007884 <__retarget_lock_release_recursive>
 800868a:	bf00      	nop
 800868c:	200003c0 	.word	0x200003c0

08008690 <_read_r>:
 8008690:	b538      	push	{r3, r4, r5, lr}
 8008692:	4d07      	ldr	r5, [pc, #28]	; (80086b0 <_read_r+0x20>)
 8008694:	4604      	mov	r4, r0
 8008696:	4608      	mov	r0, r1
 8008698:	4611      	mov	r1, r2
 800869a:	2200      	movs	r2, #0
 800869c:	602a      	str	r2, [r5, #0]
 800869e:	461a      	mov	r2, r3
 80086a0:	f7f9 f8e2 	bl	8001868 <_read>
 80086a4:	1c43      	adds	r3, r0, #1
 80086a6:	d102      	bne.n	80086ae <_read_r+0x1e>
 80086a8:	682b      	ldr	r3, [r5, #0]
 80086aa:	b103      	cbz	r3, 80086ae <_read_r+0x1e>
 80086ac:	6023      	str	r3, [r4, #0]
 80086ae:	bd38      	pop	{r3, r4, r5, pc}
 80086b0:	200003c8 	.word	0x200003c8

080086b4 <__ascii_wctomb>:
 80086b4:	b149      	cbz	r1, 80086ca <__ascii_wctomb+0x16>
 80086b6:	2aff      	cmp	r2, #255	; 0xff
 80086b8:	bf85      	ittet	hi
 80086ba:	238a      	movhi	r3, #138	; 0x8a
 80086bc:	6003      	strhi	r3, [r0, #0]
 80086be:	700a      	strbls	r2, [r1, #0]
 80086c0:	f04f 30ff 	movhi.w	r0, #4294967295
 80086c4:	bf98      	it	ls
 80086c6:	2001      	movls	r0, #1
 80086c8:	4770      	bx	lr
 80086ca:	4608      	mov	r0, r1
 80086cc:	4770      	bx	lr

080086ce <abort>:
 80086ce:	b508      	push	{r3, lr}
 80086d0:	2006      	movs	r0, #6
 80086d2:	f000 f82b 	bl	800872c <raise>
 80086d6:	2001      	movs	r0, #1
 80086d8:	f7f9 f8bc 	bl	8001854 <_exit>

080086dc <_raise_r>:
 80086dc:	291f      	cmp	r1, #31
 80086de:	b538      	push	{r3, r4, r5, lr}
 80086e0:	4604      	mov	r4, r0
 80086e2:	460d      	mov	r5, r1
 80086e4:	d904      	bls.n	80086f0 <_raise_r+0x14>
 80086e6:	2316      	movs	r3, #22
 80086e8:	6003      	str	r3, [r0, #0]
 80086ea:	f04f 30ff 	mov.w	r0, #4294967295
 80086ee:	bd38      	pop	{r3, r4, r5, pc}
 80086f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80086f2:	b112      	cbz	r2, 80086fa <_raise_r+0x1e>
 80086f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80086f8:	b94b      	cbnz	r3, 800870e <_raise_r+0x32>
 80086fa:	4620      	mov	r0, r4
 80086fc:	f000 f830 	bl	8008760 <_getpid_r>
 8008700:	462a      	mov	r2, r5
 8008702:	4601      	mov	r1, r0
 8008704:	4620      	mov	r0, r4
 8008706:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800870a:	f000 b817 	b.w	800873c <_kill_r>
 800870e:	2b01      	cmp	r3, #1
 8008710:	d00a      	beq.n	8008728 <_raise_r+0x4c>
 8008712:	1c59      	adds	r1, r3, #1
 8008714:	d103      	bne.n	800871e <_raise_r+0x42>
 8008716:	2316      	movs	r3, #22
 8008718:	6003      	str	r3, [r0, #0]
 800871a:	2001      	movs	r0, #1
 800871c:	e7e7      	b.n	80086ee <_raise_r+0x12>
 800871e:	2400      	movs	r4, #0
 8008720:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008724:	4628      	mov	r0, r5
 8008726:	4798      	blx	r3
 8008728:	2000      	movs	r0, #0
 800872a:	e7e0      	b.n	80086ee <_raise_r+0x12>

0800872c <raise>:
 800872c:	4b02      	ldr	r3, [pc, #8]	; (8008738 <raise+0xc>)
 800872e:	4601      	mov	r1, r0
 8008730:	6818      	ldr	r0, [r3, #0]
 8008732:	f7ff bfd3 	b.w	80086dc <_raise_r>
 8008736:	bf00      	nop
 8008738:	20000018 	.word	0x20000018

0800873c <_kill_r>:
 800873c:	b538      	push	{r3, r4, r5, lr}
 800873e:	4d07      	ldr	r5, [pc, #28]	; (800875c <_kill_r+0x20>)
 8008740:	2300      	movs	r3, #0
 8008742:	4604      	mov	r4, r0
 8008744:	4608      	mov	r0, r1
 8008746:	4611      	mov	r1, r2
 8008748:	602b      	str	r3, [r5, #0]
 800874a:	f7f9 f873 	bl	8001834 <_kill>
 800874e:	1c43      	adds	r3, r0, #1
 8008750:	d102      	bne.n	8008758 <_kill_r+0x1c>
 8008752:	682b      	ldr	r3, [r5, #0]
 8008754:	b103      	cbz	r3, 8008758 <_kill_r+0x1c>
 8008756:	6023      	str	r3, [r4, #0]
 8008758:	bd38      	pop	{r3, r4, r5, pc}
 800875a:	bf00      	nop
 800875c:	200003c8 	.word	0x200003c8

08008760 <_getpid_r>:
 8008760:	f7f9 b860 	b.w	8001824 <_getpid>

08008764 <_init>:
 8008764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008766:	bf00      	nop
 8008768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800876a:	bc08      	pop	{r3}
 800876c:	469e      	mov	lr, r3
 800876e:	4770      	bx	lr

08008770 <_fini>:
 8008770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008772:	bf00      	nop
 8008774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008776:	bc08      	pop	{r3}
 8008778:	469e      	mov	lr, r3
 800877a:	4770      	bx	lr
