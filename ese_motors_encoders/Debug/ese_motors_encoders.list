
ese_motors_encoders.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f74  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003138  08003138  00013138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003164  08003164  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003164  08003164  00013164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800316c  0800316c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800316c  0800316c  0001316c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003170  08003170  00013170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003174  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000000c  08003180  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08003180  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000112bf  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021a1  00000000  00000000  000312fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c60  00000000  00000000  000334a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b78  00000000  00000000  00034100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021a01  00000000  00000000  00034c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fea0  00000000  00000000  00056679  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cca5d  00000000  00000000  00066519  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00132f76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032bc  00000000  00000000  00132fcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003120 	.word	0x08003120

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08003120 	.word	0x08003120

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96e 	b.w	80004f8 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468c      	mov	ip, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 8083 	bne.w	800034a <__udivmoddi4+0x116>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d947      	bls.n	80002da <__udivmoddi4+0xa6>
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	b142      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 8000250:	f1c2 0020 	rsb	r0, r2, #32
 8000254:	fa24 f000 	lsr.w	r0, r4, r0
 8000258:	4091      	lsls	r1, r2
 800025a:	4097      	lsls	r7, r2
 800025c:	ea40 0c01 	orr.w	ip, r0, r1
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbbc f6f8 	udiv	r6, ip, r8
 800026c:	fa1f fe87 	uxth.w	lr, r7
 8000270:	fb08 c116 	mls	r1, r8, r6, ip
 8000274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000278:	fb06 f10e 	mul.w	r1, r6, lr
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 8119 	bcs.w	80004bc <__udivmoddi4+0x288>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8116 	bls.w	80004bc <__udivmoddi4+0x288>
 8000290:	3e02      	subs	r6, #2
 8000292:	443b      	add	r3, r7
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8105 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f240 8102 	bls.w	80004c0 <__udivmoddi4+0x28c>
 80002bc:	3802      	subs	r0, #2
 80002be:	443c      	add	r4, r7
 80002c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c4:	eba4 040e 	sub.w	r4, r4, lr
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xaa>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d150      	bne.n	8000388 <__udivmoddi4+0x154>
 80002e6:	1bcb      	subs	r3, r1, r7
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f f887 	uxth.w	r8, r7
 80002f0:	2601      	movs	r6, #1
 80002f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f6:	0c21      	lsrs	r1, r4, #16
 80002f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000300:	fb08 f30c 	mul.w	r3, r8, ip
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000308:	1879      	adds	r1, r7, r1
 800030a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0xe2>
 8000310:	428b      	cmp	r3, r1
 8000312:	f200 80e9 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 8000316:	4684      	mov	ip, r0
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	b2a3      	uxth	r3, r4
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fb0e 1110 	mls	r1, lr, r0, r1
 8000324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000328:	fb08 f800 	mul.w	r8, r8, r0
 800032c:	45a0      	cmp	r8, r4
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x10c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x10a>
 8000338:	45a0      	cmp	r8, r4
 800033a:	f200 80d9 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 800033e:	4618      	mov	r0, r3
 8000340:	eba4 0408 	sub.w	r4, r4, r8
 8000344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000348:	e7bf      	b.n	80002ca <__udivmoddi4+0x96>
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x12e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80b1 	beq.w	80004b6 <__udivmoddi4+0x282>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x1cc>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0x140>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80b8 	bhi.w	80004e4 <__udivmoddi4+0x2b0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0103 	sbc.w	r1, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	468c      	mov	ip, r1
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0a8      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000382:	e9c5 4c00 	strd	r4, ip, [r5]
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000388:	f1c2 0320 	rsb	r3, r2, #32
 800038c:	fa20 f603 	lsr.w	r6, r0, r3
 8000390:	4097      	lsls	r7, r2
 8000392:	fa01 f002 	lsl.w	r0, r1, r2
 8000396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039a:	40d9      	lsrs	r1, r3
 800039c:	4330      	orrs	r0, r6
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a4:	fa1f f887 	uxth.w	r8, r7
 80003a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb06 f108 	mul.w	r1, r6, r8
 80003b4:	4299      	cmp	r1, r3
 80003b6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x19c>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c2:	f080 808d 	bcs.w	80004e0 <__udivmoddi4+0x2ac>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 808a 	bls.w	80004e0 <__udivmoddi4+0x2ac>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b281      	uxth	r1, r0
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e0:	fb00 f308 	mul.w	r3, r0, r8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x1c4>
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ee:	d273      	bcs.n	80004d8 <__udivmoddi4+0x2a4>
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d971      	bls.n	80004d8 <__udivmoddi4+0x2a4>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4439      	add	r1, r7
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fe:	e778      	b.n	80002f2 <__udivmoddi4+0xbe>
 8000400:	f1c6 0c20 	rsb	ip, r6, #32
 8000404:	fa03 f406 	lsl.w	r4, r3, r6
 8000408:	fa22 f30c 	lsr.w	r3, r2, ip
 800040c:	431c      	orrs	r4, r3
 800040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041a:	fa21 f10c 	lsr.w	r1, r1, ip
 800041e:	431f      	orrs	r7, r3
 8000420:	0c3b      	lsrs	r3, r7, #16
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fa1f f884 	uxth.w	r8, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000432:	fb09 fa08 	mul.w	sl, r9, r8
 8000436:	458a      	cmp	sl, r1
 8000438:	fa02 f206 	lsl.w	r2, r2, r6
 800043c:	fa00 f306 	lsl.w	r3, r0, r6
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x220>
 8000442:	1861      	adds	r1, r4, r1
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295
 8000448:	d248      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 800044a:	458a      	cmp	sl, r1
 800044c:	d946      	bls.n	80004dc <__udivmoddi4+0x2a8>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4421      	add	r1, r4
 8000454:	eba1 010a 	sub.w	r1, r1, sl
 8000458:	b2bf      	uxth	r7, r7
 800045a:	fbb1 f0fe 	udiv	r0, r1, lr
 800045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45b8      	cmp	r8, r7
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x24a>
 800046e:	19e7      	adds	r7, r4, r7
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295
 8000474:	d22e      	bcs.n	80004d4 <__udivmoddi4+0x2a0>
 8000476:	45b8      	cmp	r8, r7
 8000478:	d92c      	bls.n	80004d4 <__udivmoddi4+0x2a0>
 800047a:	3802      	subs	r0, #2
 800047c:	4427      	add	r7, r4
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba7 0708 	sub.w	r7, r7, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454f      	cmp	r7, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	4649      	mov	r1, r9
 8000490:	d31a      	bcc.n	80004c8 <__udivmoddi4+0x294>
 8000492:	d017      	beq.n	80004c4 <__udivmoddi4+0x290>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x27a>
 8000496:	ebb3 020e 	subs.w	r2, r3, lr
 800049a:	eb67 0701 	sbc.w	r7, r7, r1
 800049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a2:	40f2      	lsrs	r2, r6
 80004a4:	ea4c 0202 	orr.w	r2, ip, r2
 80004a8:	40f7      	lsrs	r7, r6
 80004aa:	e9c5 2700 	strd	r2, r7, [r5]
 80004ae:	2600      	movs	r6, #0
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e70b      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fd      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c4:	4543      	cmp	r3, r8
 80004c6:	d2e5      	bcs.n	8000494 <__udivmoddi4+0x260>
 80004c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004cc:	eb69 0104 	sbc.w	r1, r9, r4
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7df      	b.n	8000494 <__udivmoddi4+0x260>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e7d2      	b.n	800047e <__udivmoddi4+0x24a>
 80004d8:	4660      	mov	r0, ip
 80004da:	e78d      	b.n	80003f8 <__udivmoddi4+0x1c4>
 80004dc:	4681      	mov	r9, r0
 80004de:	e7b9      	b.n	8000454 <__udivmoddi4+0x220>
 80004e0:	4666      	mov	r6, ip
 80004e2:	e775      	b.n	80003d0 <__udivmoddi4+0x19c>
 80004e4:	4630      	mov	r0, r6
 80004e6:	e74a      	b.n	800037e <__udivmoddi4+0x14a>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	4439      	add	r1, r7
 80004ee:	e713      	b.n	8000318 <__udivmoddi4+0xe4>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	e724      	b.n	8000340 <__udivmoddi4+0x10c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <Mot_SetDutyCycle>:
#include "Motors.h"

/*	@brief	Set the PWM Duty Cycle
 *	@param	duty_cycle : value between 0 and 100
 */
uint8_t Mot_SetDutyCycle(uint8_t duty_cycle){
 80004fc:	b480      	push	{r7}
 80004fe:	b085      	sub	sp, #20
 8000500:	af00      	add	r7, sp, #0
 8000502:	4603      	mov	r3, r0
 8000504:	71fb      	strb	r3, [r7, #7]
	if(duty_cycle > 100) duty_cycle = 100;
 8000506:	79fb      	ldrb	r3, [r7, #7]
 8000508:	2b64      	cmp	r3, #100	; 0x64
 800050a:	d901      	bls.n	8000510 <Mot_SetDutyCycle+0x14>
 800050c:	2364      	movs	r3, #100	; 0x64
 800050e:	71fb      	strb	r3, [r7, #7]

	float pulse = ((float)duty_cycle / 100) * (float)COUNTER_PERIOD;
 8000510:	79fb      	ldrb	r3, [r7, #7]
 8000512:	ee07 3a90 	vmov	s15, r3
 8000516:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800051a:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8000550 <Mot_SetDutyCycle+0x54>
 800051e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000522:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000554 <Mot_SetDutyCycle+0x58>
 8000526:	ee67 7a87 	vmul.f32	s15, s15, s14
 800052a:	edc7 7a03 	vstr	s15, [r7, #12]

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, (uint32_t)pulse);
 800052e:	4b0a      	ldr	r3, [pc, #40]	; (8000558 <Mot_SetDutyCycle+0x5c>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	edd7 7a03 	vldr	s15, [r7, #12]
 8000536:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800053a:	ee17 2a90 	vmov	r2, s15
 800053e:	635a      	str	r2, [r3, #52]	; 0x34
	return 0;
 8000540:	2300      	movs	r3, #0
}
 8000542:	4618      	mov	r0, r3
 8000544:	3714      	adds	r7, #20
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	42c80000 	.word	0x42c80000
 8000554:	42200000 	.word	0x42200000
 8000558:	20000028 	.word	0x20000028

0800055c <myPrintf>:
#include "Shell.h"

uint8_t myPrintf(UART_HandleTypeDef *huart, char *data){
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
 8000564:	6039      	str	r1, [r7, #0]

	HAL_UART_Transmit(&huart2, (uint8_t*) data, 64, 50);
 8000566:	2332      	movs	r3, #50	; 0x32
 8000568:	2240      	movs	r2, #64	; 0x40
 800056a:	6839      	ldr	r1, [r7, #0]
 800056c:	4803      	ldr	r0, [pc, #12]	; (800057c <myPrintf+0x20>)
 800056e:	f002 fae2 	bl	8002b36 <HAL_UART_Transmit>
	return 0;
 8000572:	2300      	movs	r3, #0
}
 8000574:	4618      	mov	r0, r3
 8000576:	3708      	adds	r7, #8
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	20000070 	.word	0x20000070

08000580 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b08a      	sub	sp, #40	; 0x28
 8000584:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000586:	f107 0314 	add.w	r3, r7, #20
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	609a      	str	r2, [r3, #8]
 8000592:	60da      	str	r2, [r3, #12]
 8000594:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000596:	2300      	movs	r3, #0
 8000598:	613b      	str	r3, [r7, #16]
 800059a:	4b37      	ldr	r3, [pc, #220]	; (8000678 <MX_GPIO_Init+0xf8>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	4a36      	ldr	r2, [pc, #216]	; (8000678 <MX_GPIO_Init+0xf8>)
 80005a0:	f043 0304 	orr.w	r3, r3, #4
 80005a4:	6313      	str	r3, [r2, #48]	; 0x30
 80005a6:	4b34      	ldr	r3, [pc, #208]	; (8000678 <MX_GPIO_Init+0xf8>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	f003 0304 	and.w	r3, r3, #4
 80005ae:	613b      	str	r3, [r7, #16]
 80005b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005b2:	2300      	movs	r3, #0
 80005b4:	60fb      	str	r3, [r7, #12]
 80005b6:	4b30      	ldr	r3, [pc, #192]	; (8000678 <MX_GPIO_Init+0xf8>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	4a2f      	ldr	r2, [pc, #188]	; (8000678 <MX_GPIO_Init+0xf8>)
 80005bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005c0:	6313      	str	r3, [r2, #48]	; 0x30
 80005c2:	4b2d      	ldr	r3, [pc, #180]	; (8000678 <MX_GPIO_Init+0xf8>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ce:	2300      	movs	r3, #0
 80005d0:	60bb      	str	r3, [r7, #8]
 80005d2:	4b29      	ldr	r3, [pc, #164]	; (8000678 <MX_GPIO_Init+0xf8>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	4a28      	ldr	r2, [pc, #160]	; (8000678 <MX_GPIO_Init+0xf8>)
 80005d8:	f043 0301 	orr.w	r3, r3, #1
 80005dc:	6313      	str	r3, [r2, #48]	; 0x30
 80005de:	4b26      	ldr	r3, [pc, #152]	; (8000678 <MX_GPIO_Init+0xf8>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	f003 0301 	and.w	r3, r3, #1
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ea:	2300      	movs	r3, #0
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	4b22      	ldr	r3, [pc, #136]	; (8000678 <MX_GPIO_Init+0xf8>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	4a21      	ldr	r2, [pc, #132]	; (8000678 <MX_GPIO_Init+0xf8>)
 80005f4:	f043 0302 	orr.w	r3, r3, #2
 80005f8:	6313      	str	r3, [r2, #48]	; 0x30
 80005fa:	4b1f      	ldr	r3, [pc, #124]	; (8000678 <MX_GPIO_Init+0xf8>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	f003 0302 	and.w	r3, r3, #2
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IN1_Pin|IN2_Pin, GPIO_PIN_RESET);
 8000606:	2200      	movs	r2, #0
 8000608:	2103      	movs	r1, #3
 800060a:	481c      	ldr	r0, [pc, #112]	; (800067c <MX_GPIO_Init+0xfc>)
 800060c:	f000 fdea 	bl	80011e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000610:	2200      	movs	r2, #0
 8000612:	2120      	movs	r1, #32
 8000614:	481a      	ldr	r0, [pc, #104]	; (8000680 <MX_GPIO_Init+0x100>)
 8000616:	f000 fde5 	bl	80011e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800061a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800061e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000620:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000624:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000626:	2300      	movs	r3, #0
 8000628:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800062a:	f107 0314 	add.w	r3, r7, #20
 800062e:	4619      	mov	r1, r3
 8000630:	4812      	ldr	r0, [pc, #72]	; (800067c <MX_GPIO_Init+0xfc>)
 8000632:	f000 fc43 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin;
 8000636:	2303      	movs	r3, #3
 8000638:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063a:	2301      	movs	r3, #1
 800063c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063e:	2300      	movs	r3, #0
 8000640:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000642:	2300      	movs	r3, #0
 8000644:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000646:	f107 0314 	add.w	r3, r7, #20
 800064a:	4619      	mov	r1, r3
 800064c:	480b      	ldr	r0, [pc, #44]	; (800067c <MX_GPIO_Init+0xfc>)
 800064e:	f000 fc35 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000652:	2320      	movs	r3, #32
 8000654:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000656:	2301      	movs	r3, #1
 8000658:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065a:	2300      	movs	r3, #0
 800065c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065e:	2300      	movs	r3, #0
 8000660:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000662:	f107 0314 	add.w	r3, r7, #20
 8000666:	4619      	mov	r1, r3
 8000668:	4805      	ldr	r0, [pc, #20]	; (8000680 <MX_GPIO_Init+0x100>)
 800066a:	f000 fc27 	bl	8000ebc <HAL_GPIO_Init>

}
 800066e:	bf00      	nop
 8000670:	3728      	adds	r7, #40	; 0x28
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40023800 	.word	0x40023800
 800067c:	40020800 	.word	0x40020800
 8000680:	40020000 	.word	0x40020000

08000684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068a:	f000 fa9b 	bl	8000bc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068e:	f000 f829 	bl	80006e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000692:	f7ff ff75 	bl	8000580 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000696:	f000 f9f9 	bl	8000a8c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800069a:	f000 f8fb 	bl	8000894 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  // Configuration de IN1 et IN2
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 800069e:	2201      	movs	r2, #1
 80006a0:	2101      	movs	r1, #1
 80006a2:	480c      	ldr	r0, [pc, #48]	; (80006d4 <main+0x50>)
 80006a4:	f000 fd9e 	bl	80011e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80006a8:	2200      	movs	r2, #0
 80006aa:	2102      	movs	r1, #2
 80006ac:	4809      	ldr	r0, [pc, #36]	; (80006d4 <main+0x50>)
 80006ae:	f000 fd99 	bl	80011e4 <HAL_GPIO_WritePin>

  // Démarrage du Timer qui génère un signal PWM
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80006b2:	2100      	movs	r1, #0
 80006b4:	4808      	ldr	r0, [pc, #32]	; (80006d8 <main+0x54>)
 80006b6:	f001 fbc1 	bl	8001e3c <HAL_TIM_PWM_Start>
  Mot_SetDutyCycle(60); // 60% minimum
 80006ba:	203c      	movs	r0, #60	; 0x3c
 80006bc:	f7ff ff1e 	bl	80004fc <Mot_SetDutyCycle>

  int i=0;
 80006c0:	2300      	movs	r3, #0
 80006c2:	607b      	str	r3, [r7, #4]
	  if(HAL_UART_Receive(&huart2, data, sizeof(data), 50)){
		  HAL_UART_Transmit(&huart2, data, sizeof(data), 50);
	  }
	  */

	  myPrintf(&huart2,"Bonjour a tous!\r\n");
 80006c4:	4905      	ldr	r1, [pc, #20]	; (80006dc <main+0x58>)
 80006c6:	4806      	ldr	r0, [pc, #24]	; (80006e0 <main+0x5c>)
 80006c8:	f7ff ff48 	bl	800055c <myPrintf>
	  HAL_Delay(100);
 80006cc:	2064      	movs	r0, #100	; 0x64
 80006ce:	f000 faeb 	bl	8000ca8 <HAL_Delay>
	  myPrintf(&huart2,"Bonjour a tous!\r\n");
 80006d2:	e7f7      	b.n	80006c4 <main+0x40>
 80006d4:	40020800 	.word	0x40020800
 80006d8:	20000028 	.word	0x20000028
 80006dc:	08003138 	.word	0x08003138
 80006e0:	20000070 	.word	0x20000070

080006e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b094      	sub	sp, #80	; 0x50
 80006e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ea:	f107 031c 	add.w	r3, r7, #28
 80006ee:	2234      	movs	r2, #52	; 0x34
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f002 fd0c 	bl	8003110 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f8:	f107 0308 	add.w	r3, r7, #8
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
 8000706:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000708:	2300      	movs	r3, #0
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	4b2a      	ldr	r3, [pc, #168]	; (80007b8 <SystemClock_Config+0xd4>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000710:	4a29      	ldr	r2, [pc, #164]	; (80007b8 <SystemClock_Config+0xd4>)
 8000712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000716:	6413      	str	r3, [r2, #64]	; 0x40
 8000718:	4b27      	ldr	r3, [pc, #156]	; (80007b8 <SystemClock_Config+0xd4>)
 800071a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000724:	2300      	movs	r3, #0
 8000726:	603b      	str	r3, [r7, #0]
 8000728:	4b24      	ldr	r3, [pc, #144]	; (80007bc <SystemClock_Config+0xd8>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000730:	4a22      	ldr	r2, [pc, #136]	; (80007bc <SystemClock_Config+0xd8>)
 8000732:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000736:	6013      	str	r3, [r2, #0]
 8000738:	4b20      	ldr	r3, [pc, #128]	; (80007bc <SystemClock_Config+0xd8>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000740:	603b      	str	r3, [r7, #0]
 8000742:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000744:	2302      	movs	r3, #2
 8000746:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000748:	2301      	movs	r3, #1
 800074a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800074c:	2310      	movs	r3, #16
 800074e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000750:	2302      	movs	r3, #2
 8000752:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000754:	2300      	movs	r3, #0
 8000756:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000758:	2310      	movs	r3, #16
 800075a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800075c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000760:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000762:	2304      	movs	r3, #4
 8000764:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000766:	2302      	movs	r3, #2
 8000768:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800076a:	2302      	movs	r3, #2
 800076c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076e:	f107 031c 	add.w	r3, r7, #28
 8000772:	4618      	mov	r0, r3
 8000774:	f001 f81c 	bl	80017b0 <HAL_RCC_OscConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800077e:	f000 f81f 	bl	80007c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000782:	230f      	movs	r3, #15
 8000784:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000786:	2302      	movs	r3, #2
 8000788:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800078e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000792:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000794:	2300      	movs	r3, #0
 8000796:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000798:	f107 0308 	add.w	r3, r7, #8
 800079c:	2102      	movs	r1, #2
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 fd3a 	bl	8001218 <HAL_RCC_ClockConfig>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <SystemClock_Config+0xca>
  {
    Error_Handler();
 80007aa:	f000 f809 	bl	80007c0 <Error_Handler>
  }
}
 80007ae:	bf00      	nop
 80007b0:	3750      	adds	r7, #80	; 0x50
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40007000 	.word	0x40007000

080007c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c4:	b672      	cpsid	i
}
 80007c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c8:	e7fe      	b.n	80007c8 <Error_Handler+0x8>
	...

080007cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	4b10      	ldr	r3, [pc, #64]	; (8000818 <HAL_MspInit+0x4c>)
 80007d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007da:	4a0f      	ldr	r2, [pc, #60]	; (8000818 <HAL_MspInit+0x4c>)
 80007dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007e0:	6453      	str	r3, [r2, #68]	; 0x44
 80007e2:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <HAL_MspInit+0x4c>)
 80007e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	603b      	str	r3, [r7, #0]
 80007f2:	4b09      	ldr	r3, [pc, #36]	; (8000818 <HAL_MspInit+0x4c>)
 80007f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f6:	4a08      	ldr	r2, [pc, #32]	; (8000818 <HAL_MspInit+0x4c>)
 80007f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007fc:	6413      	str	r3, [r2, #64]	; 0x40
 80007fe:	4b06      	ldr	r3, [pc, #24]	; (8000818 <HAL_MspInit+0x4c>)
 8000800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000806:	603b      	str	r3, [r7, #0]
 8000808:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800080a:	2007      	movs	r0, #7
 800080c:	f000 fb22 	bl	8000e54 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000810:	bf00      	nop
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40023800 	.word	0x40023800

0800081c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000820:	e7fe      	b.n	8000820 <NMI_Handler+0x4>

08000822 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000826:	e7fe      	b.n	8000826 <HardFault_Handler+0x4>

08000828 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800082c:	e7fe      	b.n	800082c <MemManage_Handler+0x4>

0800082e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800082e:	b480      	push	{r7}
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000832:	e7fe      	b.n	8000832 <BusFault_Handler+0x4>

08000834 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000838:	e7fe      	b.n	8000838 <UsageFault_Handler+0x4>

0800083a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800083e:	bf00      	nop
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr

08000856 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr

08000864 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000868:	f000 f9fe 	bl	8000c68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}

08000870 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <SystemInit+0x20>)
 8000876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800087a:	4a05      	ldr	r2, [pc, #20]	; (8000890 <SystemInit+0x20>)
 800087c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000880:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	e000ed00 	.word	0xe000ed00

08000894 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b096      	sub	sp, #88	; 0x58
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800089a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
 80008a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]
 80008c0:	611a      	str	r2, [r3, #16]
 80008c2:	615a      	str	r2, [r3, #20]
 80008c4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	2220      	movs	r2, #32
 80008ca:	2100      	movs	r1, #0
 80008cc:	4618      	mov	r0, r3
 80008ce:	f002 fc1f 	bl	8003110 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008d2:	4b3e      	ldr	r3, [pc, #248]	; (80009cc <MX_TIM1_Init+0x138>)
 80008d4:	4a3e      	ldr	r2, [pc, #248]	; (80009d0 <MX_TIM1_Init+0x13c>)
 80008d6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 80008d8:	4b3c      	ldr	r3, [pc, #240]	; (80009cc <MX_TIM1_Init+0x138>)
 80008da:	2253      	movs	r2, #83	; 0x53
 80008dc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008de:	4b3b      	ldr	r3, [pc, #236]	; (80009cc <MX_TIM1_Init+0x138>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 40-1;
 80008e4:	4b39      	ldr	r3, [pc, #228]	; (80009cc <MX_TIM1_Init+0x138>)
 80008e6:	2227      	movs	r2, #39	; 0x27
 80008e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ea:	4b38      	ldr	r3, [pc, #224]	; (80009cc <MX_TIM1_Init+0x138>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008f0:	4b36      	ldr	r3, [pc, #216]	; (80009cc <MX_TIM1_Init+0x138>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f6:	4b35      	ldr	r3, [pc, #212]	; (80009cc <MX_TIM1_Init+0x138>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008fc:	4833      	ldr	r0, [pc, #204]	; (80009cc <MX_TIM1_Init+0x138>)
 80008fe:	f001 f9f5 	bl	8001cec <HAL_TIM_Base_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000908:	f7ff ff5a 	bl	80007c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800090c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000910:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000912:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000916:	4619      	mov	r1, r3
 8000918:	482c      	ldr	r0, [pc, #176]	; (80009cc <MX_TIM1_Init+0x138>)
 800091a:	f001 fc19 	bl	8002150 <HAL_TIM_ConfigClockSource>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000924:	f7ff ff4c 	bl	80007c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000928:	4828      	ldr	r0, [pc, #160]	; (80009cc <MX_TIM1_Init+0x138>)
 800092a:	f001 fa2e 	bl	8001d8a <HAL_TIM_PWM_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000934:	f7ff ff44 	bl	80007c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000938:	2300      	movs	r3, #0
 800093a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800093c:	2300      	movs	r3, #0
 800093e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000940:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000944:	4619      	mov	r1, r3
 8000946:	4821      	ldr	r0, [pc, #132]	; (80009cc <MX_TIM1_Init+0x138>)
 8000948:	f001 ffda 	bl	8002900 <HAL_TIMEx_MasterConfigSynchronization>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000952:	f7ff ff35 	bl	80007c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000956:	2360      	movs	r3, #96	; 0x60
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800095a:	2300      	movs	r3, #0
 800095c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800095e:	2300      	movs	r3, #0
 8000960:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000962:	2300      	movs	r3, #0
 8000964:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000966:	2304      	movs	r3, #4
 8000968:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800096a:	2300      	movs	r3, #0
 800096c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800096e:	2300      	movs	r3, #0
 8000970:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000972:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000976:	2200      	movs	r2, #0
 8000978:	4619      	mov	r1, r3
 800097a:	4814      	ldr	r0, [pc, #80]	; (80009cc <MX_TIM1_Init+0x138>)
 800097c:	f001 fb26 	bl	8001fcc <HAL_TIM_PWM_ConfigChannel>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000986:	f7ff ff1b 	bl	80007c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800098a:	2300      	movs	r3, #0
 800098c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800098e:	2300      	movs	r3, #0
 8000990:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000992:	2300      	movs	r3, #0
 8000994:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800099a:	2300      	movs	r3, #0
 800099c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800099e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009a2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009a4:	2300      	movs	r3, #0
 80009a6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	4619      	mov	r1, r3
 80009ac:	4807      	ldr	r0, [pc, #28]	; (80009cc <MX_TIM1_Init+0x138>)
 80009ae:	f002 f823 	bl	80029f8 <HAL_TIMEx_ConfigBreakDeadTime>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80009b8:	f7ff ff02 	bl	80007c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009bc:	4803      	ldr	r0, [pc, #12]	; (80009cc <MX_TIM1_Init+0x138>)
 80009be:	f000 f82b 	bl	8000a18 <HAL_TIM_MspPostInit>

}
 80009c2:	bf00      	nop
 80009c4:	3758      	adds	r7, #88	; 0x58
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000028 	.word	0x20000028
 80009d0:	40010000 	.word	0x40010000

080009d4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b085      	sub	sp, #20
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a0b      	ldr	r2, [pc, #44]	; (8000a10 <HAL_TIM_Base_MspInit+0x3c>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d10d      	bne.n	8000a02 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	4b0a      	ldr	r3, [pc, #40]	; (8000a14 <HAL_TIM_Base_MspInit+0x40>)
 80009ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ee:	4a09      	ldr	r2, [pc, #36]	; (8000a14 <HAL_TIM_Base_MspInit+0x40>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	6453      	str	r3, [r2, #68]	; 0x44
 80009f6:	4b07      	ldr	r3, [pc, #28]	; (8000a14 <HAL_TIM_Base_MspInit+0x40>)
 80009f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000a02:	bf00      	nop
 8000a04:	3714      	adds	r7, #20
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	40010000 	.word	0x40010000
 8000a14:	40023800 	.word	0x40023800

08000a18 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b088      	sub	sp, #32
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a20:	f107 030c 	add.w	r3, r7, #12
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a12      	ldr	r2, [pc, #72]	; (8000a80 <HAL_TIM_MspPostInit+0x68>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d11e      	bne.n	8000a78 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60bb      	str	r3, [r7, #8]
 8000a3e:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <HAL_TIM_MspPostInit+0x6c>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a10      	ldr	r2, [pc, #64]	; (8000a84 <HAL_TIM_MspPostInit+0x6c>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <HAL_TIM_MspPostInit+0x6c>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM1_Pin;
 8000a56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a5a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a64:	2300      	movs	r3, #0
 8000a66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM1_GPIO_Port, &GPIO_InitStruct);
 8000a6c:	f107 030c 	add.w	r3, r7, #12
 8000a70:	4619      	mov	r1, r3
 8000a72:	4805      	ldr	r0, [pc, #20]	; (8000a88 <HAL_TIM_MspPostInit+0x70>)
 8000a74:	f000 fa22 	bl	8000ebc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000a78:	bf00      	nop
 8000a7a:	3720      	adds	r7, #32
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40010000 	.word	0x40010000
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40020000 	.word	0x40020000

08000a8c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a90:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <MX_USART2_UART_Init+0x4c>)
 8000a92:	4a12      	ldr	r2, [pc, #72]	; (8000adc <MX_USART2_UART_Init+0x50>)
 8000a94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a96:	4b10      	ldr	r3, [pc, #64]	; (8000ad8 <MX_USART2_UART_Init+0x4c>)
 8000a98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <MX_USART2_UART_Init+0x4c>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <MX_USART2_UART_Init+0x4c>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aaa:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <MX_USART2_UART_Init+0x4c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ab0:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <MX_USART2_UART_Init+0x4c>)
 8000ab2:	220c      	movs	r2, #12
 8000ab4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab6:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <MX_USART2_UART_Init+0x4c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000abc:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <MX_USART2_UART_Init+0x4c>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ac2:	4805      	ldr	r0, [pc, #20]	; (8000ad8 <MX_USART2_UART_Init+0x4c>)
 8000ac4:	f001 ffea 	bl	8002a9c <HAL_UART_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ace:	f7ff fe77 	bl	80007c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000070 	.word	0x20000070
 8000adc:	40004400 	.word	0x40004400

08000ae0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08a      	sub	sp, #40	; 0x28
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a19      	ldr	r2, [pc, #100]	; (8000b64 <HAL_UART_MspInit+0x84>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d12b      	bne.n	8000b5a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	613b      	str	r3, [r7, #16]
 8000b06:	4b18      	ldr	r3, [pc, #96]	; (8000b68 <HAL_UART_MspInit+0x88>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0a:	4a17      	ldr	r2, [pc, #92]	; (8000b68 <HAL_UART_MspInit+0x88>)
 8000b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b10:	6413      	str	r3, [r2, #64]	; 0x40
 8000b12:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <HAL_UART_MspInit+0x88>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b1a:	613b      	str	r3, [r7, #16]
 8000b1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <HAL_UART_MspInit+0x88>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	4a10      	ldr	r2, [pc, #64]	; (8000b68 <HAL_UART_MspInit+0x88>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <HAL_UART_MspInit+0x88>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b3a:	230c      	movs	r3, #12
 8000b3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b46:	2303      	movs	r3, #3
 8000b48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b4a:	2307      	movs	r3, #7
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4e:	f107 0314 	add.w	r3, r7, #20
 8000b52:	4619      	mov	r1, r3
 8000b54:	4805      	ldr	r0, [pc, #20]	; (8000b6c <HAL_UART_MspInit+0x8c>)
 8000b56:	f000 f9b1 	bl	8000ebc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b5a:	bf00      	nop
 8000b5c:	3728      	adds	r7, #40	; 0x28
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40004400 	.word	0x40004400
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40020000 	.word	0x40020000

08000b70 <Reset_Handler>:
 8000b70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ba8 <LoopFillZerobss+0x12>
 8000b74:	480d      	ldr	r0, [pc, #52]	; (8000bac <LoopFillZerobss+0x16>)
 8000b76:	490e      	ldr	r1, [pc, #56]	; (8000bb0 <LoopFillZerobss+0x1a>)
 8000b78:	4a0e      	ldr	r2, [pc, #56]	; (8000bb4 <LoopFillZerobss+0x1e>)
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	e002      	b.n	8000b84 <LoopCopyDataInit>

08000b7e <CopyDataInit>:
 8000b7e:	58d4      	ldr	r4, [r2, r3]
 8000b80:	50c4      	str	r4, [r0, r3]
 8000b82:	3304      	adds	r3, #4

08000b84 <LoopCopyDataInit>:
 8000b84:	18c4      	adds	r4, r0, r3
 8000b86:	428c      	cmp	r4, r1
 8000b88:	d3f9      	bcc.n	8000b7e <CopyDataInit>
 8000b8a:	4a0b      	ldr	r2, [pc, #44]	; (8000bb8 <LoopFillZerobss+0x22>)
 8000b8c:	4c0b      	ldr	r4, [pc, #44]	; (8000bbc <LoopFillZerobss+0x26>)
 8000b8e:	2300      	movs	r3, #0
 8000b90:	e001      	b.n	8000b96 <LoopFillZerobss>

08000b92 <FillZerobss>:
 8000b92:	6013      	str	r3, [r2, #0]
 8000b94:	3204      	adds	r2, #4

08000b96 <LoopFillZerobss>:
 8000b96:	42a2      	cmp	r2, r4
 8000b98:	d3fb      	bcc.n	8000b92 <FillZerobss>
 8000b9a:	f7ff fe69 	bl	8000870 <SystemInit>
 8000b9e:	f002 fa93 	bl	80030c8 <__libc_init_array>
 8000ba2:	f7ff fd6f 	bl	8000684 <main>
 8000ba6:	4770      	bx	lr
 8000ba8:	20020000 	.word	0x20020000
 8000bac:	20000000 	.word	0x20000000
 8000bb0:	2000000c 	.word	0x2000000c
 8000bb4:	08003174 	.word	0x08003174
 8000bb8:	2000000c 	.word	0x2000000c
 8000bbc:	200000b8 	.word	0x200000b8

08000bc0 <ADC_IRQHandler>:
 8000bc0:	e7fe      	b.n	8000bc0 <ADC_IRQHandler>
	...

08000bc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bc8:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <HAL_Init+0x40>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a0d      	ldr	r2, [pc, #52]	; (8000c04 <HAL_Init+0x40>)
 8000bce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bd4:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <HAL_Init+0x40>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a0a      	ldr	r2, [pc, #40]	; (8000c04 <HAL_Init+0x40>)
 8000bda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be0:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <HAL_Init+0x40>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a07      	ldr	r2, [pc, #28]	; (8000c04 <HAL_Init+0x40>)
 8000be6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bec:	2003      	movs	r0, #3
 8000bee:	f000 f931 	bl	8000e54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	f000 f808 	bl	8000c08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bf8:	f7ff fde8 	bl	80007cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bfc:	2300      	movs	r3, #0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40023c00 	.word	0x40023c00

08000c08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c10:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <HAL_InitTick+0x54>)
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <HAL_InitTick+0x58>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	4619      	mov	r1, r3
 8000c1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c26:	4618      	mov	r0, r3
 8000c28:	f000 f93b 	bl	8000ea2 <HAL_SYSTICK_Config>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	e00e      	b.n	8000c54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2b0f      	cmp	r3, #15
 8000c3a:	d80a      	bhi.n	8000c52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	6879      	ldr	r1, [r7, #4]
 8000c40:	f04f 30ff 	mov.w	r0, #4294967295
 8000c44:	f000 f911 	bl	8000e6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c48:	4a06      	ldr	r2, [pc, #24]	; (8000c64 <HAL_InitTick+0x5c>)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	e000      	b.n	8000c54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20000000 	.word	0x20000000
 8000c60:	20000008 	.word	0x20000008
 8000c64:	20000004 	.word	0x20000004

08000c68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <HAL_IncTick+0x20>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	461a      	mov	r2, r3
 8000c72:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <HAL_IncTick+0x24>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4413      	add	r3, r2
 8000c78:	4a04      	ldr	r2, [pc, #16]	; (8000c8c <HAL_IncTick+0x24>)
 8000c7a:	6013      	str	r3, [r2, #0]
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	20000008 	.word	0x20000008
 8000c8c:	200000b4 	.word	0x200000b4

08000c90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  return uwTick;
 8000c94:	4b03      	ldr	r3, [pc, #12]	; (8000ca4 <HAL_GetTick+0x14>)
 8000c96:	681b      	ldr	r3, [r3, #0]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	200000b4 	.word	0x200000b4

08000ca8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cb0:	f7ff ffee 	bl	8000c90 <HAL_GetTick>
 8000cb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cc0:	d005      	beq.n	8000cce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cc2:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <HAL_Delay+0x44>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	4413      	add	r3, r2
 8000ccc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cce:	bf00      	nop
 8000cd0:	f7ff ffde 	bl	8000c90 <HAL_GetTick>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	68fa      	ldr	r2, [r7, #12]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d8f7      	bhi.n	8000cd0 <HAL_Delay+0x28>
  {
  }
}
 8000ce0:	bf00      	nop
 8000ce2:	bf00      	nop
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000008 	.word	0x20000008

08000cf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b085      	sub	sp, #20
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	f003 0307 	and.w	r3, r3, #7
 8000cfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d00:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <__NVIC_SetPriorityGrouping+0x44>)
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d06:	68ba      	ldr	r2, [r7, #8]
 8000d08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d22:	4a04      	ldr	r2, [pc, #16]	; (8000d34 <__NVIC_SetPriorityGrouping+0x44>)
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	60d3      	str	r3, [r2, #12]
}
 8000d28:	bf00      	nop
 8000d2a:	3714      	adds	r7, #20
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d3c:	4b04      	ldr	r3, [pc, #16]	; (8000d50 <__NVIC_GetPriorityGrouping+0x18>)
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	0a1b      	lsrs	r3, r3, #8
 8000d42:	f003 0307 	and.w	r3, r3, #7
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	6039      	str	r1, [r7, #0]
 8000d5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	db0a      	blt.n	8000d7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	490c      	ldr	r1, [pc, #48]	; (8000da0 <__NVIC_SetPriority+0x4c>)
 8000d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d72:	0112      	lsls	r2, r2, #4
 8000d74:	b2d2      	uxtb	r2, r2
 8000d76:	440b      	add	r3, r1
 8000d78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d7c:	e00a      	b.n	8000d94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	4908      	ldr	r1, [pc, #32]	; (8000da4 <__NVIC_SetPriority+0x50>)
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	f003 030f 	and.w	r3, r3, #15
 8000d8a:	3b04      	subs	r3, #4
 8000d8c:	0112      	lsls	r2, r2, #4
 8000d8e:	b2d2      	uxtb	r2, r2
 8000d90:	440b      	add	r3, r1
 8000d92:	761a      	strb	r2, [r3, #24]
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000e100 	.word	0xe000e100
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b089      	sub	sp, #36	; 0x24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	f1c3 0307 	rsb	r3, r3, #7
 8000dc2:	2b04      	cmp	r3, #4
 8000dc4:	bf28      	it	cs
 8000dc6:	2304      	movcs	r3, #4
 8000dc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	3304      	adds	r3, #4
 8000dce:	2b06      	cmp	r3, #6
 8000dd0:	d902      	bls.n	8000dd8 <NVIC_EncodePriority+0x30>
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	3b03      	subs	r3, #3
 8000dd6:	e000      	b.n	8000dda <NVIC_EncodePriority+0x32>
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8000de0:	69bb      	ldr	r3, [r7, #24]
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	43da      	mvns	r2, r3
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	401a      	ands	r2, r3
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df0:	f04f 31ff 	mov.w	r1, #4294967295
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfa:	43d9      	mvns	r1, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e00:	4313      	orrs	r3, r2
         );
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3724      	adds	r7, #36	; 0x24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
	...

08000e10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e20:	d301      	bcc.n	8000e26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e22:	2301      	movs	r3, #1
 8000e24:	e00f      	b.n	8000e46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e26:	4a0a      	ldr	r2, [pc, #40]	; (8000e50 <SysTick_Config+0x40>)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e2e:	210f      	movs	r1, #15
 8000e30:	f04f 30ff 	mov.w	r0, #4294967295
 8000e34:	f7ff ff8e 	bl	8000d54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e38:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <SysTick_Config+0x40>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e3e:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <SysTick_Config+0x40>)
 8000e40:	2207      	movs	r2, #7
 8000e42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	e000e010 	.word	0xe000e010

08000e54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	f7ff ff47 	bl	8000cf0 <__NVIC_SetPriorityGrouping>
}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b086      	sub	sp, #24
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	4603      	mov	r3, r0
 8000e72:	60b9      	str	r1, [r7, #8]
 8000e74:	607a      	str	r2, [r7, #4]
 8000e76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e7c:	f7ff ff5c 	bl	8000d38 <__NVIC_GetPriorityGrouping>
 8000e80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	68b9      	ldr	r1, [r7, #8]
 8000e86:	6978      	ldr	r0, [r7, #20]
 8000e88:	f7ff ff8e 	bl	8000da8 <NVIC_EncodePriority>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e92:	4611      	mov	r1, r2
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff ff5d 	bl	8000d54 <__NVIC_SetPriority>
}
 8000e9a:	bf00      	nop
 8000e9c:	3718      	adds	r7, #24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f7ff ffb0 	bl	8000e10 <SysTick_Config>
 8000eb0:	4603      	mov	r3, r0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
	...

08000ebc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b089      	sub	sp, #36	; 0x24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61fb      	str	r3, [r7, #28]
 8000ed6:	e165      	b.n	80011a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ed8:	2201      	movs	r2, #1
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	697a      	ldr	r2, [r7, #20]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	f040 8154 	bne.w	800119e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f003 0303 	and.w	r3, r3, #3
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d005      	beq.n	8000f0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d130      	bne.n	8000f70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	2203      	movs	r2, #3
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	4013      	ands	r3, r2
 8000f24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	68da      	ldr	r2, [r3, #12]
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f44:	2201      	movs	r2, #1
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	4013      	ands	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	091b      	lsrs	r3, r3, #4
 8000f5a:	f003 0201 	and.w	r2, r3, #1
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f003 0303 	and.w	r3, r3, #3
 8000f78:	2b03      	cmp	r3, #3
 8000f7a:	d017      	beq.n	8000fac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	2203      	movs	r2, #3
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	4013      	ands	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	689a      	ldr	r2, [r3, #8]
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f003 0303 	and.w	r3, r3, #3
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d123      	bne.n	8001000 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	08da      	lsrs	r2, r3, #3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3208      	adds	r2, #8
 8000fc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	f003 0307 	and.w	r3, r3, #7
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	220f      	movs	r2, #15
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	691a      	ldr	r2, [r3, #16]
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	f003 0307 	and.w	r3, r3, #7
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	08da      	lsrs	r2, r3, #3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	3208      	adds	r2, #8
 8000ffa:	69b9      	ldr	r1, [r7, #24]
 8000ffc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	2203      	movs	r2, #3
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	43db      	mvns	r3, r3
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4013      	ands	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f003 0203 	and.w	r2, r3, #3
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4313      	orrs	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800103c:	2b00      	cmp	r3, #0
 800103e:	f000 80ae 	beq.w	800119e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	4b5d      	ldr	r3, [pc, #372]	; (80011bc <HAL_GPIO_Init+0x300>)
 8001048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104a:	4a5c      	ldr	r2, [pc, #368]	; (80011bc <HAL_GPIO_Init+0x300>)
 800104c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001050:	6453      	str	r3, [r2, #68]	; 0x44
 8001052:	4b5a      	ldr	r3, [pc, #360]	; (80011bc <HAL_GPIO_Init+0x300>)
 8001054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001056:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800105e:	4a58      	ldr	r2, [pc, #352]	; (80011c0 <HAL_GPIO_Init+0x304>)
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	089b      	lsrs	r3, r3, #2
 8001064:	3302      	adds	r3, #2
 8001066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800106a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	f003 0303 	and.w	r3, r3, #3
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	220f      	movs	r2, #15
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	43db      	mvns	r3, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4013      	ands	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a4f      	ldr	r2, [pc, #316]	; (80011c4 <HAL_GPIO_Init+0x308>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d025      	beq.n	80010d6 <HAL_GPIO_Init+0x21a>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a4e      	ldr	r2, [pc, #312]	; (80011c8 <HAL_GPIO_Init+0x30c>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d01f      	beq.n	80010d2 <HAL_GPIO_Init+0x216>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a4d      	ldr	r2, [pc, #308]	; (80011cc <HAL_GPIO_Init+0x310>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d019      	beq.n	80010ce <HAL_GPIO_Init+0x212>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a4c      	ldr	r2, [pc, #304]	; (80011d0 <HAL_GPIO_Init+0x314>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d013      	beq.n	80010ca <HAL_GPIO_Init+0x20e>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a4b      	ldr	r2, [pc, #300]	; (80011d4 <HAL_GPIO_Init+0x318>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d00d      	beq.n	80010c6 <HAL_GPIO_Init+0x20a>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a4a      	ldr	r2, [pc, #296]	; (80011d8 <HAL_GPIO_Init+0x31c>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d007      	beq.n	80010c2 <HAL_GPIO_Init+0x206>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a49      	ldr	r2, [pc, #292]	; (80011dc <HAL_GPIO_Init+0x320>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d101      	bne.n	80010be <HAL_GPIO_Init+0x202>
 80010ba:	2306      	movs	r3, #6
 80010bc:	e00c      	b.n	80010d8 <HAL_GPIO_Init+0x21c>
 80010be:	2307      	movs	r3, #7
 80010c0:	e00a      	b.n	80010d8 <HAL_GPIO_Init+0x21c>
 80010c2:	2305      	movs	r3, #5
 80010c4:	e008      	b.n	80010d8 <HAL_GPIO_Init+0x21c>
 80010c6:	2304      	movs	r3, #4
 80010c8:	e006      	b.n	80010d8 <HAL_GPIO_Init+0x21c>
 80010ca:	2303      	movs	r3, #3
 80010cc:	e004      	b.n	80010d8 <HAL_GPIO_Init+0x21c>
 80010ce:	2302      	movs	r3, #2
 80010d0:	e002      	b.n	80010d8 <HAL_GPIO_Init+0x21c>
 80010d2:	2301      	movs	r3, #1
 80010d4:	e000      	b.n	80010d8 <HAL_GPIO_Init+0x21c>
 80010d6:	2300      	movs	r3, #0
 80010d8:	69fa      	ldr	r2, [r7, #28]
 80010da:	f002 0203 	and.w	r2, r2, #3
 80010de:	0092      	lsls	r2, r2, #2
 80010e0:	4093      	lsls	r3, r2
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010e8:	4935      	ldr	r1, [pc, #212]	; (80011c0 <HAL_GPIO_Init+0x304>)
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	089b      	lsrs	r3, r3, #2
 80010ee:	3302      	adds	r3, #2
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010f6:	4b3a      	ldr	r3, [pc, #232]	; (80011e0 <HAL_GPIO_Init+0x324>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	43db      	mvns	r3, r3
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	4013      	ands	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d003      	beq.n	800111a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	4313      	orrs	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800111a:	4a31      	ldr	r2, [pc, #196]	; (80011e0 <HAL_GPIO_Init+0x324>)
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001120:	4b2f      	ldr	r3, [pc, #188]	; (80011e0 <HAL_GPIO_Init+0x324>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	43db      	mvns	r3, r3
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4013      	ands	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001138:	2b00      	cmp	r3, #0
 800113a:	d003      	beq.n	8001144 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	4313      	orrs	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001144:	4a26      	ldr	r2, [pc, #152]	; (80011e0 <HAL_GPIO_Init+0x324>)
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800114a:	4b25      	ldr	r3, [pc, #148]	; (80011e0 <HAL_GPIO_Init+0x324>)
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	43db      	mvns	r3, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4013      	ands	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	4313      	orrs	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800116e:	4a1c      	ldr	r2, [pc, #112]	; (80011e0 <HAL_GPIO_Init+0x324>)
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001174:	4b1a      	ldr	r3, [pc, #104]	; (80011e0 <HAL_GPIO_Init+0x324>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	43db      	mvns	r3, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4013      	ands	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d003      	beq.n	8001198 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	4313      	orrs	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001198:	4a11      	ldr	r2, [pc, #68]	; (80011e0 <HAL_GPIO_Init+0x324>)
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	3301      	adds	r3, #1
 80011a2:	61fb      	str	r3, [r7, #28]
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	2b0f      	cmp	r3, #15
 80011a8:	f67f ae96 	bls.w	8000ed8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011ac:	bf00      	nop
 80011ae:	bf00      	nop
 80011b0:	3724      	adds	r7, #36	; 0x24
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40013800 	.word	0x40013800
 80011c4:	40020000 	.word	0x40020000
 80011c8:	40020400 	.word	0x40020400
 80011cc:	40020800 	.word	0x40020800
 80011d0:	40020c00 	.word	0x40020c00
 80011d4:	40021000 	.word	0x40021000
 80011d8:	40021400 	.word	0x40021400
 80011dc:	40021800 	.word	0x40021800
 80011e0:	40013c00 	.word	0x40013c00

080011e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	460b      	mov	r3, r1
 80011ee:	807b      	strh	r3, [r7, #2]
 80011f0:	4613      	mov	r3, r2
 80011f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011f4:	787b      	ldrb	r3, [r7, #1]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d003      	beq.n	8001202 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011fa:	887a      	ldrh	r2, [r7, #2]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001200:	e003      	b.n	800120a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001202:	887b      	ldrh	r3, [r7, #2]
 8001204:	041a      	lsls	r2, r3, #16
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	619a      	str	r2, [r3, #24]
}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
	...

08001218 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d101      	bne.n	800122c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e0cc      	b.n	80013c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800122c:	4b68      	ldr	r3, [pc, #416]	; (80013d0 <HAL_RCC_ClockConfig+0x1b8>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 030f 	and.w	r3, r3, #15
 8001234:	683a      	ldr	r2, [r7, #0]
 8001236:	429a      	cmp	r2, r3
 8001238:	d90c      	bls.n	8001254 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800123a:	4b65      	ldr	r3, [pc, #404]	; (80013d0 <HAL_RCC_ClockConfig+0x1b8>)
 800123c:	683a      	ldr	r2, [r7, #0]
 800123e:	b2d2      	uxtb	r2, r2
 8001240:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001242:	4b63      	ldr	r3, [pc, #396]	; (80013d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 030f 	and.w	r3, r3, #15
 800124a:	683a      	ldr	r2, [r7, #0]
 800124c:	429a      	cmp	r2, r3
 800124e:	d001      	beq.n	8001254 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	e0b8      	b.n	80013c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 0302 	and.w	r3, r3, #2
 800125c:	2b00      	cmp	r3, #0
 800125e:	d020      	beq.n	80012a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 0304 	and.w	r3, r3, #4
 8001268:	2b00      	cmp	r3, #0
 800126a:	d005      	beq.n	8001278 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800126c:	4b59      	ldr	r3, [pc, #356]	; (80013d4 <HAL_RCC_ClockConfig+0x1bc>)
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	4a58      	ldr	r2, [pc, #352]	; (80013d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001272:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001276:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0308 	and.w	r3, r3, #8
 8001280:	2b00      	cmp	r3, #0
 8001282:	d005      	beq.n	8001290 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001284:	4b53      	ldr	r3, [pc, #332]	; (80013d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	4a52      	ldr	r2, [pc, #328]	; (80013d4 <HAL_RCC_ClockConfig+0x1bc>)
 800128a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800128e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001290:	4b50      	ldr	r3, [pc, #320]	; (80013d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	494d      	ldr	r1, [pc, #308]	; (80013d4 <HAL_RCC_ClockConfig+0x1bc>)
 800129e:	4313      	orrs	r3, r2
 80012a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d044      	beq.n	8001338 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d107      	bne.n	80012c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012b6:	4b47      	ldr	r3, [pc, #284]	; (80013d4 <HAL_RCC_ClockConfig+0x1bc>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d119      	bne.n	80012f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e07f      	b.n	80013c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d003      	beq.n	80012d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012d2:	2b03      	cmp	r3, #3
 80012d4:	d107      	bne.n	80012e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012d6:	4b3f      	ldr	r3, [pc, #252]	; (80013d4 <HAL_RCC_ClockConfig+0x1bc>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d109      	bne.n	80012f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e06f      	b.n	80013c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012e6:	4b3b      	ldr	r3, [pc, #236]	; (80013d4 <HAL_RCC_ClockConfig+0x1bc>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d101      	bne.n	80012f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e067      	b.n	80013c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012f6:	4b37      	ldr	r3, [pc, #220]	; (80013d4 <HAL_RCC_ClockConfig+0x1bc>)
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	f023 0203 	bic.w	r2, r3, #3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	4934      	ldr	r1, [pc, #208]	; (80013d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001304:	4313      	orrs	r3, r2
 8001306:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001308:	f7ff fcc2 	bl	8000c90 <HAL_GetTick>
 800130c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800130e:	e00a      	b.n	8001326 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001310:	f7ff fcbe 	bl	8000c90 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	f241 3288 	movw	r2, #5000	; 0x1388
 800131e:	4293      	cmp	r3, r2
 8001320:	d901      	bls.n	8001326 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e04f      	b.n	80013c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001326:	4b2b      	ldr	r3, [pc, #172]	; (80013d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f003 020c 	and.w	r2, r3, #12
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	429a      	cmp	r2, r3
 8001336:	d1eb      	bne.n	8001310 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001338:	4b25      	ldr	r3, [pc, #148]	; (80013d0 <HAL_RCC_ClockConfig+0x1b8>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 030f 	and.w	r3, r3, #15
 8001340:	683a      	ldr	r2, [r7, #0]
 8001342:	429a      	cmp	r2, r3
 8001344:	d20c      	bcs.n	8001360 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001346:	4b22      	ldr	r3, [pc, #136]	; (80013d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001348:	683a      	ldr	r2, [r7, #0]
 800134a:	b2d2      	uxtb	r2, r2
 800134c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800134e:	4b20      	ldr	r3, [pc, #128]	; (80013d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 030f 	and.w	r3, r3, #15
 8001356:	683a      	ldr	r2, [r7, #0]
 8001358:	429a      	cmp	r2, r3
 800135a:	d001      	beq.n	8001360 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e032      	b.n	80013c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0304 	and.w	r3, r3, #4
 8001368:	2b00      	cmp	r3, #0
 800136a:	d008      	beq.n	800137e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800136c:	4b19      	ldr	r3, [pc, #100]	; (80013d4 <HAL_RCC_ClockConfig+0x1bc>)
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	4916      	ldr	r1, [pc, #88]	; (80013d4 <HAL_RCC_ClockConfig+0x1bc>)
 800137a:	4313      	orrs	r3, r2
 800137c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0308 	and.w	r3, r3, #8
 8001386:	2b00      	cmp	r3, #0
 8001388:	d009      	beq.n	800139e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800138a:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <HAL_RCC_ClockConfig+0x1bc>)
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	691b      	ldr	r3, [r3, #16]
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	490e      	ldr	r1, [pc, #56]	; (80013d4 <HAL_RCC_ClockConfig+0x1bc>)
 800139a:	4313      	orrs	r3, r2
 800139c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800139e:	f000 f855 	bl	800144c <HAL_RCC_GetSysClockFreq>
 80013a2:	4602      	mov	r2, r0
 80013a4:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <HAL_RCC_ClockConfig+0x1bc>)
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	091b      	lsrs	r3, r3, #4
 80013aa:	f003 030f 	and.w	r3, r3, #15
 80013ae:	490a      	ldr	r1, [pc, #40]	; (80013d8 <HAL_RCC_ClockConfig+0x1c0>)
 80013b0:	5ccb      	ldrb	r3, [r1, r3]
 80013b2:	fa22 f303 	lsr.w	r3, r2, r3
 80013b6:	4a09      	ldr	r2, [pc, #36]	; (80013dc <HAL_RCC_ClockConfig+0x1c4>)
 80013b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80013ba:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <HAL_RCC_ClockConfig+0x1c8>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff fc22 	bl	8000c08 <HAL_InitTick>

  return HAL_OK;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40023c00 	.word	0x40023c00
 80013d4:	40023800 	.word	0x40023800
 80013d8:	0800314c 	.word	0x0800314c
 80013dc:	20000000 	.word	0x20000000
 80013e0:	20000004 	.word	0x20000004

080013e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013e8:	4b03      	ldr	r3, [pc, #12]	; (80013f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80013ea:	681b      	ldr	r3, [r3, #0]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	20000000 	.word	0x20000000

080013fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001400:	f7ff fff0 	bl	80013e4 <HAL_RCC_GetHCLKFreq>
 8001404:	4602      	mov	r2, r0
 8001406:	4b05      	ldr	r3, [pc, #20]	; (800141c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	0a9b      	lsrs	r3, r3, #10
 800140c:	f003 0307 	and.w	r3, r3, #7
 8001410:	4903      	ldr	r1, [pc, #12]	; (8001420 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001412:	5ccb      	ldrb	r3, [r1, r3]
 8001414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001418:	4618      	mov	r0, r3
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40023800 	.word	0x40023800
 8001420:	0800315c 	.word	0x0800315c

08001424 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001428:	f7ff ffdc 	bl	80013e4 <HAL_RCC_GetHCLKFreq>
 800142c:	4602      	mov	r2, r0
 800142e:	4b05      	ldr	r3, [pc, #20]	; (8001444 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	0b5b      	lsrs	r3, r3, #13
 8001434:	f003 0307 	and.w	r3, r3, #7
 8001438:	4903      	ldr	r1, [pc, #12]	; (8001448 <HAL_RCC_GetPCLK2Freq+0x24>)
 800143a:	5ccb      	ldrb	r3, [r1, r3]
 800143c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001440:	4618      	mov	r0, r3
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40023800 	.word	0x40023800
 8001448:	0800315c 	.word	0x0800315c

0800144c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800144c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001450:	b088      	sub	sp, #32
 8001452:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001458:	2300      	movs	r3, #0
 800145a:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 800145c:	2300      	movs	r3, #0
 800145e:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8001460:	2300      	movs	r3, #0
 8001462:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8001464:	2300      	movs	r3, #0
 8001466:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001468:	4bce      	ldr	r3, [pc, #824]	; (80017a4 <HAL_RCC_GetSysClockFreq+0x358>)
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	f003 030c 	and.w	r3, r3, #12
 8001470:	2b0c      	cmp	r3, #12
 8001472:	f200 818d 	bhi.w	8001790 <HAL_RCC_GetSysClockFreq+0x344>
 8001476:	a201      	add	r2, pc, #4	; (adr r2, 800147c <HAL_RCC_GetSysClockFreq+0x30>)
 8001478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800147c:	080014b1 	.word	0x080014b1
 8001480:	08001791 	.word	0x08001791
 8001484:	08001791 	.word	0x08001791
 8001488:	08001791 	.word	0x08001791
 800148c:	080014b7 	.word	0x080014b7
 8001490:	08001791 	.word	0x08001791
 8001494:	08001791 	.word	0x08001791
 8001498:	08001791 	.word	0x08001791
 800149c:	080014bd 	.word	0x080014bd
 80014a0:	08001791 	.word	0x08001791
 80014a4:	08001791 	.word	0x08001791
 80014a8:	08001791 	.word	0x08001791
 80014ac:	08001631 	.word	0x08001631
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80014b0:	4bbd      	ldr	r3, [pc, #756]	; (80017a8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80014b2:	61bb      	str	r3, [r7, #24]
       break;
 80014b4:	e16f      	b.n	8001796 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80014b6:	4bbd      	ldr	r3, [pc, #756]	; (80017ac <HAL_RCC_GetSysClockFreq+0x360>)
 80014b8:	61bb      	str	r3, [r7, #24]
      break;
 80014ba:	e16c      	b.n	8001796 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014bc:	4bb9      	ldr	r3, [pc, #740]	; (80017a4 <HAL_RCC_GetSysClockFreq+0x358>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014c4:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014c6:	4bb7      	ldr	r3, [pc, #732]	; (80017a4 <HAL_RCC_GetSysClockFreq+0x358>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d053      	beq.n	800157a <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014d2:	4bb4      	ldr	r3, [pc, #720]	; (80017a4 <HAL_RCC_GetSysClockFreq+0x358>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	099b      	lsrs	r3, r3, #6
 80014d8:	461a      	mov	r2, r3
 80014da:	f04f 0300 	mov.w	r3, #0
 80014de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80014e2:	f04f 0100 	mov.w	r1, #0
 80014e6:	ea02 0400 	and.w	r4, r2, r0
 80014ea:	603c      	str	r4, [r7, #0]
 80014ec:	400b      	ands	r3, r1
 80014ee:	607b      	str	r3, [r7, #4]
 80014f0:	e9d7 4500 	ldrd	r4, r5, [r7]
 80014f4:	4620      	mov	r0, r4
 80014f6:	4629      	mov	r1, r5
 80014f8:	f04f 0200 	mov.w	r2, #0
 80014fc:	f04f 0300 	mov.w	r3, #0
 8001500:	014b      	lsls	r3, r1, #5
 8001502:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001506:	0142      	lsls	r2, r0, #5
 8001508:	4610      	mov	r0, r2
 800150a:	4619      	mov	r1, r3
 800150c:	4623      	mov	r3, r4
 800150e:	1ac0      	subs	r0, r0, r3
 8001510:	462b      	mov	r3, r5
 8001512:	eb61 0103 	sbc.w	r1, r1, r3
 8001516:	f04f 0200 	mov.w	r2, #0
 800151a:	f04f 0300 	mov.w	r3, #0
 800151e:	018b      	lsls	r3, r1, #6
 8001520:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001524:	0182      	lsls	r2, r0, #6
 8001526:	1a12      	subs	r2, r2, r0
 8001528:	eb63 0301 	sbc.w	r3, r3, r1
 800152c:	f04f 0000 	mov.w	r0, #0
 8001530:	f04f 0100 	mov.w	r1, #0
 8001534:	00d9      	lsls	r1, r3, #3
 8001536:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800153a:	00d0      	lsls	r0, r2, #3
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	4621      	mov	r1, r4
 8001542:	1852      	adds	r2, r2, r1
 8001544:	4629      	mov	r1, r5
 8001546:	eb43 0101 	adc.w	r1, r3, r1
 800154a:	460b      	mov	r3, r1
 800154c:	f04f 0000 	mov.w	r0, #0
 8001550:	f04f 0100 	mov.w	r1, #0
 8001554:	0259      	lsls	r1, r3, #9
 8001556:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800155a:	0250      	lsls	r0, r2, #9
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4610      	mov	r0, r2
 8001562:	4619      	mov	r1, r3
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	461a      	mov	r2, r3
 8001568:	f04f 0300 	mov.w	r3, #0
 800156c:	f7fe fe4a 	bl	8000204 <__aeabi_uldivmod>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	4613      	mov	r3, r2
 8001576:	61fb      	str	r3, [r7, #28]
 8001578:	e04c      	b.n	8001614 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800157a:	4b8a      	ldr	r3, [pc, #552]	; (80017a4 <HAL_RCC_GetSysClockFreq+0x358>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	099b      	lsrs	r3, r3, #6
 8001580:	461a      	mov	r2, r3
 8001582:	f04f 0300 	mov.w	r3, #0
 8001586:	f240 10ff 	movw	r0, #511	; 0x1ff
 800158a:	f04f 0100 	mov.w	r1, #0
 800158e:	ea02 0a00 	and.w	sl, r2, r0
 8001592:	ea03 0b01 	and.w	fp, r3, r1
 8001596:	4650      	mov	r0, sl
 8001598:	4659      	mov	r1, fp
 800159a:	f04f 0200 	mov.w	r2, #0
 800159e:	f04f 0300 	mov.w	r3, #0
 80015a2:	014b      	lsls	r3, r1, #5
 80015a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80015a8:	0142      	lsls	r2, r0, #5
 80015aa:	4610      	mov	r0, r2
 80015ac:	4619      	mov	r1, r3
 80015ae:	ebb0 000a 	subs.w	r0, r0, sl
 80015b2:	eb61 010b 	sbc.w	r1, r1, fp
 80015b6:	f04f 0200 	mov.w	r2, #0
 80015ba:	f04f 0300 	mov.w	r3, #0
 80015be:	018b      	lsls	r3, r1, #6
 80015c0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80015c4:	0182      	lsls	r2, r0, #6
 80015c6:	1a12      	subs	r2, r2, r0
 80015c8:	eb63 0301 	sbc.w	r3, r3, r1
 80015cc:	f04f 0000 	mov.w	r0, #0
 80015d0:	f04f 0100 	mov.w	r1, #0
 80015d4:	00d9      	lsls	r1, r3, #3
 80015d6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80015da:	00d0      	lsls	r0, r2, #3
 80015dc:	4602      	mov	r2, r0
 80015de:	460b      	mov	r3, r1
 80015e0:	eb12 020a 	adds.w	r2, r2, sl
 80015e4:	eb43 030b 	adc.w	r3, r3, fp
 80015e8:	f04f 0000 	mov.w	r0, #0
 80015ec:	f04f 0100 	mov.w	r1, #0
 80015f0:	0299      	lsls	r1, r3, #10
 80015f2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80015f6:	0290      	lsls	r0, r2, #10
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	4610      	mov	r0, r2
 80015fe:	4619      	mov	r1, r3
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	461a      	mov	r2, r3
 8001604:	f04f 0300 	mov.w	r3, #0
 8001608:	f7fe fdfc 	bl	8000204 <__aeabi_uldivmod>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	4613      	mov	r3, r2
 8001612:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001614:	4b63      	ldr	r3, [pc, #396]	; (80017a4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	0c1b      	lsrs	r3, r3, #16
 800161a:	f003 0303 	and.w	r3, r3, #3
 800161e:	3301      	adds	r3, #1
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8001624:	69fa      	ldr	r2, [r7, #28]
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	fbb2 f3f3 	udiv	r3, r2, r3
 800162c:	61bb      	str	r3, [r7, #24]
      break;
 800162e:	e0b2      	b.n	8001796 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001630:	4b5c      	ldr	r3, [pc, #368]	; (80017a4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001638:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800163a:	4b5a      	ldr	r3, [pc, #360]	; (80017a4 <HAL_RCC_GetSysClockFreq+0x358>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d04d      	beq.n	80016e2 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001646:	4b57      	ldr	r3, [pc, #348]	; (80017a4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	099b      	lsrs	r3, r3, #6
 800164c:	461a      	mov	r2, r3
 800164e:	f04f 0300 	mov.w	r3, #0
 8001652:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001656:	f04f 0100 	mov.w	r1, #0
 800165a:	ea02 0800 	and.w	r8, r2, r0
 800165e:	ea03 0901 	and.w	r9, r3, r1
 8001662:	4640      	mov	r0, r8
 8001664:	4649      	mov	r1, r9
 8001666:	f04f 0200 	mov.w	r2, #0
 800166a:	f04f 0300 	mov.w	r3, #0
 800166e:	014b      	lsls	r3, r1, #5
 8001670:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001674:	0142      	lsls	r2, r0, #5
 8001676:	4610      	mov	r0, r2
 8001678:	4619      	mov	r1, r3
 800167a:	ebb0 0008 	subs.w	r0, r0, r8
 800167e:	eb61 0109 	sbc.w	r1, r1, r9
 8001682:	f04f 0200 	mov.w	r2, #0
 8001686:	f04f 0300 	mov.w	r3, #0
 800168a:	018b      	lsls	r3, r1, #6
 800168c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001690:	0182      	lsls	r2, r0, #6
 8001692:	1a12      	subs	r2, r2, r0
 8001694:	eb63 0301 	sbc.w	r3, r3, r1
 8001698:	f04f 0000 	mov.w	r0, #0
 800169c:	f04f 0100 	mov.w	r1, #0
 80016a0:	00d9      	lsls	r1, r3, #3
 80016a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80016a6:	00d0      	lsls	r0, r2, #3
 80016a8:	4602      	mov	r2, r0
 80016aa:	460b      	mov	r3, r1
 80016ac:	eb12 0208 	adds.w	r2, r2, r8
 80016b0:	eb43 0309 	adc.w	r3, r3, r9
 80016b4:	f04f 0000 	mov.w	r0, #0
 80016b8:	f04f 0100 	mov.w	r1, #0
 80016bc:	0259      	lsls	r1, r3, #9
 80016be:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80016c2:	0250      	lsls	r0, r2, #9
 80016c4:	4602      	mov	r2, r0
 80016c6:	460b      	mov	r3, r1
 80016c8:	4610      	mov	r0, r2
 80016ca:	4619      	mov	r1, r3
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	461a      	mov	r2, r3
 80016d0:	f04f 0300 	mov.w	r3, #0
 80016d4:	f7fe fd96 	bl	8000204 <__aeabi_uldivmod>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	4613      	mov	r3, r2
 80016de:	61fb      	str	r3, [r7, #28]
 80016e0:	e04a      	b.n	8001778 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016e2:	4b30      	ldr	r3, [pc, #192]	; (80017a4 <HAL_RCC_GetSysClockFreq+0x358>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	099b      	lsrs	r3, r3, #6
 80016e8:	461a      	mov	r2, r3
 80016ea:	f04f 0300 	mov.w	r3, #0
 80016ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80016f2:	f04f 0100 	mov.w	r1, #0
 80016f6:	ea02 0400 	and.w	r4, r2, r0
 80016fa:	ea03 0501 	and.w	r5, r3, r1
 80016fe:	4620      	mov	r0, r4
 8001700:	4629      	mov	r1, r5
 8001702:	f04f 0200 	mov.w	r2, #0
 8001706:	f04f 0300 	mov.w	r3, #0
 800170a:	014b      	lsls	r3, r1, #5
 800170c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001710:	0142      	lsls	r2, r0, #5
 8001712:	4610      	mov	r0, r2
 8001714:	4619      	mov	r1, r3
 8001716:	1b00      	subs	r0, r0, r4
 8001718:	eb61 0105 	sbc.w	r1, r1, r5
 800171c:	f04f 0200 	mov.w	r2, #0
 8001720:	f04f 0300 	mov.w	r3, #0
 8001724:	018b      	lsls	r3, r1, #6
 8001726:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800172a:	0182      	lsls	r2, r0, #6
 800172c:	1a12      	subs	r2, r2, r0
 800172e:	eb63 0301 	sbc.w	r3, r3, r1
 8001732:	f04f 0000 	mov.w	r0, #0
 8001736:	f04f 0100 	mov.w	r1, #0
 800173a:	00d9      	lsls	r1, r3, #3
 800173c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001740:	00d0      	lsls	r0, r2, #3
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	1912      	adds	r2, r2, r4
 8001748:	eb45 0303 	adc.w	r3, r5, r3
 800174c:	f04f 0000 	mov.w	r0, #0
 8001750:	f04f 0100 	mov.w	r1, #0
 8001754:	0299      	lsls	r1, r3, #10
 8001756:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800175a:	0290      	lsls	r0, r2, #10
 800175c:	4602      	mov	r2, r0
 800175e:	460b      	mov	r3, r1
 8001760:	4610      	mov	r0, r2
 8001762:	4619      	mov	r1, r3
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	461a      	mov	r2, r3
 8001768:	f04f 0300 	mov.w	r3, #0
 800176c:	f7fe fd4a 	bl	8000204 <__aeabi_uldivmod>
 8001770:	4602      	mov	r2, r0
 8001772:	460b      	mov	r3, r1
 8001774:	4613      	mov	r3, r2
 8001776:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001778:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <HAL_RCC_GetSysClockFreq+0x358>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	0f1b      	lsrs	r3, r3, #28
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8001784:	69fa      	ldr	r2, [r7, #28]
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	fbb2 f3f3 	udiv	r3, r2, r3
 800178c:	61bb      	str	r3, [r7, #24]
      break;
 800178e:	e002      	b.n	8001796 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001790:	4b05      	ldr	r3, [pc, #20]	; (80017a8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001792:	61bb      	str	r3, [r7, #24]
      break;
 8001794:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001796:	69bb      	ldr	r3, [r7, #24]
}
 8001798:	4618      	mov	r0, r3
 800179a:	3720      	adds	r7, #32
 800179c:	46bd      	mov	sp, r7
 800179e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017a2:	bf00      	nop
 80017a4:	40023800 	.word	0x40023800
 80017a8:	00f42400 	.word	0x00f42400
 80017ac:	007a1200 	.word	0x007a1200

080017b0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d101      	bne.n	80017c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e28d      	b.n	8001cde <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f000 8083 	beq.w	80018d6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80017d0:	4b94      	ldr	r3, [pc, #592]	; (8001a24 <HAL_RCC_OscConfig+0x274>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f003 030c 	and.w	r3, r3, #12
 80017d8:	2b04      	cmp	r3, #4
 80017da:	d019      	beq.n	8001810 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017dc:	4b91      	ldr	r3, [pc, #580]	; (8001a24 <HAL_RCC_OscConfig+0x274>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80017e4:	2b08      	cmp	r3, #8
 80017e6:	d106      	bne.n	80017f6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017e8:	4b8e      	ldr	r3, [pc, #568]	; (8001a24 <HAL_RCC_OscConfig+0x274>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017f4:	d00c      	beq.n	8001810 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017f6:	4b8b      	ldr	r3, [pc, #556]	; (8001a24 <HAL_RCC_OscConfig+0x274>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017fe:	2b0c      	cmp	r3, #12
 8001800:	d112      	bne.n	8001828 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001802:	4b88      	ldr	r3, [pc, #544]	; (8001a24 <HAL_RCC_OscConfig+0x274>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800180a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800180e:	d10b      	bne.n	8001828 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001810:	4b84      	ldr	r3, [pc, #528]	; (8001a24 <HAL_RCC_OscConfig+0x274>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d05b      	beq.n	80018d4 <HAL_RCC_OscConfig+0x124>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d157      	bne.n	80018d4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e25a      	b.n	8001cde <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001830:	d106      	bne.n	8001840 <HAL_RCC_OscConfig+0x90>
 8001832:	4b7c      	ldr	r3, [pc, #496]	; (8001a24 <HAL_RCC_OscConfig+0x274>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a7b      	ldr	r2, [pc, #492]	; (8001a24 <HAL_RCC_OscConfig+0x274>)
 8001838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800183c:	6013      	str	r3, [r2, #0]
 800183e:	e01d      	b.n	800187c <HAL_RCC_OscConfig+0xcc>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001848:	d10c      	bne.n	8001864 <HAL_RCC_OscConfig+0xb4>
 800184a:	4b76      	ldr	r3, [pc, #472]	; (8001a24 <HAL_RCC_OscConfig+0x274>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a75      	ldr	r2, [pc, #468]	; (8001a24 <HAL_RCC_OscConfig+0x274>)
 8001850:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001854:	6013      	str	r3, [r2, #0]
 8001856:	4b73      	ldr	r3, [pc, #460]	; (8001a24 <HAL_RCC_OscConfig+0x274>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a72      	ldr	r2, [pc, #456]	; (8001a24 <HAL_RCC_OscConfig+0x274>)
 800185c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001860:	6013      	str	r3, [r2, #0]
 8001862:	e00b      	b.n	800187c <HAL_RCC_OscConfig+0xcc>
 8001864:	4b6f      	ldr	r3, [pc, #444]	; (8001a24 <HAL_RCC_OscConfig+0x274>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a6e      	ldr	r2, [pc, #440]	; (8001a24 <HAL_RCC_OscConfig+0x274>)
 800186a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800186e:	6013      	str	r3, [r2, #0]
 8001870:	4b6c      	ldr	r3, [pc, #432]	; (8001a24 <HAL_RCC_OscConfig+0x274>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a6b      	ldr	r2, [pc, #428]	; (8001a24 <HAL_RCC_OscConfig+0x274>)
 8001876:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800187a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d013      	beq.n	80018ac <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001884:	f7ff fa04 	bl	8000c90 <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800188c:	f7ff fa00 	bl	8000c90 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b64      	cmp	r3, #100	; 0x64
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e21f      	b.n	8001cde <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800189e:	4b61      	ldr	r3, [pc, #388]	; (8001a24 <HAL_RCC_OscConfig+0x274>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d0f0      	beq.n	800188c <HAL_RCC_OscConfig+0xdc>
 80018aa:	e014      	b.n	80018d6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ac:	f7ff f9f0 	bl	8000c90 <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018b4:	f7ff f9ec 	bl	8000c90 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b64      	cmp	r3, #100	; 0x64
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e20b      	b.n	8001cde <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018c6:	4b57      	ldr	r3, [pc, #348]	; (8001a24 <HAL_RCC_OscConfig+0x274>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1f0      	bne.n	80018b4 <HAL_RCC_OscConfig+0x104>
 80018d2:	e000      	b.n	80018d6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d06f      	beq.n	80019c2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80018e2:	4b50      	ldr	r3, [pc, #320]	; (8001a24 <HAL_RCC_OscConfig+0x274>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f003 030c 	and.w	r3, r3, #12
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d017      	beq.n	800191e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80018ee:	4b4d      	ldr	r3, [pc, #308]	; (8001a24 <HAL_RCC_OscConfig+0x274>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80018f6:	2b08      	cmp	r3, #8
 80018f8:	d105      	bne.n	8001906 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80018fa:	4b4a      	ldr	r3, [pc, #296]	; (8001a24 <HAL_RCC_OscConfig+0x274>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d00b      	beq.n	800191e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001906:	4b47      	ldr	r3, [pc, #284]	; (8001a24 <HAL_RCC_OscConfig+0x274>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800190e:	2b0c      	cmp	r3, #12
 8001910:	d11c      	bne.n	800194c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001912:	4b44      	ldr	r3, [pc, #272]	; (8001a24 <HAL_RCC_OscConfig+0x274>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d116      	bne.n	800194c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800191e:	4b41      	ldr	r3, [pc, #260]	; (8001a24 <HAL_RCC_OscConfig+0x274>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d005      	beq.n	8001936 <HAL_RCC_OscConfig+0x186>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d001      	beq.n	8001936 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e1d3      	b.n	8001cde <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001936:	4b3b      	ldr	r3, [pc, #236]	; (8001a24 <HAL_RCC_OscConfig+0x274>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	691b      	ldr	r3, [r3, #16]
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	4937      	ldr	r1, [pc, #220]	; (8001a24 <HAL_RCC_OscConfig+0x274>)
 8001946:	4313      	orrs	r3, r2
 8001948:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800194a:	e03a      	b.n	80019c2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d020      	beq.n	8001996 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001954:	4b34      	ldr	r3, [pc, #208]	; (8001a28 <HAL_RCC_OscConfig+0x278>)
 8001956:	2201      	movs	r2, #1
 8001958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800195a:	f7ff f999 	bl	8000c90 <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001960:	e008      	b.n	8001974 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001962:	f7ff f995 	bl	8000c90 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e1b4      	b.n	8001cde <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001974:	4b2b      	ldr	r3, [pc, #172]	; (8001a24 <HAL_RCC_OscConfig+0x274>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d0f0      	beq.n	8001962 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001980:	4b28      	ldr	r3, [pc, #160]	; (8001a24 <HAL_RCC_OscConfig+0x274>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	00db      	lsls	r3, r3, #3
 800198e:	4925      	ldr	r1, [pc, #148]	; (8001a24 <HAL_RCC_OscConfig+0x274>)
 8001990:	4313      	orrs	r3, r2
 8001992:	600b      	str	r3, [r1, #0]
 8001994:	e015      	b.n	80019c2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001996:	4b24      	ldr	r3, [pc, #144]	; (8001a28 <HAL_RCC_OscConfig+0x278>)
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199c:	f7ff f978 	bl	8000c90 <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019a4:	f7ff f974 	bl	8000c90 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e193      	b.n	8001cde <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019b6:	4b1b      	ldr	r3, [pc, #108]	; (8001a24 <HAL_RCC_OscConfig+0x274>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1f0      	bne.n	80019a4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0308 	and.w	r3, r3, #8
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d036      	beq.n	8001a3c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d016      	beq.n	8001a04 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019d6:	4b15      	ldr	r3, [pc, #84]	; (8001a2c <HAL_RCC_OscConfig+0x27c>)
 80019d8:	2201      	movs	r2, #1
 80019da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019dc:	f7ff f958 	bl	8000c90 <HAL_GetTick>
 80019e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019e2:	e008      	b.n	80019f6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019e4:	f7ff f954 	bl	8000c90 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e173      	b.n	8001cde <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019f6:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <HAL_RCC_OscConfig+0x274>)
 80019f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d0f0      	beq.n	80019e4 <HAL_RCC_OscConfig+0x234>
 8001a02:	e01b      	b.n	8001a3c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a04:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <HAL_RCC_OscConfig+0x27c>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a0a:	f7ff f941 	bl	8000c90 <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a10:	e00e      	b.n	8001a30 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a12:	f7ff f93d 	bl	8000c90 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d907      	bls.n	8001a30 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e15c      	b.n	8001cde <HAL_RCC_OscConfig+0x52e>
 8001a24:	40023800 	.word	0x40023800
 8001a28:	42470000 	.word	0x42470000
 8001a2c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a30:	4b8a      	ldr	r3, [pc, #552]	; (8001c5c <HAL_RCC_OscConfig+0x4ac>)
 8001a32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a34:	f003 0302 	and.w	r3, r3, #2
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d1ea      	bne.n	8001a12 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0304 	and.w	r3, r3, #4
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	f000 8097 	beq.w	8001b78 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a4e:	4b83      	ldr	r3, [pc, #524]	; (8001c5c <HAL_RCC_OscConfig+0x4ac>)
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d10f      	bne.n	8001a7a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60bb      	str	r3, [r7, #8]
 8001a5e:	4b7f      	ldr	r3, [pc, #508]	; (8001c5c <HAL_RCC_OscConfig+0x4ac>)
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	4a7e      	ldr	r2, [pc, #504]	; (8001c5c <HAL_RCC_OscConfig+0x4ac>)
 8001a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a68:	6413      	str	r3, [r2, #64]	; 0x40
 8001a6a:	4b7c      	ldr	r3, [pc, #496]	; (8001c5c <HAL_RCC_OscConfig+0x4ac>)
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a72:	60bb      	str	r3, [r7, #8]
 8001a74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a76:	2301      	movs	r3, #1
 8001a78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a7a:	4b79      	ldr	r3, [pc, #484]	; (8001c60 <HAL_RCC_OscConfig+0x4b0>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d118      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a86:	4b76      	ldr	r3, [pc, #472]	; (8001c60 <HAL_RCC_OscConfig+0x4b0>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a75      	ldr	r2, [pc, #468]	; (8001c60 <HAL_RCC_OscConfig+0x4b0>)
 8001a8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a92:	f7ff f8fd 	bl	8000c90 <HAL_GetTick>
 8001a96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a98:	e008      	b.n	8001aac <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a9a:	f7ff f8f9 	bl	8000c90 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e118      	b.n	8001cde <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aac:	4b6c      	ldr	r3, [pc, #432]	; (8001c60 <HAL_RCC_OscConfig+0x4b0>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d0f0      	beq.n	8001a9a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d106      	bne.n	8001ace <HAL_RCC_OscConfig+0x31e>
 8001ac0:	4b66      	ldr	r3, [pc, #408]	; (8001c5c <HAL_RCC_OscConfig+0x4ac>)
 8001ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ac4:	4a65      	ldr	r2, [pc, #404]	; (8001c5c <HAL_RCC_OscConfig+0x4ac>)
 8001ac6:	f043 0301 	orr.w	r3, r3, #1
 8001aca:	6713      	str	r3, [r2, #112]	; 0x70
 8001acc:	e01c      	b.n	8001b08 <HAL_RCC_OscConfig+0x358>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	2b05      	cmp	r3, #5
 8001ad4:	d10c      	bne.n	8001af0 <HAL_RCC_OscConfig+0x340>
 8001ad6:	4b61      	ldr	r3, [pc, #388]	; (8001c5c <HAL_RCC_OscConfig+0x4ac>)
 8001ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ada:	4a60      	ldr	r2, [pc, #384]	; (8001c5c <HAL_RCC_OscConfig+0x4ac>)
 8001adc:	f043 0304 	orr.w	r3, r3, #4
 8001ae0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ae2:	4b5e      	ldr	r3, [pc, #376]	; (8001c5c <HAL_RCC_OscConfig+0x4ac>)
 8001ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae6:	4a5d      	ldr	r2, [pc, #372]	; (8001c5c <HAL_RCC_OscConfig+0x4ac>)
 8001ae8:	f043 0301 	orr.w	r3, r3, #1
 8001aec:	6713      	str	r3, [r2, #112]	; 0x70
 8001aee:	e00b      	b.n	8001b08 <HAL_RCC_OscConfig+0x358>
 8001af0:	4b5a      	ldr	r3, [pc, #360]	; (8001c5c <HAL_RCC_OscConfig+0x4ac>)
 8001af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af4:	4a59      	ldr	r2, [pc, #356]	; (8001c5c <HAL_RCC_OscConfig+0x4ac>)
 8001af6:	f023 0301 	bic.w	r3, r3, #1
 8001afa:	6713      	str	r3, [r2, #112]	; 0x70
 8001afc:	4b57      	ldr	r3, [pc, #348]	; (8001c5c <HAL_RCC_OscConfig+0x4ac>)
 8001afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b00:	4a56      	ldr	r2, [pc, #344]	; (8001c5c <HAL_RCC_OscConfig+0x4ac>)
 8001b02:	f023 0304 	bic.w	r3, r3, #4
 8001b06:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d015      	beq.n	8001b3c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b10:	f7ff f8be 	bl	8000c90 <HAL_GetTick>
 8001b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b16:	e00a      	b.n	8001b2e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b18:	f7ff f8ba 	bl	8000c90 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e0d7      	b.n	8001cde <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b2e:	4b4b      	ldr	r3, [pc, #300]	; (8001c5c <HAL_RCC_OscConfig+0x4ac>)
 8001b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d0ee      	beq.n	8001b18 <HAL_RCC_OscConfig+0x368>
 8001b3a:	e014      	b.n	8001b66 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b3c:	f7ff f8a8 	bl	8000c90 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b42:	e00a      	b.n	8001b5a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b44:	f7ff f8a4 	bl	8000c90 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e0c1      	b.n	8001cde <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b5a:	4b40      	ldr	r3, [pc, #256]	; (8001c5c <HAL_RCC_OscConfig+0x4ac>)
 8001b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1ee      	bne.n	8001b44 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b66:	7dfb      	ldrb	r3, [r7, #23]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d105      	bne.n	8001b78 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b6c:	4b3b      	ldr	r3, [pc, #236]	; (8001c5c <HAL_RCC_OscConfig+0x4ac>)
 8001b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b70:	4a3a      	ldr	r2, [pc, #232]	; (8001c5c <HAL_RCC_OscConfig+0x4ac>)
 8001b72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b76:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	f000 80ad 	beq.w	8001cdc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b82:	4b36      	ldr	r3, [pc, #216]	; (8001c5c <HAL_RCC_OscConfig+0x4ac>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f003 030c 	and.w	r3, r3, #12
 8001b8a:	2b08      	cmp	r3, #8
 8001b8c:	d060      	beq.n	8001c50 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d145      	bne.n	8001c22 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b96:	4b33      	ldr	r3, [pc, #204]	; (8001c64 <HAL_RCC_OscConfig+0x4b4>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9c:	f7ff f878 	bl	8000c90 <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ba4:	f7ff f874 	bl	8000c90 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e093      	b.n	8001cde <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bb6:	4b29      	ldr	r3, [pc, #164]	; (8001c5c <HAL_RCC_OscConfig+0x4ac>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d1f0      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	69da      	ldr	r2, [r3, #28]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a1b      	ldr	r3, [r3, #32]
 8001bca:	431a      	orrs	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd0:	019b      	lsls	r3, r3, #6
 8001bd2:	431a      	orrs	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd8:	085b      	lsrs	r3, r3, #1
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	041b      	lsls	r3, r3, #16
 8001bde:	431a      	orrs	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be4:	061b      	lsls	r3, r3, #24
 8001be6:	431a      	orrs	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bec:	071b      	lsls	r3, r3, #28
 8001bee:	491b      	ldr	r1, [pc, #108]	; (8001c5c <HAL_RCC_OscConfig+0x4ac>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bf4:	4b1b      	ldr	r3, [pc, #108]	; (8001c64 <HAL_RCC_OscConfig+0x4b4>)
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bfa:	f7ff f849 	bl	8000c90 <HAL_GetTick>
 8001bfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c00:	e008      	b.n	8001c14 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c02:	f7ff f845 	bl	8000c90 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d901      	bls.n	8001c14 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e064      	b.n	8001cde <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c14:	4b11      	ldr	r3, [pc, #68]	; (8001c5c <HAL_RCC_OscConfig+0x4ac>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d0f0      	beq.n	8001c02 <HAL_RCC_OscConfig+0x452>
 8001c20:	e05c      	b.n	8001cdc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c22:	4b10      	ldr	r3, [pc, #64]	; (8001c64 <HAL_RCC_OscConfig+0x4b4>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c28:	f7ff f832 	bl	8000c90 <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c30:	f7ff f82e 	bl	8000c90 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e04d      	b.n	8001cde <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c42:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <HAL_RCC_OscConfig+0x4ac>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1f0      	bne.n	8001c30 <HAL_RCC_OscConfig+0x480>
 8001c4e:	e045      	b.n	8001cdc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d107      	bne.n	8001c68 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e040      	b.n	8001cde <HAL_RCC_OscConfig+0x52e>
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	40007000 	.word	0x40007000
 8001c64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c68:	4b1f      	ldr	r3, [pc, #124]	; (8001ce8 <HAL_RCC_OscConfig+0x538>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d030      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d129      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d122      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c98:	4013      	ands	r3, r2
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d119      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cae:	085b      	lsrs	r3, r3, #1
 8001cb0:	3b01      	subs	r3, #1
 8001cb2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d10f      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d107      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d001      	beq.n	8001cdc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e000      	b.n	8001cde <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40023800 	.word	0x40023800

08001cec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e041      	b.n	8001d82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d106      	bne.n	8001d18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7fe fe5e 	bl	80009d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2202      	movs	r2, #2
 8001d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	3304      	adds	r3, #4
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4610      	mov	r0, r2
 8001d2c:	f000 fad8 	bl	80022e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b082      	sub	sp, #8
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d101      	bne.n	8001d9c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e041      	b.n	8001e20 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d106      	bne.n	8001db6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f000 f839 	bl	8001e28 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2202      	movs	r2, #2
 8001dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	3304      	adds	r3, #4
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4610      	mov	r0, r2
 8001dca:	f000 fa89 	bl	80022e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2201      	movs	r2, #1
 8001de2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2201      	movs	r2, #1
 8001dea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2201      	movs	r2, #1
 8001df2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2201      	movs	r2, #1
 8001e02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2201      	movs	r2, #1
 8001e12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d109      	bne.n	8001e60 <HAL_TIM_PWM_Start+0x24>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	bf14      	ite	ne
 8001e58:	2301      	movne	r3, #1
 8001e5a:	2300      	moveq	r3, #0
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	e022      	b.n	8001ea6 <HAL_TIM_PWM_Start+0x6a>
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	2b04      	cmp	r3, #4
 8001e64:	d109      	bne.n	8001e7a <HAL_TIM_PWM_Start+0x3e>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	bf14      	ite	ne
 8001e72:	2301      	movne	r3, #1
 8001e74:	2300      	moveq	r3, #0
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	e015      	b.n	8001ea6 <HAL_TIM_PWM_Start+0x6a>
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	2b08      	cmp	r3, #8
 8001e7e:	d109      	bne.n	8001e94 <HAL_TIM_PWM_Start+0x58>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	bf14      	ite	ne
 8001e8c:	2301      	movne	r3, #1
 8001e8e:	2300      	moveq	r3, #0
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	e008      	b.n	8001ea6 <HAL_TIM_PWM_Start+0x6a>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	bf14      	ite	ne
 8001ea0:	2301      	movne	r3, #1
 8001ea2:	2300      	moveq	r3, #0
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e07c      	b.n	8001fa8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d104      	bne.n	8001ebe <HAL_TIM_PWM_Start+0x82>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2202      	movs	r2, #2
 8001eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ebc:	e013      	b.n	8001ee6 <HAL_TIM_PWM_Start+0xaa>
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	2b04      	cmp	r3, #4
 8001ec2:	d104      	bne.n	8001ece <HAL_TIM_PWM_Start+0x92>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ecc:	e00b      	b.n	8001ee6 <HAL_TIM_PWM_Start+0xaa>
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	2b08      	cmp	r3, #8
 8001ed2:	d104      	bne.n	8001ede <HAL_TIM_PWM_Start+0xa2>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2202      	movs	r2, #2
 8001ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001edc:	e003      	b.n	8001ee6 <HAL_TIM_PWM_Start+0xaa>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2202      	movs	r2, #2
 8001ee2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2201      	movs	r2, #1
 8001eec:	6839      	ldr	r1, [r7, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f000 fce0 	bl	80028b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a2d      	ldr	r2, [pc, #180]	; (8001fb0 <HAL_TIM_PWM_Start+0x174>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d004      	beq.n	8001f08 <HAL_TIM_PWM_Start+0xcc>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a2c      	ldr	r2, [pc, #176]	; (8001fb4 <HAL_TIM_PWM_Start+0x178>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d101      	bne.n	8001f0c <HAL_TIM_PWM_Start+0xd0>
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e000      	b.n	8001f0e <HAL_TIM_PWM_Start+0xd2>
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d007      	beq.n	8001f22 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f20:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a22      	ldr	r2, [pc, #136]	; (8001fb0 <HAL_TIM_PWM_Start+0x174>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d022      	beq.n	8001f72 <HAL_TIM_PWM_Start+0x136>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f34:	d01d      	beq.n	8001f72 <HAL_TIM_PWM_Start+0x136>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a1f      	ldr	r2, [pc, #124]	; (8001fb8 <HAL_TIM_PWM_Start+0x17c>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d018      	beq.n	8001f72 <HAL_TIM_PWM_Start+0x136>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a1d      	ldr	r2, [pc, #116]	; (8001fbc <HAL_TIM_PWM_Start+0x180>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d013      	beq.n	8001f72 <HAL_TIM_PWM_Start+0x136>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a1c      	ldr	r2, [pc, #112]	; (8001fc0 <HAL_TIM_PWM_Start+0x184>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d00e      	beq.n	8001f72 <HAL_TIM_PWM_Start+0x136>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a16      	ldr	r2, [pc, #88]	; (8001fb4 <HAL_TIM_PWM_Start+0x178>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d009      	beq.n	8001f72 <HAL_TIM_PWM_Start+0x136>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a18      	ldr	r2, [pc, #96]	; (8001fc4 <HAL_TIM_PWM_Start+0x188>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d004      	beq.n	8001f72 <HAL_TIM_PWM_Start+0x136>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a16      	ldr	r2, [pc, #88]	; (8001fc8 <HAL_TIM_PWM_Start+0x18c>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d111      	bne.n	8001f96 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f003 0307 	and.w	r3, r3, #7
 8001f7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2b06      	cmp	r3, #6
 8001f82:	d010      	beq.n	8001fa6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f042 0201 	orr.w	r2, r2, #1
 8001f92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f94:	e007      	b.n	8001fa6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f042 0201 	orr.w	r2, r2, #1
 8001fa4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3710      	adds	r7, #16
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40010000 	.word	0x40010000
 8001fb4:	40010400 	.word	0x40010400
 8001fb8:	40000400 	.word	0x40000400
 8001fbc:	40000800 	.word	0x40000800
 8001fc0:	40000c00 	.word	0x40000c00
 8001fc4:	40014000 	.word	0x40014000
 8001fc8:	40001800 	.word	0x40001800

08001fcc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d101      	bne.n	8001fea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	e0ae      	b.n	8002148 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2201      	movs	r2, #1
 8001fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2b0c      	cmp	r3, #12
 8001ff6:	f200 809f 	bhi.w	8002138 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001ffa:	a201      	add	r2, pc, #4	; (adr r2, 8002000 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002000:	08002035 	.word	0x08002035
 8002004:	08002139 	.word	0x08002139
 8002008:	08002139 	.word	0x08002139
 800200c:	08002139 	.word	0x08002139
 8002010:	08002075 	.word	0x08002075
 8002014:	08002139 	.word	0x08002139
 8002018:	08002139 	.word	0x08002139
 800201c:	08002139 	.word	0x08002139
 8002020:	080020b7 	.word	0x080020b7
 8002024:	08002139 	.word	0x08002139
 8002028:	08002139 	.word	0x08002139
 800202c:	08002139 	.word	0x08002139
 8002030:	080020f7 	.word	0x080020f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	68b9      	ldr	r1, [r7, #8]
 800203a:	4618      	mov	r0, r3
 800203c:	f000 f9f0 	bl	8002420 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	699a      	ldr	r2, [r3, #24]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f042 0208 	orr.w	r2, r2, #8
 800204e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	699a      	ldr	r2, [r3, #24]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f022 0204 	bic.w	r2, r2, #4
 800205e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6999      	ldr	r1, [r3, #24]
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	691a      	ldr	r2, [r3, #16]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	430a      	orrs	r2, r1
 8002070:	619a      	str	r2, [r3, #24]
      break;
 8002072:	e064      	b.n	800213e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	68b9      	ldr	r1, [r7, #8]
 800207a:	4618      	mov	r0, r3
 800207c:	f000 fa40 	bl	8002500 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	699a      	ldr	r2, [r3, #24]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800208e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	699a      	ldr	r2, [r3, #24]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800209e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6999      	ldr	r1, [r3, #24]
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	021a      	lsls	r2, r3, #8
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	430a      	orrs	r2, r1
 80020b2:	619a      	str	r2, [r3, #24]
      break;
 80020b4:	e043      	b.n	800213e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68b9      	ldr	r1, [r7, #8]
 80020bc:	4618      	mov	r0, r3
 80020be:	f000 fa95 	bl	80025ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	69da      	ldr	r2, [r3, #28]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f042 0208 	orr.w	r2, r2, #8
 80020d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	69da      	ldr	r2, [r3, #28]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f022 0204 	bic.w	r2, r2, #4
 80020e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	69d9      	ldr	r1, [r3, #28]
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	691a      	ldr	r2, [r3, #16]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	430a      	orrs	r2, r1
 80020f2:	61da      	str	r2, [r3, #28]
      break;
 80020f4:	e023      	b.n	800213e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68b9      	ldr	r1, [r7, #8]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f000 fae9 	bl	80026d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	69da      	ldr	r2, [r3, #28]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002110:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	69da      	ldr	r2, [r3, #28]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002120:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	69d9      	ldr	r1, [r3, #28]
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	691b      	ldr	r3, [r3, #16]
 800212c:	021a      	lsls	r2, r3, #8
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	430a      	orrs	r2, r1
 8002134:	61da      	str	r2, [r3, #28]
      break;
 8002136:	e002      	b.n	800213e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	75fb      	strb	r3, [r7, #23]
      break;
 800213c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002146:	7dfb      	ldrb	r3, [r7, #23]
}
 8002148:	4618      	mov	r0, r3
 800214a:	3718      	adds	r7, #24
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800215a:	2300      	movs	r3, #0
 800215c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002164:	2b01      	cmp	r3, #1
 8002166:	d101      	bne.n	800216c <HAL_TIM_ConfigClockSource+0x1c>
 8002168:	2302      	movs	r3, #2
 800216a:	e0b4      	b.n	80022d6 <HAL_TIM_ConfigClockSource+0x186>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2202      	movs	r2, #2
 8002178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800218a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002192:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	68ba      	ldr	r2, [r7, #8]
 800219a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021a4:	d03e      	beq.n	8002224 <HAL_TIM_ConfigClockSource+0xd4>
 80021a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021aa:	f200 8087 	bhi.w	80022bc <HAL_TIM_ConfigClockSource+0x16c>
 80021ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021b2:	f000 8086 	beq.w	80022c2 <HAL_TIM_ConfigClockSource+0x172>
 80021b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021ba:	d87f      	bhi.n	80022bc <HAL_TIM_ConfigClockSource+0x16c>
 80021bc:	2b70      	cmp	r3, #112	; 0x70
 80021be:	d01a      	beq.n	80021f6 <HAL_TIM_ConfigClockSource+0xa6>
 80021c0:	2b70      	cmp	r3, #112	; 0x70
 80021c2:	d87b      	bhi.n	80022bc <HAL_TIM_ConfigClockSource+0x16c>
 80021c4:	2b60      	cmp	r3, #96	; 0x60
 80021c6:	d050      	beq.n	800226a <HAL_TIM_ConfigClockSource+0x11a>
 80021c8:	2b60      	cmp	r3, #96	; 0x60
 80021ca:	d877      	bhi.n	80022bc <HAL_TIM_ConfigClockSource+0x16c>
 80021cc:	2b50      	cmp	r3, #80	; 0x50
 80021ce:	d03c      	beq.n	800224a <HAL_TIM_ConfigClockSource+0xfa>
 80021d0:	2b50      	cmp	r3, #80	; 0x50
 80021d2:	d873      	bhi.n	80022bc <HAL_TIM_ConfigClockSource+0x16c>
 80021d4:	2b40      	cmp	r3, #64	; 0x40
 80021d6:	d058      	beq.n	800228a <HAL_TIM_ConfigClockSource+0x13a>
 80021d8:	2b40      	cmp	r3, #64	; 0x40
 80021da:	d86f      	bhi.n	80022bc <HAL_TIM_ConfigClockSource+0x16c>
 80021dc:	2b30      	cmp	r3, #48	; 0x30
 80021de:	d064      	beq.n	80022aa <HAL_TIM_ConfigClockSource+0x15a>
 80021e0:	2b30      	cmp	r3, #48	; 0x30
 80021e2:	d86b      	bhi.n	80022bc <HAL_TIM_ConfigClockSource+0x16c>
 80021e4:	2b20      	cmp	r3, #32
 80021e6:	d060      	beq.n	80022aa <HAL_TIM_ConfigClockSource+0x15a>
 80021e8:	2b20      	cmp	r3, #32
 80021ea:	d867      	bhi.n	80022bc <HAL_TIM_ConfigClockSource+0x16c>
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d05c      	beq.n	80022aa <HAL_TIM_ConfigClockSource+0x15a>
 80021f0:	2b10      	cmp	r3, #16
 80021f2:	d05a      	beq.n	80022aa <HAL_TIM_ConfigClockSource+0x15a>
 80021f4:	e062      	b.n	80022bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6818      	ldr	r0, [r3, #0]
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	6899      	ldr	r1, [r3, #8]
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685a      	ldr	r2, [r3, #4]
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	f000 fb35 	bl	8002874 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002218:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68ba      	ldr	r2, [r7, #8]
 8002220:	609a      	str	r2, [r3, #8]
      break;
 8002222:	e04f      	b.n	80022c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6818      	ldr	r0, [r3, #0]
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	6899      	ldr	r1, [r3, #8]
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685a      	ldr	r2, [r3, #4]
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	f000 fb1e 	bl	8002874 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	689a      	ldr	r2, [r3, #8]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002246:	609a      	str	r2, [r3, #8]
      break;
 8002248:	e03c      	b.n	80022c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6818      	ldr	r0, [r3, #0]
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	6859      	ldr	r1, [r3, #4]
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	461a      	mov	r2, r3
 8002258:	f000 fa92 	bl	8002780 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2150      	movs	r1, #80	; 0x50
 8002262:	4618      	mov	r0, r3
 8002264:	f000 faeb 	bl	800283e <TIM_ITRx_SetConfig>
      break;
 8002268:	e02c      	b.n	80022c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6818      	ldr	r0, [r3, #0]
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	6859      	ldr	r1, [r3, #4]
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	461a      	mov	r2, r3
 8002278:	f000 fab1 	bl	80027de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2160      	movs	r1, #96	; 0x60
 8002282:	4618      	mov	r0, r3
 8002284:	f000 fadb 	bl	800283e <TIM_ITRx_SetConfig>
      break;
 8002288:	e01c      	b.n	80022c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6818      	ldr	r0, [r3, #0]
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	6859      	ldr	r1, [r3, #4]
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	461a      	mov	r2, r3
 8002298:	f000 fa72 	bl	8002780 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2140      	movs	r1, #64	; 0x40
 80022a2:	4618      	mov	r0, r3
 80022a4:	f000 facb 	bl	800283e <TIM_ITRx_SetConfig>
      break;
 80022a8:	e00c      	b.n	80022c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4619      	mov	r1, r3
 80022b4:	4610      	mov	r0, r2
 80022b6:	f000 fac2 	bl	800283e <TIM_ITRx_SetConfig>
      break;
 80022ba:	e003      	b.n	80022c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	73fb      	strb	r3, [r7, #15]
      break;
 80022c0:	e000      	b.n	80022c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80022c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80022d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
	...

080022e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a40      	ldr	r2, [pc, #256]	; (80023f4 <TIM_Base_SetConfig+0x114>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d013      	beq.n	8002320 <TIM_Base_SetConfig+0x40>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022fe:	d00f      	beq.n	8002320 <TIM_Base_SetConfig+0x40>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4a3d      	ldr	r2, [pc, #244]	; (80023f8 <TIM_Base_SetConfig+0x118>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d00b      	beq.n	8002320 <TIM_Base_SetConfig+0x40>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a3c      	ldr	r2, [pc, #240]	; (80023fc <TIM_Base_SetConfig+0x11c>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d007      	beq.n	8002320 <TIM_Base_SetConfig+0x40>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a3b      	ldr	r2, [pc, #236]	; (8002400 <TIM_Base_SetConfig+0x120>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d003      	beq.n	8002320 <TIM_Base_SetConfig+0x40>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4a3a      	ldr	r2, [pc, #232]	; (8002404 <TIM_Base_SetConfig+0x124>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d108      	bne.n	8002332 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002326:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	68fa      	ldr	r2, [r7, #12]
 800232e:	4313      	orrs	r3, r2
 8002330:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a2f      	ldr	r2, [pc, #188]	; (80023f4 <TIM_Base_SetConfig+0x114>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d02b      	beq.n	8002392 <TIM_Base_SetConfig+0xb2>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002340:	d027      	beq.n	8002392 <TIM_Base_SetConfig+0xb2>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a2c      	ldr	r2, [pc, #176]	; (80023f8 <TIM_Base_SetConfig+0x118>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d023      	beq.n	8002392 <TIM_Base_SetConfig+0xb2>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a2b      	ldr	r2, [pc, #172]	; (80023fc <TIM_Base_SetConfig+0x11c>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d01f      	beq.n	8002392 <TIM_Base_SetConfig+0xb2>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a2a      	ldr	r2, [pc, #168]	; (8002400 <TIM_Base_SetConfig+0x120>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d01b      	beq.n	8002392 <TIM_Base_SetConfig+0xb2>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a29      	ldr	r2, [pc, #164]	; (8002404 <TIM_Base_SetConfig+0x124>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d017      	beq.n	8002392 <TIM_Base_SetConfig+0xb2>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a28      	ldr	r2, [pc, #160]	; (8002408 <TIM_Base_SetConfig+0x128>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d013      	beq.n	8002392 <TIM_Base_SetConfig+0xb2>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a27      	ldr	r2, [pc, #156]	; (800240c <TIM_Base_SetConfig+0x12c>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d00f      	beq.n	8002392 <TIM_Base_SetConfig+0xb2>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a26      	ldr	r2, [pc, #152]	; (8002410 <TIM_Base_SetConfig+0x130>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d00b      	beq.n	8002392 <TIM_Base_SetConfig+0xb2>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a25      	ldr	r2, [pc, #148]	; (8002414 <TIM_Base_SetConfig+0x134>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d007      	beq.n	8002392 <TIM_Base_SetConfig+0xb2>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a24      	ldr	r2, [pc, #144]	; (8002418 <TIM_Base_SetConfig+0x138>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d003      	beq.n	8002392 <TIM_Base_SetConfig+0xb2>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a23      	ldr	r2, [pc, #140]	; (800241c <TIM_Base_SetConfig+0x13c>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d108      	bne.n	80023a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002398:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a0a      	ldr	r2, [pc, #40]	; (80023f4 <TIM_Base_SetConfig+0x114>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d003      	beq.n	80023d8 <TIM_Base_SetConfig+0xf8>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a0c      	ldr	r2, [pc, #48]	; (8002404 <TIM_Base_SetConfig+0x124>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d103      	bne.n	80023e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	691a      	ldr	r2, [r3, #16]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	615a      	str	r2, [r3, #20]
}
 80023e6:	bf00      	nop
 80023e8:	3714      	adds	r7, #20
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	40010000 	.word	0x40010000
 80023f8:	40000400 	.word	0x40000400
 80023fc:	40000800 	.word	0x40000800
 8002400:	40000c00 	.word	0x40000c00
 8002404:	40010400 	.word	0x40010400
 8002408:	40014000 	.word	0x40014000
 800240c:	40014400 	.word	0x40014400
 8002410:	40014800 	.word	0x40014800
 8002414:	40001800 	.word	0x40001800
 8002418:	40001c00 	.word	0x40001c00
 800241c:	40002000 	.word	0x40002000

08002420 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002420:	b480      	push	{r7}
 8002422:	b087      	sub	sp, #28
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	f023 0201 	bic.w	r2, r3, #1
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a1b      	ldr	r3, [r3, #32]
 800243a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800244e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f023 0303 	bic.w	r3, r3, #3
 8002456:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68fa      	ldr	r2, [r7, #12]
 800245e:	4313      	orrs	r3, r2
 8002460:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	f023 0302 	bic.w	r3, r3, #2
 8002468:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	4313      	orrs	r3, r2
 8002472:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a20      	ldr	r2, [pc, #128]	; (80024f8 <TIM_OC1_SetConfig+0xd8>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d003      	beq.n	8002484 <TIM_OC1_SetConfig+0x64>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a1f      	ldr	r2, [pc, #124]	; (80024fc <TIM_OC1_SetConfig+0xdc>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d10c      	bne.n	800249e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	f023 0308 	bic.w	r3, r3, #8
 800248a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	697a      	ldr	r2, [r7, #20]
 8002492:	4313      	orrs	r3, r2
 8002494:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	f023 0304 	bic.w	r3, r3, #4
 800249c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a15      	ldr	r2, [pc, #84]	; (80024f8 <TIM_OC1_SetConfig+0xd8>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d003      	beq.n	80024ae <TIM_OC1_SetConfig+0x8e>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a14      	ldr	r2, [pc, #80]	; (80024fc <TIM_OC1_SetConfig+0xdc>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d111      	bne.n	80024d2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80024bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685a      	ldr	r2, [r3, #4]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	621a      	str	r2, [r3, #32]
}
 80024ec:	bf00      	nop
 80024ee:	371c      	adds	r7, #28
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr
 80024f8:	40010000 	.word	0x40010000
 80024fc:	40010400 	.word	0x40010400

08002500 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002500:	b480      	push	{r7}
 8002502:	b087      	sub	sp, #28
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a1b      	ldr	r3, [r3, #32]
 800250e:	f023 0210 	bic.w	r2, r3, #16
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a1b      	ldr	r3, [r3, #32]
 800251a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800252e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002536:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	021b      	lsls	r3, r3, #8
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	4313      	orrs	r3, r2
 8002542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	f023 0320 	bic.w	r3, r3, #32
 800254a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	011b      	lsls	r3, r3, #4
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	4313      	orrs	r3, r2
 8002556:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4a22      	ldr	r2, [pc, #136]	; (80025e4 <TIM_OC2_SetConfig+0xe4>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d003      	beq.n	8002568 <TIM_OC2_SetConfig+0x68>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4a21      	ldr	r2, [pc, #132]	; (80025e8 <TIM_OC2_SetConfig+0xe8>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d10d      	bne.n	8002584 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800256e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	011b      	lsls	r3, r3, #4
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	4313      	orrs	r3, r2
 800257a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002582:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4a17      	ldr	r2, [pc, #92]	; (80025e4 <TIM_OC2_SetConfig+0xe4>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d003      	beq.n	8002594 <TIM_OC2_SetConfig+0x94>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4a16      	ldr	r2, [pc, #88]	; (80025e8 <TIM_OC2_SetConfig+0xe8>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d113      	bne.n	80025bc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800259a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80025a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685a      	ldr	r2, [r3, #4]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	621a      	str	r2, [r3, #32]
}
 80025d6:	bf00      	nop
 80025d8:	371c      	adds	r7, #28
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	40010000 	.word	0x40010000
 80025e8:	40010400 	.word	0x40010400

080025ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b087      	sub	sp, #28
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a1b      	ldr	r3, [r3, #32]
 80025fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	69db      	ldr	r3, [r3, #28]
 8002612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800261a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f023 0303 	bic.w	r3, r3, #3
 8002622:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	4313      	orrs	r3, r2
 800262c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002634:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	021b      	lsls	r3, r3, #8
 800263c:	697a      	ldr	r2, [r7, #20]
 800263e:	4313      	orrs	r3, r2
 8002640:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a21      	ldr	r2, [pc, #132]	; (80026cc <TIM_OC3_SetConfig+0xe0>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d003      	beq.n	8002652 <TIM_OC3_SetConfig+0x66>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a20      	ldr	r2, [pc, #128]	; (80026d0 <TIM_OC3_SetConfig+0xe4>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d10d      	bne.n	800266e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002658:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	021b      	lsls	r3, r3, #8
 8002660:	697a      	ldr	r2, [r7, #20]
 8002662:	4313      	orrs	r3, r2
 8002664:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800266c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a16      	ldr	r2, [pc, #88]	; (80026cc <TIM_OC3_SetConfig+0xe0>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d003      	beq.n	800267e <TIM_OC3_SetConfig+0x92>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a15      	ldr	r2, [pc, #84]	; (80026d0 <TIM_OC3_SetConfig+0xe4>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d113      	bne.n	80026a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002684:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800268c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	695b      	ldr	r3, [r3, #20]
 8002692:	011b      	lsls	r3, r3, #4
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	4313      	orrs	r3, r2
 8002698:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	011b      	lsls	r3, r3, #4
 80026a0:	693a      	ldr	r2, [r7, #16]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685a      	ldr	r2, [r3, #4]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	697a      	ldr	r2, [r7, #20]
 80026be:	621a      	str	r2, [r3, #32]
}
 80026c0:	bf00      	nop
 80026c2:	371c      	adds	r7, #28
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	40010000 	.word	0x40010000
 80026d0:	40010400 	.word	0x40010400

080026d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b087      	sub	sp, #28
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a1b      	ldr	r3, [r3, #32]
 80026e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	69db      	ldr	r3, [r3, #28]
 80026fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800270a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	021b      	lsls	r3, r3, #8
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	4313      	orrs	r3, r2
 8002716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800271e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	031b      	lsls	r3, r3, #12
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	4313      	orrs	r3, r2
 800272a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4a12      	ldr	r2, [pc, #72]	; (8002778 <TIM_OC4_SetConfig+0xa4>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d003      	beq.n	800273c <TIM_OC4_SetConfig+0x68>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4a11      	ldr	r2, [pc, #68]	; (800277c <TIM_OC4_SetConfig+0xa8>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d109      	bne.n	8002750 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002742:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	019b      	lsls	r3, r3, #6
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	4313      	orrs	r3, r2
 800274e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	68fa      	ldr	r2, [r7, #12]
 800275a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685a      	ldr	r2, [r3, #4]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	621a      	str	r2, [r3, #32]
}
 800276a:	bf00      	nop
 800276c:	371c      	adds	r7, #28
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	40010000 	.word	0x40010000
 800277c:	40010400 	.word	0x40010400

08002780 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002780:	b480      	push	{r7}
 8002782:	b087      	sub	sp, #28
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6a1b      	ldr	r3, [r3, #32]
 8002790:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6a1b      	ldr	r3, [r3, #32]
 8002796:	f023 0201 	bic.w	r2, r3, #1
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	011b      	lsls	r3, r3, #4
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	f023 030a 	bic.w	r3, r3, #10
 80027bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80027be:	697a      	ldr	r2, [r7, #20]
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	697a      	ldr	r2, [r7, #20]
 80027d0:	621a      	str	r2, [r3, #32]
}
 80027d2:	bf00      	nop
 80027d4:	371c      	adds	r7, #28
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr

080027de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027de:	b480      	push	{r7}
 80027e0:	b087      	sub	sp, #28
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	60f8      	str	r0, [r7, #12]
 80027e6:	60b9      	str	r1, [r7, #8]
 80027e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6a1b      	ldr	r3, [r3, #32]
 80027ee:	f023 0210 	bic.w	r2, r3, #16
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6a1b      	ldr	r3, [r3, #32]
 8002800:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002808:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	031b      	lsls	r3, r3, #12
 800280e:	697a      	ldr	r2, [r7, #20]
 8002810:	4313      	orrs	r3, r2
 8002812:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800281a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	011b      	lsls	r3, r3, #4
 8002820:	693a      	ldr	r2, [r7, #16]
 8002822:	4313      	orrs	r3, r2
 8002824:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	697a      	ldr	r2, [r7, #20]
 800282a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	621a      	str	r2, [r3, #32]
}
 8002832:	bf00      	nop
 8002834:	371c      	adds	r7, #28
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr

0800283e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800283e:	b480      	push	{r7}
 8002840:	b085      	sub	sp, #20
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
 8002846:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002854:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	4313      	orrs	r3, r2
 800285c:	f043 0307 	orr.w	r3, r3, #7
 8002860:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	609a      	str	r2, [r3, #8]
}
 8002868:	bf00      	nop
 800286a:	3714      	adds	r7, #20
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002874:	b480      	push	{r7}
 8002876:	b087      	sub	sp, #28
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
 8002880:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800288e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	021a      	lsls	r2, r3, #8
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	431a      	orrs	r2, r3
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	4313      	orrs	r3, r2
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	4313      	orrs	r3, r2
 80028a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	697a      	ldr	r2, [r7, #20]
 80028a6:	609a      	str	r2, [r3, #8]
}
 80028a8:	bf00      	nop
 80028aa:	371c      	adds	r7, #28
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b087      	sub	sp, #28
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	f003 031f 	and.w	r3, r3, #31
 80028c6:	2201      	movs	r2, #1
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6a1a      	ldr	r2, [r3, #32]
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	43db      	mvns	r3, r3
 80028d6:	401a      	ands	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6a1a      	ldr	r2, [r3, #32]
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	f003 031f 	and.w	r3, r3, #31
 80028e6:	6879      	ldr	r1, [r7, #4]
 80028e8:	fa01 f303 	lsl.w	r3, r1, r3
 80028ec:	431a      	orrs	r2, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	621a      	str	r2, [r3, #32]
}
 80028f2:	bf00      	nop
 80028f4:	371c      	adds	r7, #28
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
	...

08002900 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002910:	2b01      	cmp	r3, #1
 8002912:	d101      	bne.n	8002918 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002914:	2302      	movs	r3, #2
 8002916:	e05a      	b.n	80029ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2202      	movs	r2, #2
 8002924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800293e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	4313      	orrs	r3, r2
 8002948:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a21      	ldr	r2, [pc, #132]	; (80029dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d022      	beq.n	80029a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002964:	d01d      	beq.n	80029a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a1d      	ldr	r2, [pc, #116]	; (80029e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d018      	beq.n	80029a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a1b      	ldr	r2, [pc, #108]	; (80029e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d013      	beq.n	80029a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a1a      	ldr	r2, [pc, #104]	; (80029e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d00e      	beq.n	80029a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a18      	ldr	r2, [pc, #96]	; (80029ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d009      	beq.n	80029a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a17      	ldr	r2, [pc, #92]	; (80029f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d004      	beq.n	80029a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a15      	ldr	r2, [pc, #84]	; (80029f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d10c      	bne.n	80029bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	68ba      	ldr	r2, [r7, #8]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68ba      	ldr	r2, [r7, #8]
 80029ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3714      	adds	r7, #20
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	40010000 	.word	0x40010000
 80029e0:	40000400 	.word	0x40000400
 80029e4:	40000800 	.word	0x40000800
 80029e8:	40000c00 	.word	0x40000c00
 80029ec:	40010400 	.word	0x40010400
 80029f0:	40014000 	.word	0x40014000
 80029f4:	40001800 	.word	0x40001800

080029f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002a02:	2300      	movs	r3, #0
 8002a04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d101      	bne.n	8002a14 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002a10:	2302      	movs	r3, #2
 8002a12:	e03d      	b.n	8002a90 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	695b      	ldr	r3, [r3, #20]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	69db      	ldr	r3, [r3, #28]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3714      	adds	r7, #20
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e03f      	b.n	8002b2e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d106      	bne.n	8002ac8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f7fe f80c 	bl	8000ae0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2224      	movs	r2, #36	; 0x24
 8002acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68da      	ldr	r2, [r3, #12]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ade:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f000 f929 	bl	8002d38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	691a      	ldr	r2, [r3, #16]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002af4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	695a      	ldr	r2, [r3, #20]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68da      	ldr	r2, [r3, #12]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2220      	movs	r2, #32
 8002b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2220      	movs	r2, #32
 8002b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b08a      	sub	sp, #40	; 0x28
 8002b3a:	af02      	add	r7, sp, #8
 8002b3c:	60f8      	str	r0, [r7, #12]
 8002b3e:	60b9      	str	r1, [r7, #8]
 8002b40:	603b      	str	r3, [r7, #0]
 8002b42:	4613      	mov	r3, r2
 8002b44:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b46:	2300      	movs	r3, #0
 8002b48:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b20      	cmp	r3, #32
 8002b54:	d17c      	bne.n	8002c50 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d002      	beq.n	8002b62 <HAL_UART_Transmit+0x2c>
 8002b5c:	88fb      	ldrh	r3, [r7, #6]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e075      	b.n	8002c52 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d101      	bne.n	8002b74 <HAL_UART_Transmit+0x3e>
 8002b70:	2302      	movs	r3, #2
 8002b72:	e06e      	b.n	8002c52 <HAL_UART_Transmit+0x11c>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2221      	movs	r2, #33	; 0x21
 8002b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b8a:	f7fe f881 	bl	8000c90 <HAL_GetTick>
 8002b8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	88fa      	ldrh	r2, [r7, #6]
 8002b94:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	88fa      	ldrh	r2, [r7, #6]
 8002b9a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ba4:	d108      	bne.n	8002bb8 <HAL_UART_Transmit+0x82>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d104      	bne.n	8002bb8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	61bb      	str	r3, [r7, #24]
 8002bb6:	e003      	b.n	8002bc0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002bc8:	e02a      	b.n	8002c20 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	9300      	str	r3, [sp, #0]
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	2180      	movs	r1, #128	; 0x80
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	f000 f840 	bl	8002c5a <UART_WaitOnFlagUntilTimeout>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e036      	b.n	8002c52 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d10b      	bne.n	8002c02 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	881b      	ldrh	r3, [r3, #0]
 8002bee:	461a      	mov	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bf8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	3302      	adds	r3, #2
 8002bfe:	61bb      	str	r3, [r7, #24]
 8002c00:	e007      	b.n	8002c12 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	781a      	ldrb	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	3301      	adds	r3, #1
 8002c10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1cf      	bne.n	8002bca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	9300      	str	r3, [sp, #0]
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	2200      	movs	r2, #0
 8002c32:	2140      	movs	r1, #64	; 0x40
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	f000 f810 	bl	8002c5a <UART_WaitOnFlagUntilTimeout>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e006      	b.n	8002c52 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2220      	movs	r2, #32
 8002c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	e000      	b.n	8002c52 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002c50:	2302      	movs	r3, #2
  }
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3720      	adds	r7, #32
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b090      	sub	sp, #64	; 0x40
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	60f8      	str	r0, [r7, #12]
 8002c62:	60b9      	str	r1, [r7, #8]
 8002c64:	603b      	str	r3, [r7, #0]
 8002c66:	4613      	mov	r3, r2
 8002c68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c6a:	e050      	b.n	8002d0e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c72:	d04c      	beq.n	8002d0e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d007      	beq.n	8002c8a <UART_WaitOnFlagUntilTimeout+0x30>
 8002c7a:	f7fe f809 	bl	8000c90 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d241      	bcs.n	8002d0e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	330c      	adds	r3, #12
 8002c90:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c94:	e853 3f00 	ldrex	r3, [r3]
 8002c98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	330c      	adds	r3, #12
 8002ca8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002caa:	637a      	str	r2, [r7, #52]	; 0x34
 8002cac:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002cb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cb2:	e841 2300 	strex	r3, r2, [r1]
 8002cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1e5      	bne.n	8002c8a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	3314      	adds	r3, #20
 8002cc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	e853 3f00 	ldrex	r3, [r3]
 8002ccc:	613b      	str	r3, [r7, #16]
   return(result);
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	f023 0301 	bic.w	r3, r3, #1
 8002cd4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	3314      	adds	r3, #20
 8002cdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cde:	623a      	str	r2, [r7, #32]
 8002ce0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ce2:	69f9      	ldr	r1, [r7, #28]
 8002ce4:	6a3a      	ldr	r2, [r7, #32]
 8002ce6:	e841 2300 	strex	r3, r2, [r1]
 8002cea:	61bb      	str	r3, [r7, #24]
   return(result);
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1e5      	bne.n	8002cbe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2220      	movs	r2, #32
 8002cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2220      	movs	r2, #32
 8002cfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e00f      	b.n	8002d2e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	4013      	ands	r3, r2
 8002d18:	68ba      	ldr	r2, [r7, #8]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	bf0c      	ite	eq
 8002d1e:	2301      	moveq	r3, #1
 8002d20:	2300      	movne	r3, #0
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	461a      	mov	r2, r3
 8002d26:	79fb      	ldrb	r3, [r7, #7]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d09f      	beq.n	8002c6c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3740      	adds	r7, #64	; 0x40
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
	...

08002d38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d3c:	b09f      	sub	sp, #124	; 0x7c
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002d4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d4e:	68d9      	ldr	r1, [r3, #12]
 8002d50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	ea40 0301 	orr.w	r3, r0, r1
 8002d58:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d5c:	689a      	ldr	r2, [r3, #8]
 8002d5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	431a      	orrs	r2, r3
 8002d64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d66:	695b      	ldr	r3, [r3, #20]
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d6c:	69db      	ldr	r3, [r3, #28]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002d72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002d7c:	f021 010c 	bic.w	r1, r1, #12
 8002d80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d86:	430b      	orrs	r3, r1
 8002d88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002d94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d96:	6999      	ldr	r1, [r3, #24]
 8002d98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	ea40 0301 	orr.w	r3, r0, r1
 8002da0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002da2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	4bc5      	ldr	r3, [pc, #788]	; (80030bc <UART_SetConfig+0x384>)
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d004      	beq.n	8002db6 <UART_SetConfig+0x7e>
 8002dac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	4bc3      	ldr	r3, [pc, #780]	; (80030c0 <UART_SetConfig+0x388>)
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d103      	bne.n	8002dbe <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002db6:	f7fe fb35 	bl	8001424 <HAL_RCC_GetPCLK2Freq>
 8002dba:	6778      	str	r0, [r7, #116]	; 0x74
 8002dbc:	e002      	b.n	8002dc4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002dbe:	f7fe fb1d 	bl	80013fc <HAL_RCC_GetPCLK1Freq>
 8002dc2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dc6:	69db      	ldr	r3, [r3, #28]
 8002dc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dcc:	f040 80b6 	bne.w	8002f3c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002dd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dd2:	461c      	mov	r4, r3
 8002dd4:	f04f 0500 	mov.w	r5, #0
 8002dd8:	4622      	mov	r2, r4
 8002dda:	462b      	mov	r3, r5
 8002ddc:	1891      	adds	r1, r2, r2
 8002dde:	6439      	str	r1, [r7, #64]	; 0x40
 8002de0:	415b      	adcs	r3, r3
 8002de2:	647b      	str	r3, [r7, #68]	; 0x44
 8002de4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002de8:	1912      	adds	r2, r2, r4
 8002dea:	eb45 0303 	adc.w	r3, r5, r3
 8002dee:	f04f 0000 	mov.w	r0, #0
 8002df2:	f04f 0100 	mov.w	r1, #0
 8002df6:	00d9      	lsls	r1, r3, #3
 8002df8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002dfc:	00d0      	lsls	r0, r2, #3
 8002dfe:	4602      	mov	r2, r0
 8002e00:	460b      	mov	r3, r1
 8002e02:	1911      	adds	r1, r2, r4
 8002e04:	6639      	str	r1, [r7, #96]	; 0x60
 8002e06:	416b      	adcs	r3, r5
 8002e08:	667b      	str	r3, [r7, #100]	; 0x64
 8002e0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	f04f 0300 	mov.w	r3, #0
 8002e14:	1891      	adds	r1, r2, r2
 8002e16:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e18:	415b      	adcs	r3, r3
 8002e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002e20:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002e24:	f7fd f9ee 	bl	8000204 <__aeabi_uldivmod>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	4ba5      	ldr	r3, [pc, #660]	; (80030c4 <UART_SetConfig+0x38c>)
 8002e2e:	fba3 2302 	umull	r2, r3, r3, r2
 8002e32:	095b      	lsrs	r3, r3, #5
 8002e34:	011e      	lsls	r6, r3, #4
 8002e36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e38:	461c      	mov	r4, r3
 8002e3a:	f04f 0500 	mov.w	r5, #0
 8002e3e:	4622      	mov	r2, r4
 8002e40:	462b      	mov	r3, r5
 8002e42:	1891      	adds	r1, r2, r2
 8002e44:	6339      	str	r1, [r7, #48]	; 0x30
 8002e46:	415b      	adcs	r3, r3
 8002e48:	637b      	str	r3, [r7, #52]	; 0x34
 8002e4a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002e4e:	1912      	adds	r2, r2, r4
 8002e50:	eb45 0303 	adc.w	r3, r5, r3
 8002e54:	f04f 0000 	mov.w	r0, #0
 8002e58:	f04f 0100 	mov.w	r1, #0
 8002e5c:	00d9      	lsls	r1, r3, #3
 8002e5e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e62:	00d0      	lsls	r0, r2, #3
 8002e64:	4602      	mov	r2, r0
 8002e66:	460b      	mov	r3, r1
 8002e68:	1911      	adds	r1, r2, r4
 8002e6a:	65b9      	str	r1, [r7, #88]	; 0x58
 8002e6c:	416b      	adcs	r3, r5
 8002e6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	461a      	mov	r2, r3
 8002e76:	f04f 0300 	mov.w	r3, #0
 8002e7a:	1891      	adds	r1, r2, r2
 8002e7c:	62b9      	str	r1, [r7, #40]	; 0x28
 8002e7e:	415b      	adcs	r3, r3
 8002e80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e86:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002e8a:	f7fd f9bb 	bl	8000204 <__aeabi_uldivmod>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	460b      	mov	r3, r1
 8002e92:	4b8c      	ldr	r3, [pc, #560]	; (80030c4 <UART_SetConfig+0x38c>)
 8002e94:	fba3 1302 	umull	r1, r3, r3, r2
 8002e98:	095b      	lsrs	r3, r3, #5
 8002e9a:	2164      	movs	r1, #100	; 0x64
 8002e9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	3332      	adds	r3, #50	; 0x32
 8002ea6:	4a87      	ldr	r2, [pc, #540]	; (80030c4 <UART_SetConfig+0x38c>)
 8002ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8002eac:	095b      	lsrs	r3, r3, #5
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002eb4:	441e      	add	r6, r3
 8002eb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f04f 0100 	mov.w	r1, #0
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	1894      	adds	r4, r2, r2
 8002ec4:	623c      	str	r4, [r7, #32]
 8002ec6:	415b      	adcs	r3, r3
 8002ec8:	627b      	str	r3, [r7, #36]	; 0x24
 8002eca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002ece:	1812      	adds	r2, r2, r0
 8002ed0:	eb41 0303 	adc.w	r3, r1, r3
 8002ed4:	f04f 0400 	mov.w	r4, #0
 8002ed8:	f04f 0500 	mov.w	r5, #0
 8002edc:	00dd      	lsls	r5, r3, #3
 8002ede:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002ee2:	00d4      	lsls	r4, r2, #3
 8002ee4:	4622      	mov	r2, r4
 8002ee6:	462b      	mov	r3, r5
 8002ee8:	1814      	adds	r4, r2, r0
 8002eea:	653c      	str	r4, [r7, #80]	; 0x50
 8002eec:	414b      	adcs	r3, r1
 8002eee:	657b      	str	r3, [r7, #84]	; 0x54
 8002ef0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	f04f 0300 	mov.w	r3, #0
 8002efa:	1891      	adds	r1, r2, r2
 8002efc:	61b9      	str	r1, [r7, #24]
 8002efe:	415b      	adcs	r3, r3
 8002f00:	61fb      	str	r3, [r7, #28]
 8002f02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f06:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002f0a:	f7fd f97b 	bl	8000204 <__aeabi_uldivmod>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	460b      	mov	r3, r1
 8002f12:	4b6c      	ldr	r3, [pc, #432]	; (80030c4 <UART_SetConfig+0x38c>)
 8002f14:	fba3 1302 	umull	r1, r3, r3, r2
 8002f18:	095b      	lsrs	r3, r3, #5
 8002f1a:	2164      	movs	r1, #100	; 0x64
 8002f1c:	fb01 f303 	mul.w	r3, r1, r3
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	3332      	adds	r3, #50	; 0x32
 8002f26:	4a67      	ldr	r2, [pc, #412]	; (80030c4 <UART_SetConfig+0x38c>)
 8002f28:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2c:	095b      	lsrs	r3, r3, #5
 8002f2e:	f003 0207 	and.w	r2, r3, #7
 8002f32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4432      	add	r2, r6
 8002f38:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002f3a:	e0b9      	b.n	80030b0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f3e:	461c      	mov	r4, r3
 8002f40:	f04f 0500 	mov.w	r5, #0
 8002f44:	4622      	mov	r2, r4
 8002f46:	462b      	mov	r3, r5
 8002f48:	1891      	adds	r1, r2, r2
 8002f4a:	6139      	str	r1, [r7, #16]
 8002f4c:	415b      	adcs	r3, r3
 8002f4e:	617b      	str	r3, [r7, #20]
 8002f50:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002f54:	1912      	adds	r2, r2, r4
 8002f56:	eb45 0303 	adc.w	r3, r5, r3
 8002f5a:	f04f 0000 	mov.w	r0, #0
 8002f5e:	f04f 0100 	mov.w	r1, #0
 8002f62:	00d9      	lsls	r1, r3, #3
 8002f64:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f68:	00d0      	lsls	r0, r2, #3
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	eb12 0804 	adds.w	r8, r2, r4
 8002f72:	eb43 0905 	adc.w	r9, r3, r5
 8002f76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f04f 0100 	mov.w	r1, #0
 8002f80:	f04f 0200 	mov.w	r2, #0
 8002f84:	f04f 0300 	mov.w	r3, #0
 8002f88:	008b      	lsls	r3, r1, #2
 8002f8a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002f8e:	0082      	lsls	r2, r0, #2
 8002f90:	4640      	mov	r0, r8
 8002f92:	4649      	mov	r1, r9
 8002f94:	f7fd f936 	bl	8000204 <__aeabi_uldivmod>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	4b49      	ldr	r3, [pc, #292]	; (80030c4 <UART_SetConfig+0x38c>)
 8002f9e:	fba3 2302 	umull	r2, r3, r3, r2
 8002fa2:	095b      	lsrs	r3, r3, #5
 8002fa4:	011e      	lsls	r6, r3, #4
 8002fa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f04f 0100 	mov.w	r1, #0
 8002fae:	4602      	mov	r2, r0
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	1894      	adds	r4, r2, r2
 8002fb4:	60bc      	str	r4, [r7, #8]
 8002fb6:	415b      	adcs	r3, r3
 8002fb8:	60fb      	str	r3, [r7, #12]
 8002fba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002fbe:	1812      	adds	r2, r2, r0
 8002fc0:	eb41 0303 	adc.w	r3, r1, r3
 8002fc4:	f04f 0400 	mov.w	r4, #0
 8002fc8:	f04f 0500 	mov.w	r5, #0
 8002fcc:	00dd      	lsls	r5, r3, #3
 8002fce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002fd2:	00d4      	lsls	r4, r2, #3
 8002fd4:	4622      	mov	r2, r4
 8002fd6:	462b      	mov	r3, r5
 8002fd8:	1814      	adds	r4, r2, r0
 8002fda:	64bc      	str	r4, [r7, #72]	; 0x48
 8002fdc:	414b      	adcs	r3, r1
 8002fde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f04f 0100 	mov.w	r1, #0
 8002fea:	f04f 0200 	mov.w	r2, #0
 8002fee:	f04f 0300 	mov.w	r3, #0
 8002ff2:	008b      	lsls	r3, r1, #2
 8002ff4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002ff8:	0082      	lsls	r2, r0, #2
 8002ffa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002ffe:	f7fd f901 	bl	8000204 <__aeabi_uldivmod>
 8003002:	4602      	mov	r2, r0
 8003004:	460b      	mov	r3, r1
 8003006:	4b2f      	ldr	r3, [pc, #188]	; (80030c4 <UART_SetConfig+0x38c>)
 8003008:	fba3 1302 	umull	r1, r3, r3, r2
 800300c:	095b      	lsrs	r3, r3, #5
 800300e:	2164      	movs	r1, #100	; 0x64
 8003010:	fb01 f303 	mul.w	r3, r1, r3
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	011b      	lsls	r3, r3, #4
 8003018:	3332      	adds	r3, #50	; 0x32
 800301a:	4a2a      	ldr	r2, [pc, #168]	; (80030c4 <UART_SetConfig+0x38c>)
 800301c:	fba2 2303 	umull	r2, r3, r2, r3
 8003020:	095b      	lsrs	r3, r3, #5
 8003022:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003026:	441e      	add	r6, r3
 8003028:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800302a:	4618      	mov	r0, r3
 800302c:	f04f 0100 	mov.w	r1, #0
 8003030:	4602      	mov	r2, r0
 8003032:	460b      	mov	r3, r1
 8003034:	1894      	adds	r4, r2, r2
 8003036:	603c      	str	r4, [r7, #0]
 8003038:	415b      	adcs	r3, r3
 800303a:	607b      	str	r3, [r7, #4]
 800303c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003040:	1812      	adds	r2, r2, r0
 8003042:	eb41 0303 	adc.w	r3, r1, r3
 8003046:	f04f 0400 	mov.w	r4, #0
 800304a:	f04f 0500 	mov.w	r5, #0
 800304e:	00dd      	lsls	r5, r3, #3
 8003050:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003054:	00d4      	lsls	r4, r2, #3
 8003056:	4622      	mov	r2, r4
 8003058:	462b      	mov	r3, r5
 800305a:	eb12 0a00 	adds.w	sl, r2, r0
 800305e:	eb43 0b01 	adc.w	fp, r3, r1
 8003062:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	4618      	mov	r0, r3
 8003068:	f04f 0100 	mov.w	r1, #0
 800306c:	f04f 0200 	mov.w	r2, #0
 8003070:	f04f 0300 	mov.w	r3, #0
 8003074:	008b      	lsls	r3, r1, #2
 8003076:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800307a:	0082      	lsls	r2, r0, #2
 800307c:	4650      	mov	r0, sl
 800307e:	4659      	mov	r1, fp
 8003080:	f7fd f8c0 	bl	8000204 <__aeabi_uldivmod>
 8003084:	4602      	mov	r2, r0
 8003086:	460b      	mov	r3, r1
 8003088:	4b0e      	ldr	r3, [pc, #56]	; (80030c4 <UART_SetConfig+0x38c>)
 800308a:	fba3 1302 	umull	r1, r3, r3, r2
 800308e:	095b      	lsrs	r3, r3, #5
 8003090:	2164      	movs	r1, #100	; 0x64
 8003092:	fb01 f303 	mul.w	r3, r1, r3
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	011b      	lsls	r3, r3, #4
 800309a:	3332      	adds	r3, #50	; 0x32
 800309c:	4a09      	ldr	r2, [pc, #36]	; (80030c4 <UART_SetConfig+0x38c>)
 800309e:	fba2 2303 	umull	r2, r3, r2, r3
 80030a2:	095b      	lsrs	r3, r3, #5
 80030a4:	f003 020f 	and.w	r2, r3, #15
 80030a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4432      	add	r2, r6
 80030ae:	609a      	str	r2, [r3, #8]
}
 80030b0:	bf00      	nop
 80030b2:	377c      	adds	r7, #124	; 0x7c
 80030b4:	46bd      	mov	sp, r7
 80030b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030ba:	bf00      	nop
 80030bc:	40011000 	.word	0x40011000
 80030c0:	40011400 	.word	0x40011400
 80030c4:	51eb851f 	.word	0x51eb851f

080030c8 <__libc_init_array>:
 80030c8:	b570      	push	{r4, r5, r6, lr}
 80030ca:	4d0d      	ldr	r5, [pc, #52]	; (8003100 <__libc_init_array+0x38>)
 80030cc:	4c0d      	ldr	r4, [pc, #52]	; (8003104 <__libc_init_array+0x3c>)
 80030ce:	1b64      	subs	r4, r4, r5
 80030d0:	10a4      	asrs	r4, r4, #2
 80030d2:	2600      	movs	r6, #0
 80030d4:	42a6      	cmp	r6, r4
 80030d6:	d109      	bne.n	80030ec <__libc_init_array+0x24>
 80030d8:	4d0b      	ldr	r5, [pc, #44]	; (8003108 <__libc_init_array+0x40>)
 80030da:	4c0c      	ldr	r4, [pc, #48]	; (800310c <__libc_init_array+0x44>)
 80030dc:	f000 f820 	bl	8003120 <_init>
 80030e0:	1b64      	subs	r4, r4, r5
 80030e2:	10a4      	asrs	r4, r4, #2
 80030e4:	2600      	movs	r6, #0
 80030e6:	42a6      	cmp	r6, r4
 80030e8:	d105      	bne.n	80030f6 <__libc_init_array+0x2e>
 80030ea:	bd70      	pop	{r4, r5, r6, pc}
 80030ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80030f0:	4798      	blx	r3
 80030f2:	3601      	adds	r6, #1
 80030f4:	e7ee      	b.n	80030d4 <__libc_init_array+0xc>
 80030f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80030fa:	4798      	blx	r3
 80030fc:	3601      	adds	r6, #1
 80030fe:	e7f2      	b.n	80030e6 <__libc_init_array+0x1e>
 8003100:	0800316c 	.word	0x0800316c
 8003104:	0800316c 	.word	0x0800316c
 8003108:	0800316c 	.word	0x0800316c
 800310c:	08003170 	.word	0x08003170

08003110 <memset>:
 8003110:	4402      	add	r2, r0
 8003112:	4603      	mov	r3, r0
 8003114:	4293      	cmp	r3, r2
 8003116:	d100      	bne.n	800311a <memset+0xa>
 8003118:	4770      	bx	lr
 800311a:	f803 1b01 	strb.w	r1, [r3], #1
 800311e:	e7f9      	b.n	8003114 <memset+0x4>

08003120 <_init>:
 8003120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003122:	bf00      	nop
 8003124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003126:	bc08      	pop	{r3}
 8003128:	469e      	mov	lr, r3
 800312a:	4770      	bx	lr

0800312c <_fini>:
 800312c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800312e:	bf00      	nop
 8003130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003132:	bc08      	pop	{r3}
 8003134:	469e      	mov	lr, r3
 8003136:	4770      	bx	lr
